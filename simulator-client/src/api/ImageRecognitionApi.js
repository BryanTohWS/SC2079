/**
 * MDP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImagePredictionResponse from '../model/ImagePredictionResponse';
import ValidationErrorModel from '../model/ValidationErrorModel';

/**
* ImageRecognition service.
* @module api/ImageRecognitionApi
* @version 1.0.0
*/
export default class ImageRecognitionApi {

    /**
    * Constructs a new ImageRecognitionApi. 
    * @alias module:api/ImageRecognitionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the imagePredictionTask1Post operation.
     * @callback module:api/ImageRecognitionApi~imagePredictionTask1PostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePredictionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {File} file 
     * @param {module:api/ImageRecognitionApi~imagePredictionTask1PostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePredictionResponse}
     */
    imagePredictionTask1Post(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling imagePredictionTask1Post");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImagePredictionResponse;
      return this.apiClient.callApi(
        '/image/prediction/task-1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imagePredictionTask2Post operation.
     * @callback module:api/ImageRecognitionApi~imagePredictionTask2PostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePredictionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {File} file 
     * @param {module:api/ImageRecognitionApi~imagePredictionTask2PostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePredictionResponse}
     */
    imagePredictionTask2Post(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling imagePredictionTask2Post");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImagePredictionResponse;
      return this.apiClient.callApi(
        '/image/prediction/task-2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imageStitchPost operation.
     * @callback module:api/ImageRecognitionApi~imageStitchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ImageRecognitionApi~imageStitchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imageStitchPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/image/stitch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
