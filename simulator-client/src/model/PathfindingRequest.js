/**
 * MDP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PathfindingRequestObstacle from './PathfindingRequestObstacle';
import PathfindingRequestRobot from './PathfindingRequestRobot';

/**
 * The PathfindingRequest model module.
 * @module model/PathfindingRequest
 * @version 1.0.0
 */
class PathfindingRequest {
    /**
     * Constructs a new <code>PathfindingRequest</code>.
     * @alias module:model/PathfindingRequest
     * @param obstacles {Array.<module:model/PathfindingRequestObstacle>} 
     * @param robot {module:model/PathfindingRequestRobot} The initial position of the robot.
     */
    constructor(obstacles, robot) { 
        
        PathfindingRequest.initialize(this, obstacles, robot);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, obstacles, robot) { 
        obj['obstacles'] = obstacles;
        obj['robot'] = robot;
    }

    /**
     * Constructs a <code>PathfindingRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PathfindingRequest} obj Optional instance to populate.
     * @return {module:model/PathfindingRequest} The populated <code>PathfindingRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PathfindingRequest();

            if (data.hasOwnProperty('obstacles')) {
                obj['obstacles'] = ApiClient.convertToType(data['obstacles'], [PathfindingRequestObstacle]);
            }
            if (data.hasOwnProperty('robot')) {
                obj['robot'] = ApiClient.convertToType(data['robot'], PathfindingRequestRobot);
            }
            if (data.hasOwnProperty('verbose')) {
                obj['verbose'] = ApiClient.convertToType(data['verbose'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PathfindingRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PathfindingRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PathfindingRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['obstacles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['obstacles'])) {
                throw new Error("Expected the field `obstacles` to be an array in the JSON data but got " + data['obstacles']);
            }
            // validate the optional field `obstacles` (array)
            for (const item of data['obstacles']) {
                PathfindingRequestObstacle.validateJSON(item);
            };
        }
        // validate the optional field `robot`
        if (data['robot']) { // data not null
          PathfindingRequestRobot.validateJSON(data['robot']);
        }

        return true;
    }


}

PathfindingRequest.RequiredProperties = ["obstacles", "robot"];

/**
 * @member {Array.<module:model/PathfindingRequestObstacle>} obstacles
 */
PathfindingRequest.prototype['obstacles'] = undefined;

/**
 * The initial position of the robot.
 * @member {module:model/PathfindingRequestRobot} robot
 */
PathfindingRequest.prototype['robot'] = undefined;

/**
 * Whether to attach the path and cost alongside the movement instructions in the response.
 * @member {Boolean} verbose
 * @default true
 */
PathfindingRequest.prototype['verbose'] = true;






export default PathfindingRequest;

