/**
 * MDP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PathfindingResponseSegment from './PathfindingResponseSegment';

/**
 * The PathfindingResponse model module.
 * @module model/PathfindingResponse
 * @version 1.0.0
 */
class PathfindingResponse {
    /**
     * Constructs a new <code>PathfindingResponse</code>.
     * @alias module:model/PathfindingResponse
     * @param segments {Array.<module:model/PathfindingResponseSegment>} The data for moving the robot from the start/objective to another objective.
     */
    constructor(segments) { 
        
        PathfindingResponse.initialize(this, segments);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, segments) { 
        obj['segments'] = segments;
    }

    /**
     * Constructs a <code>PathfindingResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PathfindingResponse} obj Optional instance to populate.
     * @return {module:model/PathfindingResponse} The populated <code>PathfindingResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PathfindingResponse();

            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ApiClient.convertToType(data['segments'], [PathfindingResponseSegment]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PathfindingResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PathfindingResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PathfindingResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['segments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['segments'])) {
                throw new Error("Expected the field `segments` to be an array in the JSON data but got " + data['segments']);
            }
            // validate the optional field `segments` (array)
            for (const item of data['segments']) {
                PathfindingResponseSegment.validateJSON(item);
            };
        }

        return true;
    }


}

PathfindingResponse.RequiredProperties = ["segments"];

/**
 * The data for moving the robot from the start/objective to another objective.
 * @member {Array.<module:model/PathfindingResponseSegment>} segments
 */
PathfindingResponse.prototype['segments'] = undefined;






export default PathfindingResponse;

