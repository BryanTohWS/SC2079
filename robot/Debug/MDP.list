
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001168  08010d98  08010d98  00020d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f00  08011f00  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08011f00  08011f00  00021f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f08  08011f08  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f08  08011f08  00021f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f0c  08011f0c  00021f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08011f10  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          0000093c  200001e8  200001e8  000301e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b24  20000b24  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017dee  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b7a  00000000  00000000  00048049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001570  00000000  00000000  0004bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010ae  00000000  00000000  0004d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026283  00000000  00000000  0004e1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bff7  00000000  00000000  00074469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dfe30  00000000  00000000  00090460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000073e8  00000000  00000000  00170290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00177678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010d80 	.word	0x08010d80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08010d80 	.word	0x08010d80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_ICM20948_SelectUserBank>:

#include "ICM20948.h"

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	b2db      	uxtb	r3, r3
 800100a:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <_ICM20948_SelectUserBank+0x26>
 8001012:	2368      	movs	r3, #104	; 0x68
 8001014:	e000      	b.n	8001018 <_ICM20948_SelectUserBank+0x28>
 8001016:	2369      	movs	r3, #105	; 0x69
 8001018:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800101a:	7dbb      	ldrb	r3, [r7, #22]
 800101c:	b29b      	uxth	r3, r3
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b299      	uxth	r1, r3
 8001022:	230a      	movs	r3, #10
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2301      	movs	r3, #1
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 0315 	add.w	r3, r7, #21
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	227f      	movs	r2, #127	; 0x7f
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f004 fd4b 	bl	8005ad0 <HAL_I2C_Mem_Write>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4603      	mov	r3, r0
 8001058:	70fb      	strb	r3, [r7, #3]
 800105a:	460b      	mov	r3, r1
 800105c:	70bb      	strb	r3, [r7, #2]
 800105e:	4613      	mov	r3, r2
 8001060:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <_ICM20948_WriteByte+0x28>
 800106c:	2368      	movs	r3, #104	; 0x68
 800106e:	e000      	b.n	8001072 <_ICM20948_WriteByte+0x2a>
 8001070:	2369      	movs	r3, #105	; 0x69
 8001072:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	b29b      	uxth	r3, r3
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b299      	uxth	r1, r3
 800107c:	78bb      	ldrb	r3, [r7, #2]
 800107e:	b29a      	uxth	r2, r3
 8001080:	230a      	movs	r3, #10
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1c7b      	adds	r3, r7, #1
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f004 fd1e 	bl	8005ad0 <HAL_I2C_Mem_Write>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b088      	sub	sp, #32
 80010a6:	af04      	add	r7, sp, #16
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	70fb      	strb	r3, [r7, #3]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70bb      	strb	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <_ICM20948_BrustRead+0x28>
 80010c6:	2368      	movs	r3, #104	; 0x68
 80010c8:	e000      	b.n	80010cc <_ICM20948_BrustRead+0x2a>
 80010ca:	2369      	movs	r3, #105	; 0x69
 80010cc:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b299      	uxth	r1, r3
 80010d6:	78bb      	ldrb	r3, [r7, #2]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	230a      	movs	r3, #10
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	883b      	ldrh	r3, [r7, #0]
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f004 fdeb 	bl	8005cc4 <HAL_I2C_Mem_Read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	b29a      	uxth	r2, r3
 8001114:	230a      	movs	r3, #10
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	1cbb      	adds	r3, r7, #2
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2118      	movs	r1, #24
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f004 fcd3 	bl	8005ad0 <HAL_I2C_Mem_Write>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_AK09916_ReadByte>:

HAL_StatusTypeDef _AK09916_ReadByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t *readData) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af04      	add	r7, sp, #16
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	460b      	mov	r3, r1
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	b29a      	uxth	r2, r3
 800114e:	230a      	movs	r3, #10
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	2118      	movs	r1, #24
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f004 fdb0 	bl	8005cc4 <HAL_I2C_Mem_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001168:	7dfb      	ldrb	r3, [r7, #23]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_AK09916_BrustRead>:

HAL_StatusTypeDef _AK09916_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b08a      	sub	sp, #40	; 0x28
 8001176:	af04      	add	r7, sp, #16
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	72fb      	strb	r3, [r7, #11]
 8001180:	4613      	mov	r3, r2
 8001182:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	b29a      	uxth	r2, r3
 800118c:	230a      	movs	r3, #10
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	893b      	ldrh	r3, [r7, #8]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2118      	movs	r1, #24
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f004 fd91 	bl	8005cc4 <HAL_I2C_Mem_Read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	70fb      	strb	r3, [r7, #3]
 80011c2:	460b      	mov	r3, r1
 80011c4:	70bb      	strb	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff0b 	bl	8000ff0 <_ICM20948_SelectUserBank>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 80011de:	78f9      	ldrb	r1, [r7, #3]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	2206      	movs	r2, #6
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff2f 	bl	8001048 <_ICM20948_WriteByte>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 80011ee:	20c8      	movs	r0, #200	; 0xc8
 80011f0:	f003 fbc8 	bl	8004984 <HAL_Delay>

	status = _ICM20948_WriteByte(
 80011f4:	78f9      	ldrb	r1, [r7, #3]
 80011f6:	2301      	movs	r3, #1
 80011f8:	2206      	movs	r2, #6
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff24 	bl	8001048 <_ICM20948_WriteByte>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8001204:	78f9      	ldrb	r1, [r7, #3]
 8001206:	2300      	movs	r3, #0
 8001208:	2207      	movs	r2, #7
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff1c 	bl	8001048 <_ICM20948_WriteByte>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2202      	movs	r2, #2
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fee8 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8001230:	b2db      	uxtb	r3, r3
 8001232:	78f9      	ldrb	r1, [r7, #3]
 8001234:	2201      	movs	r2, #1
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff06 	bl	8001048 <_ICM20948_WriteByte>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8001240:	78f9      	ldrb	r1, [r7, #3]
 8001242:	2304      	movs	r3, #4
 8001244:	2200      	movs	r2, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fefe 	bl	8001048 <_ICM20948_WriteByte>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	b25b      	sxtb	r3, r3
 8001256:	f043 0309 	orr.w	r3, r3, #9
 800125a:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800125c:	b2db      	uxtb	r3, r3
 800125e:	78f9      	ldrb	r1, [r7, #3]
 8001260:	2214      	movs	r2, #20
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fef0 	bl	8001048 <_ICM20948_WriteByte>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 800126c:	78f9      	ldrb	r1, [r7, #3]
 800126e:	2304      	movs	r3, #4
 8001270:	2211      	movs	r2, #17
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fee8 	bl	8001048 <_ICM20948_WriteByte>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff feb4 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800128c:	78f9      	ldrb	r1, [r7, #3]
 800128e:	2302      	movs	r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fed8 	bl	8001048 <_ICM20948_WriteByte>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 800129c:	2208      	movs	r2, #8
 800129e:	2131      	movs	r1, #49	; 0x31
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff2b 	bl	80010fc <_AK09916_WriteByte>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	0000      	movs	r0, r0
 80012b4:	0000      	movs	r0, r0
	...

080012b8 <ICM20948_readGyroscope_Z>:

void ICM20948_readGyroscope_Z(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float *gyroZ) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	72fb      	strb	r3, [r7, #11]
 80012c6:	4613      	mov	r3, r2
 80012c8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[2];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_ZOUT_H__REGISTER, 2, readData);
 80012ca:	7af9      	ldrb	r1, [r7, #11]
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2302      	movs	r3, #2
 80012d4:	2237      	movs	r2, #55	; 0x37
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff fee3 	bl	80010a2 <_ICM20948_BrustRead>

	int16_t reading = readData[0]<<8 | readData[1];
 80012dc:	7d3b      	ldrb	r3, [r7, #20]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	7d7b      	ldrb	r3, [r7, #21]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	82fb      	strh	r3, [r7, #22]
	*gyroZ = (float) -reading;
 80012ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012ee:	425b      	negs	r3, r3
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edc3 7a00 	vstr	s15, [r3]
	switch (selectGyroSensitivity) {
 80012fe:	7abb      	ldrb	r3, [r7, #10]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d849      	bhi.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <ICM20948_readGyroscope_Z+0x54>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001333 	.word	0x08001333
 8001314:	08001349 	.word	0x08001349
 8001318:	08001371 	.word	0x08001371
		case GYRO_FULL_SCALE_250DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	eddf 6a23 	vldr	s13, [pc, #140]	; 80013b0 <ICM20948_readGyroscope_Z+0xf8>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001330:	e032      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_500DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80013b4 <ICM20948_readGyroscope_Z+0xfc>
 800133c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001346:	e027      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_1000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8fb 	bl	8000548 <__aeabi_f2d>
 8001352:	a313      	add	r3, pc, #76	; (adr r3, 80013a0 <ICM20948_readGyroscope_Z+0xe8>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff fa78 	bl	800084c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc40 	bl	8000be8 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	601a      	str	r2, [r3, #0]
			break;
 800136e:	e013      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_2000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	a30b      	add	r3, pc, #44	; (adr r3, 80013a8 <ICM20948_readGyroscope_Z+0xf0>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fa64 	bl	800084c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc2c 	bl	8000be8 <__aeabi_d2f>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
			break;
 8001396:	bf00      	nop
	}

}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	66666666 	.word	0x66666666
 80013a4:	40406666 	.word	0x40406666
 80013a8:	66666666 	.word	0x66666666
 80013ac:	40306666 	.word	0x40306666
 80013b0:	43030000 	.word	0x43030000
 80013b4:	42830000 	.word	0x42830000

080013b8 <ICM20948_readAccelerometer_all>:

void ICM20948_readAccelerometer_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, float readings[3]) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af02      	add	r7, sp, #8
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	72fb      	strb	r3, [r7, #11]
 80013c6:	4613      	mov	r3, r2
 80013c8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 80013ca:	7af9      	ldrb	r1, [r7, #11]
 80013cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2306      	movs	r3, #6
 80013d4:	222d      	movs	r2, #45	; 0x2d
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff fe63 	bl	80010a2 <_ICM20948_BrustRead>


	int16_t rD_int[3];
	rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 80013dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	843b      	strh	r3, [r7, #32]
	rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 80013f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21b      	sxth	r3, r3
 8001402:	847b      	strh	r3, [r7, #34]	; 0x22
	rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8001404:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21b      	sxth	r3, r3
 8001416:	84bb      	strh	r3, [r7, #36]	; 0x24

	float rD[3];
	rD[X] = (float) rD_int[X];
 8001418:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001424:	edc7 7a05 	vstr	s15, [r7, #20]
	rD[Y] = (float) rD_int[Y];
 8001428:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001434:	edc7 7a06 	vstr	s15, [r7, #24]
	rD[Z] = (float) rD_int[Z];
 8001438:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001444:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (selectAccelSensitivity) {
 8001448:	7abb      	ldrb	r3, [r7, #10]
 800144a:	2b03      	cmp	r3, #3
 800144c:	f200 8084 	bhi.w	8001558 <ICM20948_readAccelerometer_all+0x1a0>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <ICM20948_readAccelerometer_all+0xa0>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001469 	.word	0x08001469
 800145c:	080014a5 	.word	0x080014a5
 8001460:	080014e1 	.word	0x080014e1
 8001464:	0800151d 	.word	0x0800151d
		case ACCEL_FULL_SCALE_2G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8001468:	ed97 7a05 	vldr	s14, [r7, #20]
 800146c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 8001470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800147a:	ed97 7a06 	vldr	s14, [r7, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3304      	adds	r3, #4
 8001482:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 8001486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148a:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800148e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3308      	adds	r3, #8
 8001496:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 800149a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149e:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014a2:	e059      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_4G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80014a8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3304      	adds	r3, #4
 80014be:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c6:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3308      	adds	r3, #8
 80014d2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014da:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014de:	e03b      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_8G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 80014e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 80014e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 80014f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3304      	adds	r3, #4
 80014fa:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 80014fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001502:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8001506:	ed97 7a07 	vldr	s14, [r7, #28]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3308      	adds	r3, #8
 800150e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 8001512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001516:	edc3 7a00 	vstr	s15, [r3]
			break;
 800151a:	e01d      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_16G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800151c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001520:	eddf 6a12 	vldr	s13, [pc, #72]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 8001524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800152e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 800153a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153e:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8001542:	ed97 7a07 	vldr	s14, [r7, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3308      	adds	r3, #8
 800154a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001556:	bf00      	nop
	}
}
 8001558:	bf00      	nop
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	46800000 	.word	0x46800000
 8001564:	46000000 	.word	0x46000000
 8001568:	45800000 	.word	0x45800000
 800156c:	45000000 	.word	0x45000000

08001570 <ICM20948_readMagnetometer_XY>:

void ICM20948_readMagnetometer_XY(I2C_HandleTypeDef * hi2c, float magXY[2]) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	uint8_t readData[4];
	_AK09916_BrustRead(hi2c, AK09916__XOUT_L__REGISTER, 4, readData);
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2204      	movs	r2, #4
 8001580:	2111      	movs	r1, #17
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fdf5 	bl	8001172 <_AK09916_BrustRead>

	//read status register to mark end of data read.
	uint8_t st2;
	_AK09916_ReadByte(hi2c, AK09916__ST2__REGISTER, &st2);
 8001588:	f107 030f 	add.w	r3, r7, #15
 800158c:	461a      	mov	r2, r3
 800158e:	2118      	movs	r1, #24
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fdd1 	bl	8001138 <_AK09916_ReadByte>
	int16_t reading;
	for (uint8_t i = 0; i < 2; i++) {
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
 800159a:	e02a      	b.n	80015f2 <ICM20948_readMagnetometer_XY+0x82>
		reading = readData[1+2*i]<<8|readData[2*i];
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	3301      	adds	r3, #1
 80015a2:	3318      	adds	r3, #24
 80015a4:	443b      	add	r3, r7
 80015a6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	3318      	adds	r3, #24
 80015b4:	443b      	add	r3, r7
 80015b6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	82bb      	strh	r3, [r7, #20]
		magXY[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
 80015c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffad 	bl	8000524 <__aeabi_i2d>
 80015ca:	a30f      	add	r3, pc, #60	; (adr r3, 8001608 <ICM20948_readMagnetometer_XY+0x98>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f812 	bl	80005f8 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	18d4      	adds	r4, r2, r3
 80015e4:	f7ff fb00 	bl	8000be8 <__aeabi_d2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	6023      	str	r3, [r4, #0]
	for (uint8_t i = 0; i < 2; i++) {
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	3301      	adds	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d9d1      	bls.n	800159c <ICM20948_readMagnetometer_XY+0x2c>
	}
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	33333333 	.word	0x33333333
 800160c:	3fc33333 	.word	0x3fc33333

08001610 <get_new_cmd>:
#include "commands.h"

static Command *cur = NULL;

static Command *get_new_cmd() {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	Command *new = (Command *) malloc(sizeof(Command));
 8001616:	2018      	movs	r0, #24
 8001618:	f008 fbd0 	bl	8009dbc <malloc>
 800161c:	4603      	mov	r3, r0
 800161e:	607b      	str	r3, [r7, #4]
	new->dir = 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	715a      	strb	r2, [r3, #5]
	new->speed = 0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	719a      	strb	r2, [r3, #6]
	new->steeringAngle = 0;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
	new->dist = 0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
	new->distType = TARGET;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	731a      	strb	r2, [r3, #12]
	new->next = NULL;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]

	return new;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <commands_ack>:

static void commands_ack(UART_HandleTypeDef *uart, Command *cmd, uint8_t indicator) {
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	4613      	mov	r3, r2
 800165e:	71fb      	strb	r3, [r7, #7]
	uint8_t buf_size = cmd->str_size + 1;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	791b      	ldrb	r3, [r3, #4]
 8001664:	3301      	adds	r3, #1
 8001666:	75fb      	strb	r3, [r7, #23]
	uint8_t *buf = (uint8_t *) malloc(buf_size * sizeof(uint8_t));
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	4618      	mov	r0, r3
 800166c:	f008 fba6 	bl	8009dbc <malloc>
 8001670:	4603      	mov	r3, r0
 8001672:	613b      	str	r3, [r7, #16]
	*buf = indicator;
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	79fa      	ldrb	r2, [r7, #7]
 8001678:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, cmd->str, buf_size - 1);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1c58      	adds	r0, r3, #1
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	3b01      	subs	r3, #1
 8001686:	461a      	mov	r2, r3
 8001688:	f009 fcb3 	bl	800aff2 <memcpy>

	HAL_UART_Transmit(uart, buf, buf_size, HAL_MAX_DELAY);
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	b29a      	uxth	r2, r3
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	6939      	ldr	r1, [r7, #16]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f007 fb8a 	bl	8008db0 <HAL_UART_Transmit>
	free(buf);
 800169c:	6938      	ldr	r0, [r7, #16]
 800169e:	f008 fb95 	bl	8009dcc <free>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <commands_process>:

void commands_process(UART_HandleTypeDef *uart, uint8_t *buf, uint8_t size) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	4613      	mov	r3, r2
 80016b8:	71fb      	strb	r3, [r7, #7]
	Command *next = get_new_cmd();
 80016ba:	f7ff ffa9 	bl	8001610 <get_new_cmd>
 80016be:	61f8      	str	r0, [r7, #28]

	uint8_t c = *buf, *temp = buf;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	76fb      	strb	r3, [r7, #27]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	617b      	str	r3, [r7, #20]

	//first byte: command flag
	switch (c) {
 80016ca:	7efb      	ldrb	r3, [r7, #27]
 80016cc:	3b53      	subs	r3, #83	; 0x53
 80016ce:	2b24      	cmp	r3, #36	; 0x24
 80016d0:	f200 80d1 	bhi.w	8001876 <commands_process+0x1ca>
 80016d4:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <commands_process+0x30>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	08001771 	.word	0x08001771
 80016e0:	08001779 	.word	0x08001779
 80016e4:	08001877 	.word	0x08001877
 80016e8:	08001877 	.word	0x08001877
 80016ec:	08001787 	.word	0x08001787
 80016f0:	08001877 	.word	0x08001877
 80016f4:	08001877 	.word	0x08001877
 80016f8:	08001877 	.word	0x08001877
 80016fc:	08001877 	.word	0x08001877
 8001700:	08001877 	.word	0x08001877
 8001704:	08001877 	.word	0x08001877
 8001708:	08001877 	.word	0x08001877
 800170c:	08001877 	.word	0x08001877
 8001710:	08001877 	.word	0x08001877
 8001714:	08001877 	.word	0x08001877
 8001718:	08001877 	.word	0x08001877
 800171c:	08001877 	.word	0x08001877
 8001720:	08001877 	.word	0x08001877
 8001724:	08001877 	.word	0x08001877
 8001728:	08001877 	.word	0x08001877
 800172c:	08001877 	.word	0x08001877
 8001730:	08001877 	.word	0x08001877
 8001734:	08001877 	.word	0x08001877
 8001738:	08001877 	.word	0x08001877
 800173c:	08001877 	.word	0x08001877
 8001740:	08001877 	.word	0x08001877
 8001744:	08001877 	.word	0x08001877
 8001748:	08001877 	.word	0x08001877
 800174c:	08001877 	.word	0x08001877
 8001750:	08001877 	.word	0x08001877
 8001754:	08001877 	.word	0x08001877
 8001758:	08001877 	.word	0x08001877
 800175c:	08001877 	.word	0x08001877
 8001760:	08001795 	.word	0x08001795
 8001764:	08001877 	.word	0x08001877
 8001768:	08001877 	.word	0x08001877
 800176c:	080017a3 	.word	0x080017a3
		case CMD_FULL_STOP:
			next->dir = 0;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	2200      	movs	r2, #0
 8001774:	715a      	strb	r2, [r3, #5]
			break;
 8001776:	e01b      	b.n	80017b0 <commands_process+0x104>

		case CMD_FORWARD_DIST_TARGET:
			next->dir = 1;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2201      	movs	r2, #1
 800177c:	715a      	strb	r2, [r3, #5]
			next->distType = TARGET;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	2200      	movs	r2, #0
 8001782:	731a      	strb	r2, [r3, #12]
			break;
 8001784:	e014      	b.n	80017b0 <commands_process+0x104>

		case CMD_FORWARD_DIST_AWAY:
			next->dir = 1;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	2201      	movs	r2, #1
 800178a:	715a      	strb	r2, [r3, #5]
			next->distType = STOP_AWAY;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2201      	movs	r2, #1
 8001790:	731a      	strb	r2, [r3, #12]
			break;
 8001792:	e00d      	b.n	80017b0 <commands_process+0x104>

		case CMD_BACKWARD_DIST_TARGET:
			next->dir = -1;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	22ff      	movs	r2, #255	; 0xff
 8001798:	715a      	strb	r2, [r3, #5]
			next->distType = TARGET;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	2200      	movs	r2, #0
 800179e:	731a      	strb	r2, [r3, #12]
			break;
 80017a0:	e006      	b.n	80017b0 <commands_process+0x104>

		case CMD_BACKWARD_DIST_AWAY:
			next->dir = -1;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	22ff      	movs	r2, #255	; 0xff
 80017a6:	715a      	strb	r2, [r3, #5]
			next->distType = STOP_AWAY;
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2201      	movs	r2, #1
 80017ac:	731a      	strb	r2, [r3, #12]
			break;
 80017ae:	bf00      	nop
		default:
			//invalid command, return.
			return;
	}

	if (c != CMD_FULL_STOP) {
 80017b0:	7efb      	ldrb	r3, [r7, #27]
 80017b2:	2b53      	cmp	r3, #83	; 0x53
 80017b4:	d02b      	beq.n	800180e <commands_process+0x162>
		temp++;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
		next->speed = parse_uint16_t_until(&temp, CMD_SEP, 3);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2203      	movs	r2, #3
 80017c2:	217c      	movs	r1, #124	; 0x7c
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f88b 	bl	80018e0 <parse_uint16_t_until>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	719a      	strb	r2, [r3, #6]
		temp++;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
		next->steeringAngle = parse_float_until(&temp, CMD_SEP, 6);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2206      	movs	r2, #6
 80017de:	217c      	movs	r1, #124	; 0x7c
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 f8bd 	bl	8001960 <parse_float_until>
 80017e6:	eef0 7a40 	vmov.f32	s15, s0
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	edc3 7a02 	vstr	s15, [r3, #8]
		temp++;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3301      	adds	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
		next->dist = parse_float_until(&temp, CMD_END, 6);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	2206      	movs	r2, #6
 80017fc:	210a      	movs	r1, #10
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f8ae 	bl	8001960 <parse_float_until>
 8001804:	eef0 7a40 	vmov.f32	s15, s0
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	//copy command.
	uint8_t str_size = temp - buf + 1;
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	3301      	adds	r3, #1
 8001818:	76bb      	strb	r3, [r7, #26]
	next->str_size = str_size;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	7eba      	ldrb	r2, [r7, #26]
 800181e:	711a      	strb	r2, [r3, #4]
	next->str = (uint8_t *) malloc(str_size * sizeof(uint8_t));
 8001820:	7ebb      	ldrb	r3, [r7, #26]
 8001822:	4618      	mov	r0, r3
 8001824:	f008 faca 	bl	8009dbc <malloc>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	601a      	str	r2, [r3, #0]
	memcpy(next->str, buf, str_size);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	7eba      	ldrb	r2, [r7, #26]
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	4618      	mov	r0, r3
 800183a:	f009 fbda 	bl	800aff2 <memcpy>

	//acknowledge command.
	commands_ack(uart, next, CMD_RCV);
 800183e:	2272      	movs	r2, #114	; 0x72
 8001840:	69f9      	ldr	r1, [r7, #28]
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff ff05 	bl	8001652 <commands_ack>

	if (cur == NULL) {
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <commands_process+0x1d4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d108      	bne.n	8001862 <commands_process+0x1b6>
		cur = next;
 8001850:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <commands_process+0x1d4>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	6013      	str	r3, [r2, #0]
		return;
 8001856:	e00f      	b.n	8001878 <commands_process+0x1cc>
	}

	while (cur->next != NULL) cur = cur->next;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <commands_process+0x1d4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <commands_process+0x1d4>)
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <commands_process+0x1d4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f5      	bne.n	8001858 <commands_process+0x1ac>
	cur->next = next;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <commands_process+0x1d4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	615a      	str	r2, [r3, #20]
 8001874:	e000      	b.n	8001878 <commands_process+0x1cc>
			return;
 8001876:	bf00      	nop
}
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000204 	.word	0x20000204

08001884 <commands_pop>:


Command *commands_pop() {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
	Command *ret = cur;
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <commands_pop+0x2c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	607b      	str	r3, [r7, #4]
	if (cur != NULL) cur = cur->next;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <commands_pop+0x2c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <commands_pop+0x1e>
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <commands_pop+0x2c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <commands_pop+0x2c>)
 80018a0:	6013      	str	r3, [r2, #0]
	return ret;
 80018a2:	687b      	ldr	r3, [r7, #4]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	20000204 	.word	0x20000204

080018b4 <commands_end>:

void commands_end(UART_HandleTypeDef *uart, Command *cmd) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
	commands_ack(uart, cmd, CMD_FIN);
 80018be:	2266      	movs	r2, #102	; 0x66
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fec5 	bl	8001652 <commands_ack>
	free(cmd->str);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f008 fa7d 	bl	8009dcc <free>
	free(cmd);
 80018d2:	6838      	ldr	r0, [r7, #0]
 80018d4:	f008 fa7a 	bl	8009dcc <free>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <parse_uint16_t_until>:

	return ret;
}

//get a uint16_t from a string until terminating character.
uint16_t parse_uint16_t_until(uint8_t **buf_ptr, uint8_t until, uint8_t sizeExpected) {
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
 80018ec:	4613      	mov	r3, r2
 80018ee:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, c = **buf_ptr;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	73bb      	strb	r3, [r7, #14]
	uint16_t res = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	81bb      	strh	r3, [r7, #12]

	while (i < sizeExpected && c != until) {
 8001900:	e01d      	b.n	800193e <parse_uint16_t_until+0x5e>
		if (c <= '9' && c >= '0') res = res * 10 + (c - '0');
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	2b39      	cmp	r3, #57	; 0x39
 8001906:	d80e      	bhi.n	8001926 <parse_uint16_t_until+0x46>
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	2b2f      	cmp	r3, #47	; 0x2f
 800190c:	d90b      	bls.n	8001926 <parse_uint16_t_until+0x46>
 800190e:	89bb      	ldrh	r3, [r7, #12]
 8001910:	461a      	mov	r2, r3
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4413      	add	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	7bbb      	ldrb	r3, [r7, #14]
 800191c:	b29b      	uxth	r3, r3
 800191e:	4413      	add	r3, r2
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b30      	subs	r3, #48	; 0x30
 8001924:	81bb      	strh	r3, [r7, #12]

		c = *(++(*buf_ptr)); i++;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	73bb      	strb	r3, [r7, #14]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	3301      	adds	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
	while (i < sizeExpected && c != until) {
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	78bb      	ldrb	r3, [r7, #2]
 8001942:	429a      	cmp	r2, r3
 8001944:	d203      	bcs.n	800194e <parse_uint16_t_until+0x6e>
 8001946:	7bba      	ldrb	r2, [r7, #14]
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	429a      	cmp	r2, r3
 800194c:	d1d9      	bne.n	8001902 <parse_uint16_t_until+0x22>
	}

	return res;
 800194e:	89bb      	ldrh	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	0000      	movs	r0, r0
	...

08001960 <parse_float_until>:

//get a float from a string until terminating character.
float parse_float_until(uint8_t **buf_ptr, uint8_t until, uint8_t sizeExpected) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	70fb      	strb	r3, [r7, #3]
 800196c:	4613      	mov	r3, r2
 800196e:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, c = **buf_ptr, isFrac = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	77fb      	strb	r3, [r7, #31]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	77bb      	strb	r3, [r7, #30]
 800197c:	2300      	movs	r3, #0
 800197e:	777b      	strb	r3, [r7, #29]
	int8_t sign = 1;
 8001980:	2301      	movs	r3, #1
 8001982:	773b      	strb	r3, [r7, #28]
	uint32_t whole = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
	float frac = 0, div = 0.1;
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	4b3c      	ldr	r3, [pc, #240]	; (8001a80 <parse_float_until+0x120>)
 8001990:	613b      	str	r3, [r7, #16]

	while (i < sizeExpected && c != until) {
 8001992:	e051      	b.n	8001a38 <parse_float_until+0xd8>
		if (i == 0 && c == '-') sign *= -1;
 8001994:	7ffb      	ldrb	r3, [r7, #31]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d107      	bne.n	80019aa <parse_float_until+0x4a>
 800199a:	7fbb      	ldrb	r3, [r7, #30]
 800199c:	2b2d      	cmp	r3, #45	; 0x2d
 800199e:	d104      	bne.n	80019aa <parse_float_until+0x4a>
 80019a0:	7f3b      	ldrb	r3, [r7, #28]
 80019a2:	425b      	negs	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	773b      	strb	r3, [r7, #28]
 80019a8:	e03a      	b.n	8001a20 <parse_float_until+0xc0>
		else if (c == '.') isFrac = 1;
 80019aa:	7fbb      	ldrb	r3, [r7, #30]
 80019ac:	2b2e      	cmp	r3, #46	; 0x2e
 80019ae:	d102      	bne.n	80019b6 <parse_float_until+0x56>
 80019b0:	2301      	movs	r3, #1
 80019b2:	777b      	strb	r3, [r7, #29]
 80019b4:	e034      	b.n	8001a20 <parse_float_until+0xc0>
		else if (c <= '9' && c >= '0') {
 80019b6:	7fbb      	ldrb	r3, [r7, #30]
 80019b8:	2b39      	cmp	r3, #57	; 0x39
 80019ba:	d831      	bhi.n	8001a20 <parse_float_until+0xc0>
 80019bc:	7fbb      	ldrb	r3, [r7, #30]
 80019be:	2b2f      	cmp	r3, #47	; 0x2f
 80019c0:	d92e      	bls.n	8001a20 <parse_float_until+0xc0>
			uint8_t d = c - '0';
 80019c2:	7fbb      	ldrb	r3, [r7, #30]
 80019c4:	3b30      	subs	r3, #48	; 0x30
 80019c6:	73fb      	strb	r3, [r7, #15]
			if (isFrac) {
 80019c8:	7f7b      	ldrb	r3, [r7, #29]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01f      	beq.n	8001a0e <parse_float_until+0xae>
				frac += div * d;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	edc7 7a05 	vstr	s15, [r7, #20]
				div *= 0.1;
 80019ec:	6938      	ldr	r0, [r7, #16]
 80019ee:	f7fe fdab 	bl	8000548 <__aeabi_f2d>
 80019f2:	a321      	add	r3, pc, #132	; (adr r3, 8001a78 <parse_float_until+0x118>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fdfe 	bl	80005f8 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f8f0 	bl	8000be8 <__aeabi_d2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	e008      	b.n	8001a20 <parse_float_until+0xc0>
			}
			else whole = whole * 10 + d;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	461a      	mov	r2, r3
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
		}

		c = *(++(*buf_ptr)); i++;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	77bb      	strb	r3, [r7, #30]
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	3301      	adds	r3, #1
 8001a36:	77fb      	strb	r3, [r7, #31]
	while (i < sizeExpected && c != until) {
 8001a38:	7ffa      	ldrb	r2, [r7, #31]
 8001a3a:	78bb      	ldrb	r3, [r7, #2]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d203      	bcs.n	8001a48 <parse_float_until+0xe8>
 8001a40:	7fba      	ldrb	r2, [r7, #30]
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1a5      	bne.n	8001994 <parse_float_until+0x34>
	}

	return (whole + frac) * sign;
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a66:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	f3af 8000 	nop.w
 8001a78:	9999999a 	.word	0x9999999a
 8001a7c:	3fb99999 	.word	0x3fb99999
 8001a80:	3dcccccd 	.word	0x3dcccccd
 8001a84:	00000000 	.word	0x00000000

08001a88 <get_turning_r_steer_cm>:


static float get_turning_r_steer_cm(float steeringAngle) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	ed87 0a01 	vstr	s0, [r7, #4]
	return CHASSIS_CM / sin(steeringAngle * M_PI / 180);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7fe fd58 	bl	8000548 <__aeabi_f2d>
 8001a98:	a319      	add	r3, pc, #100	; (adr r3, 8001b00 <get_turning_r_steer_cm+0x78>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fdab 	bl	80005f8 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <get_turning_r_steer_cm+0x70>)
 8001ab0:	f7fe fecc 	bl	800084c <__aeabi_ddiv>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	ec43 2b17 	vmov	d7, r2, r3
 8001abc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac0:	eef0 0a67 	vmov.f32	s1, s15
 8001ac4:	f00c fe2c 	bl	800e720 <sin>
 8001ac8:	ec53 2b10 	vmov	r2, r3, d0
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	490a      	ldr	r1, [pc, #40]	; (8001afc <get_turning_r_steer_cm+0x74>)
 8001ad2:	f7fe febb 	bl	800084c <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f883 	bl	8000be8 <__aeabi_d2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	ee07 3a90 	vmov	s15, r3
}
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	40668000 	.word	0x40668000
 8001afc:	402d0000 	.word	0x402d0000
 8001b00:	54442d18 	.word	0x54442d18
 8001b04:	400921fb 	.word	0x400921fb

08001b08 <get_turning_r_back_cm>:
float get_turning_r_back_cm(float steeringAngle) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	ed87 0a01 	vstr	s0, [r7, #4]
	return CHASSIS_CM / tan(steeringAngle * M_PI / 180);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe fd18 	bl	8000548 <__aeabi_f2d>
 8001b18:	a319      	add	r3, pc, #100	; (adr r3, 8001b80 <get_turning_r_back_cm+0x78>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7fe fd6b 	bl	80005f8 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <get_turning_r_back_cm+0x70>)
 8001b30:	f7fe fe8c 	bl	800084c <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	ec43 2b17 	vmov	d7, r2, r3
 8001b3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b40:	eef0 0a67 	vmov.f32	s1, s15
 8001b44:	f00c fe44 	bl	800e7d0 <tan>
 8001b48:	ec53 2b10 	vmov	r2, r3, d0
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	490a      	ldr	r1, [pc, #40]	; (8001b7c <get_turning_r_back_cm+0x74>)
 8001b52:	f7fe fe7b 	bl	800084c <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7ff f843 	bl	8000be8 <__aeabi_d2f>
 8001b62:	4603      	mov	r3, r0
 8001b64:	ee07 3a90 	vmov	s15, r3
}
 8001b68:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	f3af 8000 	nop.w
 8001b78:	40668000 	.word	0x40668000
 8001b7c:	402d0000 	.word	0x402d0000
 8001b80:	54442d18 	.word	0x54442d18
 8001b84:	400921fb 	.word	0x400921fb

08001b88 <get_turning_r_robot_cm>:
float get_turning_r_robot_cm(float steeringAngle) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	ed87 0a01 	vstr	s0, [r7, #4]
	float r_steer = get_turning_r_steer_cm(steeringAngle);
 8001b92:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b96:	f7ff ff77 	bl	8001a88 <get_turning_r_steer_cm>
 8001b9a:	ed87 0a04 	vstr	s0, [r7, #16]
	float L2 = CHASSIS_CM / 2;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <get_turning_r_robot_cm+0x7c>)
 8001ba0:	60fb      	str	r3, [r7, #12]
	float r = sqrt(r_steer * r_steer + L2 * L2);
 8001ba2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001baa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb6:	ee17 0a90 	vmov	r0, s15
 8001bba:	f7fe fcc5 	bl	8000548 <__aeabi_f2d>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	ec43 2b10 	vmov	d0, r2, r3
 8001bc6:	f00c fd7d 	bl	800e6c4 <sqrt>
 8001bca:	ec53 2b10 	vmov	r2, r3, d0
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7ff f809 	bl	8000be8 <__aeabi_d2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	617b      	str	r3, [r7, #20]
	if (steeringAngle < 0) r = -r;
 8001bda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	d505      	bpl.n	8001bf4 <get_turning_r_robot_cm+0x6c>
 8001be8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bec:	eef1 7a67 	vneg.f32	s15, s15
 8001bf0:	edc7 7a05 	vstr	s15, [r7, #20]
	return r;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	ee07 3a90 	vmov	s15, r3
}
 8001bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40e80000 	.word	0x40e80000

08001c08 <get_w_ms>:

//angular velocity.
float get_w_ms(float speed, float turning_r_robot_cm) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c12:	edc7 0a00 	vstr	s1, [r7]
	return 90.5f * MOTOR_PWM_MAX / MOTOR_PWM_PERIOD * speed / 100 / turning_r_robot_cm *  180 / M_PI / 1000;
 8001c16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c1a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001c88 <get_w_ms+0x80>
 8001c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c22:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001c8c <get_w_ms+0x84>
 8001c26:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c2a:	ed97 7a00 	vldr	s14, [r7]
 8001c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c32:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001c90 <get_w_ms+0x88>
 8001c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3a:	ee17 0a90 	vmov	r0, s15
 8001c3e:	f7fe fc83 	bl	8000548 <__aeabi_f2d>
 8001c42:	a30f      	add	r3, pc, #60	; (adr r3, 8001c80 <get_w_ms+0x78>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fe00 	bl	800084c <__aeabi_ddiv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <get_w_ms+0x8c>)
 8001c5a:	f7fe fdf7 	bl	800084c <__aeabi_ddiv>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f7fe ffbf 	bl	8000be8 <__aeabi_d2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	ee07 3a90 	vmov	s15, r3
}
 8001c70:	eeb0 0a67 	vmov.f32	s0, s15
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	54442d18 	.word	0x54442d18
 8001c84:	400921fb 	.word	0x400921fb
 8001c88:	4296d555 	.word	0x4296d555
 8001c8c:	42c80000 	.word	0x42c80000
 8001c90:	43340000 	.word	0x43340000
 8001c94:	408f4000 	.word	0x408f4000

08001c98 <get_distance_cm>:

float angle_diff(float a1, float a2) {
	return mod_360(a1 - a2);
}

float get_distance_cm(uint16_t pulses) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
	return ((float) pulses) / MOTOR_PPR * 2 * M_PI * WHEEL_R_CM;
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cac:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001d00 <get_distance_cm+0x68>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cb8:	ee17 0a90 	vmov	r0, s15
 8001cbc:	f7fe fc44 	bl	8000548 <__aeabi_f2d>
 8001cc0:	a30d      	add	r3, pc, #52	; (adr r3, 8001cf8 <get_distance_cm+0x60>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fc97 	bl	80005f8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <get_distance_cm+0x6c>)
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe ff80 	bl	8000be8 <__aeabi_d2f>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	ee07 3a90 	vmov	s15, r3
}
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	54442d18 	.word	0x54442d18
 8001cfc:	400921fb 	.word	0x400921fb
 8001d00:	44410000 	.word	0x44410000
 8001d04:	400a0000 	.word	0x400a0000

08001d08 <delay_us_init>:
#include "delay_us.h"

static TIM_HandleTypeDef *htim;

void delay_us_init(TIM_HandleTypeDef *tim_ptr) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	htim = tim_ptr;
 8001d10:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <delay_us_init+0x20>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim);
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <delay_us_init+0x20>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f005 fa88 	bl	8007230 <HAL_TIM_Base_Start>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000208 	.word	0x20000208

08001d2c <delay_us_wait>:

void delay_us_wait(uint16_t us) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <delay_us_wait+0x34>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(htim) < us);
 8001d40:	bf00      	nop
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <delay_us_wait+0x34>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3f8      	bcc.n	8001d42 <delay_us_wait+0x16>
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000208 	.word	0x20000208

08001d64 <dist_init>:
#include "dist.h"

static KalmanParams kParams;
static DistState state;

void dist_init() {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	kalman_init(&kParams, 0, DIST_S_ACCEL, DIST_S_MOTOR);
 8001d68:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001d6c:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001d90 <dist_init+0x2c>
 8001d70:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001d94 <dist_init+0x30>
 8001d74:	4808      	ldr	r0, [pc, #32]	; (8001d98 <dist_init+0x34>)
 8001d76:	f000 f8df 	bl	8001f38 <kalman_init>

	state.dist = 0;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <dist_init+0x38>)
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
	state.v = 0;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <dist_init+0x38>)
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	605a      	str	r2, [r3, #4]
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	3724873e 	.word	0x3724873e
 8001d94:	00000000 	.word	0x00000000
 8001d98:	2000020c 	.word	0x2000020c
 8001d9c:	20000218 	.word	0x20000218

08001da0 <dist_reset>:

void dist_reset() {
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
	state.dist = 0;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <dist_reset+0x2c>)
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
	state.v = 0;
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <dist_reset+0x2c>)
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	605a      	str	r2, [r3, #4]
	kParams.last_est = 0;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <dist_reset+0x30>)
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
	kParams.s_est = DIST_S_ACCEL;
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <dist_reset+0x30>)
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <dist_reset+0x34>)
 8001dc0:	605a      	str	r2, [r3, #4]
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	20000218 	.word	0x20000218
 8001dd0:	2000020c 	.word	0x2000020c
 8001dd4:	3724873e 	.word	0x3724873e

08001dd8 <update_state>:

static void update_state(float msElapsed, float accel) {
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	ed87 0a01 	vstr	s0, [r7, #4]
 8001de2:	edc7 0a00 	vstr	s1, [r7]
	state.dist += state.v * msElapsed;
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <update_state+0x98>)
 8001de8:	ed93 7a00 	vldr	s14, [r3]
 8001dec:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <update_state+0x98>)
 8001dee:	edd3 6a01 	vldr	s13, [r3, #4]
 8001df2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <update_state+0x98>)
 8001e00:	edc3 7a00 	vstr	s15, [r3]
	state.v += accel * msElapsed;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <update_state+0x98>)
 8001e06:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e0a:	edd7 6a00 	vldr	s13, [r7]
 8001e0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <update_state+0x98>)
 8001e1c:	edc3 7a01 	vstr	s15, [r3, #4]

	//update uncertainties.
	kParams.s_est += msElapsed * msElapsed * state.s_v;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <update_state+0x9c>)
 8001e22:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e2a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <update_state+0x98>)
 8001e30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <update_state+0x9c>)
 8001e3e:	edc3 7a01 	vstr	s15, [r3, #4]
	state.s_v += msElapsed * msElapsed * DIST_S_ACCEL;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <update_state+0x98>)
 8001e44:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e48:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e50:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001e78 <update_state+0xa0>
 8001e54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <update_state+0x98>)
 8001e5e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000218 	.word	0x20000218
 8001e74:	2000020c 	.word	0x2000020c
 8001e78:	3724873e 	.word	0x3724873e

08001e7c <dist_get_cm>:

float dist_get_cm(float msElapsed, float accel, float motorDist) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e86:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e8a:	ed87 1a01 	vstr	s2, [r7, #4]
	//get raw estimate, and update uncertainty.
	update_state(msElapsed, accel);
 8001e8e:	edd7 0a02 	vldr	s1, [r7, #8]
 8001e92:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e96:	f7ff ff9f 	bl	8001dd8 <update_state>

	//get improved estimate.
	kalman_update(&kParams, state.dist, motorDist);
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <dist_get_cm+0x4c>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	edd7 0a01 	vldr	s1, [r7, #4]
 8001ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea8:	4808      	ldr	r0, [pc, #32]	; (8001ecc <dist_get_cm+0x50>)
 8001eaa:	f000 f85e 	bl	8001f6a <kalman_update>
	state.dist = kParams.last_est;
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <dist_get_cm+0x50>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <dist_get_cm+0x4c>)
 8001eb4:	6013      	str	r3, [r2, #0]

	return state.dist;
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <dist_get_cm+0x4c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	ee07 3a90 	vmov	s15, r3
}
 8001ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000218 	.word	0x20000218
 8001ecc:	2000020c 	.word	0x2000020c

08001ed0 <dist_get_front>:

float dist_get_front(float usDist, float irDist) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001eda:	edc7 0a00 	vstr	s1, [r7]
	float dist = usDist;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]
	if (usDist > DIST_IR_MIN && usDist < DIST_IR_MAX) {
 8001ee2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ee6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	dd14      	ble.n	8001f1e <dist_get_front+0x4e>
 8001ef4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001f34 <dist_get_front+0x64>
 8001efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	d50b      	bpl.n	8001f1e <dist_get_front+0x4e>
		//use IR for averaging.
		dist = (usDist + irDist) / 2;
 8001f06:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f0a:	edd7 7a00 	vldr	s15, [r7]
 8001f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f12:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1a:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	return dist;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	ee07 3a90 	vmov	s15, r3
}
 8001f24:	eeb0 0a67 	vmov.f32	s0, s15
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	428c0000 	.word	0x428c0000

08001f38 <kalman_init>:
#include "kalman.h"

void kalman_init(KalmanParams *params, float initial_est, float s_est, float s_mea){
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f44:	edc7 0a01 	vstr	s1, [r7, #4]
 8001f48:	ed87 1a00 	vstr	s2, [r7]
	params->last_est = initial_est;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	601a      	str	r2, [r3, #0]
	params->s_est = s_est;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	605a      	str	r2, [r3, #4]
	params->s_mea = s_mea;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	609a      	str	r2, [r3, #8]
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <kalman_update>:

void kalman_update(KalmanParams *params, float est, float mea){
 8001f6a:	b480      	push	{r7}
 8001f6c:	b087      	sub	sp, #28
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f76:	edc7 0a01 	vstr	s1, [r7, #4]
	//calculate Kalman gain.
	float G = (params->s_est) / (params->s_est + params->s_mea);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f94:	edc7 7a05 	vstr	s15, [r7, #20]

	//update estimate.
	params->last_est += G * (mea - est);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	ed93 7a00 	vldr	s14, [r3]
 8001f9e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001fa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fa6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001faa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
}
 8001fbc:	bf00      	nop
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <magcal_preload>:
#include "mag_cal.h"

static I2C_HandleTypeDef *hi2c;
static MagCalParams *params;

static void magcal_preload(MagCalParams *params_ptr) {
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	params_ptr->offset_HI[0] = -3.6;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <magcal_preload+0x38>)
 8001fd4:	601a      	str	r2, [r3, #0]
	params_ptr->offset_HI[1] = -17.55;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <magcal_preload+0x3c>)
 8001fda:	605a      	str	r2, [r3, #4]

	params_ptr->matrix_SI[0][0] = 1.024;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <magcal_preload+0x40>)
 8001fe0:	609a      	str	r2, [r3, #8]
	params_ptr->matrix_SI[0][1] = -0.0665;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a09      	ldr	r2, [pc, #36]	; (800200c <magcal_preload+0x44>)
 8001fe6:	60da      	str	r2, [r3, #12]
	params_ptr->matrix_SI[1][0] = 0.0965;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <magcal_preload+0x48>)
 8001fec:	611a      	str	r2, [r3, #16]
	params_ptr->matrix_SI[1][1] = 1.4856;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a08      	ldr	r2, [pc, #32]	; (8002014 <magcal_preload+0x4c>)
 8001ff2:	615a      	str	r2, [r3, #20]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	c0666666 	.word	0xc0666666
 8002004:	c18c6666 	.word	0xc18c6666
 8002008:	3f83126f 	.word	0x3f83126f
 800200c:	bd883127 	.word	0xbd883127
 8002010:	3dc5a1cb 	.word	0x3dc5a1cb
 8002014:	3fbe2824 	.word	0x3fbe2824

08002018 <magcal_init>:

void magcal_init(I2C_HandleTypeDef *hi2c_ptr, MagCalParams *params_ptr) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
	hi2c = hi2c_ptr;
 8002022:	4a06      	ldr	r2, [pc, #24]	; (800203c <magcal_init+0x24>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6013      	str	r3, [r2, #0]
	params = params_ptr;
 8002028:	4a05      	ldr	r2, [pc, #20]	; (8002040 <magcal_init+0x28>)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6013      	str	r3, [r2, #0]

	magcal_preload(params_ptr);
 800202e:	6838      	ldr	r0, [r7, #0]
 8002030:	f7ff ffca 	bl	8001fc8 <magcal_preload>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000224 	.word	0x20000224
 8002040:	20000228 	.word	0x20000228

08002044 <magcal_adjust>:

	OLED_Clear();
	OLED_Refresh_Gram();
}

void magcal_adjust(float magXY[2]) {
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	float x = magXY[0] - params->offset_HI[0], y = magXY[1] - params->offset_HI[1];
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	4b22      	ldr	r3, [pc, #136]	; (80020dc <magcal_adjust+0x98>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205e:	edc7 7a03 	vstr	s15, [r7, #12]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3304      	adds	r3, #4
 8002066:	ed93 7a00 	vldr	s14, [r3]
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <magcal_adjust+0x98>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002076:	edc7 7a02 	vstr	s15, [r7, #8]
	magXY[0] = params->matrix_SI[0][0] * x + params->matrix_SI[0][1] * y;
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <magcal_adjust+0x98>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002082:	edd7 7a03 	vldr	s15, [r7, #12]
 8002086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <magcal_adjust+0x98>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002092:	edd7 7a02 	vldr	s15, [r7, #8]
 8002096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	edc3 7a00 	vstr	s15, [r3]
	magXY[1] = params->matrix_SI[1][0] * x + params->matrix_SI[1][1] * y;
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <magcal_adjust+0x98>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80020ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <magcal_adjust+0x98>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	edd3 6a05 	vldr	s13, [r3, #20]
 80020bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80020c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3304      	adds	r3, #4
 80020c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020cc:	edc3 7a00 	vstr	s15, [r3]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	20000228 	.word	0x20000228

080020e0 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


//serial in.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &byte_serial, 1);
 80020e8:	2201      	movs	r2, #1
 80020ea:	4910      	ldr	r1, [pc, #64]	; (800212c <HAL_UART_RxCpltCallback+0x4c>)
 80020ec:	4810      	ldr	r0, [pc, #64]	; (8002130 <HAL_UART_RxCpltCallback+0x50>)
 80020ee:	f006 feea 	bl	8008ec6 <HAL_UART_Receive_IT>
	buf_serial[buf_i++] = byte_serial;
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_UART_RxCpltCallback+0x54>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	b2d1      	uxtb	r1, r2
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_UART_RxCpltCallback+0x54>)
 80020fc:	7011      	strb	r1, [r2, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_UART_RxCpltCallback+0x4c>)
 8002102:	7819      	ldrb	r1, [r3, #0]
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_UART_RxCpltCallback+0x58>)
 8002106:	5499      	strb	r1, [r3, r2]

	if (byte_serial == CMD_END) {
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_UART_RxCpltCallback+0x4c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b0a      	cmp	r3, #10
 800210e:	d109      	bne.n	8002124 <HAL_UART_RxCpltCallback+0x44>
		commands_process(&huart3, buf_serial, buf_i);
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_UART_RxCpltCallback+0x54>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <HAL_UART_RxCpltCallback+0x58>)
 8002118:	4805      	ldr	r0, [pc, #20]	; (8002130 <HAL_UART_RxCpltCallback+0x50>)
 800211a:	f7ff fac7 	bl	80016ac <commands_process>
		buf_i = 0;
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_UART_RxCpltCallback+0x54>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
	}
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000568 	.word	0x20000568
 8002130:	200004c0 	.word	0x200004c0
 8002134:	20000550 	.word	0x20000550
 8002138:	20000554 	.word	0x20000554

0800213c <HAL_TIM_PeriodElapsedCallback>:

/* --- Start: Timer Management --- */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) {
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d107      	bne.n	800215c <HAL_TIM_PeriodElapsedCallback+0x20>
		usWrap++;
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	3301      	adds	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002158:	801a      	strh	r2, [r3, #0]

	else if (htim == &htim7) {
		//8MHz / 20000 = 2.5ms frame.
		newTick = 1;
	}
}
 800215a:	e006      	b.n	800216a <HAL_TIM_PeriodElapsedCallback+0x2e>
	else if (htim == &htim7) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d102      	bne.n	800216a <HAL_TIM_PeriodElapsedCallback+0x2e>
		newTick = 1;
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002166:	2201      	movs	r2, #1
 8002168:	701a      	strb	r2, [r3, #0]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	200003a0 	.word	0x200003a0
 800217c:	2000056c 	.word	0x2000056c
 8002180:	20000430 	.word	0x20000430
 8002184:	20000574 	.word	0x20000574

08002188 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	if (!isRisingCaptured) {
 8002190:	4b33      	ldr	r3, [pc, #204]	; (8002260 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d11a      	bne.n	80021d0 <HAL_TIM_IC_CaptureCallback+0x48>
		//rising edge
		usWrap = 0;
 800219a:	4b32      	ldr	r3, [pc, #200]	; (8002264 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800219c:	2200      	movs	r2, #0
 800219e:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24

		isRisingCaptured = 1;
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, US_IC_CHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6a1a      	ldr	r2, [r3, #32]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 020a 	bic.w	r2, r2, #10
 80021bc:	621a      	str	r2, [r3, #32]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0202 	orr.w	r2, r2, #2
 80021cc:	621a      	str	r2, [r3, #32]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, US_IC_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);

		usCaptureComplete = 1;

	}
}
 80021ce:	e03e      	b.n	800224e <HAL_TIM_IC_CaptureCallback+0xc6>
		counter = HAL_TIM_ReadCapturedValue(htim, US_IC_CHANNEL);
 80021d0:	2100      	movs	r1, #0
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f006 f812 	bl	80081fc <HAL_TIM_ReadCapturedValue>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a23      	ldr	r2, [pc, #140]	; (8002268 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80021dc:	6013      	str	r3, [r2, #0]
		counter += usWrap * 65536;
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80021f0:	6013      	str	r3, [r2, #0]
		sensors_read_usDist((float) counter * 1e-6);
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021fe:	ee17 0a90 	vmov	r0, s15
 8002202:	f7fe f9a1 	bl	8000548 <__aeabi_f2d>
 8002206:	a314      	add	r3, pc, #80	; (adr r3, 8002258 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	f7fe f9f4 	bl	80005f8 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	f7fe fce6 	bl	8000be8 <__aeabi_d2f>
 800221c:	4603      	mov	r3, r0
 800221e:	ee00 3a10 	vmov	s0, r3
 8002222:	f001 fc53 	bl	8003acc <sensors_read_usDist>
		isRisingCaptured = 0;
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, US_IC_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 020a 	bic.w	r2, r2, #10
 800223a:	621a      	str	r2, [r3, #32]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6a12      	ldr	r2, [r2, #32]
 8002246:	621a      	str	r2, [r3, #32]
		usCaptureComplete = 1;
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_TIM_IC_CaptureCallback+0xe4>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	a0b5ed8d 	.word	0xa0b5ed8d
 800225c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002260:	20000569 	.word	0x20000569
 8002264:	2000056c 	.word	0x2000056c
 8002268:	20000570 	.word	0x20000570
 800226c:	2000056a 	.word	0x2000056a

08002270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b096      	sub	sp, #88	; 0x58
 8002274:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002276:	f002 fb13 	bl	80048a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800227a:	f000 f9f9 	bl	8002670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800227e:	f000 fdcf 	bl	8002e20 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002282:	f000 fda3 	bl	8002dcc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002286:	f000 faa3 	bl	80027d0 <MX_I2C1_Init>
  MX_TIM8_Init();
 800228a:	f000 fcf3 	bl	8002c74 <MX_TIM8_Init>
  MX_TIM2_Init();
 800228e:	f000 fb6d 	bl	800296c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002292:	f000 fbbf 	bl	8002a14 <MX_TIM3_Init>
  MX_TIM1_Init();
 8002296:	f000 fac9 	bl	800282c <MX_TIM1_Init>
  MX_TIM4_Init();
 800229a:	f000 fc0f 	bl	8002abc <MX_TIM4_Init>
  MX_ADC1_Init();
 800229e:	f000 fa45 	bl	800272c <MX_ADC1_Init>
  MX_TIM6_Init();
 80022a2:	f000 fc7b 	bl	8002b9c <MX_TIM6_Init>
  MX_TIM7_Init();
 80022a6:	f000 fcaf 	bl	8002c08 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* ----- Start: Initialize libraries ----- */
  OLED_Init();										//initialize OLED display.
 80022aa:	f001 fa95 	bl	80037d8 <OLED_Init>
  magcal_init(&hi2c1, &magCalParams);				//initialize magnetometer calibration.
 80022ae:	49ab      	ldr	r1, [pc, #684]	; (800255c <main+0x2ec>)
 80022b0:	48ab      	ldr	r0, [pc, #684]	; (8002560 <main+0x2f0>)
 80022b2:	f7ff feb1 	bl	8002018 <magcal_init>
  sensors_init(&hi2c1, &hadc1, &htim4, &sensors); 	//initialize motion sensors.
 80022b6:	4bab      	ldr	r3, [pc, #684]	; (8002564 <main+0x2f4>)
 80022b8:	4aab      	ldr	r2, [pc, #684]	; (8002568 <main+0x2f8>)
 80022ba:	49ac      	ldr	r1, [pc, #688]	; (800256c <main+0x2fc>)
 80022bc:	48a8      	ldr	r0, [pc, #672]	; (8002560 <main+0x2f0>)
 80022be:	f001 fba3 	bl	8003a08 <sensors_init>
  motor_init(&htim8, &htim2, &htim3); 				//initialize motor PWM and encoders.
 80022c2:	4aab      	ldr	r2, [pc, #684]	; (8002570 <main+0x300>)
 80022c4:	49ab      	ldr	r1, [pc, #684]	; (8002574 <main+0x304>)
 80022c6:	48ac      	ldr	r0, [pc, #688]	; (8002578 <main+0x308>)
 80022c8:	f000 fe56 	bl	8002f78 <motor_init>
  servo_init(&htim1); 								//initialize servo PWM.
 80022cc:	48ab      	ldr	r0, [pc, #684]	; (800257c <main+0x30c>)
 80022ce:	f001 fe49 	bl	8003f64 <servo_init>
  delay_us_init(&htim6);							//initialize us timer.
 80022d2:	48ab      	ldr	r0, [pc, #684]	; (8002580 <main+0x310>)
 80022d4:	f7ff fd18 	bl	8001d08 <delay_us_init>

  dist_init();										//initialize distance tracking.
 80022d8:	f7ff fd44 	bl	8001d64 <dist_init>

  /* ----- Start: Car setup ----- */
//  magcal_calc_params();

  //reset car.
  servo_setAngle(0);
 80022dc:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8002584 <main+0x314>
 80022e0:	f001 fe64 	bl	8003fac <servo_setAngle>
  motor_setDrive(0, 0);
 80022e4:	2100      	movs	r1, #0
 80022e6:	2000      	movs	r0, #0
 80022e8:	f001 f886 	bl	80033f8 <motor_setDrive>

  OLED_ShowString(0, 0, "Press USER when ready...");
 80022ec:	4aa6      	ldr	r2, [pc, #664]	; (8002588 <main+0x318>)
 80022ee:	2100      	movs	r1, #0
 80022f0:	2000      	movs	r0, #0
 80022f2:	f001 fa3f 	bl	8003774 <OLED_ShowString>
  OLED_Refresh_Gram();
 80022f6:	f001 f913 	bl	8003520 <OLED_Refresh_Gram>
  while (!user_is_pressed());	//wait for user to place car.
 80022fa:	bf00      	nop
 80022fc:	f002 fa94 	bl	8004828 <user_is_pressed>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0fa      	beq.n	80022fc <main+0x8c>
  OLED_Clear();
 8002306:	f001 f943 	bl	8003590 <OLED_Clear>
  OLED_ShowString(0, 0, "Setting sensors bias...");
 800230a:	4aa0      	ldr	r2, [pc, #640]	; (800258c <main+0x31c>)
 800230c:	2100      	movs	r1, #0
 800230e:	2000      	movs	r0, #0
 8002310:	f001 fa30 	bl	8003774 <OLED_ShowString>
  OLED_Refresh_Gram();
 8002314:	f001 f904 	bl	8003520 <OLED_Refresh_Gram>

  sensors_set_bias(500); 		// set initial bias.
 8002318:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800231c:	f001 fd50 	bl	8003dc0 <sensors_set_bias>
  sensors_dist_warmup(100);		// warmup distance sensors (LPF).
 8002320:	2064      	movs	r0, #100	; 0x64
 8002322:	f001 fe03 	bl	8003f2c <sensors_dist_warmup>
  OLED_Clear();
 8002326:	f001 f933 	bl	8003590 <OLED_Clear>
  OLED_ShowString(0, 0, "Active.");
 800232a:	4a99      	ldr	r2, [pc, #612]	; (8002590 <main+0x320>)
 800232c:	2100      	movs	r1, #0
 800232e:	2000      	movs	r0, #0
 8002330:	f001 fa20 	bl	8003774 <OLED_ShowString>
  OLED_Refresh_Gram();
 8002334:	f001 f8f4 	bl	8003520 <OLED_Refresh_Gram>

  /* ----- End: Car setup ----- */

  /* ----- Start: OS Parameters ----- */
  //ticking for longer timing requirements for ultrasound.
  uint8_t ticksElapsed = 0,
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  ticksUltrasound = (15.0f / MS_FRAME) + 1,
 800233e:	2307      	movs	r3, #7
 8002340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		  ticksRefresh = ticksUltrasound;
 8002344:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  Command *cmd = NULL;							//current command.
 800234c:	2300      	movs	r3, #0
 800234e:	643b      	str	r3, [r7, #64]	; 0x40
  float motorDist = 0, estDist = 0;				//distance estimations.
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
  float distDiff = 0, brakingDist = 0; 			//current distance difference.
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38
  float wDiff = 0, wTarget = 0;					//current angular velocity difference and target.
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
  float rBack = 0, rRobot = 0;					//turning radii at the back and centre of robot.
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* ----- End: OS Parameters ----- */

  /* ----- Start: Interrupts ----- */
  HAL_UART_Receive_IT(&huart3, &byte_serial, 1);	//start receiving serial.
 8002380:	2201      	movs	r2, #1
 8002382:	4984      	ldr	r1, [pc, #528]	; (8002594 <main+0x324>)
 8002384:	4884      	ldr	r0, [pc, #528]	; (8002598 <main+0x328>)
 8002386:	f006 fd9e 	bl	8008ec6 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);							//start continuous ADC conversion.
 800238a:	4878      	ldr	r0, [pc, #480]	; (800256c <main+0x2fc>)
 800238c:	f002 fb62 	bl	8004a54 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim7);					//start paced loop timer.
 8002390:	4882      	ldr	r0, [pc, #520]	; (800259c <main+0x32c>)
 8002392:	f004 ffb5 	bl	8007300 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */

	/* ----- Start: Sensor reading ----- */
	//trigger distance measurement (minimum 3ms delay)
	if (!(ticksElapsed % ticksUltrasound)) {
 8002396:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800239a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800239e:	fbb3 f1f2 	udiv	r1, r3, r2
 80023a2:	fb01 f202 	mul.w	r2, r1, r2
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <main+0x142>
		sensors_us_trig();
 80023ae:	f001 fb71 	bl	8003a94 <sensors_us_trig>
	}

	sensors_read_irDist();
 80023b2:	f001 fbb9 	bl	8003b28 <sensors_read_irDist>
	sensors_read_accel();
 80023b6:	f001 fc3f 	bl	8003c38 <sensors_read_accel>
	sensors_read_gyroZ();
 80023ba:	f001 fc19 	bl	8003bf0 <sensors_read_gyroZ>
	/* ----- End: Sensor reading ----- */

	/* ----- Start: Get next command (if any) ----- */
	if (cmd == NULL) {
 80023be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d15e      	bne.n	8002482 <main+0x212>
		cmd = commands_pop();
 80023c4:	f7ff fa5e 	bl	8001884 <commands_pop>
 80023c8:	6438      	str	r0, [r7, #64]	; 0x40

		if (cmd != NULL) {
 80023ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d058      	beq.n	8002482 <main+0x212>
			dist_reset();
 80023d0:	f7ff fce6 	bl	8001da0 <dist_reset>
			motor_setDrive(cmd->dir, cmd->speed);
 80023d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80023da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023dc:	799b      	ldrb	r3, [r3, #6]
 80023de:	4619      	mov	r1, r3
 80023e0:	4610      	mov	r0, r2
 80023e2:	f001 f809 	bl	80033f8 <motor_setDrive>
			if (cmd->dir != 0) {
 80023e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d042      	beq.n	8002476 <main+0x206>
				distDiff = DIST_DIFF_DEFAULT;
 80023f0:	4b6b      	ldr	r3, [pc, #428]	; (80025a0 <main+0x330>)
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
				brakingDist = MOTOR_BRAKING_DIST_CM * cmd->speed / 100;
 80023f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f6:	799b      	ldrb	r3, [r3, #6]
 80023f8:	4a6a      	ldr	r2, [pc, #424]	; (80025a4 <main+0x334>)
 80023fa:	fb82 1203 	smull	r1, r2, r2, r3
 80023fe:	1052      	asrs	r2, r2, #1
 8002400:	17db      	asrs	r3, r3, #31
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

				float steeringAngle = cmd->steeringAngle;
 8002410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	61bb      	str	r3, [r7, #24]
				servo_setAngle(steeringAngle);
 8002416:	ed97 0a06 	vldr	s0, [r7, #24]
 800241a:	f001 fdc7 	bl	8003fac <servo_setAngle>
				if (steeringAngle != 0) {
 800241e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002422:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242a:	d01a      	beq.n	8002462 <main+0x1f2>
					rBack = get_turning_r_back_cm(steeringAngle);
 800242c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002430:	f7ff fb6a 	bl	8001b08 <get_turning_r_back_cm>
 8002434:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
					rRobot = get_turning_r_robot_cm(steeringAngle);
 8002438:	ed97 0a06 	vldr	s0, [r7, #24]
 800243c:	f7ff fba4 	bl	8001b88 <get_turning_r_robot_cm>
 8002440:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
					wTarget = get_w_ms(cmd->speed, rRobot);
 8002444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002446:	799b      	ldrb	r3, [r3, #6]
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002450:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002454:	eeb0 0a67 	vmov.f32	s0, s15
 8002458:	f7ff fbd6 	bl	8001c08 <get_w_ms>
 800245c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
 8002460:	e00f      	b.n	8002482 <main+0x212>
				} else {
					rBack = 0;
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
					rRobot = 0;
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
					wTarget = 0;
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
 8002474:	e005      	b.n	8002482 <main+0x212>
				}
			} else {
				commands_end(&huart3, cmd);
 8002476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002478:	4847      	ldr	r0, [pc, #284]	; (8002598 <main+0x328>)
 800247a:	f7ff fa1b 	bl	80018b4 <commands_end>
				cmd = NULL;
 800247e:	2300      	movs	r3, #0
 8002480:	643b      	str	r3, [r7, #64]	; 0x40
		}
	}
	/* ----- End: Get next command (if any) ----- */

	/* ----- Start: Drive PID Control ----- */
	if (cmd != NULL && cmd->dir != 0) {
 8002482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80d4 	beq.w	8002632 <main+0x3c2>
 800248a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80ce 	beq.w	8002632 <main+0x3c2>
		wDiff = (sensors.gyroZ - wTarget);
 8002496:	4b33      	ldr	r3, [pc, #204]	; (8002564 <main+0x2f4>)
 8002498:	ed93 7a02 	vldr	s14, [r3, #8]
 800249c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a4:	edc7 7a07 	vstr	s15, [r7, #28]

		motorDist = motor_getDist();
 80024a8:	f000 fe10 	bl	80030cc <motor_getDist>
 80024ac:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		estDist = dist_get_cm(MS_FRAME, cmd->dir * sensors.accel[1], motorDist);
 80024b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024be:	4b29      	ldr	r3, [pc, #164]	; (8002564 <main+0x2f4>)
 80024c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80024c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c8:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80024cc:	eef0 0a67 	vmov.f32	s1, s15
 80024d0:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80024d4:	f7ff fcd2 	bl	8001e7c <dist_get_cm>
 80024d8:	ed87 0a08 	vstr	s0, [r7, #32]
		switch (cmd->distType) {
 80024dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024de:	7b1b      	ldrb	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <main+0x27a>
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d00a      	beq.n	80024fe <main+0x28e>
 80024e8:	e034      	b.n	8002554 <main+0x2e4>
			case TARGET:
				distDiff = cmd->dist - estDist;
 80024ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80024f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80024f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				break;
 80024fc:	e057      	b.n	80025ae <main+0x33e>
			case STOP_AWAY:
				if (usCaptureComplete) {
 80024fe:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <main+0x338>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d051      	beq.n	80025ac <main+0x33c>
					distDiff = dist_get_front(sensors.usDist, sensors.irDist) - cmd->dist;
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <main+0x2f4>)
 800250a:	edd3 7a01 	vldr	s15, [r3, #4]
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <main+0x2f4>)
 8002510:	ed93 7a00 	vldr	s14, [r3]
 8002514:	eef0 0a47 	vmov.f32	s1, s14
 8002518:	eeb0 0a67 	vmov.f32	s0, s15
 800251c:	f7ff fcd8 	bl	8001ed0 <dist_get_front>
 8002520:	eeb0 7a40 	vmov.f32	s14, s0
 8002524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002526:	edd3 7a04 	vldr	s15, [r3, #16]
 800252a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					distDiff *= cmd->dir;
 8002532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002534:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002540:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002548:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

					usCaptureComplete = 0;
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <main+0x338>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002552:	e02b      	b.n	80025ac <main+0x33c>
			default:
				distDiff = DIST_DIFF_DEFAULT;
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <main+0x330>)
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
				break;
 8002558:	e029      	b.n	80025ae <main+0x33e>
 800255a:	bf00      	nop
 800255c:	20000538 	.word	0x20000538
 8002560:	20000274 	.word	0x20000274
 8002564:	20000508 	.word	0x20000508
 8002568:	200003a0 	.word	0x200003a0
 800256c:	2000022c 	.word	0x2000022c
 8002570:	20000358 	.word	0x20000358
 8002574:	20000310 	.word	0x20000310
 8002578:	20000478 	.word	0x20000478
 800257c:	200002c8 	.word	0x200002c8
 8002580:	200003e8 	.word	0x200003e8
 8002584:	00000000 	.word	0x00000000
 8002588:	08010d98 	.word	0x08010d98
 800258c:	08010db4 	.word	0x08010db4
 8002590:	08010dcc 	.word	0x08010dcc
 8002594:	20000568 	.word	0x20000568
 8002598:	200004c0 	.word	0x200004c0
 800259c:	20000430 	.word	0x20000430
 80025a0:	41200000 	.word	0x41200000
 80025a4:	66666667 	.word	0x66666667
 80025a8:	2000056a 	.word	0x2000056a
				break;
 80025ac:	bf00      	nop
		}

		motor_pwmCorrection(cmd->dir, wDiff, rBack, rRobot, distDiff, brakingDist); //motor correction.
 80025ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80025b4:	ed97 2a0e 	vldr	s4, [r7, #56]	; 0x38
 80025b8:	edd7 1a0f 	vldr	s3, [r7, #60]	; 0x3c
 80025bc:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 80025c0:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80025c4:	ed97 0a07 	vldr	s0, [r7, #28]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fdb7 	bl	800313c <motor_pwmCorrection>

		if (distDiff <= 0.5) {
 80025ce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80025d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025de:	d828      	bhi.n	8002632 <main+0x3c2>
			//target achieved; move to next command.
			commands_end(&huart3, cmd);
 80025e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025e2:	481f      	ldr	r0, [pc, #124]	; (8002660 <main+0x3f0>)
 80025e4:	f7ff f966 	bl	80018b4 <commands_end>
			cmd = NULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40

			servo_setAngle(0);
 80025ec:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002664 <main+0x3f4>
 80025f0:	f001 fcdc 	bl	8003fac <servo_setAngle>
			motor_setDrive(0, 0);
 80025f4:	2100      	movs	r1, #0
 80025f6:	2000      	movs	r0, #0
 80025f8:	f000 fefe 	bl	80033f8 <motor_setDrive>

			snprintf(buf, 20, "%.3f|%.3f", motorDist, estDist);
 80025fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025fe:	f7fd ffa3 	bl	8000548 <__aeabi_f2d>
 8002602:	4604      	mov	r4, r0
 8002604:	460d      	mov	r5, r1
 8002606:	6a38      	ldr	r0, [r7, #32]
 8002608:	f7fd ff9e 	bl	8000548 <__aeabi_f2d>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	1d38      	adds	r0, r7, #4
 8002612:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002616:	e9cd 4500 	strd	r4, r5, [sp]
 800261a:	4a13      	ldr	r2, [pc, #76]	; (8002668 <main+0x3f8>)
 800261c:	2114      	movs	r1, #20
 800261e:	f008 fbc1 	bl	800ada4 <sniprintf>
			OLED_ShowString(0, 0, buf);
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	461a      	mov	r2, r3
 8002626:	2100      	movs	r1, #0
 8002628:	2000      	movs	r0, #0
 800262a:	f001 f8a3 	bl	8003774 <OLED_ShowString>
			OLED_Refresh_Gram();
 800262e:	f000 ff77 	bl	8003520 <OLED_Refresh_Gram>
		}
	}
	/* ----- End: Drive PID Control ----- */

	/* ----- Start: Paced Loop Control ----- */
	while (!newTick);									//wait for new tick.
 8002632:	bf00      	nop
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <main+0x3fc>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0fa      	beq.n	8002634 <main+0x3c4>
	newTick = 0;										//acknowledge flag.
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <main+0x3fc>)
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]

	ticksElapsed = (ticksElapsed + 1) % ticksRefresh;	//refresh tick count.
 8002644:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002648:	3301      	adds	r3, #1
 800264a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800264e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002652:	fb01 f202 	mul.w	r2, r1, r2
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (!(ticksElapsed % ticksUltrasound)) {
 800265c:	e69b      	b.n	8002396 <main+0x126>
 800265e:	bf00      	nop
 8002660:	200004c0 	.word	0x200004c0
 8002664:	00000000 	.word	0x00000000
 8002668:	08010dd4 	.word	0x08010dd4
 800266c:	20000574 	.word	0x20000574

08002670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b094      	sub	sp, #80	; 0x50
 8002674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002676:	f107 0320 	add.w	r3, r7, #32
 800267a:	2230      	movs	r2, #48	; 0x30
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f008 fc27 	bl	800aed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <SystemClock_Config+0xb4>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4a21      	ldr	r2, [pc, #132]	; (8002724 <SystemClock_Config+0xb4>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a2:	6413      	str	r3, [r2, #64]	; 0x40
 80026a4:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <SystemClock_Config+0xb4>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b0:	2300      	movs	r3, #0
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <SystemClock_Config+0xb8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <SystemClock_Config+0xb8>)
 80026ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <SystemClock_Config+0xb8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026cc:	2302      	movs	r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026d0:	2301      	movs	r3, #1
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026d4:	2310      	movs	r3, #16
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026d8:	2300      	movs	r3, #0
 80026da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026dc:	f107 0320 	add.w	r3, r7, #32
 80026e0:	4618      	mov	r0, r3
 80026e2:	f004 f8fd 	bl	80068e0 <HAL_RCC_OscConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80026ec:	f000 fc3e 	bl	8002f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026f0:	230f      	movs	r3, #15
 80026f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f004 fb60 	bl	8006dd0 <HAL_RCC_ClockConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002716:	f000 fc29 	bl	8002f6c <Error_Handler>
  }
}
 800271a:	bf00      	nop
 800271c:	3750      	adds	r7, #80	; 0x50
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40007000 	.word	0x40007000

0800272c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002732:	463b      	mov	r3, r7
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <MX_ADC1_Init+0x98>)
 8002740:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <MX_ADC1_Init+0x9c>)
 8002742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <MX_ADC1_Init+0x98>)
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <MX_ADC1_Init+0x98>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002750:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <MX_ADC1_Init+0x98>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <MX_ADC1_Init+0x98>)
 8002758:	2201      	movs	r2, #1
 800275a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <MX_ADC1_Init+0x98>)
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <MX_ADC1_Init+0x98>)
 8002766:	2200      	movs	r2, #0
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <MX_ADC1_Init+0x98>)
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <MX_ADC1_Init+0xa0>)
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002770:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <MX_ADC1_Init+0x98>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <MX_ADC1_Init+0x98>)
 8002778:	2201      	movs	r2, #1
 800277a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_ADC1_Init+0x98>)
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <MX_ADC1_Init+0x98>)
 8002786:	2201      	movs	r2, #1
 8002788:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800278a:	480e      	ldr	r0, [pc, #56]	; (80027c4 <MX_ADC1_Init+0x98>)
 800278c:	f002 f91e 	bl	80049cc <HAL_ADC_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002796:	f000 fbe9 	bl	8002f6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800279a:	230d      	movs	r3, #13
 800279c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a6:	463b      	mov	r3, r7
 80027a8:	4619      	mov	r1, r3
 80027aa:	4806      	ldr	r0, [pc, #24]	; (80027c4 <MX_ADC1_Init+0x98>)
 80027ac:	f002 fabc 	bl	8004d28 <HAL_ADC_ConfigChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80027b6:	f000 fbd9 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2000022c 	.word	0x2000022c
 80027c8:	40012000 	.word	0x40012000
 80027cc:	0f000001 	.word	0x0f000001

080027d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <MX_I2C1_Init+0x50>)
 80027d6:	4a13      	ldr	r2, [pc, #76]	; (8002824 <MX_I2C1_Init+0x54>)
 80027d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80027da:	4b11      	ldr	r3, [pc, #68]	; (8002820 <MX_I2C1_Init+0x50>)
 80027dc:	4a12      	ldr	r2, [pc, #72]	; (8002828 <MX_I2C1_Init+0x58>)
 80027de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <MX_I2C1_Init+0x50>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <MX_I2C1_Init+0x50>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <MX_I2C1_Init+0x50>)
 80027ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <MX_I2C1_Init+0x50>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <MX_I2C1_Init+0x50>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <MX_I2C1_Init+0x50>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <MX_I2C1_Init+0x50>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800280c:	4804      	ldr	r0, [pc, #16]	; (8002820 <MX_I2C1_Init+0x50>)
 800280e:	f003 f81b 	bl	8005848 <HAL_I2C_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002818:	f000 fba8 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000274 	.word	0x20000274
 8002824:	40005400 	.word	0x40005400
 8002828:	00061a80 	.word	0x00061a80

0800282c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b096      	sub	sp, #88	; 0x58
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002832:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002840:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800284a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	615a      	str	r2, [r3, #20]
 800285c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	2220      	movs	r2, #32
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f008 fb34 	bl	800aed2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800286a:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <MX_TIM1_Init+0x138>)
 800286c:	4a3e      	ldr	r2, [pc, #248]	; (8002968 <MX_TIM1_Init+0x13c>)
 800286e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8002870:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <MX_TIM1_Init+0x138>)
 8002872:	2204      	movs	r2, #4
 8002874:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002876:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <MX_TIM1_Init+0x138>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 800287c:	4b39      	ldr	r3, [pc, #228]	; (8002964 <MX_TIM1_Init+0x138>)
 800287e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002882:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002884:	4b37      	ldr	r3, [pc, #220]	; (8002964 <MX_TIM1_Init+0x138>)
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800288a:	4b36      	ldr	r3, [pc, #216]	; (8002964 <MX_TIM1_Init+0x138>)
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002890:	4b34      	ldr	r3, [pc, #208]	; (8002964 <MX_TIM1_Init+0x138>)
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002896:	4833      	ldr	r0, [pc, #204]	; (8002964 <MX_TIM1_Init+0x138>)
 8002898:	f004 fc7a 	bl	8007190 <HAL_TIM_Base_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80028a2:	f000 fb63 	bl	8002f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028b0:	4619      	mov	r1, r3
 80028b2:	482c      	ldr	r0, [pc, #176]	; (8002964 <MX_TIM1_Init+0x138>)
 80028b4:	f005 fbda 	bl	800806c <HAL_TIM_ConfigClockSource>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80028be:	f000 fb55 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028c2:	4828      	ldr	r0, [pc, #160]	; (8002964 <MX_TIM1_Init+0x138>)
 80028c4:	f004 fd8c 	bl	80073e0 <HAL_TIM_PWM_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80028ce:	f000 fb4d 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028de:	4619      	mov	r1, r3
 80028e0:	4820      	ldr	r0, [pc, #128]	; (8002964 <MX_TIM1_Init+0x138>)
 80028e2:	f006 f933 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80028ec:	f000 fb3e 	bl	8002f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028f0:	2360      	movs	r3, #96	; 0x60
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028fc:	2300      	movs	r3, #0
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002900:	2300      	movs	r3, #0
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002904:	2300      	movs	r3, #0
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800290c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002910:	2200      	movs	r2, #0
 8002912:	4619      	mov	r1, r3
 8002914:	4813      	ldr	r0, [pc, #76]	; (8002964 <MX_TIM1_Init+0x138>)
 8002916:	f005 fae7 	bl	8007ee8 <HAL_TIM_PWM_ConfigChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002920:	f000 fb24 	bl	8002f6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800293c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4807      	ldr	r0, [pc, #28]	; (8002964 <MX_TIM1_Init+0x138>)
 8002948:	f006 f97c 	bl	8008c44 <HAL_TIMEx_ConfigBreakDeadTime>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002952:	f000 fb0b 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002956:	4803      	ldr	r0, [pc, #12]	; (8002964 <MX_TIM1_Init+0x138>)
 8002958:	f001 fd8a 	bl	8004470 <HAL_TIM_MspPostInit>

}
 800295c:	bf00      	nop
 800295e:	3758      	adds	r7, #88	; 0x58
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200002c8 	.word	0x200002c8
 8002968:	40010000 	.word	0x40010000

0800296c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f008 faa9 	bl	800aed2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <MX_TIM2_Init+0xa4>)
 800298a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800298e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002990:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <MX_TIM2_Init+0xa4>)
 8002992:	2200      	movs	r2, #0
 8002994:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <MX_TIM2_Init+0xa4>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <MX_TIM2_Init+0xa4>)
 800299e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <MX_TIM2_Init+0xa4>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <MX_TIM2_Init+0xa4>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029b0:	2303      	movs	r3, #3
 80029b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80029b4:	2302      	movs	r3, #2
 80029b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029b8:	2301      	movs	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80029c4:	2302      	movs	r3, #2
 80029c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029c8:	2301      	movs	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	4619      	mov	r1, r3
 80029da:	480d      	ldr	r0, [pc, #52]	; (8002a10 <MX_TIM2_Init+0xa4>)
 80029dc:	f004 ffa4 	bl	8007928 <HAL_TIM_Encoder_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80029e6:	f000 fac1 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	4806      	ldr	r0, [pc, #24]	; (8002a10 <MX_TIM2_Init+0xa4>)
 80029f8:	f006 f8a8 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002a02:	f000 fab3 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	3730      	adds	r7, #48	; 0x30
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000310 	.word	0x20000310

08002a14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08c      	sub	sp, #48	; 0x30
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a1a:	f107 030c 	add.w	r3, r7, #12
 8002a1e:	2224      	movs	r2, #36	; 0x24
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f008 fa55 	bl	800aed2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a30:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <MX_TIM3_Init+0xa0>)
 8002a32:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <MX_TIM3_Init+0xa4>)
 8002a34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <MX_TIM3_Init+0xa0>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <MX_TIM3_Init+0xa0>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <MX_TIM3_Init+0xa0>)
 8002a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <MX_TIM3_Init+0xa0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <MX_TIM3_Init+0xa0>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a56:	2303      	movs	r3, #3
 8002a58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002a66:	230a      	movs	r3, #10
 8002a68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002a76:	230a      	movs	r3, #10
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	4619      	mov	r1, r3
 8002a80:	480c      	ldr	r0, [pc, #48]	; (8002ab4 <MX_TIM3_Init+0xa0>)
 8002a82:	f004 ff51 	bl	8007928 <HAL_TIM_Encoder_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002a8c:	f000 fa6e 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <MX_TIM3_Init+0xa0>)
 8002a9e:	f006 f855 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002aa8:	f000 fa60 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002aac:	bf00      	nop
 8002aae:	3730      	adds	r7, #48	; 0x30
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000358 	.word	0x20000358
 8002ab8:	40000400 	.word	0x40000400

08002abc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ac2:	f107 0318 	add.w	r3, r7, #24
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ada:	463b      	mov	r3, r7
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ae6:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <MX_TIM4_Init+0xd8>)
 8002ae8:	4a2b      	ldr	r2, [pc, #172]	; (8002b98 <MX_TIM4_Init+0xdc>)
 8002aea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002aec:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <MX_TIM4_Init+0xd8>)
 8002aee:	220f      	movs	r2, #15
 8002af0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af2:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <MX_TIM4_Init+0xd8>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8002af8:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <MX_TIM4_Init+0xd8>)
 8002afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002afe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <MX_TIM4_Init+0xd8>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b06:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <MX_TIM4_Init+0xd8>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b0c:	4821      	ldr	r0, [pc, #132]	; (8002b94 <MX_TIM4_Init+0xd8>)
 8002b0e:	f004 fb3f 	bl	8007190 <HAL_TIM_Base_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002b18:	f000 fa28 	bl	8002f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b20:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b22:	f107 0318 	add.w	r3, r7, #24
 8002b26:	4619      	mov	r1, r3
 8002b28:	481a      	ldr	r0, [pc, #104]	; (8002b94 <MX_TIM4_Init+0xd8>)
 8002b2a:	f005 fa9f 	bl	800806c <HAL_TIM_ConfigClockSource>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002b34:	f000 fa1a 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002b38:	4816      	ldr	r0, [pc, #88]	; (8002b94 <MX_TIM4_Init+0xd8>)
 8002b3a:	f004 fd73 	bl	8007624 <HAL_TIM_IC_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002b44:	f000 fa12 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b50:	f107 0310 	add.w	r3, r7, #16
 8002b54:	4619      	mov	r1, r3
 8002b56:	480f      	ldr	r0, [pc, #60]	; (8002b94 <MX_TIM4_Init+0xd8>)
 8002b58:	f005 fff8 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002b62:	f000 fa03 	bl	8002f6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b66:	2300      	movs	r3, #0
 8002b68:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b76:	463b      	mov	r3, r7
 8002b78:	2200      	movs	r2, #0
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_TIM4_Init+0xd8>)
 8002b7e:	f005 f917 	bl	8007db0 <HAL_TIM_IC_ConfigChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002b88:	f000 f9f0 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200003a0 	.word	0x200003a0
 8002b98:	40000800 	.word	0x40000800

08002b9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <MX_TIM6_Init+0x64>)
 8002bac:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <MX_TIM6_Init+0x68>)
 8002bae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <MX_TIM6_Init+0x64>)
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <MX_TIM6_Init+0x64>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <MX_TIM6_Init+0x64>)
 8002bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <MX_TIM6_Init+0x64>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bca:	480d      	ldr	r0, [pc, #52]	; (8002c00 <MX_TIM6_Init+0x64>)
 8002bcc:	f004 fae0 	bl	8007190 <HAL_TIM_Base_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002bd6:	f000 f9c9 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002be2:	463b      	mov	r3, r7
 8002be4:	4619      	mov	r1, r3
 8002be6:	4806      	ldr	r0, [pc, #24]	; (8002c00 <MX_TIM6_Init+0x64>)
 8002be8:	f005 ffb0 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002bf2:	f000 f9bb 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200003e8 	.word	0x200003e8
 8002c04:	40001000 	.word	0x40001000

08002c08 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0e:	463b      	mov	r3, r7
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <MX_TIM7_Init+0x64>)
 8002c18:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <MX_TIM7_Init+0x68>)
 8002c1a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 8002c1c:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <MX_TIM7_Init+0x64>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <MX_TIM7_Init+0x64>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000-1;
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <MX_TIM7_Init+0x64>)
 8002c2a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002c2e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_TIM7_Init+0x64>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c36:	480d      	ldr	r0, [pc, #52]	; (8002c6c <MX_TIM7_Init+0x64>)
 8002c38:	f004 faaa 	bl	8007190 <HAL_TIM_Base_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002c42:	f000 f993 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c4e:	463b      	mov	r3, r7
 8002c50:	4619      	mov	r1, r3
 8002c52:	4806      	ldr	r0, [pc, #24]	; (8002c6c <MX_TIM7_Init+0x64>)
 8002c54:	f005 ff7a 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002c5e:	f000 f985 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000430 	.word	0x20000430
 8002c70:	40001400 	.word	0x40001400

08002c74 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b096      	sub	sp, #88	; 0x58
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	615a      	str	r2, [r3, #20]
 8002ca4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	2220      	movs	r2, #32
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f008 f910 	bl	800aed2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002cb2:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002cb4:	4a44      	ldr	r2, [pc, #272]	; (8002dc8 <MX_TIM8_Init+0x154>)
 8002cb6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002cb8:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cbe:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7200-1;
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002cc6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002cca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ccc:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002cd2:	4b3c      	ldr	r3, [pc, #240]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd8:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002cde:	4839      	ldr	r0, [pc, #228]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002ce0:	f004 fa56 	bl	8007190 <HAL_TIM_Base_Init>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002cea:	f000 f93f 	bl	8002f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002cf4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4832      	ldr	r0, [pc, #200]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002cfc:	f005 f9b6 	bl	800806c <HAL_TIM_ConfigClockSource>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002d06:	f000 f931 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002d0a:	482e      	ldr	r0, [pc, #184]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002d0c:	f004 fb68 	bl	80073e0 <HAL_TIM_PWM_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002d16:	f000 f929 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002d22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d26:	4619      	mov	r1, r3
 8002d28:	4826      	ldr	r0, [pc, #152]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002d2a:	f005 ff0f 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002d34:	f000 f91a 	bl	8002f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d38:	2360      	movs	r3, #96	; 0x60
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d44:	2300      	movs	r3, #0
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d50:	2300      	movs	r3, #0
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d58:	2200      	movs	r2, #0
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4819      	ldr	r0, [pc, #100]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002d5e:	f005 f8c3 	bl	8007ee8 <HAL_TIM_PWM_ConfigChannel>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002d68:	f000 f900 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d70:	2204      	movs	r2, #4
 8002d72:	4619      	mov	r1, r3
 8002d74:	4813      	ldr	r0, [pc, #76]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002d76:	f005 f8b7 	bl	8007ee8 <HAL_TIM_PWM_ConfigChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002d80:	f000 f8f4 	bl	8002f6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4807      	ldr	r0, [pc, #28]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002da8:	f005 ff4c 	bl	8008c44 <HAL_TIMEx_ConfigBreakDeadTime>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002db2:	f000 f8db 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002db6:	4803      	ldr	r0, [pc, #12]	; (8002dc4 <MX_TIM8_Init+0x150>)
 8002db8:	f001 fb5a 	bl	8004470 <HAL_TIM_MspPostInit>

}
 8002dbc:	bf00      	nop
 8002dbe:	3758      	adds	r7, #88	; 0x58
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000478 	.word	0x20000478
 8002dc8:	40010400 	.word	0x40010400

08002dcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002dd2:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <MX_USART3_UART_Init+0x50>)
 8002dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002df2:	220c      	movs	r2, #12
 8002df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e02:	4805      	ldr	r0, [pc, #20]	; (8002e18 <MX_USART3_UART_Init+0x4c>)
 8002e04:	f005 ff84 	bl	8008d10 <HAL_UART_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e0e:	f000 f8ad 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200004c0 	.word	0x200004c0
 8002e1c:	40004800 	.word	0x40004800

08002e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	60da      	str	r2, [r3, #12]
 8002e34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	4b48      	ldr	r3, [pc, #288]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a47      	ldr	r2, [pc, #284]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e40:	f043 0310 	orr.w	r3, r3, #16
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b45      	ldr	r3, [pc, #276]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a40      	ldr	r2, [pc, #256]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b3e      	ldr	r3, [pc, #248]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a39      	ldr	r2, [pc, #228]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a32      	ldr	r2, [pc, #200]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <MX_GPIO_Init+0x13c>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin, GPIO_PIN_RESET);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002ec8:	4825      	ldr	r0, [pc, #148]	; (8002f60 <MX_GPIO_Init+0x140>)
 8002eca:	f002 fca3 	bl	8005814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	213c      	movs	r1, #60	; 0x3c
 8002ed2:	4824      	ldr	r0, [pc, #144]	; (8002f64 <MX_GPIO_Init+0x144>)
 8002ed4:	f002 fc9e 	bl	8005814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	4822      	ldr	r0, [pc, #136]	; (8002f68 <MX_GPIO_Init+0x148>)
 8002ede:	f002 fc99 	bl	8005814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET__Pin OLED_DATA_COMMAND__Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin;
 8002ee2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4819      	ldr	r0, [pc, #100]	; (8002f60 <MX_GPIO_Init+0x140>)
 8002efc:	f002 fad6 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTORA_IN2_Pin MOTORA_IN1_Pin MOTORB_IN1_Pin MOTORB_IN2_Pin */
  GPIO_InitStruct.Pin = MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin;
 8002f00:	233c      	movs	r3, #60	; 0x3c
 8002f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f04:	2301      	movs	r3, #1
 8002f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	4619      	mov	r1, r3
 8002f16:	4813      	ldr	r0, [pc, #76]	; (8002f64 <MX_GPIO_Init+0x144>)
 8002f18:	f002 fac8 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8002f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f26:	2301      	movs	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	480d      	ldr	r0, [pc, #52]	; (8002f68 <MX_GPIO_Init+0x148>)
 8002f32:	f002 fabb 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4806      	ldr	r0, [pc, #24]	; (8002f68 <MX_GPIO_Init+0x148>)
 8002f4e:	f002 faad 	bl	80054ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f52:	bf00      	nop
 8002f54:	3728      	adds	r7, #40	; 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40020c00 	.word	0x40020c00

08002f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f70:	b672      	cpsid	i
}
 8002f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <Error_Handler+0x8>
	...

08002f78 <motor_init>:
static PidDef pidDist;
const static float Kp_dist = 0.47;
const static float Ki_dist = 0;
const static float Kd_dist = 0.05;

void motor_init(TIM_HandleTypeDef *pwm, TIM_HandleTypeDef *l_enc, TIM_HandleTypeDef *r_enc) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
	//assign timer pointers.
	motor_pwm_tim = pwm;
 8002f84:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <motor_init+0x84>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6013      	str	r3, [r2, #0]
	l_enc_tim = l_enc;
 8002f8a:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <motor_init+0x88>)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6013      	str	r3, [r2, #0]
	r_enc_tim = r_enc;
 8002f90:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <motor_init+0x8c>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6013      	str	r3, [r2, #0]

	//start Encoders and PWM for L, R motors.
	HAL_TIM_Encoder_Start_IT(l_enc, TIM_CHANNEL_ALL);
 8002f96:	213c      	movs	r1, #60	; 0x3c
 8002f98:	68b8      	ldr	r0, [r7, #8]
 8002f9a:	f004 fd6b 	bl	8007a74 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(r_enc, TIM_CHANNEL_ALL);
 8002f9e:	213c      	movs	r1, #60	; 0x3c
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f004 fd67 	bl	8007a74 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(pwm, L_CHANNEL);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f004 fa73 	bl	8007494 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm, R_CHANNEL);
 8002fae:	2104      	movs	r1, #4
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f004 fa6f 	bl	8007494 <HAL_TIM_PWM_Start>

	//initialize PID values.
	pid_init(&pidMatch, Kp_match, Ki_match, Kd_match);
 8002fb6:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 8002fba:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003008 <motor_init+0x90>
 8002fbe:	eddf 6a13 	vldr	s13, [pc, #76]	; 800300c <motor_init+0x94>
 8002fc2:	eeb0 1a66 	vmov.f32	s2, s13
 8002fc6:	eef0 0a47 	vmov.f32	s1, s14
 8002fca:	eeb0 0a67 	vmov.f32	s0, s15
 8002fce:	4810      	ldr	r0, [pc, #64]	; (8003010 <motor_init+0x98>)
 8002fd0:	f000 fca0 	bl	8003914 <pid_init>
	pid_init(&pidDist, Kp_dist, Ki_dist, Kd_dist);
 8002fd4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003014 <motor_init+0x9c>
 8002fd8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003018 <motor_init+0xa0>
 8002fdc:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800301c <motor_init+0xa4>
 8002fe0:	eeb0 1a66 	vmov.f32	s2, s13
 8002fe4:	eef0 0a47 	vmov.f32	s1, s14
 8002fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fec:	480c      	ldr	r0, [pc, #48]	; (8003020 <motor_init+0xa8>)
 8002fee:	f000 fc91 	bl	8003914 <pid_init>
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000578 	.word	0x20000578
 8003000:	2000057c 	.word	0x2000057c
 8003004:	20000580 	.word	0x20000580
 8003008:	3cf5c28f 	.word	0x3cf5c28f
 800300c:	3ca3d70a 	.word	0x3ca3d70a
 8003010:	2000058c 	.word	0x2000058c
 8003014:	3ef0a3d7 	.word	0x3ef0a3d7
 8003018:	00000000 	.word	0x00000000
 800301c:	3d4ccccd 	.word	0x3d4ccccd
 8003020:	200005a0 	.word	0x200005a0

08003024 <timer_reset>:

static void timer_reset(TIM_HandleTypeDef *htim) {
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim, 0);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2200      	movs	r2, #0
 8003032:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <setPwmLR>:

static void setPwmLR() {
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
	//set L, R channels.
	__HAL_TIM_SetCompare(motor_pwm_tim, L_CHANNEL,
 8003044:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <setPwmLR+0x40>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	f241 7270 	movw	r2, #6000	; 0x1770
 800304c:	4293      	cmp	r3, r2
 800304e:	bf28      	it	cs
 8003050:	4613      	movcs	r3, r2
 8003052:	b29a      	uxth	r2, r3
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <setPwmLR+0x44>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	635a      	str	r2, [r3, #52]	; 0x34
		lPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: lPwmVal);
	__HAL_TIM_SetCompare(motor_pwm_tim, R_CHANNEL,
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <setPwmLR+0x48>)
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	f241 7270 	movw	r2, #6000	; 0x1770
 8003064:	4293      	cmp	r3, r2
 8003066:	bf28      	it	cs
 8003068:	4613      	movcs	r3, r2
 800306a:	b29a      	uxth	r2, r3
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <setPwmLR+0x44>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	639a      	str	r2, [r3, #56]	; 0x38
		rPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: rPwmVal);
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000588 	.word	0x20000588
 8003084:	20000578 	.word	0x20000578
 8003088:	2000058a 	.word	0x2000058a

0800308c <resetPwmParams>:

static void resetPwmParams() {
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
	pid_reset(&pidMatch);
 8003090:	4803      	ldr	r0, [pc, #12]	; (80030a0 <resetPwmParams+0x14>)
 8003092:	f000 fc2d 	bl	80038f0 <pid_reset>
	pid_reset(&pidDist);
 8003096:	4803      	ldr	r0, [pc, #12]	; (80030a4 <resetPwmParams+0x18>)
 8003098:	f000 fc2a 	bl	80038f0 <pid_reset>
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	2000058c 	.word	0x2000058c
 80030a4:	200005a0 	.word	0x200005a0

080030a8 <resetEncoders>:

static void resetEncoders() {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	timer_reset(l_enc_tim);
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <resetEncoders+0x1c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ffb7 	bl	8003024 <timer_reset>
	timer_reset(r_enc_tim);
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <resetEncoders+0x20>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ffb2 	bl	8003024 <timer_reset>
}
 80030c0:	bf00      	nop
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	2000057c 	.word	0x2000057c
 80030c8:	20000580 	.word	0x20000580

080030cc <motor_getDist>:

float motor_getDist() {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
	uint32_t lCounter = __HAL_TIM_GET_COUNTER(l_enc_tim),
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <motor_getDist+0x68>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	60bb      	str	r3, [r7, #8]
			rCounter = __HAL_TIM_GET_COUNTER(r_enc_tim);
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <motor_getDist+0x6c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	607b      	str	r3, [r7, #4]
	int16_t lCount = (int16_t) lCounter,
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	81fb      	strh	r3, [r7, #14]
			rCount = (int16_t) rCounter;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	81bb      	strh	r3, [r7, #12]
	if (lCount < 0) lCount = -lCount;
 80030ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	da03      	bge.n	80030fe <motor_getDist+0x32>
 80030f6:	89fb      	ldrh	r3, [r7, #14]
 80030f8:	425b      	negs	r3, r3
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	81fb      	strh	r3, [r7, #14]
	if (rCount < 0) rCount = -rCount;
 80030fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	da03      	bge.n	800310e <motor_getDist+0x42>
 8003106:	89bb      	ldrh	r3, [r7, #12]
 8003108:	425b      	negs	r3, r3
 800310a:	b29b      	uxth	r3, r3
 800310c:	81bb      	strh	r3, [r7, #12]

	uint16_t pulses = ((uint16_t) lCount) + ((uint16_t) rCount);
 800310e:	89fa      	ldrh	r2, [r7, #14]
 8003110:	89bb      	ldrh	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	807b      	strh	r3, [r7, #2]
	pulses >>= 2;
 8003116:	887b      	ldrh	r3, [r7, #2]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	807b      	strh	r3, [r7, #2]

	return get_distance_cm(pulses);
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe fdba 	bl	8001c98 <get_distance_cm>
 8003124:	eef0 7a40 	vmov.f32	s15, s0
}
 8003128:	eeb0 0a67 	vmov.f32	s0, s15
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	2000057c 	.word	0x2000057c
 8003138:	20000580 	.word	0x20000580

0800313c <motor_pwmCorrection>:

//PWM at fixed intervals.
void motor_pwmCorrection(int8_t dir, float wDiff, float rBack, float rRobot, float distDiff, float brakingDist) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	ed87 0a04 	vstr	s0, [r7, #16]
 8003148:	edc7 0a03 	vstr	s1, [r7, #12]
 800314c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003150:	edc7 1a01 	vstr	s3, [r7, #4]
 8003154:	ed87 2a00 	vstr	s4, [r7]
 8003158:	75fb      	strb	r3, [r7, #23]
	//adjust speed based on distance to drive.
	if (distDiff < brakingDist) {
 800315a:	ed97 7a01 	vldr	s14, [r7, #4]
 800315e:	edd7 7a00 	vldr	s15, [r7]
 8003162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316a:	d51f      	bpl.n	80031ac <motor_pwmCorrection+0x70>
		pwmValAccel = MOTOR_PWM_MIN + pid_adjust(&pidDist, distDiff) / brakingDist * (pwmValTarget - MOTOR_PWM_MIN);
 800316c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003170:	4870      	ldr	r0, [pc, #448]	; (8003334 <motor_pwmCorrection+0x1f8>)
 8003172:	f000 fbe9 	bl	8003948 <pid_adjust>
 8003176:	eef0 6a40 	vmov.f32	s13, s0
 800317a:	edd7 7a00 	vldr	s15, [r7]
 800317e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003182:	4b6d      	ldr	r3, [pc, #436]	; (8003338 <motor_pwmCorrection+0x1fc>)
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	3bfa      	subs	r3, #250	; 0xfa
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003194:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800333c <motor_pwmCorrection+0x200>
 8003198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800319c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031a0:	ee17 3a90 	vmov	r3, s15
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	4b66      	ldr	r3, [pc, #408]	; (8003340 <motor_pwmCorrection+0x204>)
 80031a8:	801a      	strh	r2, [r3, #0]
 80031aa:	e00b      	b.n	80031c4 <motor_pwmCorrection+0x88>
	} else if (pwmValAccel < pwmValTarget) pwmValAccel += MOTOR_PWM_ACCEL;
 80031ac:	4b64      	ldr	r3, [pc, #400]	; (8003340 <motor_pwmCorrection+0x204>)
 80031ae:	881a      	ldrh	r2, [r3, #0]
 80031b0:	4b61      	ldr	r3, [pc, #388]	; (8003338 <motor_pwmCorrection+0x1fc>)
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d205      	bcs.n	80031c4 <motor_pwmCorrection+0x88>
 80031b8:	4b61      	ldr	r3, [pc, #388]	; (8003340 <motor_pwmCorrection+0x204>)
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	330f      	adds	r3, #15
 80031be:	b29a      	uxth	r2, r3
 80031c0:	4b5f      	ldr	r3, [pc, #380]	; (8003340 <motor_pwmCorrection+0x204>)
 80031c2:	801a      	strh	r2, [r3, #0]
	if (pwmValAccel > pwmValTarget) pwmValAccel = pwmValTarget;
 80031c4:	4b5e      	ldr	r3, [pc, #376]	; (8003340 <motor_pwmCorrection+0x204>)
 80031c6:	881a      	ldrh	r2, [r3, #0]
 80031c8:	4b5b      	ldr	r3, [pc, #364]	; (8003338 <motor_pwmCorrection+0x1fc>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d903      	bls.n	80031d8 <motor_pwmCorrection+0x9c>
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <motor_pwmCorrection+0x1fc>)
 80031d2:	881a      	ldrh	r2, [r3, #0]
 80031d4:	4b5a      	ldr	r3, [pc, #360]	; (8003340 <motor_pwmCorrection+0x204>)
 80031d6:	801a      	strh	r2, [r3, #0]

	float offset = pid_adjust(&pidMatch, wDiff) * pwmValAccel / pwmValTarget;
 80031d8:	ed97 0a04 	vldr	s0, [r7, #16]
 80031dc:	4859      	ldr	r0, [pc, #356]	; (8003344 <motor_pwmCorrection+0x208>)
 80031de:	f000 fbb3 	bl	8003948 <pid_adjust>
 80031e2:	eeb0 7a40 	vmov.f32	s14, s0
 80031e6:	4b56      	ldr	r3, [pc, #344]	; (8003340 <motor_pwmCorrection+0x204>)
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80031f6:	4b50      	ldr	r3, [pc, #320]	; (8003338 <motor_pwmCorrection+0x1fc>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003206:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//	float offset = 0;
	float lScale = 1, rScale = 1;
 800320a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003214:	61fb      	str	r3, [r7, #28]

	if (rBack != 0 && rRobot != 0) {
 8003216:	edd7 7a03 	vldr	s15, [r7, #12]
 800321a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	d04d      	beq.n	80032c0 <motor_pwmCorrection+0x184>
 8003224:	edd7 7a02 	vldr	s15, [r7, #8]
 8003228:	eef5 7a40 	vcmp.f32	s15, #0.0
 800322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003230:	d046      	beq.n	80032c0 <motor_pwmCorrection+0x184>
		float B2 = WHEELBASE_CM / 2;
 8003232:	4b45      	ldr	r3, [pc, #276]	; (8003348 <motor_pwmCorrection+0x20c>)
 8003234:	61bb      	str	r3, [r7, #24]

		if (rBack < 0 && rRobot < 0) {
 8003236:	edd7 7a03 	vldr	s15, [r7, #12]
 800323a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d525      	bpl.n	8003290 <motor_pwmCorrection+0x154>
 8003244:	edd7 7a02 	vldr	s15, [r7, #8]
 8003248:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	d51e      	bpl.n	8003290 <motor_pwmCorrection+0x154>
			lScale = (-rBack - B2) / -rRobot;
 8003252:	edd7 7a03 	vldr	s15, [r7, #12]
 8003256:	eeb1 7a67 	vneg.f32	s14, s15
 800325a:	edd7 7a06 	vldr	s15, [r7, #24]
 800325e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003262:	eef1 6a67 	vneg.f32	s13, s15
 8003266:	ed97 7a02 	vldr	s14, [r7, #8]
 800326a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800326e:	edc7 7a08 	vstr	s15, [r7, #32]
			rScale = (-rBack + B2) / -rRobot;
 8003272:	ed97 7a06 	vldr	s14, [r7, #24]
 8003276:	edd7 7a03 	vldr	s15, [r7, #12]
 800327a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800327e:	eef1 6a67 	vneg.f32	s13, s15
 8003282:	ed97 7a02 	vldr	s14, [r7, #8]
 8003286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800328a:	edc7 7a07 	vstr	s15, [r7, #28]
 800328e:	e017      	b.n	80032c0 <motor_pwmCorrection+0x184>
		} else {
			lScale = (rBack + B2) / rRobot;
 8003290:	ed97 7a03 	vldr	s14, [r7, #12]
 8003294:	edd7 7a06 	vldr	s15, [r7, #24]
 8003298:	ee77 6a27 	vadd.f32	s13, s14, s15
 800329c:	ed97 7a02 	vldr	s14, [r7, #8]
 80032a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a4:	edc7 7a08 	vstr	s15, [r7, #32]
			rScale = (rBack - B2) / rRobot;
 80032a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80032ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80032b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80032b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80032b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032bc:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}

	if (dir < 0) {
 80032c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da05      	bge.n	80032d4 <motor_pwmCorrection+0x198>
		offset = -offset;
 80032c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80032cc:	eef1 7a67 	vneg.f32	s15, s15
 80032d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	lPwmVal = pwmValAccel * lScale - offset;
 80032d4:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <motor_pwmCorrection+0x204>)
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	ee07 3a90 	vmov	s15, r3
 80032dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80032e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80032ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032f4:	ee17 3a90 	vmov	r3, s15
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <motor_pwmCorrection+0x210>)
 80032fc:	801a      	strh	r2, [r3, #0]
	rPwmVal = pwmValAccel * rScale + offset;
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <motor_pwmCorrection+0x204>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800330a:	edd7 7a07 	vldr	s15, [r7, #28]
 800330e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003312:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800331e:	ee17 3a90 	vmov	r3, s15
 8003322:	b29a      	uxth	r2, r3
 8003324:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <motor_pwmCorrection+0x214>)
 8003326:	801a      	strh	r2, [r3, #0]

	setPwmLR();
 8003328:	f7ff fe8a 	bl	8003040 <setPwmLR>
}
 800332c:	bf00      	nop
 800332e:	3728      	adds	r7, #40	; 0x28
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200005a0 	.word	0x200005a0
 8003338:	20000586 	.word	0x20000586
 800333c:	437a0000 	.word	0x437a0000
 8003340:	20000584 	.word	0x20000584
 8003344:	2000058c 	.word	0x2000058c
 8003348:	4101999a 	.word	0x4101999a
 800334c:	20000588 	.word	0x20000588
 8003350:	2000058a 	.word	0x2000058a

08003354 <setDriveDir>:

static void setDriveDir(int8_t dir) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
	if (dir > 0) {
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	2b00      	cmp	r3, #0
 8003364:	dd14      	ble.n	8003390 <setDriveDir+0x3c>
		//forward.
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_SET);
 8003366:	2201      	movs	r2, #1
 8003368:	2108      	movs	r1, #8
 800336a:	4822      	ldr	r0, [pc, #136]	; (80033f4 <setDriveDir+0xa0>)
 800336c:	f002 fa52 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
 8003370:	2200      	movs	r2, #0
 8003372:	2104      	movs	r1, #4
 8003374:	481f      	ldr	r0, [pc, #124]	; (80033f4 <setDriveDir+0xa0>)
 8003376:	f002 fa4d 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_SET);
 800337a:	2201      	movs	r2, #1
 800337c:	2110      	movs	r1, #16
 800337e:	481d      	ldr	r0, [pc, #116]	; (80033f4 <setDriveDir+0xa0>)
 8003380:	f002 fa48 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8003384:	2200      	movs	r2, #0
 8003386:	2120      	movs	r1, #32
 8003388:	481a      	ldr	r0, [pc, #104]	; (80033f4 <setDriveDir+0xa0>)
 800338a:	f002 fa43 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
	}
}
 800338e:	e02c      	b.n	80033ea <setDriveDir+0x96>
	} else if (dir < 0) {
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	2b00      	cmp	r3, #0
 8003396:	da14      	bge.n	80033c2 <setDriveDir+0x6e>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
 8003398:	2200      	movs	r2, #0
 800339a:	2108      	movs	r1, #8
 800339c:	4815      	ldr	r0, [pc, #84]	; (80033f4 <setDriveDir+0xa0>)
 800339e:	f002 fa39 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_SET);
 80033a2:	2201      	movs	r2, #1
 80033a4:	2104      	movs	r1, #4
 80033a6:	4813      	ldr	r0, [pc, #76]	; (80033f4 <setDriveDir+0xa0>)
 80033a8:	f002 fa34 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
 80033ac:	2200      	movs	r2, #0
 80033ae:	2110      	movs	r1, #16
 80033b0:	4810      	ldr	r0, [pc, #64]	; (80033f4 <setDriveDir+0xa0>)
 80033b2:	f002 fa2f 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_SET);
 80033b6:	2201      	movs	r2, #1
 80033b8:	2120      	movs	r1, #32
 80033ba:	480e      	ldr	r0, [pc, #56]	; (80033f4 <setDriveDir+0xa0>)
 80033bc:	f002 fa2a 	bl	8005814 <HAL_GPIO_WritePin>
}
 80033c0:	e013      	b.n	80033ea <setDriveDir+0x96>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2108      	movs	r1, #8
 80033c6:	480b      	ldr	r0, [pc, #44]	; (80033f4 <setDriveDir+0xa0>)
 80033c8:	f002 fa24 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
 80033cc:	2200      	movs	r2, #0
 80033ce:	2104      	movs	r1, #4
 80033d0:	4808      	ldr	r0, [pc, #32]	; (80033f4 <setDriveDir+0xa0>)
 80033d2:	f002 fa1f 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2110      	movs	r1, #16
 80033da:	4806      	ldr	r0, [pc, #24]	; (80033f4 <setDriveDir+0xa0>)
 80033dc:	f002 fa1a 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2120      	movs	r1, #32
 80033e4:	4803      	ldr	r0, [pc, #12]	; (80033f4 <setDriveDir+0xa0>)
 80033e6:	f002 fa15 	bl	8005814 <HAL_GPIO_WritePin>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40020000 	.word	0x40020000

080033f8 <motor_setDrive>:

//speed: 0 - 100
void motor_setDrive(int8_t dir, uint8_t speed) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	460a      	mov	r2, r1
 8003402:	71fb      	strb	r3, [r7, #7]
 8003404:	4613      	mov	r3, r2
 8003406:	71bb      	strb	r3, [r7, #6]
	if (dir == 0) {
 8003408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d103      	bne.n	8003418 <motor_setDrive+0x20>
		setDriveDir(0);
 8003410:	2000      	movs	r0, #0
 8003412:	f7ff ff9f 	bl	8003354 <setDriveDir>
		return;
 8003416:	e02d      	b.n	8003474 <motor_setDrive+0x7c>
	}

	//derive PWM value.
	pwmValTarget = MOTOR_PWM_MAX / 100 * speed;
 8003418:	79bb      	ldrb	r3, [r7, #6]
 800341a:	b29b      	uxth	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	b29a      	uxth	r2, r3
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <motor_setDrive+0x84>)
 8003428:	801a      	strh	r2, [r3, #0]
	if (pwmValTarget > 0) pwmValTarget--;
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <motor_setDrive+0x84>)
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <motor_setDrive+0x46>
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <motor_setDrive+0x84>)
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <motor_setDrive+0x84>)
 800343c:	801a      	strh	r2, [r3, #0]

	pwmValAccel = speed > 0
 800343e:	79bb      	ldrb	r3, [r7, #6]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <motor_setDrive+0x50>
 8003444:	22fa      	movs	r2, #250	; 0xfa
 8003446:	e000      	b.n	800344a <motor_setDrive+0x52>
 8003448:	2200      	movs	r2, #0
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <motor_setDrive+0x88>)
 800344c:	801a      	strh	r2, [r3, #0]
		? MOTOR_PWM_MIN
		: 0;
	lPwmVal = rPwmVal = pwmValAccel;
 800344e:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <motor_setDrive+0x88>)
 8003450:	881a      	ldrh	r2, [r3, #0]
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <motor_setDrive+0x8c>)
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <motor_setDrive+0x8c>)
 8003458:	881a      	ldrh	r2, [r3, #0]
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <motor_setDrive+0x90>)
 800345c:	801a      	strh	r2, [r3, #0]

	//reset.
	resetEncoders();
 800345e:	f7ff fe23 	bl	80030a8 <resetEncoders>
	resetPwmParams();
 8003462:	f7ff fe13 	bl	800308c <resetPwmParams>

	setDriveDir(dir);
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ff72 	bl	8003354 <setDriveDir>
	setPwmLR();
 8003470:	f7ff fde6 	bl	8003040 <setPwmLR>
}
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000586 	.word	0x20000586
 8003480:	20000584 	.word	0x20000584
 8003484:	2000058a 	.word	0x2000058a
 8003488:	20000588 	.word	0x20000588

0800348c <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	460a      	mov	r2, r1
 8003496:	71fb      	strb	r3, [r7, #7]
 8003498:	4613      	mov	r3, r2
 800349a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 800349c:	79bb      	ldrb	r3, [r7, #6]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d106      	bne.n	80034b0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 80034a2:	2201      	movs	r2, #1
 80034a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034a8:	481c      	ldr	r0, [pc, #112]	; (800351c <OLED_WR_Byte+0x90>)
 80034aa:	f002 f9b3 	bl	8005814 <HAL_GPIO_WritePin>
 80034ae:	e005      	b.n	80034bc <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 80034b0:	2200      	movs	r2, #0
 80034b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034b6:	4819      	ldr	r0, [pc, #100]	; (800351c <OLED_WR_Byte+0x90>)
 80034b8:	f002 f9ac 	bl	8005814 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e01f      	b.n	8003502 <OLED_WR_Byte+0x76>
	{ // Complete the code below
		OLED_SCLK_Clr();
 80034c2:	2200      	movs	r2, #0
 80034c4:	2120      	movs	r1, #32
 80034c6:	4815      	ldr	r0, [pc, #84]	; (800351c <OLED_WR_Byte+0x90>)
 80034c8:	f002 f9a4 	bl	8005814 <HAL_GPIO_WritePin>
		if (dat & (0x80 >> i)) OLED_SDIN_Set();
 80034cc:	79fa      	ldrb	r2, [r7, #7]
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	2180      	movs	r1, #128	; 0x80
 80034d2:	fa41 f303 	asr.w	r3, r1, r3
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <OLED_WR_Byte+0x5c>
 80034dc:	2201      	movs	r2, #1
 80034de:	2140      	movs	r1, #64	; 0x40
 80034e0:	480e      	ldr	r0, [pc, #56]	; (800351c <OLED_WR_Byte+0x90>)
 80034e2:	f002 f997 	bl	8005814 <HAL_GPIO_WritePin>
 80034e6:	e004      	b.n	80034f2 <OLED_WR_Byte+0x66>
		else OLED_SDIN_Clr();
 80034e8:	2200      	movs	r2, #0
 80034ea:	2140      	movs	r1, #64	; 0x40
 80034ec:	480b      	ldr	r0, [pc, #44]	; (800351c <OLED_WR_Byte+0x90>)
 80034ee:	f002 f991 	bl	8005814 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80034f2:	2201      	movs	r2, #1
 80034f4:	2120      	movs	r1, #32
 80034f6:	4809      	ldr	r0, [pc, #36]	; (800351c <OLED_WR_Byte+0x90>)
 80034f8:	f002 f98c 	bl	8005814 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	3301      	adds	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	2b07      	cmp	r3, #7
 8003506:	d9dc      	bls.n	80034c2 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 8003508:	2201      	movs	r2, #1
 800350a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800350e:	4803      	ldr	r0, [pc, #12]	; (800351c <OLED_WR_Byte+0x90>)
 8003510:	f002 f980 	bl	8005814 <HAL_GPIO_WritePin>
} 
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000

08003520 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8003526:	2300      	movs	r3, #0
 8003528:	71fb      	strb	r3, [r7, #7]
 800352a:	e026      	b.n	800357a <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	3b50      	subs	r3, #80	; 0x50
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ffa9 	bl	800348c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 800353a:	2100      	movs	r1, #0
 800353c:	2000      	movs	r0, #0
 800353e:	f7ff ffa5 	bl	800348c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8003542:	2100      	movs	r1, #0
 8003544:	2010      	movs	r0, #16
 8003546:	f7ff ffa1 	bl	800348c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 800354a:	2300      	movs	r3, #0
 800354c:	71bb      	strb	r3, [r7, #6]
 800354e:	e00d      	b.n	800356c <OLED_Refresh_Gram+0x4c>
 8003550:	79ba      	ldrb	r2, [r7, #6]
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	490d      	ldr	r1, [pc, #52]	; (800358c <OLED_Refresh_Gram+0x6c>)
 8003556:	00d2      	lsls	r2, r2, #3
 8003558:	440a      	add	r2, r1
 800355a:	4413      	add	r3, r2
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff93 	bl	800348c <OLED_WR_Byte>
 8003566:	79bb      	ldrb	r3, [r7, #6]
 8003568:	3301      	adds	r3, #1
 800356a:	71bb      	strb	r3, [r7, #6]
 800356c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003570:	2b00      	cmp	r3, #0
 8003572:	daed      	bge.n	8003550 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	3301      	adds	r3, #1
 8003578:	71fb      	strb	r3, [r7, #7]
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	2b07      	cmp	r3, #7
 800357e:	d9d5      	bls.n	800352c <OLED_Refresh_Gram+0xc>
	}
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200005b4 	.word	0x200005b4

08003590 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8003596:	2300      	movs	r3, #0
 8003598:	71fb      	strb	r3, [r7, #7]
 800359a:	e014      	b.n	80035c6 <OLED_Clear+0x36>
 800359c:	2300      	movs	r3, #0
 800359e:	71bb      	strb	r3, [r7, #6]
 80035a0:	e00a      	b.n	80035b8 <OLED_Clear+0x28>
 80035a2:	79ba      	ldrb	r2, [r7, #6]
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	490c      	ldr	r1, [pc, #48]	; (80035d8 <OLED_Clear+0x48>)
 80035a8:	00d2      	lsls	r2, r2, #3
 80035aa:	440a      	add	r2, r1
 80035ac:	4413      	add	r3, r2
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	79bb      	ldrb	r3, [r7, #6]
 80035b4:	3301      	adds	r3, #1
 80035b6:	71bb      	strb	r3, [r7, #6]
 80035b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	daf0      	bge.n	80035a2 <OLED_Clear+0x12>
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	3301      	adds	r3, #1
 80035c4:	71fb      	strb	r3, [r7, #7]
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	2b07      	cmp	r3, #7
 80035ca:	d9e7      	bls.n	800359c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80035cc:	f7ff ffa8 	bl	8003520 <OLED_Refresh_Gram>
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200005b4 	.word	0x200005b4

080035dc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
 80035e6:	460b      	mov	r3, r1
 80035e8:	71bb      	strb	r3, [r7, #6]
 80035ea:	4613      	mov	r3, r2
 80035ec:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	db41      	blt.n	800367e <OLED_DrawPoint+0xa2>
 80035fa:	79bb      	ldrb	r3, [r7, #6]
 80035fc:	2b3f      	cmp	r3, #63	; 0x3f
 80035fe:	d83e      	bhi.n	800367e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003600:	79bb      	ldrb	r3, [r7, #6]
 8003602:	08db      	lsrs	r3, r3, #3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f1c3 0307 	rsb	r3, r3, #7
 800360a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800360c:	79bb      	ldrb	r3, [r7, #6]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003614:	7b7b      	ldrb	r3, [r7, #13]
 8003616:	f1c3 0307 	rsb	r3, r3, #7
 800361a:	2201      	movs	r2, #1
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8003622:	797b      	ldrb	r3, [r7, #5]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d012      	beq.n	800364e <OLED_DrawPoint+0x72>
 8003628:	79fa      	ldrb	r2, [r7, #7]
 800362a:	7bbb      	ldrb	r3, [r7, #14]
 800362c:	4917      	ldr	r1, [pc, #92]	; (800368c <OLED_DrawPoint+0xb0>)
 800362e:	00d2      	lsls	r2, r2, #3
 8003630:	440a      	add	r2, r1
 8003632:	4413      	add	r3, r2
 8003634:	7818      	ldrb	r0, [r3, #0]
 8003636:	79fa      	ldrb	r2, [r7, #7]
 8003638:	7bbb      	ldrb	r3, [r7, #14]
 800363a:	7bf9      	ldrb	r1, [r7, #15]
 800363c:	4301      	orrs	r1, r0
 800363e:	b2c8      	uxtb	r0, r1
 8003640:	4912      	ldr	r1, [pc, #72]	; (800368c <OLED_DrawPoint+0xb0>)
 8003642:	00d2      	lsls	r2, r2, #3
 8003644:	440a      	add	r2, r1
 8003646:	4413      	add	r3, r2
 8003648:	4602      	mov	r2, r0
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e018      	b.n	8003680 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800364e:	79fa      	ldrb	r2, [r7, #7]
 8003650:	7bbb      	ldrb	r3, [r7, #14]
 8003652:	490e      	ldr	r1, [pc, #56]	; (800368c <OLED_DrawPoint+0xb0>)
 8003654:	00d2      	lsls	r2, r2, #3
 8003656:	440a      	add	r2, r1
 8003658:	4413      	add	r3, r2
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b25a      	sxtb	r2, r3
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	43db      	mvns	r3, r3
 8003664:	b25b      	sxtb	r3, r3
 8003666:	4013      	ands	r3, r2
 8003668:	b259      	sxtb	r1, r3
 800366a:	79fa      	ldrb	r2, [r7, #7]
 800366c:	7bbb      	ldrb	r3, [r7, #14]
 800366e:	b2c8      	uxtb	r0, r1
 8003670:	4906      	ldr	r1, [pc, #24]	; (800368c <OLED_DrawPoint+0xb0>)
 8003672:	00d2      	lsls	r2, r2, #3
 8003674:	440a      	add	r2, r1
 8003676:	4413      	add	r3, r2
 8003678:	4602      	mov	r2, r0
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e000      	b.n	8003680 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800367e:	bf00      	nop
}
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	200005b4 	.word	0x200005b4

08003690 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	4604      	mov	r4, r0
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	461a      	mov	r2, r3
 800369e:	4623      	mov	r3, r4
 80036a0:	71fb      	strb	r3, [r7, #7]
 80036a2:	4603      	mov	r3, r0
 80036a4:	71bb      	strb	r3, [r7, #6]
 80036a6:	460b      	mov	r3, r1
 80036a8:	717b      	strb	r3, [r7, #5]
 80036aa:	4613      	mov	r3, r2
 80036ac:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80036ae:	79bb      	ldrb	r3, [r7, #6]
 80036b0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80036b2:	797b      	ldrb	r3, [r7, #5]
 80036b4:	3b20      	subs	r3, #32
 80036b6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80036b8:	2300      	movs	r3, #0
 80036ba:	73bb      	strb	r3, [r7, #14]
 80036bc:	e04d      	b.n	800375a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80036be:	793b      	ldrb	r3, [r7, #4]
 80036c0:	2b0c      	cmp	r3, #12
 80036c2:	d10b      	bne.n	80036dc <OLED_ShowChar+0x4c>
 80036c4:	797a      	ldrb	r2, [r7, #5]
 80036c6:	7bb9      	ldrb	r1, [r7, #14]
 80036c8:	4828      	ldr	r0, [pc, #160]	; (800376c <OLED_ShowChar+0xdc>)
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4403      	add	r3, r0
 80036d4:	440b      	add	r3, r1
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e007      	b.n	80036ec <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80036dc:	797a      	ldrb	r2, [r7, #5]
 80036de:	7bbb      	ldrb	r3, [r7, #14]
 80036e0:	4923      	ldr	r1, [pc, #140]	; (8003770 <OLED_ShowChar+0xe0>)
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	440a      	add	r2, r1
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80036ec:	2300      	movs	r3, #0
 80036ee:	737b      	strb	r3, [r7, #13]
 80036f0:	e02d      	b.n	800374e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80036f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	da07      	bge.n	800370a <OLED_ShowChar+0x7a>
 80036fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036fe:	79b9      	ldrb	r1, [r7, #6]
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff ff6a 	bl	80035dc <OLED_DrawPoint>
 8003708:	e00c      	b.n	8003724 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800370a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	79b9      	ldrb	r1, [r7, #6]
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff ff5c 	bl	80035dc <OLED_DrawPoint>
			temp<<=1;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
			y++;
 800372a:	79bb      	ldrb	r3, [r7, #6]
 800372c:	3301      	adds	r3, #1
 800372e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003730:	79ba      	ldrb	r2, [r7, #6]
 8003732:	7b3b      	ldrb	r3, [r7, #12]
 8003734:	1ad2      	subs	r2, r2, r3
 8003736:	793b      	ldrb	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d105      	bne.n	8003748 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800373c:	7b3b      	ldrb	r3, [r7, #12]
 800373e:	71bb      	strb	r3, [r7, #6]
				x++;
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	3301      	adds	r3, #1
 8003744:	71fb      	strb	r3, [r7, #7]
				break;
 8003746:	e005      	b.n	8003754 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8003748:	7b7b      	ldrb	r3, [r7, #13]
 800374a:	3301      	adds	r3, #1
 800374c:	737b      	strb	r3, [r7, #13]
 800374e:	7b7b      	ldrb	r3, [r7, #13]
 8003750:	2b07      	cmp	r3, #7
 8003752:	d9ce      	bls.n	80036f2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8003754:	7bbb      	ldrb	r3, [r7, #14]
 8003756:	3301      	adds	r3, #1
 8003758:	73bb      	strb	r3, [r7, #14]
 800375a:	7bba      	ldrb	r2, [r7, #14]
 800375c:	793b      	ldrb	r3, [r7, #4]
 800375e:	429a      	cmp	r2, r3
 8003760:	d3ad      	bcc.n	80036be <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bd90      	pop	{r4, r7, pc}
 800376c:	08010de0 	.word	0x08010de0
 8003770:	08011254 	.word	0x08011254

08003774 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af02      	add	r7, sp, #8
 800377a:	4603      	mov	r3, r0
 800377c:	603a      	str	r2, [r7, #0]
 800377e:	71fb      	strb	r3, [r7, #7]
 8003780:	460b      	mov	r3, r1
 8003782:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003784:	e01f      	b.n	80037c6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	2b7a      	cmp	r3, #122	; 0x7a
 800378a:	d904      	bls.n	8003796 <OLED_ShowString+0x22>
 800378c:	2300      	movs	r3, #0
 800378e:	71fb      	strb	r3, [r7, #7]
 8003790:	79bb      	ldrb	r3, [r7, #6]
 8003792:	3310      	adds	r3, #16
 8003794:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8003796:	79bb      	ldrb	r3, [r7, #6]
 8003798:	2b3a      	cmp	r3, #58	; 0x3a
 800379a:	d905      	bls.n	80037a8 <OLED_ShowString+0x34>
 800379c:	2300      	movs	r3, #0
 800379e:	71fb      	strb	r3, [r7, #7]
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	71bb      	strb	r3, [r7, #6]
 80037a4:	f7ff fef4 	bl	8003590 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	79b9      	ldrb	r1, [r7, #6]
 80037ae:	79f8      	ldrb	r0, [r7, #7]
 80037b0:	2301      	movs	r3, #1
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	230c      	movs	r3, #12
 80037b6:	f7ff ff6b 	bl	8003690 <OLED_ShowChar>
        x+=8;
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	3308      	adds	r3, #8
 80037be:	71fb      	strb	r3, [r7, #7]
        p++;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	3301      	adds	r3, #1
 80037c4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1db      	bne.n	8003786 <OLED_ShowString+0x12>
    }  
}	 
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <OLED_Init>:

void OLED_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80037dc:	f003 f858 	bl	8006890 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80037e0:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <OLED_Init+0x110>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a40      	ldr	r2, [pc, #256]	; (80038e8 <OLED_Init+0x110>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
 80037ec:	4b3e      	ldr	r3, [pc, #248]	; (80038e8 <OLED_Init+0x110>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a3d      	ldr	r2, [pc, #244]	; (80038e8 <OLED_Init+0x110>)
 80037f2:	f023 0304 	bic.w	r3, r3, #4
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80037f8:	f003 f85e 	bl	80068b8 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80037fc:	2200      	movs	r2, #0
 80037fe:	2180      	movs	r1, #128	; 0x80
 8003800:	483a      	ldr	r0, [pc, #232]	; (80038ec <OLED_Init+0x114>)
 8003802:	f002 f807 	bl	8005814 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003806:	2064      	movs	r0, #100	; 0x64
 8003808:	f001 f8bc 	bl	8004984 <HAL_Delay>
	OLED_RST_Set();
 800380c:	2201      	movs	r2, #1
 800380e:	2180      	movs	r1, #128	; 0x80
 8003810:	4836      	ldr	r0, [pc, #216]	; (80038ec <OLED_Init+0x114>)
 8003812:	f001 ffff 	bl	8005814 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8003816:	2100      	movs	r1, #0
 8003818:	20ae      	movs	r0, #174	; 0xae
 800381a:	f7ff fe37 	bl	800348c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800381e:	2100      	movs	r1, #0
 8003820:	20d5      	movs	r0, #213	; 0xd5
 8003822:	f7ff fe33 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8003826:	2100      	movs	r1, #0
 8003828:	2050      	movs	r0, #80	; 0x50
 800382a:	f7ff fe2f 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800382e:	2100      	movs	r1, #0
 8003830:	20a8      	movs	r0, #168	; 0xa8
 8003832:	f7ff fe2b 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8003836:	2100      	movs	r1, #0
 8003838:	203f      	movs	r0, #63	; 0x3f
 800383a:	f7ff fe27 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800383e:	2100      	movs	r1, #0
 8003840:	20d3      	movs	r0, #211	; 0xd3
 8003842:	f7ff fe23 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8003846:	2100      	movs	r1, #0
 8003848:	2000      	movs	r0, #0
 800384a:	f7ff fe1f 	bl	800348c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800384e:	2100      	movs	r1, #0
 8003850:	2040      	movs	r0, #64	; 0x40
 8003852:	f7ff fe1b 	bl	800348c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8003856:	2100      	movs	r1, #0
 8003858:	208d      	movs	r0, #141	; 0x8d
 800385a:	f7ff fe17 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800385e:	2100      	movs	r1, #0
 8003860:	2014      	movs	r0, #20
 8003862:	f7ff fe13 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8003866:	2100      	movs	r1, #0
 8003868:	2020      	movs	r0, #32
 800386a:	f7ff fe0f 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800386e:	2100      	movs	r1, #0
 8003870:	2002      	movs	r0, #2
 8003872:	f7ff fe0b 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8003876:	2100      	movs	r1, #0
 8003878:	20a1      	movs	r0, #161	; 0xa1
 800387a:	f7ff fe07 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800387e:	2100      	movs	r1, #0
 8003880:	20c0      	movs	r0, #192	; 0xc0
 8003882:	f7ff fe03 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8003886:	2100      	movs	r1, #0
 8003888:	20da      	movs	r0, #218	; 0xda
 800388a:	f7ff fdff 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800388e:	2100      	movs	r1, #0
 8003890:	2012      	movs	r0, #18
 8003892:	f7ff fdfb 	bl	800348c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8003896:	2100      	movs	r1, #0
 8003898:	2081      	movs	r0, #129	; 0x81
 800389a:	f7ff fdf7 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800389e:	2100      	movs	r1, #0
 80038a0:	20ef      	movs	r0, #239	; 0xef
 80038a2:	f7ff fdf3 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80038a6:	2100      	movs	r1, #0
 80038a8:	20d9      	movs	r0, #217	; 0xd9
 80038aa:	f7ff fdef 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80038ae:	2100      	movs	r1, #0
 80038b0:	20f1      	movs	r0, #241	; 0xf1
 80038b2:	f7ff fdeb 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80038b6:	2100      	movs	r1, #0
 80038b8:	20db      	movs	r0, #219	; 0xdb
 80038ba:	f7ff fde7 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80038be:	2100      	movs	r1, #0
 80038c0:	2030      	movs	r0, #48	; 0x30
 80038c2:	f7ff fde3 	bl	800348c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80038c6:	2100      	movs	r1, #0
 80038c8:	20a4      	movs	r0, #164	; 0xa4
 80038ca:	f7ff fddf 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80038ce:	2100      	movs	r1, #0
 80038d0:	20a6      	movs	r0, #166	; 0xa6
 80038d2:	f7ff fddb 	bl	800348c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80038d6:	2100      	movs	r1, #0
 80038d8:	20af      	movs	r0, #175	; 0xaf
 80038da:	f7ff fdd7 	bl	800348c <OLED_WR_Byte>
	OLED_Clear(); 
 80038de:	f7ff fe57 	bl	8003590 <OLED_Clear>
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40021000 	.word	0x40021000

080038f0 <pid_reset>:
#include "pid.h"

void pid_reset(PidDef *def) {
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	def->errorArea = 0;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	605a      	str	r2, [r3, #4]
	def->errorOld = 0;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <pid_init>:

void pid_init(PidDef *def, float Kp, float Ki, float Kd) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003920:	edc7 0a01 	vstr	s1, [r7, #4]
 8003924:	ed87 1a00 	vstr	s2, [r7]
	pid_reset(def);
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff ffe1 	bl	80038f0 <pid_reset>

	def->Kp = Kp;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	609a      	str	r2, [r3, #8]
	def->Ki = Ki;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	60da      	str	r2, [r3, #12]
	def->Kd = Kd;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	611a      	str	r2, [r3, #16]
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <pid_adjust>:

float pid_adjust(PidDef *def, float error) {
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	ed87 0a00 	vstr	s0, [r7]
	def->errorArea += error;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	ed93 7a01 	vldr	s14, [r3, #4]
 800395a:	edd7 7a00 	vldr	s15, [r7]
 800395e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	edc3 7a01 	vstr	s15, [r3, #4]
	float errorRate = (error - def->errorOld);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	edd3 7a00 	vldr	s15, [r3]
 800396e:	ed97 7a00 	vldr	s14, [r7]
 8003972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003976:	edc7 7a03 	vstr	s15, [r7, #12]
	def->errorOld = error;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	601a      	str	r2, [r3, #0]

	return error * def->Kp + def->errorArea * def->Ki + errorRate * def->Kd;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	ed93 7a02 	vldr	s14, [r3, #8]
 8003986:	edd7 7a00 	vldr	s15, [r7]
 800398a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	edd3 6a01 	vldr	s13, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	edd3 7a03 	vldr	s15, [r3, #12]
 800399a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800399e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	edd3 6a04 	vldr	s13, [r3, #16]
 80039a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80039b4:	eeb0 0a67 	vmov.f32	s0, s15
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <lpf>:
static const float a_heading = 0.65;
static const float a_mag = 0.9;
static float magOld[2];
static float headingRaw, headingOld;

static float lpf(float a, float old, float new) {
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	ed87 0a03 	vstr	s0, [r7, #12]
 80039cc:	edc7 0a02 	vstr	s1, [r7, #8]
 80039d0:	ed87 1a01 	vstr	s2, [r7, #4]
	return a * old + (1 - a) * new;
 80039d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80039d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80039dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80039e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80039ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80039f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039f4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80039f8:	eeb0 0a67 	vmov.f32	s0, s15
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <sensors_init>:
static I2C_HandleTypeDef *hi2c_ptr;
static ADC_HandleTypeDef *hadc_ptr;
static TIM_HandleTypeDef *hic_ptr;
static Sensors *sensors_ptr;

void sensors_init(I2C_HandleTypeDef *i2c_ptr, ADC_HandleTypeDef *adc_ptr, TIM_HandleTypeDef *ic_ptr, Sensors *sens_ptr) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
	hi2c_ptr = i2c_ptr;
 8003a16:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <sensors_init+0x78>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6013      	str	r3, [r2, #0]
	hadc_ptr = adc_ptr;
 8003a1c:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <sensors_init+0x7c>)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	6013      	str	r3, [r2, #0]
	hic_ptr = ic_ptr;
 8003a22:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <sensors_init+0x80>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6013      	str	r3, [r2, #0]
	sensors_ptr = sens_ptr;
 8003a28:	4a18      	ldr	r2, [pc, #96]	; (8003a8c <sensors_init+0x84>)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6013      	str	r3, [r2, #0]

	ICM20948_init(hi2c_ptr, ICM_I2C_ADDR, GYRO_SENS, ACCEL_SENS);
 8003a2e:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <sensors_init+0x78>)
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	2300      	movs	r3, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	f7fd fbba 	bl	80011b0 <ICM20948_init>
	ICM20948_readMagnetometer_XY(hi2c_ptr, magOld); //pre-load magOld values.
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <sensors_init+0x78>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4913      	ldr	r1, [pc, #76]	; (8003a90 <sensors_init+0x88>)
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd fd94 	bl	8001570 <ICM20948_readMagnetometer_XY>

	HAL_TIM_IC_Start_IT(ic_ptr, US_IC_CHANNEL);
 8003a48:	2100      	movs	r1, #0
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f003 fe44 	bl	80076d8 <HAL_TIM_IC_Start_IT>

	sens_ptr->gyroZ_bias = 0;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	61da      	str	r2, [r3, #28]
	sens_ptr->accel_bias[0] = sens_ptr->accel_bias[1] = sens_ptr->accel_bias[2] = 0;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	621a      	str	r2, [r3, #32]
	sens_ptr->heading_bias = 0;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	200009bc 	.word	0x200009bc
 8003a84:	200009c0 	.word	0x200009c0
 8003a88:	200009c4 	.word	0x200009c4
 8003a8c:	200009c8 	.word	0x200009c8
 8003a90:	200009b4 	.word	0x200009b4

08003a94 <sensors_us_trig>:

void sensors_us_trig() {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
	US_TRIG_CLR();
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	480a      	ldr	r0, [pc, #40]	; (8003ac8 <sensors_us_trig+0x34>)
 8003a9e:	f001 feb9 	bl	8005814 <HAL_GPIO_WritePin>
	delay_us_wait(5);
 8003aa2:	2005      	movs	r0, #5
 8003aa4:	f7fe f942 	bl	8001d2c <delay_us_wait>

	//1. 10us pulse
	US_TRIG_SET();
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	2180      	movs	r1, #128	; 0x80
 8003aac:	4806      	ldr	r0, [pc, #24]	; (8003ac8 <sensors_us_trig+0x34>)
 8003aae:	f001 feb1 	bl	8005814 <HAL_GPIO_WritePin>
	delay_us_wait(10);
 8003ab2:	200a      	movs	r0, #10
 8003ab4:	f7fe f93a 	bl	8001d2c <delay_us_wait>
	US_TRIG_CLR();
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <sensors_us_trig+0x34>)
 8003abe:	f001 fea9 	bl	8005814 <HAL_GPIO_WritePin>
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40020c00 	.word	0x40020c00

08003acc <sensors_read_usDist>:

void sensors_read_usDist(float pulse_s) {
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	ed87 0a01 	vstr	s0, [r7, #4]
	sensors_ptr->usDist = lpf(a_usDist, sensors_ptr->usDist, pulse_s * 34300 / 2);
 8003ad6:	eddf 5a11 	vldr	s11, [pc, #68]	; 8003b1c <sensors_read_usDist+0x50>
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <sensors_read_usDist+0x54>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ae2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ae6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003b24 <sensors_read_usDist+0x58>
 8003aea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003aee:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003af2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <sensors_read_usDist+0x54>)
 8003af8:	681c      	ldr	r4, [r3, #0]
 8003afa:	eeb0 1a66 	vmov.f32	s2, s13
 8003afe:	eef0 0a47 	vmov.f32	s1, s14
 8003b02:	eeb0 0a65 	vmov.f32	s0, s11
 8003b06:	f7ff ff5c 	bl	80039c2 <lpf>
 8003b0a:	eef0 7a40 	vmov.f32	s15, s0
 8003b0e:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd90      	pop	{r4, r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	3f0ccccd 	.word	0x3f0ccccd
 8003b20:	200009c8 	.word	0x200009c8
 8003b24:	4705fc00 	.word	0x4705fc00

08003b28 <sensors_read_irDist>:

void sensors_read_irDist() {
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(hadc_ptr);
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <sensors_read_irDist+0xb8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 ff8e 	bl	8004a54 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc_ptr, HAL_MAX_DELAY);
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <sensors_read_irDist+0xb8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 f859 	bl	8004bf8 <HAL_ADC_PollForConversion>

	uint16_t value = (uint16_t) HAL_ADC_GetValue(hadc_ptr);
 8003b46:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <sensors_read_irDist+0xb8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f8df 	bl	8004d0e <HAL_ADC_GetValue>
 8003b50:	4603      	mov	r3, r0
 8003b52:	80fb      	strh	r3, [r7, #6]
	float dist = 6.3028 / pow(((float) value) / 4095, 1.226);
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003be4 <sensors_read_irDist+0xbc>
 8003b62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b66:	ee16 0a90 	vmov	r0, s13
 8003b6a:	f7fc fced 	bl	8000548 <__aeabi_f2d>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003bd0 <sensors_read_irDist+0xa8>
 8003b76:	ec43 2b10 	vmov	d0, r2, r3
 8003b7a:	f00a fd33 	bl	800e5e4 <pow>
 8003b7e:	ec53 2b10 	vmov	r2, r3, d0
 8003b82:	a115      	add	r1, pc, #84	; (adr r1, 8003bd8 <sensors_read_irDist+0xb0>)
 8003b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b88:	f7fc fe60 	bl	800084c <__aeabi_ddiv>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	f7fd f828 	bl	8000be8 <__aeabi_d2f>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	603b      	str	r3, [r7, #0]
	sensors_ptr->irDist = lpf(a_irDist, sensors_ptr->irDist, dist);
 8003b9c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003be8 <sensors_read_irDist+0xc0>
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <sensors_read_irDist+0xc4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	4b10      	ldr	r3, [pc, #64]	; (8003bec <sensors_read_irDist+0xc4>)
 8003baa:	681c      	ldr	r4, [r3, #0]
 8003bac:	ed97 1a00 	vldr	s2, [r7]
 8003bb0:	eef0 0a67 	vmov.f32	s1, s15
 8003bb4:	eeb0 0a47 	vmov.f32	s0, s14
 8003bb8:	f7ff ff03 	bl	80039c2 <lpf>
 8003bbc:	eef0 7a40 	vmov.f32	s15, s0
 8003bc0:	edc4 7a00 	vstr	s15, [r4]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd90      	pop	{r4, r7, pc}
 8003bcc:	f3af 8000 	nop.w
 8003bd0:	2d0e5604 	.word	0x2d0e5604
 8003bd4:	3ff39db2 	.word	0x3ff39db2
 8003bd8:	3404ea4b 	.word	0x3404ea4b
 8003bdc:	40193611 	.word	0x40193611
 8003be0:	200009c0 	.word	0x200009c0
 8003be4:	457ff000 	.word	0x457ff000
 8003be8:	3f4ccccd 	.word	0x3f4ccccd
 8003bec:	200009c8 	.word	0x200009c8

08003bf0 <sensors_read_gyroZ>:

void sensors_read_gyroZ() {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
	float val;
	ICM20948_readGyroscope_Z(hi2c_ptr, ICM_I2C_ADDR, GYRO_SENS, &val);
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <sensors_read_gyroZ+0x3c>)
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	2100      	movs	r1, #0
 8003c00:	f7fd fb5a 	bl	80012b8 <ICM20948_readGyroscope_Z>
	sensors_ptr->gyroZ = (val - sensors_ptr->gyroZ_bias) / 1000; //convert to ms
 8003c04:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <sensors_read_gyroZ+0x40>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003c10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <sensors_read_gyroZ+0x40>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003c34 <sensors_read_gyroZ+0x44>
 8003c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c20:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	200009bc 	.word	0x200009bc
 8003c30:	200009c8 	.word	0x200009c8
 8003c34:	447a0000 	.word	0x447a0000

08003c38 <sensors_read_accel>:


void sensors_read_accel() {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
	float accel_new[3];
	ICM20948_readAccelerometer_all(hi2c_ptr, ICM_I2C_ADDR, ACCEL_SENS, accel_new);
 8003c3e:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <sensors_read_accel+0x6c>)
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	2200      	movs	r2, #0
 8003c44:	463b      	mov	r3, r7
 8003c46:	2100      	movs	r1, #0
 8003c48:	f7fd fbb6 	bl	80013b8 <ICM20948_readAccelerometer_all>
	for (int i = 0; i < 3; i++) {
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e020      	b.n	8003c94 <sensors_read_accel+0x5c>
//		sensors_ptr->accel[i] = lpf(
//			a_accel,
//			sensors_ptr->accel[i],
//			accel_new[i] - sensors_ptr->accel_bias[i]
//		) * GRAVITY;
		sensors_ptr->accel[i] = (accel_new[i] - sensors_ptr->accel_bias[i]) * GRAVITY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	3310      	adds	r3, #16
 8003c58:	443b      	add	r3, r7
 8003c5a:	3b10      	subs	r3, #16
 8003c5c:	ed93 7a00 	vldr	s14, [r3]
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <sensors_read_accel+0x70>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3308      	adds	r3, #8
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	edd3 7a00 	vldr	s15, [r3]
 8003c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <sensors_read_accel+0x70>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003cac <sensors_read_accel+0x74>
 8003c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3302      	adds	r3, #2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	3304      	adds	r3, #4
 8003c8a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++) {
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3301      	adds	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	dddb      	ble.n	8003c52 <sensors_read_accel+0x1a>
	}
}
 8003c9a:	bf00      	nop
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	200009bc 	.word	0x200009bc
 8003ca8:	200009c8 	.word	0x200009c8
 8003cac:	3a8089a8 	.word	0x3a8089a8

08003cb0 <read_mag_angle>:

static float read_mag_angle() {
 8003cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
	//Calculate angle from X and Y
	float mag[2];
	ICM20948_readMagnetometer_XY(hi2c_ptr, mag);
 8003cb8:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <read_mag_angle+0x100>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	1d3a      	adds	r2, r7, #4
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fd fc55 	bl	8001570 <ICM20948_readMagnetometer_XY>
	for (uint8_t i = 0; i < 2; i++) {
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	73fb      	strb	r3, [r7, #15]
 8003cca:	e02d      	b.n	8003d28 <read_mag_angle+0x78>
		mag[i] = lpf(a_mag, magOld[i], mag[i]);
 8003ccc:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003db4 <read_mag_angle+0x104>
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	4a39      	ldr	r2, [pc, #228]	; (8003db8 <read_mag_angle+0x108>)
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	edd3 7a00 	vldr	s15, [r3]
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	3310      	adds	r3, #16
 8003ce2:	443b      	add	r3, r7
 8003ce4:	3b0c      	subs	r3, #12
 8003ce6:	ed93 7a00 	vldr	s14, [r3]
 8003cea:	7bfe      	ldrb	r6, [r7, #15]
 8003cec:	eeb0 1a47 	vmov.f32	s2, s14
 8003cf0:	eef0 0a67 	vmov.f32	s1, s15
 8003cf4:	eeb0 0a66 	vmov.f32	s0, s13
 8003cf8:	f7ff fe63 	bl	80039c2 <lpf>
 8003cfc:	eef0 7a40 	vmov.f32	s15, s0
 8003d00:	00b3      	lsls	r3, r6, #2
 8003d02:	3310      	adds	r3, #16
 8003d04:	443b      	add	r3, r7
 8003d06:	3b0c      	subs	r3, #12
 8003d08:	edc3 7a00 	vstr	s15, [r3]
		magOld[i] = mag[i];
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	0092      	lsls	r2, r2, #2
 8003d12:	3210      	adds	r2, #16
 8003d14:	443a      	add	r2, r7
 8003d16:	3a0c      	subs	r2, #12
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	4927      	ldr	r1, [pc, #156]	; (8003db8 <read_mag_angle+0x108>)
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 2; i++) {
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	3301      	adds	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d9ce      	bls.n	8003ccc <read_mag_angle+0x1c>
	}
	magcal_adjust(mag);
 8003d2e:	1d3b      	adds	r3, r7, #4
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe f987 	bl	8002044 <magcal_adjust>
	return -atan2(mag[1], mag[0]) * 180 / M_PI;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fc fc05 	bl	8000548 <__aeabi_f2d>
 8003d3e:	4680      	mov	r8, r0
 8003d40:	4689      	mov	r9, r1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fc fbff 	bl	8000548 <__aeabi_f2d>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	ec43 2b11 	vmov	d1, r2, r3
 8003d52:	ec49 8b10 	vmov	d0, r8, r9
 8003d56:	f00a fc43 	bl	800e5e0 <atan2>
 8003d5a:	ec53 2b10 	vmov	r2, r3, d0
 8003d5e:	4614      	mov	r4, r2
 8003d60:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <read_mag_angle+0x10c>)
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	f7fc fc43 	bl	80005f8 <__aeabi_dmul>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4610      	mov	r0, r2
 8003d78:	4619      	mov	r1, r3
 8003d7a:	a30b      	add	r3, pc, #44	; (adr r3, 8003da8 <read_mag_angle+0xf8>)
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f7fc fd64 	bl	800084c <__aeabi_ddiv>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f7fc ff2c 	bl	8000be8 <__aeabi_d2f>
 8003d90:	4603      	mov	r3, r0
 8003d92:	ee07 3a90 	vmov	s15, r3
}
 8003d96:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003da2:	bf00      	nop
 8003da4:	f3af 8000 	nop.w
 8003da8:	54442d18 	.word	0x54442d18
 8003dac:	400921fb 	.word	0x400921fb
 8003db0:	200009bc 	.word	0x200009bc
 8003db4:	3f666666 	.word	0x3f666666
 8003db8:	200009b4 	.word	0x200009b4
 8003dbc:	40668000 	.word	0x40668000

08003dc0 <sensors_set_bias>:

	if (sensors_ptr->heading < -180) sensors_ptr->heading += 360;
	else if (sensors_ptr->heading > 180) sensors_ptr->heading -= 360;
}

void sensors_set_bias(uint16_t count) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08c      	sub	sp, #48	; 0x30
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t j;
	float gyroZTotal = 0, gyroZ = 0,
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	623b      	str	r3, [r7, #32]
		accelTotal[3] = {0}, accel[3],
 8003dd6:	f107 0314 	add.w	r3, r7, #20
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	609a      	str	r2, [r3, #8]
		headingTotal = 0;
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < count; i++) {
 8003de8:	2300      	movs	r3, #0
 8003dea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003dec:	e04b      	b.n	8003e86 <sensors_set_bias+0xc6>
		ICM20948_readGyroscope_Z(hi2c_ptr, ICM_I2C_ADDR, GYRO_SENS, &gyroZ); //gyroscope bias
 8003dee:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <sensors_set_bias+0x160>)
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f107 0320 	add.w	r3, r7, #32
 8003df8:	2100      	movs	r1, #0
 8003dfa:	f7fd fa5d 	bl	80012b8 <ICM20948_readGyroscope_Z>
		gyroZTotal += gyroZ;
 8003dfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e0a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		ICM20948_readAccelerometer_all(hi2c_ptr, ICM_I2C_ADDR, ACCEL_SENS, accel); //accelerometer bias
 8003e0e:	4b44      	ldr	r3, [pc, #272]	; (8003f20 <sensors_set_bias+0x160>)
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f107 0308 	add.w	r3, r7, #8
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f7fd facd 	bl	80013b8 <ICM20948_readAccelerometer_all>
		for (j = 0; j < 3; j++) accelTotal[j] += accel[j];
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003e24:	e01e      	b.n	8003e64 <sensors_set_bias+0xa4>
 8003e26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	3330      	adds	r3, #48	; 0x30
 8003e2e:	443b      	add	r3, r7
 8003e30:	3b1c      	subs	r3, #28
 8003e32:	ed93 7a00 	vldr	s14, [r3]
 8003e36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	3330      	adds	r3, #48	; 0x30
 8003e3e:	443b      	add	r3, r7
 8003e40:	3b28      	subs	r3, #40	; 0x28
 8003e42:	edd3 7a00 	vldr	s15, [r3]
 8003e46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	3330      	adds	r3, #48	; 0x30
 8003e52:	443b      	add	r3, r7
 8003e54:	3b1c      	subs	r3, #28
 8003e56:	edc3 7a00 	vstr	s15, [r3]
 8003e5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003e64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d9dc      	bls.n	8003e26 <sensors_set_bias+0x66>

		headingTotal += read_mag_angle(); //heading bias
 8003e6c:	f7ff ff20 	bl	8003cb0 <read_mag_angle>
 8003e70:	eeb0 7a40 	vmov.f32	s14, s0
 8003e74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e7c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for (i = 0; i < count; i++) {
 8003e80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e82:	3301      	adds	r3, #1
 8003e84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003e86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d3af      	bcc.n	8003dee <sensors_set_bias+0x2e>
	}

	sensors_ptr->gyroZ_bias = gyroZTotal / count;
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e98:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <sensors_set_bias+0x164>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea4:	edc3 7a07 	vstr	s15, [r3, #28]

	for (i = 0; i < 3; i++) sensors_ptr->accel_bias[i] = accelTotal[i] / count;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003eac:	e018      	b.n	8003ee0 <sensors_set_bias+0x120>
 8003eae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	3330      	adds	r3, #48	; 0x30
 8003eb4:	443b      	add	r3, r7
 8003eb6:	3b1c      	subs	r3, #28
 8003eb8:	edd3 6a00 	vldr	s13, [r3]
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ec6:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <sensors_set_bias+0x164>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	edc3 7a00 	vstr	s15, [r3]
 8003eda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003edc:	3301      	adds	r3, #1
 8003ede:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003ee0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d9e3      	bls.n	8003eae <sensors_set_bias+0xee>
	sensors_ptr->accel_bias[2] -= GRAVITY; //normally z accelerometer should read gravity.
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <sensors_set_bias+0x164>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <sensors_set_bias+0x164>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003f28 <sensors_set_bias+0x168>
 8003ef6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003efa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	sensors_ptr->heading_bias = headingTotal / count;
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	ee07 3a90 	vmov	s15, r3
 8003f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <sensors_set_bias+0x164>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f14:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8003f18:	bf00      	nop
 8003f1a:	3730      	adds	r7, #48	; 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	200009bc 	.word	0x200009bc
 8003f24:	200009c8 	.word	0x200009c8
 8003f28:	3a8089a8 	.word	0x3a8089a8

08003f2c <sensors_dist_warmup>:

void sensors_dist_warmup(uint16_t count) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < count; i++) {
 8003f36:	2300      	movs	r3, #0
 8003f38:	81fb      	strh	r3, [r7, #14]
 8003f3a:	e009      	b.n	8003f50 <sensors_dist_warmup+0x24>
		sensors_us_trig();
 8003f3c:	f7ff fdaa 	bl	8003a94 <sensors_us_trig>
		sensors_read_irDist();
 8003f40:	f7ff fdf2 	bl	8003b28 <sensors_read_irDist>
		HAL_Delay(20);
 8003f44:	2014      	movs	r0, #20
 8003f46:	f000 fd1d 	bl	8004984 <HAL_Delay>
	for (uint16_t i = 0; i < count; i++) {
 8003f4a:	89fb      	ldrh	r3, [r7, #14]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	81fb      	strh	r3, [r7, #14]
 8003f50:	89fa      	ldrh	r2, [r7, #14]
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d3f1      	bcc.n	8003f3c <sensors_dist_warmup+0x10>
	}
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <servo_init>:
#include "servo.h"

static TIM_HandleTypeDef *pwm_tim;

void servo_init(TIM_HandleTypeDef *pwm) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	pwm_tim = pwm;
 8003f6c:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <servo_init+0x20>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm, SERVO_PWM_CHANNEL);
 8003f72:	2100      	movs	r1, #0
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f003 fa8d 	bl	8007494 <HAL_TIM_PWM_Start>
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200009cc 	.word	0x200009cc

08003f88 <setServoVal>:

static void setServoVal(uint32_t val) {
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	pwm_tim->Instance->CCR1 = val;
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <setServoVal+0x20>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	200009cc 	.word	0x200009cc

08003fac <servo_setAngle>:

void servo_setAngle(float angle) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	ed87 0a01 	vstr	s0, [r7, #4]
	//clamp angle to within width.
	if (angle < -SERVO_WIDTH) angle = -SERVO_WIDTH;
 8003fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fba:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 8003fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc6:	d502      	bpl.n	8003fce <servo_setAngle+0x22>
 8003fc8:	4b21      	ldr	r3, [pc, #132]	; (8004050 <servo_setAngle+0xa4>)
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	e00a      	b.n	8003fe4 <servo_setAngle+0x38>
	else if (angle > SERVO_WIDTH) angle = SERVO_WIDTH;
 8003fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fd2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fde:	dd01      	ble.n	8003fe4 <servo_setAngle+0x38>
 8003fe0:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <servo_setAngle+0xa8>)
 8003fe2:	607b      	str	r3, [r7, #4]

	uint32_t val;
	if (angle < 0) {
 8003fe4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff0:	d513      	bpl.n	800401a <servo_setAngle+0x6e>
		val = SERVO_PULSE_0 + (SERVO_PULSE_0 - SERVO_PULSE_L) * angle / SERVO_WIDTH;
 8003ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ff6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004058 <servo_setAngle+0xac>
 8003ffa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ffe:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8004002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004006:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800405c <servo_setAngle+0xb0>
 800400a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800400e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004012:	ee17 3a90 	vmov	r3, s15
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e012      	b.n	8004040 <servo_setAngle+0x94>
	} else {
		val = SERVO_PULSE_0 + (SERVO_PULSE_R - SERVO_PULSE_0) * angle / SERVO_WIDTH;
 800401a:	edd7 7a01 	vldr	s15, [r7, #4]
 800401e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004060 <servo_setAngle+0xb4>
 8004022:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004026:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800402a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800402e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800405c <servo_setAngle+0xb0>
 8004032:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800403a:	ee17 3a90 	vmov	r3, s15
 800403e:	60fb      	str	r3, [r7, #12]
	}

	setServoVal(val);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff ffa1 	bl	8003f88 <setServoVal>
}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	c1c80000 	.word	0xc1c80000
 8004054:	41c80000 	.word	0x41c80000
 8004058:	449c4000 	.word	0x449c4000
 800405c:	45979000 	.word	0x45979000
 8004060:	4512e000 	.word	0x4512e000

08004064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <HAL_MspInit+0x4c>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <HAL_MspInit+0x4c>)
 8004074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004078:	6453      	str	r3, [r2, #68]	; 0x44
 800407a:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <HAL_MspInit+0x4c>)
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_MspInit+0x4c>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <HAL_MspInit+0x4c>)
 8004090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004094:	6413      	str	r3, [r2, #64]	; 0x40
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_MspInit+0x4c>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800

080040b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	; 0x28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a17      	ldr	r2, [pc, #92]	; (8004130 <HAL_ADC_MspInit+0x7c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d127      	bne.n	8004126 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	4b16      	ldr	r3, [pc, #88]	; (8004134 <HAL_ADC_MspInit+0x80>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	4a15      	ldr	r2, [pc, #84]	; (8004134 <HAL_ADC_MspInit+0x80>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e4:	6453      	str	r3, [r2, #68]	; 0x44
 80040e6:	4b13      	ldr	r3, [pc, #76]	; (8004134 <HAL_ADC_MspInit+0x80>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <HAL_ADC_MspInit+0x80>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <HAL_ADC_MspInit+0x80>)
 80040fc:	f043 0304 	orr.w	r3, r3, #4
 8004100:	6313      	str	r3, [r2, #48]	; 0x30
 8004102:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <HAL_ADC_MspInit+0x80>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = IR_V0_Pin;
 800410e:	2308      	movs	r3, #8
 8004110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004112:	2303      	movs	r3, #3
 8004114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_V0_GPIO_Port, &GPIO_InitStruct);
 800411a:	f107 0314 	add.w	r3, r7, #20
 800411e:	4619      	mov	r1, r3
 8004120:	4805      	ldr	r0, [pc, #20]	; (8004138 <HAL_ADC_MspInit+0x84>)
 8004122:	f001 f9c3 	bl	80054ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004126:	bf00      	nop
 8004128:	3728      	adds	r7, #40	; 0x28
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40012000 	.word	0x40012000
 8004134:	40023800 	.word	0x40023800
 8004138:	40020800 	.word	0x40020800

0800413c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	f107 0314 	add.w	r3, r7, #20
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <HAL_I2C_MspInit+0x84>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d12c      	bne.n	80041b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <HAL_I2C_MspInit+0x88>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <HAL_I2C_MspInit+0x88>)
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	6313      	str	r3, [r2, #48]	; 0x30
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_I2C_MspInit+0x88>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 800417a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800417e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004180:	2312      	movs	r3, #18
 8004182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004188:	2303      	movs	r3, #3
 800418a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800418c:	2304      	movs	r3, #4
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	4619      	mov	r1, r3
 8004196:	480c      	ldr	r0, [pc, #48]	; (80041c8 <HAL_I2C_MspInit+0x8c>)
 8004198:	f001 f988 	bl	80054ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <HAL_I2C_MspInit+0x88>)
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <HAL_I2C_MspInit+0x88>)
 80041a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041aa:	6413      	str	r3, [r2, #64]	; 0x40
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_I2C_MspInit+0x88>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80041b8:	bf00      	nop
 80041ba:	3728      	adds	r7, #40	; 0x28
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40005400 	.word	0x40005400
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40020400 	.word	0x40020400

080041cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08e      	sub	sp, #56	; 0x38
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	60da      	str	r2, [r3, #12]
 80041e2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a4d      	ldr	r2, [pc, #308]	; (8004320 <HAL_TIM_Base_MspInit+0x154>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d116      	bne.n	800421c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	623b      	str	r3, [r7, #32]
 80041f2:	4b4c      	ldr	r3, [pc, #304]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	4a4b      	ldr	r2, [pc, #300]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	6453      	str	r3, [r2, #68]	; 0x44
 80041fe:	4b49      	ldr	r3, [pc, #292]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	623b      	str	r3, [r7, #32]
 8004208:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800420a:	2200      	movs	r2, #0
 800420c:	2100      	movs	r1, #0
 800420e:	201b      	movs	r0, #27
 8004210:	f001 f883 	bl	800531a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004214:	201b      	movs	r0, #27
 8004216:	f001 f89c 	bl	8005352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800421a:	e07d      	b.n	8004318 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a41      	ldr	r2, [pc, #260]	; (8004328 <HAL_TIM_Base_MspInit+0x15c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d135      	bne.n	8004292 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	4b3e      	ldr	r3, [pc, #248]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	4a3d      	ldr	r2, [pc, #244]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 8004230:	f043 0304 	orr.w	r3, r3, #4
 8004234:	6413      	str	r3, [r2, #64]	; 0x40
 8004236:	4b3b      	ldr	r3, [pc, #236]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	4b37      	ldr	r3, [pc, #220]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4a36      	ldr	r2, [pc, #216]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 800424c:	f043 0308 	orr.w	r3, r3, #8
 8004250:	6313      	str	r3, [r2, #48]	; 0x30
 8004252:	4b34      	ldr	r3, [pc, #208]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800425e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004264:	2302      	movs	r3, #2
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	2300      	movs	r3, #0
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426c:	2300      	movs	r3, #0
 800426e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004270:	2302      	movs	r3, #2
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004278:	4619      	mov	r1, r3
 800427a:	482c      	ldr	r0, [pc, #176]	; (800432c <HAL_TIM_Base_MspInit+0x160>)
 800427c:	f001 f916 	bl	80054ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004280:	2200      	movs	r2, #0
 8004282:	2100      	movs	r1, #0
 8004284:	201e      	movs	r0, #30
 8004286:	f001 f848 	bl	800531a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800428a:	201e      	movs	r0, #30
 800428c:	f001 f861 	bl	8005352 <HAL_NVIC_EnableIRQ>
}
 8004290:	e042      	b.n	8004318 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM6)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a26      	ldr	r2, [pc, #152]	; (8004330 <HAL_TIM_Base_MspInit+0x164>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d10e      	bne.n	80042ba <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 80042a6:	f043 0310 	orr.w	r3, r3, #16
 80042aa:	6413      	str	r3, [r2, #64]	; 0x40
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	697b      	ldr	r3, [r7, #20]
}
 80042b8:	e02e      	b.n	8004318 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM7)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <HAL_TIM_Base_MspInit+0x168>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d116      	bne.n	80042f2 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	4a15      	ldr	r2, [pc, #84]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 80042ce:	f043 0320 	orr.w	r3, r3, #32
 80042d2:	6413      	str	r3, [r2, #64]	; 0x40
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80042e0:	2200      	movs	r2, #0
 80042e2:	2100      	movs	r1, #0
 80042e4:	2037      	movs	r0, #55	; 0x37
 80042e6:	f001 f818 	bl	800531a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80042ea:	2037      	movs	r0, #55	; 0x37
 80042ec:	f001 f831 	bl	8005352 <HAL_NVIC_EnableIRQ>
}
 80042f0:	e012      	b.n	8004318 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a10      	ldr	r2, [pc, #64]	; (8004338 <HAL_TIM_Base_MspInit+0x16c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10d      	bne.n	8004318 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	4b08      	ldr	r3, [pc, #32]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	4a07      	ldr	r2, [pc, #28]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 8004306:	f043 0302 	orr.w	r3, r3, #2
 800430a:	6453      	str	r3, [r2, #68]	; 0x44
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_TIM_Base_MspInit+0x158>)
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	bf00      	nop
 800431a:	3738      	adds	r7, #56	; 0x38
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40010000 	.word	0x40010000
 8004324:	40023800 	.word	0x40023800
 8004328:	40000800 	.word	0x40000800
 800432c:	40020c00 	.word	0x40020c00
 8004330:	40001000 	.word	0x40001000
 8004334:	40001400 	.word	0x40001400
 8004338:	40010400 	.word	0x40010400

0800433c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08c      	sub	sp, #48	; 0x30
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d14b      	bne.n	80043f6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	4b3f      	ldr	r3, [pc, #252]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a3e      	ldr	r2, [pc, #248]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
 800436e:	4b3c      	ldr	r3, [pc, #240]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	4b38      	ldr	r3, [pc, #224]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	4a37      	ldr	r2, [pc, #220]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6313      	str	r3, [r2, #48]	; 0x30
 800438a:	4b35      	ldr	r3, [pc, #212]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	4b31      	ldr	r3, [pc, #196]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	4a30      	ldr	r2, [pc, #192]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	6313      	str	r3, [r2, #48]	; 0x30
 80043a6:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTORA_CH1_Pin;
 80043b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b8:	2302      	movs	r3, #2
 80043ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043c4:	2301      	movs	r3, #1
 80043c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH1_GPIO_Port, &GPIO_InitStruct);
 80043c8:	f107 031c 	add.w	r3, r7, #28
 80043cc:	4619      	mov	r1, r3
 80043ce:	4825      	ldr	r0, [pc, #148]	; (8004464 <HAL_TIM_Encoder_MspInit+0x128>)
 80043d0:	f001 f86c 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTORA_CH2_Pin;
 80043d4:	2308      	movs	r3, #8
 80043d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d8:	2302      	movs	r3, #2
 80043da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e0:	2300      	movs	r3, #0
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043e4:	2301      	movs	r3, #1
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH2_GPIO_Port, &GPIO_InitStruct);
 80043e8:	f107 031c 	add.w	r3, r7, #28
 80043ec:	4619      	mov	r1, r3
 80043ee:	481e      	ldr	r0, [pc, #120]	; (8004468 <HAL_TIM_Encoder_MspInit+0x12c>)
 80043f0:	f001 f85c 	bl	80054ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043f4:	e030      	b.n	8004458 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1c      	ldr	r2, [pc, #112]	; (800446c <HAL_TIM_Encoder_MspInit+0x130>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d12b      	bne.n	8004458 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	4a15      	ldr	r2, [pc, #84]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 800440a:	f043 0302 	orr.w	r3, r3, #2
 800440e:	6413      	str	r3, [r2, #64]	; 0x40
 8004410:	4b13      	ldr	r3, [pc, #76]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6313      	str	r3, [r2, #48]	; 0x30
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTORB_CH1_Pin|MOTORB_CH2_Pin;
 8004438:	23c0      	movs	r3, #192	; 0xc0
 800443a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443c:	2302      	movs	r3, #2
 800443e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004444:	2300      	movs	r3, #0
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004448:	2302      	movs	r3, #2
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444c:	f107 031c 	add.w	r3, r7, #28
 8004450:	4619      	mov	r1, r3
 8004452:	4804      	ldr	r0, [pc, #16]	; (8004464 <HAL_TIM_Encoder_MspInit+0x128>)
 8004454:	f001 f82a 	bl	80054ac <HAL_GPIO_Init>
}
 8004458:	bf00      	nop
 800445a:	3730      	adds	r7, #48	; 0x30
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	40020000 	.word	0x40020000
 8004468:	40020400 	.word	0x40020400
 800446c:	40000400 	.word	0x40000400

08004470 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a24      	ldr	r2, [pc, #144]	; (8004520 <HAL_TIM_MspPostInit+0xb0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d11f      	bne.n	80044d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	4b23      	ldr	r3, [pc, #140]	; (8004524 <HAL_TIM_MspPostInit+0xb4>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	4a22      	ldr	r2, [pc, #136]	; (8004524 <HAL_TIM_MspPostInit+0xb4>)
 800449c:	f043 0310 	orr.w	r3, r3, #16
 80044a0:	6313      	str	r3, [r2, #48]	; 0x30
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_TIM_MspPostInit+0xb4>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 80044ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	2302      	movs	r3, #2
 80044b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044bc:	2300      	movs	r3, #0
 80044be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	4619      	mov	r1, r3
 80044ca:	4817      	ldr	r0, [pc, #92]	; (8004528 <HAL_TIM_MspPostInit+0xb8>)
 80044cc:	f000 ffee 	bl	80054ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80044d0:	e022      	b.n	8004518 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <HAL_TIM_MspPostInit+0xbc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d11d      	bne.n	8004518 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	4b10      	ldr	r3, [pc, #64]	; (8004524 <HAL_TIM_MspPostInit+0xb4>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	4a0f      	ldr	r2, [pc, #60]	; (8004524 <HAL_TIM_MspPostInit+0xb4>)
 80044e6:	f043 0304 	orr.w	r3, r3, #4
 80044ea:	6313      	str	r3, [r2, #48]	; 0x30
 80044ec:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <HAL_TIM_MspPostInit+0xb4>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTORA_PWM_Pin|MOTORB_PWM_Pin;
 80044f8:	23c0      	movs	r3, #192	; 0xc0
 80044fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fc:	2302      	movs	r3, #2
 80044fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004504:	2300      	movs	r3, #0
 8004506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004508:	2303      	movs	r3, #3
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	4619      	mov	r1, r3
 8004512:	4807      	ldr	r0, [pc, #28]	; (8004530 <HAL_TIM_MspPostInit+0xc0>)
 8004514:	f000 ffca 	bl	80054ac <HAL_GPIO_Init>
}
 8004518:	bf00      	nop
 800451a:	3728      	adds	r7, #40	; 0x28
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40010000 	.word	0x40010000
 8004524:	40023800 	.word	0x40023800
 8004528:	40021000 	.word	0x40021000
 800452c:	40010400 	.word	0x40010400
 8004530:	40020800 	.word	0x40020800

08004534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800453c:	f107 0314 	add.w	r3, r7, #20
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	609a      	str	r2, [r3, #8]
 8004548:	60da      	str	r2, [r3, #12]
 800454a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <HAL_UART_MspInit+0x94>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d134      	bne.n	80045c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <HAL_UART_MspInit+0x98>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <HAL_UART_MspInit+0x98>)
 8004560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004564:	6413      	str	r3, [r2, #64]	; 0x40
 8004566:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_UART_MspInit+0x98>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <HAL_UART_MspInit+0x98>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	4a14      	ldr	r2, [pc, #80]	; (80045cc <HAL_UART_MspInit+0x98>)
 800457c:	f043 0304 	orr.w	r3, r3, #4
 8004580:	6313      	str	r3, [r2, #48]	; 0x30
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_UART_MspInit+0x98>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800458e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004594:	2302      	movs	r3, #2
 8004596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800459c:	2303      	movs	r3, #3
 800459e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80045a0:	2307      	movs	r3, #7
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045a4:	f107 0314 	add.w	r3, r7, #20
 80045a8:	4619      	mov	r1, r3
 80045aa:	4809      	ldr	r0, [pc, #36]	; (80045d0 <HAL_UART_MspInit+0x9c>)
 80045ac:	f000 ff7e 	bl	80054ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80045b0:	2200      	movs	r2, #0
 80045b2:	2100      	movs	r1, #0
 80045b4:	2027      	movs	r0, #39	; 0x27
 80045b6:	f000 feb0 	bl	800531a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80045ba:	2027      	movs	r0, #39	; 0x27
 80045bc:	f000 fec9 	bl	8005352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80045c0:	bf00      	nop
 80045c2:	3728      	adds	r7, #40	; 0x28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40004800 	.word	0x40004800
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40020800 	.word	0x40020800

080045d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045d8:	e7fe      	b.n	80045d8 <NMI_Handler+0x4>

080045da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045da:	b480      	push	{r7}
 80045dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045de:	e7fe      	b.n	80045de <HardFault_Handler+0x4>

080045e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045e4:	e7fe      	b.n	80045e4 <MemManage_Handler+0x4>

080045e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045e6:	b480      	push	{r7}
 80045e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045ea:	e7fe      	b.n	80045ea <BusFault_Handler+0x4>

080045ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045f0:	e7fe      	b.n	80045f0 <UsageFault_Handler+0x4>

080045f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045f2:	b480      	push	{r7}
 80045f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045f6:	bf00      	nop
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004620:	f000 f990 	bl	8004944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004624:	bf00      	nop
 8004626:	bd80      	pop	{r7, pc}

08004628 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800462c:	4802      	ldr	r0, [pc, #8]	; (8004638 <TIM1_CC_IRQHandler+0x10>)
 800462e:	f003 facf 	bl	8007bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	200002c8 	.word	0x200002c8

0800463c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004640:	4802      	ldr	r0, [pc, #8]	; (800464c <TIM4_IRQHandler+0x10>)
 8004642:	f003 fac5 	bl	8007bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	200003a0 	.word	0x200003a0

08004650 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004654:	4802      	ldr	r0, [pc, #8]	; (8004660 <USART3_IRQHandler+0x10>)
 8004656:	f004 fc5b 	bl	8008f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200004c0 	.word	0x200004c0

08004664 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004668:	4802      	ldr	r0, [pc, #8]	; (8004674 <TIM7_IRQHandler+0x10>)
 800466a:	f003 fab1 	bl	8007bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800466e:	bf00      	nop
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000430 	.word	0x20000430

08004678 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return 1;
 800467c:	2301      	movs	r3, #1
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <_kill>:

int _kill(int pid, int sig)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004692:	f006 fc81 	bl	800af98 <__errno>
 8004696:	4603      	mov	r3, r0
 8004698:	2216      	movs	r2, #22
 800469a:	601a      	str	r2, [r3, #0]
  return -1;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_exit>:

void _exit (int status)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80046b0:	f04f 31ff 	mov.w	r1, #4294967295
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ffe7 	bl	8004688 <_kill>
  while (1) {}    /* Make sure we hang here */
 80046ba:	e7fe      	b.n	80046ba <_exit+0x12>

080046bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e00a      	b.n	80046e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046ce:	f3af 8000 	nop.w
 80046d2:	4601      	mov	r1, r0
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	60ba      	str	r2, [r7, #8]
 80046da:	b2ca      	uxtb	r2, r1
 80046dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	3301      	adds	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	dbf0      	blt.n	80046ce <_read+0x12>
  }

  return len;
 80046ec:	687b      	ldr	r3, [r7, #4]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e009      	b.n	800471c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	60ba      	str	r2, [r7, #8]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	3301      	adds	r3, #1
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	dbf1      	blt.n	8004708 <_write+0x12>
  }
  return len;
 8004724:	687b      	ldr	r3, [r7, #4]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <_close>:

int _close(int file)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004756:	605a      	str	r2, [r3, #4]
  return 0;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <_isatty>:

int _isatty(int file)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800476e:	2301      	movs	r3, #1
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047a0:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <_sbrk+0x5c>)
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <_sbrk+0x60>)
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <_sbrk+0x64>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <_sbrk+0x64>)
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <_sbrk+0x68>)
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047ba:	4b10      	ldr	r3, [pc, #64]	; (80047fc <_sbrk+0x64>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d207      	bcs.n	80047d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047c8:	f006 fbe6 	bl	800af98 <__errno>
 80047cc:	4603      	mov	r3, r0
 80047ce:	220c      	movs	r2, #12
 80047d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047d2:	f04f 33ff 	mov.w	r3, #4294967295
 80047d6:	e009      	b.n	80047ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047d8:	4b08      	ldr	r3, [pc, #32]	; (80047fc <_sbrk+0x64>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <_sbrk+0x64>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	4a05      	ldr	r2, [pc, #20]	; (80047fc <_sbrk+0x64>)
 80047e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20020000 	.word	0x20020000
 80047f8:	00000400 	.word	0x00000400
 80047fc:	200009d0 	.word	0x200009d0
 8004800:	20000b28 	.word	0x20000b28

08004804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <SystemInit+0x20>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	4a05      	ldr	r2, [pc, #20]	; (8004824 <SystemInit+0x20>)
 8004810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004818:	bf00      	nop
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	e000ed00 	.word	0xe000ed00

08004828 <user_is_pressed>:
#include "user_input.h"

uint8_t user_is_pressed() {
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BTN_USER_GPIO_Port, BTN_USER_Pin) != GPIO_PIN_SET;
 800482c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004830:	4805      	ldr	r0, [pc, #20]	; (8004848 <user_is_pressed+0x20>)
 8004832:	f000 ffd7 	bl	80057e4 <HAL_GPIO_ReadPin>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
}
 8004842:	4618      	mov	r0, r3
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40020c00 	.word	0x40020c00

0800484c <Reset_Handler>:
 800484c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004884 <LoopFillZerobss+0xe>
 8004850:	f7ff ffd8 	bl	8004804 <SystemInit>
 8004854:	480c      	ldr	r0, [pc, #48]	; (8004888 <LoopFillZerobss+0x12>)
 8004856:	490d      	ldr	r1, [pc, #52]	; (800488c <LoopFillZerobss+0x16>)
 8004858:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <LoopFillZerobss+0x1a>)
 800485a:	2300      	movs	r3, #0
 800485c:	e002      	b.n	8004864 <LoopCopyDataInit>

0800485e <CopyDataInit>:
 800485e:	58d4      	ldr	r4, [r2, r3]
 8004860:	50c4      	str	r4, [r0, r3]
 8004862:	3304      	adds	r3, #4

08004864 <LoopCopyDataInit>:
 8004864:	18c4      	adds	r4, r0, r3
 8004866:	428c      	cmp	r4, r1
 8004868:	d3f9      	bcc.n	800485e <CopyDataInit>
 800486a:	4a0a      	ldr	r2, [pc, #40]	; (8004894 <LoopFillZerobss+0x1e>)
 800486c:	4c0a      	ldr	r4, [pc, #40]	; (8004898 <LoopFillZerobss+0x22>)
 800486e:	2300      	movs	r3, #0
 8004870:	e001      	b.n	8004876 <LoopFillZerobss>

08004872 <FillZerobss>:
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	3204      	adds	r2, #4

08004876 <LoopFillZerobss>:
 8004876:	42a2      	cmp	r2, r4
 8004878:	d3fb      	bcc.n	8004872 <FillZerobss>
 800487a:	f006 fb93 	bl	800afa4 <__libc_init_array>
 800487e:	f7fd fcf7 	bl	8002270 <main>
 8004882:	4770      	bx	lr
 8004884:	20020000 	.word	0x20020000
 8004888:	20000000 	.word	0x20000000
 800488c:	200001e8 	.word	0x200001e8
 8004890:	08011f10 	.word	0x08011f10
 8004894:	200001e8 	.word	0x200001e8
 8004898:	20000b24 	.word	0x20000b24

0800489c <ADC_IRQHandler>:
 800489c:	e7fe      	b.n	800489c <ADC_IRQHandler>
	...

080048a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <HAL_Init+0x40>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <HAL_Init+0x40>)
 80048aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_Init+0x40>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <HAL_Init+0x40>)
 80048b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_Init+0x40>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <HAL_Init+0x40>)
 80048c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048c8:	2003      	movs	r0, #3
 80048ca:	f000 fd1b 	bl	8005304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048ce:	200f      	movs	r0, #15
 80048d0:	f000 f808 	bl	80048e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048d4:	f7ff fbc6 	bl	8004064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023c00 	.word	0x40023c00

080048e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048ec:	4b12      	ldr	r3, [pc, #72]	; (8004938 <HAL_InitTick+0x54>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b12      	ldr	r3, [pc, #72]	; (800493c <HAL_InitTick+0x58>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	4619      	mov	r1, r3
 80048f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fd33 	bl	800536e <HAL_SYSTICK_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e00e      	b.n	8004930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b0f      	cmp	r3, #15
 8004916:	d80a      	bhi.n	800492e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004918:	2200      	movs	r2, #0
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	f04f 30ff 	mov.w	r0, #4294967295
 8004920:	f000 fcfb 	bl	800531a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004924:	4a06      	ldr	r2, [pc, #24]	; (8004940 <HAL_InitTick+0x5c>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000000 	.word	0x20000000
 800493c:	20000008 	.word	0x20000008
 8004940:	20000004 	.word	0x20000004

08004944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_IncTick+0x20>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_IncTick+0x24>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4413      	add	r3, r2
 8004954:	4a04      	ldr	r2, [pc, #16]	; (8004968 <HAL_IncTick+0x24>)
 8004956:	6013      	str	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000008 	.word	0x20000008
 8004968:	200009d4 	.word	0x200009d4

0800496c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return uwTick;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_GetTick+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	200009d4 	.word	0x200009d4

08004984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800498c:	f7ff ffee 	bl	800496c <HAL_GetTick>
 8004990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d005      	beq.n	80049aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <HAL_Delay+0x44>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049aa:	bf00      	nop
 80049ac:	f7ff ffde 	bl	800496c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d8f7      	bhi.n	80049ac <HAL_Delay+0x28>
  {
  }
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000008 	.word	0x20000008

080049cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e033      	b.n	8004a4a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fb62 	bl	80040b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d118      	bne.n	8004a3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a12:	f023 0302 	bic.w	r3, r3, #2
 8004a16:	f043 0202 	orr.w	r2, r3, #2
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 faa4 	bl	8004f6c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	641a      	str	r2, [r3, #64]	; 0x40
 8004a3a:	e001      	b.n	8004a40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_ADC_Start+0x1a>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e0b2      	b.n	8004bd4 <HAL_ADC_Start+0x180>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d018      	beq.n	8004ab6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a94:	4b52      	ldr	r3, [pc, #328]	; (8004be0 <HAL_ADC_Start+0x18c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a52      	ldr	r2, [pc, #328]	; (8004be4 <HAL_ADC_Start+0x190>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	0c9a      	lsrs	r2, r3, #18
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	4413      	add	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004aa8:	e002      	b.n	8004ab0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f9      	bne.n	8004aaa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d17a      	bne.n	8004bba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004aee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b02:	d106      	bne.n	8004b12 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	f023 0206 	bic.w	r2, r3, #6
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44
 8004b10:	e002      	b.n	8004b18 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b20:	4b31      	ldr	r3, [pc, #196]	; (8004be8 <HAL_ADC_Start+0x194>)
 8004b22:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004b2c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d12a      	bne.n	8004b90 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a2b      	ldr	r2, [pc, #172]	; (8004bec <HAL_ADC_Start+0x198>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d015      	beq.n	8004b70 <HAL_ADC_Start+0x11c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a29      	ldr	r2, [pc, #164]	; (8004bf0 <HAL_ADC_Start+0x19c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d105      	bne.n	8004b5a <HAL_ADC_Start+0x106>
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <HAL_ADC_Start+0x194>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a25      	ldr	r2, [pc, #148]	; (8004bf4 <HAL_ADC_Start+0x1a0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d136      	bne.n	8004bd2 <HAL_ADC_Start+0x17e>
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <HAL_ADC_Start+0x194>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d130      	bne.n	8004bd2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d129      	bne.n	8004bd2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	e020      	b.n	8004bd2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a15      	ldr	r2, [pc, #84]	; (8004bec <HAL_ADC_Start+0x198>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d11b      	bne.n	8004bd2 <HAL_ADC_Start+0x17e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d114      	bne.n	8004bd2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	e00b      	b.n	8004bd2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f043 0210 	orr.w	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bca:	f043 0201 	orr.w	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000000 	.word	0x20000000
 8004be4:	431bde83 	.word	0x431bde83
 8004be8:	40012300 	.word	0x40012300
 8004bec:	40012000 	.word	0x40012000
 8004bf0:	40012100 	.word	0x40012100
 8004bf4:	40012200 	.word	0x40012200

08004bf8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c14:	d113      	bne.n	8004c3e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c24:	d10b      	bne.n	8004c3e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f043 0220 	orr.w	r2, r3, #32
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e063      	b.n	8004d06 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c3e:	f7ff fe95 	bl	800496c <HAL_GetTick>
 8004c42:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c44:	e021      	b.n	8004c8a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d01d      	beq.n	8004c8a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <HAL_ADC_PollForConversion+0x6c>
 8004c54:	f7ff fe8a 	bl	800496c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d212      	bcs.n	8004c8a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d00b      	beq.n	8004c8a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0204 	orr.w	r2, r3, #4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e03d      	b.n	8004d06 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d1d6      	bne.n	8004c46 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0212 	mvn.w	r2, #18
 8004ca0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d123      	bne.n	8004d04 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11f      	bne.n	8004d04 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d006      	beq.n	8004ce0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d111      	bne.n	8004d04 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d105      	bne.n	8004d04 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	f043 0201 	orr.w	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_ADC_ConfigChannel+0x1c>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e105      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x228>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b09      	cmp	r3, #9
 8004d52:	d925      	bls.n	8004da0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68d9      	ldr	r1, [r3, #12]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	4613      	mov	r3, r2
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	4413      	add	r3, r2
 8004d68:	3b1e      	subs	r3, #30
 8004d6a:	2207      	movs	r2, #7
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43da      	mvns	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	400a      	ands	r2, r1
 8004d78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68d9      	ldr	r1, [r3, #12]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4403      	add	r3, r0
 8004d92:	3b1e      	subs	r3, #30
 8004d94:	409a      	lsls	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	e022      	b.n	8004de6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6919      	ldr	r1, [r3, #16]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	4613      	mov	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	2207      	movs	r2, #7
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43da      	mvns	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	400a      	ands	r2, r1
 8004dc2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6919      	ldr	r1, [r3, #16]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	4403      	add	r3, r0
 8004ddc:	409a      	lsls	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b06      	cmp	r3, #6
 8004dec:	d824      	bhi.n	8004e38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3b05      	subs	r3, #5
 8004e00:	221f      	movs	r2, #31
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43da      	mvns	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	3b05      	subs	r3, #5
 8004e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	635a      	str	r2, [r3, #52]	; 0x34
 8004e36:	e04c      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d824      	bhi.n	8004e8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	3b23      	subs	r3, #35	; 0x23
 8004e52:	221f      	movs	r2, #31
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43da      	mvns	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	400a      	ands	r2, r1
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	4618      	mov	r0, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	3b23      	subs	r3, #35	; 0x23
 8004e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
 8004e88:	e023      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	3b41      	subs	r3, #65	; 0x41
 8004e9c:	221f      	movs	r2, #31
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43da      	mvns	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	400a      	ands	r2, r1
 8004eaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	4618      	mov	r0, r3
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3b41      	subs	r3, #65	; 0x41
 8004ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ed2:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <HAL_ADC_ConfigChannel+0x234>)
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a21      	ldr	r2, [pc, #132]	; (8004f60 <HAL_ADC_ConfigChannel+0x238>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d109      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x1cc>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b12      	cmp	r3, #18
 8004ee6:	d105      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a19      	ldr	r2, [pc, #100]	; (8004f60 <HAL_ADC_ConfigChannel+0x238>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d123      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0x21e>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b10      	cmp	r3, #16
 8004f04:	d003      	beq.n	8004f0e <HAL_ADC_ConfigChannel+0x1e6>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b11      	cmp	r3, #17
 8004f0c:	d11b      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d111      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f22:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <HAL_ADC_ConfigChannel+0x23c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <HAL_ADC_ConfigChannel+0x240>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	0c9a      	lsrs	r2, r3, #18
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f38:	e002      	b.n	8004f40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f9      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40012300 	.word	0x40012300
 8004f60:	40012000 	.word	0x40012000
 8004f64:	20000000 	.word	0x20000000
 8004f68:	431bde83 	.word	0x431bde83

08004f6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f74:	4b79      	ldr	r3, [pc, #484]	; (800515c <ADC_Init+0x1f0>)
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6859      	ldr	r1, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	021a      	lsls	r2, r3, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004fc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6859      	ldr	r1, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fe6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6899      	ldr	r1, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	4a58      	ldr	r2, [pc, #352]	; (8005160 <ADC_Init+0x1f4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d022      	beq.n	800504a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005012:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6899      	ldr	r1, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6899      	ldr	r1, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	609a      	str	r2, [r3, #8]
 8005048:	e00f      	b.n	800506a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005058:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005068:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0202 	bic.w	r2, r2, #2
 8005078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6899      	ldr	r1, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	7e1b      	ldrb	r3, [r3, #24]
 8005084:	005a      	lsls	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01b      	beq.n	80050d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80050b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	3b01      	subs	r3, #1
 80050c4:	035a      	lsls	r2, r3, #13
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	e007      	b.n	80050e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	051a      	lsls	r2, r3, #20
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005114:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6899      	ldr	r1, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005122:	025a      	lsls	r2, r3, #9
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6899      	ldr	r1, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	029a      	lsls	r2, r3, #10
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	609a      	str	r2, [r3, #8]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40012300 	.word	0x40012300
 8005160:	0f000001 	.word	0x0f000001

08005164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005180:	4013      	ands	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800518c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005196:	4a04      	ldr	r2, [pc, #16]	; (80051a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	60d3      	str	r3, [r2, #12]
}
 800519c:	bf00      	nop
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	e000ed00 	.word	0xe000ed00

080051ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051b0:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <__NVIC_GetPriorityGrouping+0x18>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	0a1b      	lsrs	r3, r3, #8
 80051b6:	f003 0307 	and.w	r3, r3, #7
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	e000ed00 	.word	0xe000ed00

080051c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	db0b      	blt.n	80051f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	f003 021f 	and.w	r2, r3, #31
 80051e0:	4907      	ldr	r1, [pc, #28]	; (8005200 <__NVIC_EnableIRQ+0x38>)
 80051e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2001      	movs	r0, #1
 80051ea:	fa00 f202 	lsl.w	r2, r0, r2
 80051ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	e000e100 	.word	0xe000e100

08005204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	6039      	str	r1, [r7, #0]
 800520e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005214:	2b00      	cmp	r3, #0
 8005216:	db0a      	blt.n	800522e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	490c      	ldr	r1, [pc, #48]	; (8005250 <__NVIC_SetPriority+0x4c>)
 800521e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005222:	0112      	lsls	r2, r2, #4
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	440b      	add	r3, r1
 8005228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800522c:	e00a      	b.n	8005244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	4908      	ldr	r1, [pc, #32]	; (8005254 <__NVIC_SetPriority+0x50>)
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	3b04      	subs	r3, #4
 800523c:	0112      	lsls	r2, r2, #4
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	440b      	add	r3, r1
 8005242:	761a      	strb	r2, [r3, #24]
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	e000e100 	.word	0xe000e100
 8005254:	e000ed00 	.word	0xe000ed00

08005258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005258:	b480      	push	{r7}
 800525a:	b089      	sub	sp, #36	; 0x24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f1c3 0307 	rsb	r3, r3, #7
 8005272:	2b04      	cmp	r3, #4
 8005274:	bf28      	it	cs
 8005276:	2304      	movcs	r3, #4
 8005278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	3304      	adds	r3, #4
 800527e:	2b06      	cmp	r3, #6
 8005280:	d902      	bls.n	8005288 <NVIC_EncodePriority+0x30>
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3b03      	subs	r3, #3
 8005286:	e000      	b.n	800528a <NVIC_EncodePriority+0x32>
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800528c:	f04f 32ff 	mov.w	r2, #4294967295
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	fa02 f303 	lsl.w	r3, r2, r3
 8005296:	43da      	mvns	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	401a      	ands	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052a0:	f04f 31ff 	mov.w	r1, #4294967295
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	fa01 f303 	lsl.w	r3, r1, r3
 80052aa:	43d9      	mvns	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052b0:	4313      	orrs	r3, r2
         );
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3724      	adds	r7, #36	; 0x24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052d0:	d301      	bcc.n	80052d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052d2:	2301      	movs	r3, #1
 80052d4:	e00f      	b.n	80052f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052d6:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <SysTick_Config+0x40>)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3b01      	subs	r3, #1
 80052dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052de:	210f      	movs	r1, #15
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295
 80052e4:	f7ff ff8e 	bl	8005204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <SysTick_Config+0x40>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ee:	4b04      	ldr	r3, [pc, #16]	; (8005300 <SysTick_Config+0x40>)
 80052f0:	2207      	movs	r2, #7
 80052f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	e000e010 	.word	0xe000e010

08005304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff ff29 	bl	8005164 <__NVIC_SetPriorityGrouping>
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800531a:	b580      	push	{r7, lr}
 800531c:	b086      	sub	sp, #24
 800531e:	af00      	add	r7, sp, #0
 8005320:	4603      	mov	r3, r0
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800532c:	f7ff ff3e 	bl	80051ac <__NVIC_GetPriorityGrouping>
 8005330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	6978      	ldr	r0, [r7, #20]
 8005338:	f7ff ff8e 	bl	8005258 <NVIC_EncodePriority>
 800533c:	4602      	mov	r2, r0
 800533e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff ff5d 	bl	8005204 <__NVIC_SetPriority>
}
 800534a:	bf00      	nop
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	4603      	mov	r3, r0
 800535a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800535c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff ff31 	bl	80051c8 <__NVIC_EnableIRQ>
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ffa2 	bl	80052c0 <SysTick_Config>
 800537c:	4603      	mov	r3, r0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005394:	f7ff faea 	bl	800496c <HAL_GetTick>
 8005398:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d008      	beq.n	80053b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e052      	b.n	800545e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0216 	bic.w	r2, r2, #22
 80053c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695a      	ldr	r2, [r3, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <HAL_DMA_Abort+0x62>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d007      	beq.n	80053f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0208 	bic.w	r2, r2, #8
 80053f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0201 	bic.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005408:	e013      	b.n	8005432 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800540a:	f7ff faaf 	bl	800496c <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b05      	cmp	r3, #5
 8005416:	d90c      	bls.n	8005432 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2203      	movs	r2, #3
 8005422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e015      	b.n	800545e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e4      	bne.n	800540a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005444:	223f      	movs	r2, #63	; 0x3f
 8005446:	409a      	lsls	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d004      	beq.n	8005484 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2280      	movs	r2, #128	; 0x80
 800547e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e00c      	b.n	800549e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2205      	movs	r2, #5
 8005488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b089      	sub	sp, #36	; 0x24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054be:	2300      	movs	r3, #0
 80054c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
 80054c6:	e16b      	b.n	80057a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054c8:	2201      	movs	r2, #1
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4013      	ands	r3, r2
 80054da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	f040 815a 	bne.w	800579a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d005      	beq.n	80054fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d130      	bne.n	8005560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	2203      	movs	r2, #3
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	4013      	ands	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4313      	orrs	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005534:	2201      	movs	r2, #1
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	43db      	mvns	r3, r3
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	4013      	ands	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	091b      	lsrs	r3, r3, #4
 800554a:	f003 0201 	and.w	r2, r3, #1
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	2b03      	cmp	r3, #3
 800556a:	d017      	beq.n	800559c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	2203      	movs	r2, #3
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4013      	ands	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d123      	bne.n	80055f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	08da      	lsrs	r2, r3, #3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3208      	adds	r2, #8
 80055b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	220f      	movs	r2, #15
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4013      	ands	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4313      	orrs	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	08da      	lsrs	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3208      	adds	r2, #8
 80055ea:	69b9      	ldr	r1, [r7, #24]
 80055ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	2203      	movs	r2, #3
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4013      	ands	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 0203 	and.w	r2, r3, #3
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4313      	orrs	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80b4 	beq.w	800579a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	4b60      	ldr	r3, [pc, #384]	; (80057b8 <HAL_GPIO_Init+0x30c>)
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	4a5f      	ldr	r2, [pc, #380]	; (80057b8 <HAL_GPIO_Init+0x30c>)
 800563c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005640:	6453      	str	r3, [r2, #68]	; 0x44
 8005642:	4b5d      	ldr	r3, [pc, #372]	; (80057b8 <HAL_GPIO_Init+0x30c>)
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800564e:	4a5b      	ldr	r2, [pc, #364]	; (80057bc <HAL_GPIO_Init+0x310>)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	089b      	lsrs	r3, r3, #2
 8005654:	3302      	adds	r3, #2
 8005656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	220f      	movs	r2, #15
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4013      	ands	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a52      	ldr	r2, [pc, #328]	; (80057c0 <HAL_GPIO_Init+0x314>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d02b      	beq.n	80056d2 <HAL_GPIO_Init+0x226>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a51      	ldr	r2, [pc, #324]	; (80057c4 <HAL_GPIO_Init+0x318>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d025      	beq.n	80056ce <HAL_GPIO_Init+0x222>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a50      	ldr	r2, [pc, #320]	; (80057c8 <HAL_GPIO_Init+0x31c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01f      	beq.n	80056ca <HAL_GPIO_Init+0x21e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a4f      	ldr	r2, [pc, #316]	; (80057cc <HAL_GPIO_Init+0x320>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d019      	beq.n	80056c6 <HAL_GPIO_Init+0x21a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a4e      	ldr	r2, [pc, #312]	; (80057d0 <HAL_GPIO_Init+0x324>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <HAL_GPIO_Init+0x216>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a4d      	ldr	r2, [pc, #308]	; (80057d4 <HAL_GPIO_Init+0x328>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00d      	beq.n	80056be <HAL_GPIO_Init+0x212>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a4c      	ldr	r2, [pc, #304]	; (80057d8 <HAL_GPIO_Init+0x32c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <HAL_GPIO_Init+0x20e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a4b      	ldr	r2, [pc, #300]	; (80057dc <HAL_GPIO_Init+0x330>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d101      	bne.n	80056b6 <HAL_GPIO_Init+0x20a>
 80056b2:	2307      	movs	r3, #7
 80056b4:	e00e      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056b6:	2308      	movs	r3, #8
 80056b8:	e00c      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056ba:	2306      	movs	r3, #6
 80056bc:	e00a      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056be:	2305      	movs	r3, #5
 80056c0:	e008      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056c2:	2304      	movs	r3, #4
 80056c4:	e006      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056c6:	2303      	movs	r3, #3
 80056c8:	e004      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e002      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <HAL_GPIO_Init+0x228>
 80056d2:	2300      	movs	r3, #0
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	f002 0203 	and.w	r2, r2, #3
 80056da:	0092      	lsls	r2, r2, #2
 80056dc:	4093      	lsls	r3, r2
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056e4:	4935      	ldr	r1, [pc, #212]	; (80057bc <HAL_GPIO_Init+0x310>)
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	089b      	lsrs	r3, r3, #2
 80056ea:	3302      	adds	r3, #2
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056f2:	4b3b      	ldr	r3, [pc, #236]	; (80057e0 <HAL_GPIO_Init+0x334>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	43db      	mvns	r3, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4013      	ands	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005716:	4a32      	ldr	r2, [pc, #200]	; (80057e0 <HAL_GPIO_Init+0x334>)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800571c:	4b30      	ldr	r3, [pc, #192]	; (80057e0 <HAL_GPIO_Init+0x334>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	43db      	mvns	r3, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005740:	4a27      	ldr	r2, [pc, #156]	; (80057e0 <HAL_GPIO_Init+0x334>)
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005746:	4b26      	ldr	r3, [pc, #152]	; (80057e0 <HAL_GPIO_Init+0x334>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	43db      	mvns	r3, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4013      	ands	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800576a:	4a1d      	ldr	r2, [pc, #116]	; (80057e0 <HAL_GPIO_Init+0x334>)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005770:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <HAL_GPIO_Init+0x334>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005794:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <HAL_GPIO_Init+0x334>)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3301      	adds	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	f67f ae90 	bls.w	80054c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	3724      	adds	r7, #36	; 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40013800 	.word	0x40013800
 80057c0:	40020000 	.word	0x40020000
 80057c4:	40020400 	.word	0x40020400
 80057c8:	40020800 	.word	0x40020800
 80057cc:	40020c00 	.word	0x40020c00
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40021400 	.word	0x40021400
 80057d8:	40021800 	.word	0x40021800
 80057dc:	40021c00 	.word	0x40021c00
 80057e0:	40013c00 	.word	0x40013c00

080057e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	887b      	ldrh	r3, [r7, #2]
 80057f6:	4013      	ands	r3, r2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
 8005800:	e001      	b.n	8005806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	807b      	strh	r3, [r7, #2]
 8005820:	4613      	mov	r3, r2
 8005822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005824:	787b      	ldrb	r3, [r7, #1]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800582a:	887a      	ldrh	r2, [r7, #2]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005830:	e003      	b.n	800583a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005832:	887b      	ldrh	r3, [r7, #2]
 8005834:	041a      	lsls	r2, r3, #16
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	619a      	str	r2, [r3, #24]
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e12b      	b.n	8005ab2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fe fc64 	bl	800413c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2224      	movs	r2, #36	; 0x24
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800589a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058ac:	f001 fc48 	bl	8007140 <HAL_RCC_GetPCLK1Freq>
 80058b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	4a81      	ldr	r2, [pc, #516]	; (8005abc <HAL_I2C_Init+0x274>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d807      	bhi.n	80058cc <HAL_I2C_Init+0x84>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4a80      	ldr	r2, [pc, #512]	; (8005ac0 <HAL_I2C_Init+0x278>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	bf94      	ite	ls
 80058c4:	2301      	movls	r3, #1
 80058c6:	2300      	movhi	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	e006      	b.n	80058da <HAL_I2C_Init+0x92>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4a7d      	ldr	r2, [pc, #500]	; (8005ac4 <HAL_I2C_Init+0x27c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bf94      	ite	ls
 80058d4:	2301      	movls	r3, #1
 80058d6:	2300      	movhi	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e0e7      	b.n	8005ab2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4a78      	ldr	r2, [pc, #480]	; (8005ac8 <HAL_I2C_Init+0x280>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	0c9b      	lsrs	r3, r3, #18
 80058ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	4a6a      	ldr	r2, [pc, #424]	; (8005abc <HAL_I2C_Init+0x274>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d802      	bhi.n	800591c <HAL_I2C_Init+0xd4>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	3301      	adds	r3, #1
 800591a:	e009      	b.n	8005930 <HAL_I2C_Init+0xe8>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	4a69      	ldr	r2, [pc, #420]	; (8005acc <HAL_I2C_Init+0x284>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	099b      	lsrs	r3, r3, #6
 800592e:	3301      	adds	r3, #1
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	430b      	orrs	r3, r1
 8005936:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005942:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	495c      	ldr	r1, [pc, #368]	; (8005abc <HAL_I2C_Init+0x274>)
 800594c:	428b      	cmp	r3, r1
 800594e:	d819      	bhi.n	8005984 <HAL_I2C_Init+0x13c>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	1e59      	subs	r1, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	fbb1 f3f3 	udiv	r3, r1, r3
 800595e:	1c59      	adds	r1, r3, #1
 8005960:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005964:	400b      	ands	r3, r1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <HAL_I2C_Init+0x138>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1e59      	subs	r1, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	fbb1 f3f3 	udiv	r3, r1, r3
 8005978:	3301      	adds	r3, #1
 800597a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597e:	e051      	b.n	8005a24 <HAL_I2C_Init+0x1dc>
 8005980:	2304      	movs	r3, #4
 8005982:	e04f      	b.n	8005a24 <HAL_I2C_Init+0x1dc>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d111      	bne.n	80059b0 <HAL_I2C_Init+0x168>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1e58      	subs	r0, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6859      	ldr	r1, [r3, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	440b      	add	r3, r1
 800599a:	fbb0 f3f3 	udiv	r3, r0, r3
 800599e:	3301      	adds	r3, #1
 80059a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf0c      	ite	eq
 80059a8:	2301      	moveq	r3, #1
 80059aa:	2300      	movne	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	e012      	b.n	80059d6 <HAL_I2C_Init+0x18e>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	1e58      	subs	r0, r3, #1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6859      	ldr	r1, [r3, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	0099      	lsls	r1, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059c6:	3301      	adds	r3, #1
 80059c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	bf0c      	ite	eq
 80059d0:	2301      	moveq	r3, #1
 80059d2:	2300      	movne	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_I2C_Init+0x196>
 80059da:	2301      	movs	r3, #1
 80059dc:	e022      	b.n	8005a24 <HAL_I2C_Init+0x1dc>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10e      	bne.n	8005a04 <HAL_I2C_Init+0x1bc>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	1e58      	subs	r0, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6859      	ldr	r1, [r3, #4]
 80059ee:	460b      	mov	r3, r1
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	440b      	add	r3, r1
 80059f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80059f8:	3301      	adds	r3, #1
 80059fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a02:	e00f      	b.n	8005a24 <HAL_I2C_Init+0x1dc>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	1e58      	subs	r0, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6859      	ldr	r1, [r3, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	0099      	lsls	r1, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	6809      	ldr	r1, [r1, #0]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69da      	ldr	r2, [r3, #28]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6911      	ldr	r1, [r2, #16]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68d2      	ldr	r2, [r2, #12]
 8005a5e:	4311      	orrs	r1, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	430b      	orrs	r3, r1
 8005a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	695a      	ldr	r2, [r3, #20]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	000186a0 	.word	0x000186a0
 8005ac0:	001e847f 	.word	0x001e847f
 8005ac4:	003d08ff 	.word	0x003d08ff
 8005ac8:	431bde83 	.word	0x431bde83
 8005acc:	10624dd3 	.word	0x10624dd3

08005ad0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	4608      	mov	r0, r1
 8005ada:	4611      	mov	r1, r2
 8005adc:	461a      	mov	r2, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	817b      	strh	r3, [r7, #10]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	813b      	strh	r3, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005aea:	f7fe ff3f 	bl	800496c <HAL_GetTick>
 8005aee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	f040 80d9 	bne.w	8005cb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	2319      	movs	r3, #25
 8005b04:	2201      	movs	r2, #1
 8005b06:	496d      	ldr	r1, [pc, #436]	; (8005cbc <HAL_I2C_Mem_Write+0x1ec>)
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fc8b 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b14:	2302      	movs	r3, #2
 8005b16:	e0cc      	b.n	8005cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_I2C_Mem_Write+0x56>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e0c5      	b.n	8005cb2 <HAL_I2C_Mem_Write+0x1e2>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d007      	beq.n	8005b4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2221      	movs	r2, #33	; 0x21
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2240      	movs	r2, #64	; 0x40
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a3a      	ldr	r2, [r7, #32]
 8005b76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a4d      	ldr	r2, [pc, #308]	; (8005cc0 <HAL_I2C_Mem_Write+0x1f0>)
 8005b8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b8e:	88f8      	ldrh	r0, [r7, #6]
 8005b90:	893a      	ldrh	r2, [r7, #8]
 8005b92:	8979      	ldrh	r1, [r7, #10]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fac2 	bl	8006128 <I2C_RequestMemoryWrite>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d052      	beq.n	8005c50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e081      	b.n	8005cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fd50 	bl	8006658 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d107      	bne.n	8005bd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e06b      	b.n	8005cb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	781a      	ldrb	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d11b      	bne.n	8005c50 <HAL_I2C_Mem_Write+0x180>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d017      	beq.n	8005c50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1aa      	bne.n	8005bae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fd43 	bl	80066e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00d      	beq.n	8005c84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d107      	bne.n	8005c80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e016      	b.n	8005cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e000      	b.n	8005cb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
  }
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	00100002 	.word	0x00100002
 8005cc0:	ffff0000 	.word	0xffff0000

08005cc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08c      	sub	sp, #48	; 0x30
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	4608      	mov	r0, r1
 8005cce:	4611      	mov	r1, r2
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	817b      	strh	r3, [r7, #10]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	813b      	strh	r3, [r7, #8]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cde:	f7fe fe45 	bl	800496c <HAL_GetTick>
 8005ce2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	f040 8214 	bne.w	800611a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	2319      	movs	r3, #25
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	497b      	ldr	r1, [pc, #492]	; (8005ee8 <HAL_I2C_Mem_Read+0x224>)
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fb91 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e207      	b.n	800611c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_I2C_Mem_Read+0x56>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e200      	b.n	800611c <HAL_I2C_Mem_Read+0x458>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d007      	beq.n	8005d40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2222      	movs	r2, #34	; 0x22
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2240      	movs	r2, #64	; 0x40
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a5b      	ldr	r2, [pc, #364]	; (8005eec <HAL_I2C_Mem_Read+0x228>)
 8005d80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d82:	88f8      	ldrh	r0, [r7, #6]
 8005d84:	893a      	ldrh	r2, [r7, #8]
 8005d86:	8979      	ldrh	r1, [r7, #10]
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	9301      	str	r3, [sp, #4]
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	4603      	mov	r3, r0
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fa5e 	bl	8006254 <I2C_RequestMemoryRead>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e1bc      	b.n	800611c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d113      	bne.n	8005dd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005daa:	2300      	movs	r3, #0
 8005dac:	623b      	str	r3, [r7, #32]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	623b      	str	r3, [r7, #32]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	623b      	str	r3, [r7, #32]
 8005dbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e190      	b.n	80060f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d11b      	bne.n	8005e12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dea:	2300      	movs	r3, #0
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	61fb      	str	r3, [r7, #28]
 8005dfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	e170      	b.n	80060f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d11b      	bne.n	8005e52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	e150      	b.n	80060f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e68:	e144      	b.n	80060f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	f200 80f1 	bhi.w	8006056 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d123      	bne.n	8005ec4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fc79 	bl	8006778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e145      	b.n	800611c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ec2:	e117      	b.n	80060f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d14e      	bne.n	8005f6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	4906      	ldr	r1, [pc, #24]	; (8005ef0 <HAL_I2C_Mem_Read+0x22c>)
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 faa4 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d008      	beq.n	8005ef4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e11a      	b.n	800611c <HAL_I2C_Mem_Read+0x458>
 8005ee6:	bf00      	nop
 8005ee8:	00100002 	.word	0x00100002
 8005eec:	ffff0000 	.word	0xffff0000
 8005ef0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f68:	e0c4      	b.n	80060f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	2200      	movs	r2, #0
 8005f72:	496c      	ldr	r1, [pc, #432]	; (8006124 <HAL_I2C_Mem_Read+0x460>)
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 fa55 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0cb      	b.n	800611c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4955      	ldr	r1, [pc, #340]	; (8006124 <HAL_I2C_Mem_Read+0x460>)
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fa27 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e09d      	b.n	800611c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006054:	e04e      	b.n	80060f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006058:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fb8c 	bl	8006778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e058      	b.n	800611c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d124      	bne.n	80060f4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d107      	bne.n	80060c2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060de:	3b01      	subs	r3, #1
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f47f aeb6 	bne.w	8005e6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	e000      	b.n	800611c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800611a:	2302      	movs	r3, #2
  }
}
 800611c:	4618      	mov	r0, r3
 800611e:	3728      	adds	r7, #40	; 0x28
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	00010004 	.word	0x00010004

08006128 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af02      	add	r7, sp, #8
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	4608      	mov	r0, r1
 8006132:	4611      	mov	r1, r2
 8006134:	461a      	mov	r2, r3
 8006136:	4603      	mov	r3, r0
 8006138:	817b      	strh	r3, [r7, #10]
 800613a:	460b      	mov	r3, r1
 800613c:	813b      	strh	r3, [r7, #8]
 800613e:	4613      	mov	r3, r2
 8006140:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006150:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	2200      	movs	r2, #0
 800615a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f960 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00d      	beq.n	8006186 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006178:	d103      	bne.n	8006182 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e05f      	b.n	8006246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006186:	897b      	ldrh	r3, [r7, #10]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	461a      	mov	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006194:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	6a3a      	ldr	r2, [r7, #32]
 800619a:	492d      	ldr	r1, [pc, #180]	; (8006250 <I2C_RequestMemoryWrite+0x128>)
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 f9bb 	bl	8006518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e04c      	b.n	8006246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c4:	6a39      	ldr	r1, [r7, #32]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fa46 	bl	8006658 <I2C_WaitOnTXEFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00d      	beq.n	80061ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d107      	bne.n	80061ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e02b      	b.n	8006246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d105      	bne.n	8006200 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061f4:	893b      	ldrh	r3, [r7, #8]
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	611a      	str	r2, [r3, #16]
 80061fe:	e021      	b.n	8006244 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006200:	893b      	ldrh	r3, [r7, #8]
 8006202:	0a1b      	lsrs	r3, r3, #8
 8006204:	b29b      	uxth	r3, r3
 8006206:	b2da      	uxtb	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800620e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006210:	6a39      	ldr	r1, [r7, #32]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fa20 	bl	8006658 <I2C_WaitOnTXEFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00d      	beq.n	800623a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	2b04      	cmp	r3, #4
 8006224:	d107      	bne.n	8006236 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006234:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e005      	b.n	8006246 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800623a:	893b      	ldrh	r3, [r7, #8]
 800623c:	b2da      	uxtb	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	00010002 	.word	0x00010002

08006254 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	4608      	mov	r0, r1
 800625e:	4611      	mov	r1, r2
 8006260:	461a      	mov	r2, r3
 8006262:	4603      	mov	r3, r0
 8006264:	817b      	strh	r3, [r7, #10]
 8006266:	460b      	mov	r3, r1
 8006268:	813b      	strh	r3, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800627c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800628c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	2200      	movs	r2, #0
 8006296:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f8c2 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b4:	d103      	bne.n	80062be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e0aa      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062c2:	897b      	ldrh	r3, [r7, #10]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	461a      	mov	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	4952      	ldr	r1, [pc, #328]	; (8006420 <I2C_RequestMemoryRead+0x1cc>)
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f91d 	bl	8006518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e097      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006300:	6a39      	ldr	r1, [r7, #32]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f9a8 	bl	8006658 <I2C_WaitOnTXEFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00d      	beq.n	800632a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	2b04      	cmp	r3, #4
 8006314:	d107      	bne.n	8006326 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006324:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e076      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d105      	bne.n	800633c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006330:	893b      	ldrh	r3, [r7, #8]
 8006332:	b2da      	uxtb	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	611a      	str	r2, [r3, #16]
 800633a:	e021      	b.n	8006380 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800633c:	893b      	ldrh	r3, [r7, #8]
 800633e:	0a1b      	lsrs	r3, r3, #8
 8006340:	b29b      	uxth	r3, r3
 8006342:	b2da      	uxtb	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	6a39      	ldr	r1, [r7, #32]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f982 	bl	8006658 <I2C_WaitOnTXEFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00d      	beq.n	8006376 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	2b04      	cmp	r3, #4
 8006360:	d107      	bne.n	8006372 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006370:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e050      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006376:	893b      	ldrh	r3, [r7, #8]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	6a39      	ldr	r1, [r7, #32]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f967 	bl	8006658 <I2C_WaitOnTXEFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00d      	beq.n	80063ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	2b04      	cmp	r3, #4
 8006396:	d107      	bne.n	80063a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e035      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f82b 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e2:	d103      	bne.n	80063ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e013      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063f0:	897b      	ldrh	r3, [r7, #10]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	4906      	ldr	r1, [pc, #24]	; (8006420 <I2C_RequestMemoryRead+0x1cc>)
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f886 	bl	8006518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	00010002 	.word	0x00010002

08006424 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006434:	e048      	b.n	80064c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d044      	beq.n	80064c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643e:	f7fe fa95 	bl	800496c <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d302      	bcc.n	8006454 <I2C_WaitOnFlagUntilTimeout+0x30>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d139      	bne.n	80064c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	0c1b      	lsrs	r3, r3, #16
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b01      	cmp	r3, #1
 800645c:	d10d      	bne.n	800647a <I2C_WaitOnFlagUntilTimeout+0x56>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	43da      	mvns	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4013      	ands	r3, r2
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf0c      	ite	eq
 8006470:	2301      	moveq	r3, #1
 8006472:	2300      	movne	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	e00c      	b.n	8006494 <I2C_WaitOnFlagUntilTimeout+0x70>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	43da      	mvns	r2, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	4013      	ands	r3, r2
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	461a      	mov	r2, r3
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	429a      	cmp	r2, r3
 8006498:	d116      	bne.n	80064c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	f043 0220 	orr.w	r2, r3, #32
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e023      	b.n	8006510 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	0c1b      	lsrs	r3, r3, #16
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d10d      	bne.n	80064ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	43da      	mvns	r2, r3
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	4013      	ands	r3, r2
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	bf0c      	ite	eq
 80064e4:	2301      	moveq	r3, #1
 80064e6:	2300      	movne	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	e00c      	b.n	8006508 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	43da      	mvns	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4013      	ands	r3, r2
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf0c      	ite	eq
 8006500:	2301      	moveq	r3, #1
 8006502:	2300      	movne	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	429a      	cmp	r2, r3
 800650c:	d093      	beq.n	8006436 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006526:	e071      	b.n	800660c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006536:	d123      	bne.n	8006580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006546:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006550:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	f043 0204 	orr.w	r2, r3, #4
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e067      	b.n	8006650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006586:	d041      	beq.n	800660c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006588:	f7fe f9f0 	bl	800496c <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	d302      	bcc.n	800659e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d136      	bne.n	800660c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	0c1b      	lsrs	r3, r3, #16
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d10c      	bne.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	43da      	mvns	r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4013      	ands	r3, r2
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bf14      	ite	ne
 80065ba:	2301      	movne	r3, #1
 80065bc:	2300      	moveq	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e00b      	b.n	80065da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	43da      	mvns	r2, r3
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4013      	ands	r3, r2
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d016      	beq.n	800660c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	f043 0220 	orr.w	r2, r3, #32
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e021      	b.n	8006650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	0c1b      	lsrs	r3, r3, #16
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b01      	cmp	r3, #1
 8006614:	d10c      	bne.n	8006630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	43da      	mvns	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	4013      	ands	r3, r2
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	bf14      	ite	ne
 8006628:	2301      	movne	r3, #1
 800662a:	2300      	moveq	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	e00b      	b.n	8006648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	43da      	mvns	r2, r3
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4013      	ands	r3, r2
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	bf14      	ite	ne
 8006642:	2301      	movne	r3, #1
 8006644:	2300      	moveq	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	f47f af6d 	bne.w	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006664:	e034      	b.n	80066d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f8e3 	bl	8006832 <I2C_IsAcknowledgeFailed>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e034      	b.n	80066e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667c:	d028      	beq.n	80066d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667e:	f7fe f975 	bl	800496c <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	d302      	bcc.n	8006694 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d11d      	bne.n	80066d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669e:	2b80      	cmp	r3, #128	; 0x80
 80066a0:	d016      	beq.n	80066d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	f043 0220 	orr.w	r2, r3, #32
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e007      	b.n	80066e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066da:	2b80      	cmp	r3, #128	; 0x80
 80066dc:	d1c3      	bne.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066f4:	e034      	b.n	8006760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f89b 	bl	8006832 <I2C_IsAcknowledgeFailed>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e034      	b.n	8006770 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d028      	beq.n	8006760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670e:	f7fe f92d 	bl	800496c <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	429a      	cmp	r2, r3
 800671c:	d302      	bcc.n	8006724 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d11d      	bne.n	8006760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	2b04      	cmp	r3, #4
 8006730:	d016      	beq.n	8006760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	f043 0220 	orr.w	r2, r3, #32
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e007      	b.n	8006770 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b04      	cmp	r3, #4
 800676c:	d1c3      	bne.n	80066f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006784:	e049      	b.n	800681a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f003 0310 	and.w	r3, r3, #16
 8006790:	2b10      	cmp	r3, #16
 8006792:	d119      	bne.n	80067c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f06f 0210 	mvn.w	r2, #16
 800679c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e030      	b.n	800682a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c8:	f7fe f8d0 	bl	800496c <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d302      	bcc.n	80067de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d11d      	bne.n	800681a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	d016      	beq.n	800681a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f043 0220 	orr.w	r2, r3, #32
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e007      	b.n	800682a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b40      	cmp	r3, #64	; 0x40
 8006826:	d1ae      	bne.n	8006786 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006848:	d11b      	bne.n	8006882 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006852:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	f043 0204 	orr.w	r2, r3, #4
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006896:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <HAL_PWR_EnableBkUpAccess+0x24>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80068a2:	687b      	ldr	r3, [r7, #4]
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	420e0020 	.word	0x420e0020
 80068b4:	40007000 	.word	0x40007000

080068b8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80068be:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <HAL_PWR_DisableBkUpAccess+0x20>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <HAL_PWR_DisableBkUpAccess+0x24>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80068ca:	687b      	ldr	r3, [r7, #4]
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	420e0020 	.word	0x420e0020
 80068dc:	40007000 	.word	0x40007000

080068e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e267      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d075      	beq.n	80069ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068fe:	4b88      	ldr	r3, [pc, #544]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 030c 	and.w	r3, r3, #12
 8006906:	2b04      	cmp	r3, #4
 8006908:	d00c      	beq.n	8006924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800690a:	4b85      	ldr	r3, [pc, #532]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006912:	2b08      	cmp	r3, #8
 8006914:	d112      	bne.n	800693c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006916:	4b82      	ldr	r3, [pc, #520]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006922:	d10b      	bne.n	800693c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006924:	4b7e      	ldr	r3, [pc, #504]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d05b      	beq.n	80069e8 <HAL_RCC_OscConfig+0x108>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d157      	bne.n	80069e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e242      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006944:	d106      	bne.n	8006954 <HAL_RCC_OscConfig+0x74>
 8006946:	4b76      	ldr	r3, [pc, #472]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a75      	ldr	r2, [pc, #468]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800694c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	e01d      	b.n	8006990 <HAL_RCC_OscConfig+0xb0>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800695c:	d10c      	bne.n	8006978 <HAL_RCC_OscConfig+0x98>
 800695e:	4b70      	ldr	r3, [pc, #448]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a6f      	ldr	r2, [pc, #444]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	4b6d      	ldr	r3, [pc, #436]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a6c      	ldr	r2, [pc, #432]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	e00b      	b.n	8006990 <HAL_RCC_OscConfig+0xb0>
 8006978:	4b69      	ldr	r3, [pc, #420]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a68      	ldr	r2, [pc, #416]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800697e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006982:	6013      	str	r3, [r2, #0]
 8006984:	4b66      	ldr	r3, [pc, #408]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a65      	ldr	r2, [pc, #404]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 800698a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800698e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d013      	beq.n	80069c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006998:	f7fd ffe8 	bl	800496c <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069a0:	f7fd ffe4 	bl	800496c <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b64      	cmp	r3, #100	; 0x64
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e207      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b2:	4b5b      	ldr	r3, [pc, #364]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCC_OscConfig+0xc0>
 80069be:	e014      	b.n	80069ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c0:	f7fd ffd4 	bl	800496c <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069c8:	f7fd ffd0 	bl	800496c <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b64      	cmp	r3, #100	; 0x64
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e1f3      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069da:	4b51      	ldr	r3, [pc, #324]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0xe8>
 80069e6:	e000      	b.n	80069ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d063      	beq.n	8006abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069f6:	4b4a      	ldr	r3, [pc, #296]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00b      	beq.n	8006a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a02:	4b47      	ldr	r3, [pc, #284]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d11c      	bne.n	8006a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a0e:	4b44      	ldr	r3, [pc, #272]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d116      	bne.n	8006a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a1a:	4b41      	ldr	r3, [pc, #260]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <HAL_RCC_OscConfig+0x152>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d001      	beq.n	8006a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e1c7      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a32:	4b3b      	ldr	r3, [pc, #236]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	4937      	ldr	r1, [pc, #220]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a46:	e03a      	b.n	8006abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d020      	beq.n	8006a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a50:	4b34      	ldr	r3, [pc, #208]	; (8006b24 <HAL_RCC_OscConfig+0x244>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a56:	f7fd ff89 	bl	800496c <HAL_GetTick>
 8006a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a5c:	e008      	b.n	8006a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a5e:	f7fd ff85 	bl	800496c <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e1a8      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a70:	4b2b      	ldr	r3, [pc, #172]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0f0      	beq.n	8006a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a7c:	4b28      	ldr	r3, [pc, #160]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4925      	ldr	r1, [pc, #148]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	600b      	str	r3, [r1, #0]
 8006a90:	e015      	b.n	8006abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a92:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <HAL_RCC_OscConfig+0x244>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fd ff68 	bl	800496c <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aa0:	f7fd ff64 	bl	800496c <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e187      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ab2:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d036      	beq.n	8006b38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ad2:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <HAL_RCC_OscConfig+0x248>)
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad8:	f7fd ff48 	bl	800496c <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ae0:	f7fd ff44 	bl	800496c <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e167      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006af2:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <HAL_RCC_OscConfig+0x240>)
 8006af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x200>
 8006afe:	e01b      	b.n	8006b38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b00:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <HAL_RCC_OscConfig+0x248>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b06:	f7fd ff31 	bl	800496c <HAL_GetTick>
 8006b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b0c:	e00e      	b.n	8006b2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b0e:	f7fd ff2d 	bl	800496c <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d907      	bls.n	8006b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e150      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
 8006b20:	40023800 	.word	0x40023800
 8006b24:	42470000 	.word	0x42470000
 8006b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b2c:	4b88      	ldr	r3, [pc, #544]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ea      	bne.n	8006b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8097 	beq.w	8006c74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b4a:	4b81      	ldr	r3, [pc, #516]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10f      	bne.n	8006b76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b56:	2300      	movs	r3, #0
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	4b7d      	ldr	r3, [pc, #500]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	4a7c      	ldr	r2, [pc, #496]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b64:	6413      	str	r3, [r2, #64]	; 0x40
 8006b66:	4b7a      	ldr	r3, [pc, #488]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	60bb      	str	r3, [r7, #8]
 8006b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b72:	2301      	movs	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b76:	4b77      	ldr	r3, [pc, #476]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d118      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b82:	4b74      	ldr	r3, [pc, #464]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a73      	ldr	r2, [pc, #460]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b8e:	f7fd feed 	bl	800496c <HAL_GetTick>
 8006b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b94:	e008      	b.n	8006ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b96:	f7fd fee9 	bl	800496c <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e10c      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba8:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <HAL_RCC_OscConfig+0x474>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0f0      	beq.n	8006b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d106      	bne.n	8006bca <HAL_RCC_OscConfig+0x2ea>
 8006bbc:	4b64      	ldr	r3, [pc, #400]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc0:	4a63      	ldr	r2, [pc, #396]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bc2:	f043 0301 	orr.w	r3, r3, #1
 8006bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc8:	e01c      	b.n	8006c04 <HAL_RCC_OscConfig+0x324>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b05      	cmp	r3, #5
 8006bd0:	d10c      	bne.n	8006bec <HAL_RCC_OscConfig+0x30c>
 8006bd2:	4b5f      	ldr	r3, [pc, #380]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	4a5e      	ldr	r2, [pc, #376]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bd8:	f043 0304 	orr.w	r3, r3, #4
 8006bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8006bde:	4b5c      	ldr	r3, [pc, #368]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	4a5b      	ldr	r2, [pc, #364]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006be4:	f043 0301 	orr.w	r3, r3, #1
 8006be8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bea:	e00b      	b.n	8006c04 <HAL_RCC_OscConfig+0x324>
 8006bec:	4b58      	ldr	r3, [pc, #352]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	4a57      	ldr	r2, [pc, #348]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf8:	4b55      	ldr	r3, [pc, #340]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	4a54      	ldr	r2, [pc, #336]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006bfe:	f023 0304 	bic.w	r3, r3, #4
 8006c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d015      	beq.n	8006c38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0c:	f7fd feae 	bl	800496c <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c12:	e00a      	b.n	8006c2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c14:	f7fd feaa 	bl	800496c <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e0cb      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2a:	4b49      	ldr	r3, [pc, #292]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0ee      	beq.n	8006c14 <HAL_RCC_OscConfig+0x334>
 8006c36:	e014      	b.n	8006c62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c38:	f7fd fe98 	bl	800496c <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c3e:	e00a      	b.n	8006c56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c40:	f7fd fe94 	bl	800496c <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e0b5      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c56:	4b3e      	ldr	r3, [pc, #248]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1ee      	bne.n	8006c40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d105      	bne.n	8006c74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c68:	4b39      	ldr	r3, [pc, #228]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	4a38      	ldr	r2, [pc, #224]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80a1 	beq.w	8006dc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c7e:	4b34      	ldr	r3, [pc, #208]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 030c 	and.w	r3, r3, #12
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d05c      	beq.n	8006d44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d141      	bne.n	8006d16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c92:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <HAL_RCC_OscConfig+0x478>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c98:	f7fd fe68 	bl	800496c <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ca0:	f7fd fe64 	bl	800496c <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e087      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb2:	4b27      	ldr	r3, [pc, #156]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69da      	ldr	r2, [r3, #28]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	019b      	lsls	r3, r3, #6
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	085b      	lsrs	r3, r3, #1
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	061b      	lsls	r3, r3, #24
 8006ce2:	491b      	ldr	r1, [pc, #108]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <HAL_RCC_OscConfig+0x478>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cee:	f7fd fe3d 	bl	800496c <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf6:	f7fd fe39 	bl	800496c <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e05c      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d08:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x416>
 8006d14:	e054      	b.n	8006dc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <HAL_RCC_OscConfig+0x478>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1c:	f7fd fe26 	bl	800496c <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d24:	f7fd fe22 	bl	800496c <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e045      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <HAL_RCC_OscConfig+0x470>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f0      	bne.n	8006d24 <HAL_RCC_OscConfig+0x444>
 8006d42:	e03d      	b.n	8006dc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e038      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
 8006d50:	40023800 	.word	0x40023800
 8006d54:	40007000 	.word	0x40007000
 8006d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <HAL_RCC_OscConfig+0x4ec>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d028      	beq.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d121      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d11a      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d111      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	3b01      	subs	r3, #1
 8006da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d107      	bne.n	8006dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40023800 	.word	0x40023800

08006dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0cc      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006de4:	4b68      	ldr	r3, [pc, #416]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d90c      	bls.n	8006e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df2:	4b65      	ldr	r3, [pc, #404]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfa:	4b63      	ldr	r3, [pc, #396]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d001      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e0b8      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d020      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e24:	4b59      	ldr	r3, [pc, #356]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	4a58      	ldr	r2, [pc, #352]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e3c:	4b53      	ldr	r3, [pc, #332]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	4a52      	ldr	r2, [pc, #328]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e48:	4b50      	ldr	r3, [pc, #320]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	494d      	ldr	r1, [pc, #308]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d044      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e6e:	4b47      	ldr	r3, [pc, #284]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d119      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e07f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d003      	beq.n	8006e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d107      	bne.n	8006e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8e:	4b3f      	ldr	r3, [pc, #252]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e06f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e9e:	4b3b      	ldr	r3, [pc, #236]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e067      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eae:	4b37      	ldr	r3, [pc, #220]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f023 0203 	bic.w	r2, r3, #3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4934      	ldr	r1, [pc, #208]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ec0:	f7fd fd54 	bl	800496c <HAL_GetTick>
 8006ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec6:	e00a      	b.n	8006ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec8:	f7fd fd50 	bl	800496c <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e04f      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ede:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 020c 	and.w	r2, r3, #12
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d1eb      	bne.n	8006ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ef0:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d20c      	bcs.n	8006f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efe:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f06:	4b20      	ldr	r3, [pc, #128]	; (8006f88 <HAL_RCC_ClockConfig+0x1b8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d001      	beq.n	8006f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e032      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f24:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	4916      	ldr	r1, [pc, #88]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d009      	beq.n	8006f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f42:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	490e      	ldr	r1, [pc, #56]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f56:	f000 f821 	bl	8006f9c <HAL_RCC_GetSysClockFreq>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_RCC_ClockConfig+0x1bc>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	091b      	lsrs	r3, r3, #4
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	490a      	ldr	r1, [pc, #40]	; (8006f90 <HAL_RCC_ClockConfig+0x1c0>)
 8006f68:	5ccb      	ldrb	r3, [r1, r3]
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fd fcb4 	bl	80048e4 <HAL_InitTick>

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40023c00 	.word	0x40023c00
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	08011844 	.word	0x08011844
 8006f94:	20000000 	.word	0x20000000
 8006f98:	20000004 	.word	0x20000004

08006f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa0:	b090      	sub	sp, #64	; 0x40
 8006fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa8:	2300      	movs	r3, #0
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fac:	2300      	movs	r3, #0
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fb4:	4b59      	ldr	r3, [pc, #356]	; (800711c <HAL_RCC_GetSysClockFreq+0x180>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 030c 	and.w	r3, r3, #12
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d00d      	beq.n	8006fdc <HAL_RCC_GetSysClockFreq+0x40>
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	f200 80a1 	bhi.w	8007108 <HAL_RCC_GetSysClockFreq+0x16c>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d003      	beq.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006fce:	e09b      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fd0:	4b53      	ldr	r3, [pc, #332]	; (8007120 <HAL_RCC_GetSysClockFreq+0x184>)
 8006fd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006fd4:	e09b      	b.n	800710e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fd6:	4b53      	ldr	r3, [pc, #332]	; (8007124 <HAL_RCC_GetSysClockFreq+0x188>)
 8006fd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006fda:	e098      	b.n	800710e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fdc:	4b4f      	ldr	r3, [pc, #316]	; (800711c <HAL_RCC_GetSysClockFreq+0x180>)
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fe4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fe6:	4b4d      	ldr	r3, [pc, #308]	; (800711c <HAL_RCC_GetSysClockFreq+0x180>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d028      	beq.n	8007044 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ff2:	4b4a      	ldr	r3, [pc, #296]	; (800711c <HAL_RCC_GetSysClockFreq+0x180>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	623b      	str	r3, [r7, #32]
 8006ffc:	627a      	str	r2, [r7, #36]	; 0x24
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007004:	2100      	movs	r1, #0
 8007006:	4b47      	ldr	r3, [pc, #284]	; (8007124 <HAL_RCC_GetSysClockFreq+0x188>)
 8007008:	fb03 f201 	mul.w	r2, r3, r1
 800700c:	2300      	movs	r3, #0
 800700e:	fb00 f303 	mul.w	r3, r0, r3
 8007012:	4413      	add	r3, r2
 8007014:	4a43      	ldr	r2, [pc, #268]	; (8007124 <HAL_RCC_GetSysClockFreq+0x188>)
 8007016:	fba0 1202 	umull	r1, r2, r0, r2
 800701a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800701c:	460a      	mov	r2, r1
 800701e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007022:	4413      	add	r3, r2
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007028:	2200      	movs	r2, #0
 800702a:	61bb      	str	r3, [r7, #24]
 800702c:	61fa      	str	r2, [r7, #28]
 800702e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007032:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007036:	f7f9 fe27 	bl	8000c88 <__aeabi_uldivmod>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4613      	mov	r3, r2
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007042:	e053      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007044:	4b35      	ldr	r3, [pc, #212]	; (800711c <HAL_RCC_GetSysClockFreq+0x180>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	099b      	lsrs	r3, r3, #6
 800704a:	2200      	movs	r2, #0
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	617a      	str	r2, [r7, #20]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007056:	f04f 0b00 	mov.w	fp, #0
 800705a:	4652      	mov	r2, sl
 800705c:	465b      	mov	r3, fp
 800705e:	f04f 0000 	mov.w	r0, #0
 8007062:	f04f 0100 	mov.w	r1, #0
 8007066:	0159      	lsls	r1, r3, #5
 8007068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800706c:	0150      	lsls	r0, r2, #5
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	ebb2 080a 	subs.w	r8, r2, sl
 8007076:	eb63 090b 	sbc.w	r9, r3, fp
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007086:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800708a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800708e:	ebb2 0408 	subs.w	r4, r2, r8
 8007092:	eb63 0509 	sbc.w	r5, r3, r9
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	f04f 0300 	mov.w	r3, #0
 800709e:	00eb      	lsls	r3, r5, #3
 80070a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070a4:	00e2      	lsls	r2, r4, #3
 80070a6:	4614      	mov	r4, r2
 80070a8:	461d      	mov	r5, r3
 80070aa:	eb14 030a 	adds.w	r3, r4, sl
 80070ae:	603b      	str	r3, [r7, #0]
 80070b0:	eb45 030b 	adc.w	r3, r5, fp
 80070b4:	607b      	str	r3, [r7, #4]
 80070b6:	f04f 0200 	mov.w	r2, #0
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070c2:	4629      	mov	r1, r5
 80070c4:	028b      	lsls	r3, r1, #10
 80070c6:	4621      	mov	r1, r4
 80070c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070cc:	4621      	mov	r1, r4
 80070ce:	028a      	lsls	r2, r1, #10
 80070d0:	4610      	mov	r0, r2
 80070d2:	4619      	mov	r1, r3
 80070d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d6:	2200      	movs	r2, #0
 80070d8:	60bb      	str	r3, [r7, #8]
 80070da:	60fa      	str	r2, [r7, #12]
 80070dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070e0:	f7f9 fdd2 	bl	8000c88 <__aeabi_uldivmod>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4613      	mov	r3, r2
 80070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80070ec:	4b0b      	ldr	r3, [pc, #44]	; (800711c <HAL_RCC_GetSysClockFreq+0x180>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	0c1b      	lsrs	r3, r3, #16
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	3301      	adds	r3, #1
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80070fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	fbb2 f3f3 	udiv	r3, r2, r3
 8007104:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007106:	e002      	b.n	800710e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <HAL_RCC_GetSysClockFreq+0x184>)
 800710a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800710c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007110:	4618      	mov	r0, r3
 8007112:	3740      	adds	r7, #64	; 0x40
 8007114:	46bd      	mov	sp, r7
 8007116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800711a:	bf00      	nop
 800711c:	40023800 	.word	0x40023800
 8007120:	00f42400 	.word	0x00f42400
 8007124:	017d7840 	.word	0x017d7840

08007128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800712c:	4b03      	ldr	r3, [pc, #12]	; (800713c <HAL_RCC_GetHCLKFreq+0x14>)
 800712e:	681b      	ldr	r3, [r3, #0]
}
 8007130:	4618      	mov	r0, r3
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	20000000 	.word	0x20000000

08007140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007144:	f7ff fff0 	bl	8007128 <HAL_RCC_GetHCLKFreq>
 8007148:	4602      	mov	r2, r0
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	0a9b      	lsrs	r3, r3, #10
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	4903      	ldr	r1, [pc, #12]	; (8007164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007156:	5ccb      	ldrb	r3, [r1, r3]
 8007158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800715c:	4618      	mov	r0, r3
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40023800 	.word	0x40023800
 8007164:	08011854 	.word	0x08011854

08007168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800716c:	f7ff ffdc 	bl	8007128 <HAL_RCC_GetHCLKFreq>
 8007170:	4602      	mov	r2, r0
 8007172:	4b05      	ldr	r3, [pc, #20]	; (8007188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	0b5b      	lsrs	r3, r3, #13
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	4903      	ldr	r1, [pc, #12]	; (800718c <HAL_RCC_GetPCLK2Freq+0x24>)
 800717e:	5ccb      	ldrb	r3, [r1, r3]
 8007180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007184:	4618      	mov	r0, r3
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40023800 	.word	0x40023800
 800718c:	08011854 	.word	0x08011854

08007190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e041      	b.n	8007226 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fd f808 	bl	80041cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3304      	adds	r3, #4
 80071cc:	4619      	mov	r1, r3
 80071ce:	4610      	mov	r0, r2
 80071d0:	f001 f876 	bl	80082c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	d001      	beq.n	8007248 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e046      	b.n	80072d6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a23      	ldr	r2, [pc, #140]	; (80072e4 <HAL_TIM_Base_Start+0xb4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d022      	beq.n	80072a0 <HAL_TIM_Base_Start+0x70>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007262:	d01d      	beq.n	80072a0 <HAL_TIM_Base_Start+0x70>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1f      	ldr	r2, [pc, #124]	; (80072e8 <HAL_TIM_Base_Start+0xb8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d018      	beq.n	80072a0 <HAL_TIM_Base_Start+0x70>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1e      	ldr	r2, [pc, #120]	; (80072ec <HAL_TIM_Base_Start+0xbc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d013      	beq.n	80072a0 <HAL_TIM_Base_Start+0x70>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1c      	ldr	r2, [pc, #112]	; (80072f0 <HAL_TIM_Base_Start+0xc0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00e      	beq.n	80072a0 <HAL_TIM_Base_Start+0x70>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1b      	ldr	r2, [pc, #108]	; (80072f4 <HAL_TIM_Base_Start+0xc4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d009      	beq.n	80072a0 <HAL_TIM_Base_Start+0x70>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a19      	ldr	r2, [pc, #100]	; (80072f8 <HAL_TIM_Base_Start+0xc8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d004      	beq.n	80072a0 <HAL_TIM_Base_Start+0x70>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a18      	ldr	r2, [pc, #96]	; (80072fc <HAL_TIM_Base_Start+0xcc>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d111      	bne.n	80072c4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b06      	cmp	r3, #6
 80072b0:	d010      	beq.n	80072d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0201 	orr.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c2:	e007      	b.n	80072d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0201 	orr.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40010000 	.word	0x40010000
 80072e8:	40000400 	.word	0x40000400
 80072ec:	40000800 	.word	0x40000800
 80072f0:	40000c00 	.word	0x40000c00
 80072f4:	40010400 	.word	0x40010400
 80072f8:	40014000 	.word	0x40014000
 80072fc:	40001800 	.word	0x40001800

08007300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b01      	cmp	r3, #1
 8007312:	d001      	beq.n	8007318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e04e      	b.n	80073b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a23      	ldr	r2, [pc, #140]	; (80073c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d022      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007342:	d01d      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1f      	ldr	r2, [pc, #124]	; (80073c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d018      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1e      	ldr	r2, [pc, #120]	; (80073cc <HAL_TIM_Base_Start_IT+0xcc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d013      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00e      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a1b      	ldr	r2, [pc, #108]	; (80073d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d009      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a19      	ldr	r2, [pc, #100]	; (80073d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d004      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x80>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a18      	ldr	r2, [pc, #96]	; (80073dc <HAL_TIM_Base_Start_IT+0xdc>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d111      	bne.n	80073a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b06      	cmp	r3, #6
 8007390:	d010      	beq.n	80073b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0201 	orr.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a2:	e007      	b.n	80073b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40010000 	.word	0x40010000
 80073c8:	40000400 	.word	0x40000400
 80073cc:	40000800 	.word	0x40000800
 80073d0:	40000c00 	.word	0x40000c00
 80073d4:	40010400 	.word	0x40010400
 80073d8:	40014000 	.word	0x40014000
 80073dc:	40001800 	.word	0x40001800

080073e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e041      	b.n	8007476 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f839 	bl	800747e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3304      	adds	r3, #4
 800741c:	4619      	mov	r1, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f000 ff4e 	bl	80082c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
	...

08007494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d109      	bne.n	80074b8 <HAL_TIM_PWM_Start+0x24>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	bf14      	ite	ne
 80074b0:	2301      	movne	r3, #1
 80074b2:	2300      	moveq	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	e022      	b.n	80074fe <HAL_TIM_PWM_Start+0x6a>
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d109      	bne.n	80074d2 <HAL_TIM_PWM_Start+0x3e>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	bf14      	ite	ne
 80074ca:	2301      	movne	r3, #1
 80074cc:	2300      	moveq	r3, #0
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	e015      	b.n	80074fe <HAL_TIM_PWM_Start+0x6a>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d109      	bne.n	80074ec <HAL_TIM_PWM_Start+0x58>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	bf14      	ite	ne
 80074e4:	2301      	movne	r3, #1
 80074e6:	2300      	moveq	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	e008      	b.n	80074fe <HAL_TIM_PWM_Start+0x6a>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	bf14      	ite	ne
 80074f8:	2301      	movne	r3, #1
 80074fa:	2300      	moveq	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e07c      	b.n	8007600 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <HAL_TIM_PWM_Start+0x82>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007514:	e013      	b.n	800753e <HAL_TIM_PWM_Start+0xaa>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b04      	cmp	r3, #4
 800751a:	d104      	bne.n	8007526 <HAL_TIM_PWM_Start+0x92>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007524:	e00b      	b.n	800753e <HAL_TIM_PWM_Start+0xaa>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b08      	cmp	r3, #8
 800752a:	d104      	bne.n	8007536 <HAL_TIM_PWM_Start+0xa2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2202      	movs	r2, #2
 8007530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007534:	e003      	b.n	800753e <HAL_TIM_PWM_Start+0xaa>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2202      	movs	r2, #2
 800753a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2201      	movs	r2, #1
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f001 fada 	bl	8008b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a2d      	ldr	r2, [pc, #180]	; (8007608 <HAL_TIM_PWM_Start+0x174>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d004      	beq.n	8007560 <HAL_TIM_PWM_Start+0xcc>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a2c      	ldr	r2, [pc, #176]	; (800760c <HAL_TIM_PWM_Start+0x178>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d101      	bne.n	8007564 <HAL_TIM_PWM_Start+0xd0>
 8007560:	2301      	movs	r3, #1
 8007562:	e000      	b.n	8007566 <HAL_TIM_PWM_Start+0xd2>
 8007564:	2300      	movs	r3, #0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d007      	beq.n	800757a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007578:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a22      	ldr	r2, [pc, #136]	; (8007608 <HAL_TIM_PWM_Start+0x174>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d022      	beq.n	80075ca <HAL_TIM_PWM_Start+0x136>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758c:	d01d      	beq.n	80075ca <HAL_TIM_PWM_Start+0x136>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1f      	ldr	r2, [pc, #124]	; (8007610 <HAL_TIM_PWM_Start+0x17c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d018      	beq.n	80075ca <HAL_TIM_PWM_Start+0x136>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1d      	ldr	r2, [pc, #116]	; (8007614 <HAL_TIM_PWM_Start+0x180>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <HAL_TIM_PWM_Start+0x136>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1c      	ldr	r2, [pc, #112]	; (8007618 <HAL_TIM_PWM_Start+0x184>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00e      	beq.n	80075ca <HAL_TIM_PWM_Start+0x136>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a16      	ldr	r2, [pc, #88]	; (800760c <HAL_TIM_PWM_Start+0x178>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d009      	beq.n	80075ca <HAL_TIM_PWM_Start+0x136>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a18      	ldr	r2, [pc, #96]	; (800761c <HAL_TIM_PWM_Start+0x188>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d004      	beq.n	80075ca <HAL_TIM_PWM_Start+0x136>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a16      	ldr	r2, [pc, #88]	; (8007620 <HAL_TIM_PWM_Start+0x18c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d111      	bne.n	80075ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b06      	cmp	r3, #6
 80075da:	d010      	beq.n	80075fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f042 0201 	orr.w	r2, r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ec:	e007      	b.n	80075fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0201 	orr.w	r2, r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40010000 	.word	0x40010000
 800760c:	40010400 	.word	0x40010400
 8007610:	40000400 	.word	0x40000400
 8007614:	40000800 	.word	0x40000800
 8007618:	40000c00 	.word	0x40000c00
 800761c:	40014000 	.word	0x40014000
 8007620:	40001800 	.word	0x40001800

08007624 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e041      	b.n	80076ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f839 	bl	80076c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3304      	adds	r3, #4
 8007660:	4619      	mov	r1, r3
 8007662:	4610      	mov	r0, r2
 8007664:	f000 fe2c 	bl	80082c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
	...

080076d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <HAL_TIM_IC_Start_IT+0x1e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	e013      	b.n	800771e <HAL_TIM_IC_Start_IT+0x46>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d104      	bne.n	8007706 <HAL_TIM_IC_Start_IT+0x2e>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007702:	b2db      	uxtb	r3, r3
 8007704:	e00b      	b.n	800771e <HAL_TIM_IC_Start_IT+0x46>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b08      	cmp	r3, #8
 800770a:	d104      	bne.n	8007716 <HAL_TIM_IC_Start_IT+0x3e>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007712:	b2db      	uxtb	r3, r3
 8007714:	e003      	b.n	800771e <HAL_TIM_IC_Start_IT+0x46>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800771c:	b2db      	uxtb	r3, r3
 800771e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d104      	bne.n	8007730 <HAL_TIM_IC_Start_IT+0x58>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800772c:	b2db      	uxtb	r3, r3
 800772e:	e013      	b.n	8007758 <HAL_TIM_IC_Start_IT+0x80>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b04      	cmp	r3, #4
 8007734:	d104      	bne.n	8007740 <HAL_TIM_IC_Start_IT+0x68>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800773c:	b2db      	uxtb	r3, r3
 800773e:	e00b      	b.n	8007758 <HAL_TIM_IC_Start_IT+0x80>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b08      	cmp	r3, #8
 8007744:	d104      	bne.n	8007750 <HAL_TIM_IC_Start_IT+0x78>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800774c:	b2db      	uxtb	r3, r3
 800774e:	e003      	b.n	8007758 <HAL_TIM_IC_Start_IT+0x80>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007756:	b2db      	uxtb	r3, r3
 8007758:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d102      	bne.n	8007766 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007760:	7b7b      	ldrb	r3, [r7, #13]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d001      	beq.n	800776a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e0cc      	b.n	8007904 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d104      	bne.n	800777a <HAL_TIM_IC_Start_IT+0xa2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007778:	e013      	b.n	80077a2 <HAL_TIM_IC_Start_IT+0xca>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b04      	cmp	r3, #4
 800777e:	d104      	bne.n	800778a <HAL_TIM_IC_Start_IT+0xb2>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007788:	e00b      	b.n	80077a2 <HAL_TIM_IC_Start_IT+0xca>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b08      	cmp	r3, #8
 800778e:	d104      	bne.n	800779a <HAL_TIM_IC_Start_IT+0xc2>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007798:	e003      	b.n	80077a2 <HAL_TIM_IC_Start_IT+0xca>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2202      	movs	r2, #2
 800779e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d104      	bne.n	80077b2 <HAL_TIM_IC_Start_IT+0xda>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077b0:	e013      	b.n	80077da <HAL_TIM_IC_Start_IT+0x102>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d104      	bne.n	80077c2 <HAL_TIM_IC_Start_IT+0xea>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077c0:	e00b      	b.n	80077da <HAL_TIM_IC_Start_IT+0x102>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d104      	bne.n	80077d2 <HAL_TIM_IC_Start_IT+0xfa>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077d0:	e003      	b.n	80077da <HAL_TIM_IC_Start_IT+0x102>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2202      	movs	r2, #2
 80077d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b0c      	cmp	r3, #12
 80077de:	d841      	bhi.n	8007864 <HAL_TIM_IC_Start_IT+0x18c>
 80077e0:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <HAL_TIM_IC_Start_IT+0x110>)
 80077e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	0800781d 	.word	0x0800781d
 80077ec:	08007865 	.word	0x08007865
 80077f0:	08007865 	.word	0x08007865
 80077f4:	08007865 	.word	0x08007865
 80077f8:	0800782f 	.word	0x0800782f
 80077fc:	08007865 	.word	0x08007865
 8007800:	08007865 	.word	0x08007865
 8007804:	08007865 	.word	0x08007865
 8007808:	08007841 	.word	0x08007841
 800780c:	08007865 	.word	0x08007865
 8007810:	08007865 	.word	0x08007865
 8007814:	08007865 	.word	0x08007865
 8007818:	08007853 	.word	0x08007853
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0202 	orr.w	r2, r2, #2
 800782a:	60da      	str	r2, [r3, #12]
      break;
 800782c:	e01d      	b.n	800786a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f042 0204 	orr.w	r2, r2, #4
 800783c:	60da      	str	r2, [r3, #12]
      break;
 800783e:	e014      	b.n	800786a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0208 	orr.w	r2, r2, #8
 800784e:	60da      	str	r2, [r3, #12]
      break;
 8007850:	e00b      	b.n	800786a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0210 	orr.w	r2, r2, #16
 8007860:	60da      	str	r2, [r3, #12]
      break;
 8007862:	e002      	b.n	800786a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	73fb      	strb	r3, [r7, #15]
      break;
 8007868:	bf00      	nop
  }

  if (status == HAL_OK)
 800786a:	7bfb      	ldrb	r3, [r7, #15]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d148      	bne.n	8007902 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2201      	movs	r2, #1
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	4618      	mov	r0, r3
 800787a:	f001 f941 	bl	8008b00 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a22      	ldr	r2, [pc, #136]	; (800790c <HAL_TIM_IC_Start_IT+0x234>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d022      	beq.n	80078ce <HAL_TIM_IC_Start_IT+0x1f6>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007890:	d01d      	beq.n	80078ce <HAL_TIM_IC_Start_IT+0x1f6>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1e      	ldr	r2, [pc, #120]	; (8007910 <HAL_TIM_IC_Start_IT+0x238>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d018      	beq.n	80078ce <HAL_TIM_IC_Start_IT+0x1f6>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1c      	ldr	r2, [pc, #112]	; (8007914 <HAL_TIM_IC_Start_IT+0x23c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <HAL_TIM_IC_Start_IT+0x1f6>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1b      	ldr	r2, [pc, #108]	; (8007918 <HAL_TIM_IC_Start_IT+0x240>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00e      	beq.n	80078ce <HAL_TIM_IC_Start_IT+0x1f6>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a19      	ldr	r2, [pc, #100]	; (800791c <HAL_TIM_IC_Start_IT+0x244>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_TIM_IC_Start_IT+0x1f6>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a18      	ldr	r2, [pc, #96]	; (8007920 <HAL_TIM_IC_Start_IT+0x248>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_TIM_IC_Start_IT+0x1f6>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a16      	ldr	r2, [pc, #88]	; (8007924 <HAL_TIM_IC_Start_IT+0x24c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d111      	bne.n	80078f2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f003 0307 	and.w	r3, r3, #7
 80078d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b06      	cmp	r3, #6
 80078de:	d010      	beq.n	8007902 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 0201 	orr.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f0:	e007      	b.n	8007902 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f042 0201 	orr.w	r2, r2, #1
 8007900:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007902:	7bfb      	ldrb	r3, [r7, #15]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40010000 	.word	0x40010000
 8007910:	40000400 	.word	0x40000400
 8007914:	40000800 	.word	0x40000800
 8007918:	40000c00 	.word	0x40000c00
 800791c:	40010400 	.word	0x40010400
 8007920:	40014000 	.word	0x40014000
 8007924:	40001800 	.word	0x40001800

08007928 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e097      	b.n	8007a6c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d106      	bne.n	8007956 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7fc fcf3 	bl	800433c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2202      	movs	r2, #2
 800795a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6812      	ldr	r2, [r2, #0]
 8007968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800796c:	f023 0307 	bic.w	r3, r3, #7
 8007970:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3304      	adds	r3, #4
 800797a:	4619      	mov	r1, r3
 800797c:	4610      	mov	r0, r2
 800797e:	f000 fc9f 	bl	80082c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079aa:	f023 0303 	bic.w	r3, r3, #3
 80079ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	021b      	lsls	r3, r3, #8
 80079ba:	4313      	orrs	r3, r2
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	4313      	orrs	r3, r2
 80079c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80079c8:	f023 030c 	bic.w	r3, r3, #12
 80079cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68da      	ldr	r2, [r3, #12]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	4313      	orrs	r3, r2
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	011a      	lsls	r2, r3, #4
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	031b      	lsls	r3, r3, #12
 80079f8:	4313      	orrs	r3, r2
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007a06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007a0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d110      	bne.n	8007ac6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d102      	bne.n	8007ab0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007aaa:	7b7b      	ldrb	r3, [r7, #13]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d001      	beq.n	8007ab4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e089      	b.n	8007bc8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ac4:	e031      	b.n	8007b2a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d110      	bne.n	8007aee <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d102      	bne.n	8007ad8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ad2:	7b3b      	ldrb	r3, [r7, #12]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d001      	beq.n	8007adc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e075      	b.n	8007bc8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007aec:	e01d      	b.n	8007b2a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d108      	bne.n	8007b06 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d105      	bne.n	8007b06 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007afa:	7b7b      	ldrb	r3, [r7, #13]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d102      	bne.n	8007b06 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b00:	7b3b      	ldrb	r3, [r7, #12]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d001      	beq.n	8007b0a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e05e      	b.n	8007bc8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2202      	movs	r2, #2
 8007b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2202      	movs	r2, #2
 8007b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d010      	beq.n	8007b58 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007b36:	e01f      	b.n	8007b78 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 ffdd 	bl	8008b00 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f042 0202 	orr.w	r2, r2, #2
 8007b54:	60da      	str	r2, [r3, #12]
      break;
 8007b56:	e02e      	b.n	8007bb6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	2104      	movs	r1, #4
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 ffcd 	bl	8008b00 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f042 0204 	orr.w	r2, r2, #4
 8007b74:	60da      	str	r2, [r3, #12]
      break;
 8007b76:	e01e      	b.n	8007bb6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 ffbd 	bl	8008b00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	2104      	movs	r1, #4
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 ffb6 	bl	8008b00 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0202 	orr.w	r2, r2, #2
 8007ba2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0204 	orr.w	r2, r2, #4
 8007bb2:	60da      	str	r2, [r3, #12]
      break;
 8007bb4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f042 0201 	orr.w	r2, r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d020      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01b      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0202 	mvn.w	r2, #2
 8007c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fa fab4 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 8007c20:	e005      	b.n	8007c2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fb2e 	bl	8008284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fb35 	bl	8008298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d020      	beq.n	8007c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01b      	beq.n	8007c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0204 	mvn.w	r2, #4
 8007c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2202      	movs	r2, #2
 8007c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fa fa8e 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 8007c6c:	e005      	b.n	8007c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb08 	bl	8008284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fb0f 	bl	8008298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d020      	beq.n	8007ccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f003 0308 	and.w	r3, r3, #8
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01b      	beq.n	8007ccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f06f 0208 	mvn.w	r2, #8
 8007c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2204      	movs	r2, #4
 8007ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	f003 0303 	and.w	r3, r3, #3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7fa fa68 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 8007cb8:	e005      	b.n	8007cc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fae2 	bl	8008284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fae9 	bl	8008298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f003 0310 	and.w	r3, r3, #16
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d020      	beq.n	8007d18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01b      	beq.n	8007d18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0210 	mvn.w	r2, #16
 8007ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2208      	movs	r2, #8
 8007cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7fa fa42 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 8007d04:	e005      	b.n	8007d12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fabc 	bl	8008284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fac3 	bl	8008298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00c      	beq.n	8007d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d007      	beq.n	8007d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f06f 0201 	mvn.w	r2, #1
 8007d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7fa fa00 	bl	800213c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00c      	beq.n	8007d60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 ffce 	bl	8008cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00c      	beq.n	8007d84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d007      	beq.n	8007d84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa94 	bl	80082ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00c      	beq.n	8007da8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d007      	beq.n	8007da8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0220 	mvn.w	r2, #32
 8007da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 ffa0 	bl	8008ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d101      	bne.n	8007dce <HAL_TIM_IC_ConfigChannel+0x1e>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	e088      	b.n	8007ee0 <HAL_TIM_IC_ConfigChannel+0x130>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d11b      	bne.n	8007e14 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007dec:	f000 fcc4 	bl	8008778 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 020c 	bic.w	r2, r2, #12
 8007dfe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6999      	ldr	r1, [r3, #24]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	619a      	str	r2, [r3, #24]
 8007e12:	e060      	b.n	8007ed6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d11c      	bne.n	8007e54 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007e2a:	f000 fd48 	bl	80088be <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	699a      	ldr	r2, [r3, #24]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e3c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6999      	ldr	r1, [r3, #24]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	021a      	lsls	r2, r3, #8
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	619a      	str	r2, [r3, #24]
 8007e52:	e040      	b.n	8007ed6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b08      	cmp	r3, #8
 8007e58:	d11b      	bne.n	8007e92 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007e6a:	f000 fd95 	bl	8008998 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69da      	ldr	r2, [r3, #28]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 020c 	bic.w	r2, r2, #12
 8007e7c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69d9      	ldr	r1, [r3, #28]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	61da      	str	r2, [r3, #28]
 8007e90:	e021      	b.n	8007ed6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b0c      	cmp	r3, #12
 8007e96:	d11c      	bne.n	8007ed2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007ea8:	f000 fdb2 	bl	8008a10 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69da      	ldr	r2, [r3, #28]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007eba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69d9      	ldr	r1, [r3, #28]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	021a      	lsls	r2, r3, #8
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	61da      	str	r2, [r3, #28]
 8007ed0:	e001      	b.n	8007ed6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d101      	bne.n	8007f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f02:	2302      	movs	r3, #2
 8007f04:	e0ae      	b.n	8008064 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b0c      	cmp	r3, #12
 8007f12:	f200 809f 	bhi.w	8008054 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f16:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08007f51 	.word	0x08007f51
 8007f20:	08008055 	.word	0x08008055
 8007f24:	08008055 	.word	0x08008055
 8007f28:	08008055 	.word	0x08008055
 8007f2c:	08007f91 	.word	0x08007f91
 8007f30:	08008055 	.word	0x08008055
 8007f34:	08008055 	.word	0x08008055
 8007f38:	08008055 	.word	0x08008055
 8007f3c:	08007fd3 	.word	0x08007fd3
 8007f40:	08008055 	.word	0x08008055
 8007f44:	08008055 	.word	0x08008055
 8007f48:	08008055 	.word	0x08008055
 8007f4c:	08008013 	.word	0x08008013
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fa5e 	bl	8008418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0208 	orr.w	r2, r2, #8
 8007f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	699a      	ldr	r2, [r3, #24]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0204 	bic.w	r2, r2, #4
 8007f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6999      	ldr	r1, [r3, #24]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	691a      	ldr	r2, [r3, #16]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	619a      	str	r2, [r3, #24]
      break;
 8007f8e:	e064      	b.n	800805a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68b9      	ldr	r1, [r7, #8]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 faae 	bl	80084f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699a      	ldr	r2, [r3, #24]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6999      	ldr	r1, [r3, #24]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	021a      	lsls	r2, r3, #8
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	619a      	str	r2, [r3, #24]
      break;
 8007fd0:	e043      	b.n	800805a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fb03 	bl	80085e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69da      	ldr	r2, [r3, #28]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f042 0208 	orr.w	r2, r2, #8
 8007fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	69da      	ldr	r2, [r3, #28]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0204 	bic.w	r2, r2, #4
 8007ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69d9      	ldr	r1, [r3, #28]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	691a      	ldr	r2, [r3, #16]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	61da      	str	r2, [r3, #28]
      break;
 8008010:	e023      	b.n	800805a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68b9      	ldr	r1, [r7, #8]
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fb57 	bl	80086cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69da      	ldr	r2, [r3, #28]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800802c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69da      	ldr	r2, [r3, #28]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800803c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69d9      	ldr	r1, [r3, #28]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	021a      	lsls	r2, r3, #8
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	61da      	str	r2, [r3, #28]
      break;
 8008052:	e002      	b.n	800805a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	75fb      	strb	r3, [r7, #23]
      break;
 8008058:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008062:	7dfb      	ldrb	r3, [r7, #23]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008080:	2b01      	cmp	r3, #1
 8008082:	d101      	bne.n	8008088 <HAL_TIM_ConfigClockSource+0x1c>
 8008084:	2302      	movs	r3, #2
 8008086:	e0b4      	b.n	80081f2 <HAL_TIM_ConfigClockSource+0x186>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c0:	d03e      	beq.n	8008140 <HAL_TIM_ConfigClockSource+0xd4>
 80080c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c6:	f200 8087 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x16c>
 80080ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ce:	f000 8086 	beq.w	80081de <HAL_TIM_ConfigClockSource+0x172>
 80080d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d6:	d87f      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x16c>
 80080d8:	2b70      	cmp	r3, #112	; 0x70
 80080da:	d01a      	beq.n	8008112 <HAL_TIM_ConfigClockSource+0xa6>
 80080dc:	2b70      	cmp	r3, #112	; 0x70
 80080de:	d87b      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x16c>
 80080e0:	2b60      	cmp	r3, #96	; 0x60
 80080e2:	d050      	beq.n	8008186 <HAL_TIM_ConfigClockSource+0x11a>
 80080e4:	2b60      	cmp	r3, #96	; 0x60
 80080e6:	d877      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x16c>
 80080e8:	2b50      	cmp	r3, #80	; 0x50
 80080ea:	d03c      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0xfa>
 80080ec:	2b50      	cmp	r3, #80	; 0x50
 80080ee:	d873      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x16c>
 80080f0:	2b40      	cmp	r3, #64	; 0x40
 80080f2:	d058      	beq.n	80081a6 <HAL_TIM_ConfigClockSource+0x13a>
 80080f4:	2b40      	cmp	r3, #64	; 0x40
 80080f6:	d86f      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x16c>
 80080f8:	2b30      	cmp	r3, #48	; 0x30
 80080fa:	d064      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x15a>
 80080fc:	2b30      	cmp	r3, #48	; 0x30
 80080fe:	d86b      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x16c>
 8008100:	2b20      	cmp	r3, #32
 8008102:	d060      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x15a>
 8008104:	2b20      	cmp	r3, #32
 8008106:	d867      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x16c>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d05c      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x15a>
 800810c:	2b10      	cmp	r3, #16
 800810e:	d05a      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x15a>
 8008110:	e062      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008122:	f000 fccd 	bl	8008ac0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008134:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	609a      	str	r2, [r3, #8]
      break;
 800813e:	e04f      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008150:	f000 fcb6 	bl	8008ac0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008162:	609a      	str	r2, [r3, #8]
      break;
 8008164:	e03c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008172:	461a      	mov	r2, r3
 8008174:	f000 fb74 	bl	8008860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2150      	movs	r1, #80	; 0x50
 800817e:	4618      	mov	r0, r3
 8008180:	f000 fc83 	bl	8008a8a <TIM_ITRx_SetConfig>
      break;
 8008184:	e02c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008192:	461a      	mov	r2, r3
 8008194:	f000 fbd0 	bl	8008938 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2160      	movs	r1, #96	; 0x60
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fc73 	bl	8008a8a <TIM_ITRx_SetConfig>
      break;
 80081a4:	e01c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081b2:	461a      	mov	r2, r3
 80081b4:	f000 fb54 	bl	8008860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2140      	movs	r1, #64	; 0x40
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fc63 	bl	8008a8a <TIM_ITRx_SetConfig>
      break;
 80081c4:	e00c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4619      	mov	r1, r3
 80081d0:	4610      	mov	r0, r2
 80081d2:	f000 fc5a 	bl	8008a8a <TIM_ITRx_SetConfig>
      break;
 80081d6:	e003      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
      break;
 80081dc:	e000      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b0c      	cmp	r3, #12
 800820e:	d831      	bhi.n	8008274 <HAL_TIM_ReadCapturedValue+0x78>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	0800824d 	.word	0x0800824d
 800821c:	08008275 	.word	0x08008275
 8008220:	08008275 	.word	0x08008275
 8008224:	08008275 	.word	0x08008275
 8008228:	08008257 	.word	0x08008257
 800822c:	08008275 	.word	0x08008275
 8008230:	08008275 	.word	0x08008275
 8008234:	08008275 	.word	0x08008275
 8008238:	08008261 	.word	0x08008261
 800823c:	08008275 	.word	0x08008275
 8008240:	08008275 	.word	0x08008275
 8008244:	08008275 	.word	0x08008275
 8008248:	0800826b 	.word	0x0800826b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008252:	60fb      	str	r3, [r7, #12]

      break;
 8008254:	e00f      	b.n	8008276 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	60fb      	str	r3, [r7, #12]

      break;
 800825e:	e00a      	b.n	8008276 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008266:	60fb      	str	r3, [r7, #12]

      break;
 8008268:	e005      	b.n	8008276 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	60fb      	str	r3, [r7, #12]

      break;
 8008272:	e000      	b.n	8008276 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008274:	bf00      	nop
  }

  return tmpreg;
 8008276:	68fb      	ldr	r3, [r7, #12]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3714      	adds	r7, #20
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a46      	ldr	r2, [pc, #280]	; (80083ec <TIM_Base_SetConfig+0x12c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d013      	beq.n	8008300 <TIM_Base_SetConfig+0x40>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082de:	d00f      	beq.n	8008300 <TIM_Base_SetConfig+0x40>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a43      	ldr	r2, [pc, #268]	; (80083f0 <TIM_Base_SetConfig+0x130>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00b      	beq.n	8008300 <TIM_Base_SetConfig+0x40>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a42      	ldr	r2, [pc, #264]	; (80083f4 <TIM_Base_SetConfig+0x134>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d007      	beq.n	8008300 <TIM_Base_SetConfig+0x40>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a41      	ldr	r2, [pc, #260]	; (80083f8 <TIM_Base_SetConfig+0x138>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_Base_SetConfig+0x40>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a40      	ldr	r2, [pc, #256]	; (80083fc <TIM_Base_SetConfig+0x13c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d108      	bne.n	8008312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a35      	ldr	r2, [pc, #212]	; (80083ec <TIM_Base_SetConfig+0x12c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d02b      	beq.n	8008372 <TIM_Base_SetConfig+0xb2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008320:	d027      	beq.n	8008372 <TIM_Base_SetConfig+0xb2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a32      	ldr	r2, [pc, #200]	; (80083f0 <TIM_Base_SetConfig+0x130>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d023      	beq.n	8008372 <TIM_Base_SetConfig+0xb2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a31      	ldr	r2, [pc, #196]	; (80083f4 <TIM_Base_SetConfig+0x134>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d01f      	beq.n	8008372 <TIM_Base_SetConfig+0xb2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a30      	ldr	r2, [pc, #192]	; (80083f8 <TIM_Base_SetConfig+0x138>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d01b      	beq.n	8008372 <TIM_Base_SetConfig+0xb2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a2f      	ldr	r2, [pc, #188]	; (80083fc <TIM_Base_SetConfig+0x13c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d017      	beq.n	8008372 <TIM_Base_SetConfig+0xb2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a2e      	ldr	r2, [pc, #184]	; (8008400 <TIM_Base_SetConfig+0x140>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d013      	beq.n	8008372 <TIM_Base_SetConfig+0xb2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a2d      	ldr	r2, [pc, #180]	; (8008404 <TIM_Base_SetConfig+0x144>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00f      	beq.n	8008372 <TIM_Base_SetConfig+0xb2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a2c      	ldr	r2, [pc, #176]	; (8008408 <TIM_Base_SetConfig+0x148>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00b      	beq.n	8008372 <TIM_Base_SetConfig+0xb2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a2b      	ldr	r2, [pc, #172]	; (800840c <TIM_Base_SetConfig+0x14c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d007      	beq.n	8008372 <TIM_Base_SetConfig+0xb2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a2a      	ldr	r2, [pc, #168]	; (8008410 <TIM_Base_SetConfig+0x150>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d003      	beq.n	8008372 <TIM_Base_SetConfig+0xb2>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a29      	ldr	r2, [pc, #164]	; (8008414 <TIM_Base_SetConfig+0x154>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d108      	bne.n	8008384 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	4313      	orrs	r3, r2
 8008382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a10      	ldr	r2, [pc, #64]	; (80083ec <TIM_Base_SetConfig+0x12c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d003      	beq.n	80083b8 <TIM_Base_SetConfig+0xf8>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a12      	ldr	r2, [pc, #72]	; (80083fc <TIM_Base_SetConfig+0x13c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d103      	bne.n	80083c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	691a      	ldr	r2, [r3, #16]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d105      	bne.n	80083de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f023 0201 	bic.w	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	611a      	str	r2, [r3, #16]
  }
}
 80083de:	bf00      	nop
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40010000 	.word	0x40010000
 80083f0:	40000400 	.word	0x40000400
 80083f4:	40000800 	.word	0x40000800
 80083f8:	40000c00 	.word	0x40000c00
 80083fc:	40010400 	.word	0x40010400
 8008400:	40014000 	.word	0x40014000
 8008404:	40014400 	.word	0x40014400
 8008408:	40014800 	.word	0x40014800
 800840c:	40001800 	.word	0x40001800
 8008410:	40001c00 	.word	0x40001c00
 8008414:	40002000 	.word	0x40002000

08008418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	f023 0201 	bic.w	r2, r3, #1
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0303 	bic.w	r3, r3, #3
 800844e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f023 0302 	bic.w	r3, r3, #2
 8008460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a20      	ldr	r2, [pc, #128]	; (80084f0 <TIM_OC1_SetConfig+0xd8>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d003      	beq.n	800847c <TIM_OC1_SetConfig+0x64>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a1f      	ldr	r2, [pc, #124]	; (80084f4 <TIM_OC1_SetConfig+0xdc>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d10c      	bne.n	8008496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f023 0308 	bic.w	r3, r3, #8
 8008482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f023 0304 	bic.w	r3, r3, #4
 8008494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a15      	ldr	r2, [pc, #84]	; (80084f0 <TIM_OC1_SetConfig+0xd8>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d003      	beq.n	80084a6 <TIM_OC1_SetConfig+0x8e>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a14      	ldr	r2, [pc, #80]	; (80084f4 <TIM_OC1_SetConfig+0xdc>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d111      	bne.n	80084ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	4313      	orrs	r3, r2
 80084be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	621a      	str	r2, [r3, #32]
}
 80084e4:	bf00      	nop
 80084e6:	371c      	adds	r7, #28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	40010000 	.word	0x40010000
 80084f4:	40010400 	.word	0x40010400

080084f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	f023 0210 	bic.w	r2, r3, #16
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800852e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	021b      	lsls	r3, r3, #8
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4313      	orrs	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f023 0320 	bic.w	r3, r3, #32
 8008542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	011b      	lsls	r3, r3, #4
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a22      	ldr	r2, [pc, #136]	; (80085dc <TIM_OC2_SetConfig+0xe4>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d003      	beq.n	8008560 <TIM_OC2_SetConfig+0x68>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a21      	ldr	r2, [pc, #132]	; (80085e0 <TIM_OC2_SetConfig+0xe8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10d      	bne.n	800857c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4313      	orrs	r3, r2
 8008572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800857a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a17      	ldr	r2, [pc, #92]	; (80085dc <TIM_OC2_SetConfig+0xe4>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d003      	beq.n	800858c <TIM_OC2_SetConfig+0x94>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a16      	ldr	r2, [pc, #88]	; (80085e0 <TIM_OC2_SetConfig+0xe8>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d113      	bne.n	80085b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800859a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	621a      	str	r2, [r3, #32]
}
 80085ce:	bf00      	nop
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	40010000 	.word	0x40010000
 80085e0:	40010400 	.word	0x40010400

080085e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0303 	bic.w	r3, r3, #3
 800861a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800862c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	021b      	lsls	r3, r3, #8
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a21      	ldr	r2, [pc, #132]	; (80086c4 <TIM_OC3_SetConfig+0xe0>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d003      	beq.n	800864a <TIM_OC3_SetConfig+0x66>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a20      	ldr	r2, [pc, #128]	; (80086c8 <TIM_OC3_SetConfig+0xe4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d10d      	bne.n	8008666 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	021b      	lsls	r3, r3, #8
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a16      	ldr	r2, [pc, #88]	; (80086c4 <TIM_OC3_SetConfig+0xe0>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d003      	beq.n	8008676 <TIM_OC3_SetConfig+0x92>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a15      	ldr	r2, [pc, #84]	; (80086c8 <TIM_OC3_SetConfig+0xe4>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d113      	bne.n	800869e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800867c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	011b      	lsls	r3, r3, #4
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	4313      	orrs	r3, r2
 8008690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	011b      	lsls	r3, r3, #4
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	4313      	orrs	r3, r2
 800869c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	621a      	str	r2, [r3, #32]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	40010000 	.word	0x40010000
 80086c8:	40010400 	.word	0x40010400

080086cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	021b      	lsls	r3, r3, #8
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4313      	orrs	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	031b      	lsls	r3, r3, #12
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a12      	ldr	r2, [pc, #72]	; (8008770 <TIM_OC4_SetConfig+0xa4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d003      	beq.n	8008734 <TIM_OC4_SetConfig+0x68>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a11      	ldr	r2, [pc, #68]	; (8008774 <TIM_OC4_SetConfig+0xa8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d109      	bne.n	8008748 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800873a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	019b      	lsls	r3, r3, #6
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	621a      	str	r2, [r3, #32]
}
 8008762:	bf00      	nop
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	40010000 	.word	0x40010000
 8008774:	40010400 	.word	0x40010400

08008778 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	f023 0201 	bic.w	r2, r3, #1
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4a28      	ldr	r2, [pc, #160]	; (8008844 <TIM_TI1_SetConfig+0xcc>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d01b      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ac:	d017      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	4a25      	ldr	r2, [pc, #148]	; (8008848 <TIM_TI1_SetConfig+0xd0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d013      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4a24      	ldr	r2, [pc, #144]	; (800884c <TIM_TI1_SetConfig+0xd4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00f      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4a23      	ldr	r2, [pc, #140]	; (8008850 <TIM_TI1_SetConfig+0xd8>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d00b      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4a22      	ldr	r2, [pc, #136]	; (8008854 <TIM_TI1_SetConfig+0xdc>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d007      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	4a21      	ldr	r2, [pc, #132]	; (8008858 <TIM_TI1_SetConfig+0xe0>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d003      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4a20      	ldr	r2, [pc, #128]	; (800885c <TIM_TI1_SetConfig+0xe4>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d101      	bne.n	80087e2 <TIM_TI1_SetConfig+0x6a>
 80087de:	2301      	movs	r3, #1
 80087e0:	e000      	b.n	80087e4 <TIM_TI1_SetConfig+0x6c>
 80087e2:	2300      	movs	r3, #0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d008      	beq.n	80087fa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f023 0303 	bic.w	r3, r3, #3
 80087ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	e003      	b.n	8008802 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f043 0301 	orr.w	r3, r3, #1
 8008800:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	011b      	lsls	r3, r3, #4
 800880e:	b2db      	uxtb	r3, r3
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	4313      	orrs	r3, r2
 8008814:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f023 030a 	bic.w	r3, r3, #10
 800881c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f003 030a 	and.w	r3, r3, #10
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	4313      	orrs	r3, r2
 8008828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	621a      	str	r2, [r3, #32]
}
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	40010000 	.word	0x40010000
 8008848:	40000400 	.word	0x40000400
 800884c:	40000800 	.word	0x40000800
 8008850:	40000c00 	.word	0x40000c00
 8008854:	40010400 	.word	0x40010400
 8008858:	40014000 	.word	0x40014000
 800885c:	40001800 	.word	0x40001800

08008860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	f023 0201 	bic.w	r2, r3, #1
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800888a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	4313      	orrs	r3, r2
 8008894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f023 030a 	bic.w	r3, r3, #10
 800889c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	621a      	str	r2, [r3, #32]
}
 80088b2:	bf00      	nop
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088be:	b480      	push	{r7}
 80088c0:	b087      	sub	sp, #28
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
 80088ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	f023 0210 	bic.w	r2, r3, #16
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	021b      	lsls	r3, r3, #8
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	031b      	lsls	r3, r3, #12
 8008902:	b29b      	uxth	r3, r3
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	4313      	orrs	r3, r2
 8008908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008910:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	4313      	orrs	r3, r2
 800891e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	621a      	str	r2, [r3, #32]
}
 800892c:	bf00      	nop
 800892e:	371c      	adds	r7, #28
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a1b      	ldr	r3, [r3, #32]
 8008948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	f023 0210 	bic.w	r2, r3, #16
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	031b      	lsls	r3, r3, #12
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	4313      	orrs	r3, r2
 800896c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008974:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	011b      	lsls	r3, r3, #4
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	621a      	str	r2, [r3, #32]
}
 800898c:	bf00      	nop
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f023 0303 	bic.w	r3, r3, #3
 80089c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	4313      	orrs	r3, r2
 80089e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80089e8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	621a      	str	r2, [r3, #32]
}
 8008a04:	bf00      	nop
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	031b      	lsls	r3, r3, #12
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008a62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	031b      	lsls	r3, r3, #12
 8008a68:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	621a      	str	r2, [r3, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	371c      	adds	r7, #28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b085      	sub	sp, #20
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	f043 0307 	orr.w	r3, r3, #7
 8008aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	609a      	str	r2, [r3, #8]
}
 8008ab4:	bf00      	nop
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	021a      	lsls	r2, r3, #8
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	609a      	str	r2, [r3, #8]
}
 8008af4:	bf00      	nop
 8008af6:	371c      	adds	r7, #28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f003 031f 	and.w	r3, r3, #31
 8008b12:	2201      	movs	r2, #1
 8008b14:	fa02 f303 	lsl.w	r3, r2, r3
 8008b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a1a      	ldr	r2, [r3, #32]
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	43db      	mvns	r3, r3
 8008b22:	401a      	ands	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a1a      	ldr	r2, [r3, #32]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f003 031f 	and.w	r3, r3, #31
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	fa01 f303 	lsl.w	r3, r1, r3
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	621a      	str	r2, [r3, #32]
}
 8008b3e:	bf00      	nop
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
	...

08008b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d101      	bne.n	8008b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b60:	2302      	movs	r3, #2
 8008b62:	e05a      	b.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a21      	ldr	r2, [pc, #132]	; (8008c28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d022      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb0:	d01d      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a1d      	ldr	r2, [pc, #116]	; (8008c2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d018      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1b      	ldr	r2, [pc, #108]	; (8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d013      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a1a      	ldr	r2, [pc, #104]	; (8008c34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d00e      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a18      	ldr	r2, [pc, #96]	; (8008c38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d009      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a17      	ldr	r2, [pc, #92]	; (8008c3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d004      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a15      	ldr	r2, [pc, #84]	; (8008c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d10c      	bne.n	8008c08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	40010000 	.word	0x40010000
 8008c2c:	40000400 	.word	0x40000400
 8008c30:	40000800 	.word	0x40000800
 8008c34:	40000c00 	.word	0x40000c00
 8008c38:	40010400 	.word	0x40010400
 8008c3c:	40014000 	.word	0x40014000
 8008c40:	40001800 	.word	0x40001800

08008c44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e03d      	b.n	8008cdc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e042      	b.n	8008da8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d106      	bne.n	8008d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7fb fbfc 	bl	8004534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2224      	movs	r2, #36	; 0x24
 8008d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fdbd 	bl	80098d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	695a      	ldr	r2, [r3, #20]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08a      	sub	sp, #40	; 0x28
 8008db4:	af02      	add	r7, sp, #8
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b20      	cmp	r3, #32
 8008dce:	d175      	bne.n	8008ebc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <HAL_UART_Transmit+0x2c>
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e06e      	b.n	8008ebe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2221      	movs	r2, #33	; 0x21
 8008dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dee:	f7fb fdbd 	bl	800496c <HAL_GetTick>
 8008df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	88fa      	ldrh	r2, [r7, #6]
 8008df8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	88fa      	ldrh	r2, [r7, #6]
 8008dfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e08:	d108      	bne.n	8008e1c <HAL_UART_Transmit+0x6c>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d104      	bne.n	8008e1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	61bb      	str	r3, [r7, #24]
 8008e1a:	e003      	b.n	8008e24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e20:	2300      	movs	r3, #0
 8008e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e24:	e02e      	b.n	8008e84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2180      	movs	r1, #128	; 0x80
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 fb1f 	bl	8009474 <UART_WaitOnFlagUntilTimeout>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d005      	beq.n	8008e48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e03a      	b.n	8008ebe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10b      	bne.n	8008e66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	3302      	adds	r3, #2
 8008e62:	61bb      	str	r3, [r7, #24]
 8008e64:	e007      	b.n	8008e76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	3301      	adds	r3, #1
 8008e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1cb      	bne.n	8008e26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2200      	movs	r2, #0
 8008e96:	2140      	movs	r1, #64	; 0x40
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 faeb 	bl	8009474 <UART_WaitOnFlagUntilTimeout>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d005      	beq.n	8008eb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e006      	b.n	8008ebe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e000      	b.n	8008ebe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008ebc:	2302      	movs	r3, #2
  }
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3720      	adds	r7, #32
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b20      	cmp	r3, #32
 8008ede:	d112      	bne.n	8008f06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <HAL_UART_Receive_IT+0x26>
 8008ee6:	88fb      	ldrh	r3, [r7, #6]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e00b      	b.n	8008f08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008ef6:	88fb      	ldrh	r3, [r7, #6]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 fb12 	bl	8009526 <UART_Start_Receive_IT>
 8008f02:	4603      	mov	r3, r0
 8008f04:	e000      	b.n	8008f08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008f06:	2302      	movs	r3, #2
  }
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b0ba      	sub	sp, #232	; 0xe8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f46:	f003 030f 	and.w	r3, r3, #15
 8008f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10f      	bne.n	8008f76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d009      	beq.n	8008f76 <HAL_UART_IRQHandler+0x66>
 8008f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f66:	f003 0320 	and.w	r3, r3, #32
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fbf2 	bl	8009758 <UART_Receive_IT>
      return;
 8008f74:	e25b      	b.n	800942e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 80de 	beq.w	800913c <HAL_UART_IRQHandler+0x22c>
 8008f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d106      	bne.n	8008f9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 80d1 	beq.w	800913c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00b      	beq.n	8008fbe <HAL_UART_IRQHandler+0xae>
 8008fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d005      	beq.n	8008fbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb6:	f043 0201 	orr.w	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc2:	f003 0304 	and.w	r3, r3, #4
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00b      	beq.n	8008fe2 <HAL_UART_IRQHandler+0xd2>
 8008fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fda:	f043 0202 	orr.w	r2, r3, #2
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <HAL_UART_IRQHandler+0xf6>
 8008fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d005      	beq.n	8009006 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffe:	f043 0204 	orr.w	r2, r3, #4
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900a:	f003 0308 	and.w	r3, r3, #8
 800900e:	2b00      	cmp	r3, #0
 8009010:	d011      	beq.n	8009036 <HAL_UART_IRQHandler+0x126>
 8009012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d105      	bne.n	800902a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800901e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d005      	beq.n	8009036 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902e:	f043 0208 	orr.w	r2, r3, #8
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 81f2 	beq.w	8009424 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b00      	cmp	r3, #0
 800904a:	d008      	beq.n	800905e <HAL_UART_IRQHandler+0x14e>
 800904c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009050:	f003 0320 	and.w	r3, r3, #32
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fb7d 	bl	8009758 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009068:	2b40      	cmp	r3, #64	; 0x40
 800906a:	bf0c      	ite	eq
 800906c:	2301      	moveq	r3, #1
 800906e:	2300      	movne	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800907a:	f003 0308 	and.w	r3, r3, #8
 800907e:	2b00      	cmp	r3, #0
 8009080:	d103      	bne.n	800908a <HAL_UART_IRQHandler+0x17a>
 8009082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009086:	2b00      	cmp	r3, #0
 8009088:	d04f      	beq.n	800912a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa85 	bl	800959a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909a:	2b40      	cmp	r3, #64	; 0x40
 800909c:	d141      	bne.n	8009122 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3314      	adds	r3, #20
 80090a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80090b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3314      	adds	r3, #20
 80090c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1d9      	bne.n	800909e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d013      	beq.n	800911a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f6:	4a7e      	ldr	r2, [pc, #504]	; (80092f0 <HAL_UART_IRQHandler+0x3e0>)
 80090f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fc f9b1 	bl	8005466 <HAL_DMA_Abort_IT>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d016      	beq.n	8009138 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009114:	4610      	mov	r0, r2
 8009116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009118:	e00e      	b.n	8009138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f994 	bl	8009448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009120:	e00a      	b.n	8009138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f990 	bl	8009448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009128:	e006      	b.n	8009138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f98c 	bl	8009448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009136:	e175      	b.n	8009424 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009138:	bf00      	nop
    return;
 800913a:	e173      	b.n	8009424 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009140:	2b01      	cmp	r3, #1
 8009142:	f040 814f 	bne.w	80093e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800914a:	f003 0310 	and.w	r3, r3, #16
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 8148 	beq.w	80093e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009158:	f003 0310 	and.w	r3, r3, #16
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 8141 	beq.w	80093e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009162:	2300      	movs	r3, #0
 8009164:	60bb      	str	r3, [r7, #8]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60bb      	str	r3, [r7, #8]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	60bb      	str	r3, [r7, #8]
 8009176:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009182:	2b40      	cmp	r3, #64	; 0x40
 8009184:	f040 80b6 	bne.w	80092f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 8145 	beq.w	8009428 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091a6:	429a      	cmp	r2, r3
 80091a8:	f080 813e 	bcs.w	8009428 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091be:	f000 8088 	beq.w	80092d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	330c      	adds	r3, #12
 80091c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	330c      	adds	r3, #12
 80091ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80091ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1d9      	bne.n	80091c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3314      	adds	r3, #20
 8009214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800921e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009220:	f023 0301 	bic.w	r3, r3, #1
 8009224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3314      	adds	r3, #20
 800922e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009232:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009236:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800923a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e1      	bne.n	800920e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3314      	adds	r3, #20
 8009250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800925a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800925c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3314      	adds	r3, #20
 800926a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800926e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009270:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800927c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e3      	bne.n	800924a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	330c      	adds	r3, #12
 8009296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800929a:	e853 3f00 	ldrex	r3, [r3]
 800929e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092a2:	f023 0310 	bic.w	r3, r3, #16
 80092a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	330c      	adds	r3, #12
 80092b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80092b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80092b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e3      	bne.n	8009290 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fc f85a 	bl	8005386 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2202      	movs	r2, #2
 80092d6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f8b7 	bl	800945c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092ee:	e09b      	b.n	8009428 <HAL_UART_IRQHandler+0x518>
 80092f0:	08009661 	.word	0x08009661
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009308:	b29b      	uxth	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 808e 	beq.w	800942c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 8089 	beq.w	800942c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	330c      	adds	r3, #12
 8009320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800932a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	330c      	adds	r3, #12
 800933a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800933e:	647a      	str	r2, [r7, #68]	; 0x44
 8009340:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800934c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e3      	bne.n	800931a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3314      	adds	r3, #20
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	e853 3f00 	ldrex	r3, [r3]
 8009360:	623b      	str	r3, [r7, #32]
   return(result);
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	f023 0301 	bic.w	r3, r3, #1
 8009368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	3314      	adds	r3, #20
 8009372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009376:	633a      	str	r2, [r7, #48]	; 0x30
 8009378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800937c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800937e:	e841 2300 	strex	r3, r2, [r1]
 8009382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e3      	bne.n	8009352 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	330c      	adds	r3, #12
 800939e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 0310 	bic.w	r3, r3, #16
 80093ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	330c      	adds	r3, #12
 80093b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80093bc:	61fa      	str	r2, [r7, #28]
 80093be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	69b9      	ldr	r1, [r7, #24]
 80093c2:	69fa      	ldr	r2, [r7, #28]
 80093c4:	e841 2300 	strex	r3, r2, [r1]
 80093c8:	617b      	str	r3, [r7, #20]
   return(result);
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e3      	bne.n	8009398 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2202      	movs	r2, #2
 80093d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f83d 	bl	800945c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093e2:	e023      	b.n	800942c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <HAL_UART_IRQHandler+0x4f4>
 80093f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f943 	bl	8009688 <UART_Transmit_IT>
    return;
 8009402:	e014      	b.n	800942e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00e      	beq.n	800942e <HAL_UART_IRQHandler+0x51e>
 8009410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009418:	2b00      	cmp	r3, #0
 800941a:	d008      	beq.n	800942e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f983 	bl	8009728 <UART_EndTransmit_IT>
    return;
 8009422:	e004      	b.n	800942e <HAL_UART_IRQHandler+0x51e>
    return;
 8009424:	bf00      	nop
 8009426:	e002      	b.n	800942e <HAL_UART_IRQHandler+0x51e>
      return;
 8009428:	bf00      	nop
 800942a:	e000      	b.n	800942e <HAL_UART_IRQHandler+0x51e>
      return;
 800942c:	bf00      	nop
  }
}
 800942e:	37e8      	adds	r7, #232	; 0xe8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	4613      	mov	r3, r2
 8009482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009484:	e03b      	b.n	80094fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948c:	d037      	beq.n	80094fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800948e:	f7fb fa6d 	bl	800496c <HAL_GetTick>
 8009492:	4602      	mov	r2, r0
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	6a3a      	ldr	r2, [r7, #32]
 800949a:	429a      	cmp	r2, r3
 800949c:	d302      	bcc.n	80094a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e03a      	b.n	800951e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f003 0304 	and.w	r3, r3, #4
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d023      	beq.n	80094fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b80      	cmp	r3, #128	; 0x80
 80094ba:	d020      	beq.n	80094fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b40      	cmp	r3, #64	; 0x40
 80094c0:	d01d      	beq.n	80094fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0308 	and.w	r3, r3, #8
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	d116      	bne.n	80094fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	617b      	str	r3, [r7, #20]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	617b      	str	r3, [r7, #20]
 80094e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 f857 	bl	800959a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2208      	movs	r2, #8
 80094f0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e00f      	b.n	800951e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	4013      	ands	r3, r2
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	429a      	cmp	r2, r3
 800950c:	bf0c      	ite	eq
 800950e:	2301      	moveq	r3, #1
 8009510:	2300      	movne	r3, #0
 8009512:	b2db      	uxtb	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	429a      	cmp	r2, r3
 800951a:	d0b4      	beq.n	8009486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	4613      	mov	r3, r2
 8009532:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	88fa      	ldrh	r2, [r7, #6]
 800953e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	88fa      	ldrh	r2, [r7, #6]
 8009544:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2222      	movs	r2, #34	; 0x22
 8009550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d007      	beq.n	800956c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800956a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695a      	ldr	r2, [r3, #20]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f042 0201 	orr.w	r2, r2, #1
 800957a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68da      	ldr	r2, [r3, #12]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f042 0220 	orr.w	r2, r2, #32
 800958a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800959a:	b480      	push	{r7}
 800959c:	b095      	sub	sp, #84	; 0x54
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	330c      	adds	r3, #12
 80095a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ac:	e853 3f00 	ldrex	r3, [r3]
 80095b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	330c      	adds	r3, #12
 80095c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095c2:	643a      	str	r2, [r7, #64]	; 0x40
 80095c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e5      	bne.n	80095a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3314      	adds	r3, #20
 80095dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	f023 0301 	bic.w	r3, r3, #1
 80095ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3314      	adds	r3, #20
 80095f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e5      	bne.n	80095d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960e:	2b01      	cmp	r3, #1
 8009610:	d119      	bne.n	8009646 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	330c      	adds	r3, #12
 8009618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	e853 3f00 	ldrex	r3, [r3]
 8009620:	60bb      	str	r3, [r7, #8]
   return(result);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f023 0310 	bic.w	r3, r3, #16
 8009628:	647b      	str	r3, [r7, #68]	; 0x44
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	330c      	adds	r3, #12
 8009630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009632:	61ba      	str	r2, [r7, #24]
 8009634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009636:	6979      	ldr	r1, [r7, #20]
 8009638:	69ba      	ldr	r2, [r7, #24]
 800963a:	e841 2300 	strex	r3, r2, [r1]
 800963e:	613b      	str	r3, [r7, #16]
   return(result);
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e5      	bne.n	8009612 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2220      	movs	r2, #32
 800964a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009654:	bf00      	nop
 8009656:	3754      	adds	r7, #84	; 0x54
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f7ff fee4 	bl	8009448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009680:	bf00      	nop
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b21      	cmp	r3, #33	; 0x21
 800969a:	d13e      	bne.n	800971a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a4:	d114      	bne.n	80096d0 <UART_Transmit_IT+0x48>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d110      	bne.n	80096d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	461a      	mov	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a1b      	ldr	r3, [r3, #32]
 80096c8:	1c9a      	adds	r2, r3, #2
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	621a      	str	r2, [r3, #32]
 80096ce:	e008      	b.n	80096e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	1c59      	adds	r1, r3, #1
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	6211      	str	r1, [r2, #32]
 80096da:	781a      	ldrb	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	3b01      	subs	r3, #1
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	4619      	mov	r1, r3
 80096f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10f      	bne.n	8009716 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68da      	ldr	r2, [r3, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009704:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009714:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	e000      	b.n	800971c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800971a:	2302      	movs	r3, #2
  }
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68da      	ldr	r2, [r3, #12]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800973e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2220      	movs	r2, #32
 8009744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7ff fe73 	bl	8009434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b08c      	sub	sp, #48	; 0x30
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b22      	cmp	r3, #34	; 0x22
 800976a:	f040 80ae 	bne.w	80098ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009776:	d117      	bne.n	80097a8 <UART_Receive_IT+0x50>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d113      	bne.n	80097a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009780:	2300      	movs	r3, #0
 8009782:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	b29b      	uxth	r3, r3
 8009792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009796:	b29a      	uxth	r2, r3
 8009798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	1c9a      	adds	r2, r3, #2
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	629a      	str	r2, [r3, #40]	; 0x28
 80097a6:	e026      	b.n	80097f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80097ae:	2300      	movs	r3, #0
 80097b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ba:	d007      	beq.n	80097cc <UART_Receive_IT+0x74>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10a      	bne.n	80097da <UART_Receive_IT+0x82>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d106      	bne.n	80097da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	e008      	b.n	80097ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	3b01      	subs	r3, #1
 80097fe:	b29b      	uxth	r3, r3
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	4619      	mov	r1, r3
 8009804:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009806:	2b00      	cmp	r3, #0
 8009808:	d15d      	bne.n	80098c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68da      	ldr	r2, [r3, #12]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0220 	bic.w	r2, r2, #32
 8009818:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009828:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	695a      	ldr	r2, [r3, #20]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0201 	bic.w	r2, r2, #1
 8009838:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984c:	2b01      	cmp	r3, #1
 800984e:	d135      	bne.n	80098bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	330c      	adds	r3, #12
 800985c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	e853 3f00 	ldrex	r3, [r3]
 8009864:	613b      	str	r3, [r7, #16]
   return(result);
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f023 0310 	bic.w	r3, r3, #16
 800986c:	627b      	str	r3, [r7, #36]	; 0x24
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	330c      	adds	r3, #12
 8009874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009876:	623a      	str	r2, [r7, #32]
 8009878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987a:	69f9      	ldr	r1, [r7, #28]
 800987c:	6a3a      	ldr	r2, [r7, #32]
 800987e:	e841 2300 	strex	r3, r2, [r1]
 8009882:	61bb      	str	r3, [r7, #24]
   return(result);
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e5      	bne.n	8009856 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0310 	and.w	r3, r3, #16
 8009894:	2b10      	cmp	r3, #16
 8009896:	d10a      	bne.n	80098ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7ff fdd1 	bl	800945c <HAL_UARTEx_RxEventCallback>
 80098ba:	e002      	b.n	80098c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7f8 fc0f 	bl	80020e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	e002      	b.n	80098cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	e000      	b.n	80098cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80098ca:	2302      	movs	r3, #2
  }
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3730      	adds	r7, #48	; 0x30
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098d8:	b0c0      	sub	sp, #256	; 0x100
 80098da:	af00      	add	r7, sp, #0
 80098dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80098ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f0:	68d9      	ldr	r1, [r3, #12]
 80098f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	ea40 0301 	orr.w	r3, r0, r1
 80098fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009902:	689a      	ldr	r2, [r3, #8]
 8009904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	431a      	orrs	r2, r3
 800990c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	431a      	orrs	r2, r3
 8009914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	4313      	orrs	r3, r2
 800991c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800992c:	f021 010c 	bic.w	r1, r1, #12
 8009930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800993a:	430b      	orrs	r3, r1
 800993c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800993e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800994a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800994e:	6999      	ldr	r1, [r3, #24]
 8009950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	ea40 0301 	orr.w	r3, r0, r1
 800995a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800995c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4b8f      	ldr	r3, [pc, #572]	; (8009ba0 <UART_SetConfig+0x2cc>)
 8009964:	429a      	cmp	r2, r3
 8009966:	d005      	beq.n	8009974 <UART_SetConfig+0xa0>
 8009968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	4b8d      	ldr	r3, [pc, #564]	; (8009ba4 <UART_SetConfig+0x2d0>)
 8009970:	429a      	cmp	r2, r3
 8009972:	d104      	bne.n	800997e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009974:	f7fd fbf8 	bl	8007168 <HAL_RCC_GetPCLK2Freq>
 8009978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800997c:	e003      	b.n	8009986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800997e:	f7fd fbdf 	bl	8007140 <HAL_RCC_GetPCLK1Freq>
 8009982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009990:	f040 810c 	bne.w	8009bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009998:	2200      	movs	r2, #0
 800999a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800999e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80099a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80099a6:	4622      	mov	r2, r4
 80099a8:	462b      	mov	r3, r5
 80099aa:	1891      	adds	r1, r2, r2
 80099ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80099ae:	415b      	adcs	r3, r3
 80099b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80099b6:	4621      	mov	r1, r4
 80099b8:	eb12 0801 	adds.w	r8, r2, r1
 80099bc:	4629      	mov	r1, r5
 80099be:	eb43 0901 	adc.w	r9, r3, r1
 80099c2:	f04f 0200 	mov.w	r2, #0
 80099c6:	f04f 0300 	mov.w	r3, #0
 80099ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099d6:	4690      	mov	r8, r2
 80099d8:	4699      	mov	r9, r3
 80099da:	4623      	mov	r3, r4
 80099dc:	eb18 0303 	adds.w	r3, r8, r3
 80099e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099e4:	462b      	mov	r3, r5
 80099e6:	eb49 0303 	adc.w	r3, r9, r3
 80099ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80099fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009a02:	460b      	mov	r3, r1
 8009a04:	18db      	adds	r3, r3, r3
 8009a06:	653b      	str	r3, [r7, #80]	; 0x50
 8009a08:	4613      	mov	r3, r2
 8009a0a:	eb42 0303 	adc.w	r3, r2, r3
 8009a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8009a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009a18:	f7f7 f936 	bl	8000c88 <__aeabi_uldivmod>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4b61      	ldr	r3, [pc, #388]	; (8009ba8 <UART_SetConfig+0x2d4>)
 8009a22:	fba3 2302 	umull	r2, r3, r3, r2
 8009a26:	095b      	lsrs	r3, r3, #5
 8009a28:	011c      	lsls	r4, r3, #4
 8009a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009a3c:	4642      	mov	r2, r8
 8009a3e:	464b      	mov	r3, r9
 8009a40:	1891      	adds	r1, r2, r2
 8009a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8009a44:	415b      	adcs	r3, r3
 8009a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009a4c:	4641      	mov	r1, r8
 8009a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8009a52:	4649      	mov	r1, r9
 8009a54:	eb43 0b01 	adc.w	fp, r3, r1
 8009a58:	f04f 0200 	mov.w	r2, #0
 8009a5c:	f04f 0300 	mov.w	r3, #0
 8009a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a6c:	4692      	mov	sl, r2
 8009a6e:	469b      	mov	fp, r3
 8009a70:	4643      	mov	r3, r8
 8009a72:	eb1a 0303 	adds.w	r3, sl, r3
 8009a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a7a:	464b      	mov	r3, r9
 8009a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8009a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	18db      	adds	r3, r3, r3
 8009a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	eb42 0303 	adc.w	r3, r2, r3
 8009aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8009aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009aae:	f7f7 f8eb 	bl	8000c88 <__aeabi_uldivmod>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	4b3b      	ldr	r3, [pc, #236]	; (8009ba8 <UART_SetConfig+0x2d4>)
 8009aba:	fba3 2301 	umull	r2, r3, r3, r1
 8009abe:	095b      	lsrs	r3, r3, #5
 8009ac0:	2264      	movs	r2, #100	; 0x64
 8009ac2:	fb02 f303 	mul.w	r3, r2, r3
 8009ac6:	1acb      	subs	r3, r1, r3
 8009ac8:	00db      	lsls	r3, r3, #3
 8009aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009ace:	4b36      	ldr	r3, [pc, #216]	; (8009ba8 <UART_SetConfig+0x2d4>)
 8009ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8009ad4:	095b      	lsrs	r3, r3, #5
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009adc:	441c      	add	r4, r3
 8009ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009af0:	4642      	mov	r2, r8
 8009af2:	464b      	mov	r3, r9
 8009af4:	1891      	adds	r1, r2, r2
 8009af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8009af8:	415b      	adcs	r3, r3
 8009afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b00:	4641      	mov	r1, r8
 8009b02:	1851      	adds	r1, r2, r1
 8009b04:	6339      	str	r1, [r7, #48]	; 0x30
 8009b06:	4649      	mov	r1, r9
 8009b08:	414b      	adcs	r3, r1
 8009b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b0c:	f04f 0200 	mov.w	r2, #0
 8009b10:	f04f 0300 	mov.w	r3, #0
 8009b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009b18:	4659      	mov	r1, fp
 8009b1a:	00cb      	lsls	r3, r1, #3
 8009b1c:	4651      	mov	r1, sl
 8009b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b22:	4651      	mov	r1, sl
 8009b24:	00ca      	lsls	r2, r1, #3
 8009b26:	4610      	mov	r0, r2
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	4642      	mov	r2, r8
 8009b2e:	189b      	adds	r3, r3, r2
 8009b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b34:	464b      	mov	r3, r9
 8009b36:	460a      	mov	r2, r1
 8009b38:	eb42 0303 	adc.w	r3, r2, r3
 8009b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009b54:	460b      	mov	r3, r1
 8009b56:	18db      	adds	r3, r3, r3
 8009b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	eb42 0303 	adc.w	r3, r2, r3
 8009b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009b6a:	f7f7 f88d 	bl	8000c88 <__aeabi_uldivmod>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4b0d      	ldr	r3, [pc, #52]	; (8009ba8 <UART_SetConfig+0x2d4>)
 8009b74:	fba3 1302 	umull	r1, r3, r3, r2
 8009b78:	095b      	lsrs	r3, r3, #5
 8009b7a:	2164      	movs	r1, #100	; 0x64
 8009b7c:	fb01 f303 	mul.w	r3, r1, r3
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	00db      	lsls	r3, r3, #3
 8009b84:	3332      	adds	r3, #50	; 0x32
 8009b86:	4a08      	ldr	r2, [pc, #32]	; (8009ba8 <UART_SetConfig+0x2d4>)
 8009b88:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8c:	095b      	lsrs	r3, r3, #5
 8009b8e:	f003 0207 	and.w	r2, r3, #7
 8009b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4422      	add	r2, r4
 8009b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b9c:	e106      	b.n	8009dac <UART_SetConfig+0x4d8>
 8009b9e:	bf00      	nop
 8009ba0:	40011000 	.word	0x40011000
 8009ba4:	40011400 	.word	0x40011400
 8009ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009bbe:	4642      	mov	r2, r8
 8009bc0:	464b      	mov	r3, r9
 8009bc2:	1891      	adds	r1, r2, r2
 8009bc4:	6239      	str	r1, [r7, #32]
 8009bc6:	415b      	adcs	r3, r3
 8009bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009bce:	4641      	mov	r1, r8
 8009bd0:	1854      	adds	r4, r2, r1
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	eb43 0501 	adc.w	r5, r3, r1
 8009bd8:	f04f 0200 	mov.w	r2, #0
 8009bdc:	f04f 0300 	mov.w	r3, #0
 8009be0:	00eb      	lsls	r3, r5, #3
 8009be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009be6:	00e2      	lsls	r2, r4, #3
 8009be8:	4614      	mov	r4, r2
 8009bea:	461d      	mov	r5, r3
 8009bec:	4643      	mov	r3, r8
 8009bee:	18e3      	adds	r3, r4, r3
 8009bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009bf4:	464b      	mov	r3, r9
 8009bf6:	eb45 0303 	adc.w	r3, r5, r3
 8009bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c0e:	f04f 0200 	mov.w	r2, #0
 8009c12:	f04f 0300 	mov.w	r3, #0
 8009c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	008b      	lsls	r3, r1, #2
 8009c1e:	4621      	mov	r1, r4
 8009c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c24:	4621      	mov	r1, r4
 8009c26:	008a      	lsls	r2, r1, #2
 8009c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009c2c:	f7f7 f82c 	bl	8000c88 <__aeabi_uldivmod>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	4b60      	ldr	r3, [pc, #384]	; (8009db8 <UART_SetConfig+0x4e4>)
 8009c36:	fba3 2302 	umull	r2, r3, r3, r2
 8009c3a:	095b      	lsrs	r3, r3, #5
 8009c3c:	011c      	lsls	r4, r3, #4
 8009c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009c50:	4642      	mov	r2, r8
 8009c52:	464b      	mov	r3, r9
 8009c54:	1891      	adds	r1, r2, r2
 8009c56:	61b9      	str	r1, [r7, #24]
 8009c58:	415b      	adcs	r3, r3
 8009c5a:	61fb      	str	r3, [r7, #28]
 8009c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c60:	4641      	mov	r1, r8
 8009c62:	1851      	adds	r1, r2, r1
 8009c64:	6139      	str	r1, [r7, #16]
 8009c66:	4649      	mov	r1, r9
 8009c68:	414b      	adcs	r3, r1
 8009c6a:	617b      	str	r3, [r7, #20]
 8009c6c:	f04f 0200 	mov.w	r2, #0
 8009c70:	f04f 0300 	mov.w	r3, #0
 8009c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c78:	4659      	mov	r1, fp
 8009c7a:	00cb      	lsls	r3, r1, #3
 8009c7c:	4651      	mov	r1, sl
 8009c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c82:	4651      	mov	r1, sl
 8009c84:	00ca      	lsls	r2, r1, #3
 8009c86:	4610      	mov	r0, r2
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	4642      	mov	r2, r8
 8009c8e:	189b      	adds	r3, r3, r2
 8009c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c94:	464b      	mov	r3, r9
 8009c96:	460a      	mov	r2, r1
 8009c98:	eb42 0303 	adc.w	r3, r2, r3
 8009c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009cac:	f04f 0200 	mov.w	r2, #0
 8009cb0:	f04f 0300 	mov.w	r3, #0
 8009cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009cb8:	4649      	mov	r1, r9
 8009cba:	008b      	lsls	r3, r1, #2
 8009cbc:	4641      	mov	r1, r8
 8009cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cc2:	4641      	mov	r1, r8
 8009cc4:	008a      	lsls	r2, r1, #2
 8009cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009cca:	f7f6 ffdd 	bl	8000c88 <__aeabi_uldivmod>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	4b38      	ldr	r3, [pc, #224]	; (8009db8 <UART_SetConfig+0x4e4>)
 8009cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8009cda:	095b      	lsrs	r3, r3, #5
 8009cdc:	2264      	movs	r2, #100	; 0x64
 8009cde:	fb02 f303 	mul.w	r3, r2, r3
 8009ce2:	1acb      	subs	r3, r1, r3
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	3332      	adds	r3, #50	; 0x32
 8009ce8:	4a33      	ldr	r2, [pc, #204]	; (8009db8 <UART_SetConfig+0x4e4>)
 8009cea:	fba2 2303 	umull	r2, r3, r2, r3
 8009cee:	095b      	lsrs	r3, r3, #5
 8009cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cf4:	441c      	add	r4, r3
 8009cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	673b      	str	r3, [r7, #112]	; 0x70
 8009cfe:	677a      	str	r2, [r7, #116]	; 0x74
 8009d00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009d04:	4642      	mov	r2, r8
 8009d06:	464b      	mov	r3, r9
 8009d08:	1891      	adds	r1, r2, r2
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	415b      	adcs	r3, r3
 8009d0e:	60fb      	str	r3, [r7, #12]
 8009d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d14:	4641      	mov	r1, r8
 8009d16:	1851      	adds	r1, r2, r1
 8009d18:	6039      	str	r1, [r7, #0]
 8009d1a:	4649      	mov	r1, r9
 8009d1c:	414b      	adcs	r3, r1
 8009d1e:	607b      	str	r3, [r7, #4]
 8009d20:	f04f 0200 	mov.w	r2, #0
 8009d24:	f04f 0300 	mov.w	r3, #0
 8009d28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d2c:	4659      	mov	r1, fp
 8009d2e:	00cb      	lsls	r3, r1, #3
 8009d30:	4651      	mov	r1, sl
 8009d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d36:	4651      	mov	r1, sl
 8009d38:	00ca      	lsls	r2, r1, #3
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	4603      	mov	r3, r0
 8009d40:	4642      	mov	r2, r8
 8009d42:	189b      	adds	r3, r3, r2
 8009d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d46:	464b      	mov	r3, r9
 8009d48:	460a      	mov	r2, r1
 8009d4a:	eb42 0303 	adc.w	r3, r2, r3
 8009d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	663b      	str	r3, [r7, #96]	; 0x60
 8009d5a:	667a      	str	r2, [r7, #100]	; 0x64
 8009d5c:	f04f 0200 	mov.w	r2, #0
 8009d60:	f04f 0300 	mov.w	r3, #0
 8009d64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009d68:	4649      	mov	r1, r9
 8009d6a:	008b      	lsls	r3, r1, #2
 8009d6c:	4641      	mov	r1, r8
 8009d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d72:	4641      	mov	r1, r8
 8009d74:	008a      	lsls	r2, r1, #2
 8009d76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009d7a:	f7f6 ff85 	bl	8000c88 <__aeabi_uldivmod>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <UART_SetConfig+0x4e4>)
 8009d84:	fba3 1302 	umull	r1, r3, r3, r2
 8009d88:	095b      	lsrs	r3, r3, #5
 8009d8a:	2164      	movs	r1, #100	; 0x64
 8009d8c:	fb01 f303 	mul.w	r3, r1, r3
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	011b      	lsls	r3, r3, #4
 8009d94:	3332      	adds	r3, #50	; 0x32
 8009d96:	4a08      	ldr	r2, [pc, #32]	; (8009db8 <UART_SetConfig+0x4e4>)
 8009d98:	fba2 2303 	umull	r2, r3, r2, r3
 8009d9c:	095b      	lsrs	r3, r3, #5
 8009d9e:	f003 020f 	and.w	r2, r3, #15
 8009da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4422      	add	r2, r4
 8009daa:	609a      	str	r2, [r3, #8]
}
 8009dac:	bf00      	nop
 8009dae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009db2:	46bd      	mov	sp, r7
 8009db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009db8:	51eb851f 	.word	0x51eb851f

08009dbc <malloc>:
 8009dbc:	4b02      	ldr	r3, [pc, #8]	; (8009dc8 <malloc+0xc>)
 8009dbe:	4601      	mov	r1, r0
 8009dc0:	6818      	ldr	r0, [r3, #0]
 8009dc2:	f000 b82b 	b.w	8009e1c <_malloc_r>
 8009dc6:	bf00      	nop
 8009dc8:	20000064 	.word	0x20000064

08009dcc <free>:
 8009dcc:	4b02      	ldr	r3, [pc, #8]	; (8009dd8 <free+0xc>)
 8009dce:	4601      	mov	r1, r0
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	f001 bf9f 	b.w	800bd14 <_free_r>
 8009dd6:	bf00      	nop
 8009dd8:	20000064 	.word	0x20000064

08009ddc <sbrk_aligned>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	4e0e      	ldr	r6, [pc, #56]	; (8009e18 <sbrk_aligned+0x3c>)
 8009de0:	460c      	mov	r4, r1
 8009de2:	6831      	ldr	r1, [r6, #0]
 8009de4:	4605      	mov	r5, r0
 8009de6:	b911      	cbnz	r1, 8009dee <sbrk_aligned+0x12>
 8009de8:	f001 f8b4 	bl	800af54 <_sbrk_r>
 8009dec:	6030      	str	r0, [r6, #0]
 8009dee:	4621      	mov	r1, r4
 8009df0:	4628      	mov	r0, r5
 8009df2:	f001 f8af 	bl	800af54 <_sbrk_r>
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	d00a      	beq.n	8009e10 <sbrk_aligned+0x34>
 8009dfa:	1cc4      	adds	r4, r0, #3
 8009dfc:	f024 0403 	bic.w	r4, r4, #3
 8009e00:	42a0      	cmp	r0, r4
 8009e02:	d007      	beq.n	8009e14 <sbrk_aligned+0x38>
 8009e04:	1a21      	subs	r1, r4, r0
 8009e06:	4628      	mov	r0, r5
 8009e08:	f001 f8a4 	bl	800af54 <_sbrk_r>
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d101      	bne.n	8009e14 <sbrk_aligned+0x38>
 8009e10:	f04f 34ff 	mov.w	r4, #4294967295
 8009e14:	4620      	mov	r0, r4
 8009e16:	bd70      	pop	{r4, r5, r6, pc}
 8009e18:	200009dc 	.word	0x200009dc

08009e1c <_malloc_r>:
 8009e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e20:	1ccd      	adds	r5, r1, #3
 8009e22:	f025 0503 	bic.w	r5, r5, #3
 8009e26:	3508      	adds	r5, #8
 8009e28:	2d0c      	cmp	r5, #12
 8009e2a:	bf38      	it	cc
 8009e2c:	250c      	movcc	r5, #12
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	4607      	mov	r7, r0
 8009e32:	db01      	blt.n	8009e38 <_malloc_r+0x1c>
 8009e34:	42a9      	cmp	r1, r5
 8009e36:	d905      	bls.n	8009e44 <_malloc_r+0x28>
 8009e38:	230c      	movs	r3, #12
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	2600      	movs	r6, #0
 8009e3e:	4630      	mov	r0, r6
 8009e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009f18 <_malloc_r+0xfc>
 8009e48:	f000 f868 	bl	8009f1c <__malloc_lock>
 8009e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e50:	461c      	mov	r4, r3
 8009e52:	bb5c      	cbnz	r4, 8009eac <_malloc_r+0x90>
 8009e54:	4629      	mov	r1, r5
 8009e56:	4638      	mov	r0, r7
 8009e58:	f7ff ffc0 	bl	8009ddc <sbrk_aligned>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	4604      	mov	r4, r0
 8009e60:	d155      	bne.n	8009f0e <_malloc_r+0xf2>
 8009e62:	f8d8 4000 	ldr.w	r4, [r8]
 8009e66:	4626      	mov	r6, r4
 8009e68:	2e00      	cmp	r6, #0
 8009e6a:	d145      	bne.n	8009ef8 <_malloc_r+0xdc>
 8009e6c:	2c00      	cmp	r4, #0
 8009e6e:	d048      	beq.n	8009f02 <_malloc_r+0xe6>
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	4631      	mov	r1, r6
 8009e74:	4638      	mov	r0, r7
 8009e76:	eb04 0903 	add.w	r9, r4, r3
 8009e7a:	f001 f86b 	bl	800af54 <_sbrk_r>
 8009e7e:	4581      	cmp	r9, r0
 8009e80:	d13f      	bne.n	8009f02 <_malloc_r+0xe6>
 8009e82:	6821      	ldr	r1, [r4, #0]
 8009e84:	1a6d      	subs	r5, r5, r1
 8009e86:	4629      	mov	r1, r5
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7ff ffa7 	bl	8009ddc <sbrk_aligned>
 8009e8e:	3001      	adds	r0, #1
 8009e90:	d037      	beq.n	8009f02 <_malloc_r+0xe6>
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	442b      	add	r3, r5
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	f8d8 3000 	ldr.w	r3, [r8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d038      	beq.n	8009f12 <_malloc_r+0xf6>
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	42a2      	cmp	r2, r4
 8009ea4:	d12b      	bne.n	8009efe <_malloc_r+0xe2>
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	605a      	str	r2, [r3, #4]
 8009eaa:	e00f      	b.n	8009ecc <_malloc_r+0xb0>
 8009eac:	6822      	ldr	r2, [r4, #0]
 8009eae:	1b52      	subs	r2, r2, r5
 8009eb0:	d41f      	bmi.n	8009ef2 <_malloc_r+0xd6>
 8009eb2:	2a0b      	cmp	r2, #11
 8009eb4:	d917      	bls.n	8009ee6 <_malloc_r+0xca>
 8009eb6:	1961      	adds	r1, r4, r5
 8009eb8:	42a3      	cmp	r3, r4
 8009eba:	6025      	str	r5, [r4, #0]
 8009ebc:	bf18      	it	ne
 8009ebe:	6059      	strne	r1, [r3, #4]
 8009ec0:	6863      	ldr	r3, [r4, #4]
 8009ec2:	bf08      	it	eq
 8009ec4:	f8c8 1000 	streq.w	r1, [r8]
 8009ec8:	5162      	str	r2, [r4, r5]
 8009eca:	604b      	str	r3, [r1, #4]
 8009ecc:	4638      	mov	r0, r7
 8009ece:	f104 060b 	add.w	r6, r4, #11
 8009ed2:	f000 f829 	bl	8009f28 <__malloc_unlock>
 8009ed6:	f026 0607 	bic.w	r6, r6, #7
 8009eda:	1d23      	adds	r3, r4, #4
 8009edc:	1af2      	subs	r2, r6, r3
 8009ede:	d0ae      	beq.n	8009e3e <_malloc_r+0x22>
 8009ee0:	1b9b      	subs	r3, r3, r6
 8009ee2:	50a3      	str	r3, [r4, r2]
 8009ee4:	e7ab      	b.n	8009e3e <_malloc_r+0x22>
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	6862      	ldr	r2, [r4, #4]
 8009eea:	d1dd      	bne.n	8009ea8 <_malloc_r+0x8c>
 8009eec:	f8c8 2000 	str.w	r2, [r8]
 8009ef0:	e7ec      	b.n	8009ecc <_malloc_r+0xb0>
 8009ef2:	4623      	mov	r3, r4
 8009ef4:	6864      	ldr	r4, [r4, #4]
 8009ef6:	e7ac      	b.n	8009e52 <_malloc_r+0x36>
 8009ef8:	4634      	mov	r4, r6
 8009efa:	6876      	ldr	r6, [r6, #4]
 8009efc:	e7b4      	b.n	8009e68 <_malloc_r+0x4c>
 8009efe:	4613      	mov	r3, r2
 8009f00:	e7cc      	b.n	8009e9c <_malloc_r+0x80>
 8009f02:	230c      	movs	r3, #12
 8009f04:	603b      	str	r3, [r7, #0]
 8009f06:	4638      	mov	r0, r7
 8009f08:	f000 f80e 	bl	8009f28 <__malloc_unlock>
 8009f0c:	e797      	b.n	8009e3e <_malloc_r+0x22>
 8009f0e:	6025      	str	r5, [r4, #0]
 8009f10:	e7dc      	b.n	8009ecc <_malloc_r+0xb0>
 8009f12:	605b      	str	r3, [r3, #4]
 8009f14:	deff      	udf	#255	; 0xff
 8009f16:	bf00      	nop
 8009f18:	200009d8 	.word	0x200009d8

08009f1c <__malloc_lock>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	; (8009f24 <__malloc_lock+0x8>)
 8009f1e:	f001 b866 	b.w	800afee <__retarget_lock_acquire_recursive>
 8009f22:	bf00      	nop
 8009f24:	20000b20 	.word	0x20000b20

08009f28 <__malloc_unlock>:
 8009f28:	4801      	ldr	r0, [pc, #4]	; (8009f30 <__malloc_unlock+0x8>)
 8009f2a:	f001 b861 	b.w	800aff0 <__retarget_lock_release_recursive>
 8009f2e:	bf00      	nop
 8009f30:	20000b20 	.word	0x20000b20

08009f34 <__cvt>:
 8009f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f38:	ec55 4b10 	vmov	r4, r5, d0
 8009f3c:	2d00      	cmp	r5, #0
 8009f3e:	460e      	mov	r6, r1
 8009f40:	4619      	mov	r1, r3
 8009f42:	462b      	mov	r3, r5
 8009f44:	bfbb      	ittet	lt
 8009f46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f4a:	461d      	movlt	r5, r3
 8009f4c:	2300      	movge	r3, #0
 8009f4e:	232d      	movlt	r3, #45	; 0x2d
 8009f50:	700b      	strb	r3, [r1, #0]
 8009f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f58:	4691      	mov	r9, r2
 8009f5a:	f023 0820 	bic.w	r8, r3, #32
 8009f5e:	bfbc      	itt	lt
 8009f60:	4622      	movlt	r2, r4
 8009f62:	4614      	movlt	r4, r2
 8009f64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f68:	d005      	beq.n	8009f76 <__cvt+0x42>
 8009f6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f6e:	d100      	bne.n	8009f72 <__cvt+0x3e>
 8009f70:	3601      	adds	r6, #1
 8009f72:	2102      	movs	r1, #2
 8009f74:	e000      	b.n	8009f78 <__cvt+0x44>
 8009f76:	2103      	movs	r1, #3
 8009f78:	ab03      	add	r3, sp, #12
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	ab02      	add	r3, sp, #8
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	ec45 4b10 	vmov	d0, r4, r5
 8009f84:	4653      	mov	r3, sl
 8009f86:	4632      	mov	r2, r6
 8009f88:	f001 f8d2 	bl	800b130 <_dtoa_r>
 8009f8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f90:	4607      	mov	r7, r0
 8009f92:	d102      	bne.n	8009f9a <__cvt+0x66>
 8009f94:	f019 0f01 	tst.w	r9, #1
 8009f98:	d022      	beq.n	8009fe0 <__cvt+0xac>
 8009f9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f9e:	eb07 0906 	add.w	r9, r7, r6
 8009fa2:	d110      	bne.n	8009fc6 <__cvt+0x92>
 8009fa4:	783b      	ldrb	r3, [r7, #0]
 8009fa6:	2b30      	cmp	r3, #48	; 0x30
 8009fa8:	d10a      	bne.n	8009fc0 <__cvt+0x8c>
 8009faa:	2200      	movs	r2, #0
 8009fac:	2300      	movs	r3, #0
 8009fae:	4620      	mov	r0, r4
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	f7f6 fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fb6:	b918      	cbnz	r0, 8009fc0 <__cvt+0x8c>
 8009fb8:	f1c6 0601 	rsb	r6, r6, #1
 8009fbc:	f8ca 6000 	str.w	r6, [sl]
 8009fc0:	f8da 3000 	ldr.w	r3, [sl]
 8009fc4:	4499      	add	r9, r3
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4620      	mov	r0, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	f7f6 fd7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fd2:	b108      	cbz	r0, 8009fd8 <__cvt+0xa4>
 8009fd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fd8:	2230      	movs	r2, #48	; 0x30
 8009fda:	9b03      	ldr	r3, [sp, #12]
 8009fdc:	454b      	cmp	r3, r9
 8009fde:	d307      	bcc.n	8009ff0 <__cvt+0xbc>
 8009fe0:	9b03      	ldr	r3, [sp, #12]
 8009fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fe4:	1bdb      	subs	r3, r3, r7
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	b004      	add	sp, #16
 8009fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff0:	1c59      	adds	r1, r3, #1
 8009ff2:	9103      	str	r1, [sp, #12]
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	e7f0      	b.n	8009fda <__cvt+0xa6>

08009ff8 <__exponent>:
 8009ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	bfb8      	it	lt
 800a000:	4249      	neglt	r1, r1
 800a002:	f803 2b02 	strb.w	r2, [r3], #2
 800a006:	bfb4      	ite	lt
 800a008:	222d      	movlt	r2, #45	; 0x2d
 800a00a:	222b      	movge	r2, #43	; 0x2b
 800a00c:	2909      	cmp	r1, #9
 800a00e:	7042      	strb	r2, [r0, #1]
 800a010:	dd2a      	ble.n	800a068 <__exponent+0x70>
 800a012:	f10d 0207 	add.w	r2, sp, #7
 800a016:	4617      	mov	r7, r2
 800a018:	260a      	movs	r6, #10
 800a01a:	4694      	mov	ip, r2
 800a01c:	fb91 f5f6 	sdiv	r5, r1, r6
 800a020:	fb06 1415 	mls	r4, r6, r5, r1
 800a024:	3430      	adds	r4, #48	; 0x30
 800a026:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a02a:	460c      	mov	r4, r1
 800a02c:	2c63      	cmp	r4, #99	; 0x63
 800a02e:	f102 32ff 	add.w	r2, r2, #4294967295
 800a032:	4629      	mov	r1, r5
 800a034:	dcf1      	bgt.n	800a01a <__exponent+0x22>
 800a036:	3130      	adds	r1, #48	; 0x30
 800a038:	f1ac 0402 	sub.w	r4, ip, #2
 800a03c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a040:	1c41      	adds	r1, r0, #1
 800a042:	4622      	mov	r2, r4
 800a044:	42ba      	cmp	r2, r7
 800a046:	d30a      	bcc.n	800a05e <__exponent+0x66>
 800a048:	f10d 0209 	add.w	r2, sp, #9
 800a04c:	eba2 020c 	sub.w	r2, r2, ip
 800a050:	42bc      	cmp	r4, r7
 800a052:	bf88      	it	hi
 800a054:	2200      	movhi	r2, #0
 800a056:	4413      	add	r3, r2
 800a058:	1a18      	subs	r0, r3, r0
 800a05a:	b003      	add	sp, #12
 800a05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a05e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a062:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a066:	e7ed      	b.n	800a044 <__exponent+0x4c>
 800a068:	2330      	movs	r3, #48	; 0x30
 800a06a:	3130      	adds	r1, #48	; 0x30
 800a06c:	7083      	strb	r3, [r0, #2]
 800a06e:	70c1      	strb	r1, [r0, #3]
 800a070:	1d03      	adds	r3, r0, #4
 800a072:	e7f1      	b.n	800a058 <__exponent+0x60>

0800a074 <_printf_float>:
 800a074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a078:	ed2d 8b02 	vpush	{d8}
 800a07c:	b08d      	sub	sp, #52	; 0x34
 800a07e:	460c      	mov	r4, r1
 800a080:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a084:	4616      	mov	r6, r2
 800a086:	461f      	mov	r7, r3
 800a088:	4605      	mov	r5, r0
 800a08a:	f000 ff2b 	bl	800aee4 <_localeconv_r>
 800a08e:	f8d0 a000 	ldr.w	sl, [r0]
 800a092:	4650      	mov	r0, sl
 800a094:	f7f6 f8ec 	bl	8000270 <strlen>
 800a098:	2300      	movs	r3, #0
 800a09a:	930a      	str	r3, [sp, #40]	; 0x28
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	9305      	str	r3, [sp, #20]
 800a0a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a0a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a0a8:	3307      	adds	r3, #7
 800a0aa:	f023 0307 	bic.w	r3, r3, #7
 800a0ae:	f103 0208 	add.w	r2, r3, #8
 800a0b2:	f8c8 2000 	str.w	r2, [r8]
 800a0b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0be:	9307      	str	r3, [sp, #28]
 800a0c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0c4:	ee08 0a10 	vmov	s16, r0
 800a0c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a0cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0d0:	4b9e      	ldr	r3, [pc, #632]	; (800a34c <_printf_float+0x2d8>)
 800a0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d6:	f7f6 fd29 	bl	8000b2c <__aeabi_dcmpun>
 800a0da:	bb88      	cbnz	r0, 800a140 <_printf_float+0xcc>
 800a0dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0e0:	4b9a      	ldr	r3, [pc, #616]	; (800a34c <_printf_float+0x2d8>)
 800a0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e6:	f7f6 fd03 	bl	8000af0 <__aeabi_dcmple>
 800a0ea:	bb48      	cbnz	r0, 800a140 <_printf_float+0xcc>
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	f7f6 fcf2 	bl	8000adc <__aeabi_dcmplt>
 800a0f8:	b110      	cbz	r0, 800a100 <_printf_float+0x8c>
 800a0fa:	232d      	movs	r3, #45	; 0x2d
 800a0fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a100:	4a93      	ldr	r2, [pc, #588]	; (800a350 <_printf_float+0x2dc>)
 800a102:	4b94      	ldr	r3, [pc, #592]	; (800a354 <_printf_float+0x2e0>)
 800a104:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a108:	bf94      	ite	ls
 800a10a:	4690      	movls	r8, r2
 800a10c:	4698      	movhi	r8, r3
 800a10e:	2303      	movs	r3, #3
 800a110:	6123      	str	r3, [r4, #16]
 800a112:	9b05      	ldr	r3, [sp, #20]
 800a114:	f023 0304 	bic.w	r3, r3, #4
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	f04f 0900 	mov.w	r9, #0
 800a11e:	9700      	str	r7, [sp, #0]
 800a120:	4633      	mov	r3, r6
 800a122:	aa0b      	add	r2, sp, #44	; 0x2c
 800a124:	4621      	mov	r1, r4
 800a126:	4628      	mov	r0, r5
 800a128:	f000 f9da 	bl	800a4e0 <_printf_common>
 800a12c:	3001      	adds	r0, #1
 800a12e:	f040 8090 	bne.w	800a252 <_printf_float+0x1de>
 800a132:	f04f 30ff 	mov.w	r0, #4294967295
 800a136:	b00d      	add	sp, #52	; 0x34
 800a138:	ecbd 8b02 	vpop	{d8}
 800a13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a140:	4642      	mov	r2, r8
 800a142:	464b      	mov	r3, r9
 800a144:	4640      	mov	r0, r8
 800a146:	4649      	mov	r1, r9
 800a148:	f7f6 fcf0 	bl	8000b2c <__aeabi_dcmpun>
 800a14c:	b140      	cbz	r0, 800a160 <_printf_float+0xec>
 800a14e:	464b      	mov	r3, r9
 800a150:	2b00      	cmp	r3, #0
 800a152:	bfbc      	itt	lt
 800a154:	232d      	movlt	r3, #45	; 0x2d
 800a156:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a15a:	4a7f      	ldr	r2, [pc, #508]	; (800a358 <_printf_float+0x2e4>)
 800a15c:	4b7f      	ldr	r3, [pc, #508]	; (800a35c <_printf_float+0x2e8>)
 800a15e:	e7d1      	b.n	800a104 <_printf_float+0x90>
 800a160:	6863      	ldr	r3, [r4, #4]
 800a162:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a166:	9206      	str	r2, [sp, #24]
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	d13f      	bne.n	800a1ec <_printf_float+0x178>
 800a16c:	2306      	movs	r3, #6
 800a16e:	6063      	str	r3, [r4, #4]
 800a170:	9b05      	ldr	r3, [sp, #20]
 800a172:	6861      	ldr	r1, [r4, #4]
 800a174:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a178:	2300      	movs	r3, #0
 800a17a:	9303      	str	r3, [sp, #12]
 800a17c:	ab0a      	add	r3, sp, #40	; 0x28
 800a17e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a182:	ab09      	add	r3, sp, #36	; 0x24
 800a184:	ec49 8b10 	vmov	d0, r8, r9
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	6022      	str	r2, [r4, #0]
 800a18c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a190:	4628      	mov	r0, r5
 800a192:	f7ff fecf 	bl	8009f34 <__cvt>
 800a196:	9b06      	ldr	r3, [sp, #24]
 800a198:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a19a:	2b47      	cmp	r3, #71	; 0x47
 800a19c:	4680      	mov	r8, r0
 800a19e:	d108      	bne.n	800a1b2 <_printf_float+0x13e>
 800a1a0:	1cc8      	adds	r0, r1, #3
 800a1a2:	db02      	blt.n	800a1aa <_printf_float+0x136>
 800a1a4:	6863      	ldr	r3, [r4, #4]
 800a1a6:	4299      	cmp	r1, r3
 800a1a8:	dd41      	ble.n	800a22e <_printf_float+0x1ba>
 800a1aa:	f1ab 0302 	sub.w	r3, fp, #2
 800a1ae:	fa5f fb83 	uxtb.w	fp, r3
 800a1b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1b6:	d820      	bhi.n	800a1fa <_printf_float+0x186>
 800a1b8:	3901      	subs	r1, #1
 800a1ba:	465a      	mov	r2, fp
 800a1bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1c0:	9109      	str	r1, [sp, #36]	; 0x24
 800a1c2:	f7ff ff19 	bl	8009ff8 <__exponent>
 800a1c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1c8:	1813      	adds	r3, r2, r0
 800a1ca:	2a01      	cmp	r2, #1
 800a1cc:	4681      	mov	r9, r0
 800a1ce:	6123      	str	r3, [r4, #16]
 800a1d0:	dc02      	bgt.n	800a1d8 <_printf_float+0x164>
 800a1d2:	6822      	ldr	r2, [r4, #0]
 800a1d4:	07d2      	lsls	r2, r2, #31
 800a1d6:	d501      	bpl.n	800a1dc <_printf_float+0x168>
 800a1d8:	3301      	adds	r3, #1
 800a1da:	6123      	str	r3, [r4, #16]
 800a1dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d09c      	beq.n	800a11e <_printf_float+0xaa>
 800a1e4:	232d      	movs	r3, #45	; 0x2d
 800a1e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1ea:	e798      	b.n	800a11e <_printf_float+0xaa>
 800a1ec:	9a06      	ldr	r2, [sp, #24]
 800a1ee:	2a47      	cmp	r2, #71	; 0x47
 800a1f0:	d1be      	bne.n	800a170 <_printf_float+0xfc>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1bc      	bne.n	800a170 <_printf_float+0xfc>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e7b9      	b.n	800a16e <_printf_float+0xfa>
 800a1fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a1fe:	d118      	bne.n	800a232 <_printf_float+0x1be>
 800a200:	2900      	cmp	r1, #0
 800a202:	6863      	ldr	r3, [r4, #4]
 800a204:	dd0b      	ble.n	800a21e <_printf_float+0x1aa>
 800a206:	6121      	str	r1, [r4, #16]
 800a208:	b913      	cbnz	r3, 800a210 <_printf_float+0x19c>
 800a20a:	6822      	ldr	r2, [r4, #0]
 800a20c:	07d0      	lsls	r0, r2, #31
 800a20e:	d502      	bpl.n	800a216 <_printf_float+0x1a2>
 800a210:	3301      	adds	r3, #1
 800a212:	440b      	add	r3, r1
 800a214:	6123      	str	r3, [r4, #16]
 800a216:	65a1      	str	r1, [r4, #88]	; 0x58
 800a218:	f04f 0900 	mov.w	r9, #0
 800a21c:	e7de      	b.n	800a1dc <_printf_float+0x168>
 800a21e:	b913      	cbnz	r3, 800a226 <_printf_float+0x1b2>
 800a220:	6822      	ldr	r2, [r4, #0]
 800a222:	07d2      	lsls	r2, r2, #31
 800a224:	d501      	bpl.n	800a22a <_printf_float+0x1b6>
 800a226:	3302      	adds	r3, #2
 800a228:	e7f4      	b.n	800a214 <_printf_float+0x1a0>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e7f2      	b.n	800a214 <_printf_float+0x1a0>
 800a22e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a234:	4299      	cmp	r1, r3
 800a236:	db05      	blt.n	800a244 <_printf_float+0x1d0>
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	6121      	str	r1, [r4, #16]
 800a23c:	07d8      	lsls	r0, r3, #31
 800a23e:	d5ea      	bpl.n	800a216 <_printf_float+0x1a2>
 800a240:	1c4b      	adds	r3, r1, #1
 800a242:	e7e7      	b.n	800a214 <_printf_float+0x1a0>
 800a244:	2900      	cmp	r1, #0
 800a246:	bfd4      	ite	le
 800a248:	f1c1 0202 	rsble	r2, r1, #2
 800a24c:	2201      	movgt	r2, #1
 800a24e:	4413      	add	r3, r2
 800a250:	e7e0      	b.n	800a214 <_printf_float+0x1a0>
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	055a      	lsls	r2, r3, #21
 800a256:	d407      	bmi.n	800a268 <_printf_float+0x1f4>
 800a258:	6923      	ldr	r3, [r4, #16]
 800a25a:	4642      	mov	r2, r8
 800a25c:	4631      	mov	r1, r6
 800a25e:	4628      	mov	r0, r5
 800a260:	47b8      	blx	r7
 800a262:	3001      	adds	r0, #1
 800a264:	d12c      	bne.n	800a2c0 <_printf_float+0x24c>
 800a266:	e764      	b.n	800a132 <_printf_float+0xbe>
 800a268:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a26c:	f240 80e0 	bls.w	800a430 <_printf_float+0x3bc>
 800a270:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a274:	2200      	movs	r2, #0
 800a276:	2300      	movs	r3, #0
 800a278:	f7f6 fc26 	bl	8000ac8 <__aeabi_dcmpeq>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d034      	beq.n	800a2ea <_printf_float+0x276>
 800a280:	4a37      	ldr	r2, [pc, #220]	; (800a360 <_printf_float+0x2ec>)
 800a282:	2301      	movs	r3, #1
 800a284:	4631      	mov	r1, r6
 800a286:	4628      	mov	r0, r5
 800a288:	47b8      	blx	r7
 800a28a:	3001      	adds	r0, #1
 800a28c:	f43f af51 	beq.w	800a132 <_printf_float+0xbe>
 800a290:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a294:	429a      	cmp	r2, r3
 800a296:	db02      	blt.n	800a29e <_printf_float+0x22a>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	07d8      	lsls	r0, r3, #31
 800a29c:	d510      	bpl.n	800a2c0 <_printf_float+0x24c>
 800a29e:	ee18 3a10 	vmov	r3, s16
 800a2a2:	4652      	mov	r2, sl
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	47b8      	blx	r7
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	f43f af41 	beq.w	800a132 <_printf_float+0xbe>
 800a2b0:	f04f 0800 	mov.w	r8, #0
 800a2b4:	f104 091a 	add.w	r9, r4, #26
 800a2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	4543      	cmp	r3, r8
 800a2be:	dc09      	bgt.n	800a2d4 <_printf_float+0x260>
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	079b      	lsls	r3, r3, #30
 800a2c4:	f100 8107 	bmi.w	800a4d6 <_printf_float+0x462>
 800a2c8:	68e0      	ldr	r0, [r4, #12]
 800a2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2cc:	4298      	cmp	r0, r3
 800a2ce:	bfb8      	it	lt
 800a2d0:	4618      	movlt	r0, r3
 800a2d2:	e730      	b.n	800a136 <_printf_float+0xc2>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	464a      	mov	r2, r9
 800a2d8:	4631      	mov	r1, r6
 800a2da:	4628      	mov	r0, r5
 800a2dc:	47b8      	blx	r7
 800a2de:	3001      	adds	r0, #1
 800a2e0:	f43f af27 	beq.w	800a132 <_printf_float+0xbe>
 800a2e4:	f108 0801 	add.w	r8, r8, #1
 800a2e8:	e7e6      	b.n	800a2b8 <_printf_float+0x244>
 800a2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	dc39      	bgt.n	800a364 <_printf_float+0x2f0>
 800a2f0:	4a1b      	ldr	r2, [pc, #108]	; (800a360 <_printf_float+0x2ec>)
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	47b8      	blx	r7
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	f43f af19 	beq.w	800a132 <_printf_float+0xbe>
 800a300:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a304:	4313      	orrs	r3, r2
 800a306:	d102      	bne.n	800a30e <_printf_float+0x29a>
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	07d9      	lsls	r1, r3, #31
 800a30c:	d5d8      	bpl.n	800a2c0 <_printf_float+0x24c>
 800a30e:	ee18 3a10 	vmov	r3, s16
 800a312:	4652      	mov	r2, sl
 800a314:	4631      	mov	r1, r6
 800a316:	4628      	mov	r0, r5
 800a318:	47b8      	blx	r7
 800a31a:	3001      	adds	r0, #1
 800a31c:	f43f af09 	beq.w	800a132 <_printf_float+0xbe>
 800a320:	f04f 0900 	mov.w	r9, #0
 800a324:	f104 0a1a 	add.w	sl, r4, #26
 800a328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32a:	425b      	negs	r3, r3
 800a32c:	454b      	cmp	r3, r9
 800a32e:	dc01      	bgt.n	800a334 <_printf_float+0x2c0>
 800a330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a332:	e792      	b.n	800a25a <_printf_float+0x1e6>
 800a334:	2301      	movs	r3, #1
 800a336:	4652      	mov	r2, sl
 800a338:	4631      	mov	r1, r6
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b8      	blx	r7
 800a33e:	3001      	adds	r0, #1
 800a340:	f43f aef7 	beq.w	800a132 <_printf_float+0xbe>
 800a344:	f109 0901 	add.w	r9, r9, #1
 800a348:	e7ee      	b.n	800a328 <_printf_float+0x2b4>
 800a34a:	bf00      	nop
 800a34c:	7fefffff 	.word	0x7fefffff
 800a350:	0801185c 	.word	0x0801185c
 800a354:	08011860 	.word	0x08011860
 800a358:	08011864 	.word	0x08011864
 800a35c:	08011868 	.word	0x08011868
 800a360:	0801186c 	.word	0x0801186c
 800a364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a366:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a368:	429a      	cmp	r2, r3
 800a36a:	bfa8      	it	ge
 800a36c:	461a      	movge	r2, r3
 800a36e:	2a00      	cmp	r2, #0
 800a370:	4691      	mov	r9, r2
 800a372:	dc37      	bgt.n	800a3e4 <_printf_float+0x370>
 800a374:	f04f 0b00 	mov.w	fp, #0
 800a378:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a37c:	f104 021a 	add.w	r2, r4, #26
 800a380:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a382:	9305      	str	r3, [sp, #20]
 800a384:	eba3 0309 	sub.w	r3, r3, r9
 800a388:	455b      	cmp	r3, fp
 800a38a:	dc33      	bgt.n	800a3f4 <_printf_float+0x380>
 800a38c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a390:	429a      	cmp	r2, r3
 800a392:	db3b      	blt.n	800a40c <_printf_float+0x398>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	07da      	lsls	r2, r3, #31
 800a398:	d438      	bmi.n	800a40c <_printf_float+0x398>
 800a39a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a39e:	eba2 0903 	sub.w	r9, r2, r3
 800a3a2:	9b05      	ldr	r3, [sp, #20]
 800a3a4:	1ad2      	subs	r2, r2, r3
 800a3a6:	4591      	cmp	r9, r2
 800a3a8:	bfa8      	it	ge
 800a3aa:	4691      	movge	r9, r2
 800a3ac:	f1b9 0f00 	cmp.w	r9, #0
 800a3b0:	dc35      	bgt.n	800a41e <_printf_float+0x3aa>
 800a3b2:	f04f 0800 	mov.w	r8, #0
 800a3b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3ba:	f104 0a1a 	add.w	sl, r4, #26
 800a3be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3c2:	1a9b      	subs	r3, r3, r2
 800a3c4:	eba3 0309 	sub.w	r3, r3, r9
 800a3c8:	4543      	cmp	r3, r8
 800a3ca:	f77f af79 	ble.w	800a2c0 <_printf_float+0x24c>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	4652      	mov	r2, sl
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	47b8      	blx	r7
 800a3d8:	3001      	adds	r0, #1
 800a3da:	f43f aeaa 	beq.w	800a132 <_printf_float+0xbe>
 800a3de:	f108 0801 	add.w	r8, r8, #1
 800a3e2:	e7ec      	b.n	800a3be <_printf_float+0x34a>
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	47b8      	blx	r7
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d1c0      	bne.n	800a374 <_printf_float+0x300>
 800a3f2:	e69e      	b.n	800a132 <_printf_float+0xbe>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	4631      	mov	r1, r6
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	9205      	str	r2, [sp, #20]
 800a3fc:	47b8      	blx	r7
 800a3fe:	3001      	adds	r0, #1
 800a400:	f43f ae97 	beq.w	800a132 <_printf_float+0xbe>
 800a404:	9a05      	ldr	r2, [sp, #20]
 800a406:	f10b 0b01 	add.w	fp, fp, #1
 800a40a:	e7b9      	b.n	800a380 <_printf_float+0x30c>
 800a40c:	ee18 3a10 	vmov	r3, s16
 800a410:	4652      	mov	r2, sl
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	d1be      	bne.n	800a39a <_printf_float+0x326>
 800a41c:	e689      	b.n	800a132 <_printf_float+0xbe>
 800a41e:	9a05      	ldr	r2, [sp, #20]
 800a420:	464b      	mov	r3, r9
 800a422:	4442      	add	r2, r8
 800a424:	4631      	mov	r1, r6
 800a426:	4628      	mov	r0, r5
 800a428:	47b8      	blx	r7
 800a42a:	3001      	adds	r0, #1
 800a42c:	d1c1      	bne.n	800a3b2 <_printf_float+0x33e>
 800a42e:	e680      	b.n	800a132 <_printf_float+0xbe>
 800a430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a432:	2a01      	cmp	r2, #1
 800a434:	dc01      	bgt.n	800a43a <_printf_float+0x3c6>
 800a436:	07db      	lsls	r3, r3, #31
 800a438:	d53a      	bpl.n	800a4b0 <_printf_float+0x43c>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4642      	mov	r2, r8
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	47b8      	blx	r7
 800a444:	3001      	adds	r0, #1
 800a446:	f43f ae74 	beq.w	800a132 <_printf_float+0xbe>
 800a44a:	ee18 3a10 	vmov	r3, s16
 800a44e:	4652      	mov	r2, sl
 800a450:	4631      	mov	r1, r6
 800a452:	4628      	mov	r0, r5
 800a454:	47b8      	blx	r7
 800a456:	3001      	adds	r0, #1
 800a458:	f43f ae6b 	beq.w	800a132 <_printf_float+0xbe>
 800a45c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a460:	2200      	movs	r2, #0
 800a462:	2300      	movs	r3, #0
 800a464:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a468:	f7f6 fb2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a46c:	b9d8      	cbnz	r0, 800a4a6 <_printf_float+0x432>
 800a46e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a472:	f108 0201 	add.w	r2, r8, #1
 800a476:	4631      	mov	r1, r6
 800a478:	4628      	mov	r0, r5
 800a47a:	47b8      	blx	r7
 800a47c:	3001      	adds	r0, #1
 800a47e:	d10e      	bne.n	800a49e <_printf_float+0x42a>
 800a480:	e657      	b.n	800a132 <_printf_float+0xbe>
 800a482:	2301      	movs	r3, #1
 800a484:	4652      	mov	r2, sl
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	f43f ae50 	beq.w	800a132 <_printf_float+0xbe>
 800a492:	f108 0801 	add.w	r8, r8, #1
 800a496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a498:	3b01      	subs	r3, #1
 800a49a:	4543      	cmp	r3, r8
 800a49c:	dcf1      	bgt.n	800a482 <_printf_float+0x40e>
 800a49e:	464b      	mov	r3, r9
 800a4a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a4a4:	e6da      	b.n	800a25c <_printf_float+0x1e8>
 800a4a6:	f04f 0800 	mov.w	r8, #0
 800a4aa:	f104 0a1a 	add.w	sl, r4, #26
 800a4ae:	e7f2      	b.n	800a496 <_printf_float+0x422>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4642      	mov	r2, r8
 800a4b4:	e7df      	b.n	800a476 <_printf_float+0x402>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	464a      	mov	r2, r9
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4628      	mov	r0, r5
 800a4be:	47b8      	blx	r7
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	f43f ae36 	beq.w	800a132 <_printf_float+0xbe>
 800a4c6:	f108 0801 	add.w	r8, r8, #1
 800a4ca:	68e3      	ldr	r3, [r4, #12]
 800a4cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4ce:	1a5b      	subs	r3, r3, r1
 800a4d0:	4543      	cmp	r3, r8
 800a4d2:	dcf0      	bgt.n	800a4b6 <_printf_float+0x442>
 800a4d4:	e6f8      	b.n	800a2c8 <_printf_float+0x254>
 800a4d6:	f04f 0800 	mov.w	r8, #0
 800a4da:	f104 0919 	add.w	r9, r4, #25
 800a4de:	e7f4      	b.n	800a4ca <_printf_float+0x456>

0800a4e0 <_printf_common>:
 800a4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e4:	4616      	mov	r6, r2
 800a4e6:	4699      	mov	r9, r3
 800a4e8:	688a      	ldr	r2, [r1, #8]
 800a4ea:	690b      	ldr	r3, [r1, #16]
 800a4ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	bfb8      	it	lt
 800a4f4:	4613      	movlt	r3, r2
 800a4f6:	6033      	str	r3, [r6, #0]
 800a4f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4fc:	4607      	mov	r7, r0
 800a4fe:	460c      	mov	r4, r1
 800a500:	b10a      	cbz	r2, 800a506 <_printf_common+0x26>
 800a502:	3301      	adds	r3, #1
 800a504:	6033      	str	r3, [r6, #0]
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	0699      	lsls	r1, r3, #26
 800a50a:	bf42      	ittt	mi
 800a50c:	6833      	ldrmi	r3, [r6, #0]
 800a50e:	3302      	addmi	r3, #2
 800a510:	6033      	strmi	r3, [r6, #0]
 800a512:	6825      	ldr	r5, [r4, #0]
 800a514:	f015 0506 	ands.w	r5, r5, #6
 800a518:	d106      	bne.n	800a528 <_printf_common+0x48>
 800a51a:	f104 0a19 	add.w	sl, r4, #25
 800a51e:	68e3      	ldr	r3, [r4, #12]
 800a520:	6832      	ldr	r2, [r6, #0]
 800a522:	1a9b      	subs	r3, r3, r2
 800a524:	42ab      	cmp	r3, r5
 800a526:	dc26      	bgt.n	800a576 <_printf_common+0x96>
 800a528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a52c:	1e13      	subs	r3, r2, #0
 800a52e:	6822      	ldr	r2, [r4, #0]
 800a530:	bf18      	it	ne
 800a532:	2301      	movne	r3, #1
 800a534:	0692      	lsls	r2, r2, #26
 800a536:	d42b      	bmi.n	800a590 <_printf_common+0xb0>
 800a538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a53c:	4649      	mov	r1, r9
 800a53e:	4638      	mov	r0, r7
 800a540:	47c0      	blx	r8
 800a542:	3001      	adds	r0, #1
 800a544:	d01e      	beq.n	800a584 <_printf_common+0xa4>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	6922      	ldr	r2, [r4, #16]
 800a54a:	f003 0306 	and.w	r3, r3, #6
 800a54e:	2b04      	cmp	r3, #4
 800a550:	bf02      	ittt	eq
 800a552:	68e5      	ldreq	r5, [r4, #12]
 800a554:	6833      	ldreq	r3, [r6, #0]
 800a556:	1aed      	subeq	r5, r5, r3
 800a558:	68a3      	ldr	r3, [r4, #8]
 800a55a:	bf0c      	ite	eq
 800a55c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a560:	2500      	movne	r5, #0
 800a562:	4293      	cmp	r3, r2
 800a564:	bfc4      	itt	gt
 800a566:	1a9b      	subgt	r3, r3, r2
 800a568:	18ed      	addgt	r5, r5, r3
 800a56a:	2600      	movs	r6, #0
 800a56c:	341a      	adds	r4, #26
 800a56e:	42b5      	cmp	r5, r6
 800a570:	d11a      	bne.n	800a5a8 <_printf_common+0xc8>
 800a572:	2000      	movs	r0, #0
 800a574:	e008      	b.n	800a588 <_printf_common+0xa8>
 800a576:	2301      	movs	r3, #1
 800a578:	4652      	mov	r2, sl
 800a57a:	4649      	mov	r1, r9
 800a57c:	4638      	mov	r0, r7
 800a57e:	47c0      	blx	r8
 800a580:	3001      	adds	r0, #1
 800a582:	d103      	bne.n	800a58c <_printf_common+0xac>
 800a584:	f04f 30ff 	mov.w	r0, #4294967295
 800a588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58c:	3501      	adds	r5, #1
 800a58e:	e7c6      	b.n	800a51e <_printf_common+0x3e>
 800a590:	18e1      	adds	r1, r4, r3
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	2030      	movs	r0, #48	; 0x30
 800a596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a59a:	4422      	add	r2, r4
 800a59c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5a4:	3302      	adds	r3, #2
 800a5a6:	e7c7      	b.n	800a538 <_printf_common+0x58>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	4622      	mov	r2, r4
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	47c0      	blx	r8
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	d0e6      	beq.n	800a584 <_printf_common+0xa4>
 800a5b6:	3601      	adds	r6, #1
 800a5b8:	e7d9      	b.n	800a56e <_printf_common+0x8e>
	...

0800a5bc <_printf_i>:
 800a5bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	7e0f      	ldrb	r7, [r1, #24]
 800a5c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5c4:	2f78      	cmp	r7, #120	; 0x78
 800a5c6:	4691      	mov	r9, r2
 800a5c8:	4680      	mov	r8, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	469a      	mov	sl, r3
 800a5ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5d2:	d807      	bhi.n	800a5e4 <_printf_i+0x28>
 800a5d4:	2f62      	cmp	r7, #98	; 0x62
 800a5d6:	d80a      	bhi.n	800a5ee <_printf_i+0x32>
 800a5d8:	2f00      	cmp	r7, #0
 800a5da:	f000 80d4 	beq.w	800a786 <_printf_i+0x1ca>
 800a5de:	2f58      	cmp	r7, #88	; 0x58
 800a5e0:	f000 80c0 	beq.w	800a764 <_printf_i+0x1a8>
 800a5e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5ec:	e03a      	b.n	800a664 <_printf_i+0xa8>
 800a5ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5f2:	2b15      	cmp	r3, #21
 800a5f4:	d8f6      	bhi.n	800a5e4 <_printf_i+0x28>
 800a5f6:	a101      	add	r1, pc, #4	; (adr r1, 800a5fc <_printf_i+0x40>)
 800a5f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5fc:	0800a655 	.word	0x0800a655
 800a600:	0800a669 	.word	0x0800a669
 800a604:	0800a5e5 	.word	0x0800a5e5
 800a608:	0800a5e5 	.word	0x0800a5e5
 800a60c:	0800a5e5 	.word	0x0800a5e5
 800a610:	0800a5e5 	.word	0x0800a5e5
 800a614:	0800a669 	.word	0x0800a669
 800a618:	0800a5e5 	.word	0x0800a5e5
 800a61c:	0800a5e5 	.word	0x0800a5e5
 800a620:	0800a5e5 	.word	0x0800a5e5
 800a624:	0800a5e5 	.word	0x0800a5e5
 800a628:	0800a76d 	.word	0x0800a76d
 800a62c:	0800a695 	.word	0x0800a695
 800a630:	0800a727 	.word	0x0800a727
 800a634:	0800a5e5 	.word	0x0800a5e5
 800a638:	0800a5e5 	.word	0x0800a5e5
 800a63c:	0800a78f 	.word	0x0800a78f
 800a640:	0800a5e5 	.word	0x0800a5e5
 800a644:	0800a695 	.word	0x0800a695
 800a648:	0800a5e5 	.word	0x0800a5e5
 800a64c:	0800a5e5 	.word	0x0800a5e5
 800a650:	0800a72f 	.word	0x0800a72f
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	1d1a      	adds	r2, r3, #4
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	602a      	str	r2, [r5, #0]
 800a65c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a664:	2301      	movs	r3, #1
 800a666:	e09f      	b.n	800a7a8 <_printf_i+0x1ec>
 800a668:	6820      	ldr	r0, [r4, #0]
 800a66a:	682b      	ldr	r3, [r5, #0]
 800a66c:	0607      	lsls	r7, r0, #24
 800a66e:	f103 0104 	add.w	r1, r3, #4
 800a672:	6029      	str	r1, [r5, #0]
 800a674:	d501      	bpl.n	800a67a <_printf_i+0xbe>
 800a676:	681e      	ldr	r6, [r3, #0]
 800a678:	e003      	b.n	800a682 <_printf_i+0xc6>
 800a67a:	0646      	lsls	r6, r0, #25
 800a67c:	d5fb      	bpl.n	800a676 <_printf_i+0xba>
 800a67e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a682:	2e00      	cmp	r6, #0
 800a684:	da03      	bge.n	800a68e <_printf_i+0xd2>
 800a686:	232d      	movs	r3, #45	; 0x2d
 800a688:	4276      	negs	r6, r6
 800a68a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a68e:	485a      	ldr	r0, [pc, #360]	; (800a7f8 <_printf_i+0x23c>)
 800a690:	230a      	movs	r3, #10
 800a692:	e012      	b.n	800a6ba <_printf_i+0xfe>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	6820      	ldr	r0, [r4, #0]
 800a698:	1d19      	adds	r1, r3, #4
 800a69a:	6029      	str	r1, [r5, #0]
 800a69c:	0605      	lsls	r5, r0, #24
 800a69e:	d501      	bpl.n	800a6a4 <_printf_i+0xe8>
 800a6a0:	681e      	ldr	r6, [r3, #0]
 800a6a2:	e002      	b.n	800a6aa <_printf_i+0xee>
 800a6a4:	0641      	lsls	r1, r0, #25
 800a6a6:	d5fb      	bpl.n	800a6a0 <_printf_i+0xe4>
 800a6a8:	881e      	ldrh	r6, [r3, #0]
 800a6aa:	4853      	ldr	r0, [pc, #332]	; (800a7f8 <_printf_i+0x23c>)
 800a6ac:	2f6f      	cmp	r7, #111	; 0x6f
 800a6ae:	bf0c      	ite	eq
 800a6b0:	2308      	moveq	r3, #8
 800a6b2:	230a      	movne	r3, #10
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6ba:	6865      	ldr	r5, [r4, #4]
 800a6bc:	60a5      	str	r5, [r4, #8]
 800a6be:	2d00      	cmp	r5, #0
 800a6c0:	bfa2      	ittt	ge
 800a6c2:	6821      	ldrge	r1, [r4, #0]
 800a6c4:	f021 0104 	bicge.w	r1, r1, #4
 800a6c8:	6021      	strge	r1, [r4, #0]
 800a6ca:	b90e      	cbnz	r6, 800a6d0 <_printf_i+0x114>
 800a6cc:	2d00      	cmp	r5, #0
 800a6ce:	d04b      	beq.n	800a768 <_printf_i+0x1ac>
 800a6d0:	4615      	mov	r5, r2
 800a6d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6d6:	fb03 6711 	mls	r7, r3, r1, r6
 800a6da:	5dc7      	ldrb	r7, [r0, r7]
 800a6dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6e0:	4637      	mov	r7, r6
 800a6e2:	42bb      	cmp	r3, r7
 800a6e4:	460e      	mov	r6, r1
 800a6e6:	d9f4      	bls.n	800a6d2 <_printf_i+0x116>
 800a6e8:	2b08      	cmp	r3, #8
 800a6ea:	d10b      	bne.n	800a704 <_printf_i+0x148>
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	07de      	lsls	r6, r3, #31
 800a6f0:	d508      	bpl.n	800a704 <_printf_i+0x148>
 800a6f2:	6923      	ldr	r3, [r4, #16]
 800a6f4:	6861      	ldr	r1, [r4, #4]
 800a6f6:	4299      	cmp	r1, r3
 800a6f8:	bfde      	ittt	le
 800a6fa:	2330      	movle	r3, #48	; 0x30
 800a6fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a700:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a704:	1b52      	subs	r2, r2, r5
 800a706:	6122      	str	r2, [r4, #16]
 800a708:	f8cd a000 	str.w	sl, [sp]
 800a70c:	464b      	mov	r3, r9
 800a70e:	aa03      	add	r2, sp, #12
 800a710:	4621      	mov	r1, r4
 800a712:	4640      	mov	r0, r8
 800a714:	f7ff fee4 	bl	800a4e0 <_printf_common>
 800a718:	3001      	adds	r0, #1
 800a71a:	d14a      	bne.n	800a7b2 <_printf_i+0x1f6>
 800a71c:	f04f 30ff 	mov.w	r0, #4294967295
 800a720:	b004      	add	sp, #16
 800a722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	f043 0320 	orr.w	r3, r3, #32
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	4833      	ldr	r0, [pc, #204]	; (800a7fc <_printf_i+0x240>)
 800a730:	2778      	movs	r7, #120	; 0x78
 800a732:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	6829      	ldr	r1, [r5, #0]
 800a73a:	061f      	lsls	r7, r3, #24
 800a73c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a740:	d402      	bmi.n	800a748 <_printf_i+0x18c>
 800a742:	065f      	lsls	r7, r3, #25
 800a744:	bf48      	it	mi
 800a746:	b2b6      	uxthmi	r6, r6
 800a748:	07df      	lsls	r7, r3, #31
 800a74a:	bf48      	it	mi
 800a74c:	f043 0320 	orrmi.w	r3, r3, #32
 800a750:	6029      	str	r1, [r5, #0]
 800a752:	bf48      	it	mi
 800a754:	6023      	strmi	r3, [r4, #0]
 800a756:	b91e      	cbnz	r6, 800a760 <_printf_i+0x1a4>
 800a758:	6823      	ldr	r3, [r4, #0]
 800a75a:	f023 0320 	bic.w	r3, r3, #32
 800a75e:	6023      	str	r3, [r4, #0]
 800a760:	2310      	movs	r3, #16
 800a762:	e7a7      	b.n	800a6b4 <_printf_i+0xf8>
 800a764:	4824      	ldr	r0, [pc, #144]	; (800a7f8 <_printf_i+0x23c>)
 800a766:	e7e4      	b.n	800a732 <_printf_i+0x176>
 800a768:	4615      	mov	r5, r2
 800a76a:	e7bd      	b.n	800a6e8 <_printf_i+0x12c>
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	6826      	ldr	r6, [r4, #0]
 800a770:	6961      	ldr	r1, [r4, #20]
 800a772:	1d18      	adds	r0, r3, #4
 800a774:	6028      	str	r0, [r5, #0]
 800a776:	0635      	lsls	r5, r6, #24
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	d501      	bpl.n	800a780 <_printf_i+0x1c4>
 800a77c:	6019      	str	r1, [r3, #0]
 800a77e:	e002      	b.n	800a786 <_printf_i+0x1ca>
 800a780:	0670      	lsls	r0, r6, #25
 800a782:	d5fb      	bpl.n	800a77c <_printf_i+0x1c0>
 800a784:	8019      	strh	r1, [r3, #0]
 800a786:	2300      	movs	r3, #0
 800a788:	6123      	str	r3, [r4, #16]
 800a78a:	4615      	mov	r5, r2
 800a78c:	e7bc      	b.n	800a708 <_printf_i+0x14c>
 800a78e:	682b      	ldr	r3, [r5, #0]
 800a790:	1d1a      	adds	r2, r3, #4
 800a792:	602a      	str	r2, [r5, #0]
 800a794:	681d      	ldr	r5, [r3, #0]
 800a796:	6862      	ldr	r2, [r4, #4]
 800a798:	2100      	movs	r1, #0
 800a79a:	4628      	mov	r0, r5
 800a79c:	f7f5 fd18 	bl	80001d0 <memchr>
 800a7a0:	b108      	cbz	r0, 800a7a6 <_printf_i+0x1ea>
 800a7a2:	1b40      	subs	r0, r0, r5
 800a7a4:	6060      	str	r0, [r4, #4]
 800a7a6:	6863      	ldr	r3, [r4, #4]
 800a7a8:	6123      	str	r3, [r4, #16]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7b0:	e7aa      	b.n	800a708 <_printf_i+0x14c>
 800a7b2:	6923      	ldr	r3, [r4, #16]
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	4649      	mov	r1, r9
 800a7b8:	4640      	mov	r0, r8
 800a7ba:	47d0      	blx	sl
 800a7bc:	3001      	adds	r0, #1
 800a7be:	d0ad      	beq.n	800a71c <_printf_i+0x160>
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	079b      	lsls	r3, r3, #30
 800a7c4:	d413      	bmi.n	800a7ee <_printf_i+0x232>
 800a7c6:	68e0      	ldr	r0, [r4, #12]
 800a7c8:	9b03      	ldr	r3, [sp, #12]
 800a7ca:	4298      	cmp	r0, r3
 800a7cc:	bfb8      	it	lt
 800a7ce:	4618      	movlt	r0, r3
 800a7d0:	e7a6      	b.n	800a720 <_printf_i+0x164>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	4632      	mov	r2, r6
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	4640      	mov	r0, r8
 800a7da:	47d0      	blx	sl
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d09d      	beq.n	800a71c <_printf_i+0x160>
 800a7e0:	3501      	adds	r5, #1
 800a7e2:	68e3      	ldr	r3, [r4, #12]
 800a7e4:	9903      	ldr	r1, [sp, #12]
 800a7e6:	1a5b      	subs	r3, r3, r1
 800a7e8:	42ab      	cmp	r3, r5
 800a7ea:	dcf2      	bgt.n	800a7d2 <_printf_i+0x216>
 800a7ec:	e7eb      	b.n	800a7c6 <_printf_i+0x20a>
 800a7ee:	2500      	movs	r5, #0
 800a7f0:	f104 0619 	add.w	r6, r4, #25
 800a7f4:	e7f5      	b.n	800a7e2 <_printf_i+0x226>
 800a7f6:	bf00      	nop
 800a7f8:	0801186e 	.word	0x0801186e
 800a7fc:	0801187f 	.word	0x0801187f

0800a800 <_scanf_float>:
 800a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a804:	b087      	sub	sp, #28
 800a806:	4617      	mov	r7, r2
 800a808:	9303      	str	r3, [sp, #12]
 800a80a:	688b      	ldr	r3, [r1, #8]
 800a80c:	1e5a      	subs	r2, r3, #1
 800a80e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a812:	bf83      	ittte	hi
 800a814:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a818:	195b      	addhi	r3, r3, r5
 800a81a:	9302      	strhi	r3, [sp, #8]
 800a81c:	2300      	movls	r3, #0
 800a81e:	bf86      	itte	hi
 800a820:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a824:	608b      	strhi	r3, [r1, #8]
 800a826:	9302      	strls	r3, [sp, #8]
 800a828:	680b      	ldr	r3, [r1, #0]
 800a82a:	468b      	mov	fp, r1
 800a82c:	2500      	movs	r5, #0
 800a82e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a832:	f84b 3b1c 	str.w	r3, [fp], #28
 800a836:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a83a:	4680      	mov	r8, r0
 800a83c:	460c      	mov	r4, r1
 800a83e:	465e      	mov	r6, fp
 800a840:	46aa      	mov	sl, r5
 800a842:	46a9      	mov	r9, r5
 800a844:	9501      	str	r5, [sp, #4]
 800a846:	68a2      	ldr	r2, [r4, #8]
 800a848:	b152      	cbz	r2, 800a860 <_scanf_float+0x60>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	2b4e      	cmp	r3, #78	; 0x4e
 800a850:	d864      	bhi.n	800a91c <_scanf_float+0x11c>
 800a852:	2b40      	cmp	r3, #64	; 0x40
 800a854:	d83c      	bhi.n	800a8d0 <_scanf_float+0xd0>
 800a856:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a85a:	b2c8      	uxtb	r0, r1
 800a85c:	280e      	cmp	r0, #14
 800a85e:	d93a      	bls.n	800a8d6 <_scanf_float+0xd6>
 800a860:	f1b9 0f00 	cmp.w	r9, #0
 800a864:	d003      	beq.n	800a86e <_scanf_float+0x6e>
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a86c:	6023      	str	r3, [r4, #0]
 800a86e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a872:	f1ba 0f01 	cmp.w	sl, #1
 800a876:	f200 8113 	bhi.w	800aaa0 <_scanf_float+0x2a0>
 800a87a:	455e      	cmp	r6, fp
 800a87c:	f200 8105 	bhi.w	800aa8a <_scanf_float+0x28a>
 800a880:	2501      	movs	r5, #1
 800a882:	4628      	mov	r0, r5
 800a884:	b007      	add	sp, #28
 800a886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a88e:	2a0d      	cmp	r2, #13
 800a890:	d8e6      	bhi.n	800a860 <_scanf_float+0x60>
 800a892:	a101      	add	r1, pc, #4	; (adr r1, 800a898 <_scanf_float+0x98>)
 800a894:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a898:	0800a9d7 	.word	0x0800a9d7
 800a89c:	0800a861 	.word	0x0800a861
 800a8a0:	0800a861 	.word	0x0800a861
 800a8a4:	0800a861 	.word	0x0800a861
 800a8a8:	0800aa37 	.word	0x0800aa37
 800a8ac:	0800aa0f 	.word	0x0800aa0f
 800a8b0:	0800a861 	.word	0x0800a861
 800a8b4:	0800a861 	.word	0x0800a861
 800a8b8:	0800a9e5 	.word	0x0800a9e5
 800a8bc:	0800a861 	.word	0x0800a861
 800a8c0:	0800a861 	.word	0x0800a861
 800a8c4:	0800a861 	.word	0x0800a861
 800a8c8:	0800a861 	.word	0x0800a861
 800a8cc:	0800a99d 	.word	0x0800a99d
 800a8d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a8d4:	e7db      	b.n	800a88e <_scanf_float+0x8e>
 800a8d6:	290e      	cmp	r1, #14
 800a8d8:	d8c2      	bhi.n	800a860 <_scanf_float+0x60>
 800a8da:	a001      	add	r0, pc, #4	; (adr r0, 800a8e0 <_scanf_float+0xe0>)
 800a8dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a8e0:	0800a98f 	.word	0x0800a98f
 800a8e4:	0800a861 	.word	0x0800a861
 800a8e8:	0800a98f 	.word	0x0800a98f
 800a8ec:	0800aa23 	.word	0x0800aa23
 800a8f0:	0800a861 	.word	0x0800a861
 800a8f4:	0800a93d 	.word	0x0800a93d
 800a8f8:	0800a979 	.word	0x0800a979
 800a8fc:	0800a979 	.word	0x0800a979
 800a900:	0800a979 	.word	0x0800a979
 800a904:	0800a979 	.word	0x0800a979
 800a908:	0800a979 	.word	0x0800a979
 800a90c:	0800a979 	.word	0x0800a979
 800a910:	0800a979 	.word	0x0800a979
 800a914:	0800a979 	.word	0x0800a979
 800a918:	0800a979 	.word	0x0800a979
 800a91c:	2b6e      	cmp	r3, #110	; 0x6e
 800a91e:	d809      	bhi.n	800a934 <_scanf_float+0x134>
 800a920:	2b60      	cmp	r3, #96	; 0x60
 800a922:	d8b2      	bhi.n	800a88a <_scanf_float+0x8a>
 800a924:	2b54      	cmp	r3, #84	; 0x54
 800a926:	d077      	beq.n	800aa18 <_scanf_float+0x218>
 800a928:	2b59      	cmp	r3, #89	; 0x59
 800a92a:	d199      	bne.n	800a860 <_scanf_float+0x60>
 800a92c:	2d07      	cmp	r5, #7
 800a92e:	d197      	bne.n	800a860 <_scanf_float+0x60>
 800a930:	2508      	movs	r5, #8
 800a932:	e029      	b.n	800a988 <_scanf_float+0x188>
 800a934:	2b74      	cmp	r3, #116	; 0x74
 800a936:	d06f      	beq.n	800aa18 <_scanf_float+0x218>
 800a938:	2b79      	cmp	r3, #121	; 0x79
 800a93a:	e7f6      	b.n	800a92a <_scanf_float+0x12a>
 800a93c:	6821      	ldr	r1, [r4, #0]
 800a93e:	05c8      	lsls	r0, r1, #23
 800a940:	d51a      	bpl.n	800a978 <_scanf_float+0x178>
 800a942:	9b02      	ldr	r3, [sp, #8]
 800a944:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a948:	6021      	str	r1, [r4, #0]
 800a94a:	f109 0901 	add.w	r9, r9, #1
 800a94e:	b11b      	cbz	r3, 800a958 <_scanf_float+0x158>
 800a950:	3b01      	subs	r3, #1
 800a952:	3201      	adds	r2, #1
 800a954:	9302      	str	r3, [sp, #8]
 800a956:	60a2      	str	r2, [r4, #8]
 800a958:	68a3      	ldr	r3, [r4, #8]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	60a3      	str	r3, [r4, #8]
 800a95e:	6923      	ldr	r3, [r4, #16]
 800a960:	3301      	adds	r3, #1
 800a962:	6123      	str	r3, [r4, #16]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3b01      	subs	r3, #1
 800a968:	2b00      	cmp	r3, #0
 800a96a:	607b      	str	r3, [r7, #4]
 800a96c:	f340 8084 	ble.w	800aa78 <_scanf_float+0x278>
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	603b      	str	r3, [r7, #0]
 800a976:	e766      	b.n	800a846 <_scanf_float+0x46>
 800a978:	eb1a 0f05 	cmn.w	sl, r5
 800a97c:	f47f af70 	bne.w	800a860 <_scanf_float+0x60>
 800a980:	6822      	ldr	r2, [r4, #0]
 800a982:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a986:	6022      	str	r2, [r4, #0]
 800a988:	f806 3b01 	strb.w	r3, [r6], #1
 800a98c:	e7e4      	b.n	800a958 <_scanf_float+0x158>
 800a98e:	6822      	ldr	r2, [r4, #0]
 800a990:	0610      	lsls	r0, r2, #24
 800a992:	f57f af65 	bpl.w	800a860 <_scanf_float+0x60>
 800a996:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a99a:	e7f4      	b.n	800a986 <_scanf_float+0x186>
 800a99c:	f1ba 0f00 	cmp.w	sl, #0
 800a9a0:	d10e      	bne.n	800a9c0 <_scanf_float+0x1c0>
 800a9a2:	f1b9 0f00 	cmp.w	r9, #0
 800a9a6:	d10e      	bne.n	800a9c6 <_scanf_float+0x1c6>
 800a9a8:	6822      	ldr	r2, [r4, #0]
 800a9aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a9ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a9b2:	d108      	bne.n	800a9c6 <_scanf_float+0x1c6>
 800a9b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a9b8:	6022      	str	r2, [r4, #0]
 800a9ba:	f04f 0a01 	mov.w	sl, #1
 800a9be:	e7e3      	b.n	800a988 <_scanf_float+0x188>
 800a9c0:	f1ba 0f02 	cmp.w	sl, #2
 800a9c4:	d055      	beq.n	800aa72 <_scanf_float+0x272>
 800a9c6:	2d01      	cmp	r5, #1
 800a9c8:	d002      	beq.n	800a9d0 <_scanf_float+0x1d0>
 800a9ca:	2d04      	cmp	r5, #4
 800a9cc:	f47f af48 	bne.w	800a860 <_scanf_float+0x60>
 800a9d0:	3501      	adds	r5, #1
 800a9d2:	b2ed      	uxtb	r5, r5
 800a9d4:	e7d8      	b.n	800a988 <_scanf_float+0x188>
 800a9d6:	f1ba 0f01 	cmp.w	sl, #1
 800a9da:	f47f af41 	bne.w	800a860 <_scanf_float+0x60>
 800a9de:	f04f 0a02 	mov.w	sl, #2
 800a9e2:	e7d1      	b.n	800a988 <_scanf_float+0x188>
 800a9e4:	b97d      	cbnz	r5, 800aa06 <_scanf_float+0x206>
 800a9e6:	f1b9 0f00 	cmp.w	r9, #0
 800a9ea:	f47f af3c 	bne.w	800a866 <_scanf_float+0x66>
 800a9ee:	6822      	ldr	r2, [r4, #0]
 800a9f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a9f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a9f8:	f47f af39 	bne.w	800a86e <_scanf_float+0x6e>
 800a9fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa00:	6022      	str	r2, [r4, #0]
 800aa02:	2501      	movs	r5, #1
 800aa04:	e7c0      	b.n	800a988 <_scanf_float+0x188>
 800aa06:	2d03      	cmp	r5, #3
 800aa08:	d0e2      	beq.n	800a9d0 <_scanf_float+0x1d0>
 800aa0a:	2d05      	cmp	r5, #5
 800aa0c:	e7de      	b.n	800a9cc <_scanf_float+0x1cc>
 800aa0e:	2d02      	cmp	r5, #2
 800aa10:	f47f af26 	bne.w	800a860 <_scanf_float+0x60>
 800aa14:	2503      	movs	r5, #3
 800aa16:	e7b7      	b.n	800a988 <_scanf_float+0x188>
 800aa18:	2d06      	cmp	r5, #6
 800aa1a:	f47f af21 	bne.w	800a860 <_scanf_float+0x60>
 800aa1e:	2507      	movs	r5, #7
 800aa20:	e7b2      	b.n	800a988 <_scanf_float+0x188>
 800aa22:	6822      	ldr	r2, [r4, #0]
 800aa24:	0591      	lsls	r1, r2, #22
 800aa26:	f57f af1b 	bpl.w	800a860 <_scanf_float+0x60>
 800aa2a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aa2e:	6022      	str	r2, [r4, #0]
 800aa30:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa34:	e7a8      	b.n	800a988 <_scanf_float+0x188>
 800aa36:	6822      	ldr	r2, [r4, #0]
 800aa38:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aa3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aa40:	d006      	beq.n	800aa50 <_scanf_float+0x250>
 800aa42:	0550      	lsls	r0, r2, #21
 800aa44:	f57f af0c 	bpl.w	800a860 <_scanf_float+0x60>
 800aa48:	f1b9 0f00 	cmp.w	r9, #0
 800aa4c:	f43f af0f 	beq.w	800a86e <_scanf_float+0x6e>
 800aa50:	0591      	lsls	r1, r2, #22
 800aa52:	bf58      	it	pl
 800aa54:	9901      	ldrpl	r1, [sp, #4]
 800aa56:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa5a:	bf58      	it	pl
 800aa5c:	eba9 0101 	subpl.w	r1, r9, r1
 800aa60:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aa64:	bf58      	it	pl
 800aa66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa6a:	6022      	str	r2, [r4, #0]
 800aa6c:	f04f 0900 	mov.w	r9, #0
 800aa70:	e78a      	b.n	800a988 <_scanf_float+0x188>
 800aa72:	f04f 0a03 	mov.w	sl, #3
 800aa76:	e787      	b.n	800a988 <_scanf_float+0x188>
 800aa78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	4640      	mov	r0, r8
 800aa80:	4798      	blx	r3
 800aa82:	2800      	cmp	r0, #0
 800aa84:	f43f aedf 	beq.w	800a846 <_scanf_float+0x46>
 800aa88:	e6ea      	b.n	800a860 <_scanf_float+0x60>
 800aa8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa92:	463a      	mov	r2, r7
 800aa94:	4640      	mov	r0, r8
 800aa96:	4798      	blx	r3
 800aa98:	6923      	ldr	r3, [r4, #16]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	6123      	str	r3, [r4, #16]
 800aa9e:	e6ec      	b.n	800a87a <_scanf_float+0x7a>
 800aaa0:	1e6b      	subs	r3, r5, #1
 800aaa2:	2b06      	cmp	r3, #6
 800aaa4:	d825      	bhi.n	800aaf2 <_scanf_float+0x2f2>
 800aaa6:	2d02      	cmp	r5, #2
 800aaa8:	d836      	bhi.n	800ab18 <_scanf_float+0x318>
 800aaaa:	455e      	cmp	r6, fp
 800aaac:	f67f aee8 	bls.w	800a880 <_scanf_float+0x80>
 800aab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aab4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aab8:	463a      	mov	r2, r7
 800aaba:	4640      	mov	r0, r8
 800aabc:	4798      	blx	r3
 800aabe:	6923      	ldr	r3, [r4, #16]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	6123      	str	r3, [r4, #16]
 800aac4:	e7f1      	b.n	800aaaa <_scanf_float+0x2aa>
 800aac6:	9802      	ldr	r0, [sp, #8]
 800aac8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aacc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aad0:	9002      	str	r0, [sp, #8]
 800aad2:	463a      	mov	r2, r7
 800aad4:	4640      	mov	r0, r8
 800aad6:	4798      	blx	r3
 800aad8:	6923      	ldr	r3, [r4, #16]
 800aada:	3b01      	subs	r3, #1
 800aadc:	6123      	str	r3, [r4, #16]
 800aade:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aae2:	fa5f fa8a 	uxtb.w	sl, sl
 800aae6:	f1ba 0f02 	cmp.w	sl, #2
 800aaea:	d1ec      	bne.n	800aac6 <_scanf_float+0x2c6>
 800aaec:	3d03      	subs	r5, #3
 800aaee:	b2ed      	uxtb	r5, r5
 800aaf0:	1b76      	subs	r6, r6, r5
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	05da      	lsls	r2, r3, #23
 800aaf6:	d52f      	bpl.n	800ab58 <_scanf_float+0x358>
 800aaf8:	055b      	lsls	r3, r3, #21
 800aafa:	d510      	bpl.n	800ab1e <_scanf_float+0x31e>
 800aafc:	455e      	cmp	r6, fp
 800aafe:	f67f aebf 	bls.w	800a880 <_scanf_float+0x80>
 800ab02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab0a:	463a      	mov	r2, r7
 800ab0c:	4640      	mov	r0, r8
 800ab0e:	4798      	blx	r3
 800ab10:	6923      	ldr	r3, [r4, #16]
 800ab12:	3b01      	subs	r3, #1
 800ab14:	6123      	str	r3, [r4, #16]
 800ab16:	e7f1      	b.n	800aafc <_scanf_float+0x2fc>
 800ab18:	46aa      	mov	sl, r5
 800ab1a:	9602      	str	r6, [sp, #8]
 800ab1c:	e7df      	b.n	800aade <_scanf_float+0x2de>
 800ab1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ab22:	6923      	ldr	r3, [r4, #16]
 800ab24:	2965      	cmp	r1, #101	; 0x65
 800ab26:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab2a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ab2e:	6123      	str	r3, [r4, #16]
 800ab30:	d00c      	beq.n	800ab4c <_scanf_float+0x34c>
 800ab32:	2945      	cmp	r1, #69	; 0x45
 800ab34:	d00a      	beq.n	800ab4c <_scanf_float+0x34c>
 800ab36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab3a:	463a      	mov	r2, r7
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	4798      	blx	r3
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	1eb5      	subs	r5, r6, #2
 800ab4a:	6123      	str	r3, [r4, #16]
 800ab4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab50:	463a      	mov	r2, r7
 800ab52:	4640      	mov	r0, r8
 800ab54:	4798      	blx	r3
 800ab56:	462e      	mov	r6, r5
 800ab58:	6825      	ldr	r5, [r4, #0]
 800ab5a:	f015 0510 	ands.w	r5, r5, #16
 800ab5e:	d158      	bne.n	800ac12 <_scanf_float+0x412>
 800ab60:	7035      	strb	r5, [r6, #0]
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab6c:	d11c      	bne.n	800aba8 <_scanf_float+0x3a8>
 800ab6e:	9b01      	ldr	r3, [sp, #4]
 800ab70:	454b      	cmp	r3, r9
 800ab72:	eba3 0209 	sub.w	r2, r3, r9
 800ab76:	d124      	bne.n	800abc2 <_scanf_float+0x3c2>
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4659      	mov	r1, fp
 800ab7c:	4640      	mov	r0, r8
 800ab7e:	f002 fbcf 	bl	800d320 <_strtod_r>
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	6821      	ldr	r1, [r4, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f011 0f02 	tst.w	r1, #2
 800ab8c:	ec57 6b10 	vmov	r6, r7, d0
 800ab90:	f103 0204 	add.w	r2, r3, #4
 800ab94:	d020      	beq.n	800abd8 <_scanf_float+0x3d8>
 800ab96:	9903      	ldr	r1, [sp, #12]
 800ab98:	600a      	str	r2, [r1, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	e9c3 6700 	strd	r6, r7, [r3]
 800aba0:	68e3      	ldr	r3, [r4, #12]
 800aba2:	3301      	adds	r3, #1
 800aba4:	60e3      	str	r3, [r4, #12]
 800aba6:	e66c      	b.n	800a882 <_scanf_float+0x82>
 800aba8:	9b04      	ldr	r3, [sp, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0e4      	beq.n	800ab78 <_scanf_float+0x378>
 800abae:	9905      	ldr	r1, [sp, #20]
 800abb0:	230a      	movs	r3, #10
 800abb2:	462a      	mov	r2, r5
 800abb4:	3101      	adds	r1, #1
 800abb6:	4640      	mov	r0, r8
 800abb8:	f002 fc3a 	bl	800d430 <_strtol_r>
 800abbc:	9b04      	ldr	r3, [sp, #16]
 800abbe:	9e05      	ldr	r6, [sp, #20]
 800abc0:	1ac2      	subs	r2, r0, r3
 800abc2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800abc6:	429e      	cmp	r6, r3
 800abc8:	bf28      	it	cs
 800abca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800abce:	4912      	ldr	r1, [pc, #72]	; (800ac18 <_scanf_float+0x418>)
 800abd0:	4630      	mov	r0, r6
 800abd2:	f000 f91b 	bl	800ae0c <siprintf>
 800abd6:	e7cf      	b.n	800ab78 <_scanf_float+0x378>
 800abd8:	f011 0f04 	tst.w	r1, #4
 800abdc:	9903      	ldr	r1, [sp, #12]
 800abde:	600a      	str	r2, [r1, #0]
 800abe0:	d1db      	bne.n	800ab9a <_scanf_float+0x39a>
 800abe2:	f8d3 8000 	ldr.w	r8, [r3]
 800abe6:	ee10 2a10 	vmov	r2, s0
 800abea:	ee10 0a10 	vmov	r0, s0
 800abee:	463b      	mov	r3, r7
 800abf0:	4639      	mov	r1, r7
 800abf2:	f7f5 ff9b 	bl	8000b2c <__aeabi_dcmpun>
 800abf6:	b128      	cbz	r0, 800ac04 <_scanf_float+0x404>
 800abf8:	4808      	ldr	r0, [pc, #32]	; (800ac1c <_scanf_float+0x41c>)
 800abfa:	f000 fa09 	bl	800b010 <nanf>
 800abfe:	ed88 0a00 	vstr	s0, [r8]
 800ac02:	e7cd      	b.n	800aba0 <_scanf_float+0x3a0>
 800ac04:	4630      	mov	r0, r6
 800ac06:	4639      	mov	r1, r7
 800ac08:	f7f5 ffee 	bl	8000be8 <__aeabi_d2f>
 800ac0c:	f8c8 0000 	str.w	r0, [r8]
 800ac10:	e7c6      	b.n	800aba0 <_scanf_float+0x3a0>
 800ac12:	2500      	movs	r5, #0
 800ac14:	e635      	b.n	800a882 <_scanf_float+0x82>
 800ac16:	bf00      	nop
 800ac18:	08011890 	.word	0x08011890
 800ac1c:	08011c25 	.word	0x08011c25

0800ac20 <std>:
 800ac20:	2300      	movs	r3, #0
 800ac22:	b510      	push	{r4, lr}
 800ac24:	4604      	mov	r4, r0
 800ac26:	e9c0 3300 	strd	r3, r3, [r0]
 800ac2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac2e:	6083      	str	r3, [r0, #8]
 800ac30:	8181      	strh	r1, [r0, #12]
 800ac32:	6643      	str	r3, [r0, #100]	; 0x64
 800ac34:	81c2      	strh	r2, [r0, #14]
 800ac36:	6183      	str	r3, [r0, #24]
 800ac38:	4619      	mov	r1, r3
 800ac3a:	2208      	movs	r2, #8
 800ac3c:	305c      	adds	r0, #92	; 0x5c
 800ac3e:	f000 f948 	bl	800aed2 <memset>
 800ac42:	4b0d      	ldr	r3, [pc, #52]	; (800ac78 <std+0x58>)
 800ac44:	6263      	str	r3, [r4, #36]	; 0x24
 800ac46:	4b0d      	ldr	r3, [pc, #52]	; (800ac7c <std+0x5c>)
 800ac48:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac4a:	4b0d      	ldr	r3, [pc, #52]	; (800ac80 <std+0x60>)
 800ac4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	; (800ac84 <std+0x64>)
 800ac50:	6323      	str	r3, [r4, #48]	; 0x30
 800ac52:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <std+0x68>)
 800ac54:	6224      	str	r4, [r4, #32]
 800ac56:	429c      	cmp	r4, r3
 800ac58:	d006      	beq.n	800ac68 <std+0x48>
 800ac5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ac5e:	4294      	cmp	r4, r2
 800ac60:	d002      	beq.n	800ac68 <std+0x48>
 800ac62:	33d0      	adds	r3, #208	; 0xd0
 800ac64:	429c      	cmp	r4, r3
 800ac66:	d105      	bne.n	800ac74 <std+0x54>
 800ac68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac70:	f000 b9bc 	b.w	800afec <__retarget_lock_init_recursive>
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	bf00      	nop
 800ac78:	0800ae4d 	.word	0x0800ae4d
 800ac7c:	0800ae6f 	.word	0x0800ae6f
 800ac80:	0800aea7 	.word	0x0800aea7
 800ac84:	0800aecb 	.word	0x0800aecb
 800ac88:	200009e0 	.word	0x200009e0

0800ac8c <stdio_exit_handler>:
 800ac8c:	4a02      	ldr	r2, [pc, #8]	; (800ac98 <stdio_exit_handler+0xc>)
 800ac8e:	4903      	ldr	r1, [pc, #12]	; (800ac9c <stdio_exit_handler+0x10>)
 800ac90:	4803      	ldr	r0, [pc, #12]	; (800aca0 <stdio_exit_handler+0x14>)
 800ac92:	f000 b869 	b.w	800ad68 <_fwalk_sglue>
 800ac96:	bf00      	nop
 800ac98:	2000000c 	.word	0x2000000c
 800ac9c:	0800d7f1 	.word	0x0800d7f1
 800aca0:	20000018 	.word	0x20000018

0800aca4 <cleanup_stdio>:
 800aca4:	6841      	ldr	r1, [r0, #4]
 800aca6:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <cleanup_stdio+0x34>)
 800aca8:	4299      	cmp	r1, r3
 800acaa:	b510      	push	{r4, lr}
 800acac:	4604      	mov	r4, r0
 800acae:	d001      	beq.n	800acb4 <cleanup_stdio+0x10>
 800acb0:	f002 fd9e 	bl	800d7f0 <_fflush_r>
 800acb4:	68a1      	ldr	r1, [r4, #8]
 800acb6:	4b09      	ldr	r3, [pc, #36]	; (800acdc <cleanup_stdio+0x38>)
 800acb8:	4299      	cmp	r1, r3
 800acba:	d002      	beq.n	800acc2 <cleanup_stdio+0x1e>
 800acbc:	4620      	mov	r0, r4
 800acbe:	f002 fd97 	bl	800d7f0 <_fflush_r>
 800acc2:	68e1      	ldr	r1, [r4, #12]
 800acc4:	4b06      	ldr	r3, [pc, #24]	; (800ace0 <cleanup_stdio+0x3c>)
 800acc6:	4299      	cmp	r1, r3
 800acc8:	d004      	beq.n	800acd4 <cleanup_stdio+0x30>
 800acca:	4620      	mov	r0, r4
 800accc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd0:	f002 bd8e 	b.w	800d7f0 <_fflush_r>
 800acd4:	bd10      	pop	{r4, pc}
 800acd6:	bf00      	nop
 800acd8:	200009e0 	.word	0x200009e0
 800acdc:	20000a48 	.word	0x20000a48
 800ace0:	20000ab0 	.word	0x20000ab0

0800ace4 <global_stdio_init.part.0>:
 800ace4:	b510      	push	{r4, lr}
 800ace6:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <global_stdio_init.part.0+0x30>)
 800ace8:	4c0b      	ldr	r4, [pc, #44]	; (800ad18 <global_stdio_init.part.0+0x34>)
 800acea:	4a0c      	ldr	r2, [pc, #48]	; (800ad1c <global_stdio_init.part.0+0x38>)
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	4620      	mov	r0, r4
 800acf0:	2200      	movs	r2, #0
 800acf2:	2104      	movs	r1, #4
 800acf4:	f7ff ff94 	bl	800ac20 <std>
 800acf8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800acfc:	2201      	movs	r2, #1
 800acfe:	2109      	movs	r1, #9
 800ad00:	f7ff ff8e 	bl	800ac20 <std>
 800ad04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ad08:	2202      	movs	r2, #2
 800ad0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad0e:	2112      	movs	r1, #18
 800ad10:	f7ff bf86 	b.w	800ac20 <std>
 800ad14:	20000b18 	.word	0x20000b18
 800ad18:	200009e0 	.word	0x200009e0
 800ad1c:	0800ac8d 	.word	0x0800ac8d

0800ad20 <__sfp_lock_acquire>:
 800ad20:	4801      	ldr	r0, [pc, #4]	; (800ad28 <__sfp_lock_acquire+0x8>)
 800ad22:	f000 b964 	b.w	800afee <__retarget_lock_acquire_recursive>
 800ad26:	bf00      	nop
 800ad28:	20000b21 	.word	0x20000b21

0800ad2c <__sfp_lock_release>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	; (800ad34 <__sfp_lock_release+0x8>)
 800ad2e:	f000 b95f 	b.w	800aff0 <__retarget_lock_release_recursive>
 800ad32:	bf00      	nop
 800ad34:	20000b21 	.word	0x20000b21

0800ad38 <__sinit>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	f7ff fff0 	bl	800ad20 <__sfp_lock_acquire>
 800ad40:	6a23      	ldr	r3, [r4, #32]
 800ad42:	b11b      	cbz	r3, 800ad4c <__sinit+0x14>
 800ad44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad48:	f7ff bff0 	b.w	800ad2c <__sfp_lock_release>
 800ad4c:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <__sinit+0x28>)
 800ad4e:	6223      	str	r3, [r4, #32]
 800ad50:	4b04      	ldr	r3, [pc, #16]	; (800ad64 <__sinit+0x2c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1f5      	bne.n	800ad44 <__sinit+0xc>
 800ad58:	f7ff ffc4 	bl	800ace4 <global_stdio_init.part.0>
 800ad5c:	e7f2      	b.n	800ad44 <__sinit+0xc>
 800ad5e:	bf00      	nop
 800ad60:	0800aca5 	.word	0x0800aca5
 800ad64:	20000b18 	.word	0x20000b18

0800ad68 <_fwalk_sglue>:
 800ad68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	4688      	mov	r8, r1
 800ad70:	4614      	mov	r4, r2
 800ad72:	2600      	movs	r6, #0
 800ad74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad78:	f1b9 0901 	subs.w	r9, r9, #1
 800ad7c:	d505      	bpl.n	800ad8a <_fwalk_sglue+0x22>
 800ad7e:	6824      	ldr	r4, [r4, #0]
 800ad80:	2c00      	cmp	r4, #0
 800ad82:	d1f7      	bne.n	800ad74 <_fwalk_sglue+0xc>
 800ad84:	4630      	mov	r0, r6
 800ad86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad8a:	89ab      	ldrh	r3, [r5, #12]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d907      	bls.n	800ada0 <_fwalk_sglue+0x38>
 800ad90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad94:	3301      	adds	r3, #1
 800ad96:	d003      	beq.n	800ada0 <_fwalk_sglue+0x38>
 800ad98:	4629      	mov	r1, r5
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	47c0      	blx	r8
 800ad9e:	4306      	orrs	r6, r0
 800ada0:	3568      	adds	r5, #104	; 0x68
 800ada2:	e7e9      	b.n	800ad78 <_fwalk_sglue+0x10>

0800ada4 <sniprintf>:
 800ada4:	b40c      	push	{r2, r3}
 800ada6:	b530      	push	{r4, r5, lr}
 800ada8:	4b17      	ldr	r3, [pc, #92]	; (800ae08 <sniprintf+0x64>)
 800adaa:	1e0c      	subs	r4, r1, #0
 800adac:	681d      	ldr	r5, [r3, #0]
 800adae:	b09d      	sub	sp, #116	; 0x74
 800adb0:	da08      	bge.n	800adc4 <sniprintf+0x20>
 800adb2:	238b      	movs	r3, #139	; 0x8b
 800adb4:	602b      	str	r3, [r5, #0]
 800adb6:	f04f 30ff 	mov.w	r0, #4294967295
 800adba:	b01d      	add	sp, #116	; 0x74
 800adbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adc0:	b002      	add	sp, #8
 800adc2:	4770      	bx	lr
 800adc4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800adc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800adcc:	bf14      	ite	ne
 800adce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800add2:	4623      	moveq	r3, r4
 800add4:	9304      	str	r3, [sp, #16]
 800add6:	9307      	str	r3, [sp, #28]
 800add8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800addc:	9002      	str	r0, [sp, #8]
 800adde:	9006      	str	r0, [sp, #24]
 800ade0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ade4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ade6:	ab21      	add	r3, sp, #132	; 0x84
 800ade8:	a902      	add	r1, sp, #8
 800adea:	4628      	mov	r0, r5
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	f002 fb7b 	bl	800d4e8 <_svfiprintf_r>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	bfbc      	itt	lt
 800adf6:	238b      	movlt	r3, #139	; 0x8b
 800adf8:	602b      	strlt	r3, [r5, #0]
 800adfa:	2c00      	cmp	r4, #0
 800adfc:	d0dd      	beq.n	800adba <sniprintf+0x16>
 800adfe:	9b02      	ldr	r3, [sp, #8]
 800ae00:	2200      	movs	r2, #0
 800ae02:	701a      	strb	r2, [r3, #0]
 800ae04:	e7d9      	b.n	800adba <sniprintf+0x16>
 800ae06:	bf00      	nop
 800ae08:	20000064 	.word	0x20000064

0800ae0c <siprintf>:
 800ae0c:	b40e      	push	{r1, r2, r3}
 800ae0e:	b500      	push	{lr}
 800ae10:	b09c      	sub	sp, #112	; 0x70
 800ae12:	ab1d      	add	r3, sp, #116	; 0x74
 800ae14:	9002      	str	r0, [sp, #8]
 800ae16:	9006      	str	r0, [sp, #24]
 800ae18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae1c:	4809      	ldr	r0, [pc, #36]	; (800ae44 <siprintf+0x38>)
 800ae1e:	9107      	str	r1, [sp, #28]
 800ae20:	9104      	str	r1, [sp, #16]
 800ae22:	4909      	ldr	r1, [pc, #36]	; (800ae48 <siprintf+0x3c>)
 800ae24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae28:	9105      	str	r1, [sp, #20]
 800ae2a:	6800      	ldr	r0, [r0, #0]
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	a902      	add	r1, sp, #8
 800ae30:	f002 fb5a 	bl	800d4e8 <_svfiprintf_r>
 800ae34:	9b02      	ldr	r3, [sp, #8]
 800ae36:	2200      	movs	r2, #0
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	b01c      	add	sp, #112	; 0x70
 800ae3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae40:	b003      	add	sp, #12
 800ae42:	4770      	bx	lr
 800ae44:	20000064 	.word	0x20000064
 800ae48:	ffff0208 	.word	0xffff0208

0800ae4c <__sread>:
 800ae4c:	b510      	push	{r4, lr}
 800ae4e:	460c      	mov	r4, r1
 800ae50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae54:	f000 f86c 	bl	800af30 <_read_r>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	bfab      	itete	ge
 800ae5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ae60:	181b      	addge	r3, r3, r0
 800ae62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae66:	bfac      	ite	ge
 800ae68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae6a:	81a3      	strhlt	r3, [r4, #12]
 800ae6c:	bd10      	pop	{r4, pc}

0800ae6e <__swrite>:
 800ae6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae72:	461f      	mov	r7, r3
 800ae74:	898b      	ldrh	r3, [r1, #12]
 800ae76:	05db      	lsls	r3, r3, #23
 800ae78:	4605      	mov	r5, r0
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	4616      	mov	r6, r2
 800ae7e:	d505      	bpl.n	800ae8c <__swrite+0x1e>
 800ae80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae84:	2302      	movs	r3, #2
 800ae86:	2200      	movs	r2, #0
 800ae88:	f000 f840 	bl	800af0c <_lseek_r>
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae96:	81a3      	strh	r3, [r4, #12]
 800ae98:	4632      	mov	r2, r6
 800ae9a:	463b      	mov	r3, r7
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aea2:	f000 b867 	b.w	800af74 <_write_r>

0800aea6 <__sseek>:
 800aea6:	b510      	push	{r4, lr}
 800aea8:	460c      	mov	r4, r1
 800aeaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeae:	f000 f82d 	bl	800af0c <_lseek_r>
 800aeb2:	1c43      	adds	r3, r0, #1
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	bf15      	itete	ne
 800aeb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800aeba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aec2:	81a3      	strheq	r3, [r4, #12]
 800aec4:	bf18      	it	ne
 800aec6:	81a3      	strhne	r3, [r4, #12]
 800aec8:	bd10      	pop	{r4, pc}

0800aeca <__sclose>:
 800aeca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aece:	f000 b80d 	b.w	800aeec <_close_r>

0800aed2 <memset>:
 800aed2:	4402      	add	r2, r0
 800aed4:	4603      	mov	r3, r0
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d100      	bne.n	800aedc <memset+0xa>
 800aeda:	4770      	bx	lr
 800aedc:	f803 1b01 	strb.w	r1, [r3], #1
 800aee0:	e7f9      	b.n	800aed6 <memset+0x4>
	...

0800aee4 <_localeconv_r>:
 800aee4:	4800      	ldr	r0, [pc, #0]	; (800aee8 <_localeconv_r+0x4>)
 800aee6:	4770      	bx	lr
 800aee8:	20000158 	.word	0x20000158

0800aeec <_close_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4d06      	ldr	r5, [pc, #24]	; (800af08 <_close_r+0x1c>)
 800aef0:	2300      	movs	r3, #0
 800aef2:	4604      	mov	r4, r0
 800aef4:	4608      	mov	r0, r1
 800aef6:	602b      	str	r3, [r5, #0]
 800aef8:	f7f9 fc19 	bl	800472e <_close>
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	d102      	bne.n	800af06 <_close_r+0x1a>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	b103      	cbz	r3, 800af06 <_close_r+0x1a>
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	20000b1c 	.word	0x20000b1c

0800af0c <_lseek_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4d07      	ldr	r5, [pc, #28]	; (800af2c <_lseek_r+0x20>)
 800af10:	4604      	mov	r4, r0
 800af12:	4608      	mov	r0, r1
 800af14:	4611      	mov	r1, r2
 800af16:	2200      	movs	r2, #0
 800af18:	602a      	str	r2, [r5, #0]
 800af1a:	461a      	mov	r2, r3
 800af1c:	f7f9 fc2e 	bl	800477c <_lseek>
 800af20:	1c43      	adds	r3, r0, #1
 800af22:	d102      	bne.n	800af2a <_lseek_r+0x1e>
 800af24:	682b      	ldr	r3, [r5, #0]
 800af26:	b103      	cbz	r3, 800af2a <_lseek_r+0x1e>
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	bd38      	pop	{r3, r4, r5, pc}
 800af2c:	20000b1c 	.word	0x20000b1c

0800af30 <_read_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	4d07      	ldr	r5, [pc, #28]	; (800af50 <_read_r+0x20>)
 800af34:	4604      	mov	r4, r0
 800af36:	4608      	mov	r0, r1
 800af38:	4611      	mov	r1, r2
 800af3a:	2200      	movs	r2, #0
 800af3c:	602a      	str	r2, [r5, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	f7f9 fbbc 	bl	80046bc <_read>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d102      	bne.n	800af4e <_read_r+0x1e>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	b103      	cbz	r3, 800af4e <_read_r+0x1e>
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	20000b1c 	.word	0x20000b1c

0800af54 <_sbrk_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d06      	ldr	r5, [pc, #24]	; (800af70 <_sbrk_r+0x1c>)
 800af58:	2300      	movs	r3, #0
 800af5a:	4604      	mov	r4, r0
 800af5c:	4608      	mov	r0, r1
 800af5e:	602b      	str	r3, [r5, #0]
 800af60:	f7f9 fc1a 	bl	8004798 <_sbrk>
 800af64:	1c43      	adds	r3, r0, #1
 800af66:	d102      	bne.n	800af6e <_sbrk_r+0x1a>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	b103      	cbz	r3, 800af6e <_sbrk_r+0x1a>
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	20000b1c 	.word	0x20000b1c

0800af74 <_write_r>:
 800af74:	b538      	push	{r3, r4, r5, lr}
 800af76:	4d07      	ldr	r5, [pc, #28]	; (800af94 <_write_r+0x20>)
 800af78:	4604      	mov	r4, r0
 800af7a:	4608      	mov	r0, r1
 800af7c:	4611      	mov	r1, r2
 800af7e:	2200      	movs	r2, #0
 800af80:	602a      	str	r2, [r5, #0]
 800af82:	461a      	mov	r2, r3
 800af84:	f7f9 fbb7 	bl	80046f6 <_write>
 800af88:	1c43      	adds	r3, r0, #1
 800af8a:	d102      	bne.n	800af92 <_write_r+0x1e>
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	b103      	cbz	r3, 800af92 <_write_r+0x1e>
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	20000b1c 	.word	0x20000b1c

0800af98 <__errno>:
 800af98:	4b01      	ldr	r3, [pc, #4]	; (800afa0 <__errno+0x8>)
 800af9a:	6818      	ldr	r0, [r3, #0]
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	20000064 	.word	0x20000064

0800afa4 <__libc_init_array>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	4d0d      	ldr	r5, [pc, #52]	; (800afdc <__libc_init_array+0x38>)
 800afa8:	4c0d      	ldr	r4, [pc, #52]	; (800afe0 <__libc_init_array+0x3c>)
 800afaa:	1b64      	subs	r4, r4, r5
 800afac:	10a4      	asrs	r4, r4, #2
 800afae:	2600      	movs	r6, #0
 800afb0:	42a6      	cmp	r6, r4
 800afb2:	d109      	bne.n	800afc8 <__libc_init_array+0x24>
 800afb4:	4d0b      	ldr	r5, [pc, #44]	; (800afe4 <__libc_init_array+0x40>)
 800afb6:	4c0c      	ldr	r4, [pc, #48]	; (800afe8 <__libc_init_array+0x44>)
 800afb8:	f005 fee2 	bl	8010d80 <_init>
 800afbc:	1b64      	subs	r4, r4, r5
 800afbe:	10a4      	asrs	r4, r4, #2
 800afc0:	2600      	movs	r6, #0
 800afc2:	42a6      	cmp	r6, r4
 800afc4:	d105      	bne.n	800afd2 <__libc_init_array+0x2e>
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afcc:	4798      	blx	r3
 800afce:	3601      	adds	r6, #1
 800afd0:	e7ee      	b.n	800afb0 <__libc_init_array+0xc>
 800afd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd6:	4798      	blx	r3
 800afd8:	3601      	adds	r6, #1
 800afda:	e7f2      	b.n	800afc2 <__libc_init_array+0x1e>
 800afdc:	08011f08 	.word	0x08011f08
 800afe0:	08011f08 	.word	0x08011f08
 800afe4:	08011f08 	.word	0x08011f08
 800afe8:	08011f0c 	.word	0x08011f0c

0800afec <__retarget_lock_init_recursive>:
 800afec:	4770      	bx	lr

0800afee <__retarget_lock_acquire_recursive>:
 800afee:	4770      	bx	lr

0800aff0 <__retarget_lock_release_recursive>:
 800aff0:	4770      	bx	lr

0800aff2 <memcpy>:
 800aff2:	440a      	add	r2, r1
 800aff4:	4291      	cmp	r1, r2
 800aff6:	f100 33ff 	add.w	r3, r0, #4294967295
 800affa:	d100      	bne.n	800affe <memcpy+0xc>
 800affc:	4770      	bx	lr
 800affe:	b510      	push	{r4, lr}
 800b000:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b004:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b008:	4291      	cmp	r1, r2
 800b00a:	d1f9      	bne.n	800b000 <memcpy+0xe>
 800b00c:	bd10      	pop	{r4, pc}
	...

0800b010 <nanf>:
 800b010:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b018 <nanf+0x8>
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	7fc00000 	.word	0x7fc00000

0800b01c <quorem>:
 800b01c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b020:	6903      	ldr	r3, [r0, #16]
 800b022:	690c      	ldr	r4, [r1, #16]
 800b024:	42a3      	cmp	r3, r4
 800b026:	4607      	mov	r7, r0
 800b028:	db7e      	blt.n	800b128 <quorem+0x10c>
 800b02a:	3c01      	subs	r4, #1
 800b02c:	f101 0814 	add.w	r8, r1, #20
 800b030:	f100 0514 	add.w	r5, r0, #20
 800b034:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b038:	9301      	str	r3, [sp, #4]
 800b03a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b03e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b042:	3301      	adds	r3, #1
 800b044:	429a      	cmp	r2, r3
 800b046:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b04a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b04e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b052:	d331      	bcc.n	800b0b8 <quorem+0x9c>
 800b054:	f04f 0e00 	mov.w	lr, #0
 800b058:	4640      	mov	r0, r8
 800b05a:	46ac      	mov	ip, r5
 800b05c:	46f2      	mov	sl, lr
 800b05e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b062:	b293      	uxth	r3, r2
 800b064:	fb06 e303 	mla	r3, r6, r3, lr
 800b068:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b06c:	0c1a      	lsrs	r2, r3, #16
 800b06e:	b29b      	uxth	r3, r3
 800b070:	ebaa 0303 	sub.w	r3, sl, r3
 800b074:	f8dc a000 	ldr.w	sl, [ip]
 800b078:	fa13 f38a 	uxtah	r3, r3, sl
 800b07c:	fb06 220e 	mla	r2, r6, lr, r2
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	9b00      	ldr	r3, [sp, #0]
 800b084:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b088:	b292      	uxth	r2, r2
 800b08a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b08e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b092:	f8bd 3000 	ldrh.w	r3, [sp]
 800b096:	4581      	cmp	r9, r0
 800b098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b09c:	f84c 3b04 	str.w	r3, [ip], #4
 800b0a0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b0a4:	d2db      	bcs.n	800b05e <quorem+0x42>
 800b0a6:	f855 300b 	ldr.w	r3, [r5, fp]
 800b0aa:	b92b      	cbnz	r3, 800b0b8 <quorem+0x9c>
 800b0ac:	9b01      	ldr	r3, [sp, #4]
 800b0ae:	3b04      	subs	r3, #4
 800b0b0:	429d      	cmp	r5, r3
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	d32c      	bcc.n	800b110 <quorem+0xf4>
 800b0b6:	613c      	str	r4, [r7, #16]
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	f001 f93d 	bl	800c338 <__mcmp>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	db22      	blt.n	800b108 <quorem+0xec>
 800b0c2:	3601      	adds	r6, #1
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0cc:	f8d1 c000 	ldr.w	ip, [r1]
 800b0d0:	b293      	uxth	r3, r2
 800b0d2:	1ac3      	subs	r3, r0, r3
 800b0d4:	0c12      	lsrs	r2, r2, #16
 800b0d6:	fa13 f38c 	uxtah	r3, r3, ip
 800b0da:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b0de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0e8:	45c1      	cmp	r9, r8
 800b0ea:	f841 3b04 	str.w	r3, [r1], #4
 800b0ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b0f2:	d2e9      	bcs.n	800b0c8 <quorem+0xac>
 800b0f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0fc:	b922      	cbnz	r2, 800b108 <quorem+0xec>
 800b0fe:	3b04      	subs	r3, #4
 800b100:	429d      	cmp	r5, r3
 800b102:	461a      	mov	r2, r3
 800b104:	d30a      	bcc.n	800b11c <quorem+0x100>
 800b106:	613c      	str	r4, [r7, #16]
 800b108:	4630      	mov	r0, r6
 800b10a:	b003      	add	sp, #12
 800b10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b110:	6812      	ldr	r2, [r2, #0]
 800b112:	3b04      	subs	r3, #4
 800b114:	2a00      	cmp	r2, #0
 800b116:	d1ce      	bne.n	800b0b6 <quorem+0x9a>
 800b118:	3c01      	subs	r4, #1
 800b11a:	e7c9      	b.n	800b0b0 <quorem+0x94>
 800b11c:	6812      	ldr	r2, [r2, #0]
 800b11e:	3b04      	subs	r3, #4
 800b120:	2a00      	cmp	r2, #0
 800b122:	d1f0      	bne.n	800b106 <quorem+0xea>
 800b124:	3c01      	subs	r4, #1
 800b126:	e7eb      	b.n	800b100 <quorem+0xe4>
 800b128:	2000      	movs	r0, #0
 800b12a:	e7ee      	b.n	800b10a <quorem+0xee>
 800b12c:	0000      	movs	r0, r0
	...

0800b130 <_dtoa_r>:
 800b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	ed2d 8b04 	vpush	{d8-d9}
 800b138:	69c5      	ldr	r5, [r0, #28]
 800b13a:	b093      	sub	sp, #76	; 0x4c
 800b13c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b140:	ec57 6b10 	vmov	r6, r7, d0
 800b144:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b148:	9107      	str	r1, [sp, #28]
 800b14a:	4604      	mov	r4, r0
 800b14c:	920a      	str	r2, [sp, #40]	; 0x28
 800b14e:	930d      	str	r3, [sp, #52]	; 0x34
 800b150:	b975      	cbnz	r5, 800b170 <_dtoa_r+0x40>
 800b152:	2010      	movs	r0, #16
 800b154:	f7fe fe32 	bl	8009dbc <malloc>
 800b158:	4602      	mov	r2, r0
 800b15a:	61e0      	str	r0, [r4, #28]
 800b15c:	b920      	cbnz	r0, 800b168 <_dtoa_r+0x38>
 800b15e:	4bae      	ldr	r3, [pc, #696]	; (800b418 <_dtoa_r+0x2e8>)
 800b160:	21ef      	movs	r1, #239	; 0xef
 800b162:	48ae      	ldr	r0, [pc, #696]	; (800b41c <_dtoa_r+0x2ec>)
 800b164:	f002 fba0 	bl	800d8a8 <__assert_func>
 800b168:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b16c:	6005      	str	r5, [r0, #0]
 800b16e:	60c5      	str	r5, [r0, #12]
 800b170:	69e3      	ldr	r3, [r4, #28]
 800b172:	6819      	ldr	r1, [r3, #0]
 800b174:	b151      	cbz	r1, 800b18c <_dtoa_r+0x5c>
 800b176:	685a      	ldr	r2, [r3, #4]
 800b178:	604a      	str	r2, [r1, #4]
 800b17a:	2301      	movs	r3, #1
 800b17c:	4093      	lsls	r3, r2
 800b17e:	608b      	str	r3, [r1, #8]
 800b180:	4620      	mov	r0, r4
 800b182:	f000 fe53 	bl	800be2c <_Bfree>
 800b186:	69e3      	ldr	r3, [r4, #28]
 800b188:	2200      	movs	r2, #0
 800b18a:	601a      	str	r2, [r3, #0]
 800b18c:	1e3b      	subs	r3, r7, #0
 800b18e:	bfbb      	ittet	lt
 800b190:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b194:	9303      	strlt	r3, [sp, #12]
 800b196:	2300      	movge	r3, #0
 800b198:	2201      	movlt	r2, #1
 800b19a:	bfac      	ite	ge
 800b19c:	f8c8 3000 	strge.w	r3, [r8]
 800b1a0:	f8c8 2000 	strlt.w	r2, [r8]
 800b1a4:	4b9e      	ldr	r3, [pc, #632]	; (800b420 <_dtoa_r+0x2f0>)
 800b1a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b1aa:	ea33 0308 	bics.w	r3, r3, r8
 800b1ae:	d11b      	bne.n	800b1e8 <_dtoa_r+0xb8>
 800b1b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b1bc:	4333      	orrs	r3, r6
 800b1be:	f000 8593 	beq.w	800bce8 <_dtoa_r+0xbb8>
 800b1c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1c4:	b963      	cbnz	r3, 800b1e0 <_dtoa_r+0xb0>
 800b1c6:	4b97      	ldr	r3, [pc, #604]	; (800b424 <_dtoa_r+0x2f4>)
 800b1c8:	e027      	b.n	800b21a <_dtoa_r+0xea>
 800b1ca:	4b97      	ldr	r3, [pc, #604]	; (800b428 <_dtoa_r+0x2f8>)
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	3308      	adds	r3, #8
 800b1d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1d2:	6013      	str	r3, [r2, #0]
 800b1d4:	9800      	ldr	r0, [sp, #0]
 800b1d6:	b013      	add	sp, #76	; 0x4c
 800b1d8:	ecbd 8b04 	vpop	{d8-d9}
 800b1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e0:	4b90      	ldr	r3, [pc, #576]	; (800b424 <_dtoa_r+0x2f4>)
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	3303      	adds	r3, #3
 800b1e6:	e7f3      	b.n	800b1d0 <_dtoa_r+0xa0>
 800b1e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	ec51 0b17 	vmov	r0, r1, d7
 800b1f2:	eeb0 8a47 	vmov.f32	s16, s14
 800b1f6:	eef0 8a67 	vmov.f32	s17, s15
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f7f5 fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 800b200:	4681      	mov	r9, r0
 800b202:	b160      	cbz	r0, 800b21e <_dtoa_r+0xee>
 800b204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b206:	2301      	movs	r3, #1
 800b208:	6013      	str	r3, [r2, #0]
 800b20a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 8568 	beq.w	800bce2 <_dtoa_r+0xbb2>
 800b212:	4b86      	ldr	r3, [pc, #536]	; (800b42c <_dtoa_r+0x2fc>)
 800b214:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b216:	6013      	str	r3, [r2, #0]
 800b218:	3b01      	subs	r3, #1
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	e7da      	b.n	800b1d4 <_dtoa_r+0xa4>
 800b21e:	aa10      	add	r2, sp, #64	; 0x40
 800b220:	a911      	add	r1, sp, #68	; 0x44
 800b222:	4620      	mov	r0, r4
 800b224:	eeb0 0a48 	vmov.f32	s0, s16
 800b228:	eef0 0a68 	vmov.f32	s1, s17
 800b22c:	f001 f99a 	bl	800c564 <__d2b>
 800b230:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b234:	4682      	mov	sl, r0
 800b236:	2d00      	cmp	r5, #0
 800b238:	d07f      	beq.n	800b33a <_dtoa_r+0x20a>
 800b23a:	ee18 3a90 	vmov	r3, s17
 800b23e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b242:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b246:	ec51 0b18 	vmov	r0, r1, d8
 800b24a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b24e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b252:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b256:	4619      	mov	r1, r3
 800b258:	2200      	movs	r2, #0
 800b25a:	4b75      	ldr	r3, [pc, #468]	; (800b430 <_dtoa_r+0x300>)
 800b25c:	f7f5 f814 	bl	8000288 <__aeabi_dsub>
 800b260:	a367      	add	r3, pc, #412	; (adr r3, 800b400 <_dtoa_r+0x2d0>)
 800b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b266:	f7f5 f9c7 	bl	80005f8 <__aeabi_dmul>
 800b26a:	a367      	add	r3, pc, #412	; (adr r3, 800b408 <_dtoa_r+0x2d8>)
 800b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b270:	f7f5 f80c 	bl	800028c <__adddf3>
 800b274:	4606      	mov	r6, r0
 800b276:	4628      	mov	r0, r5
 800b278:	460f      	mov	r7, r1
 800b27a:	f7f5 f953 	bl	8000524 <__aeabi_i2d>
 800b27e:	a364      	add	r3, pc, #400	; (adr r3, 800b410 <_dtoa_r+0x2e0>)
 800b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b284:	f7f5 f9b8 	bl	80005f8 <__aeabi_dmul>
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	4630      	mov	r0, r6
 800b28e:	4639      	mov	r1, r7
 800b290:	f7f4 fffc 	bl	800028c <__adddf3>
 800b294:	4606      	mov	r6, r0
 800b296:	460f      	mov	r7, r1
 800b298:	f7f5 fc5e 	bl	8000b58 <__aeabi_d2iz>
 800b29c:	2200      	movs	r2, #0
 800b29e:	4683      	mov	fp, r0
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	4639      	mov	r1, r7
 800b2a6:	f7f5 fc19 	bl	8000adc <__aeabi_dcmplt>
 800b2aa:	b148      	cbz	r0, 800b2c0 <_dtoa_r+0x190>
 800b2ac:	4658      	mov	r0, fp
 800b2ae:	f7f5 f939 	bl	8000524 <__aeabi_i2d>
 800b2b2:	4632      	mov	r2, r6
 800b2b4:	463b      	mov	r3, r7
 800b2b6:	f7f5 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ba:	b908      	cbnz	r0, 800b2c0 <_dtoa_r+0x190>
 800b2bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2c0:	f1bb 0f16 	cmp.w	fp, #22
 800b2c4:	d857      	bhi.n	800b376 <_dtoa_r+0x246>
 800b2c6:	4b5b      	ldr	r3, [pc, #364]	; (800b434 <_dtoa_r+0x304>)
 800b2c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	ec51 0b18 	vmov	r0, r1, d8
 800b2d4:	f7f5 fc02 	bl	8000adc <__aeabi_dcmplt>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d04e      	beq.n	800b37a <_dtoa_r+0x24a>
 800b2dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b2e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2e6:	1b5b      	subs	r3, r3, r5
 800b2e8:	1e5a      	subs	r2, r3, #1
 800b2ea:	bf45      	ittet	mi
 800b2ec:	f1c3 0301 	rsbmi	r3, r3, #1
 800b2f0:	9305      	strmi	r3, [sp, #20]
 800b2f2:	2300      	movpl	r3, #0
 800b2f4:	2300      	movmi	r3, #0
 800b2f6:	9206      	str	r2, [sp, #24]
 800b2f8:	bf54      	ite	pl
 800b2fa:	9305      	strpl	r3, [sp, #20]
 800b2fc:	9306      	strmi	r3, [sp, #24]
 800b2fe:	f1bb 0f00 	cmp.w	fp, #0
 800b302:	db3c      	blt.n	800b37e <_dtoa_r+0x24e>
 800b304:	9b06      	ldr	r3, [sp, #24]
 800b306:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b30a:	445b      	add	r3, fp
 800b30c:	9306      	str	r3, [sp, #24]
 800b30e:	2300      	movs	r3, #0
 800b310:	9308      	str	r3, [sp, #32]
 800b312:	9b07      	ldr	r3, [sp, #28]
 800b314:	2b09      	cmp	r3, #9
 800b316:	d868      	bhi.n	800b3ea <_dtoa_r+0x2ba>
 800b318:	2b05      	cmp	r3, #5
 800b31a:	bfc4      	itt	gt
 800b31c:	3b04      	subgt	r3, #4
 800b31e:	9307      	strgt	r3, [sp, #28]
 800b320:	9b07      	ldr	r3, [sp, #28]
 800b322:	f1a3 0302 	sub.w	r3, r3, #2
 800b326:	bfcc      	ite	gt
 800b328:	2500      	movgt	r5, #0
 800b32a:	2501      	movle	r5, #1
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	f200 8085 	bhi.w	800b43c <_dtoa_r+0x30c>
 800b332:	e8df f003 	tbb	[pc, r3]
 800b336:	3b2e      	.short	0x3b2e
 800b338:	5839      	.short	0x5839
 800b33a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b33e:	441d      	add	r5, r3
 800b340:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b344:	2b20      	cmp	r3, #32
 800b346:	bfc1      	itttt	gt
 800b348:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b34c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b350:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b354:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b358:	bfd6      	itet	le
 800b35a:	f1c3 0320 	rsble	r3, r3, #32
 800b35e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b362:	fa06 f003 	lslle.w	r0, r6, r3
 800b366:	f7f5 f8cd 	bl	8000504 <__aeabi_ui2d>
 800b36a:	2201      	movs	r2, #1
 800b36c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b370:	3d01      	subs	r5, #1
 800b372:	920e      	str	r2, [sp, #56]	; 0x38
 800b374:	e76f      	b.n	800b256 <_dtoa_r+0x126>
 800b376:	2301      	movs	r3, #1
 800b378:	e7b3      	b.n	800b2e2 <_dtoa_r+0x1b2>
 800b37a:	900c      	str	r0, [sp, #48]	; 0x30
 800b37c:	e7b2      	b.n	800b2e4 <_dtoa_r+0x1b4>
 800b37e:	9b05      	ldr	r3, [sp, #20]
 800b380:	eba3 030b 	sub.w	r3, r3, fp
 800b384:	9305      	str	r3, [sp, #20]
 800b386:	f1cb 0300 	rsb	r3, fp, #0
 800b38a:	9308      	str	r3, [sp, #32]
 800b38c:	2300      	movs	r3, #0
 800b38e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b390:	e7bf      	b.n	800b312 <_dtoa_r+0x1e2>
 800b392:	2300      	movs	r3, #0
 800b394:	9309      	str	r3, [sp, #36]	; 0x24
 800b396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b398:	2b00      	cmp	r3, #0
 800b39a:	dc52      	bgt.n	800b442 <_dtoa_r+0x312>
 800b39c:	2301      	movs	r3, #1
 800b39e:	9301      	str	r3, [sp, #4]
 800b3a0:	9304      	str	r3, [sp, #16]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	920a      	str	r2, [sp, #40]	; 0x28
 800b3a6:	e00b      	b.n	800b3c0 <_dtoa_r+0x290>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e7f3      	b.n	800b394 <_dtoa_r+0x264>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3b2:	445b      	add	r3, fp
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	9304      	str	r3, [sp, #16]
 800b3bc:	bfb8      	it	lt
 800b3be:	2301      	movlt	r3, #1
 800b3c0:	69e0      	ldr	r0, [r4, #28]
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	2204      	movs	r2, #4
 800b3c6:	f102 0614 	add.w	r6, r2, #20
 800b3ca:	429e      	cmp	r6, r3
 800b3cc:	d93d      	bls.n	800b44a <_dtoa_r+0x31a>
 800b3ce:	6041      	str	r1, [r0, #4]
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f000 fceb 	bl	800bdac <_Balloc>
 800b3d6:	9000      	str	r0, [sp, #0]
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d139      	bne.n	800b450 <_dtoa_r+0x320>
 800b3dc:	4b16      	ldr	r3, [pc, #88]	; (800b438 <_dtoa_r+0x308>)
 800b3de:	4602      	mov	r2, r0
 800b3e0:	f240 11af 	movw	r1, #431	; 0x1af
 800b3e4:	e6bd      	b.n	800b162 <_dtoa_r+0x32>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e7e1      	b.n	800b3ae <_dtoa_r+0x27e>
 800b3ea:	2501      	movs	r5, #1
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	9307      	str	r3, [sp, #28]
 800b3f0:	9509      	str	r5, [sp, #36]	; 0x24
 800b3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f6:	9301      	str	r3, [sp, #4]
 800b3f8:	9304      	str	r3, [sp, #16]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2312      	movs	r3, #18
 800b3fe:	e7d1      	b.n	800b3a4 <_dtoa_r+0x274>
 800b400:	636f4361 	.word	0x636f4361
 800b404:	3fd287a7 	.word	0x3fd287a7
 800b408:	8b60c8b3 	.word	0x8b60c8b3
 800b40c:	3fc68a28 	.word	0x3fc68a28
 800b410:	509f79fb 	.word	0x509f79fb
 800b414:	3fd34413 	.word	0x3fd34413
 800b418:	080118a2 	.word	0x080118a2
 800b41c:	080118b9 	.word	0x080118b9
 800b420:	7ff00000 	.word	0x7ff00000
 800b424:	0801189e 	.word	0x0801189e
 800b428:	08011895 	.word	0x08011895
 800b42c:	0801186d 	.word	0x0801186d
 800b430:	3ff80000 	.word	0x3ff80000
 800b434:	080119a8 	.word	0x080119a8
 800b438:	08011911 	.word	0x08011911
 800b43c:	2301      	movs	r3, #1
 800b43e:	9309      	str	r3, [sp, #36]	; 0x24
 800b440:	e7d7      	b.n	800b3f2 <_dtoa_r+0x2c2>
 800b442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	9304      	str	r3, [sp, #16]
 800b448:	e7ba      	b.n	800b3c0 <_dtoa_r+0x290>
 800b44a:	3101      	adds	r1, #1
 800b44c:	0052      	lsls	r2, r2, #1
 800b44e:	e7ba      	b.n	800b3c6 <_dtoa_r+0x296>
 800b450:	69e3      	ldr	r3, [r4, #28]
 800b452:	9a00      	ldr	r2, [sp, #0]
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	9b04      	ldr	r3, [sp, #16]
 800b458:	2b0e      	cmp	r3, #14
 800b45a:	f200 80a8 	bhi.w	800b5ae <_dtoa_r+0x47e>
 800b45e:	2d00      	cmp	r5, #0
 800b460:	f000 80a5 	beq.w	800b5ae <_dtoa_r+0x47e>
 800b464:	f1bb 0f00 	cmp.w	fp, #0
 800b468:	dd38      	ble.n	800b4dc <_dtoa_r+0x3ac>
 800b46a:	4bc0      	ldr	r3, [pc, #768]	; (800b76c <_dtoa_r+0x63c>)
 800b46c:	f00b 020f 	and.w	r2, fp, #15
 800b470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b474:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b478:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b47c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b480:	d019      	beq.n	800b4b6 <_dtoa_r+0x386>
 800b482:	4bbb      	ldr	r3, [pc, #748]	; (800b770 <_dtoa_r+0x640>)
 800b484:	ec51 0b18 	vmov	r0, r1, d8
 800b488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b48c:	f7f5 f9de 	bl	800084c <__aeabi_ddiv>
 800b490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b494:	f008 080f 	and.w	r8, r8, #15
 800b498:	2503      	movs	r5, #3
 800b49a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b770 <_dtoa_r+0x640>
 800b49e:	f1b8 0f00 	cmp.w	r8, #0
 800b4a2:	d10a      	bne.n	800b4ba <_dtoa_r+0x38a>
 800b4a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	f7f5 f9ce 	bl	800084c <__aeabi_ddiv>
 800b4b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4b4:	e02b      	b.n	800b50e <_dtoa_r+0x3de>
 800b4b6:	2502      	movs	r5, #2
 800b4b8:	e7ef      	b.n	800b49a <_dtoa_r+0x36a>
 800b4ba:	f018 0f01 	tst.w	r8, #1
 800b4be:	d008      	beq.n	800b4d2 <_dtoa_r+0x3a2>
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b4c8:	f7f5 f896 	bl	80005f8 <__aeabi_dmul>
 800b4cc:	3501      	adds	r5, #1
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b4d6:	f109 0908 	add.w	r9, r9, #8
 800b4da:	e7e0      	b.n	800b49e <_dtoa_r+0x36e>
 800b4dc:	f000 809f 	beq.w	800b61e <_dtoa_r+0x4ee>
 800b4e0:	f1cb 0600 	rsb	r6, fp, #0
 800b4e4:	4ba1      	ldr	r3, [pc, #644]	; (800b76c <_dtoa_r+0x63c>)
 800b4e6:	4fa2      	ldr	r7, [pc, #648]	; (800b770 <_dtoa_r+0x640>)
 800b4e8:	f006 020f 	and.w	r2, r6, #15
 800b4ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	ec51 0b18 	vmov	r0, r1, d8
 800b4f8:	f7f5 f87e 	bl	80005f8 <__aeabi_dmul>
 800b4fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b500:	1136      	asrs	r6, r6, #4
 800b502:	2300      	movs	r3, #0
 800b504:	2502      	movs	r5, #2
 800b506:	2e00      	cmp	r6, #0
 800b508:	d17e      	bne.n	800b608 <_dtoa_r+0x4d8>
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1d0      	bne.n	800b4b0 <_dtoa_r+0x380>
 800b50e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b510:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 8084 	beq.w	800b622 <_dtoa_r+0x4f2>
 800b51a:	4b96      	ldr	r3, [pc, #600]	; (800b774 <_dtoa_r+0x644>)
 800b51c:	2200      	movs	r2, #0
 800b51e:	4640      	mov	r0, r8
 800b520:	4649      	mov	r1, r9
 800b522:	f7f5 fadb 	bl	8000adc <__aeabi_dcmplt>
 800b526:	2800      	cmp	r0, #0
 800b528:	d07b      	beq.n	800b622 <_dtoa_r+0x4f2>
 800b52a:	9b04      	ldr	r3, [sp, #16]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d078      	beq.n	800b622 <_dtoa_r+0x4f2>
 800b530:	9b01      	ldr	r3, [sp, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	dd39      	ble.n	800b5aa <_dtoa_r+0x47a>
 800b536:	4b90      	ldr	r3, [pc, #576]	; (800b778 <_dtoa_r+0x648>)
 800b538:	2200      	movs	r2, #0
 800b53a:	4640      	mov	r0, r8
 800b53c:	4649      	mov	r1, r9
 800b53e:	f7f5 f85b 	bl	80005f8 <__aeabi_dmul>
 800b542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b546:	9e01      	ldr	r6, [sp, #4]
 800b548:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b54c:	3501      	adds	r5, #1
 800b54e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b552:	4628      	mov	r0, r5
 800b554:	f7f4 ffe6 	bl	8000524 <__aeabi_i2d>
 800b558:	4642      	mov	r2, r8
 800b55a:	464b      	mov	r3, r9
 800b55c:	f7f5 f84c 	bl	80005f8 <__aeabi_dmul>
 800b560:	4b86      	ldr	r3, [pc, #536]	; (800b77c <_dtoa_r+0x64c>)
 800b562:	2200      	movs	r2, #0
 800b564:	f7f4 fe92 	bl	800028c <__adddf3>
 800b568:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b56c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b570:	9303      	str	r3, [sp, #12]
 800b572:	2e00      	cmp	r6, #0
 800b574:	d158      	bne.n	800b628 <_dtoa_r+0x4f8>
 800b576:	4b82      	ldr	r3, [pc, #520]	; (800b780 <_dtoa_r+0x650>)
 800b578:	2200      	movs	r2, #0
 800b57a:	4640      	mov	r0, r8
 800b57c:	4649      	mov	r1, r9
 800b57e:	f7f4 fe83 	bl	8000288 <__aeabi_dsub>
 800b582:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b586:	4680      	mov	r8, r0
 800b588:	4689      	mov	r9, r1
 800b58a:	f7f5 fac5 	bl	8000b18 <__aeabi_dcmpgt>
 800b58e:	2800      	cmp	r0, #0
 800b590:	f040 8296 	bne.w	800bac0 <_dtoa_r+0x990>
 800b594:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b598:	4640      	mov	r0, r8
 800b59a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b59e:	4649      	mov	r1, r9
 800b5a0:	f7f5 fa9c 	bl	8000adc <__aeabi_dcmplt>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	f040 8289 	bne.w	800babc <_dtoa_r+0x98c>
 800b5aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b5ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f2c0 814e 	blt.w	800b852 <_dtoa_r+0x722>
 800b5b6:	f1bb 0f0e 	cmp.w	fp, #14
 800b5ba:	f300 814a 	bgt.w	800b852 <_dtoa_r+0x722>
 800b5be:	4b6b      	ldr	r3, [pc, #428]	; (800b76c <_dtoa_r+0x63c>)
 800b5c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b5c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f280 80dc 	bge.w	800b788 <_dtoa_r+0x658>
 800b5d0:	9b04      	ldr	r3, [sp, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f300 80d8 	bgt.w	800b788 <_dtoa_r+0x658>
 800b5d8:	f040 826f 	bne.w	800baba <_dtoa_r+0x98a>
 800b5dc:	4b68      	ldr	r3, [pc, #416]	; (800b780 <_dtoa_r+0x650>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	f7f5 f808 	bl	80005f8 <__aeabi_dmul>
 800b5e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5ec:	f7f5 fa8a 	bl	8000b04 <__aeabi_dcmpge>
 800b5f0:	9e04      	ldr	r6, [sp, #16]
 800b5f2:	4637      	mov	r7, r6
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	f040 8245 	bne.w	800ba84 <_dtoa_r+0x954>
 800b5fa:	9d00      	ldr	r5, [sp, #0]
 800b5fc:	2331      	movs	r3, #49	; 0x31
 800b5fe:	f805 3b01 	strb.w	r3, [r5], #1
 800b602:	f10b 0b01 	add.w	fp, fp, #1
 800b606:	e241      	b.n	800ba8c <_dtoa_r+0x95c>
 800b608:	07f2      	lsls	r2, r6, #31
 800b60a:	d505      	bpl.n	800b618 <_dtoa_r+0x4e8>
 800b60c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b610:	f7f4 fff2 	bl	80005f8 <__aeabi_dmul>
 800b614:	3501      	adds	r5, #1
 800b616:	2301      	movs	r3, #1
 800b618:	1076      	asrs	r6, r6, #1
 800b61a:	3708      	adds	r7, #8
 800b61c:	e773      	b.n	800b506 <_dtoa_r+0x3d6>
 800b61e:	2502      	movs	r5, #2
 800b620:	e775      	b.n	800b50e <_dtoa_r+0x3de>
 800b622:	9e04      	ldr	r6, [sp, #16]
 800b624:	465f      	mov	r7, fp
 800b626:	e792      	b.n	800b54e <_dtoa_r+0x41e>
 800b628:	9900      	ldr	r1, [sp, #0]
 800b62a:	4b50      	ldr	r3, [pc, #320]	; (800b76c <_dtoa_r+0x63c>)
 800b62c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b630:	4431      	add	r1, r6
 800b632:	9102      	str	r1, [sp, #8]
 800b634:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b636:	eeb0 9a47 	vmov.f32	s18, s14
 800b63a:	eef0 9a67 	vmov.f32	s19, s15
 800b63e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b642:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b646:	2900      	cmp	r1, #0
 800b648:	d044      	beq.n	800b6d4 <_dtoa_r+0x5a4>
 800b64a:	494e      	ldr	r1, [pc, #312]	; (800b784 <_dtoa_r+0x654>)
 800b64c:	2000      	movs	r0, #0
 800b64e:	f7f5 f8fd 	bl	800084c <__aeabi_ddiv>
 800b652:	ec53 2b19 	vmov	r2, r3, d9
 800b656:	f7f4 fe17 	bl	8000288 <__aeabi_dsub>
 800b65a:	9d00      	ldr	r5, [sp, #0]
 800b65c:	ec41 0b19 	vmov	d9, r0, r1
 800b660:	4649      	mov	r1, r9
 800b662:	4640      	mov	r0, r8
 800b664:	f7f5 fa78 	bl	8000b58 <__aeabi_d2iz>
 800b668:	4606      	mov	r6, r0
 800b66a:	f7f4 ff5b 	bl	8000524 <__aeabi_i2d>
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4640      	mov	r0, r8
 800b674:	4649      	mov	r1, r9
 800b676:	f7f4 fe07 	bl	8000288 <__aeabi_dsub>
 800b67a:	3630      	adds	r6, #48	; 0x30
 800b67c:	f805 6b01 	strb.w	r6, [r5], #1
 800b680:	ec53 2b19 	vmov	r2, r3, d9
 800b684:	4680      	mov	r8, r0
 800b686:	4689      	mov	r9, r1
 800b688:	f7f5 fa28 	bl	8000adc <__aeabi_dcmplt>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	d164      	bne.n	800b75a <_dtoa_r+0x62a>
 800b690:	4642      	mov	r2, r8
 800b692:	464b      	mov	r3, r9
 800b694:	4937      	ldr	r1, [pc, #220]	; (800b774 <_dtoa_r+0x644>)
 800b696:	2000      	movs	r0, #0
 800b698:	f7f4 fdf6 	bl	8000288 <__aeabi_dsub>
 800b69c:	ec53 2b19 	vmov	r2, r3, d9
 800b6a0:	f7f5 fa1c 	bl	8000adc <__aeabi_dcmplt>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	f040 80b6 	bne.w	800b816 <_dtoa_r+0x6e6>
 800b6aa:	9b02      	ldr	r3, [sp, #8]
 800b6ac:	429d      	cmp	r5, r3
 800b6ae:	f43f af7c 	beq.w	800b5aa <_dtoa_r+0x47a>
 800b6b2:	4b31      	ldr	r3, [pc, #196]	; (800b778 <_dtoa_r+0x648>)
 800b6b4:	ec51 0b19 	vmov	r0, r1, d9
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f7f4 ff9d 	bl	80005f8 <__aeabi_dmul>
 800b6be:	4b2e      	ldr	r3, [pc, #184]	; (800b778 <_dtoa_r+0x648>)
 800b6c0:	ec41 0b19 	vmov	d9, r0, r1
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	4640      	mov	r0, r8
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	f7f4 ff95 	bl	80005f8 <__aeabi_dmul>
 800b6ce:	4680      	mov	r8, r0
 800b6d0:	4689      	mov	r9, r1
 800b6d2:	e7c5      	b.n	800b660 <_dtoa_r+0x530>
 800b6d4:	ec51 0b17 	vmov	r0, r1, d7
 800b6d8:	f7f4 ff8e 	bl	80005f8 <__aeabi_dmul>
 800b6dc:	9b02      	ldr	r3, [sp, #8]
 800b6de:	9d00      	ldr	r5, [sp, #0]
 800b6e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6e2:	ec41 0b19 	vmov	d9, r0, r1
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	f7f5 fa35 	bl	8000b58 <__aeabi_d2iz>
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	f7f4 ff18 	bl	8000524 <__aeabi_i2d>
 800b6f4:	3630      	adds	r6, #48	; 0x30
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	4649      	mov	r1, r9
 800b6fe:	f7f4 fdc3 	bl	8000288 <__aeabi_dsub>
 800b702:	f805 6b01 	strb.w	r6, [r5], #1
 800b706:	9b02      	ldr	r3, [sp, #8]
 800b708:	429d      	cmp	r5, r3
 800b70a:	4680      	mov	r8, r0
 800b70c:	4689      	mov	r9, r1
 800b70e:	f04f 0200 	mov.w	r2, #0
 800b712:	d124      	bne.n	800b75e <_dtoa_r+0x62e>
 800b714:	4b1b      	ldr	r3, [pc, #108]	; (800b784 <_dtoa_r+0x654>)
 800b716:	ec51 0b19 	vmov	r0, r1, d9
 800b71a:	f7f4 fdb7 	bl	800028c <__adddf3>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	4640      	mov	r0, r8
 800b724:	4649      	mov	r1, r9
 800b726:	f7f5 f9f7 	bl	8000b18 <__aeabi_dcmpgt>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d173      	bne.n	800b816 <_dtoa_r+0x6e6>
 800b72e:	ec53 2b19 	vmov	r2, r3, d9
 800b732:	4914      	ldr	r1, [pc, #80]	; (800b784 <_dtoa_r+0x654>)
 800b734:	2000      	movs	r0, #0
 800b736:	f7f4 fda7 	bl	8000288 <__aeabi_dsub>
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	4640      	mov	r0, r8
 800b740:	4649      	mov	r1, r9
 800b742:	f7f5 f9cb 	bl	8000adc <__aeabi_dcmplt>
 800b746:	2800      	cmp	r0, #0
 800b748:	f43f af2f 	beq.w	800b5aa <_dtoa_r+0x47a>
 800b74c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b74e:	1e6b      	subs	r3, r5, #1
 800b750:	930f      	str	r3, [sp, #60]	; 0x3c
 800b752:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b756:	2b30      	cmp	r3, #48	; 0x30
 800b758:	d0f8      	beq.n	800b74c <_dtoa_r+0x61c>
 800b75a:	46bb      	mov	fp, r7
 800b75c:	e04a      	b.n	800b7f4 <_dtoa_r+0x6c4>
 800b75e:	4b06      	ldr	r3, [pc, #24]	; (800b778 <_dtoa_r+0x648>)
 800b760:	f7f4 ff4a 	bl	80005f8 <__aeabi_dmul>
 800b764:	4680      	mov	r8, r0
 800b766:	4689      	mov	r9, r1
 800b768:	e7bd      	b.n	800b6e6 <_dtoa_r+0x5b6>
 800b76a:	bf00      	nop
 800b76c:	080119a8 	.word	0x080119a8
 800b770:	08011980 	.word	0x08011980
 800b774:	3ff00000 	.word	0x3ff00000
 800b778:	40240000 	.word	0x40240000
 800b77c:	401c0000 	.word	0x401c0000
 800b780:	40140000 	.word	0x40140000
 800b784:	3fe00000 	.word	0x3fe00000
 800b788:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b78c:	9d00      	ldr	r5, [sp, #0]
 800b78e:	4642      	mov	r2, r8
 800b790:	464b      	mov	r3, r9
 800b792:	4630      	mov	r0, r6
 800b794:	4639      	mov	r1, r7
 800b796:	f7f5 f859 	bl	800084c <__aeabi_ddiv>
 800b79a:	f7f5 f9dd 	bl	8000b58 <__aeabi_d2iz>
 800b79e:	9001      	str	r0, [sp, #4]
 800b7a0:	f7f4 fec0 	bl	8000524 <__aeabi_i2d>
 800b7a4:	4642      	mov	r2, r8
 800b7a6:	464b      	mov	r3, r9
 800b7a8:	f7f4 ff26 	bl	80005f8 <__aeabi_dmul>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	f7f4 fd68 	bl	8000288 <__aeabi_dsub>
 800b7b8:	9e01      	ldr	r6, [sp, #4]
 800b7ba:	9f04      	ldr	r7, [sp, #16]
 800b7bc:	3630      	adds	r6, #48	; 0x30
 800b7be:	f805 6b01 	strb.w	r6, [r5], #1
 800b7c2:	9e00      	ldr	r6, [sp, #0]
 800b7c4:	1bae      	subs	r6, r5, r6
 800b7c6:	42b7      	cmp	r7, r6
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	d134      	bne.n	800b838 <_dtoa_r+0x708>
 800b7ce:	f7f4 fd5d 	bl	800028c <__adddf3>
 800b7d2:	4642      	mov	r2, r8
 800b7d4:	464b      	mov	r3, r9
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	460f      	mov	r7, r1
 800b7da:	f7f5 f99d 	bl	8000b18 <__aeabi_dcmpgt>
 800b7de:	b9c8      	cbnz	r0, 800b814 <_dtoa_r+0x6e4>
 800b7e0:	4642      	mov	r2, r8
 800b7e2:	464b      	mov	r3, r9
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	f7f5 f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7ec:	b110      	cbz	r0, 800b7f4 <_dtoa_r+0x6c4>
 800b7ee:	9b01      	ldr	r3, [sp, #4]
 800b7f0:	07db      	lsls	r3, r3, #31
 800b7f2:	d40f      	bmi.n	800b814 <_dtoa_r+0x6e4>
 800b7f4:	4651      	mov	r1, sl
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f000 fb18 	bl	800be2c <_Bfree>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b800:	702b      	strb	r3, [r5, #0]
 800b802:	f10b 0301 	add.w	r3, fp, #1
 800b806:	6013      	str	r3, [r2, #0]
 800b808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f43f ace2 	beq.w	800b1d4 <_dtoa_r+0xa4>
 800b810:	601d      	str	r5, [r3, #0]
 800b812:	e4df      	b.n	800b1d4 <_dtoa_r+0xa4>
 800b814:	465f      	mov	r7, fp
 800b816:	462b      	mov	r3, r5
 800b818:	461d      	mov	r5, r3
 800b81a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b81e:	2a39      	cmp	r2, #57	; 0x39
 800b820:	d106      	bne.n	800b830 <_dtoa_r+0x700>
 800b822:	9a00      	ldr	r2, [sp, #0]
 800b824:	429a      	cmp	r2, r3
 800b826:	d1f7      	bne.n	800b818 <_dtoa_r+0x6e8>
 800b828:	9900      	ldr	r1, [sp, #0]
 800b82a:	2230      	movs	r2, #48	; 0x30
 800b82c:	3701      	adds	r7, #1
 800b82e:	700a      	strb	r2, [r1, #0]
 800b830:	781a      	ldrb	r2, [r3, #0]
 800b832:	3201      	adds	r2, #1
 800b834:	701a      	strb	r2, [r3, #0]
 800b836:	e790      	b.n	800b75a <_dtoa_r+0x62a>
 800b838:	4ba3      	ldr	r3, [pc, #652]	; (800bac8 <_dtoa_r+0x998>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	f7f4 fedc 	bl	80005f8 <__aeabi_dmul>
 800b840:	2200      	movs	r2, #0
 800b842:	2300      	movs	r3, #0
 800b844:	4606      	mov	r6, r0
 800b846:	460f      	mov	r7, r1
 800b848:	f7f5 f93e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d09e      	beq.n	800b78e <_dtoa_r+0x65e>
 800b850:	e7d0      	b.n	800b7f4 <_dtoa_r+0x6c4>
 800b852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b854:	2a00      	cmp	r2, #0
 800b856:	f000 80ca 	beq.w	800b9ee <_dtoa_r+0x8be>
 800b85a:	9a07      	ldr	r2, [sp, #28]
 800b85c:	2a01      	cmp	r2, #1
 800b85e:	f300 80ad 	bgt.w	800b9bc <_dtoa_r+0x88c>
 800b862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b864:	2a00      	cmp	r2, #0
 800b866:	f000 80a5 	beq.w	800b9b4 <_dtoa_r+0x884>
 800b86a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b86e:	9e08      	ldr	r6, [sp, #32]
 800b870:	9d05      	ldr	r5, [sp, #20]
 800b872:	9a05      	ldr	r2, [sp, #20]
 800b874:	441a      	add	r2, r3
 800b876:	9205      	str	r2, [sp, #20]
 800b878:	9a06      	ldr	r2, [sp, #24]
 800b87a:	2101      	movs	r1, #1
 800b87c:	441a      	add	r2, r3
 800b87e:	4620      	mov	r0, r4
 800b880:	9206      	str	r2, [sp, #24]
 800b882:	f000 fbd3 	bl	800c02c <__i2b>
 800b886:	4607      	mov	r7, r0
 800b888:	b165      	cbz	r5, 800b8a4 <_dtoa_r+0x774>
 800b88a:	9b06      	ldr	r3, [sp, #24]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	dd09      	ble.n	800b8a4 <_dtoa_r+0x774>
 800b890:	42ab      	cmp	r3, r5
 800b892:	9a05      	ldr	r2, [sp, #20]
 800b894:	bfa8      	it	ge
 800b896:	462b      	movge	r3, r5
 800b898:	1ad2      	subs	r2, r2, r3
 800b89a:	9205      	str	r2, [sp, #20]
 800b89c:	9a06      	ldr	r2, [sp, #24]
 800b89e:	1aed      	subs	r5, r5, r3
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	9306      	str	r3, [sp, #24]
 800b8a4:	9b08      	ldr	r3, [sp, #32]
 800b8a6:	b1f3      	cbz	r3, 800b8e6 <_dtoa_r+0x7b6>
 800b8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 80a3 	beq.w	800b9f6 <_dtoa_r+0x8c6>
 800b8b0:	2e00      	cmp	r6, #0
 800b8b2:	dd10      	ble.n	800b8d6 <_dtoa_r+0x7a6>
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	4632      	mov	r2, r6
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f000 fc77 	bl	800c1ac <__pow5mult>
 800b8be:	4652      	mov	r2, sl
 800b8c0:	4601      	mov	r1, r0
 800b8c2:	4607      	mov	r7, r0
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f000 fbc7 	bl	800c058 <__multiply>
 800b8ca:	4651      	mov	r1, sl
 800b8cc:	4680      	mov	r8, r0
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 faac 	bl	800be2c <_Bfree>
 800b8d4:	46c2      	mov	sl, r8
 800b8d6:	9b08      	ldr	r3, [sp, #32]
 800b8d8:	1b9a      	subs	r2, r3, r6
 800b8da:	d004      	beq.n	800b8e6 <_dtoa_r+0x7b6>
 800b8dc:	4651      	mov	r1, sl
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f000 fc64 	bl	800c1ac <__pow5mult>
 800b8e4:	4682      	mov	sl, r0
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f000 fb9f 	bl	800c02c <__i2b>
 800b8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	f340 8081 	ble.w	800b9fa <_dtoa_r+0x8ca>
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	4601      	mov	r1, r0
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f000 fc55 	bl	800c1ac <__pow5mult>
 800b902:	9b07      	ldr	r3, [sp, #28]
 800b904:	2b01      	cmp	r3, #1
 800b906:	4606      	mov	r6, r0
 800b908:	dd7a      	ble.n	800ba00 <_dtoa_r+0x8d0>
 800b90a:	f04f 0800 	mov.w	r8, #0
 800b90e:	6933      	ldr	r3, [r6, #16]
 800b910:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b914:	6918      	ldr	r0, [r3, #16]
 800b916:	f000 fb3b 	bl	800bf90 <__hi0bits>
 800b91a:	f1c0 0020 	rsb	r0, r0, #32
 800b91e:	9b06      	ldr	r3, [sp, #24]
 800b920:	4418      	add	r0, r3
 800b922:	f010 001f 	ands.w	r0, r0, #31
 800b926:	f000 8094 	beq.w	800ba52 <_dtoa_r+0x922>
 800b92a:	f1c0 0320 	rsb	r3, r0, #32
 800b92e:	2b04      	cmp	r3, #4
 800b930:	f340 8085 	ble.w	800ba3e <_dtoa_r+0x90e>
 800b934:	9b05      	ldr	r3, [sp, #20]
 800b936:	f1c0 001c 	rsb	r0, r0, #28
 800b93a:	4403      	add	r3, r0
 800b93c:	9305      	str	r3, [sp, #20]
 800b93e:	9b06      	ldr	r3, [sp, #24]
 800b940:	4403      	add	r3, r0
 800b942:	4405      	add	r5, r0
 800b944:	9306      	str	r3, [sp, #24]
 800b946:	9b05      	ldr	r3, [sp, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	dd05      	ble.n	800b958 <_dtoa_r+0x828>
 800b94c:	4651      	mov	r1, sl
 800b94e:	461a      	mov	r2, r3
 800b950:	4620      	mov	r0, r4
 800b952:	f000 fc85 	bl	800c260 <__lshift>
 800b956:	4682      	mov	sl, r0
 800b958:	9b06      	ldr	r3, [sp, #24]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	dd05      	ble.n	800b96a <_dtoa_r+0x83a>
 800b95e:	4631      	mov	r1, r6
 800b960:	461a      	mov	r2, r3
 800b962:	4620      	mov	r0, r4
 800b964:	f000 fc7c 	bl	800c260 <__lshift>
 800b968:	4606      	mov	r6, r0
 800b96a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d072      	beq.n	800ba56 <_dtoa_r+0x926>
 800b970:	4631      	mov	r1, r6
 800b972:	4650      	mov	r0, sl
 800b974:	f000 fce0 	bl	800c338 <__mcmp>
 800b978:	2800      	cmp	r0, #0
 800b97a:	da6c      	bge.n	800ba56 <_dtoa_r+0x926>
 800b97c:	2300      	movs	r3, #0
 800b97e:	4651      	mov	r1, sl
 800b980:	220a      	movs	r2, #10
 800b982:	4620      	mov	r0, r4
 800b984:	f000 fa74 	bl	800be70 <__multadd>
 800b988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b98a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b98e:	4682      	mov	sl, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 81b0 	beq.w	800bcf6 <_dtoa_r+0xbc6>
 800b996:	2300      	movs	r3, #0
 800b998:	4639      	mov	r1, r7
 800b99a:	220a      	movs	r2, #10
 800b99c:	4620      	mov	r0, r4
 800b99e:	f000 fa67 	bl	800be70 <__multadd>
 800b9a2:	9b01      	ldr	r3, [sp, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	4607      	mov	r7, r0
 800b9a8:	f300 8096 	bgt.w	800bad8 <_dtoa_r+0x9a8>
 800b9ac:	9b07      	ldr	r3, [sp, #28]
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	dc59      	bgt.n	800ba66 <_dtoa_r+0x936>
 800b9b2:	e091      	b.n	800bad8 <_dtoa_r+0x9a8>
 800b9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9ba:	e758      	b.n	800b86e <_dtoa_r+0x73e>
 800b9bc:	9b04      	ldr	r3, [sp, #16]
 800b9be:	1e5e      	subs	r6, r3, #1
 800b9c0:	9b08      	ldr	r3, [sp, #32]
 800b9c2:	42b3      	cmp	r3, r6
 800b9c4:	bfbf      	itttt	lt
 800b9c6:	9b08      	ldrlt	r3, [sp, #32]
 800b9c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b9ca:	9608      	strlt	r6, [sp, #32]
 800b9cc:	1af3      	sublt	r3, r6, r3
 800b9ce:	bfb4      	ite	lt
 800b9d0:	18d2      	addlt	r2, r2, r3
 800b9d2:	1b9e      	subge	r6, r3, r6
 800b9d4:	9b04      	ldr	r3, [sp, #16]
 800b9d6:	bfbc      	itt	lt
 800b9d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b9da:	2600      	movlt	r6, #0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	bfb7      	itett	lt
 800b9e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b9e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b9e8:	1a9d      	sublt	r5, r3, r2
 800b9ea:	2300      	movlt	r3, #0
 800b9ec:	e741      	b.n	800b872 <_dtoa_r+0x742>
 800b9ee:	9e08      	ldr	r6, [sp, #32]
 800b9f0:	9d05      	ldr	r5, [sp, #20]
 800b9f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b9f4:	e748      	b.n	800b888 <_dtoa_r+0x758>
 800b9f6:	9a08      	ldr	r2, [sp, #32]
 800b9f8:	e770      	b.n	800b8dc <_dtoa_r+0x7ac>
 800b9fa:	9b07      	ldr	r3, [sp, #28]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	dc19      	bgt.n	800ba34 <_dtoa_r+0x904>
 800ba00:	9b02      	ldr	r3, [sp, #8]
 800ba02:	b9bb      	cbnz	r3, 800ba34 <_dtoa_r+0x904>
 800ba04:	9b03      	ldr	r3, [sp, #12]
 800ba06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba0a:	b99b      	cbnz	r3, 800ba34 <_dtoa_r+0x904>
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba12:	0d1b      	lsrs	r3, r3, #20
 800ba14:	051b      	lsls	r3, r3, #20
 800ba16:	b183      	cbz	r3, 800ba3a <_dtoa_r+0x90a>
 800ba18:	9b05      	ldr	r3, [sp, #20]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	9305      	str	r3, [sp, #20]
 800ba1e:	9b06      	ldr	r3, [sp, #24]
 800ba20:	3301      	adds	r3, #1
 800ba22:	9306      	str	r3, [sp, #24]
 800ba24:	f04f 0801 	mov.w	r8, #1
 800ba28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f47f af6f 	bne.w	800b90e <_dtoa_r+0x7de>
 800ba30:	2001      	movs	r0, #1
 800ba32:	e774      	b.n	800b91e <_dtoa_r+0x7ee>
 800ba34:	f04f 0800 	mov.w	r8, #0
 800ba38:	e7f6      	b.n	800ba28 <_dtoa_r+0x8f8>
 800ba3a:	4698      	mov	r8, r3
 800ba3c:	e7f4      	b.n	800ba28 <_dtoa_r+0x8f8>
 800ba3e:	d082      	beq.n	800b946 <_dtoa_r+0x816>
 800ba40:	9a05      	ldr	r2, [sp, #20]
 800ba42:	331c      	adds	r3, #28
 800ba44:	441a      	add	r2, r3
 800ba46:	9205      	str	r2, [sp, #20]
 800ba48:	9a06      	ldr	r2, [sp, #24]
 800ba4a:	441a      	add	r2, r3
 800ba4c:	441d      	add	r5, r3
 800ba4e:	9206      	str	r2, [sp, #24]
 800ba50:	e779      	b.n	800b946 <_dtoa_r+0x816>
 800ba52:	4603      	mov	r3, r0
 800ba54:	e7f4      	b.n	800ba40 <_dtoa_r+0x910>
 800ba56:	9b04      	ldr	r3, [sp, #16]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	dc37      	bgt.n	800bacc <_dtoa_r+0x99c>
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	dd34      	ble.n	800bacc <_dtoa_r+0x99c>
 800ba62:	9b04      	ldr	r3, [sp, #16]
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	9b01      	ldr	r3, [sp, #4]
 800ba68:	b963      	cbnz	r3, 800ba84 <_dtoa_r+0x954>
 800ba6a:	4631      	mov	r1, r6
 800ba6c:	2205      	movs	r2, #5
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f000 f9fe 	bl	800be70 <__multadd>
 800ba74:	4601      	mov	r1, r0
 800ba76:	4606      	mov	r6, r0
 800ba78:	4650      	mov	r0, sl
 800ba7a:	f000 fc5d 	bl	800c338 <__mcmp>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	f73f adbb 	bgt.w	800b5fa <_dtoa_r+0x4ca>
 800ba84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba86:	9d00      	ldr	r5, [sp, #0]
 800ba88:	ea6f 0b03 	mvn.w	fp, r3
 800ba8c:	f04f 0800 	mov.w	r8, #0
 800ba90:	4631      	mov	r1, r6
 800ba92:	4620      	mov	r0, r4
 800ba94:	f000 f9ca 	bl	800be2c <_Bfree>
 800ba98:	2f00      	cmp	r7, #0
 800ba9a:	f43f aeab 	beq.w	800b7f4 <_dtoa_r+0x6c4>
 800ba9e:	f1b8 0f00 	cmp.w	r8, #0
 800baa2:	d005      	beq.n	800bab0 <_dtoa_r+0x980>
 800baa4:	45b8      	cmp	r8, r7
 800baa6:	d003      	beq.n	800bab0 <_dtoa_r+0x980>
 800baa8:	4641      	mov	r1, r8
 800baaa:	4620      	mov	r0, r4
 800baac:	f000 f9be 	bl	800be2c <_Bfree>
 800bab0:	4639      	mov	r1, r7
 800bab2:	4620      	mov	r0, r4
 800bab4:	f000 f9ba 	bl	800be2c <_Bfree>
 800bab8:	e69c      	b.n	800b7f4 <_dtoa_r+0x6c4>
 800baba:	2600      	movs	r6, #0
 800babc:	4637      	mov	r7, r6
 800babe:	e7e1      	b.n	800ba84 <_dtoa_r+0x954>
 800bac0:	46bb      	mov	fp, r7
 800bac2:	4637      	mov	r7, r6
 800bac4:	e599      	b.n	800b5fa <_dtoa_r+0x4ca>
 800bac6:	bf00      	nop
 800bac8:	40240000 	.word	0x40240000
 800bacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f000 80c8 	beq.w	800bc64 <_dtoa_r+0xb34>
 800bad4:	9b04      	ldr	r3, [sp, #16]
 800bad6:	9301      	str	r3, [sp, #4]
 800bad8:	2d00      	cmp	r5, #0
 800bada:	dd05      	ble.n	800bae8 <_dtoa_r+0x9b8>
 800badc:	4639      	mov	r1, r7
 800bade:	462a      	mov	r2, r5
 800bae0:	4620      	mov	r0, r4
 800bae2:	f000 fbbd 	bl	800c260 <__lshift>
 800bae6:	4607      	mov	r7, r0
 800bae8:	f1b8 0f00 	cmp.w	r8, #0
 800baec:	d05b      	beq.n	800bba6 <_dtoa_r+0xa76>
 800baee:	6879      	ldr	r1, [r7, #4]
 800baf0:	4620      	mov	r0, r4
 800baf2:	f000 f95b 	bl	800bdac <_Balloc>
 800baf6:	4605      	mov	r5, r0
 800baf8:	b928      	cbnz	r0, 800bb06 <_dtoa_r+0x9d6>
 800bafa:	4b83      	ldr	r3, [pc, #524]	; (800bd08 <_dtoa_r+0xbd8>)
 800bafc:	4602      	mov	r2, r0
 800bafe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bb02:	f7ff bb2e 	b.w	800b162 <_dtoa_r+0x32>
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	3202      	adds	r2, #2
 800bb0a:	0092      	lsls	r2, r2, #2
 800bb0c:	f107 010c 	add.w	r1, r7, #12
 800bb10:	300c      	adds	r0, #12
 800bb12:	f7ff fa6e 	bl	800aff2 <memcpy>
 800bb16:	2201      	movs	r2, #1
 800bb18:	4629      	mov	r1, r5
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f000 fba0 	bl	800c260 <__lshift>
 800bb20:	9b00      	ldr	r3, [sp, #0]
 800bb22:	3301      	adds	r3, #1
 800bb24:	9304      	str	r3, [sp, #16]
 800bb26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	9308      	str	r3, [sp, #32]
 800bb2e:	9b02      	ldr	r3, [sp, #8]
 800bb30:	f003 0301 	and.w	r3, r3, #1
 800bb34:	46b8      	mov	r8, r7
 800bb36:	9306      	str	r3, [sp, #24]
 800bb38:	4607      	mov	r7, r0
 800bb3a:	9b04      	ldr	r3, [sp, #16]
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	4650      	mov	r0, sl
 800bb42:	9301      	str	r3, [sp, #4]
 800bb44:	f7ff fa6a 	bl	800b01c <quorem>
 800bb48:	4641      	mov	r1, r8
 800bb4a:	9002      	str	r0, [sp, #8]
 800bb4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bb50:	4650      	mov	r0, sl
 800bb52:	f000 fbf1 	bl	800c338 <__mcmp>
 800bb56:	463a      	mov	r2, r7
 800bb58:	9005      	str	r0, [sp, #20]
 800bb5a:	4631      	mov	r1, r6
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f000 fc07 	bl	800c370 <__mdiff>
 800bb62:	68c2      	ldr	r2, [r0, #12]
 800bb64:	4605      	mov	r5, r0
 800bb66:	bb02      	cbnz	r2, 800bbaa <_dtoa_r+0xa7a>
 800bb68:	4601      	mov	r1, r0
 800bb6a:	4650      	mov	r0, sl
 800bb6c:	f000 fbe4 	bl	800c338 <__mcmp>
 800bb70:	4602      	mov	r2, r0
 800bb72:	4629      	mov	r1, r5
 800bb74:	4620      	mov	r0, r4
 800bb76:	9209      	str	r2, [sp, #36]	; 0x24
 800bb78:	f000 f958 	bl	800be2c <_Bfree>
 800bb7c:	9b07      	ldr	r3, [sp, #28]
 800bb7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb80:	9d04      	ldr	r5, [sp, #16]
 800bb82:	ea43 0102 	orr.w	r1, r3, r2
 800bb86:	9b06      	ldr	r3, [sp, #24]
 800bb88:	4319      	orrs	r1, r3
 800bb8a:	d110      	bne.n	800bbae <_dtoa_r+0xa7e>
 800bb8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb90:	d029      	beq.n	800bbe6 <_dtoa_r+0xab6>
 800bb92:	9b05      	ldr	r3, [sp, #20]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dd02      	ble.n	800bb9e <_dtoa_r+0xa6e>
 800bb98:	9b02      	ldr	r3, [sp, #8]
 800bb9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	f883 9000 	strb.w	r9, [r3]
 800bba4:	e774      	b.n	800ba90 <_dtoa_r+0x960>
 800bba6:	4638      	mov	r0, r7
 800bba8:	e7ba      	b.n	800bb20 <_dtoa_r+0x9f0>
 800bbaa:	2201      	movs	r2, #1
 800bbac:	e7e1      	b.n	800bb72 <_dtoa_r+0xa42>
 800bbae:	9b05      	ldr	r3, [sp, #20]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	db04      	blt.n	800bbbe <_dtoa_r+0xa8e>
 800bbb4:	9907      	ldr	r1, [sp, #28]
 800bbb6:	430b      	orrs	r3, r1
 800bbb8:	9906      	ldr	r1, [sp, #24]
 800bbba:	430b      	orrs	r3, r1
 800bbbc:	d120      	bne.n	800bc00 <_dtoa_r+0xad0>
 800bbbe:	2a00      	cmp	r2, #0
 800bbc0:	dded      	ble.n	800bb9e <_dtoa_r+0xa6e>
 800bbc2:	4651      	mov	r1, sl
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f000 fb4a 	bl	800c260 <__lshift>
 800bbcc:	4631      	mov	r1, r6
 800bbce:	4682      	mov	sl, r0
 800bbd0:	f000 fbb2 	bl	800c338 <__mcmp>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	dc03      	bgt.n	800bbe0 <_dtoa_r+0xab0>
 800bbd8:	d1e1      	bne.n	800bb9e <_dtoa_r+0xa6e>
 800bbda:	f019 0f01 	tst.w	r9, #1
 800bbde:	d0de      	beq.n	800bb9e <_dtoa_r+0xa6e>
 800bbe0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bbe4:	d1d8      	bne.n	800bb98 <_dtoa_r+0xa68>
 800bbe6:	9a01      	ldr	r2, [sp, #4]
 800bbe8:	2339      	movs	r3, #57	; 0x39
 800bbea:	7013      	strb	r3, [r2, #0]
 800bbec:	462b      	mov	r3, r5
 800bbee:	461d      	mov	r5, r3
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbf6:	2a39      	cmp	r2, #57	; 0x39
 800bbf8:	d06c      	beq.n	800bcd4 <_dtoa_r+0xba4>
 800bbfa:	3201      	adds	r2, #1
 800bbfc:	701a      	strb	r2, [r3, #0]
 800bbfe:	e747      	b.n	800ba90 <_dtoa_r+0x960>
 800bc00:	2a00      	cmp	r2, #0
 800bc02:	dd07      	ble.n	800bc14 <_dtoa_r+0xae4>
 800bc04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bc08:	d0ed      	beq.n	800bbe6 <_dtoa_r+0xab6>
 800bc0a:	9a01      	ldr	r2, [sp, #4]
 800bc0c:	f109 0301 	add.w	r3, r9, #1
 800bc10:	7013      	strb	r3, [r2, #0]
 800bc12:	e73d      	b.n	800ba90 <_dtoa_r+0x960>
 800bc14:	9b04      	ldr	r3, [sp, #16]
 800bc16:	9a08      	ldr	r2, [sp, #32]
 800bc18:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d043      	beq.n	800bca8 <_dtoa_r+0xb78>
 800bc20:	4651      	mov	r1, sl
 800bc22:	2300      	movs	r3, #0
 800bc24:	220a      	movs	r2, #10
 800bc26:	4620      	mov	r0, r4
 800bc28:	f000 f922 	bl	800be70 <__multadd>
 800bc2c:	45b8      	cmp	r8, r7
 800bc2e:	4682      	mov	sl, r0
 800bc30:	f04f 0300 	mov.w	r3, #0
 800bc34:	f04f 020a 	mov.w	r2, #10
 800bc38:	4641      	mov	r1, r8
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	d107      	bne.n	800bc4e <_dtoa_r+0xb1e>
 800bc3e:	f000 f917 	bl	800be70 <__multadd>
 800bc42:	4680      	mov	r8, r0
 800bc44:	4607      	mov	r7, r0
 800bc46:	9b04      	ldr	r3, [sp, #16]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	9304      	str	r3, [sp, #16]
 800bc4c:	e775      	b.n	800bb3a <_dtoa_r+0xa0a>
 800bc4e:	f000 f90f 	bl	800be70 <__multadd>
 800bc52:	4639      	mov	r1, r7
 800bc54:	4680      	mov	r8, r0
 800bc56:	2300      	movs	r3, #0
 800bc58:	220a      	movs	r2, #10
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f000 f908 	bl	800be70 <__multadd>
 800bc60:	4607      	mov	r7, r0
 800bc62:	e7f0      	b.n	800bc46 <_dtoa_r+0xb16>
 800bc64:	9b04      	ldr	r3, [sp, #16]
 800bc66:	9301      	str	r3, [sp, #4]
 800bc68:	9d00      	ldr	r5, [sp, #0]
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4650      	mov	r0, sl
 800bc6e:	f7ff f9d5 	bl	800b01c <quorem>
 800bc72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bc76:	9b00      	ldr	r3, [sp, #0]
 800bc78:	f805 9b01 	strb.w	r9, [r5], #1
 800bc7c:	1aea      	subs	r2, r5, r3
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	4293      	cmp	r3, r2
 800bc82:	dd07      	ble.n	800bc94 <_dtoa_r+0xb64>
 800bc84:	4651      	mov	r1, sl
 800bc86:	2300      	movs	r3, #0
 800bc88:	220a      	movs	r2, #10
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 f8f0 	bl	800be70 <__multadd>
 800bc90:	4682      	mov	sl, r0
 800bc92:	e7ea      	b.n	800bc6a <_dtoa_r+0xb3a>
 800bc94:	9b01      	ldr	r3, [sp, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	bfc8      	it	gt
 800bc9a:	461d      	movgt	r5, r3
 800bc9c:	9b00      	ldr	r3, [sp, #0]
 800bc9e:	bfd8      	it	le
 800bca0:	2501      	movle	r5, #1
 800bca2:	441d      	add	r5, r3
 800bca4:	f04f 0800 	mov.w	r8, #0
 800bca8:	4651      	mov	r1, sl
 800bcaa:	2201      	movs	r2, #1
 800bcac:	4620      	mov	r0, r4
 800bcae:	f000 fad7 	bl	800c260 <__lshift>
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4682      	mov	sl, r0
 800bcb6:	f000 fb3f 	bl	800c338 <__mcmp>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	dc96      	bgt.n	800bbec <_dtoa_r+0xabc>
 800bcbe:	d102      	bne.n	800bcc6 <_dtoa_r+0xb96>
 800bcc0:	f019 0f01 	tst.w	r9, #1
 800bcc4:	d192      	bne.n	800bbec <_dtoa_r+0xabc>
 800bcc6:	462b      	mov	r3, r5
 800bcc8:	461d      	mov	r5, r3
 800bcca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcce:	2a30      	cmp	r2, #48	; 0x30
 800bcd0:	d0fa      	beq.n	800bcc8 <_dtoa_r+0xb98>
 800bcd2:	e6dd      	b.n	800ba90 <_dtoa_r+0x960>
 800bcd4:	9a00      	ldr	r2, [sp, #0]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d189      	bne.n	800bbee <_dtoa_r+0xabe>
 800bcda:	f10b 0b01 	add.w	fp, fp, #1
 800bcde:	2331      	movs	r3, #49	; 0x31
 800bce0:	e796      	b.n	800bc10 <_dtoa_r+0xae0>
 800bce2:	4b0a      	ldr	r3, [pc, #40]	; (800bd0c <_dtoa_r+0xbdc>)
 800bce4:	f7ff ba99 	b.w	800b21a <_dtoa_r+0xea>
 800bce8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f47f aa6d 	bne.w	800b1ca <_dtoa_r+0x9a>
 800bcf0:	4b07      	ldr	r3, [pc, #28]	; (800bd10 <_dtoa_r+0xbe0>)
 800bcf2:	f7ff ba92 	b.w	800b21a <_dtoa_r+0xea>
 800bcf6:	9b01      	ldr	r3, [sp, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	dcb5      	bgt.n	800bc68 <_dtoa_r+0xb38>
 800bcfc:	9b07      	ldr	r3, [sp, #28]
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	f73f aeb1 	bgt.w	800ba66 <_dtoa_r+0x936>
 800bd04:	e7b0      	b.n	800bc68 <_dtoa_r+0xb38>
 800bd06:	bf00      	nop
 800bd08:	08011911 	.word	0x08011911
 800bd0c:	0801186c 	.word	0x0801186c
 800bd10:	08011895 	.word	0x08011895

0800bd14 <_free_r>:
 800bd14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd16:	2900      	cmp	r1, #0
 800bd18:	d044      	beq.n	800bda4 <_free_r+0x90>
 800bd1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd1e:	9001      	str	r0, [sp, #4]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f1a1 0404 	sub.w	r4, r1, #4
 800bd26:	bfb8      	it	lt
 800bd28:	18e4      	addlt	r4, r4, r3
 800bd2a:	f7fe f8f7 	bl	8009f1c <__malloc_lock>
 800bd2e:	4a1e      	ldr	r2, [pc, #120]	; (800bda8 <_free_r+0x94>)
 800bd30:	9801      	ldr	r0, [sp, #4]
 800bd32:	6813      	ldr	r3, [r2, #0]
 800bd34:	b933      	cbnz	r3, 800bd44 <_free_r+0x30>
 800bd36:	6063      	str	r3, [r4, #4]
 800bd38:	6014      	str	r4, [r2, #0]
 800bd3a:	b003      	add	sp, #12
 800bd3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd40:	f7fe b8f2 	b.w	8009f28 <__malloc_unlock>
 800bd44:	42a3      	cmp	r3, r4
 800bd46:	d908      	bls.n	800bd5a <_free_r+0x46>
 800bd48:	6825      	ldr	r5, [r4, #0]
 800bd4a:	1961      	adds	r1, r4, r5
 800bd4c:	428b      	cmp	r3, r1
 800bd4e:	bf01      	itttt	eq
 800bd50:	6819      	ldreq	r1, [r3, #0]
 800bd52:	685b      	ldreq	r3, [r3, #4]
 800bd54:	1949      	addeq	r1, r1, r5
 800bd56:	6021      	streq	r1, [r4, #0]
 800bd58:	e7ed      	b.n	800bd36 <_free_r+0x22>
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	b10b      	cbz	r3, 800bd64 <_free_r+0x50>
 800bd60:	42a3      	cmp	r3, r4
 800bd62:	d9fa      	bls.n	800bd5a <_free_r+0x46>
 800bd64:	6811      	ldr	r1, [r2, #0]
 800bd66:	1855      	adds	r5, r2, r1
 800bd68:	42a5      	cmp	r5, r4
 800bd6a:	d10b      	bne.n	800bd84 <_free_r+0x70>
 800bd6c:	6824      	ldr	r4, [r4, #0]
 800bd6e:	4421      	add	r1, r4
 800bd70:	1854      	adds	r4, r2, r1
 800bd72:	42a3      	cmp	r3, r4
 800bd74:	6011      	str	r1, [r2, #0]
 800bd76:	d1e0      	bne.n	800bd3a <_free_r+0x26>
 800bd78:	681c      	ldr	r4, [r3, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	6053      	str	r3, [r2, #4]
 800bd7e:	440c      	add	r4, r1
 800bd80:	6014      	str	r4, [r2, #0]
 800bd82:	e7da      	b.n	800bd3a <_free_r+0x26>
 800bd84:	d902      	bls.n	800bd8c <_free_r+0x78>
 800bd86:	230c      	movs	r3, #12
 800bd88:	6003      	str	r3, [r0, #0]
 800bd8a:	e7d6      	b.n	800bd3a <_free_r+0x26>
 800bd8c:	6825      	ldr	r5, [r4, #0]
 800bd8e:	1961      	adds	r1, r4, r5
 800bd90:	428b      	cmp	r3, r1
 800bd92:	bf04      	itt	eq
 800bd94:	6819      	ldreq	r1, [r3, #0]
 800bd96:	685b      	ldreq	r3, [r3, #4]
 800bd98:	6063      	str	r3, [r4, #4]
 800bd9a:	bf04      	itt	eq
 800bd9c:	1949      	addeq	r1, r1, r5
 800bd9e:	6021      	streq	r1, [r4, #0]
 800bda0:	6054      	str	r4, [r2, #4]
 800bda2:	e7ca      	b.n	800bd3a <_free_r+0x26>
 800bda4:	b003      	add	sp, #12
 800bda6:	bd30      	pop	{r4, r5, pc}
 800bda8:	200009d8 	.word	0x200009d8

0800bdac <_Balloc>:
 800bdac:	b570      	push	{r4, r5, r6, lr}
 800bdae:	69c6      	ldr	r6, [r0, #28]
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	460d      	mov	r5, r1
 800bdb4:	b976      	cbnz	r6, 800bdd4 <_Balloc+0x28>
 800bdb6:	2010      	movs	r0, #16
 800bdb8:	f7fe f800 	bl	8009dbc <malloc>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	61e0      	str	r0, [r4, #28]
 800bdc0:	b920      	cbnz	r0, 800bdcc <_Balloc+0x20>
 800bdc2:	4b18      	ldr	r3, [pc, #96]	; (800be24 <_Balloc+0x78>)
 800bdc4:	4818      	ldr	r0, [pc, #96]	; (800be28 <_Balloc+0x7c>)
 800bdc6:	216b      	movs	r1, #107	; 0x6b
 800bdc8:	f001 fd6e 	bl	800d8a8 <__assert_func>
 800bdcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdd0:	6006      	str	r6, [r0, #0]
 800bdd2:	60c6      	str	r6, [r0, #12]
 800bdd4:	69e6      	ldr	r6, [r4, #28]
 800bdd6:	68f3      	ldr	r3, [r6, #12]
 800bdd8:	b183      	cbz	r3, 800bdfc <_Balloc+0x50>
 800bdda:	69e3      	ldr	r3, [r4, #28]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bde2:	b9b8      	cbnz	r0, 800be14 <_Balloc+0x68>
 800bde4:	2101      	movs	r1, #1
 800bde6:	fa01 f605 	lsl.w	r6, r1, r5
 800bdea:	1d72      	adds	r2, r6, #5
 800bdec:	0092      	lsls	r2, r2, #2
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f001 fd78 	bl	800d8e4 <_calloc_r>
 800bdf4:	b160      	cbz	r0, 800be10 <_Balloc+0x64>
 800bdf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdfa:	e00e      	b.n	800be1a <_Balloc+0x6e>
 800bdfc:	2221      	movs	r2, #33	; 0x21
 800bdfe:	2104      	movs	r1, #4
 800be00:	4620      	mov	r0, r4
 800be02:	f001 fd6f 	bl	800d8e4 <_calloc_r>
 800be06:	69e3      	ldr	r3, [r4, #28]
 800be08:	60f0      	str	r0, [r6, #12]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1e4      	bne.n	800bdda <_Balloc+0x2e>
 800be10:	2000      	movs	r0, #0
 800be12:	bd70      	pop	{r4, r5, r6, pc}
 800be14:	6802      	ldr	r2, [r0, #0]
 800be16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be1a:	2300      	movs	r3, #0
 800be1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be20:	e7f7      	b.n	800be12 <_Balloc+0x66>
 800be22:	bf00      	nop
 800be24:	080118a2 	.word	0x080118a2
 800be28:	08011922 	.word	0x08011922

0800be2c <_Bfree>:
 800be2c:	b570      	push	{r4, r5, r6, lr}
 800be2e:	69c6      	ldr	r6, [r0, #28]
 800be30:	4605      	mov	r5, r0
 800be32:	460c      	mov	r4, r1
 800be34:	b976      	cbnz	r6, 800be54 <_Bfree+0x28>
 800be36:	2010      	movs	r0, #16
 800be38:	f7fd ffc0 	bl	8009dbc <malloc>
 800be3c:	4602      	mov	r2, r0
 800be3e:	61e8      	str	r0, [r5, #28]
 800be40:	b920      	cbnz	r0, 800be4c <_Bfree+0x20>
 800be42:	4b09      	ldr	r3, [pc, #36]	; (800be68 <_Bfree+0x3c>)
 800be44:	4809      	ldr	r0, [pc, #36]	; (800be6c <_Bfree+0x40>)
 800be46:	218f      	movs	r1, #143	; 0x8f
 800be48:	f001 fd2e 	bl	800d8a8 <__assert_func>
 800be4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be50:	6006      	str	r6, [r0, #0]
 800be52:	60c6      	str	r6, [r0, #12]
 800be54:	b13c      	cbz	r4, 800be66 <_Bfree+0x3a>
 800be56:	69eb      	ldr	r3, [r5, #28]
 800be58:	6862      	ldr	r2, [r4, #4]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be60:	6021      	str	r1, [r4, #0]
 800be62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be66:	bd70      	pop	{r4, r5, r6, pc}
 800be68:	080118a2 	.word	0x080118a2
 800be6c:	08011922 	.word	0x08011922

0800be70 <__multadd>:
 800be70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be74:	690d      	ldr	r5, [r1, #16]
 800be76:	4607      	mov	r7, r0
 800be78:	460c      	mov	r4, r1
 800be7a:	461e      	mov	r6, r3
 800be7c:	f101 0c14 	add.w	ip, r1, #20
 800be80:	2000      	movs	r0, #0
 800be82:	f8dc 3000 	ldr.w	r3, [ip]
 800be86:	b299      	uxth	r1, r3
 800be88:	fb02 6101 	mla	r1, r2, r1, r6
 800be8c:	0c1e      	lsrs	r6, r3, #16
 800be8e:	0c0b      	lsrs	r3, r1, #16
 800be90:	fb02 3306 	mla	r3, r2, r6, r3
 800be94:	b289      	uxth	r1, r1
 800be96:	3001      	adds	r0, #1
 800be98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be9c:	4285      	cmp	r5, r0
 800be9e:	f84c 1b04 	str.w	r1, [ip], #4
 800bea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bea6:	dcec      	bgt.n	800be82 <__multadd+0x12>
 800bea8:	b30e      	cbz	r6, 800beee <__multadd+0x7e>
 800beaa:	68a3      	ldr	r3, [r4, #8]
 800beac:	42ab      	cmp	r3, r5
 800beae:	dc19      	bgt.n	800bee4 <__multadd+0x74>
 800beb0:	6861      	ldr	r1, [r4, #4]
 800beb2:	4638      	mov	r0, r7
 800beb4:	3101      	adds	r1, #1
 800beb6:	f7ff ff79 	bl	800bdac <_Balloc>
 800beba:	4680      	mov	r8, r0
 800bebc:	b928      	cbnz	r0, 800beca <__multadd+0x5a>
 800bebe:	4602      	mov	r2, r0
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <__multadd+0x84>)
 800bec2:	480d      	ldr	r0, [pc, #52]	; (800bef8 <__multadd+0x88>)
 800bec4:	21ba      	movs	r1, #186	; 0xba
 800bec6:	f001 fcef 	bl	800d8a8 <__assert_func>
 800beca:	6922      	ldr	r2, [r4, #16]
 800becc:	3202      	adds	r2, #2
 800bece:	f104 010c 	add.w	r1, r4, #12
 800bed2:	0092      	lsls	r2, r2, #2
 800bed4:	300c      	adds	r0, #12
 800bed6:	f7ff f88c 	bl	800aff2 <memcpy>
 800beda:	4621      	mov	r1, r4
 800bedc:	4638      	mov	r0, r7
 800bede:	f7ff ffa5 	bl	800be2c <_Bfree>
 800bee2:	4644      	mov	r4, r8
 800bee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bee8:	3501      	adds	r5, #1
 800beea:	615e      	str	r6, [r3, #20]
 800beec:	6125      	str	r5, [r4, #16]
 800beee:	4620      	mov	r0, r4
 800bef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef4:	08011911 	.word	0x08011911
 800bef8:	08011922 	.word	0x08011922

0800befc <__s2b>:
 800befc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf00:	460c      	mov	r4, r1
 800bf02:	4615      	mov	r5, r2
 800bf04:	461f      	mov	r7, r3
 800bf06:	2209      	movs	r2, #9
 800bf08:	3308      	adds	r3, #8
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf10:	2100      	movs	r1, #0
 800bf12:	2201      	movs	r2, #1
 800bf14:	429a      	cmp	r2, r3
 800bf16:	db09      	blt.n	800bf2c <__s2b+0x30>
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f7ff ff47 	bl	800bdac <_Balloc>
 800bf1e:	b940      	cbnz	r0, 800bf32 <__s2b+0x36>
 800bf20:	4602      	mov	r2, r0
 800bf22:	4b19      	ldr	r3, [pc, #100]	; (800bf88 <__s2b+0x8c>)
 800bf24:	4819      	ldr	r0, [pc, #100]	; (800bf8c <__s2b+0x90>)
 800bf26:	21d3      	movs	r1, #211	; 0xd3
 800bf28:	f001 fcbe 	bl	800d8a8 <__assert_func>
 800bf2c:	0052      	lsls	r2, r2, #1
 800bf2e:	3101      	adds	r1, #1
 800bf30:	e7f0      	b.n	800bf14 <__s2b+0x18>
 800bf32:	9b08      	ldr	r3, [sp, #32]
 800bf34:	6143      	str	r3, [r0, #20]
 800bf36:	2d09      	cmp	r5, #9
 800bf38:	f04f 0301 	mov.w	r3, #1
 800bf3c:	6103      	str	r3, [r0, #16]
 800bf3e:	dd16      	ble.n	800bf6e <__s2b+0x72>
 800bf40:	f104 0909 	add.w	r9, r4, #9
 800bf44:	46c8      	mov	r8, r9
 800bf46:	442c      	add	r4, r5
 800bf48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf4c:	4601      	mov	r1, r0
 800bf4e:	3b30      	subs	r3, #48	; 0x30
 800bf50:	220a      	movs	r2, #10
 800bf52:	4630      	mov	r0, r6
 800bf54:	f7ff ff8c 	bl	800be70 <__multadd>
 800bf58:	45a0      	cmp	r8, r4
 800bf5a:	d1f5      	bne.n	800bf48 <__s2b+0x4c>
 800bf5c:	f1a5 0408 	sub.w	r4, r5, #8
 800bf60:	444c      	add	r4, r9
 800bf62:	1b2d      	subs	r5, r5, r4
 800bf64:	1963      	adds	r3, r4, r5
 800bf66:	42bb      	cmp	r3, r7
 800bf68:	db04      	blt.n	800bf74 <__s2b+0x78>
 800bf6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf6e:	340a      	adds	r4, #10
 800bf70:	2509      	movs	r5, #9
 800bf72:	e7f6      	b.n	800bf62 <__s2b+0x66>
 800bf74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf78:	4601      	mov	r1, r0
 800bf7a:	3b30      	subs	r3, #48	; 0x30
 800bf7c:	220a      	movs	r2, #10
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f7ff ff76 	bl	800be70 <__multadd>
 800bf84:	e7ee      	b.n	800bf64 <__s2b+0x68>
 800bf86:	bf00      	nop
 800bf88:	08011911 	.word	0x08011911
 800bf8c:	08011922 	.word	0x08011922

0800bf90 <__hi0bits>:
 800bf90:	0c03      	lsrs	r3, r0, #16
 800bf92:	041b      	lsls	r3, r3, #16
 800bf94:	b9d3      	cbnz	r3, 800bfcc <__hi0bits+0x3c>
 800bf96:	0400      	lsls	r0, r0, #16
 800bf98:	2310      	movs	r3, #16
 800bf9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf9e:	bf04      	itt	eq
 800bfa0:	0200      	lsleq	r0, r0, #8
 800bfa2:	3308      	addeq	r3, #8
 800bfa4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bfa8:	bf04      	itt	eq
 800bfaa:	0100      	lsleq	r0, r0, #4
 800bfac:	3304      	addeq	r3, #4
 800bfae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfb2:	bf04      	itt	eq
 800bfb4:	0080      	lsleq	r0, r0, #2
 800bfb6:	3302      	addeq	r3, #2
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	db05      	blt.n	800bfc8 <__hi0bits+0x38>
 800bfbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfc0:	f103 0301 	add.w	r3, r3, #1
 800bfc4:	bf08      	it	eq
 800bfc6:	2320      	moveq	r3, #32
 800bfc8:	4618      	mov	r0, r3
 800bfca:	4770      	bx	lr
 800bfcc:	2300      	movs	r3, #0
 800bfce:	e7e4      	b.n	800bf9a <__hi0bits+0xa>

0800bfd0 <__lo0bits>:
 800bfd0:	6803      	ldr	r3, [r0, #0]
 800bfd2:	f013 0207 	ands.w	r2, r3, #7
 800bfd6:	d00c      	beq.n	800bff2 <__lo0bits+0x22>
 800bfd8:	07d9      	lsls	r1, r3, #31
 800bfda:	d422      	bmi.n	800c022 <__lo0bits+0x52>
 800bfdc:	079a      	lsls	r2, r3, #30
 800bfde:	bf49      	itett	mi
 800bfe0:	085b      	lsrmi	r3, r3, #1
 800bfe2:	089b      	lsrpl	r3, r3, #2
 800bfe4:	6003      	strmi	r3, [r0, #0]
 800bfe6:	2201      	movmi	r2, #1
 800bfe8:	bf5c      	itt	pl
 800bfea:	6003      	strpl	r3, [r0, #0]
 800bfec:	2202      	movpl	r2, #2
 800bfee:	4610      	mov	r0, r2
 800bff0:	4770      	bx	lr
 800bff2:	b299      	uxth	r1, r3
 800bff4:	b909      	cbnz	r1, 800bffa <__lo0bits+0x2a>
 800bff6:	0c1b      	lsrs	r3, r3, #16
 800bff8:	2210      	movs	r2, #16
 800bffa:	b2d9      	uxtb	r1, r3
 800bffc:	b909      	cbnz	r1, 800c002 <__lo0bits+0x32>
 800bffe:	3208      	adds	r2, #8
 800c000:	0a1b      	lsrs	r3, r3, #8
 800c002:	0719      	lsls	r1, r3, #28
 800c004:	bf04      	itt	eq
 800c006:	091b      	lsreq	r3, r3, #4
 800c008:	3204      	addeq	r2, #4
 800c00a:	0799      	lsls	r1, r3, #30
 800c00c:	bf04      	itt	eq
 800c00e:	089b      	lsreq	r3, r3, #2
 800c010:	3202      	addeq	r2, #2
 800c012:	07d9      	lsls	r1, r3, #31
 800c014:	d403      	bmi.n	800c01e <__lo0bits+0x4e>
 800c016:	085b      	lsrs	r3, r3, #1
 800c018:	f102 0201 	add.w	r2, r2, #1
 800c01c:	d003      	beq.n	800c026 <__lo0bits+0x56>
 800c01e:	6003      	str	r3, [r0, #0]
 800c020:	e7e5      	b.n	800bfee <__lo0bits+0x1e>
 800c022:	2200      	movs	r2, #0
 800c024:	e7e3      	b.n	800bfee <__lo0bits+0x1e>
 800c026:	2220      	movs	r2, #32
 800c028:	e7e1      	b.n	800bfee <__lo0bits+0x1e>
	...

0800c02c <__i2b>:
 800c02c:	b510      	push	{r4, lr}
 800c02e:	460c      	mov	r4, r1
 800c030:	2101      	movs	r1, #1
 800c032:	f7ff febb 	bl	800bdac <_Balloc>
 800c036:	4602      	mov	r2, r0
 800c038:	b928      	cbnz	r0, 800c046 <__i2b+0x1a>
 800c03a:	4b05      	ldr	r3, [pc, #20]	; (800c050 <__i2b+0x24>)
 800c03c:	4805      	ldr	r0, [pc, #20]	; (800c054 <__i2b+0x28>)
 800c03e:	f240 1145 	movw	r1, #325	; 0x145
 800c042:	f001 fc31 	bl	800d8a8 <__assert_func>
 800c046:	2301      	movs	r3, #1
 800c048:	6144      	str	r4, [r0, #20]
 800c04a:	6103      	str	r3, [r0, #16]
 800c04c:	bd10      	pop	{r4, pc}
 800c04e:	bf00      	nop
 800c050:	08011911 	.word	0x08011911
 800c054:	08011922 	.word	0x08011922

0800c058 <__multiply>:
 800c058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05c:	4691      	mov	r9, r2
 800c05e:	690a      	ldr	r2, [r1, #16]
 800c060:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c064:	429a      	cmp	r2, r3
 800c066:	bfb8      	it	lt
 800c068:	460b      	movlt	r3, r1
 800c06a:	460c      	mov	r4, r1
 800c06c:	bfbc      	itt	lt
 800c06e:	464c      	movlt	r4, r9
 800c070:	4699      	movlt	r9, r3
 800c072:	6927      	ldr	r7, [r4, #16]
 800c074:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c078:	68a3      	ldr	r3, [r4, #8]
 800c07a:	6861      	ldr	r1, [r4, #4]
 800c07c:	eb07 060a 	add.w	r6, r7, sl
 800c080:	42b3      	cmp	r3, r6
 800c082:	b085      	sub	sp, #20
 800c084:	bfb8      	it	lt
 800c086:	3101      	addlt	r1, #1
 800c088:	f7ff fe90 	bl	800bdac <_Balloc>
 800c08c:	b930      	cbnz	r0, 800c09c <__multiply+0x44>
 800c08e:	4602      	mov	r2, r0
 800c090:	4b44      	ldr	r3, [pc, #272]	; (800c1a4 <__multiply+0x14c>)
 800c092:	4845      	ldr	r0, [pc, #276]	; (800c1a8 <__multiply+0x150>)
 800c094:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c098:	f001 fc06 	bl	800d8a8 <__assert_func>
 800c09c:	f100 0514 	add.w	r5, r0, #20
 800c0a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0a4:	462b      	mov	r3, r5
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	4543      	cmp	r3, r8
 800c0aa:	d321      	bcc.n	800c0f0 <__multiply+0x98>
 800c0ac:	f104 0314 	add.w	r3, r4, #20
 800c0b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0b4:	f109 0314 	add.w	r3, r9, #20
 800c0b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0bc:	9202      	str	r2, [sp, #8]
 800c0be:	1b3a      	subs	r2, r7, r4
 800c0c0:	3a15      	subs	r2, #21
 800c0c2:	f022 0203 	bic.w	r2, r2, #3
 800c0c6:	3204      	adds	r2, #4
 800c0c8:	f104 0115 	add.w	r1, r4, #21
 800c0cc:	428f      	cmp	r7, r1
 800c0ce:	bf38      	it	cc
 800c0d0:	2204      	movcc	r2, #4
 800c0d2:	9201      	str	r2, [sp, #4]
 800c0d4:	9a02      	ldr	r2, [sp, #8]
 800c0d6:	9303      	str	r3, [sp, #12]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d80c      	bhi.n	800c0f6 <__multiply+0x9e>
 800c0dc:	2e00      	cmp	r6, #0
 800c0de:	dd03      	ble.n	800c0e8 <__multiply+0x90>
 800c0e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d05b      	beq.n	800c1a0 <__multiply+0x148>
 800c0e8:	6106      	str	r6, [r0, #16]
 800c0ea:	b005      	add	sp, #20
 800c0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f0:	f843 2b04 	str.w	r2, [r3], #4
 800c0f4:	e7d8      	b.n	800c0a8 <__multiply+0x50>
 800c0f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0fa:	f1ba 0f00 	cmp.w	sl, #0
 800c0fe:	d024      	beq.n	800c14a <__multiply+0xf2>
 800c100:	f104 0e14 	add.w	lr, r4, #20
 800c104:	46a9      	mov	r9, r5
 800c106:	f04f 0c00 	mov.w	ip, #0
 800c10a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c10e:	f8d9 1000 	ldr.w	r1, [r9]
 800c112:	fa1f fb82 	uxth.w	fp, r2
 800c116:	b289      	uxth	r1, r1
 800c118:	fb0a 110b 	mla	r1, sl, fp, r1
 800c11c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c120:	f8d9 2000 	ldr.w	r2, [r9]
 800c124:	4461      	add	r1, ip
 800c126:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c12a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c12e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c132:	b289      	uxth	r1, r1
 800c134:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c138:	4577      	cmp	r7, lr
 800c13a:	f849 1b04 	str.w	r1, [r9], #4
 800c13e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c142:	d8e2      	bhi.n	800c10a <__multiply+0xb2>
 800c144:	9a01      	ldr	r2, [sp, #4]
 800c146:	f845 c002 	str.w	ip, [r5, r2]
 800c14a:	9a03      	ldr	r2, [sp, #12]
 800c14c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c150:	3304      	adds	r3, #4
 800c152:	f1b9 0f00 	cmp.w	r9, #0
 800c156:	d021      	beq.n	800c19c <__multiply+0x144>
 800c158:	6829      	ldr	r1, [r5, #0]
 800c15a:	f104 0c14 	add.w	ip, r4, #20
 800c15e:	46ae      	mov	lr, r5
 800c160:	f04f 0a00 	mov.w	sl, #0
 800c164:	f8bc b000 	ldrh.w	fp, [ip]
 800c168:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c16c:	fb09 220b 	mla	r2, r9, fp, r2
 800c170:	4452      	add	r2, sl
 800c172:	b289      	uxth	r1, r1
 800c174:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c178:	f84e 1b04 	str.w	r1, [lr], #4
 800c17c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c180:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c184:	f8be 1000 	ldrh.w	r1, [lr]
 800c188:	fb09 110a 	mla	r1, r9, sl, r1
 800c18c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c190:	4567      	cmp	r7, ip
 800c192:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c196:	d8e5      	bhi.n	800c164 <__multiply+0x10c>
 800c198:	9a01      	ldr	r2, [sp, #4]
 800c19a:	50a9      	str	r1, [r5, r2]
 800c19c:	3504      	adds	r5, #4
 800c19e:	e799      	b.n	800c0d4 <__multiply+0x7c>
 800c1a0:	3e01      	subs	r6, #1
 800c1a2:	e79b      	b.n	800c0dc <__multiply+0x84>
 800c1a4:	08011911 	.word	0x08011911
 800c1a8:	08011922 	.word	0x08011922

0800c1ac <__pow5mult>:
 800c1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b0:	4615      	mov	r5, r2
 800c1b2:	f012 0203 	ands.w	r2, r2, #3
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	460f      	mov	r7, r1
 800c1ba:	d007      	beq.n	800c1cc <__pow5mult+0x20>
 800c1bc:	4c25      	ldr	r4, [pc, #148]	; (800c254 <__pow5mult+0xa8>)
 800c1be:	3a01      	subs	r2, #1
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1c6:	f7ff fe53 	bl	800be70 <__multadd>
 800c1ca:	4607      	mov	r7, r0
 800c1cc:	10ad      	asrs	r5, r5, #2
 800c1ce:	d03d      	beq.n	800c24c <__pow5mult+0xa0>
 800c1d0:	69f4      	ldr	r4, [r6, #28]
 800c1d2:	b97c      	cbnz	r4, 800c1f4 <__pow5mult+0x48>
 800c1d4:	2010      	movs	r0, #16
 800c1d6:	f7fd fdf1 	bl	8009dbc <malloc>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	61f0      	str	r0, [r6, #28]
 800c1de:	b928      	cbnz	r0, 800c1ec <__pow5mult+0x40>
 800c1e0:	4b1d      	ldr	r3, [pc, #116]	; (800c258 <__pow5mult+0xac>)
 800c1e2:	481e      	ldr	r0, [pc, #120]	; (800c25c <__pow5mult+0xb0>)
 800c1e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c1e8:	f001 fb5e 	bl	800d8a8 <__assert_func>
 800c1ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1f0:	6004      	str	r4, [r0, #0]
 800c1f2:	60c4      	str	r4, [r0, #12]
 800c1f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c1f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1fc:	b94c      	cbnz	r4, 800c212 <__pow5mult+0x66>
 800c1fe:	f240 2171 	movw	r1, #625	; 0x271
 800c202:	4630      	mov	r0, r6
 800c204:	f7ff ff12 	bl	800c02c <__i2b>
 800c208:	2300      	movs	r3, #0
 800c20a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c20e:	4604      	mov	r4, r0
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	f04f 0900 	mov.w	r9, #0
 800c216:	07eb      	lsls	r3, r5, #31
 800c218:	d50a      	bpl.n	800c230 <__pow5mult+0x84>
 800c21a:	4639      	mov	r1, r7
 800c21c:	4622      	mov	r2, r4
 800c21e:	4630      	mov	r0, r6
 800c220:	f7ff ff1a 	bl	800c058 <__multiply>
 800c224:	4639      	mov	r1, r7
 800c226:	4680      	mov	r8, r0
 800c228:	4630      	mov	r0, r6
 800c22a:	f7ff fdff 	bl	800be2c <_Bfree>
 800c22e:	4647      	mov	r7, r8
 800c230:	106d      	asrs	r5, r5, #1
 800c232:	d00b      	beq.n	800c24c <__pow5mult+0xa0>
 800c234:	6820      	ldr	r0, [r4, #0]
 800c236:	b938      	cbnz	r0, 800c248 <__pow5mult+0x9c>
 800c238:	4622      	mov	r2, r4
 800c23a:	4621      	mov	r1, r4
 800c23c:	4630      	mov	r0, r6
 800c23e:	f7ff ff0b 	bl	800c058 <__multiply>
 800c242:	6020      	str	r0, [r4, #0]
 800c244:	f8c0 9000 	str.w	r9, [r0]
 800c248:	4604      	mov	r4, r0
 800c24a:	e7e4      	b.n	800c216 <__pow5mult+0x6a>
 800c24c:	4638      	mov	r0, r7
 800c24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c252:	bf00      	nop
 800c254:	08011a70 	.word	0x08011a70
 800c258:	080118a2 	.word	0x080118a2
 800c25c:	08011922 	.word	0x08011922

0800c260 <__lshift>:
 800c260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c264:	460c      	mov	r4, r1
 800c266:	6849      	ldr	r1, [r1, #4]
 800c268:	6923      	ldr	r3, [r4, #16]
 800c26a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c26e:	68a3      	ldr	r3, [r4, #8]
 800c270:	4607      	mov	r7, r0
 800c272:	4691      	mov	r9, r2
 800c274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c278:	f108 0601 	add.w	r6, r8, #1
 800c27c:	42b3      	cmp	r3, r6
 800c27e:	db0b      	blt.n	800c298 <__lshift+0x38>
 800c280:	4638      	mov	r0, r7
 800c282:	f7ff fd93 	bl	800bdac <_Balloc>
 800c286:	4605      	mov	r5, r0
 800c288:	b948      	cbnz	r0, 800c29e <__lshift+0x3e>
 800c28a:	4602      	mov	r2, r0
 800c28c:	4b28      	ldr	r3, [pc, #160]	; (800c330 <__lshift+0xd0>)
 800c28e:	4829      	ldr	r0, [pc, #164]	; (800c334 <__lshift+0xd4>)
 800c290:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c294:	f001 fb08 	bl	800d8a8 <__assert_func>
 800c298:	3101      	adds	r1, #1
 800c29a:	005b      	lsls	r3, r3, #1
 800c29c:	e7ee      	b.n	800c27c <__lshift+0x1c>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f100 0114 	add.w	r1, r0, #20
 800c2a4:	f100 0210 	add.w	r2, r0, #16
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	4553      	cmp	r3, sl
 800c2ac:	db33      	blt.n	800c316 <__lshift+0xb6>
 800c2ae:	6920      	ldr	r0, [r4, #16]
 800c2b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2b4:	f104 0314 	add.w	r3, r4, #20
 800c2b8:	f019 091f 	ands.w	r9, r9, #31
 800c2bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2c4:	d02b      	beq.n	800c31e <__lshift+0xbe>
 800c2c6:	f1c9 0e20 	rsb	lr, r9, #32
 800c2ca:	468a      	mov	sl, r1
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	fa00 f009 	lsl.w	r0, r0, r9
 800c2d4:	4310      	orrs	r0, r2
 800c2d6:	f84a 0b04 	str.w	r0, [sl], #4
 800c2da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2de:	459c      	cmp	ip, r3
 800c2e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2e4:	d8f3      	bhi.n	800c2ce <__lshift+0x6e>
 800c2e6:	ebac 0304 	sub.w	r3, ip, r4
 800c2ea:	3b15      	subs	r3, #21
 800c2ec:	f023 0303 	bic.w	r3, r3, #3
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	f104 0015 	add.w	r0, r4, #21
 800c2f6:	4584      	cmp	ip, r0
 800c2f8:	bf38      	it	cc
 800c2fa:	2304      	movcc	r3, #4
 800c2fc:	50ca      	str	r2, [r1, r3]
 800c2fe:	b10a      	cbz	r2, 800c304 <__lshift+0xa4>
 800c300:	f108 0602 	add.w	r6, r8, #2
 800c304:	3e01      	subs	r6, #1
 800c306:	4638      	mov	r0, r7
 800c308:	612e      	str	r6, [r5, #16]
 800c30a:	4621      	mov	r1, r4
 800c30c:	f7ff fd8e 	bl	800be2c <_Bfree>
 800c310:	4628      	mov	r0, r5
 800c312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c316:	f842 0f04 	str.w	r0, [r2, #4]!
 800c31a:	3301      	adds	r3, #1
 800c31c:	e7c5      	b.n	800c2aa <__lshift+0x4a>
 800c31e:	3904      	subs	r1, #4
 800c320:	f853 2b04 	ldr.w	r2, [r3], #4
 800c324:	f841 2f04 	str.w	r2, [r1, #4]!
 800c328:	459c      	cmp	ip, r3
 800c32a:	d8f9      	bhi.n	800c320 <__lshift+0xc0>
 800c32c:	e7ea      	b.n	800c304 <__lshift+0xa4>
 800c32e:	bf00      	nop
 800c330:	08011911 	.word	0x08011911
 800c334:	08011922 	.word	0x08011922

0800c338 <__mcmp>:
 800c338:	b530      	push	{r4, r5, lr}
 800c33a:	6902      	ldr	r2, [r0, #16]
 800c33c:	690c      	ldr	r4, [r1, #16]
 800c33e:	1b12      	subs	r2, r2, r4
 800c340:	d10e      	bne.n	800c360 <__mcmp+0x28>
 800c342:	f100 0314 	add.w	r3, r0, #20
 800c346:	3114      	adds	r1, #20
 800c348:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c34c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c350:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c354:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c358:	42a5      	cmp	r5, r4
 800c35a:	d003      	beq.n	800c364 <__mcmp+0x2c>
 800c35c:	d305      	bcc.n	800c36a <__mcmp+0x32>
 800c35e:	2201      	movs	r2, #1
 800c360:	4610      	mov	r0, r2
 800c362:	bd30      	pop	{r4, r5, pc}
 800c364:	4283      	cmp	r3, r0
 800c366:	d3f3      	bcc.n	800c350 <__mcmp+0x18>
 800c368:	e7fa      	b.n	800c360 <__mcmp+0x28>
 800c36a:	f04f 32ff 	mov.w	r2, #4294967295
 800c36e:	e7f7      	b.n	800c360 <__mcmp+0x28>

0800c370 <__mdiff>:
 800c370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c374:	460c      	mov	r4, r1
 800c376:	4606      	mov	r6, r0
 800c378:	4611      	mov	r1, r2
 800c37a:	4620      	mov	r0, r4
 800c37c:	4690      	mov	r8, r2
 800c37e:	f7ff ffdb 	bl	800c338 <__mcmp>
 800c382:	1e05      	subs	r5, r0, #0
 800c384:	d110      	bne.n	800c3a8 <__mdiff+0x38>
 800c386:	4629      	mov	r1, r5
 800c388:	4630      	mov	r0, r6
 800c38a:	f7ff fd0f 	bl	800bdac <_Balloc>
 800c38e:	b930      	cbnz	r0, 800c39e <__mdiff+0x2e>
 800c390:	4b3a      	ldr	r3, [pc, #232]	; (800c47c <__mdiff+0x10c>)
 800c392:	4602      	mov	r2, r0
 800c394:	f240 2137 	movw	r1, #567	; 0x237
 800c398:	4839      	ldr	r0, [pc, #228]	; (800c480 <__mdiff+0x110>)
 800c39a:	f001 fa85 	bl	800d8a8 <__assert_func>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a8:	bfa4      	itt	ge
 800c3aa:	4643      	movge	r3, r8
 800c3ac:	46a0      	movge	r8, r4
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3b4:	bfa6      	itte	ge
 800c3b6:	461c      	movge	r4, r3
 800c3b8:	2500      	movge	r5, #0
 800c3ba:	2501      	movlt	r5, #1
 800c3bc:	f7ff fcf6 	bl	800bdac <_Balloc>
 800c3c0:	b920      	cbnz	r0, 800c3cc <__mdiff+0x5c>
 800c3c2:	4b2e      	ldr	r3, [pc, #184]	; (800c47c <__mdiff+0x10c>)
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	f240 2145 	movw	r1, #581	; 0x245
 800c3ca:	e7e5      	b.n	800c398 <__mdiff+0x28>
 800c3cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3d0:	6926      	ldr	r6, [r4, #16]
 800c3d2:	60c5      	str	r5, [r0, #12]
 800c3d4:	f104 0914 	add.w	r9, r4, #20
 800c3d8:	f108 0514 	add.w	r5, r8, #20
 800c3dc:	f100 0e14 	add.w	lr, r0, #20
 800c3e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c3e8:	f108 0210 	add.w	r2, r8, #16
 800c3ec:	46f2      	mov	sl, lr
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3f8:	fa11 f88b 	uxtah	r8, r1, fp
 800c3fc:	b299      	uxth	r1, r3
 800c3fe:	0c1b      	lsrs	r3, r3, #16
 800c400:	eba8 0801 	sub.w	r8, r8, r1
 800c404:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c408:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c40c:	fa1f f888 	uxth.w	r8, r8
 800c410:	1419      	asrs	r1, r3, #16
 800c412:	454e      	cmp	r6, r9
 800c414:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c418:	f84a 3b04 	str.w	r3, [sl], #4
 800c41c:	d8e8      	bhi.n	800c3f0 <__mdiff+0x80>
 800c41e:	1b33      	subs	r3, r6, r4
 800c420:	3b15      	subs	r3, #21
 800c422:	f023 0303 	bic.w	r3, r3, #3
 800c426:	3304      	adds	r3, #4
 800c428:	3415      	adds	r4, #21
 800c42a:	42a6      	cmp	r6, r4
 800c42c:	bf38      	it	cc
 800c42e:	2304      	movcc	r3, #4
 800c430:	441d      	add	r5, r3
 800c432:	4473      	add	r3, lr
 800c434:	469e      	mov	lr, r3
 800c436:	462e      	mov	r6, r5
 800c438:	4566      	cmp	r6, ip
 800c43a:	d30e      	bcc.n	800c45a <__mdiff+0xea>
 800c43c:	f10c 0203 	add.w	r2, ip, #3
 800c440:	1b52      	subs	r2, r2, r5
 800c442:	f022 0203 	bic.w	r2, r2, #3
 800c446:	3d03      	subs	r5, #3
 800c448:	45ac      	cmp	ip, r5
 800c44a:	bf38      	it	cc
 800c44c:	2200      	movcc	r2, #0
 800c44e:	4413      	add	r3, r2
 800c450:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c454:	b17a      	cbz	r2, 800c476 <__mdiff+0x106>
 800c456:	6107      	str	r7, [r0, #16]
 800c458:	e7a4      	b.n	800c3a4 <__mdiff+0x34>
 800c45a:	f856 8b04 	ldr.w	r8, [r6], #4
 800c45e:	fa11 f288 	uxtah	r2, r1, r8
 800c462:	1414      	asrs	r4, r2, #16
 800c464:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c468:	b292      	uxth	r2, r2
 800c46a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c46e:	f84e 2b04 	str.w	r2, [lr], #4
 800c472:	1421      	asrs	r1, r4, #16
 800c474:	e7e0      	b.n	800c438 <__mdiff+0xc8>
 800c476:	3f01      	subs	r7, #1
 800c478:	e7ea      	b.n	800c450 <__mdiff+0xe0>
 800c47a:	bf00      	nop
 800c47c:	08011911 	.word	0x08011911
 800c480:	08011922 	.word	0x08011922

0800c484 <__ulp>:
 800c484:	b082      	sub	sp, #8
 800c486:	ed8d 0b00 	vstr	d0, [sp]
 800c48a:	9a01      	ldr	r2, [sp, #4]
 800c48c:	4b0f      	ldr	r3, [pc, #60]	; (800c4cc <__ulp+0x48>)
 800c48e:	4013      	ands	r3, r2
 800c490:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c494:	2b00      	cmp	r3, #0
 800c496:	dc08      	bgt.n	800c4aa <__ulp+0x26>
 800c498:	425b      	negs	r3, r3
 800c49a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c49e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c4a2:	da04      	bge.n	800c4ae <__ulp+0x2a>
 800c4a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4a8:	4113      	asrs	r3, r2
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	e008      	b.n	800c4c0 <__ulp+0x3c>
 800c4ae:	f1a2 0314 	sub.w	r3, r2, #20
 800c4b2:	2b1e      	cmp	r3, #30
 800c4b4:	bfda      	itte	le
 800c4b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c4ba:	40da      	lsrle	r2, r3
 800c4bc:	2201      	movgt	r2, #1
 800c4be:	2300      	movs	r3, #0
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	4610      	mov	r0, r2
 800c4c4:	ec41 0b10 	vmov	d0, r0, r1
 800c4c8:	b002      	add	sp, #8
 800c4ca:	4770      	bx	lr
 800c4cc:	7ff00000 	.word	0x7ff00000

0800c4d0 <__b2d>:
 800c4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d4:	6906      	ldr	r6, [r0, #16]
 800c4d6:	f100 0814 	add.w	r8, r0, #20
 800c4da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c4de:	1f37      	subs	r7, r6, #4
 800c4e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	f7ff fd53 	bl	800bf90 <__hi0bits>
 800c4ea:	f1c0 0320 	rsb	r3, r0, #32
 800c4ee:	280a      	cmp	r0, #10
 800c4f0:	600b      	str	r3, [r1, #0]
 800c4f2:	491b      	ldr	r1, [pc, #108]	; (800c560 <__b2d+0x90>)
 800c4f4:	dc15      	bgt.n	800c522 <__b2d+0x52>
 800c4f6:	f1c0 0c0b 	rsb	ip, r0, #11
 800c4fa:	fa22 f30c 	lsr.w	r3, r2, ip
 800c4fe:	45b8      	cmp	r8, r7
 800c500:	ea43 0501 	orr.w	r5, r3, r1
 800c504:	bf34      	ite	cc
 800c506:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c50a:	2300      	movcs	r3, #0
 800c50c:	3015      	adds	r0, #21
 800c50e:	fa02 f000 	lsl.w	r0, r2, r0
 800c512:	fa23 f30c 	lsr.w	r3, r3, ip
 800c516:	4303      	orrs	r3, r0
 800c518:	461c      	mov	r4, r3
 800c51a:	ec45 4b10 	vmov	d0, r4, r5
 800c51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c522:	45b8      	cmp	r8, r7
 800c524:	bf3a      	itte	cc
 800c526:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c52a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c52e:	2300      	movcs	r3, #0
 800c530:	380b      	subs	r0, #11
 800c532:	d012      	beq.n	800c55a <__b2d+0x8a>
 800c534:	f1c0 0120 	rsb	r1, r0, #32
 800c538:	fa23 f401 	lsr.w	r4, r3, r1
 800c53c:	4082      	lsls	r2, r0
 800c53e:	4322      	orrs	r2, r4
 800c540:	4547      	cmp	r7, r8
 800c542:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c546:	bf8c      	ite	hi
 800c548:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c54c:	2200      	movls	r2, #0
 800c54e:	4083      	lsls	r3, r0
 800c550:	40ca      	lsrs	r2, r1
 800c552:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c556:	4313      	orrs	r3, r2
 800c558:	e7de      	b.n	800c518 <__b2d+0x48>
 800c55a:	ea42 0501 	orr.w	r5, r2, r1
 800c55e:	e7db      	b.n	800c518 <__b2d+0x48>
 800c560:	3ff00000 	.word	0x3ff00000

0800c564 <__d2b>:
 800c564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c568:	460f      	mov	r7, r1
 800c56a:	2101      	movs	r1, #1
 800c56c:	ec59 8b10 	vmov	r8, r9, d0
 800c570:	4616      	mov	r6, r2
 800c572:	f7ff fc1b 	bl	800bdac <_Balloc>
 800c576:	4604      	mov	r4, r0
 800c578:	b930      	cbnz	r0, 800c588 <__d2b+0x24>
 800c57a:	4602      	mov	r2, r0
 800c57c:	4b24      	ldr	r3, [pc, #144]	; (800c610 <__d2b+0xac>)
 800c57e:	4825      	ldr	r0, [pc, #148]	; (800c614 <__d2b+0xb0>)
 800c580:	f240 310f 	movw	r1, #783	; 0x30f
 800c584:	f001 f990 	bl	800d8a8 <__assert_func>
 800c588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c58c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c590:	bb2d      	cbnz	r5, 800c5de <__d2b+0x7a>
 800c592:	9301      	str	r3, [sp, #4]
 800c594:	f1b8 0300 	subs.w	r3, r8, #0
 800c598:	d026      	beq.n	800c5e8 <__d2b+0x84>
 800c59a:	4668      	mov	r0, sp
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	f7ff fd17 	bl	800bfd0 <__lo0bits>
 800c5a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5a6:	b1e8      	cbz	r0, 800c5e4 <__d2b+0x80>
 800c5a8:	f1c0 0320 	rsb	r3, r0, #32
 800c5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	40c2      	lsrs	r2, r0
 800c5b4:	6163      	str	r3, [r4, #20]
 800c5b6:	9201      	str	r2, [sp, #4]
 800c5b8:	9b01      	ldr	r3, [sp, #4]
 800c5ba:	61a3      	str	r3, [r4, #24]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	bf14      	ite	ne
 800c5c0:	2202      	movne	r2, #2
 800c5c2:	2201      	moveq	r2, #1
 800c5c4:	6122      	str	r2, [r4, #16]
 800c5c6:	b1bd      	cbz	r5, 800c5f8 <__d2b+0x94>
 800c5c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5cc:	4405      	add	r5, r0
 800c5ce:	603d      	str	r5, [r7, #0]
 800c5d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5d4:	6030      	str	r0, [r6, #0]
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	b003      	add	sp, #12
 800c5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5e2:	e7d6      	b.n	800c592 <__d2b+0x2e>
 800c5e4:	6161      	str	r1, [r4, #20]
 800c5e6:	e7e7      	b.n	800c5b8 <__d2b+0x54>
 800c5e8:	a801      	add	r0, sp, #4
 800c5ea:	f7ff fcf1 	bl	800bfd0 <__lo0bits>
 800c5ee:	9b01      	ldr	r3, [sp, #4]
 800c5f0:	6163      	str	r3, [r4, #20]
 800c5f2:	3020      	adds	r0, #32
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	e7e5      	b.n	800c5c4 <__d2b+0x60>
 800c5f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c600:	6038      	str	r0, [r7, #0]
 800c602:	6918      	ldr	r0, [r3, #16]
 800c604:	f7ff fcc4 	bl	800bf90 <__hi0bits>
 800c608:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c60c:	e7e2      	b.n	800c5d4 <__d2b+0x70>
 800c60e:	bf00      	nop
 800c610:	08011911 	.word	0x08011911
 800c614:	08011922 	.word	0x08011922

0800c618 <__ratio>:
 800c618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	4688      	mov	r8, r1
 800c61e:	4669      	mov	r1, sp
 800c620:	4681      	mov	r9, r0
 800c622:	f7ff ff55 	bl	800c4d0 <__b2d>
 800c626:	a901      	add	r1, sp, #4
 800c628:	4640      	mov	r0, r8
 800c62a:	ec55 4b10 	vmov	r4, r5, d0
 800c62e:	f7ff ff4f 	bl	800c4d0 <__b2d>
 800c632:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c636:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c63a:	eba3 0c02 	sub.w	ip, r3, r2
 800c63e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c642:	1a9b      	subs	r3, r3, r2
 800c644:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c648:	ec51 0b10 	vmov	r0, r1, d0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	bfd6      	itet	le
 800c650:	460a      	movle	r2, r1
 800c652:	462a      	movgt	r2, r5
 800c654:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c658:	468b      	mov	fp, r1
 800c65a:	462f      	mov	r7, r5
 800c65c:	bfd4      	ite	le
 800c65e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c662:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c666:	4620      	mov	r0, r4
 800c668:	ee10 2a10 	vmov	r2, s0
 800c66c:	465b      	mov	r3, fp
 800c66e:	4639      	mov	r1, r7
 800c670:	f7f4 f8ec 	bl	800084c <__aeabi_ddiv>
 800c674:	ec41 0b10 	vmov	d0, r0, r1
 800c678:	b003      	add	sp, #12
 800c67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c67e <__copybits>:
 800c67e:	3901      	subs	r1, #1
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	1149      	asrs	r1, r1, #5
 800c684:	6914      	ldr	r4, [r2, #16]
 800c686:	3101      	adds	r1, #1
 800c688:	f102 0314 	add.w	r3, r2, #20
 800c68c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c690:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c694:	1f05      	subs	r5, r0, #4
 800c696:	42a3      	cmp	r3, r4
 800c698:	d30c      	bcc.n	800c6b4 <__copybits+0x36>
 800c69a:	1aa3      	subs	r3, r4, r2
 800c69c:	3b11      	subs	r3, #17
 800c69e:	f023 0303 	bic.w	r3, r3, #3
 800c6a2:	3211      	adds	r2, #17
 800c6a4:	42a2      	cmp	r2, r4
 800c6a6:	bf88      	it	hi
 800c6a8:	2300      	movhi	r3, #0
 800c6aa:	4418      	add	r0, r3
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	4288      	cmp	r0, r1
 800c6b0:	d305      	bcc.n	800c6be <__copybits+0x40>
 800c6b2:	bd70      	pop	{r4, r5, r6, pc}
 800c6b4:	f853 6b04 	ldr.w	r6, [r3], #4
 800c6b8:	f845 6f04 	str.w	r6, [r5, #4]!
 800c6bc:	e7eb      	b.n	800c696 <__copybits+0x18>
 800c6be:	f840 3b04 	str.w	r3, [r0], #4
 800c6c2:	e7f4      	b.n	800c6ae <__copybits+0x30>

0800c6c4 <__any_on>:
 800c6c4:	f100 0214 	add.w	r2, r0, #20
 800c6c8:	6900      	ldr	r0, [r0, #16]
 800c6ca:	114b      	asrs	r3, r1, #5
 800c6cc:	4298      	cmp	r0, r3
 800c6ce:	b510      	push	{r4, lr}
 800c6d0:	db11      	blt.n	800c6f6 <__any_on+0x32>
 800c6d2:	dd0a      	ble.n	800c6ea <__any_on+0x26>
 800c6d4:	f011 011f 	ands.w	r1, r1, #31
 800c6d8:	d007      	beq.n	800c6ea <__any_on+0x26>
 800c6da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c6de:	fa24 f001 	lsr.w	r0, r4, r1
 800c6e2:	fa00 f101 	lsl.w	r1, r0, r1
 800c6e6:	428c      	cmp	r4, r1
 800c6e8:	d10b      	bne.n	800c702 <__any_on+0x3e>
 800c6ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d803      	bhi.n	800c6fa <__any_on+0x36>
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	bd10      	pop	{r4, pc}
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	e7f7      	b.n	800c6ea <__any_on+0x26>
 800c6fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6fe:	2900      	cmp	r1, #0
 800c700:	d0f5      	beq.n	800c6ee <__any_on+0x2a>
 800c702:	2001      	movs	r0, #1
 800c704:	e7f6      	b.n	800c6f4 <__any_on+0x30>

0800c706 <sulp>:
 800c706:	b570      	push	{r4, r5, r6, lr}
 800c708:	4604      	mov	r4, r0
 800c70a:	460d      	mov	r5, r1
 800c70c:	ec45 4b10 	vmov	d0, r4, r5
 800c710:	4616      	mov	r6, r2
 800c712:	f7ff feb7 	bl	800c484 <__ulp>
 800c716:	ec51 0b10 	vmov	r0, r1, d0
 800c71a:	b17e      	cbz	r6, 800c73c <sulp+0x36>
 800c71c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c720:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c724:	2b00      	cmp	r3, #0
 800c726:	dd09      	ble.n	800c73c <sulp+0x36>
 800c728:	051b      	lsls	r3, r3, #20
 800c72a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c72e:	2400      	movs	r4, #0
 800c730:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c734:	4622      	mov	r2, r4
 800c736:	462b      	mov	r3, r5
 800c738:	f7f3 ff5e 	bl	80005f8 <__aeabi_dmul>
 800c73c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c740 <_strtod_l>:
 800c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	ed2d 8b02 	vpush	{d8}
 800c748:	b09b      	sub	sp, #108	; 0x6c
 800c74a:	4604      	mov	r4, r0
 800c74c:	9213      	str	r2, [sp, #76]	; 0x4c
 800c74e:	2200      	movs	r2, #0
 800c750:	9216      	str	r2, [sp, #88]	; 0x58
 800c752:	460d      	mov	r5, r1
 800c754:	f04f 0800 	mov.w	r8, #0
 800c758:	f04f 0900 	mov.w	r9, #0
 800c75c:	460a      	mov	r2, r1
 800c75e:	9215      	str	r2, [sp, #84]	; 0x54
 800c760:	7811      	ldrb	r1, [r2, #0]
 800c762:	292b      	cmp	r1, #43	; 0x2b
 800c764:	d04c      	beq.n	800c800 <_strtod_l+0xc0>
 800c766:	d83a      	bhi.n	800c7de <_strtod_l+0x9e>
 800c768:	290d      	cmp	r1, #13
 800c76a:	d834      	bhi.n	800c7d6 <_strtod_l+0x96>
 800c76c:	2908      	cmp	r1, #8
 800c76e:	d834      	bhi.n	800c7da <_strtod_l+0x9a>
 800c770:	2900      	cmp	r1, #0
 800c772:	d03d      	beq.n	800c7f0 <_strtod_l+0xb0>
 800c774:	2200      	movs	r2, #0
 800c776:	920a      	str	r2, [sp, #40]	; 0x28
 800c778:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c77a:	7832      	ldrb	r2, [r6, #0]
 800c77c:	2a30      	cmp	r2, #48	; 0x30
 800c77e:	f040 80b4 	bne.w	800c8ea <_strtod_l+0x1aa>
 800c782:	7872      	ldrb	r2, [r6, #1]
 800c784:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c788:	2a58      	cmp	r2, #88	; 0x58
 800c78a:	d170      	bne.n	800c86e <_strtod_l+0x12e>
 800c78c:	9302      	str	r3, [sp, #8]
 800c78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	ab16      	add	r3, sp, #88	; 0x58
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	4a8e      	ldr	r2, [pc, #568]	; (800c9d0 <_strtod_l+0x290>)
 800c798:	ab17      	add	r3, sp, #92	; 0x5c
 800c79a:	a915      	add	r1, sp, #84	; 0x54
 800c79c:	4620      	mov	r0, r4
 800c79e:	f001 f91f 	bl	800d9e0 <__gethex>
 800c7a2:	f010 070f 	ands.w	r7, r0, #15
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	d005      	beq.n	800c7b6 <_strtod_l+0x76>
 800c7aa:	2f06      	cmp	r7, #6
 800c7ac:	d12a      	bne.n	800c804 <_strtod_l+0xc4>
 800c7ae:	3601      	adds	r6, #1
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	9615      	str	r6, [sp, #84]	; 0x54
 800c7b4:	930a      	str	r3, [sp, #40]	; 0x28
 800c7b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	f040 857f 	bne.w	800d2bc <_strtod_l+0xb7c>
 800c7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c0:	b1db      	cbz	r3, 800c7fa <_strtod_l+0xba>
 800c7c2:	4642      	mov	r2, r8
 800c7c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c7c8:	ec43 2b10 	vmov	d0, r2, r3
 800c7cc:	b01b      	add	sp, #108	; 0x6c
 800c7ce:	ecbd 8b02 	vpop	{d8}
 800c7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d6:	2920      	cmp	r1, #32
 800c7d8:	d1cc      	bne.n	800c774 <_strtod_l+0x34>
 800c7da:	3201      	adds	r2, #1
 800c7dc:	e7bf      	b.n	800c75e <_strtod_l+0x1e>
 800c7de:	292d      	cmp	r1, #45	; 0x2d
 800c7e0:	d1c8      	bne.n	800c774 <_strtod_l+0x34>
 800c7e2:	2101      	movs	r1, #1
 800c7e4:	910a      	str	r1, [sp, #40]	; 0x28
 800c7e6:	1c51      	adds	r1, r2, #1
 800c7e8:	9115      	str	r1, [sp, #84]	; 0x54
 800c7ea:	7852      	ldrb	r2, [r2, #1]
 800c7ec:	2a00      	cmp	r2, #0
 800c7ee:	d1c3      	bne.n	800c778 <_strtod_l+0x38>
 800c7f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7f2:	9515      	str	r5, [sp, #84]	; 0x54
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f040 855f 	bne.w	800d2b8 <_strtod_l+0xb78>
 800c7fa:	4642      	mov	r2, r8
 800c7fc:	464b      	mov	r3, r9
 800c7fe:	e7e3      	b.n	800c7c8 <_strtod_l+0x88>
 800c800:	2100      	movs	r1, #0
 800c802:	e7ef      	b.n	800c7e4 <_strtod_l+0xa4>
 800c804:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c806:	b13a      	cbz	r2, 800c818 <_strtod_l+0xd8>
 800c808:	2135      	movs	r1, #53	; 0x35
 800c80a:	a818      	add	r0, sp, #96	; 0x60
 800c80c:	f7ff ff37 	bl	800c67e <__copybits>
 800c810:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c812:	4620      	mov	r0, r4
 800c814:	f7ff fb0a 	bl	800be2c <_Bfree>
 800c818:	3f01      	subs	r7, #1
 800c81a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c81c:	2f04      	cmp	r7, #4
 800c81e:	d806      	bhi.n	800c82e <_strtod_l+0xee>
 800c820:	e8df f007 	tbb	[pc, r7]
 800c824:	201d0314 	.word	0x201d0314
 800c828:	14          	.byte	0x14
 800c829:	00          	.byte	0x00
 800c82a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c82e:	05e9      	lsls	r1, r5, #23
 800c830:	bf48      	it	mi
 800c832:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c836:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c83a:	0d1b      	lsrs	r3, r3, #20
 800c83c:	051b      	lsls	r3, r3, #20
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1b9      	bne.n	800c7b6 <_strtod_l+0x76>
 800c842:	f7fe fba9 	bl	800af98 <__errno>
 800c846:	2322      	movs	r3, #34	; 0x22
 800c848:	6003      	str	r3, [r0, #0]
 800c84a:	e7b4      	b.n	800c7b6 <_strtod_l+0x76>
 800c84c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c850:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c854:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c858:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c85c:	e7e7      	b.n	800c82e <_strtod_l+0xee>
 800c85e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c9d8 <_strtod_l+0x298>
 800c862:	e7e4      	b.n	800c82e <_strtod_l+0xee>
 800c864:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c868:	f04f 38ff 	mov.w	r8, #4294967295
 800c86c:	e7df      	b.n	800c82e <_strtod_l+0xee>
 800c86e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	9215      	str	r2, [sp, #84]	; 0x54
 800c874:	785b      	ldrb	r3, [r3, #1]
 800c876:	2b30      	cmp	r3, #48	; 0x30
 800c878:	d0f9      	beq.n	800c86e <_strtod_l+0x12e>
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d09b      	beq.n	800c7b6 <_strtod_l+0x76>
 800c87e:	2301      	movs	r3, #1
 800c880:	f04f 0a00 	mov.w	sl, #0
 800c884:	9304      	str	r3, [sp, #16]
 800c886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c888:	930b      	str	r3, [sp, #44]	; 0x2c
 800c88a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c88e:	46d3      	mov	fp, sl
 800c890:	220a      	movs	r2, #10
 800c892:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c894:	7806      	ldrb	r6, [r0, #0]
 800c896:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c89a:	b2d9      	uxtb	r1, r3
 800c89c:	2909      	cmp	r1, #9
 800c89e:	d926      	bls.n	800c8ee <_strtod_l+0x1ae>
 800c8a0:	494c      	ldr	r1, [pc, #304]	; (800c9d4 <_strtod_l+0x294>)
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f000 ffe6 	bl	800d874 <strncmp>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d030      	beq.n	800c90e <_strtod_l+0x1ce>
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	4632      	mov	r2, r6
 800c8b0:	9005      	str	r0, [sp, #20]
 800c8b2:	465e      	mov	r6, fp
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2a65      	cmp	r2, #101	; 0x65
 800c8b8:	d001      	beq.n	800c8be <_strtod_l+0x17e>
 800c8ba:	2a45      	cmp	r2, #69	; 0x45
 800c8bc:	d113      	bne.n	800c8e6 <_strtod_l+0x1a6>
 800c8be:	b91e      	cbnz	r6, 800c8c8 <_strtod_l+0x188>
 800c8c0:	9a04      	ldr	r2, [sp, #16]
 800c8c2:	4302      	orrs	r2, r0
 800c8c4:	d094      	beq.n	800c7f0 <_strtod_l+0xb0>
 800c8c6:	2600      	movs	r6, #0
 800c8c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c8ca:	1c6a      	adds	r2, r5, #1
 800c8cc:	9215      	str	r2, [sp, #84]	; 0x54
 800c8ce:	786a      	ldrb	r2, [r5, #1]
 800c8d0:	2a2b      	cmp	r2, #43	; 0x2b
 800c8d2:	d074      	beq.n	800c9be <_strtod_l+0x27e>
 800c8d4:	2a2d      	cmp	r2, #45	; 0x2d
 800c8d6:	d078      	beq.n	800c9ca <_strtod_l+0x28a>
 800c8d8:	f04f 0c00 	mov.w	ip, #0
 800c8dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c8e0:	2909      	cmp	r1, #9
 800c8e2:	d97f      	bls.n	800c9e4 <_strtod_l+0x2a4>
 800c8e4:	9515      	str	r5, [sp, #84]	; 0x54
 800c8e6:	2700      	movs	r7, #0
 800c8e8:	e09e      	b.n	800ca28 <_strtod_l+0x2e8>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	e7c8      	b.n	800c880 <_strtod_l+0x140>
 800c8ee:	f1bb 0f08 	cmp.w	fp, #8
 800c8f2:	bfd8      	it	le
 800c8f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c8f6:	f100 0001 	add.w	r0, r0, #1
 800c8fa:	bfda      	itte	le
 800c8fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c900:	9309      	strle	r3, [sp, #36]	; 0x24
 800c902:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c906:	f10b 0b01 	add.w	fp, fp, #1
 800c90a:	9015      	str	r0, [sp, #84]	; 0x54
 800c90c:	e7c1      	b.n	800c892 <_strtod_l+0x152>
 800c90e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c910:	1c5a      	adds	r2, r3, #1
 800c912:	9215      	str	r2, [sp, #84]	; 0x54
 800c914:	785a      	ldrb	r2, [r3, #1]
 800c916:	f1bb 0f00 	cmp.w	fp, #0
 800c91a:	d037      	beq.n	800c98c <_strtod_l+0x24c>
 800c91c:	9005      	str	r0, [sp, #20]
 800c91e:	465e      	mov	r6, fp
 800c920:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c924:	2b09      	cmp	r3, #9
 800c926:	d912      	bls.n	800c94e <_strtod_l+0x20e>
 800c928:	2301      	movs	r3, #1
 800c92a:	e7c4      	b.n	800c8b6 <_strtod_l+0x176>
 800c92c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	9215      	str	r2, [sp, #84]	; 0x54
 800c932:	785a      	ldrb	r2, [r3, #1]
 800c934:	3001      	adds	r0, #1
 800c936:	2a30      	cmp	r2, #48	; 0x30
 800c938:	d0f8      	beq.n	800c92c <_strtod_l+0x1ec>
 800c93a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c93e:	2b08      	cmp	r3, #8
 800c940:	f200 84c1 	bhi.w	800d2c6 <_strtod_l+0xb86>
 800c944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c946:	9005      	str	r0, [sp, #20]
 800c948:	2000      	movs	r0, #0
 800c94a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c94c:	4606      	mov	r6, r0
 800c94e:	3a30      	subs	r2, #48	; 0x30
 800c950:	f100 0301 	add.w	r3, r0, #1
 800c954:	d014      	beq.n	800c980 <_strtod_l+0x240>
 800c956:	9905      	ldr	r1, [sp, #20]
 800c958:	4419      	add	r1, r3
 800c95a:	9105      	str	r1, [sp, #20]
 800c95c:	4633      	mov	r3, r6
 800c95e:	eb00 0c06 	add.w	ip, r0, r6
 800c962:	210a      	movs	r1, #10
 800c964:	4563      	cmp	r3, ip
 800c966:	d113      	bne.n	800c990 <_strtod_l+0x250>
 800c968:	1833      	adds	r3, r6, r0
 800c96a:	2b08      	cmp	r3, #8
 800c96c:	f106 0601 	add.w	r6, r6, #1
 800c970:	4406      	add	r6, r0
 800c972:	dc1a      	bgt.n	800c9aa <_strtod_l+0x26a>
 800c974:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c976:	230a      	movs	r3, #10
 800c978:	fb03 2301 	mla	r3, r3, r1, r2
 800c97c:	9309      	str	r3, [sp, #36]	; 0x24
 800c97e:	2300      	movs	r3, #0
 800c980:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c982:	1c51      	adds	r1, r2, #1
 800c984:	9115      	str	r1, [sp, #84]	; 0x54
 800c986:	7852      	ldrb	r2, [r2, #1]
 800c988:	4618      	mov	r0, r3
 800c98a:	e7c9      	b.n	800c920 <_strtod_l+0x1e0>
 800c98c:	4658      	mov	r0, fp
 800c98e:	e7d2      	b.n	800c936 <_strtod_l+0x1f6>
 800c990:	2b08      	cmp	r3, #8
 800c992:	f103 0301 	add.w	r3, r3, #1
 800c996:	dc03      	bgt.n	800c9a0 <_strtod_l+0x260>
 800c998:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c99a:	434f      	muls	r7, r1
 800c99c:	9709      	str	r7, [sp, #36]	; 0x24
 800c99e:	e7e1      	b.n	800c964 <_strtod_l+0x224>
 800c9a0:	2b10      	cmp	r3, #16
 800c9a2:	bfd8      	it	le
 800c9a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c9a8:	e7dc      	b.n	800c964 <_strtod_l+0x224>
 800c9aa:	2e10      	cmp	r6, #16
 800c9ac:	bfdc      	itt	le
 800c9ae:	230a      	movle	r3, #10
 800c9b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c9b4:	e7e3      	b.n	800c97e <_strtod_l+0x23e>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	9305      	str	r3, [sp, #20]
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e780      	b.n	800c8c0 <_strtod_l+0x180>
 800c9be:	f04f 0c00 	mov.w	ip, #0
 800c9c2:	1caa      	adds	r2, r5, #2
 800c9c4:	9215      	str	r2, [sp, #84]	; 0x54
 800c9c6:	78aa      	ldrb	r2, [r5, #2]
 800c9c8:	e788      	b.n	800c8dc <_strtod_l+0x19c>
 800c9ca:	f04f 0c01 	mov.w	ip, #1
 800c9ce:	e7f8      	b.n	800c9c2 <_strtod_l+0x282>
 800c9d0:	08011a80 	.word	0x08011a80
 800c9d4:	08011a7c 	.word	0x08011a7c
 800c9d8:	7ff00000 	.word	0x7ff00000
 800c9dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c9de:	1c51      	adds	r1, r2, #1
 800c9e0:	9115      	str	r1, [sp, #84]	; 0x54
 800c9e2:	7852      	ldrb	r2, [r2, #1]
 800c9e4:	2a30      	cmp	r2, #48	; 0x30
 800c9e6:	d0f9      	beq.n	800c9dc <_strtod_l+0x29c>
 800c9e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c9ec:	2908      	cmp	r1, #8
 800c9ee:	f63f af7a 	bhi.w	800c8e6 <_strtod_l+0x1a6>
 800c9f2:	3a30      	subs	r2, #48	; 0x30
 800c9f4:	9208      	str	r2, [sp, #32]
 800c9f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c9f8:	920c      	str	r2, [sp, #48]	; 0x30
 800c9fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c9fc:	1c57      	adds	r7, r2, #1
 800c9fe:	9715      	str	r7, [sp, #84]	; 0x54
 800ca00:	7852      	ldrb	r2, [r2, #1]
 800ca02:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ca06:	f1be 0f09 	cmp.w	lr, #9
 800ca0a:	d938      	bls.n	800ca7e <_strtod_l+0x33e>
 800ca0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ca0e:	1a7f      	subs	r7, r7, r1
 800ca10:	2f08      	cmp	r7, #8
 800ca12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ca16:	dc03      	bgt.n	800ca20 <_strtod_l+0x2e0>
 800ca18:	9908      	ldr	r1, [sp, #32]
 800ca1a:	428f      	cmp	r7, r1
 800ca1c:	bfa8      	it	ge
 800ca1e:	460f      	movge	r7, r1
 800ca20:	f1bc 0f00 	cmp.w	ip, #0
 800ca24:	d000      	beq.n	800ca28 <_strtod_l+0x2e8>
 800ca26:	427f      	negs	r7, r7
 800ca28:	2e00      	cmp	r6, #0
 800ca2a:	d14f      	bne.n	800cacc <_strtod_l+0x38c>
 800ca2c:	9904      	ldr	r1, [sp, #16]
 800ca2e:	4301      	orrs	r1, r0
 800ca30:	f47f aec1 	bne.w	800c7b6 <_strtod_l+0x76>
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f47f aedb 	bne.w	800c7f0 <_strtod_l+0xb0>
 800ca3a:	2a69      	cmp	r2, #105	; 0x69
 800ca3c:	d029      	beq.n	800ca92 <_strtod_l+0x352>
 800ca3e:	dc26      	bgt.n	800ca8e <_strtod_l+0x34e>
 800ca40:	2a49      	cmp	r2, #73	; 0x49
 800ca42:	d026      	beq.n	800ca92 <_strtod_l+0x352>
 800ca44:	2a4e      	cmp	r2, #78	; 0x4e
 800ca46:	f47f aed3 	bne.w	800c7f0 <_strtod_l+0xb0>
 800ca4a:	499b      	ldr	r1, [pc, #620]	; (800ccb8 <_strtod_l+0x578>)
 800ca4c:	a815      	add	r0, sp, #84	; 0x54
 800ca4e:	f001 fa07 	bl	800de60 <__match>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	f43f aecc 	beq.w	800c7f0 <_strtod_l+0xb0>
 800ca58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b28      	cmp	r3, #40	; 0x28
 800ca5e:	d12f      	bne.n	800cac0 <_strtod_l+0x380>
 800ca60:	4996      	ldr	r1, [pc, #600]	; (800ccbc <_strtod_l+0x57c>)
 800ca62:	aa18      	add	r2, sp, #96	; 0x60
 800ca64:	a815      	add	r0, sp, #84	; 0x54
 800ca66:	f001 fa0f 	bl	800de88 <__hexnan>
 800ca6a:	2805      	cmp	r0, #5
 800ca6c:	d128      	bne.n	800cac0 <_strtod_l+0x380>
 800ca6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ca78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ca7c:	e69b      	b.n	800c7b6 <_strtod_l+0x76>
 800ca7e:	9f08      	ldr	r7, [sp, #32]
 800ca80:	210a      	movs	r1, #10
 800ca82:	fb01 2107 	mla	r1, r1, r7, r2
 800ca86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ca8a:	9208      	str	r2, [sp, #32]
 800ca8c:	e7b5      	b.n	800c9fa <_strtod_l+0x2ba>
 800ca8e:	2a6e      	cmp	r2, #110	; 0x6e
 800ca90:	e7d9      	b.n	800ca46 <_strtod_l+0x306>
 800ca92:	498b      	ldr	r1, [pc, #556]	; (800ccc0 <_strtod_l+0x580>)
 800ca94:	a815      	add	r0, sp, #84	; 0x54
 800ca96:	f001 f9e3 	bl	800de60 <__match>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	f43f aea8 	beq.w	800c7f0 <_strtod_l+0xb0>
 800caa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800caa2:	4988      	ldr	r1, [pc, #544]	; (800ccc4 <_strtod_l+0x584>)
 800caa4:	3b01      	subs	r3, #1
 800caa6:	a815      	add	r0, sp, #84	; 0x54
 800caa8:	9315      	str	r3, [sp, #84]	; 0x54
 800caaa:	f001 f9d9 	bl	800de60 <__match>
 800caae:	b910      	cbnz	r0, 800cab6 <_strtod_l+0x376>
 800cab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cab2:	3301      	adds	r3, #1
 800cab4:	9315      	str	r3, [sp, #84]	; 0x54
 800cab6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ccd4 <_strtod_l+0x594>
 800caba:	f04f 0800 	mov.w	r8, #0
 800cabe:	e67a      	b.n	800c7b6 <_strtod_l+0x76>
 800cac0:	4881      	ldr	r0, [pc, #516]	; (800ccc8 <_strtod_l+0x588>)
 800cac2:	f000 fee9 	bl	800d898 <nan>
 800cac6:	ec59 8b10 	vmov	r8, r9, d0
 800caca:	e674      	b.n	800c7b6 <_strtod_l+0x76>
 800cacc:	9b05      	ldr	r3, [sp, #20]
 800cace:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cad0:	1afb      	subs	r3, r7, r3
 800cad2:	f1bb 0f00 	cmp.w	fp, #0
 800cad6:	bf08      	it	eq
 800cad8:	46b3      	moveq	fp, r6
 800cada:	2e10      	cmp	r6, #16
 800cadc:	9308      	str	r3, [sp, #32]
 800cade:	4635      	mov	r5, r6
 800cae0:	bfa8      	it	ge
 800cae2:	2510      	movge	r5, #16
 800cae4:	f7f3 fd0e 	bl	8000504 <__aeabi_ui2d>
 800cae8:	2e09      	cmp	r6, #9
 800caea:	4680      	mov	r8, r0
 800caec:	4689      	mov	r9, r1
 800caee:	dd13      	ble.n	800cb18 <_strtod_l+0x3d8>
 800caf0:	4b76      	ldr	r3, [pc, #472]	; (800cccc <_strtod_l+0x58c>)
 800caf2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800caf6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cafa:	f7f3 fd7d 	bl	80005f8 <__aeabi_dmul>
 800cafe:	4680      	mov	r8, r0
 800cb00:	4650      	mov	r0, sl
 800cb02:	4689      	mov	r9, r1
 800cb04:	f7f3 fcfe 	bl	8000504 <__aeabi_ui2d>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	4649      	mov	r1, r9
 800cb10:	f7f3 fbbc 	bl	800028c <__adddf3>
 800cb14:	4680      	mov	r8, r0
 800cb16:	4689      	mov	r9, r1
 800cb18:	2e0f      	cmp	r6, #15
 800cb1a:	dc38      	bgt.n	800cb8e <_strtod_l+0x44e>
 800cb1c:	9b08      	ldr	r3, [sp, #32]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f43f ae49 	beq.w	800c7b6 <_strtod_l+0x76>
 800cb24:	dd24      	ble.n	800cb70 <_strtod_l+0x430>
 800cb26:	2b16      	cmp	r3, #22
 800cb28:	dc0b      	bgt.n	800cb42 <_strtod_l+0x402>
 800cb2a:	4968      	ldr	r1, [pc, #416]	; (800cccc <_strtod_l+0x58c>)
 800cb2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb34:	4642      	mov	r2, r8
 800cb36:	464b      	mov	r3, r9
 800cb38:	f7f3 fd5e 	bl	80005f8 <__aeabi_dmul>
 800cb3c:	4680      	mov	r8, r0
 800cb3e:	4689      	mov	r9, r1
 800cb40:	e639      	b.n	800c7b6 <_strtod_l+0x76>
 800cb42:	9a08      	ldr	r2, [sp, #32]
 800cb44:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	db20      	blt.n	800cb8e <_strtod_l+0x44e>
 800cb4c:	4c5f      	ldr	r4, [pc, #380]	; (800cccc <_strtod_l+0x58c>)
 800cb4e:	f1c6 060f 	rsb	r6, r6, #15
 800cb52:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800cb56:	4642      	mov	r2, r8
 800cb58:	464b      	mov	r3, r9
 800cb5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb5e:	f7f3 fd4b 	bl	80005f8 <__aeabi_dmul>
 800cb62:	9b08      	ldr	r3, [sp, #32]
 800cb64:	1b9e      	subs	r6, r3, r6
 800cb66:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800cb6a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cb6e:	e7e3      	b.n	800cb38 <_strtod_l+0x3f8>
 800cb70:	9b08      	ldr	r3, [sp, #32]
 800cb72:	3316      	adds	r3, #22
 800cb74:	db0b      	blt.n	800cb8e <_strtod_l+0x44e>
 800cb76:	9b05      	ldr	r3, [sp, #20]
 800cb78:	1bdf      	subs	r7, r3, r7
 800cb7a:	4b54      	ldr	r3, [pc, #336]	; (800cccc <_strtod_l+0x58c>)
 800cb7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cb80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb84:	4640      	mov	r0, r8
 800cb86:	4649      	mov	r1, r9
 800cb88:	f7f3 fe60 	bl	800084c <__aeabi_ddiv>
 800cb8c:	e7d6      	b.n	800cb3c <_strtod_l+0x3fc>
 800cb8e:	9b08      	ldr	r3, [sp, #32]
 800cb90:	1b75      	subs	r5, r6, r5
 800cb92:	441d      	add	r5, r3
 800cb94:	2d00      	cmp	r5, #0
 800cb96:	dd70      	ble.n	800cc7a <_strtod_l+0x53a>
 800cb98:	f015 030f 	ands.w	r3, r5, #15
 800cb9c:	d00a      	beq.n	800cbb4 <_strtod_l+0x474>
 800cb9e:	494b      	ldr	r1, [pc, #300]	; (800cccc <_strtod_l+0x58c>)
 800cba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cba4:	4642      	mov	r2, r8
 800cba6:	464b      	mov	r3, r9
 800cba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbac:	f7f3 fd24 	bl	80005f8 <__aeabi_dmul>
 800cbb0:	4680      	mov	r8, r0
 800cbb2:	4689      	mov	r9, r1
 800cbb4:	f035 050f 	bics.w	r5, r5, #15
 800cbb8:	d04d      	beq.n	800cc56 <_strtod_l+0x516>
 800cbba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800cbbe:	dd22      	ble.n	800cc06 <_strtod_l+0x4c6>
 800cbc0:	2500      	movs	r5, #0
 800cbc2:	46ab      	mov	fp, r5
 800cbc4:	9509      	str	r5, [sp, #36]	; 0x24
 800cbc6:	9505      	str	r5, [sp, #20]
 800cbc8:	2322      	movs	r3, #34	; 0x22
 800cbca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ccd4 <_strtod_l+0x594>
 800cbce:	6023      	str	r3, [r4, #0]
 800cbd0:	f04f 0800 	mov.w	r8, #0
 800cbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f43f aded 	beq.w	800c7b6 <_strtod_l+0x76>
 800cbdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f7ff f924 	bl	800be2c <_Bfree>
 800cbe4:	9905      	ldr	r1, [sp, #20]
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f7ff f920 	bl	800be2c <_Bfree>
 800cbec:	4659      	mov	r1, fp
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f7ff f91c 	bl	800be2c <_Bfree>
 800cbf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f7ff f918 	bl	800be2c <_Bfree>
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	4620      	mov	r0, r4
 800cc00:	f7ff f914 	bl	800be2c <_Bfree>
 800cc04:	e5d7      	b.n	800c7b6 <_strtod_l+0x76>
 800cc06:	4b32      	ldr	r3, [pc, #200]	; (800ccd0 <_strtod_l+0x590>)
 800cc08:	9304      	str	r3, [sp, #16]
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	112d      	asrs	r5, r5, #4
 800cc0e:	4640      	mov	r0, r8
 800cc10:	4649      	mov	r1, r9
 800cc12:	469a      	mov	sl, r3
 800cc14:	2d01      	cmp	r5, #1
 800cc16:	dc21      	bgt.n	800cc5c <_strtod_l+0x51c>
 800cc18:	b10b      	cbz	r3, 800cc1e <_strtod_l+0x4de>
 800cc1a:	4680      	mov	r8, r0
 800cc1c:	4689      	mov	r9, r1
 800cc1e:	492c      	ldr	r1, [pc, #176]	; (800ccd0 <_strtod_l+0x590>)
 800cc20:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cc24:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cc28:	4642      	mov	r2, r8
 800cc2a:	464b      	mov	r3, r9
 800cc2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc30:	f7f3 fce2 	bl	80005f8 <__aeabi_dmul>
 800cc34:	4b27      	ldr	r3, [pc, #156]	; (800ccd4 <_strtod_l+0x594>)
 800cc36:	460a      	mov	r2, r1
 800cc38:	400b      	ands	r3, r1
 800cc3a:	4927      	ldr	r1, [pc, #156]	; (800ccd8 <_strtod_l+0x598>)
 800cc3c:	428b      	cmp	r3, r1
 800cc3e:	4680      	mov	r8, r0
 800cc40:	d8be      	bhi.n	800cbc0 <_strtod_l+0x480>
 800cc42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cc46:	428b      	cmp	r3, r1
 800cc48:	bf86      	itte	hi
 800cc4a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ccdc <_strtod_l+0x59c>
 800cc4e:	f04f 38ff 	movhi.w	r8, #4294967295
 800cc52:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800cc56:	2300      	movs	r3, #0
 800cc58:	9304      	str	r3, [sp, #16]
 800cc5a:	e07b      	b.n	800cd54 <_strtod_l+0x614>
 800cc5c:	07ea      	lsls	r2, r5, #31
 800cc5e:	d505      	bpl.n	800cc6c <_strtod_l+0x52c>
 800cc60:	9b04      	ldr	r3, [sp, #16]
 800cc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc66:	f7f3 fcc7 	bl	80005f8 <__aeabi_dmul>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	9a04      	ldr	r2, [sp, #16]
 800cc6e:	3208      	adds	r2, #8
 800cc70:	f10a 0a01 	add.w	sl, sl, #1
 800cc74:	106d      	asrs	r5, r5, #1
 800cc76:	9204      	str	r2, [sp, #16]
 800cc78:	e7cc      	b.n	800cc14 <_strtod_l+0x4d4>
 800cc7a:	d0ec      	beq.n	800cc56 <_strtod_l+0x516>
 800cc7c:	426d      	negs	r5, r5
 800cc7e:	f015 020f 	ands.w	r2, r5, #15
 800cc82:	d00a      	beq.n	800cc9a <_strtod_l+0x55a>
 800cc84:	4b11      	ldr	r3, [pc, #68]	; (800cccc <_strtod_l+0x58c>)
 800cc86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc8a:	4640      	mov	r0, r8
 800cc8c:	4649      	mov	r1, r9
 800cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc92:	f7f3 fddb 	bl	800084c <__aeabi_ddiv>
 800cc96:	4680      	mov	r8, r0
 800cc98:	4689      	mov	r9, r1
 800cc9a:	112d      	asrs	r5, r5, #4
 800cc9c:	d0db      	beq.n	800cc56 <_strtod_l+0x516>
 800cc9e:	2d1f      	cmp	r5, #31
 800cca0:	dd1e      	ble.n	800cce0 <_strtod_l+0x5a0>
 800cca2:	2500      	movs	r5, #0
 800cca4:	46ab      	mov	fp, r5
 800cca6:	9509      	str	r5, [sp, #36]	; 0x24
 800cca8:	9505      	str	r5, [sp, #20]
 800ccaa:	2322      	movs	r3, #34	; 0x22
 800ccac:	f04f 0800 	mov.w	r8, #0
 800ccb0:	f04f 0900 	mov.w	r9, #0
 800ccb4:	6023      	str	r3, [r4, #0]
 800ccb6:	e78d      	b.n	800cbd4 <_strtod_l+0x494>
 800ccb8:	08011869 	.word	0x08011869
 800ccbc:	08011a94 	.word	0x08011a94
 800ccc0:	08011861 	.word	0x08011861
 800ccc4:	08011898 	.word	0x08011898
 800ccc8:	08011c25 	.word	0x08011c25
 800cccc:	080119a8 	.word	0x080119a8
 800ccd0:	08011980 	.word	0x08011980
 800ccd4:	7ff00000 	.word	0x7ff00000
 800ccd8:	7ca00000 	.word	0x7ca00000
 800ccdc:	7fefffff 	.word	0x7fefffff
 800cce0:	f015 0310 	ands.w	r3, r5, #16
 800cce4:	bf18      	it	ne
 800cce6:	236a      	movne	r3, #106	; 0x6a
 800cce8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d08c <_strtod_l+0x94c>
 800ccec:	9304      	str	r3, [sp, #16]
 800ccee:	4640      	mov	r0, r8
 800ccf0:	4649      	mov	r1, r9
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	07ea      	lsls	r2, r5, #31
 800ccf6:	d504      	bpl.n	800cd02 <_strtod_l+0x5c2>
 800ccf8:	e9da 2300 	ldrd	r2, r3, [sl]
 800ccfc:	f7f3 fc7c 	bl	80005f8 <__aeabi_dmul>
 800cd00:	2301      	movs	r3, #1
 800cd02:	106d      	asrs	r5, r5, #1
 800cd04:	f10a 0a08 	add.w	sl, sl, #8
 800cd08:	d1f4      	bne.n	800ccf4 <_strtod_l+0x5b4>
 800cd0a:	b10b      	cbz	r3, 800cd10 <_strtod_l+0x5d0>
 800cd0c:	4680      	mov	r8, r0
 800cd0e:	4689      	mov	r9, r1
 800cd10:	9b04      	ldr	r3, [sp, #16]
 800cd12:	b1bb      	cbz	r3, 800cd44 <_strtod_l+0x604>
 800cd14:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800cd18:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	4649      	mov	r1, r9
 800cd20:	dd10      	ble.n	800cd44 <_strtod_l+0x604>
 800cd22:	2b1f      	cmp	r3, #31
 800cd24:	f340 811e 	ble.w	800cf64 <_strtod_l+0x824>
 800cd28:	2b34      	cmp	r3, #52	; 0x34
 800cd2a:	bfde      	ittt	le
 800cd2c:	f04f 33ff 	movle.w	r3, #4294967295
 800cd30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cd34:	4093      	lslle	r3, r2
 800cd36:	f04f 0800 	mov.w	r8, #0
 800cd3a:	bfcc      	ite	gt
 800cd3c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cd40:	ea03 0901 	andle.w	r9, r3, r1
 800cd44:	2200      	movs	r2, #0
 800cd46:	2300      	movs	r3, #0
 800cd48:	4640      	mov	r0, r8
 800cd4a:	4649      	mov	r1, r9
 800cd4c:	f7f3 febc 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d1a6      	bne.n	800cca2 <_strtod_l+0x562>
 800cd54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd5a:	4633      	mov	r3, r6
 800cd5c:	465a      	mov	r2, fp
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f7ff f8cc 	bl	800befc <__s2b>
 800cd64:	9009      	str	r0, [sp, #36]	; 0x24
 800cd66:	2800      	cmp	r0, #0
 800cd68:	f43f af2a 	beq.w	800cbc0 <_strtod_l+0x480>
 800cd6c:	9a08      	ldr	r2, [sp, #32]
 800cd6e:	9b05      	ldr	r3, [sp, #20]
 800cd70:	2a00      	cmp	r2, #0
 800cd72:	eba3 0307 	sub.w	r3, r3, r7
 800cd76:	bfa8      	it	ge
 800cd78:	2300      	movge	r3, #0
 800cd7a:	930c      	str	r3, [sp, #48]	; 0x30
 800cd7c:	2500      	movs	r5, #0
 800cd7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cd82:	9312      	str	r3, [sp, #72]	; 0x48
 800cd84:	46ab      	mov	fp, r5
 800cd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd88:	4620      	mov	r0, r4
 800cd8a:	6859      	ldr	r1, [r3, #4]
 800cd8c:	f7ff f80e 	bl	800bdac <_Balloc>
 800cd90:	9005      	str	r0, [sp, #20]
 800cd92:	2800      	cmp	r0, #0
 800cd94:	f43f af18 	beq.w	800cbc8 <_strtod_l+0x488>
 800cd98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd9a:	691a      	ldr	r2, [r3, #16]
 800cd9c:	3202      	adds	r2, #2
 800cd9e:	f103 010c 	add.w	r1, r3, #12
 800cda2:	0092      	lsls	r2, r2, #2
 800cda4:	300c      	adds	r0, #12
 800cda6:	f7fe f924 	bl	800aff2 <memcpy>
 800cdaa:	ec49 8b10 	vmov	d0, r8, r9
 800cdae:	aa18      	add	r2, sp, #96	; 0x60
 800cdb0:	a917      	add	r1, sp, #92	; 0x5c
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f7ff fbd6 	bl	800c564 <__d2b>
 800cdb8:	ec49 8b18 	vmov	d8, r8, r9
 800cdbc:	9016      	str	r0, [sp, #88]	; 0x58
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	f43f af02 	beq.w	800cbc8 <_strtod_l+0x488>
 800cdc4:	2101      	movs	r1, #1
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f7ff f930 	bl	800c02c <__i2b>
 800cdcc:	4683      	mov	fp, r0
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	f43f aefa 	beq.w	800cbc8 <_strtod_l+0x488>
 800cdd4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cdd6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cdd8:	2e00      	cmp	r6, #0
 800cdda:	bfab      	itete	ge
 800cddc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800cdde:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800cde0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cde2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800cde6:	bfac      	ite	ge
 800cde8:	eb06 0a03 	addge.w	sl, r6, r3
 800cdec:	1b9f      	sublt	r7, r3, r6
 800cdee:	9b04      	ldr	r3, [sp, #16]
 800cdf0:	1af6      	subs	r6, r6, r3
 800cdf2:	4416      	add	r6, r2
 800cdf4:	4ba0      	ldr	r3, [pc, #640]	; (800d078 <_strtod_l+0x938>)
 800cdf6:	3e01      	subs	r6, #1
 800cdf8:	429e      	cmp	r6, r3
 800cdfa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cdfe:	f280 80c4 	bge.w	800cf8a <_strtod_l+0x84a>
 800ce02:	1b9b      	subs	r3, r3, r6
 800ce04:	2b1f      	cmp	r3, #31
 800ce06:	eba2 0203 	sub.w	r2, r2, r3
 800ce0a:	f04f 0101 	mov.w	r1, #1
 800ce0e:	f300 80b0 	bgt.w	800cf72 <_strtod_l+0x832>
 800ce12:	fa01 f303 	lsl.w	r3, r1, r3
 800ce16:	930e      	str	r3, [sp, #56]	; 0x38
 800ce18:	2300      	movs	r3, #0
 800ce1a:	930d      	str	r3, [sp, #52]	; 0x34
 800ce1c:	eb0a 0602 	add.w	r6, sl, r2
 800ce20:	9b04      	ldr	r3, [sp, #16]
 800ce22:	45b2      	cmp	sl, r6
 800ce24:	4417      	add	r7, r2
 800ce26:	441f      	add	r7, r3
 800ce28:	4653      	mov	r3, sl
 800ce2a:	bfa8      	it	ge
 800ce2c:	4633      	movge	r3, r6
 800ce2e:	42bb      	cmp	r3, r7
 800ce30:	bfa8      	it	ge
 800ce32:	463b      	movge	r3, r7
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	bfc2      	ittt	gt
 800ce38:	1af6      	subgt	r6, r6, r3
 800ce3a:	1aff      	subgt	r7, r7, r3
 800ce3c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ce40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	dd17      	ble.n	800ce76 <_strtod_l+0x736>
 800ce46:	4659      	mov	r1, fp
 800ce48:	461a      	mov	r2, r3
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f7ff f9ae 	bl	800c1ac <__pow5mult>
 800ce50:	4683      	mov	fp, r0
 800ce52:	2800      	cmp	r0, #0
 800ce54:	f43f aeb8 	beq.w	800cbc8 <_strtod_l+0x488>
 800ce58:	4601      	mov	r1, r0
 800ce5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	f7ff f8fb 	bl	800c058 <__multiply>
 800ce62:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce64:	2800      	cmp	r0, #0
 800ce66:	f43f aeaf 	beq.w	800cbc8 <_strtod_l+0x488>
 800ce6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f7fe ffdd 	bl	800be2c <_Bfree>
 800ce72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce74:	9316      	str	r3, [sp, #88]	; 0x58
 800ce76:	2e00      	cmp	r6, #0
 800ce78:	f300 808c 	bgt.w	800cf94 <_strtod_l+0x854>
 800ce7c:	9b08      	ldr	r3, [sp, #32]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	dd08      	ble.n	800ce94 <_strtod_l+0x754>
 800ce82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce84:	9905      	ldr	r1, [sp, #20]
 800ce86:	4620      	mov	r0, r4
 800ce88:	f7ff f990 	bl	800c1ac <__pow5mult>
 800ce8c:	9005      	str	r0, [sp, #20]
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	f43f ae9a 	beq.w	800cbc8 <_strtod_l+0x488>
 800ce94:	2f00      	cmp	r7, #0
 800ce96:	dd08      	ble.n	800ceaa <_strtod_l+0x76a>
 800ce98:	9905      	ldr	r1, [sp, #20]
 800ce9a:	463a      	mov	r2, r7
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f7ff f9df 	bl	800c260 <__lshift>
 800cea2:	9005      	str	r0, [sp, #20]
 800cea4:	2800      	cmp	r0, #0
 800cea6:	f43f ae8f 	beq.w	800cbc8 <_strtod_l+0x488>
 800ceaa:	f1ba 0f00 	cmp.w	sl, #0
 800ceae:	dd08      	ble.n	800cec2 <_strtod_l+0x782>
 800ceb0:	4659      	mov	r1, fp
 800ceb2:	4652      	mov	r2, sl
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f7ff f9d3 	bl	800c260 <__lshift>
 800ceba:	4683      	mov	fp, r0
 800cebc:	2800      	cmp	r0, #0
 800cebe:	f43f ae83 	beq.w	800cbc8 <_strtod_l+0x488>
 800cec2:	9a05      	ldr	r2, [sp, #20]
 800cec4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cec6:	4620      	mov	r0, r4
 800cec8:	f7ff fa52 	bl	800c370 <__mdiff>
 800cecc:	4605      	mov	r5, r0
 800cece:	2800      	cmp	r0, #0
 800ced0:	f43f ae7a 	beq.w	800cbc8 <_strtod_l+0x488>
 800ced4:	68c3      	ldr	r3, [r0, #12]
 800ced6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ced8:	2300      	movs	r3, #0
 800ceda:	60c3      	str	r3, [r0, #12]
 800cedc:	4659      	mov	r1, fp
 800cede:	f7ff fa2b 	bl	800c338 <__mcmp>
 800cee2:	2800      	cmp	r0, #0
 800cee4:	da60      	bge.n	800cfa8 <_strtod_l+0x868>
 800cee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cee8:	ea53 0308 	orrs.w	r3, r3, r8
 800ceec:	f040 8084 	bne.w	800cff8 <_strtod_l+0x8b8>
 800cef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d17f      	bne.n	800cff8 <_strtod_l+0x8b8>
 800cef8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cefc:	0d1b      	lsrs	r3, r3, #20
 800cefe:	051b      	lsls	r3, r3, #20
 800cf00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cf04:	d978      	bls.n	800cff8 <_strtod_l+0x8b8>
 800cf06:	696b      	ldr	r3, [r5, #20]
 800cf08:	b913      	cbnz	r3, 800cf10 <_strtod_l+0x7d0>
 800cf0a:	692b      	ldr	r3, [r5, #16]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	dd73      	ble.n	800cff8 <_strtod_l+0x8b8>
 800cf10:	4629      	mov	r1, r5
 800cf12:	2201      	movs	r2, #1
 800cf14:	4620      	mov	r0, r4
 800cf16:	f7ff f9a3 	bl	800c260 <__lshift>
 800cf1a:	4659      	mov	r1, fp
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	f7ff fa0b 	bl	800c338 <__mcmp>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	dd68      	ble.n	800cff8 <_strtod_l+0x8b8>
 800cf26:	9904      	ldr	r1, [sp, #16]
 800cf28:	4a54      	ldr	r2, [pc, #336]	; (800d07c <_strtod_l+0x93c>)
 800cf2a:	464b      	mov	r3, r9
 800cf2c:	2900      	cmp	r1, #0
 800cf2e:	f000 8084 	beq.w	800d03a <_strtod_l+0x8fa>
 800cf32:	ea02 0109 	and.w	r1, r2, r9
 800cf36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cf3a:	dc7e      	bgt.n	800d03a <_strtod_l+0x8fa>
 800cf3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cf40:	f77f aeb3 	ble.w	800ccaa <_strtod_l+0x56a>
 800cf44:	4b4e      	ldr	r3, [pc, #312]	; (800d080 <_strtod_l+0x940>)
 800cf46:	4640      	mov	r0, r8
 800cf48:	4649      	mov	r1, r9
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f7f3 fb54 	bl	80005f8 <__aeabi_dmul>
 800cf50:	4b4a      	ldr	r3, [pc, #296]	; (800d07c <_strtod_l+0x93c>)
 800cf52:	400b      	ands	r3, r1
 800cf54:	4680      	mov	r8, r0
 800cf56:	4689      	mov	r9, r1
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f47f ae3f 	bne.w	800cbdc <_strtod_l+0x49c>
 800cf5e:	2322      	movs	r3, #34	; 0x22
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	e63b      	b.n	800cbdc <_strtod_l+0x49c>
 800cf64:	f04f 32ff 	mov.w	r2, #4294967295
 800cf68:	fa02 f303 	lsl.w	r3, r2, r3
 800cf6c:	ea03 0808 	and.w	r8, r3, r8
 800cf70:	e6e8      	b.n	800cd44 <_strtod_l+0x604>
 800cf72:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800cf76:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800cf7a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800cf7e:	36e2      	adds	r6, #226	; 0xe2
 800cf80:	fa01 f306 	lsl.w	r3, r1, r6
 800cf84:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800cf88:	e748      	b.n	800ce1c <_strtod_l+0x6dc>
 800cf8a:	2100      	movs	r1, #0
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800cf92:	e743      	b.n	800ce1c <_strtod_l+0x6dc>
 800cf94:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cf96:	4632      	mov	r2, r6
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f7ff f961 	bl	800c260 <__lshift>
 800cf9e:	9016      	str	r0, [sp, #88]	; 0x58
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	f47f af6b 	bne.w	800ce7c <_strtod_l+0x73c>
 800cfa6:	e60f      	b.n	800cbc8 <_strtod_l+0x488>
 800cfa8:	46ca      	mov	sl, r9
 800cfaa:	d171      	bne.n	800d090 <_strtod_l+0x950>
 800cfac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cfb2:	b352      	cbz	r2, 800d00a <_strtod_l+0x8ca>
 800cfb4:	4a33      	ldr	r2, [pc, #204]	; (800d084 <_strtod_l+0x944>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d12a      	bne.n	800d010 <_strtod_l+0x8d0>
 800cfba:	9b04      	ldr	r3, [sp, #16]
 800cfbc:	4641      	mov	r1, r8
 800cfbe:	b1fb      	cbz	r3, 800d000 <_strtod_l+0x8c0>
 800cfc0:	4b2e      	ldr	r3, [pc, #184]	; (800d07c <_strtod_l+0x93c>)
 800cfc2:	ea09 0303 	and.w	r3, r9, r3
 800cfc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cfca:	f04f 32ff 	mov.w	r2, #4294967295
 800cfce:	d81a      	bhi.n	800d006 <_strtod_l+0x8c6>
 800cfd0:	0d1b      	lsrs	r3, r3, #20
 800cfd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cfd6:	fa02 f303 	lsl.w	r3, r2, r3
 800cfda:	4299      	cmp	r1, r3
 800cfdc:	d118      	bne.n	800d010 <_strtod_l+0x8d0>
 800cfde:	4b2a      	ldr	r3, [pc, #168]	; (800d088 <_strtod_l+0x948>)
 800cfe0:	459a      	cmp	sl, r3
 800cfe2:	d102      	bne.n	800cfea <_strtod_l+0x8aa>
 800cfe4:	3101      	adds	r1, #1
 800cfe6:	f43f adef 	beq.w	800cbc8 <_strtod_l+0x488>
 800cfea:	4b24      	ldr	r3, [pc, #144]	; (800d07c <_strtod_l+0x93c>)
 800cfec:	ea0a 0303 	and.w	r3, sl, r3
 800cff0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cff4:	f04f 0800 	mov.w	r8, #0
 800cff8:	9b04      	ldr	r3, [sp, #16]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1a2      	bne.n	800cf44 <_strtod_l+0x804>
 800cffe:	e5ed      	b.n	800cbdc <_strtod_l+0x49c>
 800d000:	f04f 33ff 	mov.w	r3, #4294967295
 800d004:	e7e9      	b.n	800cfda <_strtod_l+0x89a>
 800d006:	4613      	mov	r3, r2
 800d008:	e7e7      	b.n	800cfda <_strtod_l+0x89a>
 800d00a:	ea53 0308 	orrs.w	r3, r3, r8
 800d00e:	d08a      	beq.n	800cf26 <_strtod_l+0x7e6>
 800d010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d012:	b1e3      	cbz	r3, 800d04e <_strtod_l+0x90e>
 800d014:	ea13 0f0a 	tst.w	r3, sl
 800d018:	d0ee      	beq.n	800cff8 <_strtod_l+0x8b8>
 800d01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d01c:	9a04      	ldr	r2, [sp, #16]
 800d01e:	4640      	mov	r0, r8
 800d020:	4649      	mov	r1, r9
 800d022:	b1c3      	cbz	r3, 800d056 <_strtod_l+0x916>
 800d024:	f7ff fb6f 	bl	800c706 <sulp>
 800d028:	4602      	mov	r2, r0
 800d02a:	460b      	mov	r3, r1
 800d02c:	ec51 0b18 	vmov	r0, r1, d8
 800d030:	f7f3 f92c 	bl	800028c <__adddf3>
 800d034:	4680      	mov	r8, r0
 800d036:	4689      	mov	r9, r1
 800d038:	e7de      	b.n	800cff8 <_strtod_l+0x8b8>
 800d03a:	4013      	ands	r3, r2
 800d03c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d040:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d044:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d048:	f04f 38ff 	mov.w	r8, #4294967295
 800d04c:	e7d4      	b.n	800cff8 <_strtod_l+0x8b8>
 800d04e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d050:	ea13 0f08 	tst.w	r3, r8
 800d054:	e7e0      	b.n	800d018 <_strtod_l+0x8d8>
 800d056:	f7ff fb56 	bl	800c706 <sulp>
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	ec51 0b18 	vmov	r0, r1, d8
 800d062:	f7f3 f911 	bl	8000288 <__aeabi_dsub>
 800d066:	2200      	movs	r2, #0
 800d068:	2300      	movs	r3, #0
 800d06a:	4680      	mov	r8, r0
 800d06c:	4689      	mov	r9, r1
 800d06e:	f7f3 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d072:	2800      	cmp	r0, #0
 800d074:	d0c0      	beq.n	800cff8 <_strtod_l+0x8b8>
 800d076:	e618      	b.n	800ccaa <_strtod_l+0x56a>
 800d078:	fffffc02 	.word	0xfffffc02
 800d07c:	7ff00000 	.word	0x7ff00000
 800d080:	39500000 	.word	0x39500000
 800d084:	000fffff 	.word	0x000fffff
 800d088:	7fefffff 	.word	0x7fefffff
 800d08c:	08011aa8 	.word	0x08011aa8
 800d090:	4659      	mov	r1, fp
 800d092:	4628      	mov	r0, r5
 800d094:	f7ff fac0 	bl	800c618 <__ratio>
 800d098:	ec57 6b10 	vmov	r6, r7, d0
 800d09c:	ee10 0a10 	vmov	r0, s0
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d0a6:	4639      	mov	r1, r7
 800d0a8:	f7f3 fd22 	bl	8000af0 <__aeabi_dcmple>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d071      	beq.n	800d194 <_strtod_l+0xa54>
 800d0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d17c      	bne.n	800d1b0 <_strtod_l+0xa70>
 800d0b6:	f1b8 0f00 	cmp.w	r8, #0
 800d0ba:	d15a      	bne.n	800d172 <_strtod_l+0xa32>
 800d0bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d15d      	bne.n	800d180 <_strtod_l+0xa40>
 800d0c4:	4b90      	ldr	r3, [pc, #576]	; (800d308 <_strtod_l+0xbc8>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	4639      	mov	r1, r7
 800d0cc:	f7f3 fd06 	bl	8000adc <__aeabi_dcmplt>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d15c      	bne.n	800d18e <_strtod_l+0xa4e>
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	4639      	mov	r1, r7
 800d0d8:	4b8c      	ldr	r3, [pc, #560]	; (800d30c <_strtod_l+0xbcc>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f7f3 fa8c 	bl	80005f8 <__aeabi_dmul>
 800d0e0:	4606      	mov	r6, r0
 800d0e2:	460f      	mov	r7, r1
 800d0e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d0e8:	9606      	str	r6, [sp, #24]
 800d0ea:	9307      	str	r3, [sp, #28]
 800d0ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d0f4:	4b86      	ldr	r3, [pc, #536]	; (800d310 <_strtod_l+0xbd0>)
 800d0f6:	ea0a 0303 	and.w	r3, sl, r3
 800d0fa:	930d      	str	r3, [sp, #52]	; 0x34
 800d0fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0fe:	4b85      	ldr	r3, [pc, #532]	; (800d314 <_strtod_l+0xbd4>)
 800d100:	429a      	cmp	r2, r3
 800d102:	f040 8090 	bne.w	800d226 <_strtod_l+0xae6>
 800d106:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d10a:	ec49 8b10 	vmov	d0, r8, r9
 800d10e:	f7ff f9b9 	bl	800c484 <__ulp>
 800d112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d116:	ec51 0b10 	vmov	r0, r1, d0
 800d11a:	f7f3 fa6d 	bl	80005f8 <__aeabi_dmul>
 800d11e:	4642      	mov	r2, r8
 800d120:	464b      	mov	r3, r9
 800d122:	f7f3 f8b3 	bl	800028c <__adddf3>
 800d126:	460b      	mov	r3, r1
 800d128:	4979      	ldr	r1, [pc, #484]	; (800d310 <_strtod_l+0xbd0>)
 800d12a:	4a7b      	ldr	r2, [pc, #492]	; (800d318 <_strtod_l+0xbd8>)
 800d12c:	4019      	ands	r1, r3
 800d12e:	4291      	cmp	r1, r2
 800d130:	4680      	mov	r8, r0
 800d132:	d944      	bls.n	800d1be <_strtod_l+0xa7e>
 800d134:	ee18 2a90 	vmov	r2, s17
 800d138:	4b78      	ldr	r3, [pc, #480]	; (800d31c <_strtod_l+0xbdc>)
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d104      	bne.n	800d148 <_strtod_l+0xa08>
 800d13e:	ee18 3a10 	vmov	r3, s16
 800d142:	3301      	adds	r3, #1
 800d144:	f43f ad40 	beq.w	800cbc8 <_strtod_l+0x488>
 800d148:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d31c <_strtod_l+0xbdc>
 800d14c:	f04f 38ff 	mov.w	r8, #4294967295
 800d150:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d152:	4620      	mov	r0, r4
 800d154:	f7fe fe6a 	bl	800be2c <_Bfree>
 800d158:	9905      	ldr	r1, [sp, #20]
 800d15a:	4620      	mov	r0, r4
 800d15c:	f7fe fe66 	bl	800be2c <_Bfree>
 800d160:	4659      	mov	r1, fp
 800d162:	4620      	mov	r0, r4
 800d164:	f7fe fe62 	bl	800be2c <_Bfree>
 800d168:	4629      	mov	r1, r5
 800d16a:	4620      	mov	r0, r4
 800d16c:	f7fe fe5e 	bl	800be2c <_Bfree>
 800d170:	e609      	b.n	800cd86 <_strtod_l+0x646>
 800d172:	f1b8 0f01 	cmp.w	r8, #1
 800d176:	d103      	bne.n	800d180 <_strtod_l+0xa40>
 800d178:	f1b9 0f00 	cmp.w	r9, #0
 800d17c:	f43f ad95 	beq.w	800ccaa <_strtod_l+0x56a>
 800d180:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d2d8 <_strtod_l+0xb98>
 800d184:	4f60      	ldr	r7, [pc, #384]	; (800d308 <_strtod_l+0xbc8>)
 800d186:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d18a:	2600      	movs	r6, #0
 800d18c:	e7ae      	b.n	800d0ec <_strtod_l+0x9ac>
 800d18e:	4f5f      	ldr	r7, [pc, #380]	; (800d30c <_strtod_l+0xbcc>)
 800d190:	2600      	movs	r6, #0
 800d192:	e7a7      	b.n	800d0e4 <_strtod_l+0x9a4>
 800d194:	4b5d      	ldr	r3, [pc, #372]	; (800d30c <_strtod_l+0xbcc>)
 800d196:	4630      	mov	r0, r6
 800d198:	4639      	mov	r1, r7
 800d19a:	2200      	movs	r2, #0
 800d19c:	f7f3 fa2c 	bl	80005f8 <__aeabi_dmul>
 800d1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	460f      	mov	r7, r1
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d09c      	beq.n	800d0e4 <_strtod_l+0x9a4>
 800d1aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d1ae:	e79d      	b.n	800d0ec <_strtod_l+0x9ac>
 800d1b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d2e0 <_strtod_l+0xba0>
 800d1b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d1b8:	ec57 6b17 	vmov	r6, r7, d7
 800d1bc:	e796      	b.n	800d0ec <_strtod_l+0x9ac>
 800d1be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d1c2:	9b04      	ldr	r3, [sp, #16]
 800d1c4:	46ca      	mov	sl, r9
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1c2      	bne.n	800d150 <_strtod_l+0xa10>
 800d1ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d1ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1d0:	0d1b      	lsrs	r3, r3, #20
 800d1d2:	051b      	lsls	r3, r3, #20
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d1bb      	bne.n	800d150 <_strtod_l+0xa10>
 800d1d8:	4630      	mov	r0, r6
 800d1da:	4639      	mov	r1, r7
 800d1dc:	f7f3 fd6c 	bl	8000cb8 <__aeabi_d2lz>
 800d1e0:	f7f3 f9dc 	bl	800059c <__aeabi_l2d>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	4639      	mov	r1, r7
 800d1ec:	f7f3 f84c 	bl	8000288 <__aeabi_dsub>
 800d1f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1f6:	ea43 0308 	orr.w	r3, r3, r8
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	460f      	mov	r7, r1
 800d200:	d054      	beq.n	800d2ac <_strtod_l+0xb6c>
 800d202:	a339      	add	r3, pc, #228	; (adr r3, 800d2e8 <_strtod_l+0xba8>)
 800d204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d208:	f7f3 fc68 	bl	8000adc <__aeabi_dcmplt>
 800d20c:	2800      	cmp	r0, #0
 800d20e:	f47f ace5 	bne.w	800cbdc <_strtod_l+0x49c>
 800d212:	a337      	add	r3, pc, #220	; (adr r3, 800d2f0 <_strtod_l+0xbb0>)
 800d214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d218:	4630      	mov	r0, r6
 800d21a:	4639      	mov	r1, r7
 800d21c:	f7f3 fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 800d220:	2800      	cmp	r0, #0
 800d222:	d095      	beq.n	800d150 <_strtod_l+0xa10>
 800d224:	e4da      	b.n	800cbdc <_strtod_l+0x49c>
 800d226:	9b04      	ldr	r3, [sp, #16]
 800d228:	b333      	cbz	r3, 800d278 <_strtod_l+0xb38>
 800d22a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d22c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d230:	d822      	bhi.n	800d278 <_strtod_l+0xb38>
 800d232:	a331      	add	r3, pc, #196	; (adr r3, 800d2f8 <_strtod_l+0xbb8>)
 800d234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d238:	4630      	mov	r0, r6
 800d23a:	4639      	mov	r1, r7
 800d23c:	f7f3 fc58 	bl	8000af0 <__aeabi_dcmple>
 800d240:	b1a0      	cbz	r0, 800d26c <_strtod_l+0xb2c>
 800d242:	4639      	mov	r1, r7
 800d244:	4630      	mov	r0, r6
 800d246:	f7f3 fcaf 	bl	8000ba8 <__aeabi_d2uiz>
 800d24a:	2801      	cmp	r0, #1
 800d24c:	bf38      	it	cc
 800d24e:	2001      	movcc	r0, #1
 800d250:	f7f3 f958 	bl	8000504 <__aeabi_ui2d>
 800d254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d256:	4606      	mov	r6, r0
 800d258:	460f      	mov	r7, r1
 800d25a:	bb23      	cbnz	r3, 800d2a6 <_strtod_l+0xb66>
 800d25c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d260:	9010      	str	r0, [sp, #64]	; 0x40
 800d262:	9311      	str	r3, [sp, #68]	; 0x44
 800d264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d268:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d26c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d26e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d270:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d274:	1a9b      	subs	r3, r3, r2
 800d276:	930f      	str	r3, [sp, #60]	; 0x3c
 800d278:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d27c:	eeb0 0a48 	vmov.f32	s0, s16
 800d280:	eef0 0a68 	vmov.f32	s1, s17
 800d284:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d288:	f7ff f8fc 	bl	800c484 <__ulp>
 800d28c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d290:	ec53 2b10 	vmov	r2, r3, d0
 800d294:	f7f3 f9b0 	bl	80005f8 <__aeabi_dmul>
 800d298:	ec53 2b18 	vmov	r2, r3, d8
 800d29c:	f7f2 fff6 	bl	800028c <__adddf3>
 800d2a0:	4680      	mov	r8, r0
 800d2a2:	4689      	mov	r9, r1
 800d2a4:	e78d      	b.n	800d1c2 <_strtod_l+0xa82>
 800d2a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d2aa:	e7db      	b.n	800d264 <_strtod_l+0xb24>
 800d2ac:	a314      	add	r3, pc, #80	; (adr r3, 800d300 <_strtod_l+0xbc0>)
 800d2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b2:	f7f3 fc13 	bl	8000adc <__aeabi_dcmplt>
 800d2b6:	e7b3      	b.n	800d220 <_strtod_l+0xae0>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	930a      	str	r3, [sp, #40]	; 0x28
 800d2bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d2be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2c0:	6013      	str	r3, [r2, #0]
 800d2c2:	f7ff ba7c 	b.w	800c7be <_strtod_l+0x7e>
 800d2c6:	2a65      	cmp	r2, #101	; 0x65
 800d2c8:	f43f ab75 	beq.w	800c9b6 <_strtod_l+0x276>
 800d2cc:	2a45      	cmp	r2, #69	; 0x45
 800d2ce:	f43f ab72 	beq.w	800c9b6 <_strtod_l+0x276>
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	f7ff bbaa 	b.w	800ca2c <_strtod_l+0x2ec>
 800d2d8:	00000000 	.word	0x00000000
 800d2dc:	bff00000 	.word	0xbff00000
 800d2e0:	00000000 	.word	0x00000000
 800d2e4:	3ff00000 	.word	0x3ff00000
 800d2e8:	94a03595 	.word	0x94a03595
 800d2ec:	3fdfffff 	.word	0x3fdfffff
 800d2f0:	35afe535 	.word	0x35afe535
 800d2f4:	3fe00000 	.word	0x3fe00000
 800d2f8:	ffc00000 	.word	0xffc00000
 800d2fc:	41dfffff 	.word	0x41dfffff
 800d300:	94a03595 	.word	0x94a03595
 800d304:	3fcfffff 	.word	0x3fcfffff
 800d308:	3ff00000 	.word	0x3ff00000
 800d30c:	3fe00000 	.word	0x3fe00000
 800d310:	7ff00000 	.word	0x7ff00000
 800d314:	7fe00000 	.word	0x7fe00000
 800d318:	7c9fffff 	.word	0x7c9fffff
 800d31c:	7fefffff 	.word	0x7fefffff

0800d320 <_strtod_r>:
 800d320:	4b01      	ldr	r3, [pc, #4]	; (800d328 <_strtod_r+0x8>)
 800d322:	f7ff ba0d 	b.w	800c740 <_strtod_l>
 800d326:	bf00      	nop
 800d328:	20000068 	.word	0x20000068

0800d32c <_strtol_l.constprop.0>:
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d332:	d001      	beq.n	800d338 <_strtol_l.constprop.0+0xc>
 800d334:	2b24      	cmp	r3, #36	; 0x24
 800d336:	d906      	bls.n	800d346 <_strtol_l.constprop.0+0x1a>
 800d338:	f7fd fe2e 	bl	800af98 <__errno>
 800d33c:	2316      	movs	r3, #22
 800d33e:	6003      	str	r3, [r0, #0]
 800d340:	2000      	movs	r0, #0
 800d342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d346:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d42c <_strtol_l.constprop.0+0x100>
 800d34a:	460d      	mov	r5, r1
 800d34c:	462e      	mov	r6, r5
 800d34e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d352:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d356:	f017 0708 	ands.w	r7, r7, #8
 800d35a:	d1f7      	bne.n	800d34c <_strtol_l.constprop.0+0x20>
 800d35c:	2c2d      	cmp	r4, #45	; 0x2d
 800d35e:	d132      	bne.n	800d3c6 <_strtol_l.constprop.0+0x9a>
 800d360:	782c      	ldrb	r4, [r5, #0]
 800d362:	2701      	movs	r7, #1
 800d364:	1cb5      	adds	r5, r6, #2
 800d366:	2b00      	cmp	r3, #0
 800d368:	d05b      	beq.n	800d422 <_strtol_l.constprop.0+0xf6>
 800d36a:	2b10      	cmp	r3, #16
 800d36c:	d109      	bne.n	800d382 <_strtol_l.constprop.0+0x56>
 800d36e:	2c30      	cmp	r4, #48	; 0x30
 800d370:	d107      	bne.n	800d382 <_strtol_l.constprop.0+0x56>
 800d372:	782c      	ldrb	r4, [r5, #0]
 800d374:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d378:	2c58      	cmp	r4, #88	; 0x58
 800d37a:	d14d      	bne.n	800d418 <_strtol_l.constprop.0+0xec>
 800d37c:	786c      	ldrb	r4, [r5, #1]
 800d37e:	2310      	movs	r3, #16
 800d380:	3502      	adds	r5, #2
 800d382:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d386:	f108 38ff 	add.w	r8, r8, #4294967295
 800d38a:	f04f 0e00 	mov.w	lr, #0
 800d38e:	fbb8 f9f3 	udiv	r9, r8, r3
 800d392:	4676      	mov	r6, lr
 800d394:	fb03 8a19 	mls	sl, r3, r9, r8
 800d398:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d39c:	f1bc 0f09 	cmp.w	ip, #9
 800d3a0:	d816      	bhi.n	800d3d0 <_strtol_l.constprop.0+0xa4>
 800d3a2:	4664      	mov	r4, ip
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	dd24      	ble.n	800d3f2 <_strtol_l.constprop.0+0xc6>
 800d3a8:	f1be 3fff 	cmp.w	lr, #4294967295
 800d3ac:	d008      	beq.n	800d3c0 <_strtol_l.constprop.0+0x94>
 800d3ae:	45b1      	cmp	r9, r6
 800d3b0:	d31c      	bcc.n	800d3ec <_strtol_l.constprop.0+0xc0>
 800d3b2:	d101      	bne.n	800d3b8 <_strtol_l.constprop.0+0x8c>
 800d3b4:	45a2      	cmp	sl, r4
 800d3b6:	db19      	blt.n	800d3ec <_strtol_l.constprop.0+0xc0>
 800d3b8:	fb06 4603 	mla	r6, r6, r3, r4
 800d3bc:	f04f 0e01 	mov.w	lr, #1
 800d3c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3c4:	e7e8      	b.n	800d398 <_strtol_l.constprop.0+0x6c>
 800d3c6:	2c2b      	cmp	r4, #43	; 0x2b
 800d3c8:	bf04      	itt	eq
 800d3ca:	782c      	ldrbeq	r4, [r5, #0]
 800d3cc:	1cb5      	addeq	r5, r6, #2
 800d3ce:	e7ca      	b.n	800d366 <_strtol_l.constprop.0+0x3a>
 800d3d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d3d4:	f1bc 0f19 	cmp.w	ip, #25
 800d3d8:	d801      	bhi.n	800d3de <_strtol_l.constprop.0+0xb2>
 800d3da:	3c37      	subs	r4, #55	; 0x37
 800d3dc:	e7e2      	b.n	800d3a4 <_strtol_l.constprop.0+0x78>
 800d3de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d3e2:	f1bc 0f19 	cmp.w	ip, #25
 800d3e6:	d804      	bhi.n	800d3f2 <_strtol_l.constprop.0+0xc6>
 800d3e8:	3c57      	subs	r4, #87	; 0x57
 800d3ea:	e7db      	b.n	800d3a4 <_strtol_l.constprop.0+0x78>
 800d3ec:	f04f 3eff 	mov.w	lr, #4294967295
 800d3f0:	e7e6      	b.n	800d3c0 <_strtol_l.constprop.0+0x94>
 800d3f2:	f1be 3fff 	cmp.w	lr, #4294967295
 800d3f6:	d105      	bne.n	800d404 <_strtol_l.constprop.0+0xd8>
 800d3f8:	2322      	movs	r3, #34	; 0x22
 800d3fa:	6003      	str	r3, [r0, #0]
 800d3fc:	4646      	mov	r6, r8
 800d3fe:	b942      	cbnz	r2, 800d412 <_strtol_l.constprop.0+0xe6>
 800d400:	4630      	mov	r0, r6
 800d402:	e79e      	b.n	800d342 <_strtol_l.constprop.0+0x16>
 800d404:	b107      	cbz	r7, 800d408 <_strtol_l.constprop.0+0xdc>
 800d406:	4276      	negs	r6, r6
 800d408:	2a00      	cmp	r2, #0
 800d40a:	d0f9      	beq.n	800d400 <_strtol_l.constprop.0+0xd4>
 800d40c:	f1be 0f00 	cmp.w	lr, #0
 800d410:	d000      	beq.n	800d414 <_strtol_l.constprop.0+0xe8>
 800d412:	1e69      	subs	r1, r5, #1
 800d414:	6011      	str	r1, [r2, #0]
 800d416:	e7f3      	b.n	800d400 <_strtol_l.constprop.0+0xd4>
 800d418:	2430      	movs	r4, #48	; 0x30
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1b1      	bne.n	800d382 <_strtol_l.constprop.0+0x56>
 800d41e:	2308      	movs	r3, #8
 800d420:	e7af      	b.n	800d382 <_strtol_l.constprop.0+0x56>
 800d422:	2c30      	cmp	r4, #48	; 0x30
 800d424:	d0a5      	beq.n	800d372 <_strtol_l.constprop.0+0x46>
 800d426:	230a      	movs	r3, #10
 800d428:	e7ab      	b.n	800d382 <_strtol_l.constprop.0+0x56>
 800d42a:	bf00      	nop
 800d42c:	08011ad1 	.word	0x08011ad1

0800d430 <_strtol_r>:
 800d430:	f7ff bf7c 	b.w	800d32c <_strtol_l.constprop.0>

0800d434 <__ssputs_r>:
 800d434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d438:	688e      	ldr	r6, [r1, #8]
 800d43a:	461f      	mov	r7, r3
 800d43c:	42be      	cmp	r6, r7
 800d43e:	680b      	ldr	r3, [r1, #0]
 800d440:	4682      	mov	sl, r0
 800d442:	460c      	mov	r4, r1
 800d444:	4690      	mov	r8, r2
 800d446:	d82c      	bhi.n	800d4a2 <__ssputs_r+0x6e>
 800d448:	898a      	ldrh	r2, [r1, #12]
 800d44a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d44e:	d026      	beq.n	800d49e <__ssputs_r+0x6a>
 800d450:	6965      	ldr	r5, [r4, #20]
 800d452:	6909      	ldr	r1, [r1, #16]
 800d454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d458:	eba3 0901 	sub.w	r9, r3, r1
 800d45c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d460:	1c7b      	adds	r3, r7, #1
 800d462:	444b      	add	r3, r9
 800d464:	106d      	asrs	r5, r5, #1
 800d466:	429d      	cmp	r5, r3
 800d468:	bf38      	it	cc
 800d46a:	461d      	movcc	r5, r3
 800d46c:	0553      	lsls	r3, r2, #21
 800d46e:	d527      	bpl.n	800d4c0 <__ssputs_r+0x8c>
 800d470:	4629      	mov	r1, r5
 800d472:	f7fc fcd3 	bl	8009e1c <_malloc_r>
 800d476:	4606      	mov	r6, r0
 800d478:	b360      	cbz	r0, 800d4d4 <__ssputs_r+0xa0>
 800d47a:	6921      	ldr	r1, [r4, #16]
 800d47c:	464a      	mov	r2, r9
 800d47e:	f7fd fdb8 	bl	800aff2 <memcpy>
 800d482:	89a3      	ldrh	r3, [r4, #12]
 800d484:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d48c:	81a3      	strh	r3, [r4, #12]
 800d48e:	6126      	str	r6, [r4, #16]
 800d490:	6165      	str	r5, [r4, #20]
 800d492:	444e      	add	r6, r9
 800d494:	eba5 0509 	sub.w	r5, r5, r9
 800d498:	6026      	str	r6, [r4, #0]
 800d49a:	60a5      	str	r5, [r4, #8]
 800d49c:	463e      	mov	r6, r7
 800d49e:	42be      	cmp	r6, r7
 800d4a0:	d900      	bls.n	800d4a4 <__ssputs_r+0x70>
 800d4a2:	463e      	mov	r6, r7
 800d4a4:	6820      	ldr	r0, [r4, #0]
 800d4a6:	4632      	mov	r2, r6
 800d4a8:	4641      	mov	r1, r8
 800d4aa:	f000 f9c9 	bl	800d840 <memmove>
 800d4ae:	68a3      	ldr	r3, [r4, #8]
 800d4b0:	1b9b      	subs	r3, r3, r6
 800d4b2:	60a3      	str	r3, [r4, #8]
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	4433      	add	r3, r6
 800d4b8:	6023      	str	r3, [r4, #0]
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4c0:	462a      	mov	r2, r5
 800d4c2:	f000 fd8e 	bl	800dfe2 <_realloc_r>
 800d4c6:	4606      	mov	r6, r0
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d1e0      	bne.n	800d48e <__ssputs_r+0x5a>
 800d4cc:	6921      	ldr	r1, [r4, #16]
 800d4ce:	4650      	mov	r0, sl
 800d4d0:	f7fe fc20 	bl	800bd14 <_free_r>
 800d4d4:	230c      	movs	r3, #12
 800d4d6:	f8ca 3000 	str.w	r3, [sl]
 800d4da:	89a3      	ldrh	r3, [r4, #12]
 800d4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4e0:	81a3      	strh	r3, [r4, #12]
 800d4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e6:	e7e9      	b.n	800d4bc <__ssputs_r+0x88>

0800d4e8 <_svfiprintf_r>:
 800d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	4698      	mov	r8, r3
 800d4ee:	898b      	ldrh	r3, [r1, #12]
 800d4f0:	061b      	lsls	r3, r3, #24
 800d4f2:	b09d      	sub	sp, #116	; 0x74
 800d4f4:	4607      	mov	r7, r0
 800d4f6:	460d      	mov	r5, r1
 800d4f8:	4614      	mov	r4, r2
 800d4fa:	d50e      	bpl.n	800d51a <_svfiprintf_r+0x32>
 800d4fc:	690b      	ldr	r3, [r1, #16]
 800d4fe:	b963      	cbnz	r3, 800d51a <_svfiprintf_r+0x32>
 800d500:	2140      	movs	r1, #64	; 0x40
 800d502:	f7fc fc8b 	bl	8009e1c <_malloc_r>
 800d506:	6028      	str	r0, [r5, #0]
 800d508:	6128      	str	r0, [r5, #16]
 800d50a:	b920      	cbnz	r0, 800d516 <_svfiprintf_r+0x2e>
 800d50c:	230c      	movs	r3, #12
 800d50e:	603b      	str	r3, [r7, #0]
 800d510:	f04f 30ff 	mov.w	r0, #4294967295
 800d514:	e0d0      	b.n	800d6b8 <_svfiprintf_r+0x1d0>
 800d516:	2340      	movs	r3, #64	; 0x40
 800d518:	616b      	str	r3, [r5, #20]
 800d51a:	2300      	movs	r3, #0
 800d51c:	9309      	str	r3, [sp, #36]	; 0x24
 800d51e:	2320      	movs	r3, #32
 800d520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d524:	f8cd 800c 	str.w	r8, [sp, #12]
 800d528:	2330      	movs	r3, #48	; 0x30
 800d52a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d6d0 <_svfiprintf_r+0x1e8>
 800d52e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d532:	f04f 0901 	mov.w	r9, #1
 800d536:	4623      	mov	r3, r4
 800d538:	469a      	mov	sl, r3
 800d53a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d53e:	b10a      	cbz	r2, 800d544 <_svfiprintf_r+0x5c>
 800d540:	2a25      	cmp	r2, #37	; 0x25
 800d542:	d1f9      	bne.n	800d538 <_svfiprintf_r+0x50>
 800d544:	ebba 0b04 	subs.w	fp, sl, r4
 800d548:	d00b      	beq.n	800d562 <_svfiprintf_r+0x7a>
 800d54a:	465b      	mov	r3, fp
 800d54c:	4622      	mov	r2, r4
 800d54e:	4629      	mov	r1, r5
 800d550:	4638      	mov	r0, r7
 800d552:	f7ff ff6f 	bl	800d434 <__ssputs_r>
 800d556:	3001      	adds	r0, #1
 800d558:	f000 80a9 	beq.w	800d6ae <_svfiprintf_r+0x1c6>
 800d55c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d55e:	445a      	add	r2, fp
 800d560:	9209      	str	r2, [sp, #36]	; 0x24
 800d562:	f89a 3000 	ldrb.w	r3, [sl]
 800d566:	2b00      	cmp	r3, #0
 800d568:	f000 80a1 	beq.w	800d6ae <_svfiprintf_r+0x1c6>
 800d56c:	2300      	movs	r3, #0
 800d56e:	f04f 32ff 	mov.w	r2, #4294967295
 800d572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d576:	f10a 0a01 	add.w	sl, sl, #1
 800d57a:	9304      	str	r3, [sp, #16]
 800d57c:	9307      	str	r3, [sp, #28]
 800d57e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d582:	931a      	str	r3, [sp, #104]	; 0x68
 800d584:	4654      	mov	r4, sl
 800d586:	2205      	movs	r2, #5
 800d588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d58c:	4850      	ldr	r0, [pc, #320]	; (800d6d0 <_svfiprintf_r+0x1e8>)
 800d58e:	f7f2 fe1f 	bl	80001d0 <memchr>
 800d592:	9a04      	ldr	r2, [sp, #16]
 800d594:	b9d8      	cbnz	r0, 800d5ce <_svfiprintf_r+0xe6>
 800d596:	06d0      	lsls	r0, r2, #27
 800d598:	bf44      	itt	mi
 800d59a:	2320      	movmi	r3, #32
 800d59c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5a0:	0711      	lsls	r1, r2, #28
 800d5a2:	bf44      	itt	mi
 800d5a4:	232b      	movmi	r3, #43	; 0x2b
 800d5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d5b0:	d015      	beq.n	800d5de <_svfiprintf_r+0xf6>
 800d5b2:	9a07      	ldr	r2, [sp, #28]
 800d5b4:	4654      	mov	r4, sl
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	f04f 0c0a 	mov.w	ip, #10
 800d5bc:	4621      	mov	r1, r4
 800d5be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5c2:	3b30      	subs	r3, #48	; 0x30
 800d5c4:	2b09      	cmp	r3, #9
 800d5c6:	d94d      	bls.n	800d664 <_svfiprintf_r+0x17c>
 800d5c8:	b1b0      	cbz	r0, 800d5f8 <_svfiprintf_r+0x110>
 800d5ca:	9207      	str	r2, [sp, #28]
 800d5cc:	e014      	b.n	800d5f8 <_svfiprintf_r+0x110>
 800d5ce:	eba0 0308 	sub.w	r3, r0, r8
 800d5d2:	fa09 f303 	lsl.w	r3, r9, r3
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	9304      	str	r3, [sp, #16]
 800d5da:	46a2      	mov	sl, r4
 800d5dc:	e7d2      	b.n	800d584 <_svfiprintf_r+0x9c>
 800d5de:	9b03      	ldr	r3, [sp, #12]
 800d5e0:	1d19      	adds	r1, r3, #4
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	9103      	str	r1, [sp, #12]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	bfbb      	ittet	lt
 800d5ea:	425b      	neglt	r3, r3
 800d5ec:	f042 0202 	orrlt.w	r2, r2, #2
 800d5f0:	9307      	strge	r3, [sp, #28]
 800d5f2:	9307      	strlt	r3, [sp, #28]
 800d5f4:	bfb8      	it	lt
 800d5f6:	9204      	strlt	r2, [sp, #16]
 800d5f8:	7823      	ldrb	r3, [r4, #0]
 800d5fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d5fc:	d10c      	bne.n	800d618 <_svfiprintf_r+0x130>
 800d5fe:	7863      	ldrb	r3, [r4, #1]
 800d600:	2b2a      	cmp	r3, #42	; 0x2a
 800d602:	d134      	bne.n	800d66e <_svfiprintf_r+0x186>
 800d604:	9b03      	ldr	r3, [sp, #12]
 800d606:	1d1a      	adds	r2, r3, #4
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	9203      	str	r2, [sp, #12]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	bfb8      	it	lt
 800d610:	f04f 33ff 	movlt.w	r3, #4294967295
 800d614:	3402      	adds	r4, #2
 800d616:	9305      	str	r3, [sp, #20]
 800d618:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d6e0 <_svfiprintf_r+0x1f8>
 800d61c:	7821      	ldrb	r1, [r4, #0]
 800d61e:	2203      	movs	r2, #3
 800d620:	4650      	mov	r0, sl
 800d622:	f7f2 fdd5 	bl	80001d0 <memchr>
 800d626:	b138      	cbz	r0, 800d638 <_svfiprintf_r+0x150>
 800d628:	9b04      	ldr	r3, [sp, #16]
 800d62a:	eba0 000a 	sub.w	r0, r0, sl
 800d62e:	2240      	movs	r2, #64	; 0x40
 800d630:	4082      	lsls	r2, r0
 800d632:	4313      	orrs	r3, r2
 800d634:	3401      	adds	r4, #1
 800d636:	9304      	str	r3, [sp, #16]
 800d638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d63c:	4825      	ldr	r0, [pc, #148]	; (800d6d4 <_svfiprintf_r+0x1ec>)
 800d63e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d642:	2206      	movs	r2, #6
 800d644:	f7f2 fdc4 	bl	80001d0 <memchr>
 800d648:	2800      	cmp	r0, #0
 800d64a:	d038      	beq.n	800d6be <_svfiprintf_r+0x1d6>
 800d64c:	4b22      	ldr	r3, [pc, #136]	; (800d6d8 <_svfiprintf_r+0x1f0>)
 800d64e:	bb1b      	cbnz	r3, 800d698 <_svfiprintf_r+0x1b0>
 800d650:	9b03      	ldr	r3, [sp, #12]
 800d652:	3307      	adds	r3, #7
 800d654:	f023 0307 	bic.w	r3, r3, #7
 800d658:	3308      	adds	r3, #8
 800d65a:	9303      	str	r3, [sp, #12]
 800d65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d65e:	4433      	add	r3, r6
 800d660:	9309      	str	r3, [sp, #36]	; 0x24
 800d662:	e768      	b.n	800d536 <_svfiprintf_r+0x4e>
 800d664:	fb0c 3202 	mla	r2, ip, r2, r3
 800d668:	460c      	mov	r4, r1
 800d66a:	2001      	movs	r0, #1
 800d66c:	e7a6      	b.n	800d5bc <_svfiprintf_r+0xd4>
 800d66e:	2300      	movs	r3, #0
 800d670:	3401      	adds	r4, #1
 800d672:	9305      	str	r3, [sp, #20]
 800d674:	4619      	mov	r1, r3
 800d676:	f04f 0c0a 	mov.w	ip, #10
 800d67a:	4620      	mov	r0, r4
 800d67c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d680:	3a30      	subs	r2, #48	; 0x30
 800d682:	2a09      	cmp	r2, #9
 800d684:	d903      	bls.n	800d68e <_svfiprintf_r+0x1a6>
 800d686:	2b00      	cmp	r3, #0
 800d688:	d0c6      	beq.n	800d618 <_svfiprintf_r+0x130>
 800d68a:	9105      	str	r1, [sp, #20]
 800d68c:	e7c4      	b.n	800d618 <_svfiprintf_r+0x130>
 800d68e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d692:	4604      	mov	r4, r0
 800d694:	2301      	movs	r3, #1
 800d696:	e7f0      	b.n	800d67a <_svfiprintf_r+0x192>
 800d698:	ab03      	add	r3, sp, #12
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	462a      	mov	r2, r5
 800d69e:	4b0f      	ldr	r3, [pc, #60]	; (800d6dc <_svfiprintf_r+0x1f4>)
 800d6a0:	a904      	add	r1, sp, #16
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	f7fc fce6 	bl	800a074 <_printf_float>
 800d6a8:	1c42      	adds	r2, r0, #1
 800d6aa:	4606      	mov	r6, r0
 800d6ac:	d1d6      	bne.n	800d65c <_svfiprintf_r+0x174>
 800d6ae:	89ab      	ldrh	r3, [r5, #12]
 800d6b0:	065b      	lsls	r3, r3, #25
 800d6b2:	f53f af2d 	bmi.w	800d510 <_svfiprintf_r+0x28>
 800d6b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6b8:	b01d      	add	sp, #116	; 0x74
 800d6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6be:	ab03      	add	r3, sp, #12
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	462a      	mov	r2, r5
 800d6c4:	4b05      	ldr	r3, [pc, #20]	; (800d6dc <_svfiprintf_r+0x1f4>)
 800d6c6:	a904      	add	r1, sp, #16
 800d6c8:	4638      	mov	r0, r7
 800d6ca:	f7fc ff77 	bl	800a5bc <_printf_i>
 800d6ce:	e7eb      	b.n	800d6a8 <_svfiprintf_r+0x1c0>
 800d6d0:	08011bd1 	.word	0x08011bd1
 800d6d4:	08011bdb 	.word	0x08011bdb
 800d6d8:	0800a075 	.word	0x0800a075
 800d6dc:	0800d435 	.word	0x0800d435
 800d6e0:	08011bd7 	.word	0x08011bd7

0800d6e4 <__sflush_r>:
 800d6e4:	898a      	ldrh	r2, [r1, #12]
 800d6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	0710      	lsls	r0, r2, #28
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	d458      	bmi.n	800d7a4 <__sflush_r+0xc0>
 800d6f2:	684b      	ldr	r3, [r1, #4]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	dc05      	bgt.n	800d704 <__sflush_r+0x20>
 800d6f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	dc02      	bgt.n	800d704 <__sflush_r+0x20>
 800d6fe:	2000      	movs	r0, #0
 800d700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d706:	2e00      	cmp	r6, #0
 800d708:	d0f9      	beq.n	800d6fe <__sflush_r+0x1a>
 800d70a:	2300      	movs	r3, #0
 800d70c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d710:	682f      	ldr	r7, [r5, #0]
 800d712:	6a21      	ldr	r1, [r4, #32]
 800d714:	602b      	str	r3, [r5, #0]
 800d716:	d032      	beq.n	800d77e <__sflush_r+0x9a>
 800d718:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	075a      	lsls	r2, r3, #29
 800d71e:	d505      	bpl.n	800d72c <__sflush_r+0x48>
 800d720:	6863      	ldr	r3, [r4, #4]
 800d722:	1ac0      	subs	r0, r0, r3
 800d724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d726:	b10b      	cbz	r3, 800d72c <__sflush_r+0x48>
 800d728:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d72a:	1ac0      	subs	r0, r0, r3
 800d72c:	2300      	movs	r3, #0
 800d72e:	4602      	mov	r2, r0
 800d730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d732:	6a21      	ldr	r1, [r4, #32]
 800d734:	4628      	mov	r0, r5
 800d736:	47b0      	blx	r6
 800d738:	1c43      	adds	r3, r0, #1
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	d106      	bne.n	800d74c <__sflush_r+0x68>
 800d73e:	6829      	ldr	r1, [r5, #0]
 800d740:	291d      	cmp	r1, #29
 800d742:	d82b      	bhi.n	800d79c <__sflush_r+0xb8>
 800d744:	4a29      	ldr	r2, [pc, #164]	; (800d7ec <__sflush_r+0x108>)
 800d746:	410a      	asrs	r2, r1
 800d748:	07d6      	lsls	r6, r2, #31
 800d74a:	d427      	bmi.n	800d79c <__sflush_r+0xb8>
 800d74c:	2200      	movs	r2, #0
 800d74e:	6062      	str	r2, [r4, #4]
 800d750:	04d9      	lsls	r1, r3, #19
 800d752:	6922      	ldr	r2, [r4, #16]
 800d754:	6022      	str	r2, [r4, #0]
 800d756:	d504      	bpl.n	800d762 <__sflush_r+0x7e>
 800d758:	1c42      	adds	r2, r0, #1
 800d75a:	d101      	bne.n	800d760 <__sflush_r+0x7c>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	b903      	cbnz	r3, 800d762 <__sflush_r+0x7e>
 800d760:	6560      	str	r0, [r4, #84]	; 0x54
 800d762:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d764:	602f      	str	r7, [r5, #0]
 800d766:	2900      	cmp	r1, #0
 800d768:	d0c9      	beq.n	800d6fe <__sflush_r+0x1a>
 800d76a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d76e:	4299      	cmp	r1, r3
 800d770:	d002      	beq.n	800d778 <__sflush_r+0x94>
 800d772:	4628      	mov	r0, r5
 800d774:	f7fe face 	bl	800bd14 <_free_r>
 800d778:	2000      	movs	r0, #0
 800d77a:	6360      	str	r0, [r4, #52]	; 0x34
 800d77c:	e7c0      	b.n	800d700 <__sflush_r+0x1c>
 800d77e:	2301      	movs	r3, #1
 800d780:	4628      	mov	r0, r5
 800d782:	47b0      	blx	r6
 800d784:	1c41      	adds	r1, r0, #1
 800d786:	d1c8      	bne.n	800d71a <__sflush_r+0x36>
 800d788:	682b      	ldr	r3, [r5, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d0c5      	beq.n	800d71a <__sflush_r+0x36>
 800d78e:	2b1d      	cmp	r3, #29
 800d790:	d001      	beq.n	800d796 <__sflush_r+0xb2>
 800d792:	2b16      	cmp	r3, #22
 800d794:	d101      	bne.n	800d79a <__sflush_r+0xb6>
 800d796:	602f      	str	r7, [r5, #0]
 800d798:	e7b1      	b.n	800d6fe <__sflush_r+0x1a>
 800d79a:	89a3      	ldrh	r3, [r4, #12]
 800d79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7a0:	81a3      	strh	r3, [r4, #12]
 800d7a2:	e7ad      	b.n	800d700 <__sflush_r+0x1c>
 800d7a4:	690f      	ldr	r7, [r1, #16]
 800d7a6:	2f00      	cmp	r7, #0
 800d7a8:	d0a9      	beq.n	800d6fe <__sflush_r+0x1a>
 800d7aa:	0793      	lsls	r3, r2, #30
 800d7ac:	680e      	ldr	r6, [r1, #0]
 800d7ae:	bf08      	it	eq
 800d7b0:	694b      	ldreq	r3, [r1, #20]
 800d7b2:	600f      	str	r7, [r1, #0]
 800d7b4:	bf18      	it	ne
 800d7b6:	2300      	movne	r3, #0
 800d7b8:	eba6 0807 	sub.w	r8, r6, r7
 800d7bc:	608b      	str	r3, [r1, #8]
 800d7be:	f1b8 0f00 	cmp.w	r8, #0
 800d7c2:	dd9c      	ble.n	800d6fe <__sflush_r+0x1a>
 800d7c4:	6a21      	ldr	r1, [r4, #32]
 800d7c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7c8:	4643      	mov	r3, r8
 800d7ca:	463a      	mov	r2, r7
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	47b0      	blx	r6
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	dc06      	bgt.n	800d7e2 <__sflush_r+0xfe>
 800d7d4:	89a3      	ldrh	r3, [r4, #12]
 800d7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7da:	81a3      	strh	r3, [r4, #12]
 800d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e0:	e78e      	b.n	800d700 <__sflush_r+0x1c>
 800d7e2:	4407      	add	r7, r0
 800d7e4:	eba8 0800 	sub.w	r8, r8, r0
 800d7e8:	e7e9      	b.n	800d7be <__sflush_r+0xda>
 800d7ea:	bf00      	nop
 800d7ec:	dfbffffe 	.word	0xdfbffffe

0800d7f0 <_fflush_r>:
 800d7f0:	b538      	push	{r3, r4, r5, lr}
 800d7f2:	690b      	ldr	r3, [r1, #16]
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	460c      	mov	r4, r1
 800d7f8:	b913      	cbnz	r3, 800d800 <_fflush_r+0x10>
 800d7fa:	2500      	movs	r5, #0
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	bd38      	pop	{r3, r4, r5, pc}
 800d800:	b118      	cbz	r0, 800d80a <_fflush_r+0x1a>
 800d802:	6a03      	ldr	r3, [r0, #32]
 800d804:	b90b      	cbnz	r3, 800d80a <_fflush_r+0x1a>
 800d806:	f7fd fa97 	bl	800ad38 <__sinit>
 800d80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d0f3      	beq.n	800d7fa <_fflush_r+0xa>
 800d812:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d814:	07d0      	lsls	r0, r2, #31
 800d816:	d404      	bmi.n	800d822 <_fflush_r+0x32>
 800d818:	0599      	lsls	r1, r3, #22
 800d81a:	d402      	bmi.n	800d822 <_fflush_r+0x32>
 800d81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d81e:	f7fd fbe6 	bl	800afee <__retarget_lock_acquire_recursive>
 800d822:	4628      	mov	r0, r5
 800d824:	4621      	mov	r1, r4
 800d826:	f7ff ff5d 	bl	800d6e4 <__sflush_r>
 800d82a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d82c:	07da      	lsls	r2, r3, #31
 800d82e:	4605      	mov	r5, r0
 800d830:	d4e4      	bmi.n	800d7fc <_fflush_r+0xc>
 800d832:	89a3      	ldrh	r3, [r4, #12]
 800d834:	059b      	lsls	r3, r3, #22
 800d836:	d4e1      	bmi.n	800d7fc <_fflush_r+0xc>
 800d838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d83a:	f7fd fbd9 	bl	800aff0 <__retarget_lock_release_recursive>
 800d83e:	e7dd      	b.n	800d7fc <_fflush_r+0xc>

0800d840 <memmove>:
 800d840:	4288      	cmp	r0, r1
 800d842:	b510      	push	{r4, lr}
 800d844:	eb01 0402 	add.w	r4, r1, r2
 800d848:	d902      	bls.n	800d850 <memmove+0x10>
 800d84a:	4284      	cmp	r4, r0
 800d84c:	4623      	mov	r3, r4
 800d84e:	d807      	bhi.n	800d860 <memmove+0x20>
 800d850:	1e43      	subs	r3, r0, #1
 800d852:	42a1      	cmp	r1, r4
 800d854:	d008      	beq.n	800d868 <memmove+0x28>
 800d856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d85a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d85e:	e7f8      	b.n	800d852 <memmove+0x12>
 800d860:	4402      	add	r2, r0
 800d862:	4601      	mov	r1, r0
 800d864:	428a      	cmp	r2, r1
 800d866:	d100      	bne.n	800d86a <memmove+0x2a>
 800d868:	bd10      	pop	{r4, pc}
 800d86a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d86e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d872:	e7f7      	b.n	800d864 <memmove+0x24>

0800d874 <strncmp>:
 800d874:	b510      	push	{r4, lr}
 800d876:	b16a      	cbz	r2, 800d894 <strncmp+0x20>
 800d878:	3901      	subs	r1, #1
 800d87a:	1884      	adds	r4, r0, r2
 800d87c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d880:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d884:	429a      	cmp	r2, r3
 800d886:	d103      	bne.n	800d890 <strncmp+0x1c>
 800d888:	42a0      	cmp	r0, r4
 800d88a:	d001      	beq.n	800d890 <strncmp+0x1c>
 800d88c:	2a00      	cmp	r2, #0
 800d88e:	d1f5      	bne.n	800d87c <strncmp+0x8>
 800d890:	1ad0      	subs	r0, r2, r3
 800d892:	bd10      	pop	{r4, pc}
 800d894:	4610      	mov	r0, r2
 800d896:	e7fc      	b.n	800d892 <strncmp+0x1e>

0800d898 <nan>:
 800d898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d8a0 <nan+0x8>
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	00000000 	.word	0x00000000
 800d8a4:	7ff80000 	.word	0x7ff80000

0800d8a8 <__assert_func>:
 800d8a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8aa:	4614      	mov	r4, r2
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	4b09      	ldr	r3, [pc, #36]	; (800d8d4 <__assert_func+0x2c>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	68d8      	ldr	r0, [r3, #12]
 800d8b6:	b14c      	cbz	r4, 800d8cc <__assert_func+0x24>
 800d8b8:	4b07      	ldr	r3, [pc, #28]	; (800d8d8 <__assert_func+0x30>)
 800d8ba:	9100      	str	r1, [sp, #0]
 800d8bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8c0:	4906      	ldr	r1, [pc, #24]	; (800d8dc <__assert_func+0x34>)
 800d8c2:	462b      	mov	r3, r5
 800d8c4:	f000 fbca 	bl	800e05c <fiprintf>
 800d8c8:	f000 fbda 	bl	800e080 <abort>
 800d8cc:	4b04      	ldr	r3, [pc, #16]	; (800d8e0 <__assert_func+0x38>)
 800d8ce:	461c      	mov	r4, r3
 800d8d0:	e7f3      	b.n	800d8ba <__assert_func+0x12>
 800d8d2:	bf00      	nop
 800d8d4:	20000064 	.word	0x20000064
 800d8d8:	08011bea 	.word	0x08011bea
 800d8dc:	08011bf7 	.word	0x08011bf7
 800d8e0:	08011c25 	.word	0x08011c25

0800d8e4 <_calloc_r>:
 800d8e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8e6:	fba1 2402 	umull	r2, r4, r1, r2
 800d8ea:	b94c      	cbnz	r4, 800d900 <_calloc_r+0x1c>
 800d8ec:	4611      	mov	r1, r2
 800d8ee:	9201      	str	r2, [sp, #4]
 800d8f0:	f7fc fa94 	bl	8009e1c <_malloc_r>
 800d8f4:	9a01      	ldr	r2, [sp, #4]
 800d8f6:	4605      	mov	r5, r0
 800d8f8:	b930      	cbnz	r0, 800d908 <_calloc_r+0x24>
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	b003      	add	sp, #12
 800d8fe:	bd30      	pop	{r4, r5, pc}
 800d900:	220c      	movs	r2, #12
 800d902:	6002      	str	r2, [r0, #0]
 800d904:	2500      	movs	r5, #0
 800d906:	e7f8      	b.n	800d8fa <_calloc_r+0x16>
 800d908:	4621      	mov	r1, r4
 800d90a:	f7fd fae2 	bl	800aed2 <memset>
 800d90e:	e7f4      	b.n	800d8fa <_calloc_r+0x16>

0800d910 <rshift>:
 800d910:	6903      	ldr	r3, [r0, #16]
 800d912:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d916:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d91a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d91e:	f100 0414 	add.w	r4, r0, #20
 800d922:	dd45      	ble.n	800d9b0 <rshift+0xa0>
 800d924:	f011 011f 	ands.w	r1, r1, #31
 800d928:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d92c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d930:	d10c      	bne.n	800d94c <rshift+0x3c>
 800d932:	f100 0710 	add.w	r7, r0, #16
 800d936:	4629      	mov	r1, r5
 800d938:	42b1      	cmp	r1, r6
 800d93a:	d334      	bcc.n	800d9a6 <rshift+0x96>
 800d93c:	1a9b      	subs	r3, r3, r2
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	1eea      	subs	r2, r5, #3
 800d942:	4296      	cmp	r6, r2
 800d944:	bf38      	it	cc
 800d946:	2300      	movcc	r3, #0
 800d948:	4423      	add	r3, r4
 800d94a:	e015      	b.n	800d978 <rshift+0x68>
 800d94c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d950:	f1c1 0820 	rsb	r8, r1, #32
 800d954:	40cf      	lsrs	r7, r1
 800d956:	f105 0e04 	add.w	lr, r5, #4
 800d95a:	46a1      	mov	r9, r4
 800d95c:	4576      	cmp	r6, lr
 800d95e:	46f4      	mov	ip, lr
 800d960:	d815      	bhi.n	800d98e <rshift+0x7e>
 800d962:	1a9a      	subs	r2, r3, r2
 800d964:	0092      	lsls	r2, r2, #2
 800d966:	3a04      	subs	r2, #4
 800d968:	3501      	adds	r5, #1
 800d96a:	42ae      	cmp	r6, r5
 800d96c:	bf38      	it	cc
 800d96e:	2200      	movcc	r2, #0
 800d970:	18a3      	adds	r3, r4, r2
 800d972:	50a7      	str	r7, [r4, r2]
 800d974:	b107      	cbz	r7, 800d978 <rshift+0x68>
 800d976:	3304      	adds	r3, #4
 800d978:	1b1a      	subs	r2, r3, r4
 800d97a:	42a3      	cmp	r3, r4
 800d97c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d980:	bf08      	it	eq
 800d982:	2300      	moveq	r3, #0
 800d984:	6102      	str	r2, [r0, #16]
 800d986:	bf08      	it	eq
 800d988:	6143      	streq	r3, [r0, #20]
 800d98a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d98e:	f8dc c000 	ldr.w	ip, [ip]
 800d992:	fa0c fc08 	lsl.w	ip, ip, r8
 800d996:	ea4c 0707 	orr.w	r7, ip, r7
 800d99a:	f849 7b04 	str.w	r7, [r9], #4
 800d99e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9a2:	40cf      	lsrs	r7, r1
 800d9a4:	e7da      	b.n	800d95c <rshift+0x4c>
 800d9a6:	f851 cb04 	ldr.w	ip, [r1], #4
 800d9aa:	f847 cf04 	str.w	ip, [r7, #4]!
 800d9ae:	e7c3      	b.n	800d938 <rshift+0x28>
 800d9b0:	4623      	mov	r3, r4
 800d9b2:	e7e1      	b.n	800d978 <rshift+0x68>

0800d9b4 <__hexdig_fun>:
 800d9b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d9b8:	2b09      	cmp	r3, #9
 800d9ba:	d802      	bhi.n	800d9c2 <__hexdig_fun+0xe>
 800d9bc:	3820      	subs	r0, #32
 800d9be:	b2c0      	uxtb	r0, r0
 800d9c0:	4770      	bx	lr
 800d9c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d9c6:	2b05      	cmp	r3, #5
 800d9c8:	d801      	bhi.n	800d9ce <__hexdig_fun+0x1a>
 800d9ca:	3847      	subs	r0, #71	; 0x47
 800d9cc:	e7f7      	b.n	800d9be <__hexdig_fun+0xa>
 800d9ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d9d2:	2b05      	cmp	r3, #5
 800d9d4:	d801      	bhi.n	800d9da <__hexdig_fun+0x26>
 800d9d6:	3827      	subs	r0, #39	; 0x27
 800d9d8:	e7f1      	b.n	800d9be <__hexdig_fun+0xa>
 800d9da:	2000      	movs	r0, #0
 800d9dc:	4770      	bx	lr
	...

0800d9e0 <__gethex>:
 800d9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e4:	4617      	mov	r7, r2
 800d9e6:	680a      	ldr	r2, [r1, #0]
 800d9e8:	b085      	sub	sp, #20
 800d9ea:	f102 0b02 	add.w	fp, r2, #2
 800d9ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d9f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d9f6:	4681      	mov	r9, r0
 800d9f8:	468a      	mov	sl, r1
 800d9fa:	9302      	str	r3, [sp, #8]
 800d9fc:	32fe      	adds	r2, #254	; 0xfe
 800d9fe:	eb02 030b 	add.w	r3, r2, fp
 800da02:	46d8      	mov	r8, fp
 800da04:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800da08:	9301      	str	r3, [sp, #4]
 800da0a:	2830      	cmp	r0, #48	; 0x30
 800da0c:	d0f7      	beq.n	800d9fe <__gethex+0x1e>
 800da0e:	f7ff ffd1 	bl	800d9b4 <__hexdig_fun>
 800da12:	4604      	mov	r4, r0
 800da14:	2800      	cmp	r0, #0
 800da16:	d138      	bne.n	800da8a <__gethex+0xaa>
 800da18:	49a7      	ldr	r1, [pc, #668]	; (800dcb8 <__gethex+0x2d8>)
 800da1a:	2201      	movs	r2, #1
 800da1c:	4640      	mov	r0, r8
 800da1e:	f7ff ff29 	bl	800d874 <strncmp>
 800da22:	4606      	mov	r6, r0
 800da24:	2800      	cmp	r0, #0
 800da26:	d169      	bne.n	800dafc <__gethex+0x11c>
 800da28:	f898 0001 	ldrb.w	r0, [r8, #1]
 800da2c:	465d      	mov	r5, fp
 800da2e:	f7ff ffc1 	bl	800d9b4 <__hexdig_fun>
 800da32:	2800      	cmp	r0, #0
 800da34:	d064      	beq.n	800db00 <__gethex+0x120>
 800da36:	465a      	mov	r2, fp
 800da38:	7810      	ldrb	r0, [r2, #0]
 800da3a:	2830      	cmp	r0, #48	; 0x30
 800da3c:	4690      	mov	r8, r2
 800da3e:	f102 0201 	add.w	r2, r2, #1
 800da42:	d0f9      	beq.n	800da38 <__gethex+0x58>
 800da44:	f7ff ffb6 	bl	800d9b4 <__hexdig_fun>
 800da48:	2301      	movs	r3, #1
 800da4a:	fab0 f480 	clz	r4, r0
 800da4e:	0964      	lsrs	r4, r4, #5
 800da50:	465e      	mov	r6, fp
 800da52:	9301      	str	r3, [sp, #4]
 800da54:	4642      	mov	r2, r8
 800da56:	4615      	mov	r5, r2
 800da58:	3201      	adds	r2, #1
 800da5a:	7828      	ldrb	r0, [r5, #0]
 800da5c:	f7ff ffaa 	bl	800d9b4 <__hexdig_fun>
 800da60:	2800      	cmp	r0, #0
 800da62:	d1f8      	bne.n	800da56 <__gethex+0x76>
 800da64:	4994      	ldr	r1, [pc, #592]	; (800dcb8 <__gethex+0x2d8>)
 800da66:	2201      	movs	r2, #1
 800da68:	4628      	mov	r0, r5
 800da6a:	f7ff ff03 	bl	800d874 <strncmp>
 800da6e:	b978      	cbnz	r0, 800da90 <__gethex+0xb0>
 800da70:	b946      	cbnz	r6, 800da84 <__gethex+0xa4>
 800da72:	1c6e      	adds	r6, r5, #1
 800da74:	4632      	mov	r2, r6
 800da76:	4615      	mov	r5, r2
 800da78:	3201      	adds	r2, #1
 800da7a:	7828      	ldrb	r0, [r5, #0]
 800da7c:	f7ff ff9a 	bl	800d9b4 <__hexdig_fun>
 800da80:	2800      	cmp	r0, #0
 800da82:	d1f8      	bne.n	800da76 <__gethex+0x96>
 800da84:	1b73      	subs	r3, r6, r5
 800da86:	009e      	lsls	r6, r3, #2
 800da88:	e004      	b.n	800da94 <__gethex+0xb4>
 800da8a:	2400      	movs	r4, #0
 800da8c:	4626      	mov	r6, r4
 800da8e:	e7e1      	b.n	800da54 <__gethex+0x74>
 800da90:	2e00      	cmp	r6, #0
 800da92:	d1f7      	bne.n	800da84 <__gethex+0xa4>
 800da94:	782b      	ldrb	r3, [r5, #0]
 800da96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800da9a:	2b50      	cmp	r3, #80	; 0x50
 800da9c:	d13d      	bne.n	800db1a <__gethex+0x13a>
 800da9e:	786b      	ldrb	r3, [r5, #1]
 800daa0:	2b2b      	cmp	r3, #43	; 0x2b
 800daa2:	d02f      	beq.n	800db04 <__gethex+0x124>
 800daa4:	2b2d      	cmp	r3, #45	; 0x2d
 800daa6:	d031      	beq.n	800db0c <__gethex+0x12c>
 800daa8:	1c69      	adds	r1, r5, #1
 800daaa:	f04f 0b00 	mov.w	fp, #0
 800daae:	7808      	ldrb	r0, [r1, #0]
 800dab0:	f7ff ff80 	bl	800d9b4 <__hexdig_fun>
 800dab4:	1e42      	subs	r2, r0, #1
 800dab6:	b2d2      	uxtb	r2, r2
 800dab8:	2a18      	cmp	r2, #24
 800daba:	d82e      	bhi.n	800db1a <__gethex+0x13a>
 800dabc:	f1a0 0210 	sub.w	r2, r0, #16
 800dac0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dac4:	f7ff ff76 	bl	800d9b4 <__hexdig_fun>
 800dac8:	f100 3cff 	add.w	ip, r0, #4294967295
 800dacc:	fa5f fc8c 	uxtb.w	ip, ip
 800dad0:	f1bc 0f18 	cmp.w	ip, #24
 800dad4:	d91d      	bls.n	800db12 <__gethex+0x132>
 800dad6:	f1bb 0f00 	cmp.w	fp, #0
 800dada:	d000      	beq.n	800dade <__gethex+0xfe>
 800dadc:	4252      	negs	r2, r2
 800dade:	4416      	add	r6, r2
 800dae0:	f8ca 1000 	str.w	r1, [sl]
 800dae4:	b1dc      	cbz	r4, 800db1e <__gethex+0x13e>
 800dae6:	9b01      	ldr	r3, [sp, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	bf14      	ite	ne
 800daec:	f04f 0800 	movne.w	r8, #0
 800daf0:	f04f 0806 	moveq.w	r8, #6
 800daf4:	4640      	mov	r0, r8
 800daf6:	b005      	add	sp, #20
 800daf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafc:	4645      	mov	r5, r8
 800dafe:	4626      	mov	r6, r4
 800db00:	2401      	movs	r4, #1
 800db02:	e7c7      	b.n	800da94 <__gethex+0xb4>
 800db04:	f04f 0b00 	mov.w	fp, #0
 800db08:	1ca9      	adds	r1, r5, #2
 800db0a:	e7d0      	b.n	800daae <__gethex+0xce>
 800db0c:	f04f 0b01 	mov.w	fp, #1
 800db10:	e7fa      	b.n	800db08 <__gethex+0x128>
 800db12:	230a      	movs	r3, #10
 800db14:	fb03 0002 	mla	r0, r3, r2, r0
 800db18:	e7d0      	b.n	800dabc <__gethex+0xdc>
 800db1a:	4629      	mov	r1, r5
 800db1c:	e7e0      	b.n	800dae0 <__gethex+0x100>
 800db1e:	eba5 0308 	sub.w	r3, r5, r8
 800db22:	3b01      	subs	r3, #1
 800db24:	4621      	mov	r1, r4
 800db26:	2b07      	cmp	r3, #7
 800db28:	dc0a      	bgt.n	800db40 <__gethex+0x160>
 800db2a:	4648      	mov	r0, r9
 800db2c:	f7fe f93e 	bl	800bdac <_Balloc>
 800db30:	4604      	mov	r4, r0
 800db32:	b940      	cbnz	r0, 800db46 <__gethex+0x166>
 800db34:	4b61      	ldr	r3, [pc, #388]	; (800dcbc <__gethex+0x2dc>)
 800db36:	4602      	mov	r2, r0
 800db38:	21e4      	movs	r1, #228	; 0xe4
 800db3a:	4861      	ldr	r0, [pc, #388]	; (800dcc0 <__gethex+0x2e0>)
 800db3c:	f7ff feb4 	bl	800d8a8 <__assert_func>
 800db40:	3101      	adds	r1, #1
 800db42:	105b      	asrs	r3, r3, #1
 800db44:	e7ef      	b.n	800db26 <__gethex+0x146>
 800db46:	f100 0a14 	add.w	sl, r0, #20
 800db4a:	2300      	movs	r3, #0
 800db4c:	495a      	ldr	r1, [pc, #360]	; (800dcb8 <__gethex+0x2d8>)
 800db4e:	f8cd a004 	str.w	sl, [sp, #4]
 800db52:	469b      	mov	fp, r3
 800db54:	45a8      	cmp	r8, r5
 800db56:	d342      	bcc.n	800dbde <__gethex+0x1fe>
 800db58:	9801      	ldr	r0, [sp, #4]
 800db5a:	f840 bb04 	str.w	fp, [r0], #4
 800db5e:	eba0 000a 	sub.w	r0, r0, sl
 800db62:	1080      	asrs	r0, r0, #2
 800db64:	6120      	str	r0, [r4, #16]
 800db66:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800db6a:	4658      	mov	r0, fp
 800db6c:	f7fe fa10 	bl	800bf90 <__hi0bits>
 800db70:	683d      	ldr	r5, [r7, #0]
 800db72:	eba8 0000 	sub.w	r0, r8, r0
 800db76:	42a8      	cmp	r0, r5
 800db78:	dd59      	ble.n	800dc2e <__gethex+0x24e>
 800db7a:	eba0 0805 	sub.w	r8, r0, r5
 800db7e:	4641      	mov	r1, r8
 800db80:	4620      	mov	r0, r4
 800db82:	f7fe fd9f 	bl	800c6c4 <__any_on>
 800db86:	4683      	mov	fp, r0
 800db88:	b1b8      	cbz	r0, 800dbba <__gethex+0x1da>
 800db8a:	f108 33ff 	add.w	r3, r8, #4294967295
 800db8e:	1159      	asrs	r1, r3, #5
 800db90:	f003 021f 	and.w	r2, r3, #31
 800db94:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800db98:	f04f 0b01 	mov.w	fp, #1
 800db9c:	fa0b f202 	lsl.w	r2, fp, r2
 800dba0:	420a      	tst	r2, r1
 800dba2:	d00a      	beq.n	800dbba <__gethex+0x1da>
 800dba4:	455b      	cmp	r3, fp
 800dba6:	dd06      	ble.n	800dbb6 <__gethex+0x1d6>
 800dba8:	f1a8 0102 	sub.w	r1, r8, #2
 800dbac:	4620      	mov	r0, r4
 800dbae:	f7fe fd89 	bl	800c6c4 <__any_on>
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d138      	bne.n	800dc28 <__gethex+0x248>
 800dbb6:	f04f 0b02 	mov.w	fp, #2
 800dbba:	4641      	mov	r1, r8
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f7ff fea7 	bl	800d910 <rshift>
 800dbc2:	4446      	add	r6, r8
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	42b3      	cmp	r3, r6
 800dbc8:	da41      	bge.n	800dc4e <__gethex+0x26e>
 800dbca:	4621      	mov	r1, r4
 800dbcc:	4648      	mov	r0, r9
 800dbce:	f7fe f92d 	bl	800be2c <_Bfree>
 800dbd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800dbdc:	e78a      	b.n	800daf4 <__gethex+0x114>
 800dbde:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800dbe2:	2a2e      	cmp	r2, #46	; 0x2e
 800dbe4:	d014      	beq.n	800dc10 <__gethex+0x230>
 800dbe6:	2b20      	cmp	r3, #32
 800dbe8:	d106      	bne.n	800dbf8 <__gethex+0x218>
 800dbea:	9b01      	ldr	r3, [sp, #4]
 800dbec:	f843 bb04 	str.w	fp, [r3], #4
 800dbf0:	f04f 0b00 	mov.w	fp, #0
 800dbf4:	9301      	str	r3, [sp, #4]
 800dbf6:	465b      	mov	r3, fp
 800dbf8:	7828      	ldrb	r0, [r5, #0]
 800dbfa:	9303      	str	r3, [sp, #12]
 800dbfc:	f7ff feda 	bl	800d9b4 <__hexdig_fun>
 800dc00:	9b03      	ldr	r3, [sp, #12]
 800dc02:	f000 000f 	and.w	r0, r0, #15
 800dc06:	4098      	lsls	r0, r3
 800dc08:	ea4b 0b00 	orr.w	fp, fp, r0
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	e7a1      	b.n	800db54 <__gethex+0x174>
 800dc10:	45a8      	cmp	r8, r5
 800dc12:	d8e8      	bhi.n	800dbe6 <__gethex+0x206>
 800dc14:	2201      	movs	r2, #1
 800dc16:	4628      	mov	r0, r5
 800dc18:	9303      	str	r3, [sp, #12]
 800dc1a:	f7ff fe2b 	bl	800d874 <strncmp>
 800dc1e:	4926      	ldr	r1, [pc, #152]	; (800dcb8 <__gethex+0x2d8>)
 800dc20:	9b03      	ldr	r3, [sp, #12]
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d1df      	bne.n	800dbe6 <__gethex+0x206>
 800dc26:	e795      	b.n	800db54 <__gethex+0x174>
 800dc28:	f04f 0b03 	mov.w	fp, #3
 800dc2c:	e7c5      	b.n	800dbba <__gethex+0x1da>
 800dc2e:	da0b      	bge.n	800dc48 <__gethex+0x268>
 800dc30:	eba5 0800 	sub.w	r8, r5, r0
 800dc34:	4621      	mov	r1, r4
 800dc36:	4642      	mov	r2, r8
 800dc38:	4648      	mov	r0, r9
 800dc3a:	f7fe fb11 	bl	800c260 <__lshift>
 800dc3e:	eba6 0608 	sub.w	r6, r6, r8
 800dc42:	4604      	mov	r4, r0
 800dc44:	f100 0a14 	add.w	sl, r0, #20
 800dc48:	f04f 0b00 	mov.w	fp, #0
 800dc4c:	e7ba      	b.n	800dbc4 <__gethex+0x1e4>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	42b3      	cmp	r3, r6
 800dc52:	dd73      	ble.n	800dd3c <__gethex+0x35c>
 800dc54:	1b9e      	subs	r6, r3, r6
 800dc56:	42b5      	cmp	r5, r6
 800dc58:	dc34      	bgt.n	800dcc4 <__gethex+0x2e4>
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	d023      	beq.n	800dca8 <__gethex+0x2c8>
 800dc60:	2b03      	cmp	r3, #3
 800dc62:	d025      	beq.n	800dcb0 <__gethex+0x2d0>
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d115      	bne.n	800dc94 <__gethex+0x2b4>
 800dc68:	42b5      	cmp	r5, r6
 800dc6a:	d113      	bne.n	800dc94 <__gethex+0x2b4>
 800dc6c:	2d01      	cmp	r5, #1
 800dc6e:	d10b      	bne.n	800dc88 <__gethex+0x2a8>
 800dc70:	9a02      	ldr	r2, [sp, #8]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6013      	str	r3, [r2, #0]
 800dc76:	2301      	movs	r3, #1
 800dc78:	6123      	str	r3, [r4, #16]
 800dc7a:	f8ca 3000 	str.w	r3, [sl]
 800dc7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc80:	f04f 0862 	mov.w	r8, #98	; 0x62
 800dc84:	601c      	str	r4, [r3, #0]
 800dc86:	e735      	b.n	800daf4 <__gethex+0x114>
 800dc88:	1e69      	subs	r1, r5, #1
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f7fe fd1a 	bl	800c6c4 <__any_on>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d1ed      	bne.n	800dc70 <__gethex+0x290>
 800dc94:	4621      	mov	r1, r4
 800dc96:	4648      	mov	r0, r9
 800dc98:	f7fe f8c8 	bl	800be2c <_Bfree>
 800dc9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc9e:	2300      	movs	r3, #0
 800dca0:	6013      	str	r3, [r2, #0]
 800dca2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800dca6:	e725      	b.n	800daf4 <__gethex+0x114>
 800dca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1f2      	bne.n	800dc94 <__gethex+0x2b4>
 800dcae:	e7df      	b.n	800dc70 <__gethex+0x290>
 800dcb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1dc      	bne.n	800dc70 <__gethex+0x290>
 800dcb6:	e7ed      	b.n	800dc94 <__gethex+0x2b4>
 800dcb8:	08011a7c 	.word	0x08011a7c
 800dcbc:	08011911 	.word	0x08011911
 800dcc0:	08011c26 	.word	0x08011c26
 800dcc4:	f106 38ff 	add.w	r8, r6, #4294967295
 800dcc8:	f1bb 0f00 	cmp.w	fp, #0
 800dccc:	d133      	bne.n	800dd36 <__gethex+0x356>
 800dcce:	f1b8 0f00 	cmp.w	r8, #0
 800dcd2:	d004      	beq.n	800dcde <__gethex+0x2fe>
 800dcd4:	4641      	mov	r1, r8
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f7fe fcf4 	bl	800c6c4 <__any_on>
 800dcdc:	4683      	mov	fp, r0
 800dcde:	ea4f 1268 	mov.w	r2, r8, asr #5
 800dce2:	2301      	movs	r3, #1
 800dce4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dce8:	f008 081f 	and.w	r8, r8, #31
 800dcec:	fa03 f308 	lsl.w	r3, r3, r8
 800dcf0:	4213      	tst	r3, r2
 800dcf2:	4631      	mov	r1, r6
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	bf18      	it	ne
 800dcf8:	f04b 0b02 	orrne.w	fp, fp, #2
 800dcfc:	1bad      	subs	r5, r5, r6
 800dcfe:	f7ff fe07 	bl	800d910 <rshift>
 800dd02:	687e      	ldr	r6, [r7, #4]
 800dd04:	f04f 0802 	mov.w	r8, #2
 800dd08:	f1bb 0f00 	cmp.w	fp, #0
 800dd0c:	d04a      	beq.n	800dda4 <__gethex+0x3c4>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b02      	cmp	r3, #2
 800dd12:	d016      	beq.n	800dd42 <__gethex+0x362>
 800dd14:	2b03      	cmp	r3, #3
 800dd16:	d018      	beq.n	800dd4a <__gethex+0x36a>
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d109      	bne.n	800dd30 <__gethex+0x350>
 800dd1c:	f01b 0f02 	tst.w	fp, #2
 800dd20:	d006      	beq.n	800dd30 <__gethex+0x350>
 800dd22:	f8da 3000 	ldr.w	r3, [sl]
 800dd26:	ea4b 0b03 	orr.w	fp, fp, r3
 800dd2a:	f01b 0f01 	tst.w	fp, #1
 800dd2e:	d10f      	bne.n	800dd50 <__gethex+0x370>
 800dd30:	f048 0810 	orr.w	r8, r8, #16
 800dd34:	e036      	b.n	800dda4 <__gethex+0x3c4>
 800dd36:	f04f 0b01 	mov.w	fp, #1
 800dd3a:	e7d0      	b.n	800dcde <__gethex+0x2fe>
 800dd3c:	f04f 0801 	mov.w	r8, #1
 800dd40:	e7e2      	b.n	800dd08 <__gethex+0x328>
 800dd42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd44:	f1c3 0301 	rsb	r3, r3, #1
 800dd48:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0ef      	beq.n	800dd30 <__gethex+0x350>
 800dd50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dd54:	f104 0214 	add.w	r2, r4, #20
 800dd58:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800dd5c:	9301      	str	r3, [sp, #4]
 800dd5e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800dd62:	2300      	movs	r3, #0
 800dd64:	4694      	mov	ip, r2
 800dd66:	f852 1b04 	ldr.w	r1, [r2], #4
 800dd6a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800dd6e:	d01e      	beq.n	800ddae <__gethex+0x3ce>
 800dd70:	3101      	adds	r1, #1
 800dd72:	f8cc 1000 	str.w	r1, [ip]
 800dd76:	f1b8 0f02 	cmp.w	r8, #2
 800dd7a:	f104 0214 	add.w	r2, r4, #20
 800dd7e:	d13d      	bne.n	800ddfc <__gethex+0x41c>
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	42ab      	cmp	r3, r5
 800dd86:	d10b      	bne.n	800dda0 <__gethex+0x3c0>
 800dd88:	1169      	asrs	r1, r5, #5
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	f005 051f 	and.w	r5, r5, #31
 800dd90:	fa03 f505 	lsl.w	r5, r3, r5
 800dd94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd98:	421d      	tst	r5, r3
 800dd9a:	bf18      	it	ne
 800dd9c:	f04f 0801 	movne.w	r8, #1
 800dda0:	f048 0820 	orr.w	r8, r8, #32
 800dda4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dda6:	601c      	str	r4, [r3, #0]
 800dda8:	9b02      	ldr	r3, [sp, #8]
 800ddaa:	601e      	str	r6, [r3, #0]
 800ddac:	e6a2      	b.n	800daf4 <__gethex+0x114>
 800ddae:	4290      	cmp	r0, r2
 800ddb0:	f842 3c04 	str.w	r3, [r2, #-4]
 800ddb4:	d8d6      	bhi.n	800dd64 <__gethex+0x384>
 800ddb6:	68a2      	ldr	r2, [r4, #8]
 800ddb8:	4593      	cmp	fp, r2
 800ddba:	db17      	blt.n	800ddec <__gethex+0x40c>
 800ddbc:	6861      	ldr	r1, [r4, #4]
 800ddbe:	4648      	mov	r0, r9
 800ddc0:	3101      	adds	r1, #1
 800ddc2:	f7fd fff3 	bl	800bdac <_Balloc>
 800ddc6:	4682      	mov	sl, r0
 800ddc8:	b918      	cbnz	r0, 800ddd2 <__gethex+0x3f2>
 800ddca:	4b1b      	ldr	r3, [pc, #108]	; (800de38 <__gethex+0x458>)
 800ddcc:	4602      	mov	r2, r0
 800ddce:	2184      	movs	r1, #132	; 0x84
 800ddd0:	e6b3      	b.n	800db3a <__gethex+0x15a>
 800ddd2:	6922      	ldr	r2, [r4, #16]
 800ddd4:	3202      	adds	r2, #2
 800ddd6:	f104 010c 	add.w	r1, r4, #12
 800ddda:	0092      	lsls	r2, r2, #2
 800dddc:	300c      	adds	r0, #12
 800ddde:	f7fd f908 	bl	800aff2 <memcpy>
 800dde2:	4621      	mov	r1, r4
 800dde4:	4648      	mov	r0, r9
 800dde6:	f7fe f821 	bl	800be2c <_Bfree>
 800ddea:	4654      	mov	r4, sl
 800ddec:	6922      	ldr	r2, [r4, #16]
 800ddee:	1c51      	adds	r1, r2, #1
 800ddf0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ddf4:	6121      	str	r1, [r4, #16]
 800ddf6:	2101      	movs	r1, #1
 800ddf8:	6151      	str	r1, [r2, #20]
 800ddfa:	e7bc      	b.n	800dd76 <__gethex+0x396>
 800ddfc:	6921      	ldr	r1, [r4, #16]
 800ddfe:	4559      	cmp	r1, fp
 800de00:	dd0b      	ble.n	800de1a <__gethex+0x43a>
 800de02:	2101      	movs	r1, #1
 800de04:	4620      	mov	r0, r4
 800de06:	f7ff fd83 	bl	800d910 <rshift>
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	3601      	adds	r6, #1
 800de0e:	42b3      	cmp	r3, r6
 800de10:	f6ff aedb 	blt.w	800dbca <__gethex+0x1ea>
 800de14:	f04f 0801 	mov.w	r8, #1
 800de18:	e7c2      	b.n	800dda0 <__gethex+0x3c0>
 800de1a:	f015 051f 	ands.w	r5, r5, #31
 800de1e:	d0f9      	beq.n	800de14 <__gethex+0x434>
 800de20:	9b01      	ldr	r3, [sp, #4]
 800de22:	441a      	add	r2, r3
 800de24:	f1c5 0520 	rsb	r5, r5, #32
 800de28:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800de2c:	f7fe f8b0 	bl	800bf90 <__hi0bits>
 800de30:	42a8      	cmp	r0, r5
 800de32:	dbe6      	blt.n	800de02 <__gethex+0x422>
 800de34:	e7ee      	b.n	800de14 <__gethex+0x434>
 800de36:	bf00      	nop
 800de38:	08011911 	.word	0x08011911

0800de3c <L_shift>:
 800de3c:	f1c2 0208 	rsb	r2, r2, #8
 800de40:	0092      	lsls	r2, r2, #2
 800de42:	b570      	push	{r4, r5, r6, lr}
 800de44:	f1c2 0620 	rsb	r6, r2, #32
 800de48:	6843      	ldr	r3, [r0, #4]
 800de4a:	6804      	ldr	r4, [r0, #0]
 800de4c:	fa03 f506 	lsl.w	r5, r3, r6
 800de50:	432c      	orrs	r4, r5
 800de52:	40d3      	lsrs	r3, r2
 800de54:	6004      	str	r4, [r0, #0]
 800de56:	f840 3f04 	str.w	r3, [r0, #4]!
 800de5a:	4288      	cmp	r0, r1
 800de5c:	d3f4      	bcc.n	800de48 <L_shift+0xc>
 800de5e:	bd70      	pop	{r4, r5, r6, pc}

0800de60 <__match>:
 800de60:	b530      	push	{r4, r5, lr}
 800de62:	6803      	ldr	r3, [r0, #0]
 800de64:	3301      	adds	r3, #1
 800de66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de6a:	b914      	cbnz	r4, 800de72 <__match+0x12>
 800de6c:	6003      	str	r3, [r0, #0]
 800de6e:	2001      	movs	r0, #1
 800de70:	bd30      	pop	{r4, r5, pc}
 800de72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800de7a:	2d19      	cmp	r5, #25
 800de7c:	bf98      	it	ls
 800de7e:	3220      	addls	r2, #32
 800de80:	42a2      	cmp	r2, r4
 800de82:	d0f0      	beq.n	800de66 <__match+0x6>
 800de84:	2000      	movs	r0, #0
 800de86:	e7f3      	b.n	800de70 <__match+0x10>

0800de88 <__hexnan>:
 800de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8c:	680b      	ldr	r3, [r1, #0]
 800de8e:	6801      	ldr	r1, [r0, #0]
 800de90:	115e      	asrs	r6, r3, #5
 800de92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800de96:	f013 031f 	ands.w	r3, r3, #31
 800de9a:	b087      	sub	sp, #28
 800de9c:	bf18      	it	ne
 800de9e:	3604      	addne	r6, #4
 800dea0:	2500      	movs	r5, #0
 800dea2:	1f37      	subs	r7, r6, #4
 800dea4:	4682      	mov	sl, r0
 800dea6:	4690      	mov	r8, r2
 800dea8:	9301      	str	r3, [sp, #4]
 800deaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800deae:	46b9      	mov	r9, r7
 800deb0:	463c      	mov	r4, r7
 800deb2:	9502      	str	r5, [sp, #8]
 800deb4:	46ab      	mov	fp, r5
 800deb6:	784a      	ldrb	r2, [r1, #1]
 800deb8:	1c4b      	adds	r3, r1, #1
 800deba:	9303      	str	r3, [sp, #12]
 800debc:	b342      	cbz	r2, 800df10 <__hexnan+0x88>
 800debe:	4610      	mov	r0, r2
 800dec0:	9105      	str	r1, [sp, #20]
 800dec2:	9204      	str	r2, [sp, #16]
 800dec4:	f7ff fd76 	bl	800d9b4 <__hexdig_fun>
 800dec8:	2800      	cmp	r0, #0
 800deca:	d14f      	bne.n	800df6c <__hexnan+0xe4>
 800decc:	9a04      	ldr	r2, [sp, #16]
 800dece:	9905      	ldr	r1, [sp, #20]
 800ded0:	2a20      	cmp	r2, #32
 800ded2:	d818      	bhi.n	800df06 <__hexnan+0x7e>
 800ded4:	9b02      	ldr	r3, [sp, #8]
 800ded6:	459b      	cmp	fp, r3
 800ded8:	dd13      	ble.n	800df02 <__hexnan+0x7a>
 800deda:	454c      	cmp	r4, r9
 800dedc:	d206      	bcs.n	800deec <__hexnan+0x64>
 800dede:	2d07      	cmp	r5, #7
 800dee0:	dc04      	bgt.n	800deec <__hexnan+0x64>
 800dee2:	462a      	mov	r2, r5
 800dee4:	4649      	mov	r1, r9
 800dee6:	4620      	mov	r0, r4
 800dee8:	f7ff ffa8 	bl	800de3c <L_shift>
 800deec:	4544      	cmp	r4, r8
 800deee:	d950      	bls.n	800df92 <__hexnan+0x10a>
 800def0:	2300      	movs	r3, #0
 800def2:	f1a4 0904 	sub.w	r9, r4, #4
 800def6:	f844 3c04 	str.w	r3, [r4, #-4]
 800defa:	f8cd b008 	str.w	fp, [sp, #8]
 800defe:	464c      	mov	r4, r9
 800df00:	461d      	mov	r5, r3
 800df02:	9903      	ldr	r1, [sp, #12]
 800df04:	e7d7      	b.n	800deb6 <__hexnan+0x2e>
 800df06:	2a29      	cmp	r2, #41	; 0x29
 800df08:	d155      	bne.n	800dfb6 <__hexnan+0x12e>
 800df0a:	3102      	adds	r1, #2
 800df0c:	f8ca 1000 	str.w	r1, [sl]
 800df10:	f1bb 0f00 	cmp.w	fp, #0
 800df14:	d04f      	beq.n	800dfb6 <__hexnan+0x12e>
 800df16:	454c      	cmp	r4, r9
 800df18:	d206      	bcs.n	800df28 <__hexnan+0xa0>
 800df1a:	2d07      	cmp	r5, #7
 800df1c:	dc04      	bgt.n	800df28 <__hexnan+0xa0>
 800df1e:	462a      	mov	r2, r5
 800df20:	4649      	mov	r1, r9
 800df22:	4620      	mov	r0, r4
 800df24:	f7ff ff8a 	bl	800de3c <L_shift>
 800df28:	4544      	cmp	r4, r8
 800df2a:	d934      	bls.n	800df96 <__hexnan+0x10e>
 800df2c:	f1a8 0204 	sub.w	r2, r8, #4
 800df30:	4623      	mov	r3, r4
 800df32:	f853 1b04 	ldr.w	r1, [r3], #4
 800df36:	f842 1f04 	str.w	r1, [r2, #4]!
 800df3a:	429f      	cmp	r7, r3
 800df3c:	d2f9      	bcs.n	800df32 <__hexnan+0xaa>
 800df3e:	1b3b      	subs	r3, r7, r4
 800df40:	f023 0303 	bic.w	r3, r3, #3
 800df44:	3304      	adds	r3, #4
 800df46:	3e03      	subs	r6, #3
 800df48:	3401      	adds	r4, #1
 800df4a:	42a6      	cmp	r6, r4
 800df4c:	bf38      	it	cc
 800df4e:	2304      	movcc	r3, #4
 800df50:	4443      	add	r3, r8
 800df52:	2200      	movs	r2, #0
 800df54:	f843 2b04 	str.w	r2, [r3], #4
 800df58:	429f      	cmp	r7, r3
 800df5a:	d2fb      	bcs.n	800df54 <__hexnan+0xcc>
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	b91b      	cbnz	r3, 800df68 <__hexnan+0xe0>
 800df60:	4547      	cmp	r7, r8
 800df62:	d126      	bne.n	800dfb2 <__hexnan+0x12a>
 800df64:	2301      	movs	r3, #1
 800df66:	603b      	str	r3, [r7, #0]
 800df68:	2005      	movs	r0, #5
 800df6a:	e025      	b.n	800dfb8 <__hexnan+0x130>
 800df6c:	3501      	adds	r5, #1
 800df6e:	2d08      	cmp	r5, #8
 800df70:	f10b 0b01 	add.w	fp, fp, #1
 800df74:	dd06      	ble.n	800df84 <__hexnan+0xfc>
 800df76:	4544      	cmp	r4, r8
 800df78:	d9c3      	bls.n	800df02 <__hexnan+0x7a>
 800df7a:	2300      	movs	r3, #0
 800df7c:	f844 3c04 	str.w	r3, [r4, #-4]
 800df80:	2501      	movs	r5, #1
 800df82:	3c04      	subs	r4, #4
 800df84:	6822      	ldr	r2, [r4, #0]
 800df86:	f000 000f 	and.w	r0, r0, #15
 800df8a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df8e:	6020      	str	r0, [r4, #0]
 800df90:	e7b7      	b.n	800df02 <__hexnan+0x7a>
 800df92:	2508      	movs	r5, #8
 800df94:	e7b5      	b.n	800df02 <__hexnan+0x7a>
 800df96:	9b01      	ldr	r3, [sp, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d0df      	beq.n	800df5c <__hexnan+0xd4>
 800df9c:	f1c3 0320 	rsb	r3, r3, #32
 800dfa0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa4:	40da      	lsrs	r2, r3
 800dfa6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dfaa:	4013      	ands	r3, r2
 800dfac:	f846 3c04 	str.w	r3, [r6, #-4]
 800dfb0:	e7d4      	b.n	800df5c <__hexnan+0xd4>
 800dfb2:	3f04      	subs	r7, #4
 800dfb4:	e7d2      	b.n	800df5c <__hexnan+0xd4>
 800dfb6:	2004      	movs	r0, #4
 800dfb8:	b007      	add	sp, #28
 800dfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfbe <__ascii_mbtowc>:
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	b901      	cbnz	r1, 800dfc4 <__ascii_mbtowc+0x6>
 800dfc2:	a901      	add	r1, sp, #4
 800dfc4:	b142      	cbz	r2, 800dfd8 <__ascii_mbtowc+0x1a>
 800dfc6:	b14b      	cbz	r3, 800dfdc <__ascii_mbtowc+0x1e>
 800dfc8:	7813      	ldrb	r3, [r2, #0]
 800dfca:	600b      	str	r3, [r1, #0]
 800dfcc:	7812      	ldrb	r2, [r2, #0]
 800dfce:	1e10      	subs	r0, r2, #0
 800dfd0:	bf18      	it	ne
 800dfd2:	2001      	movne	r0, #1
 800dfd4:	b002      	add	sp, #8
 800dfd6:	4770      	bx	lr
 800dfd8:	4610      	mov	r0, r2
 800dfda:	e7fb      	b.n	800dfd4 <__ascii_mbtowc+0x16>
 800dfdc:	f06f 0001 	mvn.w	r0, #1
 800dfe0:	e7f8      	b.n	800dfd4 <__ascii_mbtowc+0x16>

0800dfe2 <_realloc_r>:
 800dfe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe6:	4680      	mov	r8, r0
 800dfe8:	4614      	mov	r4, r2
 800dfea:	460e      	mov	r6, r1
 800dfec:	b921      	cbnz	r1, 800dff8 <_realloc_r+0x16>
 800dfee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dff2:	4611      	mov	r1, r2
 800dff4:	f7fb bf12 	b.w	8009e1c <_malloc_r>
 800dff8:	b92a      	cbnz	r2, 800e006 <_realloc_r+0x24>
 800dffa:	f7fd fe8b 	bl	800bd14 <_free_r>
 800dffe:	4625      	mov	r5, r4
 800e000:	4628      	mov	r0, r5
 800e002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e006:	f000 f842 	bl	800e08e <_malloc_usable_size_r>
 800e00a:	4284      	cmp	r4, r0
 800e00c:	4607      	mov	r7, r0
 800e00e:	d802      	bhi.n	800e016 <_realloc_r+0x34>
 800e010:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e014:	d812      	bhi.n	800e03c <_realloc_r+0x5a>
 800e016:	4621      	mov	r1, r4
 800e018:	4640      	mov	r0, r8
 800e01a:	f7fb feff 	bl	8009e1c <_malloc_r>
 800e01e:	4605      	mov	r5, r0
 800e020:	2800      	cmp	r0, #0
 800e022:	d0ed      	beq.n	800e000 <_realloc_r+0x1e>
 800e024:	42bc      	cmp	r4, r7
 800e026:	4622      	mov	r2, r4
 800e028:	4631      	mov	r1, r6
 800e02a:	bf28      	it	cs
 800e02c:	463a      	movcs	r2, r7
 800e02e:	f7fc ffe0 	bl	800aff2 <memcpy>
 800e032:	4631      	mov	r1, r6
 800e034:	4640      	mov	r0, r8
 800e036:	f7fd fe6d 	bl	800bd14 <_free_r>
 800e03a:	e7e1      	b.n	800e000 <_realloc_r+0x1e>
 800e03c:	4635      	mov	r5, r6
 800e03e:	e7df      	b.n	800e000 <_realloc_r+0x1e>

0800e040 <__ascii_wctomb>:
 800e040:	b149      	cbz	r1, 800e056 <__ascii_wctomb+0x16>
 800e042:	2aff      	cmp	r2, #255	; 0xff
 800e044:	bf85      	ittet	hi
 800e046:	238a      	movhi	r3, #138	; 0x8a
 800e048:	6003      	strhi	r3, [r0, #0]
 800e04a:	700a      	strbls	r2, [r1, #0]
 800e04c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e050:	bf98      	it	ls
 800e052:	2001      	movls	r0, #1
 800e054:	4770      	bx	lr
 800e056:	4608      	mov	r0, r1
 800e058:	4770      	bx	lr
	...

0800e05c <fiprintf>:
 800e05c:	b40e      	push	{r1, r2, r3}
 800e05e:	b503      	push	{r0, r1, lr}
 800e060:	4601      	mov	r1, r0
 800e062:	ab03      	add	r3, sp, #12
 800e064:	4805      	ldr	r0, [pc, #20]	; (800e07c <fiprintf+0x20>)
 800e066:	f853 2b04 	ldr.w	r2, [r3], #4
 800e06a:	6800      	ldr	r0, [r0, #0]
 800e06c:	9301      	str	r3, [sp, #4]
 800e06e:	f000 f83f 	bl	800e0f0 <_vfiprintf_r>
 800e072:	b002      	add	sp, #8
 800e074:	f85d eb04 	ldr.w	lr, [sp], #4
 800e078:	b003      	add	sp, #12
 800e07a:	4770      	bx	lr
 800e07c:	20000064 	.word	0x20000064

0800e080 <abort>:
 800e080:	b508      	push	{r3, lr}
 800e082:	2006      	movs	r0, #6
 800e084:	f000 fa0c 	bl	800e4a0 <raise>
 800e088:	2001      	movs	r0, #1
 800e08a:	f7f6 fb0d 	bl	80046a8 <_exit>

0800e08e <_malloc_usable_size_r>:
 800e08e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e092:	1f18      	subs	r0, r3, #4
 800e094:	2b00      	cmp	r3, #0
 800e096:	bfbc      	itt	lt
 800e098:	580b      	ldrlt	r3, [r1, r0]
 800e09a:	18c0      	addlt	r0, r0, r3
 800e09c:	4770      	bx	lr

0800e09e <__sfputc_r>:
 800e09e:	6893      	ldr	r3, [r2, #8]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	b410      	push	{r4}
 800e0a6:	6093      	str	r3, [r2, #8]
 800e0a8:	da08      	bge.n	800e0bc <__sfputc_r+0x1e>
 800e0aa:	6994      	ldr	r4, [r2, #24]
 800e0ac:	42a3      	cmp	r3, r4
 800e0ae:	db01      	blt.n	800e0b4 <__sfputc_r+0x16>
 800e0b0:	290a      	cmp	r1, #10
 800e0b2:	d103      	bne.n	800e0bc <__sfputc_r+0x1e>
 800e0b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0b8:	f000 b934 	b.w	800e324 <__swbuf_r>
 800e0bc:	6813      	ldr	r3, [r2, #0]
 800e0be:	1c58      	adds	r0, r3, #1
 800e0c0:	6010      	str	r0, [r2, #0]
 800e0c2:	7019      	strb	r1, [r3, #0]
 800e0c4:	4608      	mov	r0, r1
 800e0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <__sfputs_r>:
 800e0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	460f      	mov	r7, r1
 800e0d2:	4614      	mov	r4, r2
 800e0d4:	18d5      	adds	r5, r2, r3
 800e0d6:	42ac      	cmp	r4, r5
 800e0d8:	d101      	bne.n	800e0de <__sfputs_r+0x12>
 800e0da:	2000      	movs	r0, #0
 800e0dc:	e007      	b.n	800e0ee <__sfputs_r+0x22>
 800e0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0e2:	463a      	mov	r2, r7
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	f7ff ffda 	bl	800e09e <__sfputc_r>
 800e0ea:	1c43      	adds	r3, r0, #1
 800e0ec:	d1f3      	bne.n	800e0d6 <__sfputs_r+0xa>
 800e0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e0f0 <_vfiprintf_r>:
 800e0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f4:	460d      	mov	r5, r1
 800e0f6:	b09d      	sub	sp, #116	; 0x74
 800e0f8:	4614      	mov	r4, r2
 800e0fa:	4698      	mov	r8, r3
 800e0fc:	4606      	mov	r6, r0
 800e0fe:	b118      	cbz	r0, 800e108 <_vfiprintf_r+0x18>
 800e100:	6a03      	ldr	r3, [r0, #32]
 800e102:	b90b      	cbnz	r3, 800e108 <_vfiprintf_r+0x18>
 800e104:	f7fc fe18 	bl	800ad38 <__sinit>
 800e108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e10a:	07d9      	lsls	r1, r3, #31
 800e10c:	d405      	bmi.n	800e11a <_vfiprintf_r+0x2a>
 800e10e:	89ab      	ldrh	r3, [r5, #12]
 800e110:	059a      	lsls	r2, r3, #22
 800e112:	d402      	bmi.n	800e11a <_vfiprintf_r+0x2a>
 800e114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e116:	f7fc ff6a 	bl	800afee <__retarget_lock_acquire_recursive>
 800e11a:	89ab      	ldrh	r3, [r5, #12]
 800e11c:	071b      	lsls	r3, r3, #28
 800e11e:	d501      	bpl.n	800e124 <_vfiprintf_r+0x34>
 800e120:	692b      	ldr	r3, [r5, #16]
 800e122:	b99b      	cbnz	r3, 800e14c <_vfiprintf_r+0x5c>
 800e124:	4629      	mov	r1, r5
 800e126:	4630      	mov	r0, r6
 800e128:	f000 f93a 	bl	800e3a0 <__swsetup_r>
 800e12c:	b170      	cbz	r0, 800e14c <_vfiprintf_r+0x5c>
 800e12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e130:	07dc      	lsls	r4, r3, #31
 800e132:	d504      	bpl.n	800e13e <_vfiprintf_r+0x4e>
 800e134:	f04f 30ff 	mov.w	r0, #4294967295
 800e138:	b01d      	add	sp, #116	; 0x74
 800e13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e13e:	89ab      	ldrh	r3, [r5, #12]
 800e140:	0598      	lsls	r0, r3, #22
 800e142:	d4f7      	bmi.n	800e134 <_vfiprintf_r+0x44>
 800e144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e146:	f7fc ff53 	bl	800aff0 <__retarget_lock_release_recursive>
 800e14a:	e7f3      	b.n	800e134 <_vfiprintf_r+0x44>
 800e14c:	2300      	movs	r3, #0
 800e14e:	9309      	str	r3, [sp, #36]	; 0x24
 800e150:	2320      	movs	r3, #32
 800e152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e156:	f8cd 800c 	str.w	r8, [sp, #12]
 800e15a:	2330      	movs	r3, #48	; 0x30
 800e15c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e310 <_vfiprintf_r+0x220>
 800e160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e164:	f04f 0901 	mov.w	r9, #1
 800e168:	4623      	mov	r3, r4
 800e16a:	469a      	mov	sl, r3
 800e16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e170:	b10a      	cbz	r2, 800e176 <_vfiprintf_r+0x86>
 800e172:	2a25      	cmp	r2, #37	; 0x25
 800e174:	d1f9      	bne.n	800e16a <_vfiprintf_r+0x7a>
 800e176:	ebba 0b04 	subs.w	fp, sl, r4
 800e17a:	d00b      	beq.n	800e194 <_vfiprintf_r+0xa4>
 800e17c:	465b      	mov	r3, fp
 800e17e:	4622      	mov	r2, r4
 800e180:	4629      	mov	r1, r5
 800e182:	4630      	mov	r0, r6
 800e184:	f7ff ffa2 	bl	800e0cc <__sfputs_r>
 800e188:	3001      	adds	r0, #1
 800e18a:	f000 80a9 	beq.w	800e2e0 <_vfiprintf_r+0x1f0>
 800e18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e190:	445a      	add	r2, fp
 800e192:	9209      	str	r2, [sp, #36]	; 0x24
 800e194:	f89a 3000 	ldrb.w	r3, [sl]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f000 80a1 	beq.w	800e2e0 <_vfiprintf_r+0x1f0>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1a8:	f10a 0a01 	add.w	sl, sl, #1
 800e1ac:	9304      	str	r3, [sp, #16]
 800e1ae:	9307      	str	r3, [sp, #28]
 800e1b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1b4:	931a      	str	r3, [sp, #104]	; 0x68
 800e1b6:	4654      	mov	r4, sl
 800e1b8:	2205      	movs	r2, #5
 800e1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1be:	4854      	ldr	r0, [pc, #336]	; (800e310 <_vfiprintf_r+0x220>)
 800e1c0:	f7f2 f806 	bl	80001d0 <memchr>
 800e1c4:	9a04      	ldr	r2, [sp, #16]
 800e1c6:	b9d8      	cbnz	r0, 800e200 <_vfiprintf_r+0x110>
 800e1c8:	06d1      	lsls	r1, r2, #27
 800e1ca:	bf44      	itt	mi
 800e1cc:	2320      	movmi	r3, #32
 800e1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1d2:	0713      	lsls	r3, r2, #28
 800e1d4:	bf44      	itt	mi
 800e1d6:	232b      	movmi	r3, #43	; 0x2b
 800e1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800e1e2:	d015      	beq.n	800e210 <_vfiprintf_r+0x120>
 800e1e4:	9a07      	ldr	r2, [sp, #28]
 800e1e6:	4654      	mov	r4, sl
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	f04f 0c0a 	mov.w	ip, #10
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1f4:	3b30      	subs	r3, #48	; 0x30
 800e1f6:	2b09      	cmp	r3, #9
 800e1f8:	d94d      	bls.n	800e296 <_vfiprintf_r+0x1a6>
 800e1fa:	b1b0      	cbz	r0, 800e22a <_vfiprintf_r+0x13a>
 800e1fc:	9207      	str	r2, [sp, #28]
 800e1fe:	e014      	b.n	800e22a <_vfiprintf_r+0x13a>
 800e200:	eba0 0308 	sub.w	r3, r0, r8
 800e204:	fa09 f303 	lsl.w	r3, r9, r3
 800e208:	4313      	orrs	r3, r2
 800e20a:	9304      	str	r3, [sp, #16]
 800e20c:	46a2      	mov	sl, r4
 800e20e:	e7d2      	b.n	800e1b6 <_vfiprintf_r+0xc6>
 800e210:	9b03      	ldr	r3, [sp, #12]
 800e212:	1d19      	adds	r1, r3, #4
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	9103      	str	r1, [sp, #12]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	bfbb      	ittet	lt
 800e21c:	425b      	neglt	r3, r3
 800e21e:	f042 0202 	orrlt.w	r2, r2, #2
 800e222:	9307      	strge	r3, [sp, #28]
 800e224:	9307      	strlt	r3, [sp, #28]
 800e226:	bfb8      	it	lt
 800e228:	9204      	strlt	r2, [sp, #16]
 800e22a:	7823      	ldrb	r3, [r4, #0]
 800e22c:	2b2e      	cmp	r3, #46	; 0x2e
 800e22e:	d10c      	bne.n	800e24a <_vfiprintf_r+0x15a>
 800e230:	7863      	ldrb	r3, [r4, #1]
 800e232:	2b2a      	cmp	r3, #42	; 0x2a
 800e234:	d134      	bne.n	800e2a0 <_vfiprintf_r+0x1b0>
 800e236:	9b03      	ldr	r3, [sp, #12]
 800e238:	1d1a      	adds	r2, r3, #4
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	9203      	str	r2, [sp, #12]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	bfb8      	it	lt
 800e242:	f04f 33ff 	movlt.w	r3, #4294967295
 800e246:	3402      	adds	r4, #2
 800e248:	9305      	str	r3, [sp, #20]
 800e24a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e320 <_vfiprintf_r+0x230>
 800e24e:	7821      	ldrb	r1, [r4, #0]
 800e250:	2203      	movs	r2, #3
 800e252:	4650      	mov	r0, sl
 800e254:	f7f1 ffbc 	bl	80001d0 <memchr>
 800e258:	b138      	cbz	r0, 800e26a <_vfiprintf_r+0x17a>
 800e25a:	9b04      	ldr	r3, [sp, #16]
 800e25c:	eba0 000a 	sub.w	r0, r0, sl
 800e260:	2240      	movs	r2, #64	; 0x40
 800e262:	4082      	lsls	r2, r0
 800e264:	4313      	orrs	r3, r2
 800e266:	3401      	adds	r4, #1
 800e268:	9304      	str	r3, [sp, #16]
 800e26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e26e:	4829      	ldr	r0, [pc, #164]	; (800e314 <_vfiprintf_r+0x224>)
 800e270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e274:	2206      	movs	r2, #6
 800e276:	f7f1 ffab 	bl	80001d0 <memchr>
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d03f      	beq.n	800e2fe <_vfiprintf_r+0x20e>
 800e27e:	4b26      	ldr	r3, [pc, #152]	; (800e318 <_vfiprintf_r+0x228>)
 800e280:	bb1b      	cbnz	r3, 800e2ca <_vfiprintf_r+0x1da>
 800e282:	9b03      	ldr	r3, [sp, #12]
 800e284:	3307      	adds	r3, #7
 800e286:	f023 0307 	bic.w	r3, r3, #7
 800e28a:	3308      	adds	r3, #8
 800e28c:	9303      	str	r3, [sp, #12]
 800e28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e290:	443b      	add	r3, r7
 800e292:	9309      	str	r3, [sp, #36]	; 0x24
 800e294:	e768      	b.n	800e168 <_vfiprintf_r+0x78>
 800e296:	fb0c 3202 	mla	r2, ip, r2, r3
 800e29a:	460c      	mov	r4, r1
 800e29c:	2001      	movs	r0, #1
 800e29e:	e7a6      	b.n	800e1ee <_vfiprintf_r+0xfe>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	3401      	adds	r4, #1
 800e2a4:	9305      	str	r3, [sp, #20]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	f04f 0c0a 	mov.w	ip, #10
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2b2:	3a30      	subs	r2, #48	; 0x30
 800e2b4:	2a09      	cmp	r2, #9
 800e2b6:	d903      	bls.n	800e2c0 <_vfiprintf_r+0x1d0>
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d0c6      	beq.n	800e24a <_vfiprintf_r+0x15a>
 800e2bc:	9105      	str	r1, [sp, #20]
 800e2be:	e7c4      	b.n	800e24a <_vfiprintf_r+0x15a>
 800e2c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e7f0      	b.n	800e2ac <_vfiprintf_r+0x1bc>
 800e2ca:	ab03      	add	r3, sp, #12
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	462a      	mov	r2, r5
 800e2d0:	4b12      	ldr	r3, [pc, #72]	; (800e31c <_vfiprintf_r+0x22c>)
 800e2d2:	a904      	add	r1, sp, #16
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	f7fb fecd 	bl	800a074 <_printf_float>
 800e2da:	4607      	mov	r7, r0
 800e2dc:	1c78      	adds	r0, r7, #1
 800e2de:	d1d6      	bne.n	800e28e <_vfiprintf_r+0x19e>
 800e2e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2e2:	07d9      	lsls	r1, r3, #31
 800e2e4:	d405      	bmi.n	800e2f2 <_vfiprintf_r+0x202>
 800e2e6:	89ab      	ldrh	r3, [r5, #12]
 800e2e8:	059a      	lsls	r2, r3, #22
 800e2ea:	d402      	bmi.n	800e2f2 <_vfiprintf_r+0x202>
 800e2ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2ee:	f7fc fe7f 	bl	800aff0 <__retarget_lock_release_recursive>
 800e2f2:	89ab      	ldrh	r3, [r5, #12]
 800e2f4:	065b      	lsls	r3, r3, #25
 800e2f6:	f53f af1d 	bmi.w	800e134 <_vfiprintf_r+0x44>
 800e2fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2fc:	e71c      	b.n	800e138 <_vfiprintf_r+0x48>
 800e2fe:	ab03      	add	r3, sp, #12
 800e300:	9300      	str	r3, [sp, #0]
 800e302:	462a      	mov	r2, r5
 800e304:	4b05      	ldr	r3, [pc, #20]	; (800e31c <_vfiprintf_r+0x22c>)
 800e306:	a904      	add	r1, sp, #16
 800e308:	4630      	mov	r0, r6
 800e30a:	f7fc f957 	bl	800a5bc <_printf_i>
 800e30e:	e7e4      	b.n	800e2da <_vfiprintf_r+0x1ea>
 800e310:	08011bd1 	.word	0x08011bd1
 800e314:	08011bdb 	.word	0x08011bdb
 800e318:	0800a075 	.word	0x0800a075
 800e31c:	0800e0cd 	.word	0x0800e0cd
 800e320:	08011bd7 	.word	0x08011bd7

0800e324 <__swbuf_r>:
 800e324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e326:	460e      	mov	r6, r1
 800e328:	4614      	mov	r4, r2
 800e32a:	4605      	mov	r5, r0
 800e32c:	b118      	cbz	r0, 800e336 <__swbuf_r+0x12>
 800e32e:	6a03      	ldr	r3, [r0, #32]
 800e330:	b90b      	cbnz	r3, 800e336 <__swbuf_r+0x12>
 800e332:	f7fc fd01 	bl	800ad38 <__sinit>
 800e336:	69a3      	ldr	r3, [r4, #24]
 800e338:	60a3      	str	r3, [r4, #8]
 800e33a:	89a3      	ldrh	r3, [r4, #12]
 800e33c:	071a      	lsls	r2, r3, #28
 800e33e:	d525      	bpl.n	800e38c <__swbuf_r+0x68>
 800e340:	6923      	ldr	r3, [r4, #16]
 800e342:	b31b      	cbz	r3, 800e38c <__swbuf_r+0x68>
 800e344:	6823      	ldr	r3, [r4, #0]
 800e346:	6922      	ldr	r2, [r4, #16]
 800e348:	1a98      	subs	r0, r3, r2
 800e34a:	6963      	ldr	r3, [r4, #20]
 800e34c:	b2f6      	uxtb	r6, r6
 800e34e:	4283      	cmp	r3, r0
 800e350:	4637      	mov	r7, r6
 800e352:	dc04      	bgt.n	800e35e <__swbuf_r+0x3a>
 800e354:	4621      	mov	r1, r4
 800e356:	4628      	mov	r0, r5
 800e358:	f7ff fa4a 	bl	800d7f0 <_fflush_r>
 800e35c:	b9e0      	cbnz	r0, 800e398 <__swbuf_r+0x74>
 800e35e:	68a3      	ldr	r3, [r4, #8]
 800e360:	3b01      	subs	r3, #1
 800e362:	60a3      	str	r3, [r4, #8]
 800e364:	6823      	ldr	r3, [r4, #0]
 800e366:	1c5a      	adds	r2, r3, #1
 800e368:	6022      	str	r2, [r4, #0]
 800e36a:	701e      	strb	r6, [r3, #0]
 800e36c:	6962      	ldr	r2, [r4, #20]
 800e36e:	1c43      	adds	r3, r0, #1
 800e370:	429a      	cmp	r2, r3
 800e372:	d004      	beq.n	800e37e <__swbuf_r+0x5a>
 800e374:	89a3      	ldrh	r3, [r4, #12]
 800e376:	07db      	lsls	r3, r3, #31
 800e378:	d506      	bpl.n	800e388 <__swbuf_r+0x64>
 800e37a:	2e0a      	cmp	r6, #10
 800e37c:	d104      	bne.n	800e388 <__swbuf_r+0x64>
 800e37e:	4621      	mov	r1, r4
 800e380:	4628      	mov	r0, r5
 800e382:	f7ff fa35 	bl	800d7f0 <_fflush_r>
 800e386:	b938      	cbnz	r0, 800e398 <__swbuf_r+0x74>
 800e388:	4638      	mov	r0, r7
 800e38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e38c:	4621      	mov	r1, r4
 800e38e:	4628      	mov	r0, r5
 800e390:	f000 f806 	bl	800e3a0 <__swsetup_r>
 800e394:	2800      	cmp	r0, #0
 800e396:	d0d5      	beq.n	800e344 <__swbuf_r+0x20>
 800e398:	f04f 37ff 	mov.w	r7, #4294967295
 800e39c:	e7f4      	b.n	800e388 <__swbuf_r+0x64>
	...

0800e3a0 <__swsetup_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	4b2a      	ldr	r3, [pc, #168]	; (800e44c <__swsetup_r+0xac>)
 800e3a4:	4605      	mov	r5, r0
 800e3a6:	6818      	ldr	r0, [r3, #0]
 800e3a8:	460c      	mov	r4, r1
 800e3aa:	b118      	cbz	r0, 800e3b4 <__swsetup_r+0x14>
 800e3ac:	6a03      	ldr	r3, [r0, #32]
 800e3ae:	b90b      	cbnz	r3, 800e3b4 <__swsetup_r+0x14>
 800e3b0:	f7fc fcc2 	bl	800ad38 <__sinit>
 800e3b4:	89a3      	ldrh	r3, [r4, #12]
 800e3b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3ba:	0718      	lsls	r0, r3, #28
 800e3bc:	d422      	bmi.n	800e404 <__swsetup_r+0x64>
 800e3be:	06d9      	lsls	r1, r3, #27
 800e3c0:	d407      	bmi.n	800e3d2 <__swsetup_r+0x32>
 800e3c2:	2309      	movs	r3, #9
 800e3c4:	602b      	str	r3, [r5, #0]
 800e3c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3ca:	81a3      	strh	r3, [r4, #12]
 800e3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d0:	e034      	b.n	800e43c <__swsetup_r+0x9c>
 800e3d2:	0758      	lsls	r0, r3, #29
 800e3d4:	d512      	bpl.n	800e3fc <__swsetup_r+0x5c>
 800e3d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3d8:	b141      	cbz	r1, 800e3ec <__swsetup_r+0x4c>
 800e3da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3de:	4299      	cmp	r1, r3
 800e3e0:	d002      	beq.n	800e3e8 <__swsetup_r+0x48>
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	f7fd fc96 	bl	800bd14 <_free_r>
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	6363      	str	r3, [r4, #52]	; 0x34
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3f2:	81a3      	strh	r3, [r4, #12]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	6063      	str	r3, [r4, #4]
 800e3f8:	6923      	ldr	r3, [r4, #16]
 800e3fa:	6023      	str	r3, [r4, #0]
 800e3fc:	89a3      	ldrh	r3, [r4, #12]
 800e3fe:	f043 0308 	orr.w	r3, r3, #8
 800e402:	81a3      	strh	r3, [r4, #12]
 800e404:	6923      	ldr	r3, [r4, #16]
 800e406:	b94b      	cbnz	r3, 800e41c <__swsetup_r+0x7c>
 800e408:	89a3      	ldrh	r3, [r4, #12]
 800e40a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e40e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e412:	d003      	beq.n	800e41c <__swsetup_r+0x7c>
 800e414:	4621      	mov	r1, r4
 800e416:	4628      	mov	r0, r5
 800e418:	f000 f884 	bl	800e524 <__smakebuf_r>
 800e41c:	89a0      	ldrh	r0, [r4, #12]
 800e41e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e422:	f010 0301 	ands.w	r3, r0, #1
 800e426:	d00a      	beq.n	800e43e <__swsetup_r+0x9e>
 800e428:	2300      	movs	r3, #0
 800e42a:	60a3      	str	r3, [r4, #8]
 800e42c:	6963      	ldr	r3, [r4, #20]
 800e42e:	425b      	negs	r3, r3
 800e430:	61a3      	str	r3, [r4, #24]
 800e432:	6923      	ldr	r3, [r4, #16]
 800e434:	b943      	cbnz	r3, 800e448 <__swsetup_r+0xa8>
 800e436:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e43a:	d1c4      	bne.n	800e3c6 <__swsetup_r+0x26>
 800e43c:	bd38      	pop	{r3, r4, r5, pc}
 800e43e:	0781      	lsls	r1, r0, #30
 800e440:	bf58      	it	pl
 800e442:	6963      	ldrpl	r3, [r4, #20]
 800e444:	60a3      	str	r3, [r4, #8]
 800e446:	e7f4      	b.n	800e432 <__swsetup_r+0x92>
 800e448:	2000      	movs	r0, #0
 800e44a:	e7f7      	b.n	800e43c <__swsetup_r+0x9c>
 800e44c:	20000064 	.word	0x20000064

0800e450 <_raise_r>:
 800e450:	291f      	cmp	r1, #31
 800e452:	b538      	push	{r3, r4, r5, lr}
 800e454:	4604      	mov	r4, r0
 800e456:	460d      	mov	r5, r1
 800e458:	d904      	bls.n	800e464 <_raise_r+0x14>
 800e45a:	2316      	movs	r3, #22
 800e45c:	6003      	str	r3, [r0, #0]
 800e45e:	f04f 30ff 	mov.w	r0, #4294967295
 800e462:	bd38      	pop	{r3, r4, r5, pc}
 800e464:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e466:	b112      	cbz	r2, 800e46e <_raise_r+0x1e>
 800e468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e46c:	b94b      	cbnz	r3, 800e482 <_raise_r+0x32>
 800e46e:	4620      	mov	r0, r4
 800e470:	f000 f830 	bl	800e4d4 <_getpid_r>
 800e474:	462a      	mov	r2, r5
 800e476:	4601      	mov	r1, r0
 800e478:	4620      	mov	r0, r4
 800e47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e47e:	f000 b817 	b.w	800e4b0 <_kill_r>
 800e482:	2b01      	cmp	r3, #1
 800e484:	d00a      	beq.n	800e49c <_raise_r+0x4c>
 800e486:	1c59      	adds	r1, r3, #1
 800e488:	d103      	bne.n	800e492 <_raise_r+0x42>
 800e48a:	2316      	movs	r3, #22
 800e48c:	6003      	str	r3, [r0, #0]
 800e48e:	2001      	movs	r0, #1
 800e490:	e7e7      	b.n	800e462 <_raise_r+0x12>
 800e492:	2400      	movs	r4, #0
 800e494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e498:	4628      	mov	r0, r5
 800e49a:	4798      	blx	r3
 800e49c:	2000      	movs	r0, #0
 800e49e:	e7e0      	b.n	800e462 <_raise_r+0x12>

0800e4a0 <raise>:
 800e4a0:	4b02      	ldr	r3, [pc, #8]	; (800e4ac <raise+0xc>)
 800e4a2:	4601      	mov	r1, r0
 800e4a4:	6818      	ldr	r0, [r3, #0]
 800e4a6:	f7ff bfd3 	b.w	800e450 <_raise_r>
 800e4aa:	bf00      	nop
 800e4ac:	20000064 	.word	0x20000064

0800e4b0 <_kill_r>:
 800e4b0:	b538      	push	{r3, r4, r5, lr}
 800e4b2:	4d07      	ldr	r5, [pc, #28]	; (800e4d0 <_kill_r+0x20>)
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	4604      	mov	r4, r0
 800e4b8:	4608      	mov	r0, r1
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	602b      	str	r3, [r5, #0]
 800e4be:	f7f6 f8e3 	bl	8004688 <_kill>
 800e4c2:	1c43      	adds	r3, r0, #1
 800e4c4:	d102      	bne.n	800e4cc <_kill_r+0x1c>
 800e4c6:	682b      	ldr	r3, [r5, #0]
 800e4c8:	b103      	cbz	r3, 800e4cc <_kill_r+0x1c>
 800e4ca:	6023      	str	r3, [r4, #0]
 800e4cc:	bd38      	pop	{r3, r4, r5, pc}
 800e4ce:	bf00      	nop
 800e4d0:	20000b1c 	.word	0x20000b1c

0800e4d4 <_getpid_r>:
 800e4d4:	f7f6 b8d0 	b.w	8004678 <_getpid>

0800e4d8 <__swhatbuf_r>:
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	460c      	mov	r4, r1
 800e4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4e0:	2900      	cmp	r1, #0
 800e4e2:	b096      	sub	sp, #88	; 0x58
 800e4e4:	4615      	mov	r5, r2
 800e4e6:	461e      	mov	r6, r3
 800e4e8:	da0d      	bge.n	800e506 <__swhatbuf_r+0x2e>
 800e4ea:	89a3      	ldrh	r3, [r4, #12]
 800e4ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e4f0:	f04f 0100 	mov.w	r1, #0
 800e4f4:	bf0c      	ite	eq
 800e4f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e4fa:	2340      	movne	r3, #64	; 0x40
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	6031      	str	r1, [r6, #0]
 800e500:	602b      	str	r3, [r5, #0]
 800e502:	b016      	add	sp, #88	; 0x58
 800e504:	bd70      	pop	{r4, r5, r6, pc}
 800e506:	466a      	mov	r2, sp
 800e508:	f000 f848 	bl	800e59c <_fstat_r>
 800e50c:	2800      	cmp	r0, #0
 800e50e:	dbec      	blt.n	800e4ea <__swhatbuf_r+0x12>
 800e510:	9901      	ldr	r1, [sp, #4]
 800e512:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e516:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e51a:	4259      	negs	r1, r3
 800e51c:	4159      	adcs	r1, r3
 800e51e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e522:	e7eb      	b.n	800e4fc <__swhatbuf_r+0x24>

0800e524 <__smakebuf_r>:
 800e524:	898b      	ldrh	r3, [r1, #12]
 800e526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e528:	079d      	lsls	r5, r3, #30
 800e52a:	4606      	mov	r6, r0
 800e52c:	460c      	mov	r4, r1
 800e52e:	d507      	bpl.n	800e540 <__smakebuf_r+0x1c>
 800e530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e534:	6023      	str	r3, [r4, #0]
 800e536:	6123      	str	r3, [r4, #16]
 800e538:	2301      	movs	r3, #1
 800e53a:	6163      	str	r3, [r4, #20]
 800e53c:	b002      	add	sp, #8
 800e53e:	bd70      	pop	{r4, r5, r6, pc}
 800e540:	ab01      	add	r3, sp, #4
 800e542:	466a      	mov	r2, sp
 800e544:	f7ff ffc8 	bl	800e4d8 <__swhatbuf_r>
 800e548:	9900      	ldr	r1, [sp, #0]
 800e54a:	4605      	mov	r5, r0
 800e54c:	4630      	mov	r0, r6
 800e54e:	f7fb fc65 	bl	8009e1c <_malloc_r>
 800e552:	b948      	cbnz	r0, 800e568 <__smakebuf_r+0x44>
 800e554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e558:	059a      	lsls	r2, r3, #22
 800e55a:	d4ef      	bmi.n	800e53c <__smakebuf_r+0x18>
 800e55c:	f023 0303 	bic.w	r3, r3, #3
 800e560:	f043 0302 	orr.w	r3, r3, #2
 800e564:	81a3      	strh	r3, [r4, #12]
 800e566:	e7e3      	b.n	800e530 <__smakebuf_r+0xc>
 800e568:	89a3      	ldrh	r3, [r4, #12]
 800e56a:	6020      	str	r0, [r4, #0]
 800e56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e570:	81a3      	strh	r3, [r4, #12]
 800e572:	9b00      	ldr	r3, [sp, #0]
 800e574:	6163      	str	r3, [r4, #20]
 800e576:	9b01      	ldr	r3, [sp, #4]
 800e578:	6120      	str	r0, [r4, #16]
 800e57a:	b15b      	cbz	r3, 800e594 <__smakebuf_r+0x70>
 800e57c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e580:	4630      	mov	r0, r6
 800e582:	f000 f81d 	bl	800e5c0 <_isatty_r>
 800e586:	b128      	cbz	r0, 800e594 <__smakebuf_r+0x70>
 800e588:	89a3      	ldrh	r3, [r4, #12]
 800e58a:	f023 0303 	bic.w	r3, r3, #3
 800e58e:	f043 0301 	orr.w	r3, r3, #1
 800e592:	81a3      	strh	r3, [r4, #12]
 800e594:	89a3      	ldrh	r3, [r4, #12]
 800e596:	431d      	orrs	r5, r3
 800e598:	81a5      	strh	r5, [r4, #12]
 800e59a:	e7cf      	b.n	800e53c <__smakebuf_r+0x18>

0800e59c <_fstat_r>:
 800e59c:	b538      	push	{r3, r4, r5, lr}
 800e59e:	4d07      	ldr	r5, [pc, #28]	; (800e5bc <_fstat_r+0x20>)
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	4608      	mov	r0, r1
 800e5a6:	4611      	mov	r1, r2
 800e5a8:	602b      	str	r3, [r5, #0]
 800e5aa:	f7f6 f8cc 	bl	8004746 <_fstat>
 800e5ae:	1c43      	adds	r3, r0, #1
 800e5b0:	d102      	bne.n	800e5b8 <_fstat_r+0x1c>
 800e5b2:	682b      	ldr	r3, [r5, #0]
 800e5b4:	b103      	cbz	r3, 800e5b8 <_fstat_r+0x1c>
 800e5b6:	6023      	str	r3, [r4, #0]
 800e5b8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ba:	bf00      	nop
 800e5bc:	20000b1c 	.word	0x20000b1c

0800e5c0 <_isatty_r>:
 800e5c0:	b538      	push	{r3, r4, r5, lr}
 800e5c2:	4d06      	ldr	r5, [pc, #24]	; (800e5dc <_isatty_r+0x1c>)
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	4608      	mov	r0, r1
 800e5ca:	602b      	str	r3, [r5, #0]
 800e5cc:	f7f6 f8cb 	bl	8004766 <_isatty>
 800e5d0:	1c43      	adds	r3, r0, #1
 800e5d2:	d102      	bne.n	800e5da <_isatty_r+0x1a>
 800e5d4:	682b      	ldr	r3, [r5, #0]
 800e5d6:	b103      	cbz	r3, 800e5da <_isatty_r+0x1a>
 800e5d8:	6023      	str	r3, [r4, #0]
 800e5da:	bd38      	pop	{r3, r4, r5, pc}
 800e5dc:	20000b1c 	.word	0x20000b1c

0800e5e0 <atan2>:
 800e5e0:	f000 bda6 	b.w	800f130 <__ieee754_atan2>

0800e5e4 <pow>:
 800e5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e6:	ed2d 8b02 	vpush	{d8}
 800e5ea:	eeb0 8a40 	vmov.f32	s16, s0
 800e5ee:	eef0 8a60 	vmov.f32	s17, s1
 800e5f2:	ec55 4b11 	vmov	r4, r5, d1
 800e5f6:	f000 fe63 	bl	800f2c0 <__ieee754_pow>
 800e5fa:	4622      	mov	r2, r4
 800e5fc:	462b      	mov	r3, r5
 800e5fe:	4620      	mov	r0, r4
 800e600:	4629      	mov	r1, r5
 800e602:	ec57 6b10 	vmov	r6, r7, d0
 800e606:	f7f2 fa91 	bl	8000b2c <__aeabi_dcmpun>
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d13b      	bne.n	800e686 <pow+0xa2>
 800e60e:	ec51 0b18 	vmov	r0, r1, d8
 800e612:	2200      	movs	r2, #0
 800e614:	2300      	movs	r3, #0
 800e616:	f7f2 fa57 	bl	8000ac8 <__aeabi_dcmpeq>
 800e61a:	b1b8      	cbz	r0, 800e64c <pow+0x68>
 800e61c:	2200      	movs	r2, #0
 800e61e:	2300      	movs	r3, #0
 800e620:	4620      	mov	r0, r4
 800e622:	4629      	mov	r1, r5
 800e624:	f7f2 fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 800e628:	2800      	cmp	r0, #0
 800e62a:	d146      	bne.n	800e6ba <pow+0xd6>
 800e62c:	ec45 4b10 	vmov	d0, r4, r5
 800e630:	f000 f902 	bl	800e838 <finite>
 800e634:	b338      	cbz	r0, 800e686 <pow+0xa2>
 800e636:	2200      	movs	r2, #0
 800e638:	2300      	movs	r3, #0
 800e63a:	4620      	mov	r0, r4
 800e63c:	4629      	mov	r1, r5
 800e63e:	f7f2 fa4d 	bl	8000adc <__aeabi_dcmplt>
 800e642:	b300      	cbz	r0, 800e686 <pow+0xa2>
 800e644:	f7fc fca8 	bl	800af98 <__errno>
 800e648:	2322      	movs	r3, #34	; 0x22
 800e64a:	e01b      	b.n	800e684 <pow+0xa0>
 800e64c:	ec47 6b10 	vmov	d0, r6, r7
 800e650:	f000 f8f2 	bl	800e838 <finite>
 800e654:	b9e0      	cbnz	r0, 800e690 <pow+0xac>
 800e656:	eeb0 0a48 	vmov.f32	s0, s16
 800e65a:	eef0 0a68 	vmov.f32	s1, s17
 800e65e:	f000 f8eb 	bl	800e838 <finite>
 800e662:	b1a8      	cbz	r0, 800e690 <pow+0xac>
 800e664:	ec45 4b10 	vmov	d0, r4, r5
 800e668:	f000 f8e6 	bl	800e838 <finite>
 800e66c:	b180      	cbz	r0, 800e690 <pow+0xac>
 800e66e:	4632      	mov	r2, r6
 800e670:	463b      	mov	r3, r7
 800e672:	4630      	mov	r0, r6
 800e674:	4639      	mov	r1, r7
 800e676:	f7f2 fa59 	bl	8000b2c <__aeabi_dcmpun>
 800e67a:	2800      	cmp	r0, #0
 800e67c:	d0e2      	beq.n	800e644 <pow+0x60>
 800e67e:	f7fc fc8b 	bl	800af98 <__errno>
 800e682:	2321      	movs	r3, #33	; 0x21
 800e684:	6003      	str	r3, [r0, #0]
 800e686:	ecbd 8b02 	vpop	{d8}
 800e68a:	ec47 6b10 	vmov	d0, r6, r7
 800e68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e690:	2200      	movs	r2, #0
 800e692:	2300      	movs	r3, #0
 800e694:	4630      	mov	r0, r6
 800e696:	4639      	mov	r1, r7
 800e698:	f7f2 fa16 	bl	8000ac8 <__aeabi_dcmpeq>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	d0f2      	beq.n	800e686 <pow+0xa2>
 800e6a0:	eeb0 0a48 	vmov.f32	s0, s16
 800e6a4:	eef0 0a68 	vmov.f32	s1, s17
 800e6a8:	f000 f8c6 	bl	800e838 <finite>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d0ea      	beq.n	800e686 <pow+0xa2>
 800e6b0:	ec45 4b10 	vmov	d0, r4, r5
 800e6b4:	f000 f8c0 	bl	800e838 <finite>
 800e6b8:	e7c3      	b.n	800e642 <pow+0x5e>
 800e6ba:	4f01      	ldr	r7, [pc, #4]	; (800e6c0 <pow+0xdc>)
 800e6bc:	2600      	movs	r6, #0
 800e6be:	e7e2      	b.n	800e686 <pow+0xa2>
 800e6c0:	3ff00000 	.word	0x3ff00000

0800e6c4 <sqrt>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	ed2d 8b02 	vpush	{d8}
 800e6ca:	ec55 4b10 	vmov	r4, r5, d0
 800e6ce:	f000 f8bf 	bl	800e850 <__ieee754_sqrt>
 800e6d2:	4622      	mov	r2, r4
 800e6d4:	462b      	mov	r3, r5
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	4629      	mov	r1, r5
 800e6da:	eeb0 8a40 	vmov.f32	s16, s0
 800e6de:	eef0 8a60 	vmov.f32	s17, s1
 800e6e2:	f7f2 fa23 	bl	8000b2c <__aeabi_dcmpun>
 800e6e6:	b990      	cbnz	r0, 800e70e <sqrt+0x4a>
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	f7f2 f9f4 	bl	8000adc <__aeabi_dcmplt>
 800e6f4:	b158      	cbz	r0, 800e70e <sqrt+0x4a>
 800e6f6:	f7fc fc4f 	bl	800af98 <__errno>
 800e6fa:	2321      	movs	r3, #33	; 0x21
 800e6fc:	6003      	str	r3, [r0, #0]
 800e6fe:	2200      	movs	r2, #0
 800e700:	2300      	movs	r3, #0
 800e702:	4610      	mov	r0, r2
 800e704:	4619      	mov	r1, r3
 800e706:	f7f2 f8a1 	bl	800084c <__aeabi_ddiv>
 800e70a:	ec41 0b18 	vmov	d8, r0, r1
 800e70e:	eeb0 0a48 	vmov.f32	s0, s16
 800e712:	eef0 0a68 	vmov.f32	s1, s17
 800e716:	ecbd 8b02 	vpop	{d8}
 800e71a:	bd38      	pop	{r3, r4, r5, pc}
 800e71c:	0000      	movs	r0, r0
	...

0800e720 <sin>:
 800e720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e722:	ec53 2b10 	vmov	r2, r3, d0
 800e726:	4828      	ldr	r0, [pc, #160]	; (800e7c8 <sin+0xa8>)
 800e728:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e72c:	4281      	cmp	r1, r0
 800e72e:	dc07      	bgt.n	800e740 <sin+0x20>
 800e730:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e7c0 <sin+0xa0>
 800e734:	2000      	movs	r0, #0
 800e736:	b005      	add	sp, #20
 800e738:	f85d eb04 	ldr.w	lr, [sp], #4
 800e73c:	f000 ba2c 	b.w	800eb98 <__kernel_sin>
 800e740:	4822      	ldr	r0, [pc, #136]	; (800e7cc <sin+0xac>)
 800e742:	4281      	cmp	r1, r0
 800e744:	dd09      	ble.n	800e75a <sin+0x3a>
 800e746:	ee10 0a10 	vmov	r0, s0
 800e74a:	4619      	mov	r1, r3
 800e74c:	f7f1 fd9c 	bl	8000288 <__aeabi_dsub>
 800e750:	ec41 0b10 	vmov	d0, r0, r1
 800e754:	b005      	add	sp, #20
 800e756:	f85d fb04 	ldr.w	pc, [sp], #4
 800e75a:	4668      	mov	r0, sp
 800e75c:	f001 fadc 	bl	800fd18 <__ieee754_rem_pio2>
 800e760:	f000 0003 	and.w	r0, r0, #3
 800e764:	2801      	cmp	r0, #1
 800e766:	d00c      	beq.n	800e782 <sin+0x62>
 800e768:	2802      	cmp	r0, #2
 800e76a:	d011      	beq.n	800e790 <sin+0x70>
 800e76c:	b9f0      	cbnz	r0, 800e7ac <sin+0x8c>
 800e76e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e772:	ed9d 0b00 	vldr	d0, [sp]
 800e776:	2001      	movs	r0, #1
 800e778:	f000 fa0e 	bl	800eb98 <__kernel_sin>
 800e77c:	ec51 0b10 	vmov	r0, r1, d0
 800e780:	e7e6      	b.n	800e750 <sin+0x30>
 800e782:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e786:	ed9d 0b00 	vldr	d0, [sp]
 800e78a:	f000 f93d 	bl	800ea08 <__kernel_cos>
 800e78e:	e7f5      	b.n	800e77c <sin+0x5c>
 800e790:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e794:	ed9d 0b00 	vldr	d0, [sp]
 800e798:	2001      	movs	r0, #1
 800e79a:	f000 f9fd 	bl	800eb98 <__kernel_sin>
 800e79e:	ec53 2b10 	vmov	r2, r3, d0
 800e7a2:	ee10 0a10 	vmov	r0, s0
 800e7a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e7aa:	e7d1      	b.n	800e750 <sin+0x30>
 800e7ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e7b0:	ed9d 0b00 	vldr	d0, [sp]
 800e7b4:	f000 f928 	bl	800ea08 <__kernel_cos>
 800e7b8:	e7f1      	b.n	800e79e <sin+0x7e>
 800e7ba:	bf00      	nop
 800e7bc:	f3af 8000 	nop.w
	...
 800e7c8:	3fe921fb 	.word	0x3fe921fb
 800e7cc:	7fefffff 	.word	0x7fefffff

0800e7d0 <tan>:
 800e7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7d2:	ec53 2b10 	vmov	r2, r3, d0
 800e7d6:	4816      	ldr	r0, [pc, #88]	; (800e830 <tan+0x60>)
 800e7d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e7dc:	4281      	cmp	r1, r0
 800e7de:	dc07      	bgt.n	800e7f0 <tan+0x20>
 800e7e0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800e828 <tan+0x58>
 800e7e4:	2001      	movs	r0, #1
 800e7e6:	b005      	add	sp, #20
 800e7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7ec:	f000 ba94 	b.w	800ed18 <__kernel_tan>
 800e7f0:	4810      	ldr	r0, [pc, #64]	; (800e834 <tan+0x64>)
 800e7f2:	4281      	cmp	r1, r0
 800e7f4:	dd09      	ble.n	800e80a <tan+0x3a>
 800e7f6:	ee10 0a10 	vmov	r0, s0
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	f7f1 fd44 	bl	8000288 <__aeabi_dsub>
 800e800:	ec41 0b10 	vmov	d0, r0, r1
 800e804:	b005      	add	sp, #20
 800e806:	f85d fb04 	ldr.w	pc, [sp], #4
 800e80a:	4668      	mov	r0, sp
 800e80c:	f001 fa84 	bl	800fd18 <__ieee754_rem_pio2>
 800e810:	0040      	lsls	r0, r0, #1
 800e812:	f000 0002 	and.w	r0, r0, #2
 800e816:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e81a:	ed9d 0b00 	vldr	d0, [sp]
 800e81e:	f1c0 0001 	rsb	r0, r0, #1
 800e822:	f000 fa79 	bl	800ed18 <__kernel_tan>
 800e826:	e7ed      	b.n	800e804 <tan+0x34>
	...
 800e830:	3fe921fb 	.word	0x3fe921fb
 800e834:	7fefffff 	.word	0x7fefffff

0800e838 <finite>:
 800e838:	b082      	sub	sp, #8
 800e83a:	ed8d 0b00 	vstr	d0, [sp]
 800e83e:	9801      	ldr	r0, [sp, #4]
 800e840:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e844:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e848:	0fc0      	lsrs	r0, r0, #31
 800e84a:	b002      	add	sp, #8
 800e84c:	4770      	bx	lr
	...

0800e850 <__ieee754_sqrt>:
 800e850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e854:	ec55 4b10 	vmov	r4, r5, d0
 800e858:	4e67      	ldr	r6, [pc, #412]	; (800e9f8 <__ieee754_sqrt+0x1a8>)
 800e85a:	43ae      	bics	r6, r5
 800e85c:	ee10 0a10 	vmov	r0, s0
 800e860:	ee10 2a10 	vmov	r2, s0
 800e864:	4629      	mov	r1, r5
 800e866:	462b      	mov	r3, r5
 800e868:	d10d      	bne.n	800e886 <__ieee754_sqrt+0x36>
 800e86a:	f7f1 fec5 	bl	80005f8 <__aeabi_dmul>
 800e86e:	4602      	mov	r2, r0
 800e870:	460b      	mov	r3, r1
 800e872:	4620      	mov	r0, r4
 800e874:	4629      	mov	r1, r5
 800e876:	f7f1 fd09 	bl	800028c <__adddf3>
 800e87a:	4604      	mov	r4, r0
 800e87c:	460d      	mov	r5, r1
 800e87e:	ec45 4b10 	vmov	d0, r4, r5
 800e882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e886:	2d00      	cmp	r5, #0
 800e888:	dc0b      	bgt.n	800e8a2 <__ieee754_sqrt+0x52>
 800e88a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e88e:	4326      	orrs	r6, r4
 800e890:	d0f5      	beq.n	800e87e <__ieee754_sqrt+0x2e>
 800e892:	b135      	cbz	r5, 800e8a2 <__ieee754_sqrt+0x52>
 800e894:	f7f1 fcf8 	bl	8000288 <__aeabi_dsub>
 800e898:	4602      	mov	r2, r0
 800e89a:	460b      	mov	r3, r1
 800e89c:	f7f1 ffd6 	bl	800084c <__aeabi_ddiv>
 800e8a0:	e7eb      	b.n	800e87a <__ieee754_sqrt+0x2a>
 800e8a2:	1509      	asrs	r1, r1, #20
 800e8a4:	f000 808d 	beq.w	800e9c2 <__ieee754_sqrt+0x172>
 800e8a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e8ac:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e8b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8b4:	07c9      	lsls	r1, r1, #31
 800e8b6:	bf5c      	itt	pl
 800e8b8:	005b      	lslpl	r3, r3, #1
 800e8ba:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e8be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e8c2:	bf58      	it	pl
 800e8c4:	0052      	lslpl	r2, r2, #1
 800e8c6:	2500      	movs	r5, #0
 800e8c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e8cc:	1076      	asrs	r6, r6, #1
 800e8ce:	0052      	lsls	r2, r2, #1
 800e8d0:	f04f 0e16 	mov.w	lr, #22
 800e8d4:	46ac      	mov	ip, r5
 800e8d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e8da:	eb0c 0001 	add.w	r0, ip, r1
 800e8de:	4298      	cmp	r0, r3
 800e8e0:	bfde      	ittt	le
 800e8e2:	1a1b      	suble	r3, r3, r0
 800e8e4:	eb00 0c01 	addle.w	ip, r0, r1
 800e8e8:	186d      	addle	r5, r5, r1
 800e8ea:	005b      	lsls	r3, r3, #1
 800e8ec:	f1be 0e01 	subs.w	lr, lr, #1
 800e8f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e8f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e8f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e8fc:	d1ed      	bne.n	800e8da <__ieee754_sqrt+0x8a>
 800e8fe:	4674      	mov	r4, lr
 800e900:	2720      	movs	r7, #32
 800e902:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e906:	4563      	cmp	r3, ip
 800e908:	eb01 000e 	add.w	r0, r1, lr
 800e90c:	dc02      	bgt.n	800e914 <__ieee754_sqrt+0xc4>
 800e90e:	d113      	bne.n	800e938 <__ieee754_sqrt+0xe8>
 800e910:	4290      	cmp	r0, r2
 800e912:	d811      	bhi.n	800e938 <__ieee754_sqrt+0xe8>
 800e914:	2800      	cmp	r0, #0
 800e916:	eb00 0e01 	add.w	lr, r0, r1
 800e91a:	da57      	bge.n	800e9cc <__ieee754_sqrt+0x17c>
 800e91c:	f1be 0f00 	cmp.w	lr, #0
 800e920:	db54      	blt.n	800e9cc <__ieee754_sqrt+0x17c>
 800e922:	f10c 0801 	add.w	r8, ip, #1
 800e926:	eba3 030c 	sub.w	r3, r3, ip
 800e92a:	4290      	cmp	r0, r2
 800e92c:	bf88      	it	hi
 800e92e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e932:	1a12      	subs	r2, r2, r0
 800e934:	440c      	add	r4, r1
 800e936:	46c4      	mov	ip, r8
 800e938:	005b      	lsls	r3, r3, #1
 800e93a:	3f01      	subs	r7, #1
 800e93c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e940:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e944:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e948:	d1dd      	bne.n	800e906 <__ieee754_sqrt+0xb6>
 800e94a:	4313      	orrs	r3, r2
 800e94c:	d01b      	beq.n	800e986 <__ieee754_sqrt+0x136>
 800e94e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e9fc <__ieee754_sqrt+0x1ac>
 800e952:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ea00 <__ieee754_sqrt+0x1b0>
 800e956:	e9da 0100 	ldrd	r0, r1, [sl]
 800e95a:	e9db 2300 	ldrd	r2, r3, [fp]
 800e95e:	f7f1 fc93 	bl	8000288 <__aeabi_dsub>
 800e962:	e9da 8900 	ldrd	r8, r9, [sl]
 800e966:	4602      	mov	r2, r0
 800e968:	460b      	mov	r3, r1
 800e96a:	4640      	mov	r0, r8
 800e96c:	4649      	mov	r1, r9
 800e96e:	f7f2 f8bf 	bl	8000af0 <__aeabi_dcmple>
 800e972:	b140      	cbz	r0, 800e986 <__ieee754_sqrt+0x136>
 800e974:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e978:	e9da 0100 	ldrd	r0, r1, [sl]
 800e97c:	e9db 2300 	ldrd	r2, r3, [fp]
 800e980:	d126      	bne.n	800e9d0 <__ieee754_sqrt+0x180>
 800e982:	3501      	adds	r5, #1
 800e984:	463c      	mov	r4, r7
 800e986:	106a      	asrs	r2, r5, #1
 800e988:	0863      	lsrs	r3, r4, #1
 800e98a:	07e9      	lsls	r1, r5, #31
 800e98c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e990:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e994:	bf48      	it	mi
 800e996:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e99a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e99e:	461c      	mov	r4, r3
 800e9a0:	e76d      	b.n	800e87e <__ieee754_sqrt+0x2e>
 800e9a2:	0ad3      	lsrs	r3, r2, #11
 800e9a4:	3815      	subs	r0, #21
 800e9a6:	0552      	lsls	r2, r2, #21
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d0fa      	beq.n	800e9a2 <__ieee754_sqrt+0x152>
 800e9ac:	02dc      	lsls	r4, r3, #11
 800e9ae:	d50a      	bpl.n	800e9c6 <__ieee754_sqrt+0x176>
 800e9b0:	f1c1 0420 	rsb	r4, r1, #32
 800e9b4:	fa22 f404 	lsr.w	r4, r2, r4
 800e9b8:	1e4d      	subs	r5, r1, #1
 800e9ba:	408a      	lsls	r2, r1
 800e9bc:	4323      	orrs	r3, r4
 800e9be:	1b41      	subs	r1, r0, r5
 800e9c0:	e772      	b.n	800e8a8 <__ieee754_sqrt+0x58>
 800e9c2:	4608      	mov	r0, r1
 800e9c4:	e7f0      	b.n	800e9a8 <__ieee754_sqrt+0x158>
 800e9c6:	005b      	lsls	r3, r3, #1
 800e9c8:	3101      	adds	r1, #1
 800e9ca:	e7ef      	b.n	800e9ac <__ieee754_sqrt+0x15c>
 800e9cc:	46e0      	mov	r8, ip
 800e9ce:	e7aa      	b.n	800e926 <__ieee754_sqrt+0xd6>
 800e9d0:	f7f1 fc5c 	bl	800028c <__adddf3>
 800e9d4:	e9da 8900 	ldrd	r8, r9, [sl]
 800e9d8:	4602      	mov	r2, r0
 800e9da:	460b      	mov	r3, r1
 800e9dc:	4640      	mov	r0, r8
 800e9de:	4649      	mov	r1, r9
 800e9e0:	f7f2 f87c 	bl	8000adc <__aeabi_dcmplt>
 800e9e4:	b120      	cbz	r0, 800e9f0 <__ieee754_sqrt+0x1a0>
 800e9e6:	1ca0      	adds	r0, r4, #2
 800e9e8:	bf08      	it	eq
 800e9ea:	3501      	addeq	r5, #1
 800e9ec:	3402      	adds	r4, #2
 800e9ee:	e7ca      	b.n	800e986 <__ieee754_sqrt+0x136>
 800e9f0:	3401      	adds	r4, #1
 800e9f2:	f024 0401 	bic.w	r4, r4, #1
 800e9f6:	e7c6      	b.n	800e986 <__ieee754_sqrt+0x136>
 800e9f8:	7ff00000 	.word	0x7ff00000
 800e9fc:	200001d8 	.word	0x200001d8
 800ea00:	200001e0 	.word	0x200001e0
 800ea04:	00000000 	.word	0x00000000

0800ea08 <__kernel_cos>:
 800ea08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea0c:	ec57 6b10 	vmov	r6, r7, d0
 800ea10:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ea14:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ea18:	ed8d 1b00 	vstr	d1, [sp]
 800ea1c:	da07      	bge.n	800ea2e <__kernel_cos+0x26>
 800ea1e:	ee10 0a10 	vmov	r0, s0
 800ea22:	4639      	mov	r1, r7
 800ea24:	f7f2 f898 	bl	8000b58 <__aeabi_d2iz>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	f000 8088 	beq.w	800eb3e <__kernel_cos+0x136>
 800ea2e:	4632      	mov	r2, r6
 800ea30:	463b      	mov	r3, r7
 800ea32:	4630      	mov	r0, r6
 800ea34:	4639      	mov	r1, r7
 800ea36:	f7f1 fddf 	bl	80005f8 <__aeabi_dmul>
 800ea3a:	4b51      	ldr	r3, [pc, #324]	; (800eb80 <__kernel_cos+0x178>)
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	4604      	mov	r4, r0
 800ea40:	460d      	mov	r5, r1
 800ea42:	f7f1 fdd9 	bl	80005f8 <__aeabi_dmul>
 800ea46:	a340      	add	r3, pc, #256	; (adr r3, 800eb48 <__kernel_cos+0x140>)
 800ea48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4c:	4682      	mov	sl, r0
 800ea4e:	468b      	mov	fp, r1
 800ea50:	4620      	mov	r0, r4
 800ea52:	4629      	mov	r1, r5
 800ea54:	f7f1 fdd0 	bl	80005f8 <__aeabi_dmul>
 800ea58:	a33d      	add	r3, pc, #244	; (adr r3, 800eb50 <__kernel_cos+0x148>)
 800ea5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5e:	f7f1 fc15 	bl	800028c <__adddf3>
 800ea62:	4622      	mov	r2, r4
 800ea64:	462b      	mov	r3, r5
 800ea66:	f7f1 fdc7 	bl	80005f8 <__aeabi_dmul>
 800ea6a:	a33b      	add	r3, pc, #236	; (adr r3, 800eb58 <__kernel_cos+0x150>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	f7f1 fc0a 	bl	8000288 <__aeabi_dsub>
 800ea74:	4622      	mov	r2, r4
 800ea76:	462b      	mov	r3, r5
 800ea78:	f7f1 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ea7c:	a338      	add	r3, pc, #224	; (adr r3, 800eb60 <__kernel_cos+0x158>)
 800ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea82:	f7f1 fc03 	bl	800028c <__adddf3>
 800ea86:	4622      	mov	r2, r4
 800ea88:	462b      	mov	r3, r5
 800ea8a:	f7f1 fdb5 	bl	80005f8 <__aeabi_dmul>
 800ea8e:	a336      	add	r3, pc, #216	; (adr r3, 800eb68 <__kernel_cos+0x160>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	f7f1 fbf8 	bl	8000288 <__aeabi_dsub>
 800ea98:	4622      	mov	r2, r4
 800ea9a:	462b      	mov	r3, r5
 800ea9c:	f7f1 fdac 	bl	80005f8 <__aeabi_dmul>
 800eaa0:	a333      	add	r3, pc, #204	; (adr r3, 800eb70 <__kernel_cos+0x168>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f1 fbf1 	bl	800028c <__adddf3>
 800eaaa:	4622      	mov	r2, r4
 800eaac:	462b      	mov	r3, r5
 800eaae:	f7f1 fda3 	bl	80005f8 <__aeabi_dmul>
 800eab2:	4622      	mov	r2, r4
 800eab4:	462b      	mov	r3, r5
 800eab6:	f7f1 fd9f 	bl	80005f8 <__aeabi_dmul>
 800eaba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eabe:	4604      	mov	r4, r0
 800eac0:	460d      	mov	r5, r1
 800eac2:	4630      	mov	r0, r6
 800eac4:	4639      	mov	r1, r7
 800eac6:	f7f1 fd97 	bl	80005f8 <__aeabi_dmul>
 800eaca:	460b      	mov	r3, r1
 800eacc:	4602      	mov	r2, r0
 800eace:	4629      	mov	r1, r5
 800ead0:	4620      	mov	r0, r4
 800ead2:	f7f1 fbd9 	bl	8000288 <__aeabi_dsub>
 800ead6:	4b2b      	ldr	r3, [pc, #172]	; (800eb84 <__kernel_cos+0x17c>)
 800ead8:	4598      	cmp	r8, r3
 800eada:	4606      	mov	r6, r0
 800eadc:	460f      	mov	r7, r1
 800eade:	dc10      	bgt.n	800eb02 <__kernel_cos+0xfa>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	4650      	mov	r0, sl
 800eae6:	4659      	mov	r1, fp
 800eae8:	f7f1 fbce 	bl	8000288 <__aeabi_dsub>
 800eaec:	460b      	mov	r3, r1
 800eaee:	4926      	ldr	r1, [pc, #152]	; (800eb88 <__kernel_cos+0x180>)
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	2000      	movs	r0, #0
 800eaf4:	f7f1 fbc8 	bl	8000288 <__aeabi_dsub>
 800eaf8:	ec41 0b10 	vmov	d0, r0, r1
 800eafc:	b003      	add	sp, #12
 800eafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb02:	4b22      	ldr	r3, [pc, #136]	; (800eb8c <__kernel_cos+0x184>)
 800eb04:	4920      	ldr	r1, [pc, #128]	; (800eb88 <__kernel_cos+0x180>)
 800eb06:	4598      	cmp	r8, r3
 800eb08:	bfcc      	ite	gt
 800eb0a:	4d21      	ldrgt	r5, [pc, #132]	; (800eb90 <__kernel_cos+0x188>)
 800eb0c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800eb10:	2400      	movs	r4, #0
 800eb12:	4622      	mov	r2, r4
 800eb14:	462b      	mov	r3, r5
 800eb16:	2000      	movs	r0, #0
 800eb18:	f7f1 fbb6 	bl	8000288 <__aeabi_dsub>
 800eb1c:	4622      	mov	r2, r4
 800eb1e:	4680      	mov	r8, r0
 800eb20:	4689      	mov	r9, r1
 800eb22:	462b      	mov	r3, r5
 800eb24:	4650      	mov	r0, sl
 800eb26:	4659      	mov	r1, fp
 800eb28:	f7f1 fbae 	bl	8000288 <__aeabi_dsub>
 800eb2c:	4632      	mov	r2, r6
 800eb2e:	463b      	mov	r3, r7
 800eb30:	f7f1 fbaa 	bl	8000288 <__aeabi_dsub>
 800eb34:	4602      	mov	r2, r0
 800eb36:	460b      	mov	r3, r1
 800eb38:	4640      	mov	r0, r8
 800eb3a:	4649      	mov	r1, r9
 800eb3c:	e7da      	b.n	800eaf4 <__kernel_cos+0xec>
 800eb3e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800eb78 <__kernel_cos+0x170>
 800eb42:	e7db      	b.n	800eafc <__kernel_cos+0xf4>
 800eb44:	f3af 8000 	nop.w
 800eb48:	be8838d4 	.word	0xbe8838d4
 800eb4c:	bda8fae9 	.word	0xbda8fae9
 800eb50:	bdb4b1c4 	.word	0xbdb4b1c4
 800eb54:	3e21ee9e 	.word	0x3e21ee9e
 800eb58:	809c52ad 	.word	0x809c52ad
 800eb5c:	3e927e4f 	.word	0x3e927e4f
 800eb60:	19cb1590 	.word	0x19cb1590
 800eb64:	3efa01a0 	.word	0x3efa01a0
 800eb68:	16c15177 	.word	0x16c15177
 800eb6c:	3f56c16c 	.word	0x3f56c16c
 800eb70:	5555554c 	.word	0x5555554c
 800eb74:	3fa55555 	.word	0x3fa55555
 800eb78:	00000000 	.word	0x00000000
 800eb7c:	3ff00000 	.word	0x3ff00000
 800eb80:	3fe00000 	.word	0x3fe00000
 800eb84:	3fd33332 	.word	0x3fd33332
 800eb88:	3ff00000 	.word	0x3ff00000
 800eb8c:	3fe90000 	.word	0x3fe90000
 800eb90:	3fd20000 	.word	0x3fd20000
 800eb94:	00000000 	.word	0x00000000

0800eb98 <__kernel_sin>:
 800eb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb9c:	ed2d 8b04 	vpush	{d8-d9}
 800eba0:	eeb0 8a41 	vmov.f32	s16, s2
 800eba4:	eef0 8a61 	vmov.f32	s17, s3
 800eba8:	ec55 4b10 	vmov	r4, r5, d0
 800ebac:	b083      	sub	sp, #12
 800ebae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ebb2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ebb6:	9001      	str	r0, [sp, #4]
 800ebb8:	da06      	bge.n	800ebc8 <__kernel_sin+0x30>
 800ebba:	ee10 0a10 	vmov	r0, s0
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	f7f1 ffca 	bl	8000b58 <__aeabi_d2iz>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d051      	beq.n	800ec6c <__kernel_sin+0xd4>
 800ebc8:	4622      	mov	r2, r4
 800ebca:	462b      	mov	r3, r5
 800ebcc:	4620      	mov	r0, r4
 800ebce:	4629      	mov	r1, r5
 800ebd0:	f7f1 fd12 	bl	80005f8 <__aeabi_dmul>
 800ebd4:	4682      	mov	sl, r0
 800ebd6:	468b      	mov	fp, r1
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4620      	mov	r0, r4
 800ebde:	4629      	mov	r1, r5
 800ebe0:	f7f1 fd0a 	bl	80005f8 <__aeabi_dmul>
 800ebe4:	a341      	add	r3, pc, #260	; (adr r3, 800ecec <__kernel_sin+0x154>)
 800ebe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebea:	4680      	mov	r8, r0
 800ebec:	4689      	mov	r9, r1
 800ebee:	4650      	mov	r0, sl
 800ebf0:	4659      	mov	r1, fp
 800ebf2:	f7f1 fd01 	bl	80005f8 <__aeabi_dmul>
 800ebf6:	a33f      	add	r3, pc, #252	; (adr r3, 800ecf4 <__kernel_sin+0x15c>)
 800ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfc:	f7f1 fb44 	bl	8000288 <__aeabi_dsub>
 800ec00:	4652      	mov	r2, sl
 800ec02:	465b      	mov	r3, fp
 800ec04:	f7f1 fcf8 	bl	80005f8 <__aeabi_dmul>
 800ec08:	a33c      	add	r3, pc, #240	; (adr r3, 800ecfc <__kernel_sin+0x164>)
 800ec0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0e:	f7f1 fb3d 	bl	800028c <__adddf3>
 800ec12:	4652      	mov	r2, sl
 800ec14:	465b      	mov	r3, fp
 800ec16:	f7f1 fcef 	bl	80005f8 <__aeabi_dmul>
 800ec1a:	a33a      	add	r3, pc, #232	; (adr r3, 800ed04 <__kernel_sin+0x16c>)
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	f7f1 fb32 	bl	8000288 <__aeabi_dsub>
 800ec24:	4652      	mov	r2, sl
 800ec26:	465b      	mov	r3, fp
 800ec28:	f7f1 fce6 	bl	80005f8 <__aeabi_dmul>
 800ec2c:	a337      	add	r3, pc, #220	; (adr r3, 800ed0c <__kernel_sin+0x174>)
 800ec2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec32:	f7f1 fb2b 	bl	800028c <__adddf3>
 800ec36:	9b01      	ldr	r3, [sp, #4]
 800ec38:	4606      	mov	r6, r0
 800ec3a:	460f      	mov	r7, r1
 800ec3c:	b9eb      	cbnz	r3, 800ec7a <__kernel_sin+0xe2>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	460b      	mov	r3, r1
 800ec42:	4650      	mov	r0, sl
 800ec44:	4659      	mov	r1, fp
 800ec46:	f7f1 fcd7 	bl	80005f8 <__aeabi_dmul>
 800ec4a:	a325      	add	r3, pc, #148	; (adr r3, 800ece0 <__kernel_sin+0x148>)
 800ec4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec50:	f7f1 fb1a 	bl	8000288 <__aeabi_dsub>
 800ec54:	4642      	mov	r2, r8
 800ec56:	464b      	mov	r3, r9
 800ec58:	f7f1 fcce 	bl	80005f8 <__aeabi_dmul>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	4620      	mov	r0, r4
 800ec62:	4629      	mov	r1, r5
 800ec64:	f7f1 fb12 	bl	800028c <__adddf3>
 800ec68:	4604      	mov	r4, r0
 800ec6a:	460d      	mov	r5, r1
 800ec6c:	ec45 4b10 	vmov	d0, r4, r5
 800ec70:	b003      	add	sp, #12
 800ec72:	ecbd 8b04 	vpop	{d8-d9}
 800ec76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7a:	4b1b      	ldr	r3, [pc, #108]	; (800ece8 <__kernel_sin+0x150>)
 800ec7c:	ec51 0b18 	vmov	r0, r1, d8
 800ec80:	2200      	movs	r2, #0
 800ec82:	f7f1 fcb9 	bl	80005f8 <__aeabi_dmul>
 800ec86:	4632      	mov	r2, r6
 800ec88:	ec41 0b19 	vmov	d9, r0, r1
 800ec8c:	463b      	mov	r3, r7
 800ec8e:	4640      	mov	r0, r8
 800ec90:	4649      	mov	r1, r9
 800ec92:	f7f1 fcb1 	bl	80005f8 <__aeabi_dmul>
 800ec96:	4602      	mov	r2, r0
 800ec98:	460b      	mov	r3, r1
 800ec9a:	ec51 0b19 	vmov	r0, r1, d9
 800ec9e:	f7f1 faf3 	bl	8000288 <__aeabi_dsub>
 800eca2:	4652      	mov	r2, sl
 800eca4:	465b      	mov	r3, fp
 800eca6:	f7f1 fca7 	bl	80005f8 <__aeabi_dmul>
 800ecaa:	ec53 2b18 	vmov	r2, r3, d8
 800ecae:	f7f1 faeb 	bl	8000288 <__aeabi_dsub>
 800ecb2:	a30b      	add	r3, pc, #44	; (adr r3, 800ece0 <__kernel_sin+0x148>)
 800ecb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb8:	4606      	mov	r6, r0
 800ecba:	460f      	mov	r7, r1
 800ecbc:	4640      	mov	r0, r8
 800ecbe:	4649      	mov	r1, r9
 800ecc0:	f7f1 fc9a 	bl	80005f8 <__aeabi_dmul>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	4630      	mov	r0, r6
 800ecca:	4639      	mov	r1, r7
 800eccc:	f7f1 fade 	bl	800028c <__adddf3>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	4629      	mov	r1, r5
 800ecd8:	f7f1 fad6 	bl	8000288 <__aeabi_dsub>
 800ecdc:	e7c4      	b.n	800ec68 <__kernel_sin+0xd0>
 800ecde:	bf00      	nop
 800ece0:	55555549 	.word	0x55555549
 800ece4:	3fc55555 	.word	0x3fc55555
 800ece8:	3fe00000 	.word	0x3fe00000
 800ecec:	5acfd57c 	.word	0x5acfd57c
 800ecf0:	3de5d93a 	.word	0x3de5d93a
 800ecf4:	8a2b9ceb 	.word	0x8a2b9ceb
 800ecf8:	3e5ae5e6 	.word	0x3e5ae5e6
 800ecfc:	57b1fe7d 	.word	0x57b1fe7d
 800ed00:	3ec71de3 	.word	0x3ec71de3
 800ed04:	19c161d5 	.word	0x19c161d5
 800ed08:	3f2a01a0 	.word	0x3f2a01a0
 800ed0c:	1110f8a6 	.word	0x1110f8a6
 800ed10:	3f811111 	.word	0x3f811111
 800ed14:	00000000 	.word	0x00000000

0800ed18 <__kernel_tan>:
 800ed18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed1c:	ed2d 8b06 	vpush	{d8-d10}
 800ed20:	ec5b ab10 	vmov	sl, fp, d0
 800ed24:	4be0      	ldr	r3, [pc, #896]	; (800f0a8 <__kernel_tan+0x390>)
 800ed26:	b083      	sub	sp, #12
 800ed28:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800ed2c:	429f      	cmp	r7, r3
 800ed2e:	ec59 8b11 	vmov	r8, r9, d1
 800ed32:	4606      	mov	r6, r0
 800ed34:	f8cd b000 	str.w	fp, [sp]
 800ed38:	dc61      	bgt.n	800edfe <__kernel_tan+0xe6>
 800ed3a:	ee10 0a10 	vmov	r0, s0
 800ed3e:	4659      	mov	r1, fp
 800ed40:	f7f1 ff0a 	bl	8000b58 <__aeabi_d2iz>
 800ed44:	4605      	mov	r5, r0
 800ed46:	2800      	cmp	r0, #0
 800ed48:	f040 8083 	bne.w	800ee52 <__kernel_tan+0x13a>
 800ed4c:	1c73      	adds	r3, r6, #1
 800ed4e:	4652      	mov	r2, sl
 800ed50:	4313      	orrs	r3, r2
 800ed52:	433b      	orrs	r3, r7
 800ed54:	d112      	bne.n	800ed7c <__kernel_tan+0x64>
 800ed56:	ec4b ab10 	vmov	d0, sl, fp
 800ed5a:	f001 fb85 	bl	8010468 <fabs>
 800ed5e:	49d3      	ldr	r1, [pc, #844]	; (800f0ac <__kernel_tan+0x394>)
 800ed60:	ec53 2b10 	vmov	r2, r3, d0
 800ed64:	2000      	movs	r0, #0
 800ed66:	f7f1 fd71 	bl	800084c <__aeabi_ddiv>
 800ed6a:	4682      	mov	sl, r0
 800ed6c:	468b      	mov	fp, r1
 800ed6e:	ec4b ab10 	vmov	d0, sl, fp
 800ed72:	b003      	add	sp, #12
 800ed74:	ecbd 8b06 	vpop	{d8-d10}
 800ed78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7c:	2e01      	cmp	r6, #1
 800ed7e:	d0f6      	beq.n	800ed6e <__kernel_tan+0x56>
 800ed80:	4642      	mov	r2, r8
 800ed82:	464b      	mov	r3, r9
 800ed84:	4650      	mov	r0, sl
 800ed86:	4659      	mov	r1, fp
 800ed88:	f7f1 fa80 	bl	800028c <__adddf3>
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	460b      	mov	r3, r1
 800ed90:	460f      	mov	r7, r1
 800ed92:	2000      	movs	r0, #0
 800ed94:	49c6      	ldr	r1, [pc, #792]	; (800f0b0 <__kernel_tan+0x398>)
 800ed96:	f7f1 fd59 	bl	800084c <__aeabi_ddiv>
 800ed9a:	e9cd 0100 	strd	r0, r1, [sp]
 800ed9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eda2:	462e      	mov	r6, r5
 800eda4:	4652      	mov	r2, sl
 800eda6:	462c      	mov	r4, r5
 800eda8:	4630      	mov	r0, r6
 800edaa:	461d      	mov	r5, r3
 800edac:	4639      	mov	r1, r7
 800edae:	465b      	mov	r3, fp
 800edb0:	f7f1 fa6a 	bl	8000288 <__aeabi_dsub>
 800edb4:	4602      	mov	r2, r0
 800edb6:	460b      	mov	r3, r1
 800edb8:	4640      	mov	r0, r8
 800edba:	4649      	mov	r1, r9
 800edbc:	f7f1 fa64 	bl	8000288 <__aeabi_dsub>
 800edc0:	4632      	mov	r2, r6
 800edc2:	462b      	mov	r3, r5
 800edc4:	f7f1 fc18 	bl	80005f8 <__aeabi_dmul>
 800edc8:	4632      	mov	r2, r6
 800edca:	4680      	mov	r8, r0
 800edcc:	4689      	mov	r9, r1
 800edce:	462b      	mov	r3, r5
 800edd0:	4630      	mov	r0, r6
 800edd2:	4639      	mov	r1, r7
 800edd4:	f7f1 fc10 	bl	80005f8 <__aeabi_dmul>
 800edd8:	4bb4      	ldr	r3, [pc, #720]	; (800f0ac <__kernel_tan+0x394>)
 800edda:	2200      	movs	r2, #0
 800eddc:	f7f1 fa56 	bl	800028c <__adddf3>
 800ede0:	4602      	mov	r2, r0
 800ede2:	460b      	mov	r3, r1
 800ede4:	4640      	mov	r0, r8
 800ede6:	4649      	mov	r1, r9
 800ede8:	f7f1 fa50 	bl	800028c <__adddf3>
 800edec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edf0:	f7f1 fc02 	bl	80005f8 <__aeabi_dmul>
 800edf4:	4622      	mov	r2, r4
 800edf6:	462b      	mov	r3, r5
 800edf8:	f7f1 fa48 	bl	800028c <__adddf3>
 800edfc:	e7b5      	b.n	800ed6a <__kernel_tan+0x52>
 800edfe:	4bad      	ldr	r3, [pc, #692]	; (800f0b4 <__kernel_tan+0x39c>)
 800ee00:	429f      	cmp	r7, r3
 800ee02:	dd26      	ble.n	800ee52 <__kernel_tan+0x13a>
 800ee04:	9b00      	ldr	r3, [sp, #0]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	da09      	bge.n	800ee1e <__kernel_tan+0x106>
 800ee0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ee0e:	469b      	mov	fp, r3
 800ee10:	ee10 aa10 	vmov	sl, s0
 800ee14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ee18:	ee11 8a10 	vmov	r8, s2
 800ee1c:	4699      	mov	r9, r3
 800ee1e:	4652      	mov	r2, sl
 800ee20:	465b      	mov	r3, fp
 800ee22:	a183      	add	r1, pc, #524	; (adr r1, 800f030 <__kernel_tan+0x318>)
 800ee24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee28:	f7f1 fa2e 	bl	8000288 <__aeabi_dsub>
 800ee2c:	4642      	mov	r2, r8
 800ee2e:	464b      	mov	r3, r9
 800ee30:	4604      	mov	r4, r0
 800ee32:	460d      	mov	r5, r1
 800ee34:	a180      	add	r1, pc, #512	; (adr r1, 800f038 <__kernel_tan+0x320>)
 800ee36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee3a:	f7f1 fa25 	bl	8000288 <__aeabi_dsub>
 800ee3e:	4622      	mov	r2, r4
 800ee40:	462b      	mov	r3, r5
 800ee42:	f7f1 fa23 	bl	800028c <__adddf3>
 800ee46:	f04f 0800 	mov.w	r8, #0
 800ee4a:	4682      	mov	sl, r0
 800ee4c:	468b      	mov	fp, r1
 800ee4e:	f04f 0900 	mov.w	r9, #0
 800ee52:	4652      	mov	r2, sl
 800ee54:	465b      	mov	r3, fp
 800ee56:	4650      	mov	r0, sl
 800ee58:	4659      	mov	r1, fp
 800ee5a:	f7f1 fbcd 	bl	80005f8 <__aeabi_dmul>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	460b      	mov	r3, r1
 800ee62:	ec43 2b18 	vmov	d8, r2, r3
 800ee66:	f7f1 fbc7 	bl	80005f8 <__aeabi_dmul>
 800ee6a:	ec53 2b18 	vmov	r2, r3, d8
 800ee6e:	4604      	mov	r4, r0
 800ee70:	460d      	mov	r5, r1
 800ee72:	4650      	mov	r0, sl
 800ee74:	4659      	mov	r1, fp
 800ee76:	f7f1 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ee7a:	a371      	add	r3, pc, #452	; (adr r3, 800f040 <__kernel_tan+0x328>)
 800ee7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee80:	ec41 0b19 	vmov	d9, r0, r1
 800ee84:	4620      	mov	r0, r4
 800ee86:	4629      	mov	r1, r5
 800ee88:	f7f1 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ee8c:	a36e      	add	r3, pc, #440	; (adr r3, 800f048 <__kernel_tan+0x330>)
 800ee8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee92:	f7f1 f9fb 	bl	800028c <__adddf3>
 800ee96:	4622      	mov	r2, r4
 800ee98:	462b      	mov	r3, r5
 800ee9a:	f7f1 fbad 	bl	80005f8 <__aeabi_dmul>
 800ee9e:	a36c      	add	r3, pc, #432	; (adr r3, 800f050 <__kernel_tan+0x338>)
 800eea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea4:	f7f1 f9f2 	bl	800028c <__adddf3>
 800eea8:	4622      	mov	r2, r4
 800eeaa:	462b      	mov	r3, r5
 800eeac:	f7f1 fba4 	bl	80005f8 <__aeabi_dmul>
 800eeb0:	a369      	add	r3, pc, #420	; (adr r3, 800f058 <__kernel_tan+0x340>)
 800eeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb6:	f7f1 f9e9 	bl	800028c <__adddf3>
 800eeba:	4622      	mov	r2, r4
 800eebc:	462b      	mov	r3, r5
 800eebe:	f7f1 fb9b 	bl	80005f8 <__aeabi_dmul>
 800eec2:	a367      	add	r3, pc, #412	; (adr r3, 800f060 <__kernel_tan+0x348>)
 800eec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec8:	f7f1 f9e0 	bl	800028c <__adddf3>
 800eecc:	4622      	mov	r2, r4
 800eece:	462b      	mov	r3, r5
 800eed0:	f7f1 fb92 	bl	80005f8 <__aeabi_dmul>
 800eed4:	a364      	add	r3, pc, #400	; (adr r3, 800f068 <__kernel_tan+0x350>)
 800eed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeda:	f7f1 f9d7 	bl	800028c <__adddf3>
 800eede:	ec53 2b18 	vmov	r2, r3, d8
 800eee2:	f7f1 fb89 	bl	80005f8 <__aeabi_dmul>
 800eee6:	a362      	add	r3, pc, #392	; (adr r3, 800f070 <__kernel_tan+0x358>)
 800eee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeec:	ec41 0b1a 	vmov	d10, r0, r1
 800eef0:	4620      	mov	r0, r4
 800eef2:	4629      	mov	r1, r5
 800eef4:	f7f1 fb80 	bl	80005f8 <__aeabi_dmul>
 800eef8:	a35f      	add	r3, pc, #380	; (adr r3, 800f078 <__kernel_tan+0x360>)
 800eefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefe:	f7f1 f9c5 	bl	800028c <__adddf3>
 800ef02:	4622      	mov	r2, r4
 800ef04:	462b      	mov	r3, r5
 800ef06:	f7f1 fb77 	bl	80005f8 <__aeabi_dmul>
 800ef0a:	a35d      	add	r3, pc, #372	; (adr r3, 800f080 <__kernel_tan+0x368>)
 800ef0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef10:	f7f1 f9bc 	bl	800028c <__adddf3>
 800ef14:	4622      	mov	r2, r4
 800ef16:	462b      	mov	r3, r5
 800ef18:	f7f1 fb6e 	bl	80005f8 <__aeabi_dmul>
 800ef1c:	a35a      	add	r3, pc, #360	; (adr r3, 800f088 <__kernel_tan+0x370>)
 800ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef22:	f7f1 f9b3 	bl	800028c <__adddf3>
 800ef26:	4622      	mov	r2, r4
 800ef28:	462b      	mov	r3, r5
 800ef2a:	f7f1 fb65 	bl	80005f8 <__aeabi_dmul>
 800ef2e:	a358      	add	r3, pc, #352	; (adr r3, 800f090 <__kernel_tan+0x378>)
 800ef30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef34:	f7f1 f9aa 	bl	800028c <__adddf3>
 800ef38:	4622      	mov	r2, r4
 800ef3a:	462b      	mov	r3, r5
 800ef3c:	f7f1 fb5c 	bl	80005f8 <__aeabi_dmul>
 800ef40:	a355      	add	r3, pc, #340	; (adr r3, 800f098 <__kernel_tan+0x380>)
 800ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef46:	f7f1 f9a1 	bl	800028c <__adddf3>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	ec51 0b1a 	vmov	r0, r1, d10
 800ef52:	f7f1 f99b 	bl	800028c <__adddf3>
 800ef56:	ec53 2b19 	vmov	r2, r3, d9
 800ef5a:	f7f1 fb4d 	bl	80005f8 <__aeabi_dmul>
 800ef5e:	4642      	mov	r2, r8
 800ef60:	464b      	mov	r3, r9
 800ef62:	f7f1 f993 	bl	800028c <__adddf3>
 800ef66:	ec53 2b18 	vmov	r2, r3, d8
 800ef6a:	f7f1 fb45 	bl	80005f8 <__aeabi_dmul>
 800ef6e:	4642      	mov	r2, r8
 800ef70:	464b      	mov	r3, r9
 800ef72:	f7f1 f98b 	bl	800028c <__adddf3>
 800ef76:	a34a      	add	r3, pc, #296	; (adr r3, 800f0a0 <__kernel_tan+0x388>)
 800ef78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	460d      	mov	r5, r1
 800ef80:	ec51 0b19 	vmov	r0, r1, d9
 800ef84:	f7f1 fb38 	bl	80005f8 <__aeabi_dmul>
 800ef88:	4622      	mov	r2, r4
 800ef8a:	462b      	mov	r3, r5
 800ef8c:	f7f1 f97e 	bl	800028c <__adddf3>
 800ef90:	460b      	mov	r3, r1
 800ef92:	ec41 0b18 	vmov	d8, r0, r1
 800ef96:	4602      	mov	r2, r0
 800ef98:	4659      	mov	r1, fp
 800ef9a:	4650      	mov	r0, sl
 800ef9c:	f7f1 f976 	bl	800028c <__adddf3>
 800efa0:	4b44      	ldr	r3, [pc, #272]	; (800f0b4 <__kernel_tan+0x39c>)
 800efa2:	429f      	cmp	r7, r3
 800efa4:	4604      	mov	r4, r0
 800efa6:	460d      	mov	r5, r1
 800efa8:	f340 8086 	ble.w	800f0b8 <__kernel_tan+0x3a0>
 800efac:	4630      	mov	r0, r6
 800efae:	f7f1 fab9 	bl	8000524 <__aeabi_i2d>
 800efb2:	4622      	mov	r2, r4
 800efb4:	4680      	mov	r8, r0
 800efb6:	4689      	mov	r9, r1
 800efb8:	462b      	mov	r3, r5
 800efba:	4620      	mov	r0, r4
 800efbc:	4629      	mov	r1, r5
 800efbe:	f7f1 fb1b 	bl	80005f8 <__aeabi_dmul>
 800efc2:	4642      	mov	r2, r8
 800efc4:	4606      	mov	r6, r0
 800efc6:	460f      	mov	r7, r1
 800efc8:	464b      	mov	r3, r9
 800efca:	4620      	mov	r0, r4
 800efcc:	4629      	mov	r1, r5
 800efce:	f7f1 f95d 	bl	800028c <__adddf3>
 800efd2:	4602      	mov	r2, r0
 800efd4:	460b      	mov	r3, r1
 800efd6:	4630      	mov	r0, r6
 800efd8:	4639      	mov	r1, r7
 800efda:	f7f1 fc37 	bl	800084c <__aeabi_ddiv>
 800efde:	ec53 2b18 	vmov	r2, r3, d8
 800efe2:	f7f1 f951 	bl	8000288 <__aeabi_dsub>
 800efe6:	4602      	mov	r2, r0
 800efe8:	460b      	mov	r3, r1
 800efea:	4650      	mov	r0, sl
 800efec:	4659      	mov	r1, fp
 800efee:	f7f1 f94b 	bl	8000288 <__aeabi_dsub>
 800eff2:	4602      	mov	r2, r0
 800eff4:	460b      	mov	r3, r1
 800eff6:	f7f1 f949 	bl	800028c <__adddf3>
 800effa:	4602      	mov	r2, r0
 800effc:	460b      	mov	r3, r1
 800effe:	4640      	mov	r0, r8
 800f000:	4649      	mov	r1, r9
 800f002:	f7f1 f941 	bl	8000288 <__aeabi_dsub>
 800f006:	9b00      	ldr	r3, [sp, #0]
 800f008:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800f00c:	f00a 0a02 	and.w	sl, sl, #2
 800f010:	4604      	mov	r4, r0
 800f012:	f1ca 0001 	rsb	r0, sl, #1
 800f016:	460d      	mov	r5, r1
 800f018:	f7f1 fa84 	bl	8000524 <__aeabi_i2d>
 800f01c:	4602      	mov	r2, r0
 800f01e:	460b      	mov	r3, r1
 800f020:	4620      	mov	r0, r4
 800f022:	4629      	mov	r1, r5
 800f024:	f7f1 fae8 	bl	80005f8 <__aeabi_dmul>
 800f028:	e69f      	b.n	800ed6a <__kernel_tan+0x52>
 800f02a:	bf00      	nop
 800f02c:	f3af 8000 	nop.w
 800f030:	54442d18 	.word	0x54442d18
 800f034:	3fe921fb 	.word	0x3fe921fb
 800f038:	33145c07 	.word	0x33145c07
 800f03c:	3c81a626 	.word	0x3c81a626
 800f040:	74bf7ad4 	.word	0x74bf7ad4
 800f044:	3efb2a70 	.word	0x3efb2a70
 800f048:	32f0a7e9 	.word	0x32f0a7e9
 800f04c:	3f12b80f 	.word	0x3f12b80f
 800f050:	1a8d1068 	.word	0x1a8d1068
 800f054:	3f3026f7 	.word	0x3f3026f7
 800f058:	fee08315 	.word	0xfee08315
 800f05c:	3f57dbc8 	.word	0x3f57dbc8
 800f060:	e96e8493 	.word	0xe96e8493
 800f064:	3f8226e3 	.word	0x3f8226e3
 800f068:	1bb341fe 	.word	0x1bb341fe
 800f06c:	3faba1ba 	.word	0x3faba1ba
 800f070:	db605373 	.word	0xdb605373
 800f074:	bef375cb 	.word	0xbef375cb
 800f078:	a03792a6 	.word	0xa03792a6
 800f07c:	3f147e88 	.word	0x3f147e88
 800f080:	f2f26501 	.word	0xf2f26501
 800f084:	3f4344d8 	.word	0x3f4344d8
 800f088:	c9560328 	.word	0xc9560328
 800f08c:	3f6d6d22 	.word	0x3f6d6d22
 800f090:	8406d637 	.word	0x8406d637
 800f094:	3f9664f4 	.word	0x3f9664f4
 800f098:	1110fe7a 	.word	0x1110fe7a
 800f09c:	3fc11111 	.word	0x3fc11111
 800f0a0:	55555563 	.word	0x55555563
 800f0a4:	3fd55555 	.word	0x3fd55555
 800f0a8:	3e2fffff 	.word	0x3e2fffff
 800f0ac:	3ff00000 	.word	0x3ff00000
 800f0b0:	bff00000 	.word	0xbff00000
 800f0b4:	3fe59427 	.word	0x3fe59427
 800f0b8:	2e01      	cmp	r6, #1
 800f0ba:	d02f      	beq.n	800f11c <__kernel_tan+0x404>
 800f0bc:	460f      	mov	r7, r1
 800f0be:	4602      	mov	r2, r0
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	4689      	mov	r9, r1
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	4917      	ldr	r1, [pc, #92]	; (800f124 <__kernel_tan+0x40c>)
 800f0c8:	f7f1 fbc0 	bl	800084c <__aeabi_ddiv>
 800f0cc:	2600      	movs	r6, #0
 800f0ce:	e9cd 0100 	strd	r0, r1, [sp]
 800f0d2:	4652      	mov	r2, sl
 800f0d4:	465b      	mov	r3, fp
 800f0d6:	4630      	mov	r0, r6
 800f0d8:	4639      	mov	r1, r7
 800f0da:	f7f1 f8d5 	bl	8000288 <__aeabi_dsub>
 800f0de:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	ec51 0b18 	vmov	r0, r1, d8
 800f0ea:	f7f1 f8cd 	bl	8000288 <__aeabi_dsub>
 800f0ee:	4632      	mov	r2, r6
 800f0f0:	462b      	mov	r3, r5
 800f0f2:	f7f1 fa81 	bl	80005f8 <__aeabi_dmul>
 800f0f6:	46b0      	mov	r8, r6
 800f0f8:	460f      	mov	r7, r1
 800f0fa:	4642      	mov	r2, r8
 800f0fc:	462b      	mov	r3, r5
 800f0fe:	4634      	mov	r4, r6
 800f100:	4649      	mov	r1, r9
 800f102:	4606      	mov	r6, r0
 800f104:	4640      	mov	r0, r8
 800f106:	f7f1 fa77 	bl	80005f8 <__aeabi_dmul>
 800f10a:	4b07      	ldr	r3, [pc, #28]	; (800f128 <__kernel_tan+0x410>)
 800f10c:	2200      	movs	r2, #0
 800f10e:	f7f1 f8bd 	bl	800028c <__adddf3>
 800f112:	4602      	mov	r2, r0
 800f114:	460b      	mov	r3, r1
 800f116:	4630      	mov	r0, r6
 800f118:	4639      	mov	r1, r7
 800f11a:	e665      	b.n	800ede8 <__kernel_tan+0xd0>
 800f11c:	4682      	mov	sl, r0
 800f11e:	468b      	mov	fp, r1
 800f120:	e625      	b.n	800ed6e <__kernel_tan+0x56>
 800f122:	bf00      	nop
 800f124:	bff00000 	.word	0xbff00000
 800f128:	3ff00000 	.word	0x3ff00000
 800f12c:	00000000 	.word	0x00000000

0800f130 <__ieee754_atan2>:
 800f130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f134:	ec57 6b11 	vmov	r6, r7, d1
 800f138:	4273      	negs	r3, r6
 800f13a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800f2b8 <__ieee754_atan2+0x188>
 800f13e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f142:	4333      	orrs	r3, r6
 800f144:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f148:	4543      	cmp	r3, r8
 800f14a:	ec51 0b10 	vmov	r0, r1, d0
 800f14e:	ee11 5a10 	vmov	r5, s2
 800f152:	d80a      	bhi.n	800f16a <__ieee754_atan2+0x3a>
 800f154:	4244      	negs	r4, r0
 800f156:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f15a:	4304      	orrs	r4, r0
 800f15c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f160:	4544      	cmp	r4, r8
 800f162:	ee10 9a10 	vmov	r9, s0
 800f166:	468e      	mov	lr, r1
 800f168:	d907      	bls.n	800f17a <__ieee754_atan2+0x4a>
 800f16a:	4632      	mov	r2, r6
 800f16c:	463b      	mov	r3, r7
 800f16e:	f7f1 f88d 	bl	800028c <__adddf3>
 800f172:	ec41 0b10 	vmov	d0, r0, r1
 800f176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f17a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f17e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f182:	4334      	orrs	r4, r6
 800f184:	d103      	bne.n	800f18e <__ieee754_atan2+0x5e>
 800f186:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f18a:	f000 bfcd 	b.w	8010128 <atan>
 800f18e:	17bc      	asrs	r4, r7, #30
 800f190:	f004 0402 	and.w	r4, r4, #2
 800f194:	ea53 0909 	orrs.w	r9, r3, r9
 800f198:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f19c:	d107      	bne.n	800f1ae <__ieee754_atan2+0x7e>
 800f19e:	2c02      	cmp	r4, #2
 800f1a0:	d05f      	beq.n	800f262 <__ieee754_atan2+0x132>
 800f1a2:	2c03      	cmp	r4, #3
 800f1a4:	d1e5      	bne.n	800f172 <__ieee754_atan2+0x42>
 800f1a6:	a140      	add	r1, pc, #256	; (adr r1, 800f2a8 <__ieee754_atan2+0x178>)
 800f1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1ac:	e7e1      	b.n	800f172 <__ieee754_atan2+0x42>
 800f1ae:	4315      	orrs	r5, r2
 800f1b0:	d106      	bne.n	800f1c0 <__ieee754_atan2+0x90>
 800f1b2:	f1be 0f00 	cmp.w	lr, #0
 800f1b6:	da5f      	bge.n	800f278 <__ieee754_atan2+0x148>
 800f1b8:	a13d      	add	r1, pc, #244	; (adr r1, 800f2b0 <__ieee754_atan2+0x180>)
 800f1ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1be:	e7d8      	b.n	800f172 <__ieee754_atan2+0x42>
 800f1c0:	4542      	cmp	r2, r8
 800f1c2:	d10f      	bne.n	800f1e4 <__ieee754_atan2+0xb4>
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800f1ca:	d107      	bne.n	800f1dc <__ieee754_atan2+0xac>
 800f1cc:	2c02      	cmp	r4, #2
 800f1ce:	d84c      	bhi.n	800f26a <__ieee754_atan2+0x13a>
 800f1d0:	4b33      	ldr	r3, [pc, #204]	; (800f2a0 <__ieee754_atan2+0x170>)
 800f1d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f1d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1da:	e7ca      	b.n	800f172 <__ieee754_atan2+0x42>
 800f1dc:	2c02      	cmp	r4, #2
 800f1de:	d848      	bhi.n	800f272 <__ieee754_atan2+0x142>
 800f1e0:	4b30      	ldr	r3, [pc, #192]	; (800f2a4 <__ieee754_atan2+0x174>)
 800f1e2:	e7f6      	b.n	800f1d2 <__ieee754_atan2+0xa2>
 800f1e4:	4543      	cmp	r3, r8
 800f1e6:	d0e4      	beq.n	800f1b2 <__ieee754_atan2+0x82>
 800f1e8:	1a9b      	subs	r3, r3, r2
 800f1ea:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f1ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f1f2:	da1e      	bge.n	800f232 <__ieee754_atan2+0x102>
 800f1f4:	2f00      	cmp	r7, #0
 800f1f6:	da01      	bge.n	800f1fc <__ieee754_atan2+0xcc>
 800f1f8:	323c      	adds	r2, #60	; 0x3c
 800f1fa:	db1e      	blt.n	800f23a <__ieee754_atan2+0x10a>
 800f1fc:	4632      	mov	r2, r6
 800f1fe:	463b      	mov	r3, r7
 800f200:	f7f1 fb24 	bl	800084c <__aeabi_ddiv>
 800f204:	ec41 0b10 	vmov	d0, r0, r1
 800f208:	f001 f92e 	bl	8010468 <fabs>
 800f20c:	f000 ff8c 	bl	8010128 <atan>
 800f210:	ec51 0b10 	vmov	r0, r1, d0
 800f214:	2c01      	cmp	r4, #1
 800f216:	d013      	beq.n	800f240 <__ieee754_atan2+0x110>
 800f218:	2c02      	cmp	r4, #2
 800f21a:	d015      	beq.n	800f248 <__ieee754_atan2+0x118>
 800f21c:	2c00      	cmp	r4, #0
 800f21e:	d0a8      	beq.n	800f172 <__ieee754_atan2+0x42>
 800f220:	a317      	add	r3, pc, #92	; (adr r3, 800f280 <__ieee754_atan2+0x150>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f1 f82f 	bl	8000288 <__aeabi_dsub>
 800f22a:	a317      	add	r3, pc, #92	; (adr r3, 800f288 <__ieee754_atan2+0x158>)
 800f22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f230:	e014      	b.n	800f25c <__ieee754_atan2+0x12c>
 800f232:	a117      	add	r1, pc, #92	; (adr r1, 800f290 <__ieee754_atan2+0x160>)
 800f234:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f238:	e7ec      	b.n	800f214 <__ieee754_atan2+0xe4>
 800f23a:	2000      	movs	r0, #0
 800f23c:	2100      	movs	r1, #0
 800f23e:	e7e9      	b.n	800f214 <__ieee754_atan2+0xe4>
 800f240:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f244:	4619      	mov	r1, r3
 800f246:	e794      	b.n	800f172 <__ieee754_atan2+0x42>
 800f248:	a30d      	add	r3, pc, #52	; (adr r3, 800f280 <__ieee754_atan2+0x150>)
 800f24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24e:	f7f1 f81b 	bl	8000288 <__aeabi_dsub>
 800f252:	4602      	mov	r2, r0
 800f254:	460b      	mov	r3, r1
 800f256:	a10c      	add	r1, pc, #48	; (adr r1, 800f288 <__ieee754_atan2+0x158>)
 800f258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f25c:	f7f1 f814 	bl	8000288 <__aeabi_dsub>
 800f260:	e787      	b.n	800f172 <__ieee754_atan2+0x42>
 800f262:	a109      	add	r1, pc, #36	; (adr r1, 800f288 <__ieee754_atan2+0x158>)
 800f264:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f268:	e783      	b.n	800f172 <__ieee754_atan2+0x42>
 800f26a:	a10b      	add	r1, pc, #44	; (adr r1, 800f298 <__ieee754_atan2+0x168>)
 800f26c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f270:	e77f      	b.n	800f172 <__ieee754_atan2+0x42>
 800f272:	2000      	movs	r0, #0
 800f274:	2100      	movs	r1, #0
 800f276:	e77c      	b.n	800f172 <__ieee754_atan2+0x42>
 800f278:	a105      	add	r1, pc, #20	; (adr r1, 800f290 <__ieee754_atan2+0x160>)
 800f27a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f27e:	e778      	b.n	800f172 <__ieee754_atan2+0x42>
 800f280:	33145c07 	.word	0x33145c07
 800f284:	3ca1a626 	.word	0x3ca1a626
 800f288:	54442d18 	.word	0x54442d18
 800f28c:	400921fb 	.word	0x400921fb
 800f290:	54442d18 	.word	0x54442d18
 800f294:	3ff921fb 	.word	0x3ff921fb
 800f298:	54442d18 	.word	0x54442d18
 800f29c:	3fe921fb 	.word	0x3fe921fb
 800f2a0:	08011c88 	.word	0x08011c88
 800f2a4:	08011ca0 	.word	0x08011ca0
 800f2a8:	54442d18 	.word	0x54442d18
 800f2ac:	c00921fb 	.word	0xc00921fb
 800f2b0:	54442d18 	.word	0x54442d18
 800f2b4:	bff921fb 	.word	0xbff921fb
 800f2b8:	7ff00000 	.word	0x7ff00000
 800f2bc:	00000000 	.word	0x00000000

0800f2c0 <__ieee754_pow>:
 800f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c4:	ed2d 8b06 	vpush	{d8-d10}
 800f2c8:	b089      	sub	sp, #36	; 0x24
 800f2ca:	ed8d 1b00 	vstr	d1, [sp]
 800f2ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f2d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f2d6:	ea58 0102 	orrs.w	r1, r8, r2
 800f2da:	ec57 6b10 	vmov	r6, r7, d0
 800f2de:	d115      	bne.n	800f30c <__ieee754_pow+0x4c>
 800f2e0:	19b3      	adds	r3, r6, r6
 800f2e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f2e6:	4152      	adcs	r2, r2
 800f2e8:	4299      	cmp	r1, r3
 800f2ea:	4b89      	ldr	r3, [pc, #548]	; (800f510 <__ieee754_pow+0x250>)
 800f2ec:	4193      	sbcs	r3, r2
 800f2ee:	f080 84d1 	bcs.w	800fc94 <__ieee754_pow+0x9d4>
 800f2f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2f6:	4630      	mov	r0, r6
 800f2f8:	4639      	mov	r1, r7
 800f2fa:	f7f0 ffc7 	bl	800028c <__adddf3>
 800f2fe:	ec41 0b10 	vmov	d0, r0, r1
 800f302:	b009      	add	sp, #36	; 0x24
 800f304:	ecbd 8b06 	vpop	{d8-d10}
 800f308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f30c:	4b81      	ldr	r3, [pc, #516]	; (800f514 <__ieee754_pow+0x254>)
 800f30e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f312:	429c      	cmp	r4, r3
 800f314:	ee10 aa10 	vmov	sl, s0
 800f318:	463d      	mov	r5, r7
 800f31a:	dc06      	bgt.n	800f32a <__ieee754_pow+0x6a>
 800f31c:	d101      	bne.n	800f322 <__ieee754_pow+0x62>
 800f31e:	2e00      	cmp	r6, #0
 800f320:	d1e7      	bne.n	800f2f2 <__ieee754_pow+0x32>
 800f322:	4598      	cmp	r8, r3
 800f324:	dc01      	bgt.n	800f32a <__ieee754_pow+0x6a>
 800f326:	d10f      	bne.n	800f348 <__ieee754_pow+0x88>
 800f328:	b172      	cbz	r2, 800f348 <__ieee754_pow+0x88>
 800f32a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f32e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f332:	ea55 050a 	orrs.w	r5, r5, sl
 800f336:	d1dc      	bne.n	800f2f2 <__ieee754_pow+0x32>
 800f338:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f33c:	18db      	adds	r3, r3, r3
 800f33e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f342:	4152      	adcs	r2, r2
 800f344:	429d      	cmp	r5, r3
 800f346:	e7d0      	b.n	800f2ea <__ieee754_pow+0x2a>
 800f348:	2d00      	cmp	r5, #0
 800f34a:	da3b      	bge.n	800f3c4 <__ieee754_pow+0x104>
 800f34c:	4b72      	ldr	r3, [pc, #456]	; (800f518 <__ieee754_pow+0x258>)
 800f34e:	4598      	cmp	r8, r3
 800f350:	dc51      	bgt.n	800f3f6 <__ieee754_pow+0x136>
 800f352:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f356:	4598      	cmp	r8, r3
 800f358:	f340 84ab 	ble.w	800fcb2 <__ieee754_pow+0x9f2>
 800f35c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f360:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f364:	2b14      	cmp	r3, #20
 800f366:	dd0f      	ble.n	800f388 <__ieee754_pow+0xc8>
 800f368:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f36c:	fa22 f103 	lsr.w	r1, r2, r3
 800f370:	fa01 f303 	lsl.w	r3, r1, r3
 800f374:	4293      	cmp	r3, r2
 800f376:	f040 849c 	bne.w	800fcb2 <__ieee754_pow+0x9f2>
 800f37a:	f001 0101 	and.w	r1, r1, #1
 800f37e:	f1c1 0302 	rsb	r3, r1, #2
 800f382:	9304      	str	r3, [sp, #16]
 800f384:	b182      	cbz	r2, 800f3a8 <__ieee754_pow+0xe8>
 800f386:	e05f      	b.n	800f448 <__ieee754_pow+0x188>
 800f388:	2a00      	cmp	r2, #0
 800f38a:	d15b      	bne.n	800f444 <__ieee754_pow+0x184>
 800f38c:	f1c3 0314 	rsb	r3, r3, #20
 800f390:	fa48 f103 	asr.w	r1, r8, r3
 800f394:	fa01 f303 	lsl.w	r3, r1, r3
 800f398:	4543      	cmp	r3, r8
 800f39a:	f040 8487 	bne.w	800fcac <__ieee754_pow+0x9ec>
 800f39e:	f001 0101 	and.w	r1, r1, #1
 800f3a2:	f1c1 0302 	rsb	r3, r1, #2
 800f3a6:	9304      	str	r3, [sp, #16]
 800f3a8:	4b5c      	ldr	r3, [pc, #368]	; (800f51c <__ieee754_pow+0x25c>)
 800f3aa:	4598      	cmp	r8, r3
 800f3ac:	d132      	bne.n	800f414 <__ieee754_pow+0x154>
 800f3ae:	f1b9 0f00 	cmp.w	r9, #0
 800f3b2:	f280 8477 	bge.w	800fca4 <__ieee754_pow+0x9e4>
 800f3b6:	4959      	ldr	r1, [pc, #356]	; (800f51c <__ieee754_pow+0x25c>)
 800f3b8:	4632      	mov	r2, r6
 800f3ba:	463b      	mov	r3, r7
 800f3bc:	2000      	movs	r0, #0
 800f3be:	f7f1 fa45 	bl	800084c <__aeabi_ddiv>
 800f3c2:	e79c      	b.n	800f2fe <__ieee754_pow+0x3e>
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	9304      	str	r3, [sp, #16]
 800f3c8:	2a00      	cmp	r2, #0
 800f3ca:	d13d      	bne.n	800f448 <__ieee754_pow+0x188>
 800f3cc:	4b51      	ldr	r3, [pc, #324]	; (800f514 <__ieee754_pow+0x254>)
 800f3ce:	4598      	cmp	r8, r3
 800f3d0:	d1ea      	bne.n	800f3a8 <__ieee754_pow+0xe8>
 800f3d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f3d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f3da:	ea53 030a 	orrs.w	r3, r3, sl
 800f3de:	f000 8459 	beq.w	800fc94 <__ieee754_pow+0x9d4>
 800f3e2:	4b4f      	ldr	r3, [pc, #316]	; (800f520 <__ieee754_pow+0x260>)
 800f3e4:	429c      	cmp	r4, r3
 800f3e6:	dd08      	ble.n	800f3fa <__ieee754_pow+0x13a>
 800f3e8:	f1b9 0f00 	cmp.w	r9, #0
 800f3ec:	f2c0 8456 	blt.w	800fc9c <__ieee754_pow+0x9dc>
 800f3f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3f4:	e783      	b.n	800f2fe <__ieee754_pow+0x3e>
 800f3f6:	2302      	movs	r3, #2
 800f3f8:	e7e5      	b.n	800f3c6 <__ieee754_pow+0x106>
 800f3fa:	f1b9 0f00 	cmp.w	r9, #0
 800f3fe:	f04f 0000 	mov.w	r0, #0
 800f402:	f04f 0100 	mov.w	r1, #0
 800f406:	f6bf af7a 	bge.w	800f2fe <__ieee754_pow+0x3e>
 800f40a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f40e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f412:	e774      	b.n	800f2fe <__ieee754_pow+0x3e>
 800f414:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f418:	d106      	bne.n	800f428 <__ieee754_pow+0x168>
 800f41a:	4632      	mov	r2, r6
 800f41c:	463b      	mov	r3, r7
 800f41e:	4630      	mov	r0, r6
 800f420:	4639      	mov	r1, r7
 800f422:	f7f1 f8e9 	bl	80005f8 <__aeabi_dmul>
 800f426:	e76a      	b.n	800f2fe <__ieee754_pow+0x3e>
 800f428:	4b3e      	ldr	r3, [pc, #248]	; (800f524 <__ieee754_pow+0x264>)
 800f42a:	4599      	cmp	r9, r3
 800f42c:	d10c      	bne.n	800f448 <__ieee754_pow+0x188>
 800f42e:	2d00      	cmp	r5, #0
 800f430:	db0a      	blt.n	800f448 <__ieee754_pow+0x188>
 800f432:	ec47 6b10 	vmov	d0, r6, r7
 800f436:	b009      	add	sp, #36	; 0x24
 800f438:	ecbd 8b06 	vpop	{d8-d10}
 800f43c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f440:	f7ff ba06 	b.w	800e850 <__ieee754_sqrt>
 800f444:	2300      	movs	r3, #0
 800f446:	9304      	str	r3, [sp, #16]
 800f448:	ec47 6b10 	vmov	d0, r6, r7
 800f44c:	f001 f80c 	bl	8010468 <fabs>
 800f450:	ec51 0b10 	vmov	r0, r1, d0
 800f454:	f1ba 0f00 	cmp.w	sl, #0
 800f458:	d129      	bne.n	800f4ae <__ieee754_pow+0x1ee>
 800f45a:	b124      	cbz	r4, 800f466 <__ieee754_pow+0x1a6>
 800f45c:	4b2f      	ldr	r3, [pc, #188]	; (800f51c <__ieee754_pow+0x25c>)
 800f45e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f462:	429a      	cmp	r2, r3
 800f464:	d123      	bne.n	800f4ae <__ieee754_pow+0x1ee>
 800f466:	f1b9 0f00 	cmp.w	r9, #0
 800f46a:	da05      	bge.n	800f478 <__ieee754_pow+0x1b8>
 800f46c:	4602      	mov	r2, r0
 800f46e:	460b      	mov	r3, r1
 800f470:	2000      	movs	r0, #0
 800f472:	492a      	ldr	r1, [pc, #168]	; (800f51c <__ieee754_pow+0x25c>)
 800f474:	f7f1 f9ea 	bl	800084c <__aeabi_ddiv>
 800f478:	2d00      	cmp	r5, #0
 800f47a:	f6bf af40 	bge.w	800f2fe <__ieee754_pow+0x3e>
 800f47e:	9b04      	ldr	r3, [sp, #16]
 800f480:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f484:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f488:	431c      	orrs	r4, r3
 800f48a:	d108      	bne.n	800f49e <__ieee754_pow+0x1de>
 800f48c:	4602      	mov	r2, r0
 800f48e:	460b      	mov	r3, r1
 800f490:	4610      	mov	r0, r2
 800f492:	4619      	mov	r1, r3
 800f494:	f7f0 fef8 	bl	8000288 <__aeabi_dsub>
 800f498:	4602      	mov	r2, r0
 800f49a:	460b      	mov	r3, r1
 800f49c:	e78f      	b.n	800f3be <__ieee754_pow+0xfe>
 800f49e:	9b04      	ldr	r3, [sp, #16]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	f47f af2c 	bne.w	800f2fe <__ieee754_pow+0x3e>
 800f4a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	e727      	b.n	800f2fe <__ieee754_pow+0x3e>
 800f4ae:	0feb      	lsrs	r3, r5, #31
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	9306      	str	r3, [sp, #24]
 800f4b4:	9a06      	ldr	r2, [sp, #24]
 800f4b6:	9b04      	ldr	r3, [sp, #16]
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	d102      	bne.n	800f4c2 <__ieee754_pow+0x202>
 800f4bc:	4632      	mov	r2, r6
 800f4be:	463b      	mov	r3, r7
 800f4c0:	e7e6      	b.n	800f490 <__ieee754_pow+0x1d0>
 800f4c2:	4b19      	ldr	r3, [pc, #100]	; (800f528 <__ieee754_pow+0x268>)
 800f4c4:	4598      	cmp	r8, r3
 800f4c6:	f340 80fb 	ble.w	800f6c0 <__ieee754_pow+0x400>
 800f4ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f4ce:	4598      	cmp	r8, r3
 800f4d0:	4b13      	ldr	r3, [pc, #76]	; (800f520 <__ieee754_pow+0x260>)
 800f4d2:	dd0c      	ble.n	800f4ee <__ieee754_pow+0x22e>
 800f4d4:	429c      	cmp	r4, r3
 800f4d6:	dc0f      	bgt.n	800f4f8 <__ieee754_pow+0x238>
 800f4d8:	f1b9 0f00 	cmp.w	r9, #0
 800f4dc:	da0f      	bge.n	800f4fe <__ieee754_pow+0x23e>
 800f4de:	2000      	movs	r0, #0
 800f4e0:	b009      	add	sp, #36	; 0x24
 800f4e2:	ecbd 8b06 	vpop	{d8-d10}
 800f4e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ea:	f001 b86e 	b.w	80105ca <__math_oflow>
 800f4ee:	429c      	cmp	r4, r3
 800f4f0:	dbf2      	blt.n	800f4d8 <__ieee754_pow+0x218>
 800f4f2:	4b0a      	ldr	r3, [pc, #40]	; (800f51c <__ieee754_pow+0x25c>)
 800f4f4:	429c      	cmp	r4, r3
 800f4f6:	dd19      	ble.n	800f52c <__ieee754_pow+0x26c>
 800f4f8:	f1b9 0f00 	cmp.w	r9, #0
 800f4fc:	dcef      	bgt.n	800f4de <__ieee754_pow+0x21e>
 800f4fe:	2000      	movs	r0, #0
 800f500:	b009      	add	sp, #36	; 0x24
 800f502:	ecbd 8b06 	vpop	{d8-d10}
 800f506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f50a:	f001 b855 	b.w	80105b8 <__math_uflow>
 800f50e:	bf00      	nop
 800f510:	fff00000 	.word	0xfff00000
 800f514:	7ff00000 	.word	0x7ff00000
 800f518:	433fffff 	.word	0x433fffff
 800f51c:	3ff00000 	.word	0x3ff00000
 800f520:	3fefffff 	.word	0x3fefffff
 800f524:	3fe00000 	.word	0x3fe00000
 800f528:	41e00000 	.word	0x41e00000
 800f52c:	4b60      	ldr	r3, [pc, #384]	; (800f6b0 <__ieee754_pow+0x3f0>)
 800f52e:	2200      	movs	r2, #0
 800f530:	f7f0 feaa 	bl	8000288 <__aeabi_dsub>
 800f534:	a354      	add	r3, pc, #336	; (adr r3, 800f688 <__ieee754_pow+0x3c8>)
 800f536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53a:	4604      	mov	r4, r0
 800f53c:	460d      	mov	r5, r1
 800f53e:	f7f1 f85b 	bl	80005f8 <__aeabi_dmul>
 800f542:	a353      	add	r3, pc, #332	; (adr r3, 800f690 <__ieee754_pow+0x3d0>)
 800f544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f548:	4606      	mov	r6, r0
 800f54a:	460f      	mov	r7, r1
 800f54c:	4620      	mov	r0, r4
 800f54e:	4629      	mov	r1, r5
 800f550:	f7f1 f852 	bl	80005f8 <__aeabi_dmul>
 800f554:	4b57      	ldr	r3, [pc, #348]	; (800f6b4 <__ieee754_pow+0x3f4>)
 800f556:	4682      	mov	sl, r0
 800f558:	468b      	mov	fp, r1
 800f55a:	2200      	movs	r2, #0
 800f55c:	4620      	mov	r0, r4
 800f55e:	4629      	mov	r1, r5
 800f560:	f7f1 f84a 	bl	80005f8 <__aeabi_dmul>
 800f564:	4602      	mov	r2, r0
 800f566:	460b      	mov	r3, r1
 800f568:	a14b      	add	r1, pc, #300	; (adr r1, 800f698 <__ieee754_pow+0x3d8>)
 800f56a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f56e:	f7f0 fe8b 	bl	8000288 <__aeabi_dsub>
 800f572:	4622      	mov	r2, r4
 800f574:	462b      	mov	r3, r5
 800f576:	f7f1 f83f 	bl	80005f8 <__aeabi_dmul>
 800f57a:	4602      	mov	r2, r0
 800f57c:	460b      	mov	r3, r1
 800f57e:	2000      	movs	r0, #0
 800f580:	494d      	ldr	r1, [pc, #308]	; (800f6b8 <__ieee754_pow+0x3f8>)
 800f582:	f7f0 fe81 	bl	8000288 <__aeabi_dsub>
 800f586:	4622      	mov	r2, r4
 800f588:	4680      	mov	r8, r0
 800f58a:	4689      	mov	r9, r1
 800f58c:	462b      	mov	r3, r5
 800f58e:	4620      	mov	r0, r4
 800f590:	4629      	mov	r1, r5
 800f592:	f7f1 f831 	bl	80005f8 <__aeabi_dmul>
 800f596:	4602      	mov	r2, r0
 800f598:	460b      	mov	r3, r1
 800f59a:	4640      	mov	r0, r8
 800f59c:	4649      	mov	r1, r9
 800f59e:	f7f1 f82b 	bl	80005f8 <__aeabi_dmul>
 800f5a2:	a33f      	add	r3, pc, #252	; (adr r3, 800f6a0 <__ieee754_pow+0x3e0>)
 800f5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a8:	f7f1 f826 	bl	80005f8 <__aeabi_dmul>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	4650      	mov	r0, sl
 800f5b2:	4659      	mov	r1, fp
 800f5b4:	f7f0 fe68 	bl	8000288 <__aeabi_dsub>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	4680      	mov	r8, r0
 800f5be:	4689      	mov	r9, r1
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	4639      	mov	r1, r7
 800f5c4:	f7f0 fe62 	bl	800028c <__adddf3>
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	4632      	mov	r2, r6
 800f5cc:	463b      	mov	r3, r7
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	460d      	mov	r5, r1
 800f5d2:	f7f0 fe59 	bl	8000288 <__aeabi_dsub>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	460b      	mov	r3, r1
 800f5da:	4640      	mov	r0, r8
 800f5dc:	4649      	mov	r1, r9
 800f5de:	f7f0 fe53 	bl	8000288 <__aeabi_dsub>
 800f5e2:	9b04      	ldr	r3, [sp, #16]
 800f5e4:	9a06      	ldr	r2, [sp, #24]
 800f5e6:	3b01      	subs	r3, #1
 800f5e8:	4313      	orrs	r3, r2
 800f5ea:	4682      	mov	sl, r0
 800f5ec:	468b      	mov	fp, r1
 800f5ee:	f040 81e7 	bne.w	800f9c0 <__ieee754_pow+0x700>
 800f5f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f6a8 <__ieee754_pow+0x3e8>
 800f5f6:	eeb0 8a47 	vmov.f32	s16, s14
 800f5fa:	eef0 8a67 	vmov.f32	s17, s15
 800f5fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f602:	2600      	movs	r6, #0
 800f604:	4632      	mov	r2, r6
 800f606:	463b      	mov	r3, r7
 800f608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f60c:	f7f0 fe3c 	bl	8000288 <__aeabi_dsub>
 800f610:	4622      	mov	r2, r4
 800f612:	462b      	mov	r3, r5
 800f614:	f7f0 fff0 	bl	80005f8 <__aeabi_dmul>
 800f618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f61c:	4680      	mov	r8, r0
 800f61e:	4689      	mov	r9, r1
 800f620:	4650      	mov	r0, sl
 800f622:	4659      	mov	r1, fp
 800f624:	f7f0 ffe8 	bl	80005f8 <__aeabi_dmul>
 800f628:	4602      	mov	r2, r0
 800f62a:	460b      	mov	r3, r1
 800f62c:	4640      	mov	r0, r8
 800f62e:	4649      	mov	r1, r9
 800f630:	f7f0 fe2c 	bl	800028c <__adddf3>
 800f634:	4632      	mov	r2, r6
 800f636:	463b      	mov	r3, r7
 800f638:	4680      	mov	r8, r0
 800f63a:	4689      	mov	r9, r1
 800f63c:	4620      	mov	r0, r4
 800f63e:	4629      	mov	r1, r5
 800f640:	f7f0 ffda 	bl	80005f8 <__aeabi_dmul>
 800f644:	460b      	mov	r3, r1
 800f646:	4604      	mov	r4, r0
 800f648:	460d      	mov	r5, r1
 800f64a:	4602      	mov	r2, r0
 800f64c:	4649      	mov	r1, r9
 800f64e:	4640      	mov	r0, r8
 800f650:	f7f0 fe1c 	bl	800028c <__adddf3>
 800f654:	4b19      	ldr	r3, [pc, #100]	; (800f6bc <__ieee754_pow+0x3fc>)
 800f656:	4299      	cmp	r1, r3
 800f658:	ec45 4b19 	vmov	d9, r4, r5
 800f65c:	4606      	mov	r6, r0
 800f65e:	460f      	mov	r7, r1
 800f660:	468b      	mov	fp, r1
 800f662:	f340 82f0 	ble.w	800fc46 <__ieee754_pow+0x986>
 800f666:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f66a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f66e:	4303      	orrs	r3, r0
 800f670:	f000 81e4 	beq.w	800fa3c <__ieee754_pow+0x77c>
 800f674:	ec51 0b18 	vmov	r0, r1, d8
 800f678:	2200      	movs	r2, #0
 800f67a:	2300      	movs	r3, #0
 800f67c:	f7f1 fa2e 	bl	8000adc <__aeabi_dcmplt>
 800f680:	3800      	subs	r0, #0
 800f682:	bf18      	it	ne
 800f684:	2001      	movne	r0, #1
 800f686:	e72b      	b.n	800f4e0 <__ieee754_pow+0x220>
 800f688:	60000000 	.word	0x60000000
 800f68c:	3ff71547 	.word	0x3ff71547
 800f690:	f85ddf44 	.word	0xf85ddf44
 800f694:	3e54ae0b 	.word	0x3e54ae0b
 800f698:	55555555 	.word	0x55555555
 800f69c:	3fd55555 	.word	0x3fd55555
 800f6a0:	652b82fe 	.word	0x652b82fe
 800f6a4:	3ff71547 	.word	0x3ff71547
 800f6a8:	00000000 	.word	0x00000000
 800f6ac:	bff00000 	.word	0xbff00000
 800f6b0:	3ff00000 	.word	0x3ff00000
 800f6b4:	3fd00000 	.word	0x3fd00000
 800f6b8:	3fe00000 	.word	0x3fe00000
 800f6bc:	408fffff 	.word	0x408fffff
 800f6c0:	4bd5      	ldr	r3, [pc, #852]	; (800fa18 <__ieee754_pow+0x758>)
 800f6c2:	402b      	ands	r3, r5
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	b92b      	cbnz	r3, 800f6d4 <__ieee754_pow+0x414>
 800f6c8:	4bd4      	ldr	r3, [pc, #848]	; (800fa1c <__ieee754_pow+0x75c>)
 800f6ca:	f7f0 ff95 	bl	80005f8 <__aeabi_dmul>
 800f6ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	1523      	asrs	r3, r4, #20
 800f6d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f6da:	4413      	add	r3, r2
 800f6dc:	9305      	str	r3, [sp, #20]
 800f6de:	4bd0      	ldr	r3, [pc, #832]	; (800fa20 <__ieee754_pow+0x760>)
 800f6e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f6e4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f6e8:	429c      	cmp	r4, r3
 800f6ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f6ee:	dd08      	ble.n	800f702 <__ieee754_pow+0x442>
 800f6f0:	4bcc      	ldr	r3, [pc, #816]	; (800fa24 <__ieee754_pow+0x764>)
 800f6f2:	429c      	cmp	r4, r3
 800f6f4:	f340 8162 	ble.w	800f9bc <__ieee754_pow+0x6fc>
 800f6f8:	9b05      	ldr	r3, [sp, #20]
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	9305      	str	r3, [sp, #20]
 800f6fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f702:	2400      	movs	r4, #0
 800f704:	00e3      	lsls	r3, r4, #3
 800f706:	9307      	str	r3, [sp, #28]
 800f708:	4bc7      	ldr	r3, [pc, #796]	; (800fa28 <__ieee754_pow+0x768>)
 800f70a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f70e:	ed93 7b00 	vldr	d7, [r3]
 800f712:	4629      	mov	r1, r5
 800f714:	ec53 2b17 	vmov	r2, r3, d7
 800f718:	eeb0 9a47 	vmov.f32	s18, s14
 800f71c:	eef0 9a67 	vmov.f32	s19, s15
 800f720:	4682      	mov	sl, r0
 800f722:	f7f0 fdb1 	bl	8000288 <__aeabi_dsub>
 800f726:	4652      	mov	r2, sl
 800f728:	4606      	mov	r6, r0
 800f72a:	460f      	mov	r7, r1
 800f72c:	462b      	mov	r3, r5
 800f72e:	ec51 0b19 	vmov	r0, r1, d9
 800f732:	f7f0 fdab 	bl	800028c <__adddf3>
 800f736:	4602      	mov	r2, r0
 800f738:	460b      	mov	r3, r1
 800f73a:	2000      	movs	r0, #0
 800f73c:	49bb      	ldr	r1, [pc, #748]	; (800fa2c <__ieee754_pow+0x76c>)
 800f73e:	f7f1 f885 	bl	800084c <__aeabi_ddiv>
 800f742:	ec41 0b1a 	vmov	d10, r0, r1
 800f746:	4602      	mov	r2, r0
 800f748:	460b      	mov	r3, r1
 800f74a:	4630      	mov	r0, r6
 800f74c:	4639      	mov	r1, r7
 800f74e:	f7f0 ff53 	bl	80005f8 <__aeabi_dmul>
 800f752:	2300      	movs	r3, #0
 800f754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f758:	9302      	str	r3, [sp, #8]
 800f75a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f75e:	46ab      	mov	fp, r5
 800f760:	106d      	asrs	r5, r5, #1
 800f762:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f766:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f76a:	ec41 0b18 	vmov	d8, r0, r1
 800f76e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f772:	2200      	movs	r2, #0
 800f774:	4640      	mov	r0, r8
 800f776:	4649      	mov	r1, r9
 800f778:	4614      	mov	r4, r2
 800f77a:	461d      	mov	r5, r3
 800f77c:	f7f0 ff3c 	bl	80005f8 <__aeabi_dmul>
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	4630      	mov	r0, r6
 800f786:	4639      	mov	r1, r7
 800f788:	f7f0 fd7e 	bl	8000288 <__aeabi_dsub>
 800f78c:	ec53 2b19 	vmov	r2, r3, d9
 800f790:	4606      	mov	r6, r0
 800f792:	460f      	mov	r7, r1
 800f794:	4620      	mov	r0, r4
 800f796:	4629      	mov	r1, r5
 800f798:	f7f0 fd76 	bl	8000288 <__aeabi_dsub>
 800f79c:	4602      	mov	r2, r0
 800f79e:	460b      	mov	r3, r1
 800f7a0:	4650      	mov	r0, sl
 800f7a2:	4659      	mov	r1, fp
 800f7a4:	f7f0 fd70 	bl	8000288 <__aeabi_dsub>
 800f7a8:	4642      	mov	r2, r8
 800f7aa:	464b      	mov	r3, r9
 800f7ac:	f7f0 ff24 	bl	80005f8 <__aeabi_dmul>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	4639      	mov	r1, r7
 800f7b8:	f7f0 fd66 	bl	8000288 <__aeabi_dsub>
 800f7bc:	ec53 2b1a 	vmov	r2, r3, d10
 800f7c0:	f7f0 ff1a 	bl	80005f8 <__aeabi_dmul>
 800f7c4:	ec53 2b18 	vmov	r2, r3, d8
 800f7c8:	ec41 0b19 	vmov	d9, r0, r1
 800f7cc:	ec51 0b18 	vmov	r0, r1, d8
 800f7d0:	f7f0 ff12 	bl	80005f8 <__aeabi_dmul>
 800f7d4:	a37c      	add	r3, pc, #496	; (adr r3, 800f9c8 <__ieee754_pow+0x708>)
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	4604      	mov	r4, r0
 800f7dc:	460d      	mov	r5, r1
 800f7de:	f7f0 ff0b 	bl	80005f8 <__aeabi_dmul>
 800f7e2:	a37b      	add	r3, pc, #492	; (adr r3, 800f9d0 <__ieee754_pow+0x710>)
 800f7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e8:	f7f0 fd50 	bl	800028c <__adddf3>
 800f7ec:	4622      	mov	r2, r4
 800f7ee:	462b      	mov	r3, r5
 800f7f0:	f7f0 ff02 	bl	80005f8 <__aeabi_dmul>
 800f7f4:	a378      	add	r3, pc, #480	; (adr r3, 800f9d8 <__ieee754_pow+0x718>)
 800f7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fa:	f7f0 fd47 	bl	800028c <__adddf3>
 800f7fe:	4622      	mov	r2, r4
 800f800:	462b      	mov	r3, r5
 800f802:	f7f0 fef9 	bl	80005f8 <__aeabi_dmul>
 800f806:	a376      	add	r3, pc, #472	; (adr r3, 800f9e0 <__ieee754_pow+0x720>)
 800f808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80c:	f7f0 fd3e 	bl	800028c <__adddf3>
 800f810:	4622      	mov	r2, r4
 800f812:	462b      	mov	r3, r5
 800f814:	f7f0 fef0 	bl	80005f8 <__aeabi_dmul>
 800f818:	a373      	add	r3, pc, #460	; (adr r3, 800f9e8 <__ieee754_pow+0x728>)
 800f81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81e:	f7f0 fd35 	bl	800028c <__adddf3>
 800f822:	4622      	mov	r2, r4
 800f824:	462b      	mov	r3, r5
 800f826:	f7f0 fee7 	bl	80005f8 <__aeabi_dmul>
 800f82a:	a371      	add	r3, pc, #452	; (adr r3, 800f9f0 <__ieee754_pow+0x730>)
 800f82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f830:	f7f0 fd2c 	bl	800028c <__adddf3>
 800f834:	4622      	mov	r2, r4
 800f836:	4606      	mov	r6, r0
 800f838:	460f      	mov	r7, r1
 800f83a:	462b      	mov	r3, r5
 800f83c:	4620      	mov	r0, r4
 800f83e:	4629      	mov	r1, r5
 800f840:	f7f0 feda 	bl	80005f8 <__aeabi_dmul>
 800f844:	4602      	mov	r2, r0
 800f846:	460b      	mov	r3, r1
 800f848:	4630      	mov	r0, r6
 800f84a:	4639      	mov	r1, r7
 800f84c:	f7f0 fed4 	bl	80005f8 <__aeabi_dmul>
 800f850:	4642      	mov	r2, r8
 800f852:	4604      	mov	r4, r0
 800f854:	460d      	mov	r5, r1
 800f856:	464b      	mov	r3, r9
 800f858:	ec51 0b18 	vmov	r0, r1, d8
 800f85c:	f7f0 fd16 	bl	800028c <__adddf3>
 800f860:	ec53 2b19 	vmov	r2, r3, d9
 800f864:	f7f0 fec8 	bl	80005f8 <__aeabi_dmul>
 800f868:	4622      	mov	r2, r4
 800f86a:	462b      	mov	r3, r5
 800f86c:	f7f0 fd0e 	bl	800028c <__adddf3>
 800f870:	4642      	mov	r2, r8
 800f872:	4682      	mov	sl, r0
 800f874:	468b      	mov	fp, r1
 800f876:	464b      	mov	r3, r9
 800f878:	4640      	mov	r0, r8
 800f87a:	4649      	mov	r1, r9
 800f87c:	f7f0 febc 	bl	80005f8 <__aeabi_dmul>
 800f880:	4b6b      	ldr	r3, [pc, #428]	; (800fa30 <__ieee754_pow+0x770>)
 800f882:	2200      	movs	r2, #0
 800f884:	4606      	mov	r6, r0
 800f886:	460f      	mov	r7, r1
 800f888:	f7f0 fd00 	bl	800028c <__adddf3>
 800f88c:	4652      	mov	r2, sl
 800f88e:	465b      	mov	r3, fp
 800f890:	f7f0 fcfc 	bl	800028c <__adddf3>
 800f894:	2000      	movs	r0, #0
 800f896:	4604      	mov	r4, r0
 800f898:	460d      	mov	r5, r1
 800f89a:	4602      	mov	r2, r0
 800f89c:	460b      	mov	r3, r1
 800f89e:	4640      	mov	r0, r8
 800f8a0:	4649      	mov	r1, r9
 800f8a2:	f7f0 fea9 	bl	80005f8 <__aeabi_dmul>
 800f8a6:	4b62      	ldr	r3, [pc, #392]	; (800fa30 <__ieee754_pow+0x770>)
 800f8a8:	4680      	mov	r8, r0
 800f8aa:	4689      	mov	r9, r1
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	4629      	mov	r1, r5
 800f8b2:	f7f0 fce9 	bl	8000288 <__aeabi_dsub>
 800f8b6:	4632      	mov	r2, r6
 800f8b8:	463b      	mov	r3, r7
 800f8ba:	f7f0 fce5 	bl	8000288 <__aeabi_dsub>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	4650      	mov	r0, sl
 800f8c4:	4659      	mov	r1, fp
 800f8c6:	f7f0 fcdf 	bl	8000288 <__aeabi_dsub>
 800f8ca:	ec53 2b18 	vmov	r2, r3, d8
 800f8ce:	f7f0 fe93 	bl	80005f8 <__aeabi_dmul>
 800f8d2:	4622      	mov	r2, r4
 800f8d4:	4606      	mov	r6, r0
 800f8d6:	460f      	mov	r7, r1
 800f8d8:	462b      	mov	r3, r5
 800f8da:	ec51 0b19 	vmov	r0, r1, d9
 800f8de:	f7f0 fe8b 	bl	80005f8 <__aeabi_dmul>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	4639      	mov	r1, r7
 800f8ea:	f7f0 fccf 	bl	800028c <__adddf3>
 800f8ee:	4606      	mov	r6, r0
 800f8f0:	460f      	mov	r7, r1
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	4640      	mov	r0, r8
 800f8f8:	4649      	mov	r1, r9
 800f8fa:	f7f0 fcc7 	bl	800028c <__adddf3>
 800f8fe:	a33e      	add	r3, pc, #248	; (adr r3, 800f9f8 <__ieee754_pow+0x738>)
 800f900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f904:	2000      	movs	r0, #0
 800f906:	4604      	mov	r4, r0
 800f908:	460d      	mov	r5, r1
 800f90a:	f7f0 fe75 	bl	80005f8 <__aeabi_dmul>
 800f90e:	4642      	mov	r2, r8
 800f910:	ec41 0b18 	vmov	d8, r0, r1
 800f914:	464b      	mov	r3, r9
 800f916:	4620      	mov	r0, r4
 800f918:	4629      	mov	r1, r5
 800f91a:	f7f0 fcb5 	bl	8000288 <__aeabi_dsub>
 800f91e:	4602      	mov	r2, r0
 800f920:	460b      	mov	r3, r1
 800f922:	4630      	mov	r0, r6
 800f924:	4639      	mov	r1, r7
 800f926:	f7f0 fcaf 	bl	8000288 <__aeabi_dsub>
 800f92a:	a335      	add	r3, pc, #212	; (adr r3, 800fa00 <__ieee754_pow+0x740>)
 800f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f930:	f7f0 fe62 	bl	80005f8 <__aeabi_dmul>
 800f934:	a334      	add	r3, pc, #208	; (adr r3, 800fa08 <__ieee754_pow+0x748>)
 800f936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93a:	4606      	mov	r6, r0
 800f93c:	460f      	mov	r7, r1
 800f93e:	4620      	mov	r0, r4
 800f940:	4629      	mov	r1, r5
 800f942:	f7f0 fe59 	bl	80005f8 <__aeabi_dmul>
 800f946:	4602      	mov	r2, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	4630      	mov	r0, r6
 800f94c:	4639      	mov	r1, r7
 800f94e:	f7f0 fc9d 	bl	800028c <__adddf3>
 800f952:	9a07      	ldr	r2, [sp, #28]
 800f954:	4b37      	ldr	r3, [pc, #220]	; (800fa34 <__ieee754_pow+0x774>)
 800f956:	4413      	add	r3, r2
 800f958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95c:	f7f0 fc96 	bl	800028c <__adddf3>
 800f960:	4682      	mov	sl, r0
 800f962:	9805      	ldr	r0, [sp, #20]
 800f964:	468b      	mov	fp, r1
 800f966:	f7f0 fddd 	bl	8000524 <__aeabi_i2d>
 800f96a:	9a07      	ldr	r2, [sp, #28]
 800f96c:	4b32      	ldr	r3, [pc, #200]	; (800fa38 <__ieee754_pow+0x778>)
 800f96e:	4413      	add	r3, r2
 800f970:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f974:	4606      	mov	r6, r0
 800f976:	460f      	mov	r7, r1
 800f978:	4652      	mov	r2, sl
 800f97a:	465b      	mov	r3, fp
 800f97c:	ec51 0b18 	vmov	r0, r1, d8
 800f980:	f7f0 fc84 	bl	800028c <__adddf3>
 800f984:	4642      	mov	r2, r8
 800f986:	464b      	mov	r3, r9
 800f988:	f7f0 fc80 	bl	800028c <__adddf3>
 800f98c:	4632      	mov	r2, r6
 800f98e:	463b      	mov	r3, r7
 800f990:	f7f0 fc7c 	bl	800028c <__adddf3>
 800f994:	2000      	movs	r0, #0
 800f996:	4632      	mov	r2, r6
 800f998:	463b      	mov	r3, r7
 800f99a:	4604      	mov	r4, r0
 800f99c:	460d      	mov	r5, r1
 800f99e:	f7f0 fc73 	bl	8000288 <__aeabi_dsub>
 800f9a2:	4642      	mov	r2, r8
 800f9a4:	464b      	mov	r3, r9
 800f9a6:	f7f0 fc6f 	bl	8000288 <__aeabi_dsub>
 800f9aa:	ec53 2b18 	vmov	r2, r3, d8
 800f9ae:	f7f0 fc6b 	bl	8000288 <__aeabi_dsub>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	4650      	mov	r0, sl
 800f9b8:	4659      	mov	r1, fp
 800f9ba:	e610      	b.n	800f5de <__ieee754_pow+0x31e>
 800f9bc:	2401      	movs	r4, #1
 800f9be:	e6a1      	b.n	800f704 <__ieee754_pow+0x444>
 800f9c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800fa10 <__ieee754_pow+0x750>
 800f9c4:	e617      	b.n	800f5f6 <__ieee754_pow+0x336>
 800f9c6:	bf00      	nop
 800f9c8:	4a454eef 	.word	0x4a454eef
 800f9cc:	3fca7e28 	.word	0x3fca7e28
 800f9d0:	93c9db65 	.word	0x93c9db65
 800f9d4:	3fcd864a 	.word	0x3fcd864a
 800f9d8:	a91d4101 	.word	0xa91d4101
 800f9dc:	3fd17460 	.word	0x3fd17460
 800f9e0:	518f264d 	.word	0x518f264d
 800f9e4:	3fd55555 	.word	0x3fd55555
 800f9e8:	db6fabff 	.word	0xdb6fabff
 800f9ec:	3fdb6db6 	.word	0x3fdb6db6
 800f9f0:	33333303 	.word	0x33333303
 800f9f4:	3fe33333 	.word	0x3fe33333
 800f9f8:	e0000000 	.word	0xe0000000
 800f9fc:	3feec709 	.word	0x3feec709
 800fa00:	dc3a03fd 	.word	0xdc3a03fd
 800fa04:	3feec709 	.word	0x3feec709
 800fa08:	145b01f5 	.word	0x145b01f5
 800fa0c:	be3e2fe0 	.word	0xbe3e2fe0
 800fa10:	00000000 	.word	0x00000000
 800fa14:	3ff00000 	.word	0x3ff00000
 800fa18:	7ff00000 	.word	0x7ff00000
 800fa1c:	43400000 	.word	0x43400000
 800fa20:	0003988e 	.word	0x0003988e
 800fa24:	000bb679 	.word	0x000bb679
 800fa28:	08011cb8 	.word	0x08011cb8
 800fa2c:	3ff00000 	.word	0x3ff00000
 800fa30:	40080000 	.word	0x40080000
 800fa34:	08011cd8 	.word	0x08011cd8
 800fa38:	08011cc8 	.word	0x08011cc8
 800fa3c:	a3b3      	add	r3, pc, #716	; (adr r3, 800fd0c <__ieee754_pow+0xa4c>)
 800fa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa42:	4640      	mov	r0, r8
 800fa44:	4649      	mov	r1, r9
 800fa46:	f7f0 fc21 	bl	800028c <__adddf3>
 800fa4a:	4622      	mov	r2, r4
 800fa4c:	ec41 0b1a 	vmov	d10, r0, r1
 800fa50:	462b      	mov	r3, r5
 800fa52:	4630      	mov	r0, r6
 800fa54:	4639      	mov	r1, r7
 800fa56:	f7f0 fc17 	bl	8000288 <__aeabi_dsub>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	ec51 0b1a 	vmov	r0, r1, d10
 800fa62:	f7f1 f859 	bl	8000b18 <__aeabi_dcmpgt>
 800fa66:	2800      	cmp	r0, #0
 800fa68:	f47f ae04 	bne.w	800f674 <__ieee754_pow+0x3b4>
 800fa6c:	4aa2      	ldr	r2, [pc, #648]	; (800fcf8 <__ieee754_pow+0xa38>)
 800fa6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa72:	4293      	cmp	r3, r2
 800fa74:	f340 8107 	ble.w	800fc86 <__ieee754_pow+0x9c6>
 800fa78:	151b      	asrs	r3, r3, #20
 800fa7a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fa7e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fa82:	fa4a fa03 	asr.w	sl, sl, r3
 800fa86:	44da      	add	sl, fp
 800fa88:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800fa8c:	489b      	ldr	r0, [pc, #620]	; (800fcfc <__ieee754_pow+0xa3c>)
 800fa8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800fa92:	4108      	asrs	r0, r1
 800fa94:	ea00 030a 	and.w	r3, r0, sl
 800fa98:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800fa9c:	f1c1 0114 	rsb	r1, r1, #20
 800faa0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800faa4:	fa4a fa01 	asr.w	sl, sl, r1
 800faa8:	f1bb 0f00 	cmp.w	fp, #0
 800faac:	f04f 0200 	mov.w	r2, #0
 800fab0:	4620      	mov	r0, r4
 800fab2:	4629      	mov	r1, r5
 800fab4:	bfb8      	it	lt
 800fab6:	f1ca 0a00 	rsblt	sl, sl, #0
 800faba:	f7f0 fbe5 	bl	8000288 <__aeabi_dsub>
 800fabe:	ec41 0b19 	vmov	d9, r0, r1
 800fac2:	4642      	mov	r2, r8
 800fac4:	464b      	mov	r3, r9
 800fac6:	ec51 0b19 	vmov	r0, r1, d9
 800faca:	f7f0 fbdf 	bl	800028c <__adddf3>
 800face:	a37a      	add	r3, pc, #488	; (adr r3, 800fcb8 <__ieee754_pow+0x9f8>)
 800fad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad4:	2000      	movs	r0, #0
 800fad6:	4604      	mov	r4, r0
 800fad8:	460d      	mov	r5, r1
 800fada:	f7f0 fd8d 	bl	80005f8 <__aeabi_dmul>
 800fade:	ec53 2b19 	vmov	r2, r3, d9
 800fae2:	4606      	mov	r6, r0
 800fae4:	460f      	mov	r7, r1
 800fae6:	4620      	mov	r0, r4
 800fae8:	4629      	mov	r1, r5
 800faea:	f7f0 fbcd 	bl	8000288 <__aeabi_dsub>
 800faee:	4602      	mov	r2, r0
 800faf0:	460b      	mov	r3, r1
 800faf2:	4640      	mov	r0, r8
 800faf4:	4649      	mov	r1, r9
 800faf6:	f7f0 fbc7 	bl	8000288 <__aeabi_dsub>
 800fafa:	a371      	add	r3, pc, #452	; (adr r3, 800fcc0 <__ieee754_pow+0xa00>)
 800fafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb00:	f7f0 fd7a 	bl	80005f8 <__aeabi_dmul>
 800fb04:	a370      	add	r3, pc, #448	; (adr r3, 800fcc8 <__ieee754_pow+0xa08>)
 800fb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0a:	4680      	mov	r8, r0
 800fb0c:	4689      	mov	r9, r1
 800fb0e:	4620      	mov	r0, r4
 800fb10:	4629      	mov	r1, r5
 800fb12:	f7f0 fd71 	bl	80005f8 <__aeabi_dmul>
 800fb16:	4602      	mov	r2, r0
 800fb18:	460b      	mov	r3, r1
 800fb1a:	4640      	mov	r0, r8
 800fb1c:	4649      	mov	r1, r9
 800fb1e:	f7f0 fbb5 	bl	800028c <__adddf3>
 800fb22:	4604      	mov	r4, r0
 800fb24:	460d      	mov	r5, r1
 800fb26:	4602      	mov	r2, r0
 800fb28:	460b      	mov	r3, r1
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	4639      	mov	r1, r7
 800fb2e:	f7f0 fbad 	bl	800028c <__adddf3>
 800fb32:	4632      	mov	r2, r6
 800fb34:	463b      	mov	r3, r7
 800fb36:	4680      	mov	r8, r0
 800fb38:	4689      	mov	r9, r1
 800fb3a:	f7f0 fba5 	bl	8000288 <__aeabi_dsub>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	460b      	mov	r3, r1
 800fb42:	4620      	mov	r0, r4
 800fb44:	4629      	mov	r1, r5
 800fb46:	f7f0 fb9f 	bl	8000288 <__aeabi_dsub>
 800fb4a:	4642      	mov	r2, r8
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	460f      	mov	r7, r1
 800fb50:	464b      	mov	r3, r9
 800fb52:	4640      	mov	r0, r8
 800fb54:	4649      	mov	r1, r9
 800fb56:	f7f0 fd4f 	bl	80005f8 <__aeabi_dmul>
 800fb5a:	a35d      	add	r3, pc, #372	; (adr r3, 800fcd0 <__ieee754_pow+0xa10>)
 800fb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb60:	4604      	mov	r4, r0
 800fb62:	460d      	mov	r5, r1
 800fb64:	f7f0 fd48 	bl	80005f8 <__aeabi_dmul>
 800fb68:	a35b      	add	r3, pc, #364	; (adr r3, 800fcd8 <__ieee754_pow+0xa18>)
 800fb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6e:	f7f0 fb8b 	bl	8000288 <__aeabi_dsub>
 800fb72:	4622      	mov	r2, r4
 800fb74:	462b      	mov	r3, r5
 800fb76:	f7f0 fd3f 	bl	80005f8 <__aeabi_dmul>
 800fb7a:	a359      	add	r3, pc, #356	; (adr r3, 800fce0 <__ieee754_pow+0xa20>)
 800fb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb80:	f7f0 fb84 	bl	800028c <__adddf3>
 800fb84:	4622      	mov	r2, r4
 800fb86:	462b      	mov	r3, r5
 800fb88:	f7f0 fd36 	bl	80005f8 <__aeabi_dmul>
 800fb8c:	a356      	add	r3, pc, #344	; (adr r3, 800fce8 <__ieee754_pow+0xa28>)
 800fb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb92:	f7f0 fb79 	bl	8000288 <__aeabi_dsub>
 800fb96:	4622      	mov	r2, r4
 800fb98:	462b      	mov	r3, r5
 800fb9a:	f7f0 fd2d 	bl	80005f8 <__aeabi_dmul>
 800fb9e:	a354      	add	r3, pc, #336	; (adr r3, 800fcf0 <__ieee754_pow+0xa30>)
 800fba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba4:	f7f0 fb72 	bl	800028c <__adddf3>
 800fba8:	4622      	mov	r2, r4
 800fbaa:	462b      	mov	r3, r5
 800fbac:	f7f0 fd24 	bl	80005f8 <__aeabi_dmul>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	4640      	mov	r0, r8
 800fbb6:	4649      	mov	r1, r9
 800fbb8:	f7f0 fb66 	bl	8000288 <__aeabi_dsub>
 800fbbc:	4604      	mov	r4, r0
 800fbbe:	460d      	mov	r5, r1
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	4640      	mov	r0, r8
 800fbc6:	4649      	mov	r1, r9
 800fbc8:	f7f0 fd16 	bl	80005f8 <__aeabi_dmul>
 800fbcc:	2200      	movs	r2, #0
 800fbce:	ec41 0b19 	vmov	d9, r0, r1
 800fbd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	4629      	mov	r1, r5
 800fbda:	f7f0 fb55 	bl	8000288 <__aeabi_dsub>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	ec51 0b19 	vmov	r0, r1, d9
 800fbe6:	f7f0 fe31 	bl	800084c <__aeabi_ddiv>
 800fbea:	4632      	mov	r2, r6
 800fbec:	4604      	mov	r4, r0
 800fbee:	460d      	mov	r5, r1
 800fbf0:	463b      	mov	r3, r7
 800fbf2:	4640      	mov	r0, r8
 800fbf4:	4649      	mov	r1, r9
 800fbf6:	f7f0 fcff 	bl	80005f8 <__aeabi_dmul>
 800fbfa:	4632      	mov	r2, r6
 800fbfc:	463b      	mov	r3, r7
 800fbfe:	f7f0 fb45 	bl	800028c <__adddf3>
 800fc02:	4602      	mov	r2, r0
 800fc04:	460b      	mov	r3, r1
 800fc06:	4620      	mov	r0, r4
 800fc08:	4629      	mov	r1, r5
 800fc0a:	f7f0 fb3d 	bl	8000288 <__aeabi_dsub>
 800fc0e:	4642      	mov	r2, r8
 800fc10:	464b      	mov	r3, r9
 800fc12:	f7f0 fb39 	bl	8000288 <__aeabi_dsub>
 800fc16:	460b      	mov	r3, r1
 800fc18:	4602      	mov	r2, r0
 800fc1a:	4939      	ldr	r1, [pc, #228]	; (800fd00 <__ieee754_pow+0xa40>)
 800fc1c:	2000      	movs	r0, #0
 800fc1e:	f7f0 fb33 	bl	8000288 <__aeabi_dsub>
 800fc22:	ec41 0b10 	vmov	d0, r0, r1
 800fc26:	ee10 3a90 	vmov	r3, s1
 800fc2a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fc2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc32:	da2b      	bge.n	800fc8c <__ieee754_pow+0x9cc>
 800fc34:	4650      	mov	r0, sl
 800fc36:	f000 fc23 	bl	8010480 <scalbn>
 800fc3a:	ec51 0b10 	vmov	r0, r1, d0
 800fc3e:	ec53 2b18 	vmov	r2, r3, d8
 800fc42:	f7ff bbee 	b.w	800f422 <__ieee754_pow+0x162>
 800fc46:	4b2f      	ldr	r3, [pc, #188]	; (800fd04 <__ieee754_pow+0xa44>)
 800fc48:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fc4c:	429e      	cmp	r6, r3
 800fc4e:	f77f af0d 	ble.w	800fa6c <__ieee754_pow+0x7ac>
 800fc52:	4b2d      	ldr	r3, [pc, #180]	; (800fd08 <__ieee754_pow+0xa48>)
 800fc54:	440b      	add	r3, r1
 800fc56:	4303      	orrs	r3, r0
 800fc58:	d009      	beq.n	800fc6e <__ieee754_pow+0x9ae>
 800fc5a:	ec51 0b18 	vmov	r0, r1, d8
 800fc5e:	2200      	movs	r2, #0
 800fc60:	2300      	movs	r3, #0
 800fc62:	f7f0 ff3b 	bl	8000adc <__aeabi_dcmplt>
 800fc66:	3800      	subs	r0, #0
 800fc68:	bf18      	it	ne
 800fc6a:	2001      	movne	r0, #1
 800fc6c:	e448      	b.n	800f500 <__ieee754_pow+0x240>
 800fc6e:	4622      	mov	r2, r4
 800fc70:	462b      	mov	r3, r5
 800fc72:	f7f0 fb09 	bl	8000288 <__aeabi_dsub>
 800fc76:	4642      	mov	r2, r8
 800fc78:	464b      	mov	r3, r9
 800fc7a:	f7f0 ff43 	bl	8000b04 <__aeabi_dcmpge>
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	f43f aef4 	beq.w	800fa6c <__ieee754_pow+0x7ac>
 800fc84:	e7e9      	b.n	800fc5a <__ieee754_pow+0x99a>
 800fc86:	f04f 0a00 	mov.w	sl, #0
 800fc8a:	e71a      	b.n	800fac2 <__ieee754_pow+0x802>
 800fc8c:	ec51 0b10 	vmov	r0, r1, d0
 800fc90:	4619      	mov	r1, r3
 800fc92:	e7d4      	b.n	800fc3e <__ieee754_pow+0x97e>
 800fc94:	491a      	ldr	r1, [pc, #104]	; (800fd00 <__ieee754_pow+0xa40>)
 800fc96:	2000      	movs	r0, #0
 800fc98:	f7ff bb31 	b.w	800f2fe <__ieee754_pow+0x3e>
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	2100      	movs	r1, #0
 800fca0:	f7ff bb2d 	b.w	800f2fe <__ieee754_pow+0x3e>
 800fca4:	4630      	mov	r0, r6
 800fca6:	4639      	mov	r1, r7
 800fca8:	f7ff bb29 	b.w	800f2fe <__ieee754_pow+0x3e>
 800fcac:	9204      	str	r2, [sp, #16]
 800fcae:	f7ff bb7b 	b.w	800f3a8 <__ieee754_pow+0xe8>
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	f7ff bb65 	b.w	800f382 <__ieee754_pow+0xc2>
 800fcb8:	00000000 	.word	0x00000000
 800fcbc:	3fe62e43 	.word	0x3fe62e43
 800fcc0:	fefa39ef 	.word	0xfefa39ef
 800fcc4:	3fe62e42 	.word	0x3fe62e42
 800fcc8:	0ca86c39 	.word	0x0ca86c39
 800fccc:	be205c61 	.word	0xbe205c61
 800fcd0:	72bea4d0 	.word	0x72bea4d0
 800fcd4:	3e663769 	.word	0x3e663769
 800fcd8:	c5d26bf1 	.word	0xc5d26bf1
 800fcdc:	3ebbbd41 	.word	0x3ebbbd41
 800fce0:	af25de2c 	.word	0xaf25de2c
 800fce4:	3f11566a 	.word	0x3f11566a
 800fce8:	16bebd93 	.word	0x16bebd93
 800fcec:	3f66c16c 	.word	0x3f66c16c
 800fcf0:	5555553e 	.word	0x5555553e
 800fcf4:	3fc55555 	.word	0x3fc55555
 800fcf8:	3fe00000 	.word	0x3fe00000
 800fcfc:	fff00000 	.word	0xfff00000
 800fd00:	3ff00000 	.word	0x3ff00000
 800fd04:	4090cbff 	.word	0x4090cbff
 800fd08:	3f6f3400 	.word	0x3f6f3400
 800fd0c:	652b82fe 	.word	0x652b82fe
 800fd10:	3c971547 	.word	0x3c971547
 800fd14:	00000000 	.word	0x00000000

0800fd18 <__ieee754_rem_pio2>:
 800fd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd1c:	ed2d 8b02 	vpush	{d8}
 800fd20:	ec55 4b10 	vmov	r4, r5, d0
 800fd24:	4bca      	ldr	r3, [pc, #808]	; (8010050 <__ieee754_rem_pio2+0x338>)
 800fd26:	b08b      	sub	sp, #44	; 0x2c
 800fd28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800fd2c:	4598      	cmp	r8, r3
 800fd2e:	4682      	mov	sl, r0
 800fd30:	9502      	str	r5, [sp, #8]
 800fd32:	dc08      	bgt.n	800fd46 <__ieee754_rem_pio2+0x2e>
 800fd34:	2200      	movs	r2, #0
 800fd36:	2300      	movs	r3, #0
 800fd38:	ed80 0b00 	vstr	d0, [r0]
 800fd3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fd40:	f04f 0b00 	mov.w	fp, #0
 800fd44:	e028      	b.n	800fd98 <__ieee754_rem_pio2+0x80>
 800fd46:	4bc3      	ldr	r3, [pc, #780]	; (8010054 <__ieee754_rem_pio2+0x33c>)
 800fd48:	4598      	cmp	r8, r3
 800fd4a:	dc78      	bgt.n	800fe3e <__ieee754_rem_pio2+0x126>
 800fd4c:	9b02      	ldr	r3, [sp, #8]
 800fd4e:	4ec2      	ldr	r6, [pc, #776]	; (8010058 <__ieee754_rem_pio2+0x340>)
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	ee10 0a10 	vmov	r0, s0
 800fd56:	a3b0      	add	r3, pc, #704	; (adr r3, 8010018 <__ieee754_rem_pio2+0x300>)
 800fd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	dd39      	ble.n	800fdd4 <__ieee754_rem_pio2+0xbc>
 800fd60:	f7f0 fa92 	bl	8000288 <__aeabi_dsub>
 800fd64:	45b0      	cmp	r8, r6
 800fd66:	4604      	mov	r4, r0
 800fd68:	460d      	mov	r5, r1
 800fd6a:	d01b      	beq.n	800fda4 <__ieee754_rem_pio2+0x8c>
 800fd6c:	a3ac      	add	r3, pc, #688	; (adr r3, 8010020 <__ieee754_rem_pio2+0x308>)
 800fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd72:	f7f0 fa89 	bl	8000288 <__aeabi_dsub>
 800fd76:	4602      	mov	r2, r0
 800fd78:	460b      	mov	r3, r1
 800fd7a:	e9ca 2300 	strd	r2, r3, [sl]
 800fd7e:	4620      	mov	r0, r4
 800fd80:	4629      	mov	r1, r5
 800fd82:	f7f0 fa81 	bl	8000288 <__aeabi_dsub>
 800fd86:	a3a6      	add	r3, pc, #664	; (adr r3, 8010020 <__ieee754_rem_pio2+0x308>)
 800fd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8c:	f7f0 fa7c 	bl	8000288 <__aeabi_dsub>
 800fd90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fd94:	f04f 0b01 	mov.w	fp, #1
 800fd98:	4658      	mov	r0, fp
 800fd9a:	b00b      	add	sp, #44	; 0x2c
 800fd9c:	ecbd 8b02 	vpop	{d8}
 800fda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda4:	a3a0      	add	r3, pc, #640	; (adr r3, 8010028 <__ieee754_rem_pio2+0x310>)
 800fda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdaa:	f7f0 fa6d 	bl	8000288 <__aeabi_dsub>
 800fdae:	a3a0      	add	r3, pc, #640	; (adr r3, 8010030 <__ieee754_rem_pio2+0x318>)
 800fdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	460d      	mov	r5, r1
 800fdb8:	f7f0 fa66 	bl	8000288 <__aeabi_dsub>
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	e9ca 2300 	strd	r2, r3, [sl]
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	4629      	mov	r1, r5
 800fdc8:	f7f0 fa5e 	bl	8000288 <__aeabi_dsub>
 800fdcc:	a398      	add	r3, pc, #608	; (adr r3, 8010030 <__ieee754_rem_pio2+0x318>)
 800fdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd2:	e7db      	b.n	800fd8c <__ieee754_rem_pio2+0x74>
 800fdd4:	f7f0 fa5a 	bl	800028c <__adddf3>
 800fdd8:	45b0      	cmp	r8, r6
 800fdda:	4604      	mov	r4, r0
 800fddc:	460d      	mov	r5, r1
 800fdde:	d016      	beq.n	800fe0e <__ieee754_rem_pio2+0xf6>
 800fde0:	a38f      	add	r3, pc, #572	; (adr r3, 8010020 <__ieee754_rem_pio2+0x308>)
 800fde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde6:	f7f0 fa51 	bl	800028c <__adddf3>
 800fdea:	4602      	mov	r2, r0
 800fdec:	460b      	mov	r3, r1
 800fdee:	e9ca 2300 	strd	r2, r3, [sl]
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	f7f0 fa47 	bl	8000288 <__aeabi_dsub>
 800fdfa:	a389      	add	r3, pc, #548	; (adr r3, 8010020 <__ieee754_rem_pio2+0x308>)
 800fdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe00:	f7f0 fa44 	bl	800028c <__adddf3>
 800fe04:	f04f 3bff 	mov.w	fp, #4294967295
 800fe08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fe0c:	e7c4      	b.n	800fd98 <__ieee754_rem_pio2+0x80>
 800fe0e:	a386      	add	r3, pc, #536	; (adr r3, 8010028 <__ieee754_rem_pio2+0x310>)
 800fe10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe14:	f7f0 fa3a 	bl	800028c <__adddf3>
 800fe18:	a385      	add	r3, pc, #532	; (adr r3, 8010030 <__ieee754_rem_pio2+0x318>)
 800fe1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1e:	4604      	mov	r4, r0
 800fe20:	460d      	mov	r5, r1
 800fe22:	f7f0 fa33 	bl	800028c <__adddf3>
 800fe26:	4602      	mov	r2, r0
 800fe28:	460b      	mov	r3, r1
 800fe2a:	e9ca 2300 	strd	r2, r3, [sl]
 800fe2e:	4620      	mov	r0, r4
 800fe30:	4629      	mov	r1, r5
 800fe32:	f7f0 fa29 	bl	8000288 <__aeabi_dsub>
 800fe36:	a37e      	add	r3, pc, #504	; (adr r3, 8010030 <__ieee754_rem_pio2+0x318>)
 800fe38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3c:	e7e0      	b.n	800fe00 <__ieee754_rem_pio2+0xe8>
 800fe3e:	4b87      	ldr	r3, [pc, #540]	; (801005c <__ieee754_rem_pio2+0x344>)
 800fe40:	4598      	cmp	r8, r3
 800fe42:	f300 80d8 	bgt.w	800fff6 <__ieee754_rem_pio2+0x2de>
 800fe46:	f000 fb0f 	bl	8010468 <fabs>
 800fe4a:	ec55 4b10 	vmov	r4, r5, d0
 800fe4e:	ee10 0a10 	vmov	r0, s0
 800fe52:	a379      	add	r3, pc, #484	; (adr r3, 8010038 <__ieee754_rem_pio2+0x320>)
 800fe54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe58:	4629      	mov	r1, r5
 800fe5a:	f7f0 fbcd 	bl	80005f8 <__aeabi_dmul>
 800fe5e:	4b80      	ldr	r3, [pc, #512]	; (8010060 <__ieee754_rem_pio2+0x348>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	f7f0 fa13 	bl	800028c <__adddf3>
 800fe66:	f7f0 fe77 	bl	8000b58 <__aeabi_d2iz>
 800fe6a:	4683      	mov	fp, r0
 800fe6c:	f7f0 fb5a 	bl	8000524 <__aeabi_i2d>
 800fe70:	4602      	mov	r2, r0
 800fe72:	460b      	mov	r3, r1
 800fe74:	ec43 2b18 	vmov	d8, r2, r3
 800fe78:	a367      	add	r3, pc, #412	; (adr r3, 8010018 <__ieee754_rem_pio2+0x300>)
 800fe7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7e:	f7f0 fbbb 	bl	80005f8 <__aeabi_dmul>
 800fe82:	4602      	mov	r2, r0
 800fe84:	460b      	mov	r3, r1
 800fe86:	4620      	mov	r0, r4
 800fe88:	4629      	mov	r1, r5
 800fe8a:	f7f0 f9fd 	bl	8000288 <__aeabi_dsub>
 800fe8e:	a364      	add	r3, pc, #400	; (adr r3, 8010020 <__ieee754_rem_pio2+0x308>)
 800fe90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe94:	4606      	mov	r6, r0
 800fe96:	460f      	mov	r7, r1
 800fe98:	ec51 0b18 	vmov	r0, r1, d8
 800fe9c:	f7f0 fbac 	bl	80005f8 <__aeabi_dmul>
 800fea0:	f1bb 0f1f 	cmp.w	fp, #31
 800fea4:	4604      	mov	r4, r0
 800fea6:	460d      	mov	r5, r1
 800fea8:	dc0d      	bgt.n	800fec6 <__ieee754_rem_pio2+0x1ae>
 800feaa:	4b6e      	ldr	r3, [pc, #440]	; (8010064 <__ieee754_rem_pio2+0x34c>)
 800feac:	f10b 32ff 	add.w	r2, fp, #4294967295
 800feb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feb4:	4543      	cmp	r3, r8
 800feb6:	d006      	beq.n	800fec6 <__ieee754_rem_pio2+0x1ae>
 800feb8:	4622      	mov	r2, r4
 800feba:	462b      	mov	r3, r5
 800febc:	4630      	mov	r0, r6
 800febe:	4639      	mov	r1, r7
 800fec0:	f7f0 f9e2 	bl	8000288 <__aeabi_dsub>
 800fec4:	e00e      	b.n	800fee4 <__ieee754_rem_pio2+0x1cc>
 800fec6:	462b      	mov	r3, r5
 800fec8:	4622      	mov	r2, r4
 800feca:	4630      	mov	r0, r6
 800fecc:	4639      	mov	r1, r7
 800fece:	f7f0 f9db 	bl	8000288 <__aeabi_dsub>
 800fed2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fed6:	9303      	str	r3, [sp, #12]
 800fed8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fedc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800fee0:	2b10      	cmp	r3, #16
 800fee2:	dc02      	bgt.n	800feea <__ieee754_rem_pio2+0x1d2>
 800fee4:	e9ca 0100 	strd	r0, r1, [sl]
 800fee8:	e039      	b.n	800ff5e <__ieee754_rem_pio2+0x246>
 800feea:	a34f      	add	r3, pc, #316	; (adr r3, 8010028 <__ieee754_rem_pio2+0x310>)
 800feec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef0:	ec51 0b18 	vmov	r0, r1, d8
 800fef4:	f7f0 fb80 	bl	80005f8 <__aeabi_dmul>
 800fef8:	4604      	mov	r4, r0
 800fefa:	460d      	mov	r5, r1
 800fefc:	4602      	mov	r2, r0
 800fefe:	460b      	mov	r3, r1
 800ff00:	4630      	mov	r0, r6
 800ff02:	4639      	mov	r1, r7
 800ff04:	f7f0 f9c0 	bl	8000288 <__aeabi_dsub>
 800ff08:	4602      	mov	r2, r0
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	4680      	mov	r8, r0
 800ff0e:	4689      	mov	r9, r1
 800ff10:	4630      	mov	r0, r6
 800ff12:	4639      	mov	r1, r7
 800ff14:	f7f0 f9b8 	bl	8000288 <__aeabi_dsub>
 800ff18:	4622      	mov	r2, r4
 800ff1a:	462b      	mov	r3, r5
 800ff1c:	f7f0 f9b4 	bl	8000288 <__aeabi_dsub>
 800ff20:	a343      	add	r3, pc, #268	; (adr r3, 8010030 <__ieee754_rem_pio2+0x318>)
 800ff22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff26:	4604      	mov	r4, r0
 800ff28:	460d      	mov	r5, r1
 800ff2a:	ec51 0b18 	vmov	r0, r1, d8
 800ff2e:	f7f0 fb63 	bl	80005f8 <__aeabi_dmul>
 800ff32:	4622      	mov	r2, r4
 800ff34:	462b      	mov	r3, r5
 800ff36:	f7f0 f9a7 	bl	8000288 <__aeabi_dsub>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	4604      	mov	r4, r0
 800ff40:	460d      	mov	r5, r1
 800ff42:	4640      	mov	r0, r8
 800ff44:	4649      	mov	r1, r9
 800ff46:	f7f0 f99f 	bl	8000288 <__aeabi_dsub>
 800ff4a:	9a03      	ldr	r2, [sp, #12]
 800ff4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ff50:	1ad3      	subs	r3, r2, r3
 800ff52:	2b31      	cmp	r3, #49	; 0x31
 800ff54:	dc24      	bgt.n	800ffa0 <__ieee754_rem_pio2+0x288>
 800ff56:	e9ca 0100 	strd	r0, r1, [sl]
 800ff5a:	4646      	mov	r6, r8
 800ff5c:	464f      	mov	r7, r9
 800ff5e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ff62:	4630      	mov	r0, r6
 800ff64:	4642      	mov	r2, r8
 800ff66:	464b      	mov	r3, r9
 800ff68:	4639      	mov	r1, r7
 800ff6a:	f7f0 f98d 	bl	8000288 <__aeabi_dsub>
 800ff6e:	462b      	mov	r3, r5
 800ff70:	4622      	mov	r2, r4
 800ff72:	f7f0 f989 	bl	8000288 <__aeabi_dsub>
 800ff76:	9b02      	ldr	r3, [sp, #8]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ff7e:	f6bf af0b 	bge.w	800fd98 <__ieee754_rem_pio2+0x80>
 800ff82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ff86:	f8ca 3004 	str.w	r3, [sl, #4]
 800ff8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff8e:	f8ca 8000 	str.w	r8, [sl]
 800ff92:	f8ca 0008 	str.w	r0, [sl, #8]
 800ff96:	f8ca 300c 	str.w	r3, [sl, #12]
 800ff9a:	f1cb 0b00 	rsb	fp, fp, #0
 800ff9e:	e6fb      	b.n	800fd98 <__ieee754_rem_pio2+0x80>
 800ffa0:	a327      	add	r3, pc, #156	; (adr r3, 8010040 <__ieee754_rem_pio2+0x328>)
 800ffa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa6:	ec51 0b18 	vmov	r0, r1, d8
 800ffaa:	f7f0 fb25 	bl	80005f8 <__aeabi_dmul>
 800ffae:	4604      	mov	r4, r0
 800ffb0:	460d      	mov	r5, r1
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	4640      	mov	r0, r8
 800ffb8:	4649      	mov	r1, r9
 800ffba:	f7f0 f965 	bl	8000288 <__aeabi_dsub>
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	4606      	mov	r6, r0
 800ffc4:	460f      	mov	r7, r1
 800ffc6:	4640      	mov	r0, r8
 800ffc8:	4649      	mov	r1, r9
 800ffca:	f7f0 f95d 	bl	8000288 <__aeabi_dsub>
 800ffce:	4622      	mov	r2, r4
 800ffd0:	462b      	mov	r3, r5
 800ffd2:	f7f0 f959 	bl	8000288 <__aeabi_dsub>
 800ffd6:	a31c      	add	r3, pc, #112	; (adr r3, 8010048 <__ieee754_rem_pio2+0x330>)
 800ffd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffdc:	4604      	mov	r4, r0
 800ffde:	460d      	mov	r5, r1
 800ffe0:	ec51 0b18 	vmov	r0, r1, d8
 800ffe4:	f7f0 fb08 	bl	80005f8 <__aeabi_dmul>
 800ffe8:	4622      	mov	r2, r4
 800ffea:	462b      	mov	r3, r5
 800ffec:	f7f0 f94c 	bl	8000288 <__aeabi_dsub>
 800fff0:	4604      	mov	r4, r0
 800fff2:	460d      	mov	r5, r1
 800fff4:	e760      	b.n	800feb8 <__ieee754_rem_pio2+0x1a0>
 800fff6:	4b1c      	ldr	r3, [pc, #112]	; (8010068 <__ieee754_rem_pio2+0x350>)
 800fff8:	4598      	cmp	r8, r3
 800fffa:	dd37      	ble.n	801006c <__ieee754_rem_pio2+0x354>
 800fffc:	ee10 2a10 	vmov	r2, s0
 8010000:	462b      	mov	r3, r5
 8010002:	4620      	mov	r0, r4
 8010004:	4629      	mov	r1, r5
 8010006:	f7f0 f93f 	bl	8000288 <__aeabi_dsub>
 801000a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801000e:	e9ca 0100 	strd	r0, r1, [sl]
 8010012:	e695      	b.n	800fd40 <__ieee754_rem_pio2+0x28>
 8010014:	f3af 8000 	nop.w
 8010018:	54400000 	.word	0x54400000
 801001c:	3ff921fb 	.word	0x3ff921fb
 8010020:	1a626331 	.word	0x1a626331
 8010024:	3dd0b461 	.word	0x3dd0b461
 8010028:	1a600000 	.word	0x1a600000
 801002c:	3dd0b461 	.word	0x3dd0b461
 8010030:	2e037073 	.word	0x2e037073
 8010034:	3ba3198a 	.word	0x3ba3198a
 8010038:	6dc9c883 	.word	0x6dc9c883
 801003c:	3fe45f30 	.word	0x3fe45f30
 8010040:	2e000000 	.word	0x2e000000
 8010044:	3ba3198a 	.word	0x3ba3198a
 8010048:	252049c1 	.word	0x252049c1
 801004c:	397b839a 	.word	0x397b839a
 8010050:	3fe921fb 	.word	0x3fe921fb
 8010054:	4002d97b 	.word	0x4002d97b
 8010058:	3ff921fb 	.word	0x3ff921fb
 801005c:	413921fb 	.word	0x413921fb
 8010060:	3fe00000 	.word	0x3fe00000
 8010064:	08011ce8 	.word	0x08011ce8
 8010068:	7fefffff 	.word	0x7fefffff
 801006c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010070:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8010074:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010078:	4620      	mov	r0, r4
 801007a:	460d      	mov	r5, r1
 801007c:	f7f0 fd6c 	bl	8000b58 <__aeabi_d2iz>
 8010080:	f7f0 fa50 	bl	8000524 <__aeabi_i2d>
 8010084:	4602      	mov	r2, r0
 8010086:	460b      	mov	r3, r1
 8010088:	4620      	mov	r0, r4
 801008a:	4629      	mov	r1, r5
 801008c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010090:	f7f0 f8fa 	bl	8000288 <__aeabi_dsub>
 8010094:	4b21      	ldr	r3, [pc, #132]	; (801011c <__ieee754_rem_pio2+0x404>)
 8010096:	2200      	movs	r2, #0
 8010098:	f7f0 faae 	bl	80005f8 <__aeabi_dmul>
 801009c:	460d      	mov	r5, r1
 801009e:	4604      	mov	r4, r0
 80100a0:	f7f0 fd5a 	bl	8000b58 <__aeabi_d2iz>
 80100a4:	f7f0 fa3e 	bl	8000524 <__aeabi_i2d>
 80100a8:	4602      	mov	r2, r0
 80100aa:	460b      	mov	r3, r1
 80100ac:	4620      	mov	r0, r4
 80100ae:	4629      	mov	r1, r5
 80100b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80100b4:	f7f0 f8e8 	bl	8000288 <__aeabi_dsub>
 80100b8:	4b18      	ldr	r3, [pc, #96]	; (801011c <__ieee754_rem_pio2+0x404>)
 80100ba:	2200      	movs	r2, #0
 80100bc:	f7f0 fa9c 	bl	80005f8 <__aeabi_dmul>
 80100c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80100c4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80100c8:	2703      	movs	r7, #3
 80100ca:	2400      	movs	r4, #0
 80100cc:	2500      	movs	r5, #0
 80100ce:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80100d2:	4622      	mov	r2, r4
 80100d4:	462b      	mov	r3, r5
 80100d6:	46b9      	mov	r9, r7
 80100d8:	3f01      	subs	r7, #1
 80100da:	f7f0 fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80100de:	2800      	cmp	r0, #0
 80100e0:	d1f5      	bne.n	80100ce <__ieee754_rem_pio2+0x3b6>
 80100e2:	4b0f      	ldr	r3, [pc, #60]	; (8010120 <__ieee754_rem_pio2+0x408>)
 80100e4:	9301      	str	r3, [sp, #4]
 80100e6:	2302      	movs	r3, #2
 80100e8:	9300      	str	r3, [sp, #0]
 80100ea:	4632      	mov	r2, r6
 80100ec:	464b      	mov	r3, r9
 80100ee:	4651      	mov	r1, sl
 80100f0:	a804      	add	r0, sp, #16
 80100f2:	f000 fa75 	bl	80105e0 <__kernel_rem_pio2>
 80100f6:	9b02      	ldr	r3, [sp, #8]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	4683      	mov	fp, r0
 80100fc:	f6bf ae4c 	bge.w	800fd98 <__ieee754_rem_pio2+0x80>
 8010100:	e9da 2100 	ldrd	r2, r1, [sl]
 8010104:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010108:	e9ca 2300 	strd	r2, r3, [sl]
 801010c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010110:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010114:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010118:	e73f      	b.n	800ff9a <__ieee754_rem_pio2+0x282>
 801011a:	bf00      	nop
 801011c:	41700000 	.word	0x41700000
 8010120:	08011d68 	.word	0x08011d68
 8010124:	00000000 	.word	0x00000000

08010128 <atan>:
 8010128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801012c:	ec55 4b10 	vmov	r4, r5, d0
 8010130:	4bc3      	ldr	r3, [pc, #780]	; (8010440 <atan+0x318>)
 8010132:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010136:	429e      	cmp	r6, r3
 8010138:	46ab      	mov	fp, r5
 801013a:	dd18      	ble.n	801016e <atan+0x46>
 801013c:	4bc1      	ldr	r3, [pc, #772]	; (8010444 <atan+0x31c>)
 801013e:	429e      	cmp	r6, r3
 8010140:	dc01      	bgt.n	8010146 <atan+0x1e>
 8010142:	d109      	bne.n	8010158 <atan+0x30>
 8010144:	b144      	cbz	r4, 8010158 <atan+0x30>
 8010146:	4622      	mov	r2, r4
 8010148:	462b      	mov	r3, r5
 801014a:	4620      	mov	r0, r4
 801014c:	4629      	mov	r1, r5
 801014e:	f7f0 f89d 	bl	800028c <__adddf3>
 8010152:	4604      	mov	r4, r0
 8010154:	460d      	mov	r5, r1
 8010156:	e006      	b.n	8010166 <atan+0x3e>
 8010158:	f1bb 0f00 	cmp.w	fp, #0
 801015c:	f300 8131 	bgt.w	80103c2 <atan+0x29a>
 8010160:	a59b      	add	r5, pc, #620	; (adr r5, 80103d0 <atan+0x2a8>)
 8010162:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010166:	ec45 4b10 	vmov	d0, r4, r5
 801016a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801016e:	4bb6      	ldr	r3, [pc, #728]	; (8010448 <atan+0x320>)
 8010170:	429e      	cmp	r6, r3
 8010172:	dc14      	bgt.n	801019e <atan+0x76>
 8010174:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010178:	429e      	cmp	r6, r3
 801017a:	dc0d      	bgt.n	8010198 <atan+0x70>
 801017c:	a396      	add	r3, pc, #600	; (adr r3, 80103d8 <atan+0x2b0>)
 801017e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010182:	ee10 0a10 	vmov	r0, s0
 8010186:	4629      	mov	r1, r5
 8010188:	f7f0 f880 	bl	800028c <__adddf3>
 801018c:	4baf      	ldr	r3, [pc, #700]	; (801044c <atan+0x324>)
 801018e:	2200      	movs	r2, #0
 8010190:	f7f0 fcc2 	bl	8000b18 <__aeabi_dcmpgt>
 8010194:	2800      	cmp	r0, #0
 8010196:	d1e6      	bne.n	8010166 <atan+0x3e>
 8010198:	f04f 3aff 	mov.w	sl, #4294967295
 801019c:	e02b      	b.n	80101f6 <atan+0xce>
 801019e:	f000 f963 	bl	8010468 <fabs>
 80101a2:	4bab      	ldr	r3, [pc, #684]	; (8010450 <atan+0x328>)
 80101a4:	429e      	cmp	r6, r3
 80101a6:	ec55 4b10 	vmov	r4, r5, d0
 80101aa:	f300 80bf 	bgt.w	801032c <atan+0x204>
 80101ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80101b2:	429e      	cmp	r6, r3
 80101b4:	f300 80a0 	bgt.w	80102f8 <atan+0x1d0>
 80101b8:	ee10 2a10 	vmov	r2, s0
 80101bc:	ee10 0a10 	vmov	r0, s0
 80101c0:	462b      	mov	r3, r5
 80101c2:	4629      	mov	r1, r5
 80101c4:	f7f0 f862 	bl	800028c <__adddf3>
 80101c8:	4ba0      	ldr	r3, [pc, #640]	; (801044c <atan+0x324>)
 80101ca:	2200      	movs	r2, #0
 80101cc:	f7f0 f85c 	bl	8000288 <__aeabi_dsub>
 80101d0:	2200      	movs	r2, #0
 80101d2:	4606      	mov	r6, r0
 80101d4:	460f      	mov	r7, r1
 80101d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101da:	4620      	mov	r0, r4
 80101dc:	4629      	mov	r1, r5
 80101de:	f7f0 f855 	bl	800028c <__adddf3>
 80101e2:	4602      	mov	r2, r0
 80101e4:	460b      	mov	r3, r1
 80101e6:	4630      	mov	r0, r6
 80101e8:	4639      	mov	r1, r7
 80101ea:	f7f0 fb2f 	bl	800084c <__aeabi_ddiv>
 80101ee:	f04f 0a00 	mov.w	sl, #0
 80101f2:	4604      	mov	r4, r0
 80101f4:	460d      	mov	r5, r1
 80101f6:	4622      	mov	r2, r4
 80101f8:	462b      	mov	r3, r5
 80101fa:	4620      	mov	r0, r4
 80101fc:	4629      	mov	r1, r5
 80101fe:	f7f0 f9fb 	bl	80005f8 <__aeabi_dmul>
 8010202:	4602      	mov	r2, r0
 8010204:	460b      	mov	r3, r1
 8010206:	4680      	mov	r8, r0
 8010208:	4689      	mov	r9, r1
 801020a:	f7f0 f9f5 	bl	80005f8 <__aeabi_dmul>
 801020e:	a374      	add	r3, pc, #464	; (adr r3, 80103e0 <atan+0x2b8>)
 8010210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010214:	4606      	mov	r6, r0
 8010216:	460f      	mov	r7, r1
 8010218:	f7f0 f9ee 	bl	80005f8 <__aeabi_dmul>
 801021c:	a372      	add	r3, pc, #456	; (adr r3, 80103e8 <atan+0x2c0>)
 801021e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010222:	f7f0 f833 	bl	800028c <__adddf3>
 8010226:	4632      	mov	r2, r6
 8010228:	463b      	mov	r3, r7
 801022a:	f7f0 f9e5 	bl	80005f8 <__aeabi_dmul>
 801022e:	a370      	add	r3, pc, #448	; (adr r3, 80103f0 <atan+0x2c8>)
 8010230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010234:	f7f0 f82a 	bl	800028c <__adddf3>
 8010238:	4632      	mov	r2, r6
 801023a:	463b      	mov	r3, r7
 801023c:	f7f0 f9dc 	bl	80005f8 <__aeabi_dmul>
 8010240:	a36d      	add	r3, pc, #436	; (adr r3, 80103f8 <atan+0x2d0>)
 8010242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010246:	f7f0 f821 	bl	800028c <__adddf3>
 801024a:	4632      	mov	r2, r6
 801024c:	463b      	mov	r3, r7
 801024e:	f7f0 f9d3 	bl	80005f8 <__aeabi_dmul>
 8010252:	a36b      	add	r3, pc, #428	; (adr r3, 8010400 <atan+0x2d8>)
 8010254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010258:	f7f0 f818 	bl	800028c <__adddf3>
 801025c:	4632      	mov	r2, r6
 801025e:	463b      	mov	r3, r7
 8010260:	f7f0 f9ca 	bl	80005f8 <__aeabi_dmul>
 8010264:	a368      	add	r3, pc, #416	; (adr r3, 8010408 <atan+0x2e0>)
 8010266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026a:	f7f0 f80f 	bl	800028c <__adddf3>
 801026e:	4642      	mov	r2, r8
 8010270:	464b      	mov	r3, r9
 8010272:	f7f0 f9c1 	bl	80005f8 <__aeabi_dmul>
 8010276:	a366      	add	r3, pc, #408	; (adr r3, 8010410 <atan+0x2e8>)
 8010278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027c:	4680      	mov	r8, r0
 801027e:	4689      	mov	r9, r1
 8010280:	4630      	mov	r0, r6
 8010282:	4639      	mov	r1, r7
 8010284:	f7f0 f9b8 	bl	80005f8 <__aeabi_dmul>
 8010288:	a363      	add	r3, pc, #396	; (adr r3, 8010418 <atan+0x2f0>)
 801028a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028e:	f7ef fffb 	bl	8000288 <__aeabi_dsub>
 8010292:	4632      	mov	r2, r6
 8010294:	463b      	mov	r3, r7
 8010296:	f7f0 f9af 	bl	80005f8 <__aeabi_dmul>
 801029a:	a361      	add	r3, pc, #388	; (adr r3, 8010420 <atan+0x2f8>)
 801029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a0:	f7ef fff2 	bl	8000288 <__aeabi_dsub>
 80102a4:	4632      	mov	r2, r6
 80102a6:	463b      	mov	r3, r7
 80102a8:	f7f0 f9a6 	bl	80005f8 <__aeabi_dmul>
 80102ac:	a35e      	add	r3, pc, #376	; (adr r3, 8010428 <atan+0x300>)
 80102ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b2:	f7ef ffe9 	bl	8000288 <__aeabi_dsub>
 80102b6:	4632      	mov	r2, r6
 80102b8:	463b      	mov	r3, r7
 80102ba:	f7f0 f99d 	bl	80005f8 <__aeabi_dmul>
 80102be:	a35c      	add	r3, pc, #368	; (adr r3, 8010430 <atan+0x308>)
 80102c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c4:	f7ef ffe0 	bl	8000288 <__aeabi_dsub>
 80102c8:	4632      	mov	r2, r6
 80102ca:	463b      	mov	r3, r7
 80102cc:	f7f0 f994 	bl	80005f8 <__aeabi_dmul>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	4640      	mov	r0, r8
 80102d6:	4649      	mov	r1, r9
 80102d8:	f7ef ffd8 	bl	800028c <__adddf3>
 80102dc:	4622      	mov	r2, r4
 80102de:	462b      	mov	r3, r5
 80102e0:	f7f0 f98a 	bl	80005f8 <__aeabi_dmul>
 80102e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80102e8:	4602      	mov	r2, r0
 80102ea:	460b      	mov	r3, r1
 80102ec:	d14b      	bne.n	8010386 <atan+0x25e>
 80102ee:	4620      	mov	r0, r4
 80102f0:	4629      	mov	r1, r5
 80102f2:	f7ef ffc9 	bl	8000288 <__aeabi_dsub>
 80102f6:	e72c      	b.n	8010152 <atan+0x2a>
 80102f8:	ee10 0a10 	vmov	r0, s0
 80102fc:	4b53      	ldr	r3, [pc, #332]	; (801044c <atan+0x324>)
 80102fe:	2200      	movs	r2, #0
 8010300:	4629      	mov	r1, r5
 8010302:	f7ef ffc1 	bl	8000288 <__aeabi_dsub>
 8010306:	4b51      	ldr	r3, [pc, #324]	; (801044c <atan+0x324>)
 8010308:	4606      	mov	r6, r0
 801030a:	460f      	mov	r7, r1
 801030c:	2200      	movs	r2, #0
 801030e:	4620      	mov	r0, r4
 8010310:	4629      	mov	r1, r5
 8010312:	f7ef ffbb 	bl	800028c <__adddf3>
 8010316:	4602      	mov	r2, r0
 8010318:	460b      	mov	r3, r1
 801031a:	4630      	mov	r0, r6
 801031c:	4639      	mov	r1, r7
 801031e:	f7f0 fa95 	bl	800084c <__aeabi_ddiv>
 8010322:	f04f 0a01 	mov.w	sl, #1
 8010326:	4604      	mov	r4, r0
 8010328:	460d      	mov	r5, r1
 801032a:	e764      	b.n	80101f6 <atan+0xce>
 801032c:	4b49      	ldr	r3, [pc, #292]	; (8010454 <atan+0x32c>)
 801032e:	429e      	cmp	r6, r3
 8010330:	da1d      	bge.n	801036e <atan+0x246>
 8010332:	ee10 0a10 	vmov	r0, s0
 8010336:	4b48      	ldr	r3, [pc, #288]	; (8010458 <atan+0x330>)
 8010338:	2200      	movs	r2, #0
 801033a:	4629      	mov	r1, r5
 801033c:	f7ef ffa4 	bl	8000288 <__aeabi_dsub>
 8010340:	4b45      	ldr	r3, [pc, #276]	; (8010458 <atan+0x330>)
 8010342:	4606      	mov	r6, r0
 8010344:	460f      	mov	r7, r1
 8010346:	2200      	movs	r2, #0
 8010348:	4620      	mov	r0, r4
 801034a:	4629      	mov	r1, r5
 801034c:	f7f0 f954 	bl	80005f8 <__aeabi_dmul>
 8010350:	4b3e      	ldr	r3, [pc, #248]	; (801044c <atan+0x324>)
 8010352:	2200      	movs	r2, #0
 8010354:	f7ef ff9a 	bl	800028c <__adddf3>
 8010358:	4602      	mov	r2, r0
 801035a:	460b      	mov	r3, r1
 801035c:	4630      	mov	r0, r6
 801035e:	4639      	mov	r1, r7
 8010360:	f7f0 fa74 	bl	800084c <__aeabi_ddiv>
 8010364:	f04f 0a02 	mov.w	sl, #2
 8010368:	4604      	mov	r4, r0
 801036a:	460d      	mov	r5, r1
 801036c:	e743      	b.n	80101f6 <atan+0xce>
 801036e:	462b      	mov	r3, r5
 8010370:	ee10 2a10 	vmov	r2, s0
 8010374:	4939      	ldr	r1, [pc, #228]	; (801045c <atan+0x334>)
 8010376:	2000      	movs	r0, #0
 8010378:	f7f0 fa68 	bl	800084c <__aeabi_ddiv>
 801037c:	f04f 0a03 	mov.w	sl, #3
 8010380:	4604      	mov	r4, r0
 8010382:	460d      	mov	r5, r1
 8010384:	e737      	b.n	80101f6 <atan+0xce>
 8010386:	4b36      	ldr	r3, [pc, #216]	; (8010460 <atan+0x338>)
 8010388:	4e36      	ldr	r6, [pc, #216]	; (8010464 <atan+0x33c>)
 801038a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801038e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010392:	f7ef ff79 	bl	8000288 <__aeabi_dsub>
 8010396:	4622      	mov	r2, r4
 8010398:	462b      	mov	r3, r5
 801039a:	f7ef ff75 	bl	8000288 <__aeabi_dsub>
 801039e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80103a2:	4602      	mov	r2, r0
 80103a4:	460b      	mov	r3, r1
 80103a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80103aa:	f7ef ff6d 	bl	8000288 <__aeabi_dsub>
 80103ae:	f1bb 0f00 	cmp.w	fp, #0
 80103b2:	4604      	mov	r4, r0
 80103b4:	460d      	mov	r5, r1
 80103b6:	f6bf aed6 	bge.w	8010166 <atan+0x3e>
 80103ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103be:	461d      	mov	r5, r3
 80103c0:	e6d1      	b.n	8010166 <atan+0x3e>
 80103c2:	a51d      	add	r5, pc, #116	; (adr r5, 8010438 <atan+0x310>)
 80103c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80103c8:	e6cd      	b.n	8010166 <atan+0x3e>
 80103ca:	bf00      	nop
 80103cc:	f3af 8000 	nop.w
 80103d0:	54442d18 	.word	0x54442d18
 80103d4:	bff921fb 	.word	0xbff921fb
 80103d8:	8800759c 	.word	0x8800759c
 80103dc:	7e37e43c 	.word	0x7e37e43c
 80103e0:	e322da11 	.word	0xe322da11
 80103e4:	3f90ad3a 	.word	0x3f90ad3a
 80103e8:	24760deb 	.word	0x24760deb
 80103ec:	3fa97b4b 	.word	0x3fa97b4b
 80103f0:	a0d03d51 	.word	0xa0d03d51
 80103f4:	3fb10d66 	.word	0x3fb10d66
 80103f8:	c54c206e 	.word	0xc54c206e
 80103fc:	3fb745cd 	.word	0x3fb745cd
 8010400:	920083ff 	.word	0x920083ff
 8010404:	3fc24924 	.word	0x3fc24924
 8010408:	5555550d 	.word	0x5555550d
 801040c:	3fd55555 	.word	0x3fd55555
 8010410:	2c6a6c2f 	.word	0x2c6a6c2f
 8010414:	bfa2b444 	.word	0xbfa2b444
 8010418:	52defd9a 	.word	0x52defd9a
 801041c:	3fadde2d 	.word	0x3fadde2d
 8010420:	af749a6d 	.word	0xaf749a6d
 8010424:	3fb3b0f2 	.word	0x3fb3b0f2
 8010428:	fe231671 	.word	0xfe231671
 801042c:	3fbc71c6 	.word	0x3fbc71c6
 8010430:	9998ebc4 	.word	0x9998ebc4
 8010434:	3fc99999 	.word	0x3fc99999
 8010438:	54442d18 	.word	0x54442d18
 801043c:	3ff921fb 	.word	0x3ff921fb
 8010440:	440fffff 	.word	0x440fffff
 8010444:	7ff00000 	.word	0x7ff00000
 8010448:	3fdbffff 	.word	0x3fdbffff
 801044c:	3ff00000 	.word	0x3ff00000
 8010450:	3ff2ffff 	.word	0x3ff2ffff
 8010454:	40038000 	.word	0x40038000
 8010458:	3ff80000 	.word	0x3ff80000
 801045c:	bff00000 	.word	0xbff00000
 8010460:	08011e90 	.word	0x08011e90
 8010464:	08011e70 	.word	0x08011e70

08010468 <fabs>:
 8010468:	ec51 0b10 	vmov	r0, r1, d0
 801046c:	ee10 2a10 	vmov	r2, s0
 8010470:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010474:	ec43 2b10 	vmov	d0, r2, r3
 8010478:	4770      	bx	lr
 801047a:	0000      	movs	r0, r0
 801047c:	0000      	movs	r0, r0
	...

08010480 <scalbn>:
 8010480:	b570      	push	{r4, r5, r6, lr}
 8010482:	ec55 4b10 	vmov	r4, r5, d0
 8010486:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801048a:	4606      	mov	r6, r0
 801048c:	462b      	mov	r3, r5
 801048e:	b999      	cbnz	r1, 80104b8 <scalbn+0x38>
 8010490:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010494:	4323      	orrs	r3, r4
 8010496:	d03f      	beq.n	8010518 <scalbn+0x98>
 8010498:	4b35      	ldr	r3, [pc, #212]	; (8010570 <scalbn+0xf0>)
 801049a:	4629      	mov	r1, r5
 801049c:	ee10 0a10 	vmov	r0, s0
 80104a0:	2200      	movs	r2, #0
 80104a2:	f7f0 f8a9 	bl	80005f8 <__aeabi_dmul>
 80104a6:	4b33      	ldr	r3, [pc, #204]	; (8010574 <scalbn+0xf4>)
 80104a8:	429e      	cmp	r6, r3
 80104aa:	4604      	mov	r4, r0
 80104ac:	460d      	mov	r5, r1
 80104ae:	da10      	bge.n	80104d2 <scalbn+0x52>
 80104b0:	a327      	add	r3, pc, #156	; (adr r3, 8010550 <scalbn+0xd0>)
 80104b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b6:	e01f      	b.n	80104f8 <scalbn+0x78>
 80104b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80104bc:	4291      	cmp	r1, r2
 80104be:	d10c      	bne.n	80104da <scalbn+0x5a>
 80104c0:	ee10 2a10 	vmov	r2, s0
 80104c4:	4620      	mov	r0, r4
 80104c6:	4629      	mov	r1, r5
 80104c8:	f7ef fee0 	bl	800028c <__adddf3>
 80104cc:	4604      	mov	r4, r0
 80104ce:	460d      	mov	r5, r1
 80104d0:	e022      	b.n	8010518 <scalbn+0x98>
 80104d2:	460b      	mov	r3, r1
 80104d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80104d8:	3936      	subs	r1, #54	; 0x36
 80104da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80104de:	4296      	cmp	r6, r2
 80104e0:	dd0d      	ble.n	80104fe <scalbn+0x7e>
 80104e2:	2d00      	cmp	r5, #0
 80104e4:	a11c      	add	r1, pc, #112	; (adr r1, 8010558 <scalbn+0xd8>)
 80104e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104ea:	da02      	bge.n	80104f2 <scalbn+0x72>
 80104ec:	a11c      	add	r1, pc, #112	; (adr r1, 8010560 <scalbn+0xe0>)
 80104ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104f2:	a319      	add	r3, pc, #100	; (adr r3, 8010558 <scalbn+0xd8>)
 80104f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f8:	f7f0 f87e 	bl	80005f8 <__aeabi_dmul>
 80104fc:	e7e6      	b.n	80104cc <scalbn+0x4c>
 80104fe:	1872      	adds	r2, r6, r1
 8010500:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010504:	428a      	cmp	r2, r1
 8010506:	dcec      	bgt.n	80104e2 <scalbn+0x62>
 8010508:	2a00      	cmp	r2, #0
 801050a:	dd08      	ble.n	801051e <scalbn+0x9e>
 801050c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010510:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010514:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010518:	ec45 4b10 	vmov	d0, r4, r5
 801051c:	bd70      	pop	{r4, r5, r6, pc}
 801051e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010522:	da08      	bge.n	8010536 <scalbn+0xb6>
 8010524:	2d00      	cmp	r5, #0
 8010526:	a10a      	add	r1, pc, #40	; (adr r1, 8010550 <scalbn+0xd0>)
 8010528:	e9d1 0100 	ldrd	r0, r1, [r1]
 801052c:	dac0      	bge.n	80104b0 <scalbn+0x30>
 801052e:	a10e      	add	r1, pc, #56	; (adr r1, 8010568 <scalbn+0xe8>)
 8010530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010534:	e7bc      	b.n	80104b0 <scalbn+0x30>
 8010536:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801053a:	3236      	adds	r2, #54	; 0x36
 801053c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010540:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010544:	4620      	mov	r0, r4
 8010546:	4b0c      	ldr	r3, [pc, #48]	; (8010578 <scalbn+0xf8>)
 8010548:	2200      	movs	r2, #0
 801054a:	e7d5      	b.n	80104f8 <scalbn+0x78>
 801054c:	f3af 8000 	nop.w
 8010550:	c2f8f359 	.word	0xc2f8f359
 8010554:	01a56e1f 	.word	0x01a56e1f
 8010558:	8800759c 	.word	0x8800759c
 801055c:	7e37e43c 	.word	0x7e37e43c
 8010560:	8800759c 	.word	0x8800759c
 8010564:	fe37e43c 	.word	0xfe37e43c
 8010568:	c2f8f359 	.word	0xc2f8f359
 801056c:	81a56e1f 	.word	0x81a56e1f
 8010570:	43500000 	.word	0x43500000
 8010574:	ffff3cb0 	.word	0xffff3cb0
 8010578:	3c900000 	.word	0x3c900000

0801057c <with_errno>:
 801057c:	b570      	push	{r4, r5, r6, lr}
 801057e:	4604      	mov	r4, r0
 8010580:	460d      	mov	r5, r1
 8010582:	4616      	mov	r6, r2
 8010584:	f7fa fd08 	bl	800af98 <__errno>
 8010588:	4629      	mov	r1, r5
 801058a:	6006      	str	r6, [r0, #0]
 801058c:	4620      	mov	r0, r4
 801058e:	bd70      	pop	{r4, r5, r6, pc}

08010590 <xflow>:
 8010590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010592:	4614      	mov	r4, r2
 8010594:	461d      	mov	r5, r3
 8010596:	b108      	cbz	r0, 801059c <xflow+0xc>
 8010598:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801059c:	e9cd 2300 	strd	r2, r3, [sp]
 80105a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105a4:	4620      	mov	r0, r4
 80105a6:	4629      	mov	r1, r5
 80105a8:	f7f0 f826 	bl	80005f8 <__aeabi_dmul>
 80105ac:	2222      	movs	r2, #34	; 0x22
 80105ae:	b003      	add	sp, #12
 80105b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105b4:	f7ff bfe2 	b.w	801057c <with_errno>

080105b8 <__math_uflow>:
 80105b8:	b508      	push	{r3, lr}
 80105ba:	2200      	movs	r2, #0
 80105bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80105c0:	f7ff ffe6 	bl	8010590 <xflow>
 80105c4:	ec41 0b10 	vmov	d0, r0, r1
 80105c8:	bd08      	pop	{r3, pc}

080105ca <__math_oflow>:
 80105ca:	b508      	push	{r3, lr}
 80105cc:	2200      	movs	r2, #0
 80105ce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80105d2:	f7ff ffdd 	bl	8010590 <xflow>
 80105d6:	ec41 0b10 	vmov	d0, r0, r1
 80105da:	bd08      	pop	{r3, pc}
 80105dc:	0000      	movs	r0, r0
	...

080105e0 <__kernel_rem_pio2>:
 80105e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e4:	ed2d 8b02 	vpush	{d8}
 80105e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80105ec:	f112 0f14 	cmn.w	r2, #20
 80105f0:	9306      	str	r3, [sp, #24]
 80105f2:	9104      	str	r1, [sp, #16]
 80105f4:	4bc2      	ldr	r3, [pc, #776]	; (8010900 <__kernel_rem_pio2+0x320>)
 80105f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80105f8:	9009      	str	r0, [sp, #36]	; 0x24
 80105fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80105fe:	9300      	str	r3, [sp, #0]
 8010600:	9b06      	ldr	r3, [sp, #24]
 8010602:	f103 33ff 	add.w	r3, r3, #4294967295
 8010606:	bfa8      	it	ge
 8010608:	1ed4      	subge	r4, r2, #3
 801060a:	9305      	str	r3, [sp, #20]
 801060c:	bfb2      	itee	lt
 801060e:	2400      	movlt	r4, #0
 8010610:	2318      	movge	r3, #24
 8010612:	fb94 f4f3 	sdivge	r4, r4, r3
 8010616:	f06f 0317 	mvn.w	r3, #23
 801061a:	fb04 3303 	mla	r3, r4, r3, r3
 801061e:	eb03 0a02 	add.w	sl, r3, r2
 8010622:	9b00      	ldr	r3, [sp, #0]
 8010624:	9a05      	ldr	r2, [sp, #20]
 8010626:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80108f0 <__kernel_rem_pio2+0x310>
 801062a:	eb03 0802 	add.w	r8, r3, r2
 801062e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010630:	1aa7      	subs	r7, r4, r2
 8010632:	ae20      	add	r6, sp, #128	; 0x80
 8010634:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010638:	2500      	movs	r5, #0
 801063a:	4545      	cmp	r5, r8
 801063c:	dd13      	ble.n	8010666 <__kernel_rem_pio2+0x86>
 801063e:	9b06      	ldr	r3, [sp, #24]
 8010640:	aa20      	add	r2, sp, #128	; 0x80
 8010642:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010646:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801064a:	f04f 0800 	mov.w	r8, #0
 801064e:	9b00      	ldr	r3, [sp, #0]
 8010650:	4598      	cmp	r8, r3
 8010652:	dc31      	bgt.n	80106b8 <__kernel_rem_pio2+0xd8>
 8010654:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80108f0 <__kernel_rem_pio2+0x310>
 8010658:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801065c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010660:	462f      	mov	r7, r5
 8010662:	2600      	movs	r6, #0
 8010664:	e01b      	b.n	801069e <__kernel_rem_pio2+0xbe>
 8010666:	42ef      	cmn	r7, r5
 8010668:	d407      	bmi.n	801067a <__kernel_rem_pio2+0x9a>
 801066a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801066e:	f7ef ff59 	bl	8000524 <__aeabi_i2d>
 8010672:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010676:	3501      	adds	r5, #1
 8010678:	e7df      	b.n	801063a <__kernel_rem_pio2+0x5a>
 801067a:	ec51 0b18 	vmov	r0, r1, d8
 801067e:	e7f8      	b.n	8010672 <__kernel_rem_pio2+0x92>
 8010680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010684:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010688:	f7ef ffb6 	bl	80005f8 <__aeabi_dmul>
 801068c:	4602      	mov	r2, r0
 801068e:	460b      	mov	r3, r1
 8010690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010694:	f7ef fdfa 	bl	800028c <__adddf3>
 8010698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801069c:	3601      	adds	r6, #1
 801069e:	9b05      	ldr	r3, [sp, #20]
 80106a0:	429e      	cmp	r6, r3
 80106a2:	f1a7 0708 	sub.w	r7, r7, #8
 80106a6:	ddeb      	ble.n	8010680 <__kernel_rem_pio2+0xa0>
 80106a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106ac:	f108 0801 	add.w	r8, r8, #1
 80106b0:	ecab 7b02 	vstmia	fp!, {d7}
 80106b4:	3508      	adds	r5, #8
 80106b6:	e7ca      	b.n	801064e <__kernel_rem_pio2+0x6e>
 80106b8:	9b00      	ldr	r3, [sp, #0]
 80106ba:	aa0c      	add	r2, sp, #48	; 0x30
 80106bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80106c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80106c2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80106c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80106c8:	9c00      	ldr	r4, [sp, #0]
 80106ca:	930a      	str	r3, [sp, #40]	; 0x28
 80106cc:	00e3      	lsls	r3, r4, #3
 80106ce:	9308      	str	r3, [sp, #32]
 80106d0:	ab98      	add	r3, sp, #608	; 0x260
 80106d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80106da:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80106de:	ab70      	add	r3, sp, #448	; 0x1c0
 80106e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80106e4:	46c3      	mov	fp, r8
 80106e6:	46a1      	mov	r9, r4
 80106e8:	f1b9 0f00 	cmp.w	r9, #0
 80106ec:	f1a5 0508 	sub.w	r5, r5, #8
 80106f0:	dc77      	bgt.n	80107e2 <__kernel_rem_pio2+0x202>
 80106f2:	ec47 6b10 	vmov	d0, r6, r7
 80106f6:	4650      	mov	r0, sl
 80106f8:	f7ff fec2 	bl	8010480 <scalbn>
 80106fc:	ec57 6b10 	vmov	r6, r7, d0
 8010700:	2200      	movs	r2, #0
 8010702:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010706:	ee10 0a10 	vmov	r0, s0
 801070a:	4639      	mov	r1, r7
 801070c:	f7ef ff74 	bl	80005f8 <__aeabi_dmul>
 8010710:	ec41 0b10 	vmov	d0, r0, r1
 8010714:	f000 fab4 	bl	8010c80 <floor>
 8010718:	4b7a      	ldr	r3, [pc, #488]	; (8010904 <__kernel_rem_pio2+0x324>)
 801071a:	ec51 0b10 	vmov	r0, r1, d0
 801071e:	2200      	movs	r2, #0
 8010720:	f7ef ff6a 	bl	80005f8 <__aeabi_dmul>
 8010724:	4602      	mov	r2, r0
 8010726:	460b      	mov	r3, r1
 8010728:	4630      	mov	r0, r6
 801072a:	4639      	mov	r1, r7
 801072c:	f7ef fdac 	bl	8000288 <__aeabi_dsub>
 8010730:	460f      	mov	r7, r1
 8010732:	4606      	mov	r6, r0
 8010734:	f7f0 fa10 	bl	8000b58 <__aeabi_d2iz>
 8010738:	9002      	str	r0, [sp, #8]
 801073a:	f7ef fef3 	bl	8000524 <__aeabi_i2d>
 801073e:	4602      	mov	r2, r0
 8010740:	460b      	mov	r3, r1
 8010742:	4630      	mov	r0, r6
 8010744:	4639      	mov	r1, r7
 8010746:	f7ef fd9f 	bl	8000288 <__aeabi_dsub>
 801074a:	f1ba 0f00 	cmp.w	sl, #0
 801074e:	4606      	mov	r6, r0
 8010750:	460f      	mov	r7, r1
 8010752:	dd6d      	ble.n	8010830 <__kernel_rem_pio2+0x250>
 8010754:	1e61      	subs	r1, r4, #1
 8010756:	ab0c      	add	r3, sp, #48	; 0x30
 8010758:	9d02      	ldr	r5, [sp, #8]
 801075a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801075e:	f1ca 0018 	rsb	r0, sl, #24
 8010762:	fa43 f200 	asr.w	r2, r3, r0
 8010766:	4415      	add	r5, r2
 8010768:	4082      	lsls	r2, r0
 801076a:	1a9b      	subs	r3, r3, r2
 801076c:	aa0c      	add	r2, sp, #48	; 0x30
 801076e:	9502      	str	r5, [sp, #8]
 8010770:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010774:	f1ca 0217 	rsb	r2, sl, #23
 8010778:	fa43 fb02 	asr.w	fp, r3, r2
 801077c:	f1bb 0f00 	cmp.w	fp, #0
 8010780:	dd65      	ble.n	801084e <__kernel_rem_pio2+0x26e>
 8010782:	9b02      	ldr	r3, [sp, #8]
 8010784:	2200      	movs	r2, #0
 8010786:	3301      	adds	r3, #1
 8010788:	9302      	str	r3, [sp, #8]
 801078a:	4615      	mov	r5, r2
 801078c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010790:	4294      	cmp	r4, r2
 8010792:	f300 809f 	bgt.w	80108d4 <__kernel_rem_pio2+0x2f4>
 8010796:	f1ba 0f00 	cmp.w	sl, #0
 801079a:	dd07      	ble.n	80107ac <__kernel_rem_pio2+0x1cc>
 801079c:	f1ba 0f01 	cmp.w	sl, #1
 80107a0:	f000 80c1 	beq.w	8010926 <__kernel_rem_pio2+0x346>
 80107a4:	f1ba 0f02 	cmp.w	sl, #2
 80107a8:	f000 80c7 	beq.w	801093a <__kernel_rem_pio2+0x35a>
 80107ac:	f1bb 0f02 	cmp.w	fp, #2
 80107b0:	d14d      	bne.n	801084e <__kernel_rem_pio2+0x26e>
 80107b2:	4632      	mov	r2, r6
 80107b4:	463b      	mov	r3, r7
 80107b6:	4954      	ldr	r1, [pc, #336]	; (8010908 <__kernel_rem_pio2+0x328>)
 80107b8:	2000      	movs	r0, #0
 80107ba:	f7ef fd65 	bl	8000288 <__aeabi_dsub>
 80107be:	4606      	mov	r6, r0
 80107c0:	460f      	mov	r7, r1
 80107c2:	2d00      	cmp	r5, #0
 80107c4:	d043      	beq.n	801084e <__kernel_rem_pio2+0x26e>
 80107c6:	4650      	mov	r0, sl
 80107c8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80108f8 <__kernel_rem_pio2+0x318>
 80107cc:	f7ff fe58 	bl	8010480 <scalbn>
 80107d0:	4630      	mov	r0, r6
 80107d2:	4639      	mov	r1, r7
 80107d4:	ec53 2b10 	vmov	r2, r3, d0
 80107d8:	f7ef fd56 	bl	8000288 <__aeabi_dsub>
 80107dc:	4606      	mov	r6, r0
 80107de:	460f      	mov	r7, r1
 80107e0:	e035      	b.n	801084e <__kernel_rem_pio2+0x26e>
 80107e2:	4b4a      	ldr	r3, [pc, #296]	; (801090c <__kernel_rem_pio2+0x32c>)
 80107e4:	2200      	movs	r2, #0
 80107e6:	4630      	mov	r0, r6
 80107e8:	4639      	mov	r1, r7
 80107ea:	f7ef ff05 	bl	80005f8 <__aeabi_dmul>
 80107ee:	f7f0 f9b3 	bl	8000b58 <__aeabi_d2iz>
 80107f2:	f7ef fe97 	bl	8000524 <__aeabi_i2d>
 80107f6:	4602      	mov	r2, r0
 80107f8:	460b      	mov	r3, r1
 80107fa:	ec43 2b18 	vmov	d8, r2, r3
 80107fe:	4b44      	ldr	r3, [pc, #272]	; (8010910 <__kernel_rem_pio2+0x330>)
 8010800:	2200      	movs	r2, #0
 8010802:	f7ef fef9 	bl	80005f8 <__aeabi_dmul>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	4630      	mov	r0, r6
 801080c:	4639      	mov	r1, r7
 801080e:	f7ef fd3b 	bl	8000288 <__aeabi_dsub>
 8010812:	f7f0 f9a1 	bl	8000b58 <__aeabi_d2iz>
 8010816:	e9d5 2300 	ldrd	r2, r3, [r5]
 801081a:	f84b 0b04 	str.w	r0, [fp], #4
 801081e:	ec51 0b18 	vmov	r0, r1, d8
 8010822:	f7ef fd33 	bl	800028c <__adddf3>
 8010826:	f109 39ff 	add.w	r9, r9, #4294967295
 801082a:	4606      	mov	r6, r0
 801082c:	460f      	mov	r7, r1
 801082e:	e75b      	b.n	80106e8 <__kernel_rem_pio2+0x108>
 8010830:	d106      	bne.n	8010840 <__kernel_rem_pio2+0x260>
 8010832:	1e63      	subs	r3, r4, #1
 8010834:	aa0c      	add	r2, sp, #48	; 0x30
 8010836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801083a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801083e:	e79d      	b.n	801077c <__kernel_rem_pio2+0x19c>
 8010840:	4b34      	ldr	r3, [pc, #208]	; (8010914 <__kernel_rem_pio2+0x334>)
 8010842:	2200      	movs	r2, #0
 8010844:	f7f0 f95e 	bl	8000b04 <__aeabi_dcmpge>
 8010848:	2800      	cmp	r0, #0
 801084a:	d140      	bne.n	80108ce <__kernel_rem_pio2+0x2ee>
 801084c:	4683      	mov	fp, r0
 801084e:	2200      	movs	r2, #0
 8010850:	2300      	movs	r3, #0
 8010852:	4630      	mov	r0, r6
 8010854:	4639      	mov	r1, r7
 8010856:	f7f0 f937 	bl	8000ac8 <__aeabi_dcmpeq>
 801085a:	2800      	cmp	r0, #0
 801085c:	f000 80c1 	beq.w	80109e2 <__kernel_rem_pio2+0x402>
 8010860:	1e65      	subs	r5, r4, #1
 8010862:	462b      	mov	r3, r5
 8010864:	2200      	movs	r2, #0
 8010866:	9900      	ldr	r1, [sp, #0]
 8010868:	428b      	cmp	r3, r1
 801086a:	da6d      	bge.n	8010948 <__kernel_rem_pio2+0x368>
 801086c:	2a00      	cmp	r2, #0
 801086e:	f000 808a 	beq.w	8010986 <__kernel_rem_pio2+0x3a6>
 8010872:	ab0c      	add	r3, sp, #48	; 0x30
 8010874:	f1aa 0a18 	sub.w	sl, sl, #24
 8010878:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801087c:	2b00      	cmp	r3, #0
 801087e:	f000 80ae 	beq.w	80109de <__kernel_rem_pio2+0x3fe>
 8010882:	4650      	mov	r0, sl
 8010884:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80108f8 <__kernel_rem_pio2+0x318>
 8010888:	f7ff fdfa 	bl	8010480 <scalbn>
 801088c:	1c6b      	adds	r3, r5, #1
 801088e:	00da      	lsls	r2, r3, #3
 8010890:	9205      	str	r2, [sp, #20]
 8010892:	ec57 6b10 	vmov	r6, r7, d0
 8010896:	aa70      	add	r2, sp, #448	; 0x1c0
 8010898:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801090c <__kernel_rem_pio2+0x32c>
 801089c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80108a0:	462c      	mov	r4, r5
 80108a2:	f04f 0800 	mov.w	r8, #0
 80108a6:	2c00      	cmp	r4, #0
 80108a8:	f280 80d4 	bge.w	8010a54 <__kernel_rem_pio2+0x474>
 80108ac:	462c      	mov	r4, r5
 80108ae:	2c00      	cmp	r4, #0
 80108b0:	f2c0 8102 	blt.w	8010ab8 <__kernel_rem_pio2+0x4d8>
 80108b4:	4b18      	ldr	r3, [pc, #96]	; (8010918 <__kernel_rem_pio2+0x338>)
 80108b6:	461e      	mov	r6, r3
 80108b8:	ab70      	add	r3, sp, #448	; 0x1c0
 80108ba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80108be:	1b2b      	subs	r3, r5, r4
 80108c0:	f04f 0900 	mov.w	r9, #0
 80108c4:	f04f 0a00 	mov.w	sl, #0
 80108c8:	2700      	movs	r7, #0
 80108ca:	9306      	str	r3, [sp, #24]
 80108cc:	e0e6      	b.n	8010a9c <__kernel_rem_pio2+0x4bc>
 80108ce:	f04f 0b02 	mov.w	fp, #2
 80108d2:	e756      	b.n	8010782 <__kernel_rem_pio2+0x1a2>
 80108d4:	f8d8 3000 	ldr.w	r3, [r8]
 80108d8:	bb05      	cbnz	r5, 801091c <__kernel_rem_pio2+0x33c>
 80108da:	b123      	cbz	r3, 80108e6 <__kernel_rem_pio2+0x306>
 80108dc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80108e0:	f8c8 3000 	str.w	r3, [r8]
 80108e4:	2301      	movs	r3, #1
 80108e6:	3201      	adds	r2, #1
 80108e8:	f108 0804 	add.w	r8, r8, #4
 80108ec:	461d      	mov	r5, r3
 80108ee:	e74f      	b.n	8010790 <__kernel_rem_pio2+0x1b0>
	...
 80108fc:	3ff00000 	.word	0x3ff00000
 8010900:	08011ef0 	.word	0x08011ef0
 8010904:	40200000 	.word	0x40200000
 8010908:	3ff00000 	.word	0x3ff00000
 801090c:	3e700000 	.word	0x3e700000
 8010910:	41700000 	.word	0x41700000
 8010914:	3fe00000 	.word	0x3fe00000
 8010918:	08011eb0 	.word	0x08011eb0
 801091c:	1acb      	subs	r3, r1, r3
 801091e:	f8c8 3000 	str.w	r3, [r8]
 8010922:	462b      	mov	r3, r5
 8010924:	e7df      	b.n	80108e6 <__kernel_rem_pio2+0x306>
 8010926:	1e62      	subs	r2, r4, #1
 8010928:	ab0c      	add	r3, sp, #48	; 0x30
 801092a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801092e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010932:	a90c      	add	r1, sp, #48	; 0x30
 8010934:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010938:	e738      	b.n	80107ac <__kernel_rem_pio2+0x1cc>
 801093a:	1e62      	subs	r2, r4, #1
 801093c:	ab0c      	add	r3, sp, #48	; 0x30
 801093e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010942:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010946:	e7f4      	b.n	8010932 <__kernel_rem_pio2+0x352>
 8010948:	a90c      	add	r1, sp, #48	; 0x30
 801094a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801094e:	3b01      	subs	r3, #1
 8010950:	430a      	orrs	r2, r1
 8010952:	e788      	b.n	8010866 <__kernel_rem_pio2+0x286>
 8010954:	3301      	adds	r3, #1
 8010956:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801095a:	2900      	cmp	r1, #0
 801095c:	d0fa      	beq.n	8010954 <__kernel_rem_pio2+0x374>
 801095e:	9a08      	ldr	r2, [sp, #32]
 8010960:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8010964:	446a      	add	r2, sp
 8010966:	3a98      	subs	r2, #152	; 0x98
 8010968:	9208      	str	r2, [sp, #32]
 801096a:	9a06      	ldr	r2, [sp, #24]
 801096c:	a920      	add	r1, sp, #128	; 0x80
 801096e:	18a2      	adds	r2, r4, r2
 8010970:	18e3      	adds	r3, r4, r3
 8010972:	f104 0801 	add.w	r8, r4, #1
 8010976:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801097a:	9302      	str	r3, [sp, #8]
 801097c:	9b02      	ldr	r3, [sp, #8]
 801097e:	4543      	cmp	r3, r8
 8010980:	da04      	bge.n	801098c <__kernel_rem_pio2+0x3ac>
 8010982:	461c      	mov	r4, r3
 8010984:	e6a2      	b.n	80106cc <__kernel_rem_pio2+0xec>
 8010986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010988:	2301      	movs	r3, #1
 801098a:	e7e4      	b.n	8010956 <__kernel_rem_pio2+0x376>
 801098c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801098e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010992:	f7ef fdc7 	bl	8000524 <__aeabi_i2d>
 8010996:	e8e5 0102 	strd	r0, r1, [r5], #8
 801099a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801099c:	46ab      	mov	fp, r5
 801099e:	461c      	mov	r4, r3
 80109a0:	f04f 0900 	mov.w	r9, #0
 80109a4:	2600      	movs	r6, #0
 80109a6:	2700      	movs	r7, #0
 80109a8:	9b05      	ldr	r3, [sp, #20]
 80109aa:	4599      	cmp	r9, r3
 80109ac:	dd06      	ble.n	80109bc <__kernel_rem_pio2+0x3dc>
 80109ae:	9b08      	ldr	r3, [sp, #32]
 80109b0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80109b4:	f108 0801 	add.w	r8, r8, #1
 80109b8:	9308      	str	r3, [sp, #32]
 80109ba:	e7df      	b.n	801097c <__kernel_rem_pio2+0x39c>
 80109bc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80109c0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80109c4:	f7ef fe18 	bl	80005f8 <__aeabi_dmul>
 80109c8:	4602      	mov	r2, r0
 80109ca:	460b      	mov	r3, r1
 80109cc:	4630      	mov	r0, r6
 80109ce:	4639      	mov	r1, r7
 80109d0:	f7ef fc5c 	bl	800028c <__adddf3>
 80109d4:	f109 0901 	add.w	r9, r9, #1
 80109d8:	4606      	mov	r6, r0
 80109da:	460f      	mov	r7, r1
 80109dc:	e7e4      	b.n	80109a8 <__kernel_rem_pio2+0x3c8>
 80109de:	3d01      	subs	r5, #1
 80109e0:	e747      	b.n	8010872 <__kernel_rem_pio2+0x292>
 80109e2:	ec47 6b10 	vmov	d0, r6, r7
 80109e6:	f1ca 0000 	rsb	r0, sl, #0
 80109ea:	f7ff fd49 	bl	8010480 <scalbn>
 80109ee:	ec57 6b10 	vmov	r6, r7, d0
 80109f2:	4ba0      	ldr	r3, [pc, #640]	; (8010c74 <__kernel_rem_pio2+0x694>)
 80109f4:	ee10 0a10 	vmov	r0, s0
 80109f8:	2200      	movs	r2, #0
 80109fa:	4639      	mov	r1, r7
 80109fc:	f7f0 f882 	bl	8000b04 <__aeabi_dcmpge>
 8010a00:	b1f8      	cbz	r0, 8010a42 <__kernel_rem_pio2+0x462>
 8010a02:	4b9d      	ldr	r3, [pc, #628]	; (8010c78 <__kernel_rem_pio2+0x698>)
 8010a04:	2200      	movs	r2, #0
 8010a06:	4630      	mov	r0, r6
 8010a08:	4639      	mov	r1, r7
 8010a0a:	f7ef fdf5 	bl	80005f8 <__aeabi_dmul>
 8010a0e:	f7f0 f8a3 	bl	8000b58 <__aeabi_d2iz>
 8010a12:	4680      	mov	r8, r0
 8010a14:	f7ef fd86 	bl	8000524 <__aeabi_i2d>
 8010a18:	4b96      	ldr	r3, [pc, #600]	; (8010c74 <__kernel_rem_pio2+0x694>)
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	f7ef fdec 	bl	80005f8 <__aeabi_dmul>
 8010a20:	460b      	mov	r3, r1
 8010a22:	4602      	mov	r2, r0
 8010a24:	4639      	mov	r1, r7
 8010a26:	4630      	mov	r0, r6
 8010a28:	f7ef fc2e 	bl	8000288 <__aeabi_dsub>
 8010a2c:	f7f0 f894 	bl	8000b58 <__aeabi_d2iz>
 8010a30:	1c65      	adds	r5, r4, #1
 8010a32:	ab0c      	add	r3, sp, #48	; 0x30
 8010a34:	f10a 0a18 	add.w	sl, sl, #24
 8010a38:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010a3c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010a40:	e71f      	b.n	8010882 <__kernel_rem_pio2+0x2a2>
 8010a42:	4630      	mov	r0, r6
 8010a44:	4639      	mov	r1, r7
 8010a46:	f7f0 f887 	bl	8000b58 <__aeabi_d2iz>
 8010a4a:	ab0c      	add	r3, sp, #48	; 0x30
 8010a4c:	4625      	mov	r5, r4
 8010a4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010a52:	e716      	b.n	8010882 <__kernel_rem_pio2+0x2a2>
 8010a54:	ab0c      	add	r3, sp, #48	; 0x30
 8010a56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010a5a:	f7ef fd63 	bl	8000524 <__aeabi_i2d>
 8010a5e:	4632      	mov	r2, r6
 8010a60:	463b      	mov	r3, r7
 8010a62:	f7ef fdc9 	bl	80005f8 <__aeabi_dmul>
 8010a66:	4642      	mov	r2, r8
 8010a68:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010a6c:	464b      	mov	r3, r9
 8010a6e:	4630      	mov	r0, r6
 8010a70:	4639      	mov	r1, r7
 8010a72:	f7ef fdc1 	bl	80005f8 <__aeabi_dmul>
 8010a76:	3c01      	subs	r4, #1
 8010a78:	4606      	mov	r6, r0
 8010a7a:	460f      	mov	r7, r1
 8010a7c:	e713      	b.n	80108a6 <__kernel_rem_pio2+0x2c6>
 8010a7e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010a82:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010a86:	f7ef fdb7 	bl	80005f8 <__aeabi_dmul>
 8010a8a:	4602      	mov	r2, r0
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	4648      	mov	r0, r9
 8010a90:	4651      	mov	r1, sl
 8010a92:	f7ef fbfb 	bl	800028c <__adddf3>
 8010a96:	3701      	adds	r7, #1
 8010a98:	4681      	mov	r9, r0
 8010a9a:	468a      	mov	sl, r1
 8010a9c:	9b00      	ldr	r3, [sp, #0]
 8010a9e:	429f      	cmp	r7, r3
 8010aa0:	dc02      	bgt.n	8010aa8 <__kernel_rem_pio2+0x4c8>
 8010aa2:	9b06      	ldr	r3, [sp, #24]
 8010aa4:	429f      	cmp	r7, r3
 8010aa6:	ddea      	ble.n	8010a7e <__kernel_rem_pio2+0x49e>
 8010aa8:	9a06      	ldr	r2, [sp, #24]
 8010aaa:	ab48      	add	r3, sp, #288	; 0x120
 8010aac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8010ab0:	e9c6 9a00 	strd	r9, sl, [r6]
 8010ab4:	3c01      	subs	r4, #1
 8010ab6:	e6fa      	b.n	80108ae <__kernel_rem_pio2+0x2ce>
 8010ab8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010aba:	2b02      	cmp	r3, #2
 8010abc:	dc0b      	bgt.n	8010ad6 <__kernel_rem_pio2+0x4f6>
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	dc39      	bgt.n	8010b36 <__kernel_rem_pio2+0x556>
 8010ac2:	d05d      	beq.n	8010b80 <__kernel_rem_pio2+0x5a0>
 8010ac4:	9b02      	ldr	r3, [sp, #8]
 8010ac6:	f003 0007 	and.w	r0, r3, #7
 8010aca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010ace:	ecbd 8b02 	vpop	{d8}
 8010ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010ad8:	2b03      	cmp	r3, #3
 8010ada:	d1f3      	bne.n	8010ac4 <__kernel_rem_pio2+0x4e4>
 8010adc:	9b05      	ldr	r3, [sp, #20]
 8010ade:	9500      	str	r5, [sp, #0]
 8010ae0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010ae4:	eb0d 0403 	add.w	r4, sp, r3
 8010ae8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8010aec:	46a2      	mov	sl, r4
 8010aee:	9b00      	ldr	r3, [sp, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f1aa 0a08 	sub.w	sl, sl, #8
 8010af6:	dc69      	bgt.n	8010bcc <__kernel_rem_pio2+0x5ec>
 8010af8:	46aa      	mov	sl, r5
 8010afa:	f1ba 0f01 	cmp.w	sl, #1
 8010afe:	f1a4 0408 	sub.w	r4, r4, #8
 8010b02:	f300 8083 	bgt.w	8010c0c <__kernel_rem_pio2+0x62c>
 8010b06:	9c05      	ldr	r4, [sp, #20]
 8010b08:	ab48      	add	r3, sp, #288	; 0x120
 8010b0a:	441c      	add	r4, r3
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	2100      	movs	r1, #0
 8010b10:	2d01      	cmp	r5, #1
 8010b12:	f300 809a 	bgt.w	8010c4a <__kernel_rem_pio2+0x66a>
 8010b16:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8010b1a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010b1e:	f1bb 0f00 	cmp.w	fp, #0
 8010b22:	f040 8098 	bne.w	8010c56 <__kernel_rem_pio2+0x676>
 8010b26:	9b04      	ldr	r3, [sp, #16]
 8010b28:	e9c3 7800 	strd	r7, r8, [r3]
 8010b2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010b30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010b34:	e7c6      	b.n	8010ac4 <__kernel_rem_pio2+0x4e4>
 8010b36:	9e05      	ldr	r6, [sp, #20]
 8010b38:	ab48      	add	r3, sp, #288	; 0x120
 8010b3a:	441e      	add	r6, r3
 8010b3c:	462c      	mov	r4, r5
 8010b3e:	2000      	movs	r0, #0
 8010b40:	2100      	movs	r1, #0
 8010b42:	2c00      	cmp	r4, #0
 8010b44:	da33      	bge.n	8010bae <__kernel_rem_pio2+0x5ce>
 8010b46:	f1bb 0f00 	cmp.w	fp, #0
 8010b4a:	d036      	beq.n	8010bba <__kernel_rem_pio2+0x5da>
 8010b4c:	4602      	mov	r2, r0
 8010b4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b52:	9c04      	ldr	r4, [sp, #16]
 8010b54:	e9c4 2300 	strd	r2, r3, [r4]
 8010b58:	4602      	mov	r2, r0
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010b60:	f7ef fb92 	bl	8000288 <__aeabi_dsub>
 8010b64:	ae4a      	add	r6, sp, #296	; 0x128
 8010b66:	2401      	movs	r4, #1
 8010b68:	42a5      	cmp	r5, r4
 8010b6a:	da29      	bge.n	8010bc0 <__kernel_rem_pio2+0x5e0>
 8010b6c:	f1bb 0f00 	cmp.w	fp, #0
 8010b70:	d002      	beq.n	8010b78 <__kernel_rem_pio2+0x598>
 8010b72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b76:	4619      	mov	r1, r3
 8010b78:	9b04      	ldr	r3, [sp, #16]
 8010b7a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010b7e:	e7a1      	b.n	8010ac4 <__kernel_rem_pio2+0x4e4>
 8010b80:	9c05      	ldr	r4, [sp, #20]
 8010b82:	ab48      	add	r3, sp, #288	; 0x120
 8010b84:	441c      	add	r4, r3
 8010b86:	2000      	movs	r0, #0
 8010b88:	2100      	movs	r1, #0
 8010b8a:	2d00      	cmp	r5, #0
 8010b8c:	da09      	bge.n	8010ba2 <__kernel_rem_pio2+0x5c2>
 8010b8e:	f1bb 0f00 	cmp.w	fp, #0
 8010b92:	d002      	beq.n	8010b9a <__kernel_rem_pio2+0x5ba>
 8010b94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b98:	4619      	mov	r1, r3
 8010b9a:	9b04      	ldr	r3, [sp, #16]
 8010b9c:	e9c3 0100 	strd	r0, r1, [r3]
 8010ba0:	e790      	b.n	8010ac4 <__kernel_rem_pio2+0x4e4>
 8010ba2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010ba6:	f7ef fb71 	bl	800028c <__adddf3>
 8010baa:	3d01      	subs	r5, #1
 8010bac:	e7ed      	b.n	8010b8a <__kernel_rem_pio2+0x5aa>
 8010bae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8010bb2:	f7ef fb6b 	bl	800028c <__adddf3>
 8010bb6:	3c01      	subs	r4, #1
 8010bb8:	e7c3      	b.n	8010b42 <__kernel_rem_pio2+0x562>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	e7c8      	b.n	8010b52 <__kernel_rem_pio2+0x572>
 8010bc0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010bc4:	f7ef fb62 	bl	800028c <__adddf3>
 8010bc8:	3401      	adds	r4, #1
 8010bca:	e7cd      	b.n	8010b68 <__kernel_rem_pio2+0x588>
 8010bcc:	e9da 8900 	ldrd	r8, r9, [sl]
 8010bd0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010bd4:	9b00      	ldr	r3, [sp, #0]
 8010bd6:	3b01      	subs	r3, #1
 8010bd8:	9300      	str	r3, [sp, #0]
 8010bda:	4632      	mov	r2, r6
 8010bdc:	463b      	mov	r3, r7
 8010bde:	4640      	mov	r0, r8
 8010be0:	4649      	mov	r1, r9
 8010be2:	f7ef fb53 	bl	800028c <__adddf3>
 8010be6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010bea:	4602      	mov	r2, r0
 8010bec:	460b      	mov	r3, r1
 8010bee:	4640      	mov	r0, r8
 8010bf0:	4649      	mov	r1, r9
 8010bf2:	f7ef fb49 	bl	8000288 <__aeabi_dsub>
 8010bf6:	4632      	mov	r2, r6
 8010bf8:	463b      	mov	r3, r7
 8010bfa:	f7ef fb47 	bl	800028c <__adddf3>
 8010bfe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010c02:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010c06:	ed8a 7b00 	vstr	d7, [sl]
 8010c0a:	e770      	b.n	8010aee <__kernel_rem_pio2+0x50e>
 8010c0c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010c10:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010c14:	4640      	mov	r0, r8
 8010c16:	4632      	mov	r2, r6
 8010c18:	463b      	mov	r3, r7
 8010c1a:	4649      	mov	r1, r9
 8010c1c:	f7ef fb36 	bl	800028c <__adddf3>
 8010c20:	e9cd 0100 	strd	r0, r1, [sp]
 8010c24:	4602      	mov	r2, r0
 8010c26:	460b      	mov	r3, r1
 8010c28:	4640      	mov	r0, r8
 8010c2a:	4649      	mov	r1, r9
 8010c2c:	f7ef fb2c 	bl	8000288 <__aeabi_dsub>
 8010c30:	4632      	mov	r2, r6
 8010c32:	463b      	mov	r3, r7
 8010c34:	f7ef fb2a 	bl	800028c <__adddf3>
 8010c38:	ed9d 7b00 	vldr	d7, [sp]
 8010c3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010c40:	ed84 7b00 	vstr	d7, [r4]
 8010c44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c48:	e757      	b.n	8010afa <__kernel_rem_pio2+0x51a>
 8010c4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c4e:	f7ef fb1d 	bl	800028c <__adddf3>
 8010c52:	3d01      	subs	r5, #1
 8010c54:	e75c      	b.n	8010b10 <__kernel_rem_pio2+0x530>
 8010c56:	9b04      	ldr	r3, [sp, #16]
 8010c58:	9a04      	ldr	r2, [sp, #16]
 8010c5a:	601f      	str	r7, [r3, #0]
 8010c5c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010c60:	605c      	str	r4, [r3, #4]
 8010c62:	609d      	str	r5, [r3, #8]
 8010c64:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010c68:	60d3      	str	r3, [r2, #12]
 8010c6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c6e:	6110      	str	r0, [r2, #16]
 8010c70:	6153      	str	r3, [r2, #20]
 8010c72:	e727      	b.n	8010ac4 <__kernel_rem_pio2+0x4e4>
 8010c74:	41700000 	.word	0x41700000
 8010c78:	3e700000 	.word	0x3e700000
 8010c7c:	00000000 	.word	0x00000000

08010c80 <floor>:
 8010c80:	ec51 0b10 	vmov	r0, r1, d0
 8010c84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c8c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8010c90:	2e13      	cmp	r6, #19
 8010c92:	ee10 5a10 	vmov	r5, s0
 8010c96:	ee10 8a10 	vmov	r8, s0
 8010c9a:	460c      	mov	r4, r1
 8010c9c:	dc31      	bgt.n	8010d02 <floor+0x82>
 8010c9e:	2e00      	cmp	r6, #0
 8010ca0:	da14      	bge.n	8010ccc <floor+0x4c>
 8010ca2:	a333      	add	r3, pc, #204	; (adr r3, 8010d70 <floor+0xf0>)
 8010ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca8:	f7ef faf0 	bl	800028c <__adddf3>
 8010cac:	2200      	movs	r2, #0
 8010cae:	2300      	movs	r3, #0
 8010cb0:	f7ef ff32 	bl	8000b18 <__aeabi_dcmpgt>
 8010cb4:	b138      	cbz	r0, 8010cc6 <floor+0x46>
 8010cb6:	2c00      	cmp	r4, #0
 8010cb8:	da53      	bge.n	8010d62 <floor+0xe2>
 8010cba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010cbe:	4325      	orrs	r5, r4
 8010cc0:	d052      	beq.n	8010d68 <floor+0xe8>
 8010cc2:	4c2d      	ldr	r4, [pc, #180]	; (8010d78 <floor+0xf8>)
 8010cc4:	2500      	movs	r5, #0
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	4628      	mov	r0, r5
 8010cca:	e024      	b.n	8010d16 <floor+0x96>
 8010ccc:	4f2b      	ldr	r7, [pc, #172]	; (8010d7c <floor+0xfc>)
 8010cce:	4137      	asrs	r7, r6
 8010cd0:	ea01 0307 	and.w	r3, r1, r7
 8010cd4:	4303      	orrs	r3, r0
 8010cd6:	d01e      	beq.n	8010d16 <floor+0x96>
 8010cd8:	a325      	add	r3, pc, #148	; (adr r3, 8010d70 <floor+0xf0>)
 8010cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cde:	f7ef fad5 	bl	800028c <__adddf3>
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	f7ef ff17 	bl	8000b18 <__aeabi_dcmpgt>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	d0eb      	beq.n	8010cc6 <floor+0x46>
 8010cee:	2c00      	cmp	r4, #0
 8010cf0:	bfbe      	ittt	lt
 8010cf2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010cf6:	4133      	asrlt	r3, r6
 8010cf8:	18e4      	addlt	r4, r4, r3
 8010cfa:	ea24 0407 	bic.w	r4, r4, r7
 8010cfe:	2500      	movs	r5, #0
 8010d00:	e7e1      	b.n	8010cc6 <floor+0x46>
 8010d02:	2e33      	cmp	r6, #51	; 0x33
 8010d04:	dd0b      	ble.n	8010d1e <floor+0x9e>
 8010d06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010d0a:	d104      	bne.n	8010d16 <floor+0x96>
 8010d0c:	ee10 2a10 	vmov	r2, s0
 8010d10:	460b      	mov	r3, r1
 8010d12:	f7ef fabb 	bl	800028c <__adddf3>
 8010d16:	ec41 0b10 	vmov	d0, r0, r1
 8010d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d1e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8010d22:	f04f 37ff 	mov.w	r7, #4294967295
 8010d26:	40df      	lsrs	r7, r3
 8010d28:	4238      	tst	r0, r7
 8010d2a:	d0f4      	beq.n	8010d16 <floor+0x96>
 8010d2c:	a310      	add	r3, pc, #64	; (adr r3, 8010d70 <floor+0xf0>)
 8010d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d32:	f7ef faab 	bl	800028c <__adddf3>
 8010d36:	2200      	movs	r2, #0
 8010d38:	2300      	movs	r3, #0
 8010d3a:	f7ef feed 	bl	8000b18 <__aeabi_dcmpgt>
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	d0c1      	beq.n	8010cc6 <floor+0x46>
 8010d42:	2c00      	cmp	r4, #0
 8010d44:	da0a      	bge.n	8010d5c <floor+0xdc>
 8010d46:	2e14      	cmp	r6, #20
 8010d48:	d101      	bne.n	8010d4e <floor+0xce>
 8010d4a:	3401      	adds	r4, #1
 8010d4c:	e006      	b.n	8010d5c <floor+0xdc>
 8010d4e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010d52:	2301      	movs	r3, #1
 8010d54:	40b3      	lsls	r3, r6
 8010d56:	441d      	add	r5, r3
 8010d58:	45a8      	cmp	r8, r5
 8010d5a:	d8f6      	bhi.n	8010d4a <floor+0xca>
 8010d5c:	ea25 0507 	bic.w	r5, r5, r7
 8010d60:	e7b1      	b.n	8010cc6 <floor+0x46>
 8010d62:	2500      	movs	r5, #0
 8010d64:	462c      	mov	r4, r5
 8010d66:	e7ae      	b.n	8010cc6 <floor+0x46>
 8010d68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010d6c:	e7ab      	b.n	8010cc6 <floor+0x46>
 8010d6e:	bf00      	nop
 8010d70:	8800759c 	.word	0x8800759c
 8010d74:	7e37e43c 	.word	0x7e37e43c
 8010d78:	bff00000 	.word	0xbff00000
 8010d7c:	000fffff 	.word	0x000fffff

08010d80 <_init>:
 8010d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d82:	bf00      	nop
 8010d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d86:	bc08      	pop	{r3}
 8010d88:	469e      	mov	lr, r3
 8010d8a:	4770      	bx	lr

08010d8c <_fini>:
 8010d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d8e:	bf00      	nop
 8010d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d92:	bc08      	pop	{r3}
 8010d94:	469e      	mov	lr, r3
 8010d96:	4770      	bx	lr
