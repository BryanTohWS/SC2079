
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011028  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001158  080111b8  080111b8  000211b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012310  08012310  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012310  08012310  00022310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012318  08012318  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012318  08012318  00022318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801231c  0801231c  0002231c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012320  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          00000948  200001e8  200001e8  000301e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b30  20000b30  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018040  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bc8  00000000  00000000  0004829b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001598  00000000  00000000  0004be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010cd  00000000  00000000  0004d400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026420  00000000  00000000  0004e4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c2d7  00000000  00000000  000748ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dfeb4  00000000  00000000  00090bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007430  00000000  00000000  00170a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00177ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080111a0 	.word	0x080111a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080111a0 	.word	0x080111a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_ICM20948_SelectUserBank>:

#include "ICM20948.h"

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	b2db      	uxtb	r3, r3
 800100a:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <_ICM20948_SelectUserBank+0x26>
 8001012:	2368      	movs	r3, #104	; 0x68
 8001014:	e000      	b.n	8001018 <_ICM20948_SelectUserBank+0x28>
 8001016:	2369      	movs	r3, #105	; 0x69
 8001018:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800101a:	7dbb      	ldrb	r3, [r7, #22]
 800101c:	b29b      	uxth	r3, r3
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b299      	uxth	r1, r3
 8001022:	230a      	movs	r3, #10
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2301      	movs	r3, #1
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 0315 	add.w	r3, r7, #21
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	227f      	movs	r2, #127	; 0x7f
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f004 ff8f 	bl	8005f58 <HAL_I2C_Mem_Write>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4603      	mov	r3, r0
 8001058:	70fb      	strb	r3, [r7, #3]
 800105a:	460b      	mov	r3, r1
 800105c:	70bb      	strb	r3, [r7, #2]
 800105e:	4613      	mov	r3, r2
 8001060:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <_ICM20948_WriteByte+0x28>
 800106c:	2368      	movs	r3, #104	; 0x68
 800106e:	e000      	b.n	8001072 <_ICM20948_WriteByte+0x2a>
 8001070:	2369      	movs	r3, #105	; 0x69
 8001072:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	b29b      	uxth	r3, r3
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b299      	uxth	r1, r3
 800107c:	78bb      	ldrb	r3, [r7, #2]
 800107e:	b29a      	uxth	r2, r3
 8001080:	230a      	movs	r3, #10
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1c7b      	adds	r3, r7, #1
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f004 ff62 	bl	8005f58 <HAL_I2C_Mem_Write>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b088      	sub	sp, #32
 80010a6:	af04      	add	r7, sp, #16
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	70fb      	strb	r3, [r7, #3]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70bb      	strb	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <_ICM20948_BrustRead+0x28>
 80010c6:	2368      	movs	r3, #104	; 0x68
 80010c8:	e000      	b.n	80010cc <_ICM20948_BrustRead+0x2a>
 80010ca:	2369      	movs	r3, #105	; 0x69
 80010cc:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b299      	uxth	r1, r3
 80010d6:	78bb      	ldrb	r3, [r7, #2]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	230a      	movs	r3, #10
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	883b      	ldrh	r3, [r7, #0]
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f005 f82f 	bl	800614c <HAL_I2C_Mem_Read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	b29a      	uxth	r2, r3
 8001114:	230a      	movs	r3, #10
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	1cbb      	adds	r3, r7, #2
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2118      	movs	r1, #24
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f004 ff17 	bl	8005f58 <HAL_I2C_Mem_Write>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_AK09916_ReadByte>:

HAL_StatusTypeDef _AK09916_ReadByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t *readData) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af04      	add	r7, sp, #16
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	460b      	mov	r3, r1
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	b29a      	uxth	r2, r3
 800114e:	230a      	movs	r3, #10
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	2118      	movs	r1, #24
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f004 fff4 	bl	800614c <HAL_I2C_Mem_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001168:	7dfb      	ldrb	r3, [r7, #23]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_AK09916_BrustRead>:

HAL_StatusTypeDef _AK09916_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b08a      	sub	sp, #40	; 0x28
 8001176:	af04      	add	r7, sp, #16
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	72fb      	strb	r3, [r7, #11]
 8001180:	4613      	mov	r3, r2
 8001182:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	b29a      	uxth	r2, r3
 800118c:	230a      	movs	r3, #10
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	893b      	ldrh	r3, [r7, #8]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2118      	movs	r1, #24
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f004 ffd5 	bl	800614c <HAL_I2C_Mem_Read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	70fb      	strb	r3, [r7, #3]
 80011c2:	460b      	mov	r3, r1
 80011c4:	70bb      	strb	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff0b 	bl	8000ff0 <_ICM20948_SelectUserBank>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 80011de:	78f9      	ldrb	r1, [r7, #3]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	2206      	movs	r2, #6
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff2f 	bl	8001048 <_ICM20948_WriteByte>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 80011ee:	20c8      	movs	r0, #200	; 0xc8
 80011f0:	f003 fe24 	bl	8004e3c <HAL_Delay>

	status = _ICM20948_WriteByte(
 80011f4:	78f9      	ldrb	r1, [r7, #3]
 80011f6:	2301      	movs	r3, #1
 80011f8:	2206      	movs	r2, #6
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff24 	bl	8001048 <_ICM20948_WriteByte>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8001204:	78f9      	ldrb	r1, [r7, #3]
 8001206:	2300      	movs	r3, #0
 8001208:	2207      	movs	r2, #7
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff1c 	bl	8001048 <_ICM20948_WriteByte>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2202      	movs	r2, #2
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fee8 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8001230:	b2db      	uxtb	r3, r3
 8001232:	78f9      	ldrb	r1, [r7, #3]
 8001234:	2201      	movs	r2, #1
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff06 	bl	8001048 <_ICM20948_WriteByte>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8001240:	78f9      	ldrb	r1, [r7, #3]
 8001242:	2304      	movs	r3, #4
 8001244:	2200      	movs	r2, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fefe 	bl	8001048 <_ICM20948_WriteByte>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	b25b      	sxtb	r3, r3
 8001256:	f043 0309 	orr.w	r3, r3, #9
 800125a:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800125c:	b2db      	uxtb	r3, r3
 800125e:	78f9      	ldrb	r1, [r7, #3]
 8001260:	2214      	movs	r2, #20
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fef0 	bl	8001048 <_ICM20948_WriteByte>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 800126c:	78f9      	ldrb	r1, [r7, #3]
 800126e:	2304      	movs	r3, #4
 8001270:	2211      	movs	r2, #17
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fee8 	bl	8001048 <_ICM20948_WriteByte>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff feb4 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800128c:	78f9      	ldrb	r1, [r7, #3]
 800128e:	2302      	movs	r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fed8 	bl	8001048 <_ICM20948_WriteByte>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 800129c:	2208      	movs	r2, #8
 800129e:	2131      	movs	r1, #49	; 0x31
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff2b 	bl	80010fc <_AK09916_WriteByte>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	0000      	movs	r0, r0
 80012b4:	0000      	movs	r0, r0
	...

080012b8 <ICM20948_readGyroscope_Z>:

void ICM20948_readGyroscope_Z(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float *gyroZ) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	72fb      	strb	r3, [r7, #11]
 80012c6:	4613      	mov	r3, r2
 80012c8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[2];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_ZOUT_H__REGISTER, 2, readData);
 80012ca:	7af9      	ldrb	r1, [r7, #11]
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2302      	movs	r3, #2
 80012d4:	2237      	movs	r2, #55	; 0x37
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff fee3 	bl	80010a2 <_ICM20948_BrustRead>

	int16_t reading = readData[0]<<8 | readData[1];
 80012dc:	7d3b      	ldrb	r3, [r7, #20]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	7d7b      	ldrb	r3, [r7, #21]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	82fb      	strh	r3, [r7, #22]
	*gyroZ = (float) -reading;
 80012ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012ee:	425b      	negs	r3, r3
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edc3 7a00 	vstr	s15, [r3]
	switch (selectGyroSensitivity) {
 80012fe:	7abb      	ldrb	r3, [r7, #10]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d849      	bhi.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <ICM20948_readGyroscope_Z+0x54>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001333 	.word	0x08001333
 8001314:	08001349 	.word	0x08001349
 8001318:	08001371 	.word	0x08001371
		case GYRO_FULL_SCALE_250DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	eddf 6a23 	vldr	s13, [pc, #140]	; 80013b0 <ICM20948_readGyroscope_Z+0xf8>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001330:	e032      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_500DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80013b4 <ICM20948_readGyroscope_Z+0xfc>
 800133c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001346:	e027      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_1000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8fb 	bl	8000548 <__aeabi_f2d>
 8001352:	a313      	add	r3, pc, #76	; (adr r3, 80013a0 <ICM20948_readGyroscope_Z+0xe8>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff fa78 	bl	800084c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc40 	bl	8000be8 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	601a      	str	r2, [r3, #0]
			break;
 800136e:	e013      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_2000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	a30b      	add	r3, pc, #44	; (adr r3, 80013a8 <ICM20948_readGyroscope_Z+0xf0>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fa64 	bl	800084c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc2c 	bl	8000be8 <__aeabi_d2f>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
			break;
 8001396:	bf00      	nop
	}

}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	66666666 	.word	0x66666666
 80013a4:	40406666 	.word	0x40406666
 80013a8:	66666666 	.word	0x66666666
 80013ac:	40306666 	.word	0x40306666
 80013b0:	43030000 	.word	0x43030000
 80013b4:	42830000 	.word	0x42830000

080013b8 <ICM20948_readAccelerometer_all>:

void ICM20948_readAccelerometer_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, float readings[3]) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af02      	add	r7, sp, #8
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	72fb      	strb	r3, [r7, #11]
 80013c6:	4613      	mov	r3, r2
 80013c8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 80013ca:	7af9      	ldrb	r1, [r7, #11]
 80013cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2306      	movs	r3, #6
 80013d4:	222d      	movs	r2, #45	; 0x2d
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff fe63 	bl	80010a2 <_ICM20948_BrustRead>


	int16_t rD_int[3];
	rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 80013dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	843b      	strh	r3, [r7, #32]
	rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 80013f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21b      	sxth	r3, r3
 8001402:	847b      	strh	r3, [r7, #34]	; 0x22
	rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8001404:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21b      	sxth	r3, r3
 8001416:	84bb      	strh	r3, [r7, #36]	; 0x24

	float rD[3];
	rD[X] = (float) rD_int[X];
 8001418:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001424:	edc7 7a05 	vstr	s15, [r7, #20]
	rD[Y] = (float) rD_int[Y];
 8001428:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001434:	edc7 7a06 	vstr	s15, [r7, #24]
	rD[Z] = (float) rD_int[Z];
 8001438:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001444:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (selectAccelSensitivity) {
 8001448:	7abb      	ldrb	r3, [r7, #10]
 800144a:	2b03      	cmp	r3, #3
 800144c:	f200 8084 	bhi.w	8001558 <ICM20948_readAccelerometer_all+0x1a0>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <ICM20948_readAccelerometer_all+0xa0>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001469 	.word	0x08001469
 800145c:	080014a5 	.word	0x080014a5
 8001460:	080014e1 	.word	0x080014e1
 8001464:	0800151d 	.word	0x0800151d
		case ACCEL_FULL_SCALE_2G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8001468:	ed97 7a05 	vldr	s14, [r7, #20]
 800146c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 8001470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800147a:	ed97 7a06 	vldr	s14, [r7, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3304      	adds	r3, #4
 8001482:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 8001486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148a:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800148e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3308      	adds	r3, #8
 8001496:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 800149a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149e:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014a2:	e059      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_4G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80014a8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3304      	adds	r3, #4
 80014be:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c6:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3308      	adds	r3, #8
 80014d2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014da:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014de:	e03b      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_8G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 80014e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 80014e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 80014f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3304      	adds	r3, #4
 80014fa:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 80014fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001502:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8001506:	ed97 7a07 	vldr	s14, [r7, #28]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3308      	adds	r3, #8
 800150e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 8001512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001516:	edc3 7a00 	vstr	s15, [r3]
			break;
 800151a:	e01d      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_16G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800151c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001520:	eddf 6a12 	vldr	s13, [pc, #72]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 8001524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800152e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 800153a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153e:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8001542:	ed97 7a07 	vldr	s14, [r7, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3308      	adds	r3, #8
 800154a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001556:	bf00      	nop
	}
}
 8001558:	bf00      	nop
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	46800000 	.word	0x46800000
 8001564:	46000000 	.word	0x46000000
 8001568:	45800000 	.word	0x45800000
 800156c:	45000000 	.word	0x45000000

08001570 <ICM20948_readMagnetometer_XY>:

void ICM20948_readMagnetometer_XY(I2C_HandleTypeDef * hi2c, float magXY[2]) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	uint8_t readData[4];
	_AK09916_BrustRead(hi2c, AK09916__XOUT_L__REGISTER, 4, readData);
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2204      	movs	r2, #4
 8001580:	2111      	movs	r1, #17
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fdf5 	bl	8001172 <_AK09916_BrustRead>

	//read status register to mark end of data read.
	uint8_t st2;
	_AK09916_ReadByte(hi2c, AK09916__ST2__REGISTER, &st2);
 8001588:	f107 030f 	add.w	r3, r7, #15
 800158c:	461a      	mov	r2, r3
 800158e:	2118      	movs	r1, #24
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fdd1 	bl	8001138 <_AK09916_ReadByte>
	int16_t reading;
	for (uint8_t i = 0; i < 2; i++) {
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
 800159a:	e02a      	b.n	80015f2 <ICM20948_readMagnetometer_XY+0x82>
		reading = readData[1+2*i]<<8|readData[2*i];
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	3301      	adds	r3, #1
 80015a2:	3318      	adds	r3, #24
 80015a4:	443b      	add	r3, r7
 80015a6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	3318      	adds	r3, #24
 80015b4:	443b      	add	r3, r7
 80015b6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	82bb      	strh	r3, [r7, #20]
		magXY[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
 80015c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffad 	bl	8000524 <__aeabi_i2d>
 80015ca:	a30f      	add	r3, pc, #60	; (adr r3, 8001608 <ICM20948_readMagnetometer_XY+0x98>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f812 	bl	80005f8 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	18d4      	adds	r4, r2, r3
 80015e4:	f7ff fb00 	bl	8000be8 <__aeabi_d2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	6023      	str	r3, [r4, #0]
	for (uint8_t i = 0; i < 2; i++) {
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	3301      	adds	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d9d1      	bls.n	800159c <ICM20948_readMagnetometer_XY+0x2c>
	}
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	33333333 	.word	0x33333333
 800160c:	3fc33333 	.word	0x3fc33333

08001610 <angle_init>:
#include "angle.h"

static KalmanParams kParams;

void angle_init(float heading) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	ed87 0a01 	vstr	s0, [r7, #4]
	angle_reset(heading);
 800161a:	ed97 0a01 	vldr	s0, [r7, #4]
 800161e:	f000 f805 	bl	800162c <angle_reset>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <angle_reset>:

void angle_reset(float heading) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	ed87 0a01 	vstr	s0, [r7, #4]
	kalman_init(&kParams, heading, ANGLE_S_W, ANGLE_S_HEADING);
 8001636:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
 800163a:	eef2 0a0c 	vmov.f32	s1, #44	; 0x41600000  14.0
 800163e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001642:	4803      	ldr	r0, [pc, #12]	; (8001650 <angle_reset+0x24>)
 8001644:	f000 fdcc 	bl	80021e0 <kalman_init>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000204 	.word	0x20000204

08001654 <angle_get>:
float angle_get(float msElapsed, float w, float heading) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	ed87 0a03 	vstr	s0, [r7, #12]
 800165e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001662:	ed87 1a01 	vstr	s2, [r7, #4]
	float angle_w = add_angle(kParams.last_est, w * msElapsed);
 8001666:	4b35      	ldr	r3, [pc, #212]	; (800173c <angle_get+0xe8>)
 8001668:	edd3 6a00 	vldr	s13, [r3]
 800166c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001670:	edd7 7a03 	vldr	s15, [r7, #12]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	eef0 0a67 	vmov.f32	s1, s15
 800167c:	eeb0 0a66 	vmov.f32	s0, s13
 8001680:	f000 fbfe 	bl	8001e80 <add_angle>
 8001684:	ed87 0a05 	vstr	s0, [r7, #20]

	kParams.s_est += msElapsed * msElapsed * ANGLE_S_W;
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <angle_get+0xe8>)
 800168a:	ed93 7a01 	vldr	s14, [r3, #4]
 800168e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001692:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001696:	eef2 6a0c 	vmov.f32	s13, #44	; 0x41600000  14.0
 800169a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <angle_get+0xe8>)
 80016a4:	edc3 7a01 	vstr	s15, [r3, #4]
	kalman_update(&kParams, angle_w, heading);
 80016a8:	edd7 0a01 	vldr	s1, [r7, #4]
 80016ac:	ed97 0a05 	vldr	s0, [r7, #20]
 80016b0:	4822      	ldr	r0, [pc, #136]	; (800173c <angle_get+0xe8>)
 80016b2:	f000 fdae 	bl	8002212 <kalman_update>

	if (angle_w < -90 && (heading - angle_w) > 180 || heading < -90 && (angle_w - heading) > 180) {
 80016b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ba:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001740 <angle_get+0xec>
 80016be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d50c      	bpl.n	80016e2 <angle_get+0x8e>
 80016c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80016cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001744 <angle_get+0xf0>
 80016d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	dc15      	bgt.n	800170e <angle_get+0xba>
 80016e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001740 <angle_get+0xec>
 80016ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	d51a      	bpl.n	800172a <angle_get+0xd6>
 80016f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80016f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001700:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001744 <angle_get+0xf0>
 8001704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	dd0d      	ble.n	800172a <angle_get+0xd6>
		//detect discontinuous wrapping; adjust accordingly.
		kParams.last_est = add_angle(kParams.last_est, 180);
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <angle_get+0xe8>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001744 <angle_get+0xf0>
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f000 fbb0 	bl	8001e80 <add_angle>
 8001720:	eef0 7a40 	vmov.f32	s15, s0
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <angle_get+0xe8>)
 8001726:	edc3 7a00 	vstr	s15, [r3]
	}
	return kParams.last_est;
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <angle_get+0xe8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	ee07 3a90 	vmov	s15, r3
}
 8001732:	eeb0 0a67 	vmov.f32	s0, s15
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000204 	.word	0x20000204
 8001740:	c2b40000 	.word	0xc2b40000
 8001744:	43340000 	.word	0x43340000

08001748 <get_new_cmd>:
#include "commands.h"

static Command *cur = NULL;

static Command *get_new_cmd() {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	Command *new = (Command *) malloc(sizeof(Command));
 800174e:	2018      	movs	r0, #24
 8001750:	f008 fd78 	bl	800a244 <malloc>
 8001754:	4603      	mov	r3, r0
 8001756:	607b      	str	r3, [r7, #4]
	new->dir = 0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	715a      	strb	r2, [r3, #5]
	new->speed = 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	719a      	strb	r2, [r3, #6]
	new->steeringAngle = 0;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
	new->val = 0;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
	new->distType = TARGET;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	731a      	strb	r2, [r3, #12]
	new->next = NULL;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]

	return new;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <commands_ack>:

static void commands_ack(UART_HandleTypeDef *uart, Command *cmd, uint8_t indicator) {
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	4613      	mov	r3, r2
 8001796:	71fb      	strb	r3, [r7, #7]
	uint8_t buf_size = cmd->str_size + 1;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	791b      	ldrb	r3, [r3, #4]
 800179c:	3301      	adds	r3, #1
 800179e:	75fb      	strb	r3, [r7, #23]
	uint8_t *buf = (uint8_t *) malloc(buf_size * sizeof(uint8_t));
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f008 fd4e 	bl	800a244 <malloc>
 80017a8:	4603      	mov	r3, r0
 80017aa:	613b      	str	r3, [r7, #16]
	*buf = indicator;
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	79fa      	ldrb	r2, [r7, #7]
 80017b0:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, cmd->str, buf_size - 1);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1c58      	adds	r0, r3, #1
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	3b01      	subs	r3, #1
 80017be:	461a      	mov	r2, r3
 80017c0:	f009 fe27 	bl	800b412 <memcpy>

	HAL_UART_Transmit(uart, buf, buf_size, HAL_MAX_DELAY);
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	6939      	ldr	r1, [r7, #16]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f007 fd32 	bl	8009238 <HAL_UART_Transmit>
	free(buf);
 80017d4:	6938      	ldr	r0, [r7, #16]
 80017d6:	f008 fd3d 	bl	800a254 <free>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <commands_process>:

static uint8_t buf[3];
void commands_process(UART_HandleTypeDef *uart, uint8_t *buf, uint8_t size) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	4613      	mov	r3, r2
 80017f0:	71fb      	strb	r3, [r7, #7]
	Command *next = get_new_cmd();
 80017f2:	f7ff ffa9 	bl	8001748 <get_new_cmd>
 80017f6:	61b8      	str	r0, [r7, #24]

	uint8_t c = *buf, *temp = buf;
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	75fb      	strb	r3, [r7, #23]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	613b      	str	r3, [r7, #16]

	//first byte: command flag
	switch (c) {
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	3b53      	subs	r3, #83	; 0x53
 8001806:	2b24      	cmp	r3, #36	; 0x24
 8001808:	f200 80d1 	bhi.w	80019ae <commands_process+0x1ca>
 800180c:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <commands_process+0x30>)
 800180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001812:	bf00      	nop
 8001814:	080018a9 	.word	0x080018a9
 8001818:	080018b1 	.word	0x080018b1
 800181c:	080019af 	.word	0x080019af
 8001820:	080019af 	.word	0x080019af
 8001824:	080018bf 	.word	0x080018bf
 8001828:	080019af 	.word	0x080019af
 800182c:	080019af 	.word	0x080019af
 8001830:	080019af 	.word	0x080019af
 8001834:	080019af 	.word	0x080019af
 8001838:	080019af 	.word	0x080019af
 800183c:	080019af 	.word	0x080019af
 8001840:	080019af 	.word	0x080019af
 8001844:	080019af 	.word	0x080019af
 8001848:	080019af 	.word	0x080019af
 800184c:	080019af 	.word	0x080019af
 8001850:	080019af 	.word	0x080019af
 8001854:	080019af 	.word	0x080019af
 8001858:	080019af 	.word	0x080019af
 800185c:	080019af 	.word	0x080019af
 8001860:	080019af 	.word	0x080019af
 8001864:	080019af 	.word	0x080019af
 8001868:	080019af 	.word	0x080019af
 800186c:	080019af 	.word	0x080019af
 8001870:	080019af 	.word	0x080019af
 8001874:	080019af 	.word	0x080019af
 8001878:	080019af 	.word	0x080019af
 800187c:	080019af 	.word	0x080019af
 8001880:	080019af 	.word	0x080019af
 8001884:	080019af 	.word	0x080019af
 8001888:	080019af 	.word	0x080019af
 800188c:	080019af 	.word	0x080019af
 8001890:	080019af 	.word	0x080019af
 8001894:	080019af 	.word	0x080019af
 8001898:	080018cd 	.word	0x080018cd
 800189c:	080019af 	.word	0x080019af
 80018a0:	080019af 	.word	0x080019af
 80018a4:	080018db 	.word	0x080018db
		case CMD_FULL_STOP:
			next->dir = 0;
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2200      	movs	r2, #0
 80018ac:	715a      	strb	r2, [r3, #5]
			break;
 80018ae:	e01b      	b.n	80018e8 <commands_process+0x104>

		case CMD_FORWARD_DIST_TARGET:
			next->dir = 1;
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2201      	movs	r2, #1
 80018b4:	715a      	strb	r2, [r3, #5]
			next->distType = TARGET;
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2200      	movs	r2, #0
 80018ba:	731a      	strb	r2, [r3, #12]
			break;
 80018bc:	e014      	b.n	80018e8 <commands_process+0x104>

		case CMD_FORWARD_DIST_AWAY:
			next->dir = 1;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2201      	movs	r2, #1
 80018c2:	715a      	strb	r2, [r3, #5]
			next->distType = STOP_AWAY;
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2201      	movs	r2, #1
 80018c8:	731a      	strb	r2, [r3, #12]
			break;
 80018ca:	e00d      	b.n	80018e8 <commands_process+0x104>

		case CMD_BACKWARD_DIST_TARGET:
			next->dir = -1;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	22ff      	movs	r2, #255	; 0xff
 80018d0:	715a      	strb	r2, [r3, #5]
			next->distType = TARGET;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2200      	movs	r2, #0
 80018d6:	731a      	strb	r2, [r3, #12]
			break;
 80018d8:	e006      	b.n	80018e8 <commands_process+0x104>

		case CMD_BACKWARD_DIST_AWAY:
			next->dir = -1;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	22ff      	movs	r2, #255	; 0xff
 80018de:	715a      	strb	r2, [r3, #5]
			next->distType = STOP_AWAY;
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2201      	movs	r2, #1
 80018e4:	731a      	strb	r2, [r3, #12]
			break;
 80018e6:	bf00      	nop
		default:
			//invalid command, return.
			return;
	}

	if (c != CMD_FULL_STOP) {
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	2b53      	cmp	r3, #83	; 0x53
 80018ec:	d02b      	beq.n	8001946 <commands_process+0x162>
		temp++;
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	3301      	adds	r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
		next->speed = parse_uint16_t_until(&temp, CMD_SEP, 3);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	2203      	movs	r2, #3
 80018fa:	217c      	movs	r1, #124	; 0x7c
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f8c3 	bl	8001a88 <parse_uint16_t_until>
 8001902:	4603      	mov	r3, r0
 8001904:	b2da      	uxtb	r2, r3
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	719a      	strb	r2, [r3, #6]
		temp++;
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	3301      	adds	r3, #1
 800190e:	613b      	str	r3, [r7, #16]
		next->steeringAngle = parse_float_until(&temp, CMD_SEP, 6);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	2206      	movs	r2, #6
 8001916:	217c      	movs	r1, #124	; 0x7c
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f8f5 	bl	8001b08 <parse_float_until>
 800191e:	eef0 7a40 	vmov.f32	s15, s0
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	edc3 7a02 	vstr	s15, [r3, #8]
		temp++;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	3301      	adds	r3, #1
 800192c:	613b      	str	r3, [r7, #16]
		next->val = parse_float_until(&temp, CMD_END, 6);
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	2206      	movs	r2, #6
 8001934:	210a      	movs	r1, #10
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f8e6 	bl	8001b08 <parse_float_until>
 800193c:	eef0 7a40 	vmov.f32	s15, s0
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	//copy command.
	uint8_t str_size = temp - buf + 1;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3301      	adds	r3, #1
 8001950:	75bb      	strb	r3, [r7, #22]
	next->str_size = str_size;
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	7dba      	ldrb	r2, [r7, #22]
 8001956:	711a      	strb	r2, [r3, #4]
	next->str = (uint8_t *) malloc(str_size * sizeof(uint8_t));
 8001958:	7dbb      	ldrb	r3, [r7, #22]
 800195a:	4618      	mov	r0, r3
 800195c:	f008 fc72 	bl	800a244 <malloc>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	601a      	str	r2, [r3, #0]
	memcpy(next->str, buf, str_size);
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	7dba      	ldrb	r2, [r7, #22]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	4618      	mov	r0, r3
 8001972:	f009 fd4e 	bl	800b412 <memcpy>


	if (cur == NULL) {
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <commands_process+0x1d4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d103      	bne.n	8001986 <commands_process+0x1a2>
		cur = next;
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <commands_process+0x1d4>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e00d      	b.n	80019a2 <commands_process+0x1be>
	} else {
		Command *temp = cur;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <commands_process+0x1d4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	61fb      	str	r3, [r7, #28]
		while (temp->next != NULL) {
 800198c:	e002      	b.n	8001994 <commands_process+0x1b0>
			temp = temp->next;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	61fb      	str	r3, [r7, #28]
		while (temp->next != NULL) {
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f8      	bne.n	800198e <commands_process+0x1aa>
		}
		temp->next = next;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	615a      	str	r2, [r3, #20]
	}

	//acknowledge command has been received and queued.
	commands_ack(uart, next, CMD_RCV);
 80019a2:	2272      	movs	r2, #114	; 0x72
 80019a4:	69b9      	ldr	r1, [r7, #24]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f7ff feef 	bl	800178a <commands_ack>
 80019ac:	e000      	b.n	80019b0 <commands_process+0x1cc>
			return;
 80019ae:	bf00      	nop
}
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000210 	.word	0x20000210

080019bc <commands_pop>:


Command *commands_pop() {
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
	Command *ret = cur;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <commands_pop+0x2c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	607b      	str	r3, [r7, #4]
	if (cur != NULL) cur = cur->next;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <commands_pop+0x2c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d004      	beq.n	80019da <commands_pop+0x1e>
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <commands_pop+0x2c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <commands_pop+0x2c>)
 80019d8:	6013      	str	r3, [r2, #0]
	return ret;
 80019da:	687b      	ldr	r3, [r7, #4]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000210 	.word	0x20000210

080019ec <commands_shouldBrake>:

uint8_t commands_shouldBrake(Command *current) {
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	if (cur == NULL) return 1;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <commands_shouldBrake+0x38>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <commands_shouldBrake+0x14>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e00b      	b.n	8001a18 <commands_shouldBrake+0x2c>

	return current->dir != cur->dir;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <commands_shouldBrake+0x38>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	bf14      	ite	ne
 8001a12:	2301      	movne	r3, #1
 8001a14:	2300      	moveq	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	20000210 	.word	0x20000210

08001a28 <commands_end>:

void commands_end(UART_HandleTypeDef *uart, Command *cmd) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	commands_ack(uart, cmd, CMD_FIN);
 8001a32:	2266      	movs	r2, #102	; 0x66
 8001a34:	6839      	ldr	r1, [r7, #0]
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fea7 	bl	800178a <commands_ack>
	free(cmd->str);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f008 fc07 	bl	800a254 <free>
	free(cmd);
 8001a46:	6838      	ldr	r0, [r7, #0]
 8001a48:	f008 fc04 	bl	800a254 <free>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <abs_float>:
#include "convert.h"

float abs_float(float a) {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	ed87 0a01 	vstr	s0, [r7, #4]
	return a < 0 ? -a : a;
 8001a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	d504      	bpl.n	8001a76 <abs_float+0x22>
 8001a6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a70:	eef1 7a67 	vneg.f32	s15, s15
 8001a74:	e001      	b.n	8001a7a <abs_float+0x26>
 8001a76:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8001a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <parse_uint16_t_until>:

	return ret;
}

//get a uint16_t from a string until terminating character.
uint16_t parse_uint16_t_until(uint8_t **buf_ptr, uint8_t until, uint8_t sizeExpected) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
 8001a94:	4613      	mov	r3, r2
 8001a96:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, c = **buf_ptr;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	73bb      	strb	r3, [r7, #14]
	uint16_t res = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	81bb      	strh	r3, [r7, #12]

	while (i < sizeExpected && c != until) {
 8001aa8:	e01d      	b.n	8001ae6 <parse_uint16_t_until+0x5e>
		if (c <= '9' && c >= '0') res = res * 10 + (c - '0');
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	2b39      	cmp	r3, #57	; 0x39
 8001aae:	d80e      	bhi.n	8001ace <parse_uint16_t_until+0x46>
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ab4:	d90b      	bls.n	8001ace <parse_uint16_t_until+0x46>
 8001ab6:	89bb      	ldrh	r3, [r7, #12]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b30      	subs	r3, #48	; 0x30
 8001acc:	81bb      	strh	r3, [r7, #12]

		c = *(++(*buf_ptr)); i++;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	73bb      	strb	r3, [r7, #14]
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
	while (i < sizeExpected && c != until) {
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	78bb      	ldrb	r3, [r7, #2]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d203      	bcs.n	8001af6 <parse_uint16_t_until+0x6e>
 8001aee:	7bba      	ldrb	r2, [r7, #14]
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d1d9      	bne.n	8001aaa <parse_uint16_t_until+0x22>
	}

	return res;
 8001af6:	89bb      	ldrh	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	0000      	movs	r0, r0
	...

08001b08 <parse_float_until>:

//get a float from a string until terminating character.
float parse_float_until(uint8_t **buf_ptr, uint8_t until, uint8_t sizeExpected) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
 8001b14:	4613      	mov	r3, r2
 8001b16:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, c = **buf_ptr, isFrac = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	77fb      	strb	r3, [r7, #31]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	77bb      	strb	r3, [r7, #30]
 8001b24:	2300      	movs	r3, #0
 8001b26:	777b      	strb	r3, [r7, #29]
	int8_t sign = 1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	773b      	strb	r3, [r7, #28]
	uint32_t whole = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
	float frac = 0, div = 0.1;
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	4b3c      	ldr	r3, [pc, #240]	; (8001c28 <parse_float_until+0x120>)
 8001b38:	613b      	str	r3, [r7, #16]

	while (i < sizeExpected && c != until) {
 8001b3a:	e051      	b.n	8001be0 <parse_float_until+0xd8>
		if (i == 0 && c == '-') sign *= -1;
 8001b3c:	7ffb      	ldrb	r3, [r7, #31]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <parse_float_until+0x4a>
 8001b42:	7fbb      	ldrb	r3, [r7, #30]
 8001b44:	2b2d      	cmp	r3, #45	; 0x2d
 8001b46:	d104      	bne.n	8001b52 <parse_float_until+0x4a>
 8001b48:	7f3b      	ldrb	r3, [r7, #28]
 8001b4a:	425b      	negs	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	773b      	strb	r3, [r7, #28]
 8001b50:	e03a      	b.n	8001bc8 <parse_float_until+0xc0>
		else if (c == '.') isFrac = 1;
 8001b52:	7fbb      	ldrb	r3, [r7, #30]
 8001b54:	2b2e      	cmp	r3, #46	; 0x2e
 8001b56:	d102      	bne.n	8001b5e <parse_float_until+0x56>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	777b      	strb	r3, [r7, #29]
 8001b5c:	e034      	b.n	8001bc8 <parse_float_until+0xc0>
		else if (c <= '9' && c >= '0') {
 8001b5e:	7fbb      	ldrb	r3, [r7, #30]
 8001b60:	2b39      	cmp	r3, #57	; 0x39
 8001b62:	d831      	bhi.n	8001bc8 <parse_float_until+0xc0>
 8001b64:	7fbb      	ldrb	r3, [r7, #30]
 8001b66:	2b2f      	cmp	r3, #47	; 0x2f
 8001b68:	d92e      	bls.n	8001bc8 <parse_float_until+0xc0>
			uint8_t d = c - '0';
 8001b6a:	7fbb      	ldrb	r3, [r7, #30]
 8001b6c:	3b30      	subs	r3, #48	; 0x30
 8001b6e:	73fb      	strb	r3, [r7, #15]
			if (isFrac) {
 8001b70:	7f7b      	ldrb	r3, [r7, #29]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01f      	beq.n	8001bb6 <parse_float_until+0xae>
				frac += div * d;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	ee07 3a90 	vmov	s15, r3
 8001b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b88:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b90:	edc7 7a05 	vstr	s15, [r7, #20]
				div *= 0.1;
 8001b94:	6938      	ldr	r0, [r7, #16]
 8001b96:	f7fe fcd7 	bl	8000548 <__aeabi_f2d>
 8001b9a:	a321      	add	r3, pc, #132	; (adr r3, 8001c20 <parse_float_until+0x118>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fd2a 	bl	80005f8 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7ff f81c 	bl	8000be8 <__aeabi_d2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	e008      	b.n	8001bc8 <parse_float_until+0xc0>
			}
			else whole = whole * 10 + d;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
		}

		c = *(++(*buf_ptr)); i++;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	77bb      	strb	r3, [r7, #30]
 8001bda:	7ffb      	ldrb	r3, [r7, #31]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	77fb      	strb	r3, [r7, #31]
	while (i < sizeExpected && c != until) {
 8001be0:	7ffa      	ldrb	r2, [r7, #31]
 8001be2:	78bb      	ldrb	r3, [r7, #2]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d203      	bcs.n	8001bf0 <parse_float_until+0xe8>
 8001be8:	7fba      	ldrb	r2, [r7, #30]
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1a5      	bne.n	8001b3c <parse_float_until+0x34>
	}

	return (whole + frac) * sign;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c02:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001c12:	eeb0 0a67 	vmov.f32	s0, s15
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	f3af 8000 	nop.w
 8001c20:	9999999a 	.word	0x9999999a
 8001c24:	3fb99999 	.word	0x3fb99999
 8001c28:	3dcccccd 	.word	0x3dcccccd
 8001c2c:	00000000 	.word	0x00000000

08001c30 <get_turning_r_steer_cm>:


static float get_turning_r_steer_cm(float steeringAngle) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	ed87 0a01 	vstr	s0, [r7, #4]
	return CHASSIS_CM / sin(steeringAngle * M_PI / 180);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7fe fc84 	bl	8000548 <__aeabi_f2d>
 8001c40:	a319      	add	r3, pc, #100	; (adr r3, 8001ca8 <get_turning_r_steer_cm+0x78>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fcd7 	bl	80005f8 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <get_turning_r_steer_cm+0x70>)
 8001c58:	f7fe fdf8 	bl	800084c <__aeabi_ddiv>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	ec43 2b17 	vmov	d7, r2, r3
 8001c64:	eeb0 0a47 	vmov.f32	s0, s14
 8001c68:	eef0 0a67 	vmov.f32	s1, s15
 8001c6c:	f00c ff68 	bl	800eb40 <sin>
 8001c70:	ec53 2b10 	vmov	r2, r3, d0
 8001c74:	f04f 0000 	mov.w	r0, #0
 8001c78:	490a      	ldr	r1, [pc, #40]	; (8001ca4 <get_turning_r_steer_cm+0x74>)
 8001c7a:	f7fe fde7 	bl	800084c <__aeabi_ddiv>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7fe ffaf 	bl	8000be8 <__aeabi_d2f>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	ee07 3a90 	vmov	s15, r3
}
 8001c90:	eeb0 0a67 	vmov.f32	s0, s15
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	40668000 	.word	0x40668000
 8001ca4:	402d0000 	.word	0x402d0000
 8001ca8:	54442d18 	.word	0x54442d18
 8001cac:	400921fb 	.word	0x400921fb

08001cb0 <get_turning_r_back_cm>:
float get_turning_r_back_cm(float steeringAngle) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	ed87 0a01 	vstr	s0, [r7, #4]
	return CHASSIS_CM / tan(steeringAngle * M_PI / 180);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fc44 	bl	8000548 <__aeabi_f2d>
 8001cc0:	a319      	add	r3, pc, #100	; (adr r3, 8001d28 <get_turning_r_back_cm+0x78>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fc97 	bl	80005f8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <get_turning_r_back_cm+0x70>)
 8001cd8:	f7fe fdb8 	bl	800084c <__aeabi_ddiv>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	ec43 2b17 	vmov	d7, r2, r3
 8001ce4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce8:	eef0 0a67 	vmov.f32	s1, s15
 8001cec:	f00c ff80 	bl	800ebf0 <tan>
 8001cf0:	ec53 2b10 	vmov	r2, r3, d0
 8001cf4:	f04f 0000 	mov.w	r0, #0
 8001cf8:	490a      	ldr	r1, [pc, #40]	; (8001d24 <get_turning_r_back_cm+0x74>)
 8001cfa:	f7fe fda7 	bl	800084c <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ff6f 	bl	8000be8 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	ee07 3a90 	vmov	s15, r3
}
 8001d10:	eeb0 0a67 	vmov.f32	s0, s15
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	f3af 8000 	nop.w
 8001d20:	40668000 	.word	0x40668000
 8001d24:	402d0000 	.word	0x402d0000
 8001d28:	54442d18 	.word	0x54442d18
 8001d2c:	400921fb 	.word	0x400921fb

08001d30 <get_turning_r_robot_cm>:
float get_turning_r_robot_cm(float steeringAngle) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	ed87 0a01 	vstr	s0, [r7, #4]
	float r_steer = get_turning_r_steer_cm(steeringAngle);
 8001d3a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d3e:	f7ff ff77 	bl	8001c30 <get_turning_r_steer_cm>
 8001d42:	ed87 0a04 	vstr	s0, [r7, #16]
	float L2 = CHASSIS_CM / 2;
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <get_turning_r_robot_cm+0x7c>)
 8001d48:	60fb      	str	r3, [r7, #12]
	float r = sqrt(r_steer * r_steer + L2 * L2);
 8001d4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5e:	ee17 0a90 	vmov	r0, s15
 8001d62:	f7fe fbf1 	bl	8000548 <__aeabi_f2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	ec43 2b10 	vmov	d0, r2, r3
 8001d6e:	f00c feb9 	bl	800eae4 <sqrt>
 8001d72:	ec53 2b10 	vmov	r2, r3, d0
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe ff35 	bl	8000be8 <__aeabi_d2f>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	617b      	str	r3, [r7, #20]
	if (steeringAngle < 0) r = -r;
 8001d82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	d505      	bpl.n	8001d9c <get_turning_r_robot_cm+0x6c>
 8001d90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d94:	eef1 7a67 	vneg.f32	s15, s15
 8001d98:	edc7 7a05 	vstr	s15, [r7, #20]
	return r;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	ee07 3a90 	vmov	s15, r3
}
 8001da2:	eeb0 0a67 	vmov.f32	s0, s15
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40e80000 	.word	0x40e80000

08001db0 <get_w_ms>:

//angular velocity (with actual translational speed).
float get_w_ms(float speed_cm_ms, float turning_r_robot_cm) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001dba:	edc7 0a00 	vstr	s1, [r7]
	return speed_cm_ms / turning_r_robot_cm *  180 / M_PI;
 8001dbe:	edd7 6a01 	vldr	s13, [r7, #4]
 8001dc2:	ed97 7a00 	vldr	s14, [r7]
 8001dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001e08 <get_w_ms+0x58>
 8001dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd2:	ee17 0a90 	vmov	r0, s15
 8001dd6:	f7fe fbb7 	bl	8000548 <__aeabi_f2d>
 8001dda:	a309      	add	r3, pc, #36	; (adr r3, 8001e00 <get_w_ms+0x50>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fd34 	bl	800084c <__aeabi_ddiv>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fefc 	bl	8000be8 <__aeabi_d2f>
 8001df0:	4603      	mov	r3, r0
 8001df2:	ee07 3a90 	vmov	s15, r3
}
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	54442d18 	.word	0x54442d18
 8001e04:	400921fb 	.word	0x400921fb
 8001e08:	43340000 	.word	0x43340000

08001e0c <mod_360>:

static float mod_360(float angle) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	ed87 0a01 	vstr	s0, [r7, #4]
	while (angle < -180) angle += 360;
 8001e16:	e007      	b.n	8001e28 <mod_360+0x1c>
 8001e18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001e74 <mod_360+0x68>
 8001e20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e24:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e2c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001e78 <mod_360+0x6c>
 8001e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	d4ee      	bmi.n	8001e18 <mod_360+0xc>
	while (angle > 180) angle -= 360;
 8001e3a:	e007      	b.n	8001e4c <mod_360+0x40>
 8001e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e40:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001e74 <mod_360+0x68>
 8001e44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e48:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e50:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001e7c <mod_360+0x70>
 8001e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	dcee      	bgt.n	8001e3c <mod_360+0x30>
	return angle;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	ee07 3a90 	vmov	s15, r3
}
 8001e64:	eeb0 0a67 	vmov.f32	s0, s15
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	43b40000 	.word	0x43b40000
 8001e78:	c3340000 	.word	0xc3340000
 8001e7c:	43340000 	.word	0x43340000

08001e80 <add_angle>:

float add_angle(float old, float change) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e8a:	edc7 0a00 	vstr	s1, [r7]
	return mod_360(old + change);
 8001e8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e92:	edd7 7a00 	vldr	s15, [r7]
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9e:	f7ff ffb5 	bl	8001e0c <mod_360>
 8001ea2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <angle_diff_180>:

float angle_diff_180(float a1, float a2) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001eba:	edc7 0a00 	vstr	s1, [r7]
	return mod_360(a1 - a2);
 8001ebe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ec2:	edd7 7a00 	vldr	s15, [r7]
 8001ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	f7ff ff9d 	bl	8001e0c <mod_360>
 8001ed2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <get_distance_cm>:
	else if (diff > 0 && dir < 0) diff -= 360;

	return diff;
}

float get_distance_cm(uint16_t pulses) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	80fb      	strh	r3, [r7, #6]
	return ((float) pulses) / MOTOR_PPR * 2 * M_PI * WHEEL_R_CM;
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	ee07 3a90 	vmov	s15, r3
 8001ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ef4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001f48 <get_distance_cm+0x68>
 8001ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001efc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f00:	ee17 0a90 	vmov	r0, s15
 8001f04:	f7fe fb20 	bl	8000548 <__aeabi_f2d>
 8001f08:	a30d      	add	r3, pc, #52	; (adr r3, 8001f40 <get_distance_cm+0x60>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb73 	bl	80005f8 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <get_distance_cm+0x6c>)
 8001f20:	f7fe fb6a 	bl	80005f8 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe5c 	bl	8000be8 <__aeabi_d2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	ee07 3a90 	vmov	s15, r3
}
 8001f36:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	54442d18 	.word	0x54442d18
 8001f44:	400921fb 	.word	0x400921fb
 8001f48:	44410000 	.word	0x44410000
 8001f4c:	400a0000 	.word	0x400a0000

08001f50 <get_arc_length>:

float get_arc_length(float angle, float r) {
 8001f50:	b5b0      	push	{r4, r5, r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f5a:	edc7 0a00 	vstr	s1, [r7]
	return 2 * M_PI * r * angle / 360;
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f7fe faf2 	bl	8000548 <__aeabi_f2d>
 8001f64:	a315      	add	r3, pc, #84	; (adr r3, 8001fbc <get_arc_length+0x6c>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe fb45 	bl	80005f8 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4614      	mov	r4, r2
 8001f74:	461d      	mov	r5, r3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fae6 	bl	8000548 <__aeabi_f2d>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe fb38 	bl	80005f8 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <get_arc_length+0x68>)
 8001f96:	f7fe fc59 	bl	800084c <__aeabi_ddiv>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f7fe fe21 	bl	8000be8 <__aeabi_d2f>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	ee07 3a90 	vmov	s15, r3
}
 8001fac:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40768000 	.word	0x40768000
 8001fbc:	54442d18 	.word	0x54442d18
 8001fc0:	401921fb 	.word	0x401921fb

08001fc4 <delay_us_init>:
#include "delay_us.h"

static TIM_HandleTypeDef *htim;

void delay_us_init(TIM_HandleTypeDef *tim_ptr) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	htim = tim_ptr;
 8001fcc:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <delay_us_init+0x20>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim);
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <delay_us_init+0x20>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 fb6e 	bl	80076b8 <HAL_TIM_Base_Start>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000214 	.word	0x20000214

08001fe8 <delay_us_wait>:

void delay_us_wait(uint16_t us) {
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <delay_us_wait+0x34>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(htim) < us);
 8001ffc:	bf00      	nop
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <delay_us_wait+0x34>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	429a      	cmp	r2, r3
 800200a:	d3f8      	bcc.n	8001ffe <delay_us_wait+0x16>
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000214 	.word	0x20000214

08002020 <dist_init>:
#include "dist.h"

static KalmanParams kParams;
static DistState state;

void dist_init() {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	dist_reset(0);
 8002024:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8002030 <dist_init+0x10>
 8002028:	f000 f804 	bl	8002034 <dist_reset>
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	00000000 	.word	0x00000000

08002034 <dist_reset>:

void dist_reset(float v) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	ed87 0a01 	vstr	s0, [r7, #4]
	kalman_init(&kParams, 0, DIST_S_ACCEL, DIST_S_MOTOR);
 800203e:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8002042:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002070 <dist_reset+0x3c>
 8002046:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002074 <dist_reset+0x40>
 800204a:	480b      	ldr	r0, [pc, #44]	; (8002078 <dist_reset+0x44>)
 800204c:	f000 f8c8 	bl	80021e0 <kalman_init>
	state.dist = 0;
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <dist_reset+0x48>)
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
	state.v = v;
 8002058:	4a08      	ldr	r2, [pc, #32]	; (800207c <dist_reset+0x48>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6053      	str	r3, [r2, #4]
	state.s_v = 0;
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <dist_reset+0x48>)
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	3724873e 	.word	0x3724873e
 8002074:	00000000 	.word	0x00000000
 8002078:	20000218 	.word	0x20000218
 800207c:	20000224 	.word	0x20000224

08002080 <update_state>:

static void update_state(float msElapsed, float accel) {
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	ed87 0a01 	vstr	s0, [r7, #4]
 800208a:	edc7 0a00 	vstr	s1, [r7]
	state.dist += state.v * msElapsed;
 800208e:	4b22      	ldr	r3, [pc, #136]	; (8002118 <update_state+0x98>)
 8002090:	ed93 7a00 	vldr	s14, [r3]
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <update_state+0x98>)
 8002096:	edd3 6a01 	vldr	s13, [r3, #4]
 800209a:	edd7 7a01 	vldr	s15, [r7, #4]
 800209e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <update_state+0x98>)
 80020a8:	edc3 7a00 	vstr	s15, [r3]
	state.v += accel * msElapsed;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <update_state+0x98>)
 80020ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80020b2:	edd7 6a00 	vldr	s13, [r7]
 80020b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <update_state+0x98>)
 80020c4:	edc3 7a01 	vstr	s15, [r3, #4]

	//update uncertainties.
	kParams.s_est += msElapsed * msElapsed * state.s_v;
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <update_state+0x9c>)
 80020ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80020ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <update_state+0x98>)
 80020d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80020dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <update_state+0x9c>)
 80020e6:	edc3 7a01 	vstr	s15, [r3, #4]
	state.s_v += msElapsed * msElapsed * DIST_S_ACCEL;
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <update_state+0x98>)
 80020ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80020f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020f8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002120 <update_state+0xa0>
 80020fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <update_state+0x98>)
 8002106:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000224 	.word	0x20000224
 800211c:	20000218 	.word	0x20000218
 8002120:	3724873e 	.word	0x3724873e

08002124 <dist_get_cm>:

float dist_get_cm(float msElapsed, float accel, float motorDist) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	ed87 0a03 	vstr	s0, [r7, #12]
 800212e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002132:	ed87 1a01 	vstr	s2, [r7, #4]
	//get raw estimate, and update uncertainty.
	update_state(msElapsed, accel);
 8002136:	edd7 0a02 	vldr	s1, [r7, #8]
 800213a:	ed97 0a03 	vldr	s0, [r7, #12]
 800213e:	f7ff ff9f 	bl	8002080 <update_state>

	//get improved estimate.
	kalman_update(&kParams, state.dist, motorDist);
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <dist_get_cm+0x4c>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	edd7 0a01 	vldr	s1, [r7, #4]
 800214c:	eeb0 0a67 	vmov.f32	s0, s15
 8002150:	4808      	ldr	r0, [pc, #32]	; (8002174 <dist_get_cm+0x50>)
 8002152:	f000 f85e 	bl	8002212 <kalman_update>
	state.dist = kParams.last_est;
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <dist_get_cm+0x50>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <dist_get_cm+0x4c>)
 800215c:	6013      	str	r3, [r2, #0]

	return state.dist;
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <dist_get_cm+0x4c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	ee07 3a90 	vmov	s15, r3
}
 8002166:	eeb0 0a67 	vmov.f32	s0, s15
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000224 	.word	0x20000224
 8002174:	20000218 	.word	0x20000218

08002178 <dist_get_front>:

float dist_get_front(float usDist, float irDist) {
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002182:	edc7 0a00 	vstr	s1, [r7]
	float dist = usDist;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60fb      	str	r3, [r7, #12]
	if (usDist > DIST_IR_MIN && usDist < DIST_IR_MAX) {
 800218a:	edd7 7a01 	vldr	s15, [r7, #4]
 800218e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	dd14      	ble.n	80021c6 <dist_get_front+0x4e>
 800219c:	edd7 7a01 	vldr	s15, [r7, #4]
 80021a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80021dc <dist_get_front+0x64>
 80021a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	d50b      	bpl.n	80021c6 <dist_get_front+0x4e>
		//use IR for averaging.
		dist = (usDist + irDist) / 2;
 80021ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80021b2:	edd7 7a00 	vldr	s15, [r7]
 80021b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c2:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	return dist;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	ee07 3a90 	vmov	s15, r3
}
 80021cc:	eeb0 0a67 	vmov.f32	s0, s15
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	428c0000 	.word	0x428c0000

080021e0 <kalman_init>:
#include "kalman.h"

void kalman_init(KalmanParams *params, float initial_est, float s_est, float s_mea){
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80021ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80021f0:	ed87 1a00 	vstr	s2, [r7]
	params->last_est = initial_est;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	601a      	str	r2, [r3, #0]
	params->s_est = s_est;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	605a      	str	r2, [r3, #4]
	params->s_mea = s_mea;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	609a      	str	r2, [r3, #8]
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <kalman_update>:

void kalman_update(KalmanParams *params, float est, float mea){
 8002212:	b480      	push	{r7}
 8002214:	b087      	sub	sp, #28
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	ed87 0a02 	vstr	s0, [r7, #8]
 800221e:	edc7 0a01 	vstr	s1, [r7, #4]
	//calculate Kalman gain.
	float G = (params->s_est) / (params->s_est + params->s_mea);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	edd3 6a01 	vldr	s13, [r3, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	ed93 7a01 	vldr	s14, [r3, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	edd3 7a02 	vldr	s15, [r3, #8]
 8002234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223c:	edc7 7a05 	vstr	s15, [r7, #20]

	//update estimate.
	params->last_est += G * (mea - est);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	ed93 7a00 	vldr	s14, [r3]
 8002246:	edd7 6a01 	vldr	s13, [r7, #4]
 800224a:	edd7 7a02 	vldr	s15, [r7, #8]
 800224e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002252:	edd7 7a05 	vldr	s15, [r7, #20]
 8002256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800225a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	edc3 7a00 	vstr	s15, [r3]
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <magcal_preload>:
#include "mag_cal.h"

static I2C_HandleTypeDef *hi2c;
static MagCalParams *params;

static void magcal_preload(MagCalParams *params_ptr) {
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	params_ptr->offset_HI[0] = 12.3750;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <magcal_preload+0x38>)
 800227c:	601a      	str	r2, [r3, #0]
	params_ptr->offset_HI[1] = -56.4750;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <magcal_preload+0x3c>)
 8002282:	605a      	str	r2, [r3, #4]

	params_ptr->matrix_SI[0][0] = 0.8898;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <magcal_preload+0x40>)
 8002288:	609a      	str	r2, [r3, #8]
	params_ptr->matrix_SI[0][1] = -0.5961;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <magcal_preload+0x44>)
 800228e:	60da      	str	r2, [r3, #12]
	params_ptr->matrix_SI[1][0] = 0.8007;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <magcal_preload+0x48>)
 8002294:	611a      	str	r2, [r3, #16]
	params_ptr->matrix_SI[1][1] = 1.1952;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a08      	ldr	r2, [pc, #32]	; (80022bc <magcal_preload+0x4c>)
 800229a:	615a      	str	r2, [r3, #20]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	41460000 	.word	0x41460000
 80022ac:	c261e666 	.word	0xc261e666
 80022b0:	3f63c9ef 	.word	0x3f63c9ef
 80022b4:	bf189a02 	.word	0xbf189a02
 80022b8:	3f4cfaad 	.word	0x3f4cfaad
 80022bc:	3f98fc50 	.word	0x3f98fc50

080022c0 <magcal_init>:

void magcal_init(I2C_HandleTypeDef *hi2c_ptr, MagCalParams *params_ptr) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	hi2c = hi2c_ptr;
 80022ca:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <magcal_init+0x24>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6013      	str	r3, [r2, #0]
	params = params_ptr;
 80022d0:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <magcal_init+0x28>)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6013      	str	r3, [r2, #0]

	magcal_preload(params_ptr);
 80022d6:	6838      	ldr	r0, [r7, #0]
 80022d8:	f7ff ffca 	bl	8002270 <magcal_preload>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000230 	.word	0x20000230
 80022e8:	20000234 	.word	0x20000234

080022ec <magcal_adjust>:

	OLED_Clear();
	OLED_Refresh_Gram();
}

void magcal_adjust(float magXY[2]) {
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	float x = magXY[0] - params->offset_HI[0], y = magXY[1] - params->offset_HI[1];
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	ed93 7a00 	vldr	s14, [r3]
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <magcal_adjust+0x98>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002306:	edc7 7a03 	vstr	s15, [r7, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	ed93 7a00 	vldr	s14, [r3]
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <magcal_adjust+0x98>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	edd3 7a01 	vldr	s15, [r3, #4]
 800231a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800231e:	edc7 7a02 	vstr	s15, [r7, #8]
	magXY[0] = params->matrix_SI[0][0] * x + params->matrix_SI[0][1] * y;
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <magcal_adjust+0x98>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	ed93 7a02 	vldr	s14, [r3, #8]
 800232a:	edd7 7a03 	vldr	s15, [r7, #12]
 800232e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <magcal_adjust+0x98>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	edd3 6a03 	vldr	s13, [r3, #12]
 800233a:	edd7 7a02 	vldr	s15, [r7, #8]
 800233e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	edc3 7a00 	vstr	s15, [r3]
	magXY[1] = params->matrix_SI[1][0] * x + params->matrix_SI[1][1] * y;
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <magcal_adjust+0x98>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	ed93 7a04 	vldr	s14, [r3, #16]
 8002354:	edd7 7a03 	vldr	s15, [r7, #12]
 8002358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <magcal_adjust+0x98>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	edd3 6a05 	vldr	s13, [r3, #20]
 8002364:	edd7 7a02 	vldr	s15, [r7, #8]
 8002368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	edc3 7a00 	vstr	s15, [r3]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	20000234 	.word	0x20000234

08002388 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


//serial in.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &byte_serial, 1);
 8002390:	2201      	movs	r2, #1
 8002392:	4910      	ldr	r1, [pc, #64]	; (80023d4 <HAL_UART_RxCpltCallback+0x4c>)
 8002394:	4810      	ldr	r0, [pc, #64]	; (80023d8 <HAL_UART_RxCpltCallback+0x50>)
 8002396:	f006 ffda 	bl	800934e <HAL_UART_Receive_IT>
	buf_serial[buf_i++] = byte_serial;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_UART_RxCpltCallback+0x54>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	b2d1      	uxtb	r1, r2
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_UART_RxCpltCallback+0x54>)
 80023a4:	7011      	strb	r1, [r2, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_UART_RxCpltCallback+0x4c>)
 80023aa:	7819      	ldrb	r1, [r3, #0]
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <HAL_UART_RxCpltCallback+0x58>)
 80023ae:	5499      	strb	r1, [r3, r2]

	if (byte_serial == CMD_END) {
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_UART_RxCpltCallback+0x4c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b0a      	cmp	r3, #10
 80023b6:	d109      	bne.n	80023cc <HAL_UART_RxCpltCallback+0x44>
		commands_process(&huart3, buf_serial, buf_i);
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_UART_RxCpltCallback+0x54>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <HAL_UART_RxCpltCallback+0x58>)
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <HAL_UART_RxCpltCallback+0x50>)
 80023c2:	f7ff fa0f 	bl	80017e4 <commands_process>
		buf_i = 0;
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_UART_RxCpltCallback+0x54>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
	}
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000574 	.word	0x20000574
 80023d8:	200004cc 	.word	0x200004cc
 80023dc:	2000055c 	.word	0x2000055c
 80023e0:	20000560 	.word	0x20000560

080023e4 <HAL_TIM_PeriodElapsedCallback>:

/* --- Start: Timer Management --- */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) {
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d107      	bne.n	8002404 <HAL_TIM_PeriodElapsedCallback+0x20>
		usWrap++;
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3301      	adds	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002400:	801a      	strh	r2, [r3, #0]

	else if (htim == &htim7) {
		//8MHz / 20000 = 2.5ms frame.
		newTick = 1;
	}
}
 8002402:	e006      	b.n	8002412 <HAL_TIM_PeriodElapsedCallback+0x2e>
	else if (htim == &htim7) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d102      	bne.n	8002412 <HAL_TIM_PeriodElapsedCallback+0x2e>
		newTick = 1;
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	200003ac 	.word	0x200003ac
 8002424:	20000578 	.word	0x20000578
 8002428:	2000043c 	.word	0x2000043c
 800242c:	20000580 	.word	0x20000580

08002430 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	if (!isRisingCaptured) {
 8002438:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d11a      	bne.n	8002478 <HAL_TIM_IC_CaptureCallback+0x48>
		//rising edge
		usWrap = 0;
 8002442:	4b32      	ldr	r3, [pc, #200]	; (800250c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002444:	2200      	movs	r2, #0
 8002446:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

		isRisingCaptured = 1;
 8002450:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, US_IC_CHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 020a 	bic.w	r2, r2, #10
 8002464:	621a      	str	r2, [r3, #32]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0202 	orr.w	r2, r2, #2
 8002474:	621a      	str	r2, [r3, #32]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, US_IC_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);

		usCaptureComplete = 1;

	}
}
 8002476:	e03e      	b.n	80024f6 <HAL_TIM_IC_CaptureCallback+0xc6>
		counter = HAL_TIM_ReadCapturedValue(htim, US_IC_CHANNEL);
 8002478:	2100      	movs	r1, #0
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f006 f902 	bl	8008684 <HAL_TIM_ReadCapturedValue>
 8002480:	4603      	mov	r3, r0
 8002482:	4a23      	ldr	r2, [pc, #140]	; (8002510 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002484:	6013      	str	r3, [r2, #0]
		counter += usWrap * 65536;
 8002486:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	041b      	lsls	r3, r3, #16
 800248e:	461a      	mov	r2, r3
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4413      	add	r3, r2
 8002496:	4a1e      	ldr	r2, [pc, #120]	; (8002510 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002498:	6013      	str	r3, [r2, #0]
		sensors_read_usDist((float) counter * 1e-6);
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	ee17 0a90 	vmov	r0, s15
 80024aa:	f7fe f84d 	bl	8000548 <__aeabi_f2d>
 80024ae:	a314      	add	r3, pc, #80	; (adr r3, 8002500 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe f8a0 	bl	80005f8 <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fb92 	bl	8000be8 <__aeabi_d2f>
 80024c4:	4603      	mov	r3, r0
 80024c6:	ee00 3a10 	vmov	s0, r3
 80024ca:	f001 fddf 	bl	800408c <sensors_read_usDist>
		isRisingCaptured = 0;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, US_IC_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a1a      	ldr	r2, [r3, #32]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 020a 	bic.w	r2, r2, #10
 80024e2:	621a      	str	r2, [r3, #32]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a12      	ldr	r2, [r2, #32]
 80024ee:	621a      	str	r2, [r3, #32]
		usCaptureComplete = 1;
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	a0b5ed8d 	.word	0xa0b5ed8d
 8002504:	3eb0c6f7 	.word	0x3eb0c6f7
 8002508:	20000575 	.word	0x20000575
 800250c:	20000578 	.word	0x20000578
 8002510:	2000057c 	.word	0x2000057c
 8002514:	20000576 	.word	0x20000576

08002518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b098      	sub	sp, #96	; 0x60
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800251e:	f002 fc1b 	bl	8004d58 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002522:	f000 fa99 	bl	8002a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002526:	f000 fe6f 	bl	8003208 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800252a:	f000 fe43 	bl	80031b4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800252e:	f000 fb43 	bl	8002bb8 <MX_I2C1_Init>
  MX_TIM8_Init();
 8002532:	f000 fd93 	bl	800305c <MX_TIM8_Init>
  MX_TIM2_Init();
 8002536:	f000 fc0d 	bl	8002d54 <MX_TIM2_Init>
  MX_TIM3_Init();
 800253a:	f000 fc5f 	bl	8002dfc <MX_TIM3_Init>
  MX_TIM1_Init();
 800253e:	f000 fb69 	bl	8002c14 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002542:	f000 fcaf 	bl	8002ea4 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002546:	f000 fae5 	bl	8002b14 <MX_ADC1_Init>
  MX_TIM6_Init();
 800254a:	f000 fd1b 	bl	8002f84 <MX_TIM6_Init>
  MX_TIM7_Init();
 800254e:	f000 fd4f 	bl	8002ff0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* ----- Start: Initialize libraries ----- */
  OLED_Init();										//initialize OLED display.
 8002552:	f001 fb81 	bl	8003c58 <OLED_Init>
  magcal_init(&hi2c1, &magCalParams);				//initialize magnetometer calibration.
 8002556:	49bd      	ldr	r1, [pc, #756]	; (800284c <main+0x334>)
 8002558:	48bd      	ldr	r0, [pc, #756]	; (8002850 <main+0x338>)
 800255a:	f7ff feb1 	bl	80022c0 <magcal_init>
  sensors_init(&hi2c1, &hadc1, &htim4, &sensors); 	//initialize motion sensors.
 800255e:	4bbd      	ldr	r3, [pc, #756]	; (8002854 <main+0x33c>)
 8002560:	4abd      	ldr	r2, [pc, #756]	; (8002858 <main+0x340>)
 8002562:	49be      	ldr	r1, [pc, #760]	; (800285c <main+0x344>)
 8002564:	48ba      	ldr	r0, [pc, #744]	; (8002850 <main+0x338>)
 8002566:	f001 fd27 	bl	8003fb8 <sensors_init>
  motor_init(&htim8, &htim2, &htim3); 				//initialize motor PWM and encoders.
 800256a:	4abd      	ldr	r2, [pc, #756]	; (8002860 <main+0x348>)
 800256c:	49bd      	ldr	r1, [pc, #756]	; (8002864 <main+0x34c>)
 800256e:	48be      	ldr	r0, [pc, #760]	; (8002868 <main+0x350>)
 8002570:	f000 fef6 	bl	8003360 <motor_init>
  servo_init(&htim1); 								//initialize servo PWM.
 8002574:	48bd      	ldr	r0, [pc, #756]	; (800286c <main+0x354>)
 8002576:	f001 ff63 	bl	8004440 <servo_init>
  delay_us_init(&htim6);							//initialize us timer.
 800257a:	48bd      	ldr	r0, [pc, #756]	; (8002870 <main+0x358>)
 800257c:	f7ff fd22 	bl	8001fc4 <delay_us_init>

  dist_init();										//initialize distance tracking.
 8002580:	f7ff fd4e 	bl	8002020 <dist_init>

  /* ----- Start: Car setup ----- */
//  magcal_calc_params();

  //reset car.
  servo_setAngle(0);
 8002584:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8002874 <main+0x35c>
 8002588:	f001 ff7e 	bl	8004488 <servo_setAngle>
  motor_setDrive(0, 0);
 800258c:	2100      	movs	r1, #0
 800258e:	2000      	movs	r0, #0
 8002590:	f001 f972 	bl	8003878 <motor_setDrive>

  OLED_ShowString(0, 0, "Press USER when ready...");
 8002594:	4ab8      	ldr	r2, [pc, #736]	; (8002878 <main+0x360>)
 8002596:	2100      	movs	r1, #0
 8002598:	2000      	movs	r0, #0
 800259a:	f001 fb2b 	bl	8003bf4 <OLED_ShowString>
  OLED_Refresh_Gram();
 800259e:	f001 f9ff 	bl	80039a0 <OLED_Refresh_Gram>
//  while (!user_is_pressed());	//wait for user to place car.
  OLED_Clear();
 80025a2:	f001 fa35 	bl	8003a10 <OLED_Clear>
  OLED_ShowString(0, 0, "Setting sensors bias...");
 80025a6:	4ab5      	ldr	r2, [pc, #724]	; (800287c <main+0x364>)
 80025a8:	2100      	movs	r1, #0
 80025aa:	2000      	movs	r0, #0
 80025ac:	f001 fb22 	bl	8003bf4 <OLED_ShowString>
  OLED_Refresh_Gram();
 80025b0:	f001 f9f6 	bl	80039a0 <OLED_Refresh_Gram>

  sensors_set_bias(500); 		// set initial bias.
 80025b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025b8:	f001 fe86 	bl	80042c8 <sensors_set_bias>
  OLED_Clear();
 80025bc:	f001 fa28 	bl	8003a10 <OLED_Clear>
  OLED_ShowString(0, 0, "Active.");
 80025c0:	4aaf      	ldr	r2, [pc, #700]	; (8002880 <main+0x368>)
 80025c2:	2100      	movs	r1, #0
 80025c4:	2000      	movs	r0, #0
 80025c6:	f001 fb15 	bl	8003bf4 <OLED_ShowString>
  OLED_Refresh_Gram();
 80025ca:	f001 f9e9 	bl	80039a0 <OLED_Refresh_Gram>

  /* ----- End: Car setup ----- */

  /* ----- Start: OS Parameters ----- */
  //ticking for longer timing requirements for ultrasound.
  uint8_t ticksElapsed = 0,
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		  ticksUltrasound = (15.0f / MS_FRAME) + 1,
 80025d4:	2307      	movs	r3, #7
 80025d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  ticksRefresh = ticksUltrasound;
 80025da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  Command *cmd = NULL;							//current command.
 80025e2:	2300      	movs	r3, #0
 80025e4:	65bb      	str	r3, [r7, #88]	; 0x58
  float motorDist = 0, estDist = 0,
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	633b      	str	r3, [r7, #48]	; 0x30
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		  estAngle = 0,
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	657b      	str	r3, [r7, #84]	; 0x54
		  estDistOld = 0; 						//distance estimations.
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	653b      	str	r3, [r7, #80]	; 0x50

  float distTarget = 0;							//decide distance target.
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	64fb      	str	r3, [r7, #76]	; 0x4c
  float distDiff = 0, brakingDist = 0; 			//current distance difference.
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	64bb      	str	r3, [r7, #72]	; 0x48
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	647b      	str	r3, [r7, #68]	; 0x44
  float wDiff = 0, wTarget = 0;					//current angular velocity difference and target.
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	643b      	str	r3, [r7, #64]	; 0x40
  float rBack = 0, rRobot = 0;					//turning radii at the back and centre of robot.
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
  /* ----- End: OS Parameters ----- */

  /* ----- Start: Interrupts ----- */
  HAL_UART_Receive_IT(&huart3, &byte_serial, 1);	//start receiving serial.
 8002628:	2201      	movs	r2, #1
 800262a:	4996      	ldr	r1, [pc, #600]	; (8002884 <main+0x36c>)
 800262c:	4896      	ldr	r0, [pc, #600]	; (8002888 <main+0x370>)
 800262e:	f006 fe8e 	bl	800934e <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);							//start continuous ADC conversion.
 8002632:	488a      	ldr	r0, [pc, #552]	; (800285c <main+0x344>)
 8002634:	f002 fc6a 	bl	8004f0c <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim7);					//start paced loop timer.
 8002638:	4894      	ldr	r0, [pc, #592]	; (800288c <main+0x374>)
 800263a:	f005 f8a5 	bl	8007788 <HAL_TIM_Base_Start_IT>
  /* ----- End: Interrupts ----- */

  uint8_t buf[20];
  float gt = 0;
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t count = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	623b      	str	r3, [r7, #32]

    /* USER CODE BEGIN 3 */

	/* ----- Start: Sensor reading ----- */
	//trigger distance measurement (minimum 3ms delay)
	if (!(ticksElapsed % ticksUltrasound)) {
 8002648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800264c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002650:	fbb3 f1f2 	udiv	r1, r3, r2
 8002654:	fb01 f202 	mul.w	r2, r1, r2
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <main+0x14c>
		sensors_us_trig();
 8002660:	f001 fcf8 	bl	8004054 <sensors_us_trig>
	}

	sensors_read_irDist();
 8002664:	f001 fd40 	bl	80040e8 <sensors_read_irDist>
	sensors_read_accel();
 8002668:	f001 fdc6 	bl	80041f8 <sensors_read_accel>
	sensors_read_gyroZ();
 800266c:	f001 fda0 	bl	80041b0 <sensors_read_gyroZ>
	sensors_read_heading(MS_FRAME, sensors.gyroZ);
 8002670:	4b78      	ldr	r3, [pc, #480]	; (8002854 <main+0x33c>)
 8002672:	edd3 7a02 	vldr	s15, [r3, #8]
 8002676:	eef0 0a67 	vmov.f32	s1, s15
 800267a:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800267e:	f001 fdf7 	bl	8004270 <sensors_read_heading>
	/* ----- End: Sensor reading ----- */

	/* ----- Start: Get next command (if any) ----- */
	if (cmd == NULL) {
 8002682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002684:	2b00      	cmp	r3, #0
 8002686:	d170      	bne.n	800276a <main+0x252>
		cmd = commands_pop();
 8002688:	f7ff f998 	bl	80019bc <commands_pop>
 800268c:	65b8      	str	r0, [r7, #88]	; 0x58

		if (cmd != NULL) {
 800268e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002690:	2b00      	cmp	r3, #0
 8002692:	d06a      	beq.n	800276a <main+0x252>
			estDistOld = 0;
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	653b      	str	r3, [r7, #80]	; 0x50
			estAngle = 0;
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	657b      	str	r3, [r7, #84]	; 0x54

			motor_setDrive(cmd->dir, cmd->speed);
 80026a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a2:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80026a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a8:	799b      	ldrb	r3, [r3, #6]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f001 f8e3 	bl	8003878 <motor_setDrive>
			if (cmd->dir != 0) {
 80026b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d050      	beq.n	800275e <main+0x246>
				distTarget = cmd->val;
 80026bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	64fb      	str	r3, [r7, #76]	; 0x4c
				distDiff = DIST_DIFF_DEFAULT;
 80026c2:	4b73      	ldr	r3, [pc, #460]	; (8002890 <main+0x378>)
 80026c4:	64bb      	str	r3, [r7, #72]	; 0x48
				brakingDist = MOTOR_BRAKING_DIST_CM * cmd->speed / 100;
 80026c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c8:	799b      	ldrb	r3, [r3, #6]
 80026ca:	461a      	mov	r2, r3
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	4a70      	ldr	r2, [pc, #448]	; (8002894 <main+0x37c>)
 80026d4:	fb82 1203 	smull	r1, r2, r2, r3
 80026d8:	1152      	asrs	r2, r2, #5
 80026da:	17db      	asrs	r3, r3, #31
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

				float steeringAngle = cmd->steeringAngle;
 80026ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61fb      	str	r3, [r7, #28]
				servo_setAngle(steeringAngle);
 80026f0:	ed97 0a07 	vldr	s0, [r7, #28]
 80026f4:	f001 fec8 	bl	8004488 <servo_setAngle>
				if (steeringAngle != 0) {
 80026f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002704:	d021      	beq.n	800274a <main+0x232>
					rBack = get_turning_r_back_cm(steeringAngle);
 8002706:	ed97 0a07 	vldr	s0, [r7, #28]
 800270a:	f7ff fad1 	bl	8001cb0 <get_turning_r_back_cm>
 800270e:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
					rRobot = get_turning_r_robot_cm(steeringAngle);
 8002712:	ed97 0a07 	vldr	s0, [r7, #28]
 8002716:	f7ff fb0b 	bl	8001d30 <get_turning_r_robot_cm>
 800271a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
					if (cmd->distType == TARGET) {
 800271e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002720:	7b1b      	ldrb	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d121      	bne.n	800276a <main+0x252>
						distTarget = abs_float(get_arc_length(cmd->val, rRobot));
 8002726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002728:	edd3 7a04 	vldr	s15, [r3, #16]
 800272c:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8002730:	eeb0 0a67 	vmov.f32	s0, s15
 8002734:	f7ff fc0c 	bl	8001f50 <get_arc_length>
 8002738:	eef0 7a40 	vmov.f32	s15, s0
 800273c:	eeb0 0a67 	vmov.f32	s0, s15
 8002740:	f7ff f988 	bl	8001a54 <abs_float>
 8002744:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
 8002748:	e00f      	b.n	800276a <main+0x252>
					}
				} else {
					rBack = 0;
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
					rRobot = 0;
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	63bb      	str	r3, [r7, #56]	; 0x38
					wTarget = 0;
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	643b      	str	r3, [r7, #64]	; 0x40
 800275c:	e005      	b.n	800276a <main+0x252>
				}
			} else {
				commands_end(&huart3, cmd);
 800275e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002760:	4849      	ldr	r0, [pc, #292]	; (8002888 <main+0x370>)
 8002762:	f7ff f961 	bl	8001a28 <commands_end>
				cmd = NULL;
 8002766:	2300      	movs	r3, #0
 8002768:	65bb      	str	r3, [r7, #88]	; 0x58
		}
	}
	/* ----- End: Get next command (if any) ----- */

	/* ----- Start: Drive PID Control ----- */
	if (cmd != NULL && cmd->dir != 0) {
 800276a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8148 	beq.w	8002a02 <main+0x4ea>
 8002772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002774:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 8142 	beq.w	8002a02 <main+0x4ea>
		//calculate distance.
		motorDist = motor_getDist();
 800277e:	f000 fe9b 	bl	80034b8 <motor_getDist>
 8002782:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		estDist = dist_get_cm(MS_FRAME, cmd->dir * sensors.accel[1], motorDist);
 8002786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002788:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002794:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <main+0x33c>)
 8002796:	edd3 7a04 	vldr	s15, [r3, #16]
 800279a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279e:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 80027a2:	eef0 0a67 	vmov.f32	s1, s15
 80027a6:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80027aa:	f7ff fcbb 	bl	8002124 <dist_get_cm>
 80027ae:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

		//estimate current speed.
		float estSpeed = (estDist - estDistOld) / MS_FRAME;
 80027b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80027b6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80027ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027be:	eef0 6a04 	vmov.f32	s13, #4	; 0x40200000  2.5
 80027c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027c6:	edc7 7a06 	vstr	s15, [r7, #24]
		estDistOld = estDist;
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	653b      	str	r3, [r7, #80]	; 0x50

		//calculate difference in angular velocity.
		if (rRobot != 0) wTarget = get_w_ms(estSpeed, rRobot);
 80027ce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80027d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	d007      	beq.n	80027ec <main+0x2d4>
 80027dc:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 80027e0:	ed97 0a06 	vldr	s0, [r7, #24]
 80027e4:	f7ff fae4 	bl	8001db0 <get_w_ms>
 80027e8:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		float wGyro = cmd->dir * sensors.gyroZ;
 80027ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ee:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <main+0x33c>)
 80027fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002804:	edc7 7a05 	vstr	s15, [r7, #20]
		wDiff = (wGyro - wTarget); //gyro is flipped when going backwards.
 8002808:	ed97 7a05 	vldr	s14, [r7, #20]
 800280c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002814:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		estAngle += abs_float(wGyro * MS_FRAME);
 8002818:	edd7 7a05 	vldr	s15, [r7, #20]
 800281c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002820:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002824:	eeb0 0a67 	vmov.f32	s0, s15
 8002828:	f7ff f914 	bl	8001a54 <abs_float>
 800282c:	eeb0 7a40 	vmov.f32	s14, s0
 8002830:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002834:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002838:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		switch (cmd->distType) {
 800283c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800283e:	7b1b      	ldrb	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d029      	beq.n	8002898 <main+0x380>
 8002844:	2b01      	cmp	r3, #1
 8002846:	d06e      	beq.n	8002926 <main+0x40e>
 8002848:	e098      	b.n	800297c <main+0x464>
 800284a:	bf00      	nop
 800284c:	20000544 	.word	0x20000544
 8002850:	20000280 	.word	0x20000280
 8002854:	20000514 	.word	0x20000514
 8002858:	200003ac 	.word	0x200003ac
 800285c:	20000238 	.word	0x20000238
 8002860:	20000364 	.word	0x20000364
 8002864:	2000031c 	.word	0x2000031c
 8002868:	20000484 	.word	0x20000484
 800286c:	200002d4 	.word	0x200002d4
 8002870:	200003f4 	.word	0x200003f4
 8002874:	00000000 	.word	0x00000000
 8002878:	080111b8 	.word	0x080111b8
 800287c:	080111d4 	.word	0x080111d4
 8002880:	080111ec 	.word	0x080111ec
 8002884:	20000574 	.word	0x20000574
 8002888:	200004cc 	.word	0x200004cc
 800288c:	2000043c 	.word	0x2000043c
 8002890:	41200000 	.word	0x41200000
 8002894:	51eb851f 	.word	0x51eb851f
			case TARGET:
				distDiff = distTarget - estDist;
 8002898:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800289c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				if (rRobot != 0) {
 80028a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80028ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b4:	d065      	beq.n	8002982 <main+0x46a>
					distDiff = 0.03 * distDiff +
 80028b6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80028b8:	f7fd fe46 	bl	8000548 <__aeabi_f2d>
 80028bc:	a362      	add	r3, pc, #392	; (adr r3, 8002a48 <main+0x530>)
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f7fd fe99 	bl	80005f8 <__aeabi_dmul>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4614      	mov	r4, r2
 80028cc:	461d      	mov	r5, r3
						0.97 * abs_float(get_arc_length(cmd->val - estAngle, rRobot));
 80028ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80028d4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80028d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028dc:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 80028e0:	eeb0 0a67 	vmov.f32	s0, s15
 80028e4:	f7ff fb34 	bl	8001f50 <get_arc_length>
 80028e8:	eef0 7a40 	vmov.f32	s15, s0
 80028ec:	eeb0 0a67 	vmov.f32	s0, s15
 80028f0:	f7ff f8b0 	bl	8001a54 <abs_float>
 80028f4:	ee10 3a10 	vmov	r3, s0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fe25 	bl	8000548 <__aeabi_f2d>
 80028fe:	a354      	add	r3, pc, #336	; (adr r3, 8002a50 <main+0x538>)
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f7fd fe78 	bl	80005f8 <__aeabi_dmul>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
					distDiff = 0.03 * distDiff +
 800290c:	4620      	mov	r0, r4
 800290e:	4629      	mov	r1, r5
 8002910:	f7fd fcbc 	bl	800028c <__adddf3>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f7fe f964 	bl	8000be8 <__aeabi_d2f>
 8002920:	4603      	mov	r3, r0
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
				}
				break;
 8002924:	e02d      	b.n	8002982 <main+0x46a>
			case STOP_AWAY:
				if (usCaptureComplete) {
 8002926:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <main+0x518>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02a      	beq.n	8002986 <main+0x46e>
					distDiff = dist_get_front(sensors.usDist, sensors.irDist) - cmd->val;
 8002930:	4b40      	ldr	r3, [pc, #256]	; (8002a34 <main+0x51c>)
 8002932:	edd3 7a01 	vldr	s15, [r3, #4]
 8002936:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <main+0x51c>)
 8002938:	ed93 7a00 	vldr	s14, [r3]
 800293c:	eef0 0a47 	vmov.f32	s1, s14
 8002940:	eeb0 0a67 	vmov.f32	s0, s15
 8002944:	f7ff fc18 	bl	8002178 <dist_get_front>
 8002948:	eeb0 7a40 	vmov.f32	s14, s0
 800294c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800294e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
					distDiff *= cmd->dir;
 800295a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800295c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002968:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800296c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002970:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

					usCaptureComplete = 0;
 8002974:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <main+0x518>)
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
				}
				break;
 800297a:	e004      	b.n	8002986 <main+0x46e>
			default:
				distDiff = DIST_DIFF_DEFAULT;
 800297c:	4b2e      	ldr	r3, [pc, #184]	; (8002a38 <main+0x520>)
 800297e:	64bb      	str	r3, [r7, #72]	; 0x48
				break;
 8002980:	e002      	b.n	8002988 <main+0x470>
				break;
 8002982:	bf00      	nop
 8002984:	e000      	b.n	8002988 <main+0x470>
				break;
 8002986:	bf00      	nop
		}

		//motor correction.
		motor_pwmCorrection(
			wDiff, rBack, rRobot, distDiff,
			commands_shouldBrake(cmd) ? brakingDist : 0
 8002988:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800298a:	f7ff f82f 	bl	80019ec <commands_shouldBrake>
 800298e:	4603      	mov	r3, r0
		motor_pwmCorrection(
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <main+0x482>
 8002994:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002998:	e001      	b.n	800299e <main+0x486>
 800299a:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002a3c <main+0x524>
 800299e:	eeb0 2a67 	vmov.f32	s4, s15
 80029a2:	edd7 1a12 	vldr	s3, [r7, #72]	; 0x48
 80029a6:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 80029aa:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 80029ae:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80029b2:	f000 fdb9 	bl	8003528 <motor_pwmCorrection>
		);

		if (distDiff <= 0.5) {
 80029b6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80029ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c6:	d81c      	bhi.n	8002a02 <main+0x4ea>
			//target achieved; move to next command.
			commands_end(&huart3, cmd);
 80029c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80029ca:	481d      	ldr	r0, [pc, #116]	; (8002a40 <main+0x528>)
 80029cc:	f7ff f82c 	bl	8001a28 <commands_end>
			cmd = NULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	65bb      	str	r3, [r7, #88]	; 0x58

			if (commands_shouldBrake(cmd)) {
 80029d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80029d6:	f7ff f809 	bl	80019ec <commands_shouldBrake>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00c      	beq.n	80029fa <main+0x4e2>
				servo_setAngle(0);
 80029e0:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002a3c <main+0x524>
 80029e4:	f001 fd50 	bl	8004488 <servo_setAngle>
				motor_setDrive(0, 0);
 80029e8:	2100      	movs	r1, #0
 80029ea:	2000      	movs	r0, #0
 80029ec:	f000 ff44 	bl	8003878 <motor_setDrive>
				dist_reset(0);
 80029f0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002a3c <main+0x524>
 80029f4:	f7ff fb1e 	bl	8002034 <dist_reset>
 80029f8:	e003      	b.n	8002a02 <main+0x4ea>
			} else dist_reset(estSpeed);
 80029fa:	ed97 0a06 	vldr	s0, [r7, #24]
 80029fe:	f7ff fb19 	bl	8002034 <dist_reset>
		}
	}
	/* ----- End: Drive PID Control ----- */

	/* ----- Start: Paced Loop Control ----- */
	while (!newTick);									//wait for new tick.
 8002a02:	bf00      	nop
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <main+0x52c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0fa      	beq.n	8002a04 <main+0x4ec>
	newTick = 0;										//acknowledge flag.
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <main+0x52c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]

	ticksElapsed = (ticksElapsed + 1) % ticksRefresh;	//refresh tick count.
 8002a14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002a1e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002a22:	fb01 f202 	mul.w	r2, r1, r2
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (!(ticksElapsed % ticksUltrasound)) {
 8002a2c:	e60c      	b.n	8002648 <main+0x130>
 8002a2e:	bf00      	nop
 8002a30:	20000576 	.word	0x20000576
 8002a34:	20000514 	.word	0x20000514
 8002a38:	41200000 	.word	0x41200000
 8002a3c:	00000000 	.word	0x00000000
 8002a40:	200004cc 	.word	0x200004cc
 8002a44:	20000580 	.word	0x20000580
 8002a48:	eb851eb8 	.word	0xeb851eb8
 8002a4c:	3f9eb851 	.word	0x3f9eb851
 8002a50:	70a3d70a 	.word	0x70a3d70a
 8002a54:	3fef0a3d 	.word	0x3fef0a3d

08002a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b094      	sub	sp, #80	; 0x50
 8002a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a5e:	f107 0320 	add.w	r3, r7, #32
 8002a62:	2230      	movs	r2, #48	; 0x30
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f008 fc43 	bl	800b2f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <SystemClock_Config+0xb4>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <SystemClock_Config+0xb4>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8c:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <SystemClock_Config+0xb4>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <SystemClock_Config+0xb8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <SystemClock_Config+0xb8>)
 8002aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <SystemClock_Config+0xb8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002abc:	2310      	movs	r3, #16
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ac4:	f107 0320 	add.w	r3, r7, #32
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 f94d 	bl	8006d68 <HAL_RCC_OscConfig>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002ad4:	f000 fc3e 	bl	8003354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad8:	230f      	movs	r3, #15
 8002ada:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 fbb0 	bl	8007258 <HAL_RCC_ClockConfig>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002afe:	f000 fc29 	bl	8003354 <Error_Handler>
  }
}
 8002b02:	bf00      	nop
 8002b04:	3750      	adds	r7, #80	; 0x50
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000

08002b14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b26:	4b21      	ldr	r3, [pc, #132]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b28:	4a21      	ldr	r2, [pc, #132]	; (8002bb0 <MX_ADC1_Init+0x9c>)
 8002b2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b32:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b4c:	4b17      	ldr	r3, [pc, #92]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <MX_ADC1_Init+0xa0>)
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b72:	480e      	ldr	r0, [pc, #56]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b74:	f002 f986 	bl	8004e84 <HAL_ADC_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002b7e:	f000 fbe9 	bl	8003354 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002b82:	230d      	movs	r3, #13
 8002b84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b8e:	463b      	mov	r3, r7
 8002b90:	4619      	mov	r1, r3
 8002b92:	4806      	ldr	r0, [pc, #24]	; (8002bac <MX_ADC1_Init+0x98>)
 8002b94:	f002 fb24 	bl	80051e0 <HAL_ADC_ConfigChannel>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002b9e:	f000 fbd9 	bl	8003354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000238 	.word	0x20000238
 8002bb0:	40012000 	.word	0x40012000
 8002bb4:	0f000001 	.word	0x0f000001

08002bb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bbe:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <MX_I2C1_Init+0x54>)
 8002bc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bc4:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <MX_I2C1_Init+0x58>)
 8002bc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bf4:	4804      	ldr	r0, [pc, #16]	; (8002c08 <MX_I2C1_Init+0x50>)
 8002bf6:	f003 f86b 	bl	8005cd0 <HAL_I2C_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c00:	f000 fba8 	bl	8003354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000280 	.word	0x20000280
 8002c0c:	40005400 	.word	0x40005400
 8002c10:	00061a80 	.word	0x00061a80

08002c14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b096      	sub	sp, #88	; 0x58
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	60da      	str	r2, [r3, #12]
 8002c40:	611a      	str	r2, [r3, #16]
 8002c42:	615a      	str	r2, [r3, #20]
 8002c44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	2220      	movs	r2, #32
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f008 fb50 	bl	800b2f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c52:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002c54:	4a3e      	ldr	r2, [pc, #248]	; (8002d50 <MX_TIM1_Init+0x13c>)
 8002c56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8002c58:	4b3c      	ldr	r3, [pc, #240]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002c66:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002c6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c6c:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c78:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c7e:	4833      	ldr	r0, [pc, #204]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002c80:	f004 fcca 	bl	8007618 <HAL_TIM_Base_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002c8a:	f000 fb63 	bl	8003354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c98:	4619      	mov	r1, r3
 8002c9a:	482c      	ldr	r0, [pc, #176]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002c9c:	f005 fc2a 	bl	80084f4 <HAL_TIM_ConfigClockSource>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002ca6:	f000 fb55 	bl	8003354 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002caa:	4828      	ldr	r0, [pc, #160]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002cac:	f004 fddc 	bl	8007868 <HAL_TIM_PWM_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002cb6:	f000 fb4d 	bl	8003354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4820      	ldr	r0, [pc, #128]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002cca:	f006 f983 	bl	8008fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002cd4:	f000 fb3e 	bl	8003354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cd8:	2360      	movs	r3, #96	; 0x60
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4813      	ldr	r0, [pc, #76]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002cfe:	f005 fb37 	bl	8008370 <HAL_TIM_PWM_ConfigChannel>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002d08:	f000 fb24 	bl	8003354 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4807      	ldr	r0, [pc, #28]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002d30:	f006 f9cc 	bl	80090cc <HAL_TIMEx_ConfigBreakDeadTime>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002d3a:	f000 fb0b 	bl	8003354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d3e:	4803      	ldr	r0, [pc, #12]	; (8002d4c <MX_TIM1_Init+0x138>)
 8002d40:	f001 fe04 	bl	800494c <HAL_TIM_MspPostInit>

}
 8002d44:	bf00      	nop
 8002d46:	3758      	adds	r7, #88	; 0x58
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	200002d4 	.word	0x200002d4
 8002d50:	40010000 	.word	0x40010000

08002d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	; 0x30
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f008 fac5 	bl	800b2f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d70:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d78:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002d84:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d92:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002da0:	2301      	movs	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002dac:	2302      	movs	r3, #2
 8002dae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002db0:	2301      	movs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002dbc:	f107 030c 	add.w	r3, r7, #12
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002dc4:	f004 fff4 	bl	8007db0 <HAL_TIM_Encoder_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002dce:	f000 fac1 	bl	8003354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4806      	ldr	r0, [pc, #24]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002de0:	f006 f8f8 	bl	8008fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002dea:	f000 fab3 	bl	8003354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dee:	bf00      	nop
 8002df0:	3730      	adds	r7, #48	; 0x30
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	2000031c 	.word	0x2000031c

08002dfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	; 0x30
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e02:	f107 030c 	add.w	r3, r7, #12
 8002e06:	2224      	movs	r2, #36	; 0x24
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f008 fa71 	bl	800b2f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <MX_TIM3_Init+0xa0>)
 8002e1a:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <MX_TIM3_Init+0xa4>)
 8002e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <MX_TIM3_Init+0xa0>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <MX_TIM3_Init+0xa0>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <MX_TIM3_Init+0xa0>)
 8002e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <MX_TIM3_Init+0xa0>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e38:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <MX_TIM3_Init+0xa0>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002e42:	2302      	movs	r3, #2
 8002e44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e46:	2301      	movs	r3, #1
 8002e48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002e4e:	230a      	movs	r3, #10
 8002e50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002e52:	2302      	movs	r3, #2
 8002e54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e56:	2301      	movs	r3, #1
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002e5e:	230a      	movs	r3, #10
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e62:	f107 030c 	add.w	r3, r7, #12
 8002e66:	4619      	mov	r1, r3
 8002e68:	480c      	ldr	r0, [pc, #48]	; (8002e9c <MX_TIM3_Init+0xa0>)
 8002e6a:	f004 ffa1 	bl	8007db0 <HAL_TIM_Encoder_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002e74:	f000 fa6e 	bl	8003354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	4805      	ldr	r0, [pc, #20]	; (8002e9c <MX_TIM3_Init+0xa0>)
 8002e86:	f006 f8a5 	bl	8008fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002e90:	f000 fa60 	bl	8003354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e94:	bf00      	nop
 8002e96:	3730      	adds	r7, #48	; 0x30
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000364 	.word	0x20000364
 8002ea0:	40000400 	.word	0x40000400

08002ea4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eaa:	f107 0318 	add.w	r3, r7, #24
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ec2:	463b      	mov	r3, r7
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ece:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <MX_TIM4_Init+0xd8>)
 8002ed0:	4a2b      	ldr	r2, [pc, #172]	; (8002f80 <MX_TIM4_Init+0xdc>)
 8002ed2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <MX_TIM4_Init+0xd8>)
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <MX_TIM4_Init+0xd8>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8002ee0:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <MX_TIM4_Init+0xd8>)
 8002ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee8:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <MX_TIM4_Init+0xd8>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eee:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <MX_TIM4_Init+0xd8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ef4:	4821      	ldr	r0, [pc, #132]	; (8002f7c <MX_TIM4_Init+0xd8>)
 8002ef6:	f004 fb8f 	bl	8007618 <HAL_TIM_Base_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002f00:	f000 fa28 	bl	8003354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f08:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f0a:	f107 0318 	add.w	r3, r7, #24
 8002f0e:	4619      	mov	r1, r3
 8002f10:	481a      	ldr	r0, [pc, #104]	; (8002f7c <MX_TIM4_Init+0xd8>)
 8002f12:	f005 faef 	bl	80084f4 <HAL_TIM_ConfigClockSource>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002f1c:	f000 fa1a 	bl	8003354 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002f20:	4816      	ldr	r0, [pc, #88]	; (8002f7c <MX_TIM4_Init+0xd8>)
 8002f22:	f004 fdc3 	bl	8007aac <HAL_TIM_IC_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002f2c:	f000 fa12 	bl	8003354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f38:	f107 0310 	add.w	r3, r7, #16
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	480f      	ldr	r0, [pc, #60]	; (8002f7c <MX_TIM4_Init+0xd8>)
 8002f40:	f006 f848 	bl	8008fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002f4a:	f000 fa03 	bl	8003354 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f52:	2301      	movs	r3, #1
 8002f54:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f5e:	463b      	mov	r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	4619      	mov	r1, r3
 8002f64:	4805      	ldr	r0, [pc, #20]	; (8002f7c <MX_TIM4_Init+0xd8>)
 8002f66:	f005 f967 	bl	8008238 <HAL_TIM_IC_ConfigChannel>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002f70:	f000 f9f0 	bl	8003354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f74:	bf00      	nop
 8002f76:	3728      	adds	r7, #40	; 0x28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	200003ac 	.word	0x200003ac
 8002f80:	40000800 	.word	0x40000800

08002f84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f8a:	463b      	mov	r3, r7
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <MX_TIM6_Init+0x64>)
 8002f94:	4a15      	ldr	r2, [pc, #84]	; (8002fec <MX_TIM6_Init+0x68>)
 8002f96:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <MX_TIM6_Init+0x64>)
 8002f9a:	220f      	movs	r2, #15
 8002f9c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <MX_TIM6_Init+0x64>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <MX_TIM6_Init+0x64>)
 8002fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002faa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <MX_TIM6_Init+0x64>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <MX_TIM6_Init+0x64>)
 8002fb4:	f004 fb30 	bl	8007618 <HAL_TIM_Base_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002fbe:	f000 f9c9 	bl	8003354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002fca:	463b      	mov	r3, r7
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4806      	ldr	r0, [pc, #24]	; (8002fe8 <MX_TIM6_Init+0x64>)
 8002fd0:	f006 f800 	bl	8008fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002fda:	f000 f9bb 	bl	8003354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200003f4 	.word	0x200003f4
 8002fec:	40001000 	.word	0x40001000

08002ff0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <MX_TIM7_Init+0x64>)
 8003000:	4a15      	ldr	r2, [pc, #84]	; (8003058 <MX_TIM7_Init+0x68>)
 8003002:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 8003004:	4b13      	ldr	r3, [pc, #76]	; (8003054 <MX_TIM7_Init+0x64>)
 8003006:	2201      	movs	r2, #1
 8003008:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <MX_TIM7_Init+0x64>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000-1;
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <MX_TIM7_Init+0x64>)
 8003012:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003016:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <MX_TIM7_Init+0x64>)
 800301a:	2200      	movs	r2, #0
 800301c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800301e:	480d      	ldr	r0, [pc, #52]	; (8003054 <MX_TIM7_Init+0x64>)
 8003020:	f004 fafa 	bl	8007618 <HAL_TIM_Base_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800302a:	f000 f993 	bl	8003354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003036:	463b      	mov	r3, r7
 8003038:	4619      	mov	r1, r3
 800303a:	4806      	ldr	r0, [pc, #24]	; (8003054 <MX_TIM7_Init+0x64>)
 800303c:	f005 ffca 	bl	8008fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003046:	f000 f985 	bl	8003354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	2000043c 	.word	0x2000043c
 8003058:	40001400 	.word	0x40001400

0800305c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b096      	sub	sp, #88	; 0x58
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003062:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003070:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800307a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	611a      	str	r2, [r3, #16]
 800308a:	615a      	str	r2, [r3, #20]
 800308c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	2220      	movs	r2, #32
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f008 f92c 	bl	800b2f2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800309a:	4b44      	ldr	r3, [pc, #272]	; (80031ac <MX_TIM8_Init+0x150>)
 800309c:	4a44      	ldr	r2, [pc, #272]	; (80031b0 <MX_TIM8_Init+0x154>)
 800309e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80030a0:	4b42      	ldr	r3, [pc, #264]	; (80031ac <MX_TIM8_Init+0x150>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a6:	4b41      	ldr	r3, [pc, #260]	; (80031ac <MX_TIM8_Init+0x150>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7200-1;
 80030ac:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <MX_TIM8_Init+0x150>)
 80030ae:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80030b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030b4:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <MX_TIM8_Init+0x150>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030ba:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <MX_TIM8_Init+0x150>)
 80030bc:	2200      	movs	r2, #0
 80030be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c0:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <MX_TIM8_Init+0x150>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030c6:	4839      	ldr	r0, [pc, #228]	; (80031ac <MX_TIM8_Init+0x150>)
 80030c8:	f004 faa6 	bl	8007618 <HAL_TIM_Base_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80030d2:	f000 f93f 	bl	8003354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030e0:	4619      	mov	r1, r3
 80030e2:	4832      	ldr	r0, [pc, #200]	; (80031ac <MX_TIM8_Init+0x150>)
 80030e4:	f005 fa06 	bl	80084f4 <HAL_TIM_ConfigClockSource>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80030ee:	f000 f931 	bl	8003354 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80030f2:	482e      	ldr	r0, [pc, #184]	; (80031ac <MX_TIM8_Init+0x150>)
 80030f4:	f004 fbb8 	bl	8007868 <HAL_TIM_PWM_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80030fe:	f000 f929 	bl	8003354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800310a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800310e:	4619      	mov	r1, r3
 8003110:	4826      	ldr	r0, [pc, #152]	; (80031ac <MX_TIM8_Init+0x150>)
 8003112:	f005 ff5f 	bl	8008fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800311c:	f000 f91a 	bl	8003354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003120:	2360      	movs	r3, #96	; 0x60
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003128:	2300      	movs	r3, #0
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800312c:	2300      	movs	r3, #0
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003130:	2300      	movs	r3, #0
 8003132:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003134:	2300      	movs	r3, #0
 8003136:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800313c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003140:	2200      	movs	r2, #0
 8003142:	4619      	mov	r1, r3
 8003144:	4819      	ldr	r0, [pc, #100]	; (80031ac <MX_TIM8_Init+0x150>)
 8003146:	f005 f913 	bl	8008370 <HAL_TIM_PWM_ConfigChannel>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003150:	f000 f900 	bl	8003354 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003158:	2204      	movs	r2, #4
 800315a:	4619      	mov	r1, r3
 800315c:	4813      	ldr	r0, [pc, #76]	; (80031ac <MX_TIM8_Init+0x150>)
 800315e:	f005 f907 	bl	8008370 <HAL_TIM_PWM_ConfigChannel>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003168:	f000 f8f4 	bl	8003354 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800316c:	2300      	movs	r3, #0
 800316e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003184:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4807      	ldr	r0, [pc, #28]	; (80031ac <MX_TIM8_Init+0x150>)
 8003190:	f005 ff9c 	bl	80090cc <HAL_TIMEx_ConfigBreakDeadTime>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800319a:	f000 f8db 	bl	8003354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800319e:	4803      	ldr	r0, [pc, #12]	; (80031ac <MX_TIM8_Init+0x150>)
 80031a0:	f001 fbd4 	bl	800494c <HAL_TIM_MspPostInit>

}
 80031a4:	bf00      	nop
 80031a6:	3758      	adds	r7, #88	; 0x58
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000484 	.word	0x20000484
 80031b0:	40010400 	.word	0x40010400

080031b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <MX_USART3_UART_Init+0x4c>)
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <MX_USART3_UART_Init+0x50>)
 80031bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <MX_USART3_UART_Init+0x4c>)
 80031c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031c6:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <MX_USART3_UART_Init+0x4c>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <MX_USART3_UART_Init+0x4c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <MX_USART3_UART_Init+0x4c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <MX_USART3_UART_Init+0x4c>)
 80031da:	220c      	movs	r2, #12
 80031dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <MX_USART3_UART_Init+0x4c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <MX_USART3_UART_Init+0x4c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031ea:	4805      	ldr	r0, [pc, #20]	; (8003200 <MX_USART3_UART_Init+0x4c>)
 80031ec:	f005 ffd4 	bl	8009198 <HAL_UART_Init>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80031f6:	f000 f8ad 	bl	8003354 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200004cc 	.word	0x200004cc
 8003204:	40004800 	.word	0x40004800

08003208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	4b48      	ldr	r3, [pc, #288]	; (8003344 <MX_GPIO_Init+0x13c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a47      	ldr	r2, [pc, #284]	; (8003344 <MX_GPIO_Init+0x13c>)
 8003228:	f043 0310 	orr.w	r3, r3, #16
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b45      	ldr	r3, [pc, #276]	; (8003344 <MX_GPIO_Init+0x13c>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b41      	ldr	r3, [pc, #260]	; (8003344 <MX_GPIO_Init+0x13c>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a40      	ldr	r2, [pc, #256]	; (8003344 <MX_GPIO_Init+0x13c>)
 8003244:	f043 0304 	orr.w	r3, r3, #4
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <MX_GPIO_Init+0x13c>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	4b3a      	ldr	r3, [pc, #232]	; (8003344 <MX_GPIO_Init+0x13c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a39      	ldr	r2, [pc, #228]	; (8003344 <MX_GPIO_Init+0x13c>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <MX_GPIO_Init+0x13c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	4b33      	ldr	r3, [pc, #204]	; (8003344 <MX_GPIO_Init+0x13c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a32      	ldr	r2, [pc, #200]	; (8003344 <MX_GPIO_Init+0x13c>)
 800327c:	f043 0308 	orr.w	r3, r3, #8
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b30      	ldr	r3, [pc, #192]	; (8003344 <MX_GPIO_Init+0x13c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <MX_GPIO_Init+0x13c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a2b      	ldr	r2, [pc, #172]	; (8003344 <MX_GPIO_Init+0x13c>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b29      	ldr	r3, [pc, #164]	; (8003344 <MX_GPIO_Init+0x13c>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin, GPIO_PIN_RESET);
 80032aa:	2200      	movs	r2, #0
 80032ac:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80032b0:	4825      	ldr	r0, [pc, #148]	; (8003348 <MX_GPIO_Init+0x140>)
 80032b2:	f002 fcf3 	bl	8005c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin, GPIO_PIN_RESET);
 80032b6:	2200      	movs	r2, #0
 80032b8:	213c      	movs	r1, #60	; 0x3c
 80032ba:	4824      	ldr	r0, [pc, #144]	; (800334c <MX_GPIO_Init+0x144>)
 80032bc:	f002 fcee 	bl	8005c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	4822      	ldr	r0, [pc, #136]	; (8003350 <MX_GPIO_Init+0x148>)
 80032c6:	f002 fce9 	bl	8005c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET__Pin OLED_DATA_COMMAND__Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin;
 80032ca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80032ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d0:	2301      	movs	r3, #1
 80032d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4619      	mov	r1, r3
 80032e2:	4819      	ldr	r0, [pc, #100]	; (8003348 <MX_GPIO_Init+0x140>)
 80032e4:	f002 fb3e 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTORA_IN2_Pin MOTORA_IN1_Pin MOTORB_IN1_Pin MOTORB_IN2_Pin */
  GPIO_InitStruct.Pin = MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin;
 80032e8:	233c      	movs	r3, #60	; 0x3c
 80032ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ec:	2301      	movs	r3, #1
 80032ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2300      	movs	r3, #0
 80032f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4619      	mov	r1, r3
 80032fe:	4813      	ldr	r0, [pc, #76]	; (800334c <MX_GPIO_Init+0x144>)
 8003300:	f002 fb30 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8003304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800330e:	2301      	movs	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4619      	mov	r1, r3
 8003318:	480d      	ldr	r0, [pc, #52]	; (8003350 <MX_GPIO_Init+0x148>)
 800331a:	f002 fb23 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003322:	2301      	movs	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	2300      	movs	r3, #0
 800332c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 800332e:	f107 0314 	add.w	r3, r7, #20
 8003332:	4619      	mov	r1, r3
 8003334:	4806      	ldr	r0, [pc, #24]	; (8003350 <MX_GPIO_Init+0x148>)
 8003336:	f002 fb15 	bl	8005964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800333a:	bf00      	nop
 800333c:	3728      	adds	r7, #40	; 0x28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800
 8003348:	40021000 	.word	0x40021000
 800334c:	40020000 	.word	0x40020000
 8003350:	40020c00 	.word	0x40020c00

08003354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003358:	b672      	cpsid	i
}
 800335a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800335c:	e7fe      	b.n	800335c <Error_Handler+0x8>
	...

08003360 <motor_init>:
static PidDef pidDist;
const static float Kp_dist = 0.47;
const static float Ki_dist = 0;
const static float Kd_dist = 0.05;

void motor_init(TIM_HandleTypeDef *pwm, TIM_HandleTypeDef *l_enc, TIM_HandleTypeDef *r_enc) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
	//assign timer pointers.
	motor_pwm_tim = pwm;
 800336c:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <motor_init+0x84>)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6013      	str	r3, [r2, #0]
	l_enc_tim = l_enc;
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <motor_init+0x88>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	6013      	str	r3, [r2, #0]
	r_enc_tim = r_enc;
 8003378:	4a1c      	ldr	r2, [pc, #112]	; (80033ec <motor_init+0x8c>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6013      	str	r3, [r2, #0]

	//start Encoders and PWM for L, R motors.
	HAL_TIM_Encoder_Start_IT(l_enc, TIM_CHANNEL_ALL);
 800337e:	213c      	movs	r1, #60	; 0x3c
 8003380:	68b8      	ldr	r0, [r7, #8]
 8003382:	f004 fdbb 	bl	8007efc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(r_enc, TIM_CHANNEL_ALL);
 8003386:	213c      	movs	r1, #60	; 0x3c
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f004 fdb7 	bl	8007efc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(pwm, L_CHANNEL);
 800338e:	2100      	movs	r1, #0
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f004 fac3 	bl	800791c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm, R_CHANNEL);
 8003396:	2104      	movs	r1, #4
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f004 fabf 	bl	800791c <HAL_TIM_PWM_Start>

	//initialize PID values.
	pid_init(&pidMatch, Kp_match, Ki_match, Kd_match);
 800339e:	eddf 7a14 	vldr	s15, [pc, #80]	; 80033f0 <motor_init+0x90>
 80033a2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80033f4 <motor_init+0x94>
 80033a6:	eddf 6a14 	vldr	s13, [pc, #80]	; 80033f8 <motor_init+0x98>
 80033aa:	eeb0 1a66 	vmov.f32	s2, s13
 80033ae:	eef0 0a47 	vmov.f32	s1, s14
 80033b2:	eeb0 0a67 	vmov.f32	s0, s15
 80033b6:	4811      	ldr	r0, [pc, #68]	; (80033fc <motor_init+0x9c>)
 80033b8:	f000 fcec 	bl	8003d94 <pid_init>
	pid_init(&pidDist, Kp_dist, Ki_dist, Kd_dist);
 80033bc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8003400 <motor_init+0xa0>
 80033c0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003404 <motor_init+0xa4>
 80033c4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003408 <motor_init+0xa8>
 80033c8:	eeb0 1a66 	vmov.f32	s2, s13
 80033cc:	eef0 0a47 	vmov.f32	s1, s14
 80033d0:	eeb0 0a67 	vmov.f32	s0, s15
 80033d4:	480d      	ldr	r0, [pc, #52]	; (800340c <motor_init+0xac>)
 80033d6:	f000 fcdd 	bl	8003d94 <pid_init>
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000584 	.word	0x20000584
 80033e8:	20000588 	.word	0x20000588
 80033ec:	2000058c 	.word	0x2000058c
 80033f0:	466a6000 	.word	0x466a6000
 80033f4:	44480000 	.word	0x44480000
 80033f8:	46108800 	.word	0x46108800
 80033fc:	20000598 	.word	0x20000598
 8003400:	3ef0a3d7 	.word	0x3ef0a3d7
 8003404:	00000000 	.word	0x00000000
 8003408:	3d4ccccd 	.word	0x3d4ccccd
 800340c:	200005ac 	.word	0x200005ac

08003410 <timer_reset>:

static void timer_reset(TIM_HandleTypeDef *htim) {
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <setPwmLR>:

static void setPwmLR() {
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
	//set L, R channels.
	__HAL_TIM_SetCompare(motor_pwm_tim, L_CHANNEL,
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <setPwmLR+0x40>)
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	f241 7270 	movw	r2, #6000	; 0x1770
 8003438:	4293      	cmp	r3, r2
 800343a:	bf28      	it	cs
 800343c:	4613      	movcs	r3, r2
 800343e:	b29a      	uxth	r2, r3
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <setPwmLR+0x44>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	635a      	str	r2, [r3, #52]	; 0x34
		lPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: lPwmVal);
	__HAL_TIM_SetCompare(motor_pwm_tim, R_CHANNEL,
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <setPwmLR+0x48>)
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	f241 7270 	movw	r2, #6000	; 0x1770
 8003450:	4293      	cmp	r3, r2
 8003452:	bf28      	it	cs
 8003454:	4613      	movcs	r3, r2
 8003456:	b29a      	uxth	r2, r3
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <setPwmLR+0x44>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
		rPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: rPwmVal);
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000594 	.word	0x20000594
 8003470:	20000584 	.word	0x20000584
 8003474:	20000596 	.word	0x20000596

08003478 <resetPwmParams>:

static void resetPwmParams() {
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
	pid_reset(&pidMatch);
 800347c:	4803      	ldr	r0, [pc, #12]	; (800348c <resetPwmParams+0x14>)
 800347e:	f000 fc77 	bl	8003d70 <pid_reset>
	pid_reset(&pidDist);
 8003482:	4803      	ldr	r0, [pc, #12]	; (8003490 <resetPwmParams+0x18>)
 8003484:	f000 fc74 	bl	8003d70 <pid_reset>
}
 8003488:	bf00      	nop
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000598 	.word	0x20000598
 8003490:	200005ac 	.word	0x200005ac

08003494 <resetEncoders>:

static void resetEncoders() {
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
	timer_reset(l_enc_tim);
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <resetEncoders+0x1c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ffb7 	bl	8003410 <timer_reset>
	timer_reset(r_enc_tim);
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <resetEncoders+0x20>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ffb2 	bl	8003410 <timer_reset>
}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000588 	.word	0x20000588
 80034b4:	2000058c 	.word	0x2000058c

080034b8 <motor_getDist>:

float motor_getDist() {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
	uint32_t lCounter = __HAL_TIM_GET_COUNTER(l_enc_tim),
 80034be:	4b18      	ldr	r3, [pc, #96]	; (8003520 <motor_getDist+0x68>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	60bb      	str	r3, [r7, #8]
			rCounter = __HAL_TIM_GET_COUNTER(r_enc_tim);
 80034c8:	4b16      	ldr	r3, [pc, #88]	; (8003524 <motor_getDist+0x6c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	607b      	str	r3, [r7, #4]
	int16_t lCount = (int16_t) lCounter,
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	81fb      	strh	r3, [r7, #14]
			rCount = (int16_t) rCounter;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	81bb      	strh	r3, [r7, #12]
	if (lCount < 0) lCount = -lCount;
 80034da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	da03      	bge.n	80034ea <motor_getDist+0x32>
 80034e2:	89fb      	ldrh	r3, [r7, #14]
 80034e4:	425b      	negs	r3, r3
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	81fb      	strh	r3, [r7, #14]
	if (rCount < 0) rCount = -rCount;
 80034ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da03      	bge.n	80034fa <motor_getDist+0x42>
 80034f2:	89bb      	ldrh	r3, [r7, #12]
 80034f4:	425b      	negs	r3, r3
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	81bb      	strh	r3, [r7, #12]

	uint16_t pulses = ((uint16_t) lCount) + ((uint16_t) rCount);
 80034fa:	89fa      	ldrh	r2, [r7, #14]
 80034fc:	89bb      	ldrh	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	807b      	strh	r3, [r7, #2]
	pulses >>= 2;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	807b      	strh	r3, [r7, #2]

	return get_distance_cm(pulses);
 8003508:	887b      	ldrh	r3, [r7, #2]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe fce8 	bl	8001ee0 <get_distance_cm>
 8003510:	eef0 7a40 	vmov.f32	s15, s0
}
 8003514:	eeb0 0a67 	vmov.f32	s0, s15
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000588 	.word	0x20000588
 8003524:	2000058c 	.word	0x2000058c

08003528 <motor_pwmCorrection>:

//PWM at fixed intervals.
void motor_pwmCorrection(float wDiff, float rBack, float rRobot, float distDiff, float brakingDist) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b08c      	sub	sp, #48	; 0x30
 800352c:	af00      	add	r7, sp, #0
 800352e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003532:	edc7 0a04 	vstr	s1, [r7, #16]
 8003536:	ed87 1a03 	vstr	s2, [r7, #12]
 800353a:	edc7 1a02 	vstr	s3, [r7, #8]
 800353e:	ed87 2a01 	vstr	s4, [r7, #4]
	//adjust speed based on distance to drive.
	if (distDiff < brakingDist) {
 8003542:	ed97 7a02 	vldr	s14, [r7, #8]
 8003546:	edd7 7a01 	vldr	s15, [r7, #4]
 800354a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800354e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003552:	d521      	bpl.n	8003598 <motor_pwmCorrection+0x70>
		pwmValAccel = MOTOR_PWM_MIN + pid_adjust(&pidDist, distDiff, 1) / brakingDist * (pwmValTarget - MOTOR_PWM_MIN);
 8003554:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003558:	ed97 0a02 	vldr	s0, [r7, #8]
 800355c:	4894      	ldr	r0, [pc, #592]	; (80037b0 <motor_pwmCorrection+0x288>)
 800355e:	f000 fc33 	bl	8003dc8 <pid_adjust>
 8003562:	eef0 6a40 	vmov.f32	s13, s0
 8003566:	edd7 7a01 	vldr	s15, [r7, #4]
 800356a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356e:	4b91      	ldr	r3, [pc, #580]	; (80037b4 <motor_pwmCorrection+0x28c>)
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	3bfa      	subs	r3, #250	; 0xfa
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800357c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003580:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80037b8 <motor_pwmCorrection+0x290>
 8003584:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800358c:	ee17 3a90 	vmov	r3, s15
 8003590:	b29a      	uxth	r2, r3
 8003592:	4b8a      	ldr	r3, [pc, #552]	; (80037bc <motor_pwmCorrection+0x294>)
 8003594:	801a      	strh	r2, [r3, #0]
 8003596:	e00b      	b.n	80035b0 <motor_pwmCorrection+0x88>
	} else if (pwmValAccel < pwmValTarget) pwmValAccel += MOTOR_PWM_ACCEL;
 8003598:	4b88      	ldr	r3, [pc, #544]	; (80037bc <motor_pwmCorrection+0x294>)
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	4b85      	ldr	r3, [pc, #532]	; (80037b4 <motor_pwmCorrection+0x28c>)
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d205      	bcs.n	80035b0 <motor_pwmCorrection+0x88>
 80035a4:	4b85      	ldr	r3, [pc, #532]	; (80037bc <motor_pwmCorrection+0x294>)
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	330f      	adds	r3, #15
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	4b83      	ldr	r3, [pc, #524]	; (80037bc <motor_pwmCorrection+0x294>)
 80035ae:	801a      	strh	r2, [r3, #0]
	if (pwmValAccel > pwmValTarget) pwmValAccel = pwmValTarget;
 80035b0:	4b82      	ldr	r3, [pc, #520]	; (80037bc <motor_pwmCorrection+0x294>)
 80035b2:	881a      	ldrh	r2, [r3, #0]
 80035b4:	4b7f      	ldr	r3, [pc, #508]	; (80037b4 <motor_pwmCorrection+0x28c>)
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d903      	bls.n	80035c4 <motor_pwmCorrection+0x9c>
 80035bc:	4b7d      	ldr	r3, [pc, #500]	; (80037b4 <motor_pwmCorrection+0x28c>)
 80035be:	881a      	ldrh	r2, [r3, #0]
 80035c0:	4b7e      	ldr	r3, [pc, #504]	; (80037bc <motor_pwmCorrection+0x294>)
 80035c2:	801a      	strh	r2, [r3, #0]

	float offset = pid_adjust(&pidMatch, wDiff, 1) * pwmValAccel / pwmValTarget;
 80035c4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80035c8:	ed97 0a05 	vldr	s0, [r7, #20]
 80035cc:	487c      	ldr	r0, [pc, #496]	; (80037c0 <motor_pwmCorrection+0x298>)
 80035ce:	f000 fbfb 	bl	8003dc8 <pid_adjust>
 80035d2:	eeb0 7a40 	vmov.f32	s14, s0
 80035d6:	4b79      	ldr	r3, [pc, #484]	; (80037bc <motor_pwmCorrection+0x294>)
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80035e6:	4b73      	ldr	r3, [pc, #460]	; (80037b4 <motor_pwmCorrection+0x28c>)
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//	float offset = 0;
	float lScale = 1, rScale = 1;
 80035fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003600:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28

	if (rBack != 0 && rRobot != 0) {
 8003606:	edd7 7a04 	vldr	s15, [r7, #16]
 800360a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800360e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003612:	d04d      	beq.n	80036b0 <motor_pwmCorrection+0x188>
 8003614:	edd7 7a03 	vldr	s15, [r7, #12]
 8003618:	eef5 7a40 	vcmp.f32	s15, #0.0
 800361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003620:	d046      	beq.n	80036b0 <motor_pwmCorrection+0x188>
		float B2 = WHEELBASE_CM / 2;
 8003622:	4b68      	ldr	r3, [pc, #416]	; (80037c4 <motor_pwmCorrection+0x29c>)
 8003624:	623b      	str	r3, [r7, #32]

		if (rBack < 0 && rRobot < 0) {
 8003626:	edd7 7a04 	vldr	s15, [r7, #16]
 800362a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800362e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003632:	d525      	bpl.n	8003680 <motor_pwmCorrection+0x158>
 8003634:	edd7 7a03 	vldr	s15, [r7, #12]
 8003638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003640:	d51e      	bpl.n	8003680 <motor_pwmCorrection+0x158>
			lScale = (-rBack - B2) / -rRobot;
 8003642:	edd7 7a04 	vldr	s15, [r7, #16]
 8003646:	eeb1 7a67 	vneg.f32	s14, s15
 800364a:	edd7 7a08 	vldr	s15, [r7, #32]
 800364e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003652:	eef1 6a67 	vneg.f32	s13, s15
 8003656:	ed97 7a03 	vldr	s14, [r7, #12]
 800365a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			rScale = (-rBack + B2) / -rRobot;
 8003662:	ed97 7a08 	vldr	s14, [r7, #32]
 8003666:	edd7 7a04 	vldr	s15, [r7, #16]
 800366a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366e:	eef1 6a67 	vneg.f32	s13, s15
 8003672:	ed97 7a03 	vldr	s14, [r7, #12]
 8003676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800367a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800367e:	e017      	b.n	80036b0 <motor_pwmCorrection+0x188>
		} else {
			lScale = (rBack + B2) / rRobot;
 8003680:	ed97 7a04 	vldr	s14, [r7, #16]
 8003684:	edd7 7a08 	vldr	s15, [r7, #32]
 8003688:	ee77 6a27 	vadd.f32	s13, s14, s15
 800368c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003694:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			rScale = (rBack - B2) / rRobot;
 8003698:	ed97 7a04 	vldr	s14, [r7, #16]
 800369c:	edd7 7a08 	vldr	s15, [r7, #32]
 80036a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80036a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80036a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		}
	}

	lPwmVal = pwmValAccel * lScale - offset;
 80036b0:	4b42      	ldr	r3, [pc, #264]	; (80037bc <motor_pwmCorrection+0x294>)
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d0:	ee17 3a90 	vmov	r3, s15
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	4b3c      	ldr	r3, [pc, #240]	; (80037c8 <motor_pwmCorrection+0x2a0>)
 80036d8:	801a      	strh	r2, [r3, #0]
	rPwmVal = pwmValAccel * rScale + offset;
 80036da:	4b38      	ldr	r3, [pc, #224]	; (80037bc <motor_pwmCorrection+0x294>)
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80036ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036fa:	ee17 3a90 	vmov	r3, s15
 80036fe:	b29a      	uxth	r2, r3
 8003700:	4b32      	ldr	r3, [pc, #200]	; (80037cc <motor_pwmCorrection+0x2a4>)
 8003702:	801a      	strh	r2, [r3, #0]

	if (lPwmVal > MOTOR_PWM_MAX || rPwmVal > MOTOR_PWM_MAX) {
 8003704:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <motor_pwmCorrection+0x2a0>)
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	f241 7270 	movw	r2, #6000	; 0x1770
 800370c:	4293      	cmp	r3, r2
 800370e:	d805      	bhi.n	800371c <motor_pwmCorrection+0x1f4>
 8003710:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <motor_pwmCorrection+0x2a4>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	f241 7270 	movw	r2, #6000	; 0x1770
 8003718:	4293      	cmp	r3, r2
 800371a:	d942      	bls.n	80037a2 <motor_pwmCorrection+0x27a>
		float scale;
		if (lPwmVal > rPwmVal) {
 800371c:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <motor_pwmCorrection+0x2a0>)
 800371e:	881a      	ldrh	r2, [r3, #0]
 8003720:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <motor_pwmCorrection+0x2a4>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d91e      	bls.n	8003766 <motor_pwmCorrection+0x23e>
			scale = rPwmVal / lPwmVal;
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <motor_pwmCorrection+0x2a4>)
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	4b26      	ldr	r3, [pc, #152]	; (80037c8 <motor_pwmCorrection+0x2a0>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	b29b      	uxth	r3, r3
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800373e:	edc7 7a07 	vstr	s15, [r7, #28]
			lPwmVal = MOTOR_PWM_MAX;
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <motor_pwmCorrection+0x2a0>)
 8003744:	f241 7270 	movw	r2, #6000	; 0x1770
 8003748:	801a      	strh	r2, [r3, #0]
			rPwmVal = MOTOR_PWM_MAX * scale;
 800374a:	edd7 7a07 	vldr	s15, [r7, #28]
 800374e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80037d0 <motor_pwmCorrection+0x2a8>
 8003752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800375a:	ee17 3a90 	vmov	r3, s15
 800375e:	b29a      	uxth	r2, r3
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <motor_pwmCorrection+0x2a4>)
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e01d      	b.n	80037a2 <motor_pwmCorrection+0x27a>
		} else {
			scale = lPwmVal / rPwmVal;
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <motor_pwmCorrection+0x2a0>)
 8003768:	881a      	ldrh	r2, [r3, #0]
 800376a:	4b18      	ldr	r3, [pc, #96]	; (80037cc <motor_pwmCorrection+0x2a4>)
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003772:	b29b      	uxth	r3, r3
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800377c:	edc7 7a07 	vstr	s15, [r7, #28]
			lPwmVal = MOTOR_PWM_MAX * scale;
 8003780:	edd7 7a07 	vldr	s15, [r7, #28]
 8003784:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80037d0 <motor_pwmCorrection+0x2a8>
 8003788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800378c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003790:	ee17 3a90 	vmov	r3, s15
 8003794:	b29a      	uxth	r2, r3
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <motor_pwmCorrection+0x2a0>)
 8003798:	801a      	strh	r2, [r3, #0]
			rPwmVal = MOTOR_PWM_MAX;
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <motor_pwmCorrection+0x2a4>)
 800379c:	f241 7270 	movw	r2, #6000	; 0x1770
 80037a0:	801a      	strh	r2, [r3, #0]
		}
	}

	setPwmLR();
 80037a2:	f7ff fe43 	bl	800342c <setPwmLR>
}
 80037a6:	bf00      	nop
 80037a8:	3730      	adds	r7, #48	; 0x30
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200005ac 	.word	0x200005ac
 80037b4:	20000592 	.word	0x20000592
 80037b8:	437a0000 	.word	0x437a0000
 80037bc:	20000590 	.word	0x20000590
 80037c0:	20000598 	.word	0x20000598
 80037c4:	4101999a 	.word	0x4101999a
 80037c8:	20000594 	.word	0x20000594
 80037cc:	20000596 	.word	0x20000596
 80037d0:	45bb8000 	.word	0x45bb8000

080037d4 <setDriveDir>:

static void setDriveDir(int8_t dir) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
	if (dir > 0) {
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	dd14      	ble.n	8003810 <setDriveDir+0x3c>
		//forward.
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_SET);
 80037e6:	2201      	movs	r2, #1
 80037e8:	2108      	movs	r1, #8
 80037ea:	4822      	ldr	r0, [pc, #136]	; (8003874 <setDriveDir+0xa0>)
 80037ec:	f002 fa56 	bl	8005c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
 80037f0:	2200      	movs	r2, #0
 80037f2:	2104      	movs	r1, #4
 80037f4:	481f      	ldr	r0, [pc, #124]	; (8003874 <setDriveDir+0xa0>)
 80037f6:	f002 fa51 	bl	8005c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_SET);
 80037fa:	2201      	movs	r2, #1
 80037fc:	2110      	movs	r1, #16
 80037fe:	481d      	ldr	r0, [pc, #116]	; (8003874 <setDriveDir+0xa0>)
 8003800:	f002 fa4c 	bl	8005c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8003804:	2200      	movs	r2, #0
 8003806:	2120      	movs	r1, #32
 8003808:	481a      	ldr	r0, [pc, #104]	; (8003874 <setDriveDir+0xa0>)
 800380a:	f002 fa47 	bl	8005c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
	}
}
 800380e:	e02c      	b.n	800386a <setDriveDir+0x96>
	} else if (dir < 0) {
 8003810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003814:	2b00      	cmp	r3, #0
 8003816:	da14      	bge.n	8003842 <setDriveDir+0x6e>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
 8003818:	2200      	movs	r2, #0
 800381a:	2108      	movs	r1, #8
 800381c:	4815      	ldr	r0, [pc, #84]	; (8003874 <setDriveDir+0xa0>)
 800381e:	f002 fa3d 	bl	8005c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_SET);
 8003822:	2201      	movs	r2, #1
 8003824:	2104      	movs	r1, #4
 8003826:	4813      	ldr	r0, [pc, #76]	; (8003874 <setDriveDir+0xa0>)
 8003828:	f002 fa38 	bl	8005c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
 800382c:	2200      	movs	r2, #0
 800382e:	2110      	movs	r1, #16
 8003830:	4810      	ldr	r0, [pc, #64]	; (8003874 <setDriveDir+0xa0>)
 8003832:	f002 fa33 	bl	8005c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_SET);
 8003836:	2201      	movs	r2, #1
 8003838:	2120      	movs	r1, #32
 800383a:	480e      	ldr	r0, [pc, #56]	; (8003874 <setDriveDir+0xa0>)
 800383c:	f002 fa2e 	bl	8005c9c <HAL_GPIO_WritePin>
}
 8003840:	e013      	b.n	800386a <setDriveDir+0x96>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
 8003842:	2200      	movs	r2, #0
 8003844:	2108      	movs	r1, #8
 8003846:	480b      	ldr	r0, [pc, #44]	; (8003874 <setDriveDir+0xa0>)
 8003848:	f002 fa28 	bl	8005c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
 800384c:	2200      	movs	r2, #0
 800384e:	2104      	movs	r1, #4
 8003850:	4808      	ldr	r0, [pc, #32]	; (8003874 <setDriveDir+0xa0>)
 8003852:	f002 fa23 	bl	8005c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
 8003856:	2200      	movs	r2, #0
 8003858:	2110      	movs	r1, #16
 800385a:	4806      	ldr	r0, [pc, #24]	; (8003874 <setDriveDir+0xa0>)
 800385c:	f002 fa1e 	bl	8005c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8003860:	2200      	movs	r2, #0
 8003862:	2120      	movs	r1, #32
 8003864:	4803      	ldr	r0, [pc, #12]	; (8003874 <setDriveDir+0xa0>)
 8003866:	f002 fa19 	bl	8005c9c <HAL_GPIO_WritePin>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40020000 	.word	0x40020000

08003878 <motor_setDrive>:

//speed: 0 - 100
void motor_setDrive(int8_t dir, uint8_t speed) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	460a      	mov	r2, r1
 8003882:	71fb      	strb	r3, [r7, #7]
 8003884:	4613      	mov	r3, r2
 8003886:	71bb      	strb	r3, [r7, #6]
	if (dir == 0) {
 8003888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <motor_setDrive+0x20>
		setDriveDir(0);
 8003890:	2000      	movs	r0, #0
 8003892:	f7ff ff9f 	bl	80037d4 <setDriveDir>
		return;
 8003896:	e02d      	b.n	80038f4 <motor_setDrive+0x7c>
	}

	//derive PWM value.
	pwmValTarget = MOTOR_PWM_MAX / 100 * speed;
 8003898:	79bb      	ldrb	r3, [r7, #6]
 800389a:	b29b      	uxth	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <motor_setDrive+0x84>)
 80038a8:	801a      	strh	r2, [r3, #0]
	if (pwmValTarget > 0) pwmValTarget--;
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <motor_setDrive+0x84>)
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <motor_setDrive+0x46>
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <motor_setDrive+0x84>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <motor_setDrive+0x84>)
 80038bc:	801a      	strh	r2, [r3, #0]

	pwmValAccel = speed > 0
 80038be:	79bb      	ldrb	r3, [r7, #6]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <motor_setDrive+0x50>
 80038c4:	22fa      	movs	r2, #250	; 0xfa
 80038c6:	e000      	b.n	80038ca <motor_setDrive+0x52>
 80038c8:	2200      	movs	r2, #0
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <motor_setDrive+0x88>)
 80038cc:	801a      	strh	r2, [r3, #0]
		? MOTOR_PWM_MIN
		: 0;
	lPwmVal = rPwmVal = pwmValAccel;
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <motor_setDrive+0x88>)
 80038d0:	881a      	ldrh	r2, [r3, #0]
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <motor_setDrive+0x8c>)
 80038d4:	801a      	strh	r2, [r3, #0]
 80038d6:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <motor_setDrive+0x8c>)
 80038d8:	881a      	ldrh	r2, [r3, #0]
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <motor_setDrive+0x90>)
 80038dc:	801a      	strh	r2, [r3, #0]

	//reset.
	resetEncoders();
 80038de:	f7ff fdd9 	bl	8003494 <resetEncoders>
	resetPwmParams();
 80038e2:	f7ff fdc9 	bl	8003478 <resetPwmParams>

	setDriveDir(dir);
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ff72 	bl	80037d4 <setDriveDir>
	setPwmLR();
 80038f0:	f7ff fd9c 	bl	800342c <setPwmLR>
}
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000592 	.word	0x20000592
 8003900:	20000590 	.word	0x20000590
 8003904:	20000596 	.word	0x20000596
 8003908:	20000594 	.word	0x20000594

0800390c <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	460a      	mov	r2, r1
 8003916:	71fb      	strb	r3, [r7, #7]
 8003918:	4613      	mov	r3, r2
 800391a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 800391c:	79bb      	ldrb	r3, [r7, #6]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d106      	bne.n	8003930 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 8003922:	2201      	movs	r2, #1
 8003924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003928:	481c      	ldr	r0, [pc, #112]	; (800399c <OLED_WR_Byte+0x90>)
 800392a:	f002 f9b7 	bl	8005c9c <HAL_GPIO_WritePin>
 800392e:	e005      	b.n	800393c <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 8003930:	2200      	movs	r2, #0
 8003932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003936:	4819      	ldr	r0, [pc, #100]	; (800399c <OLED_WR_Byte+0x90>)
 8003938:	f002 f9b0 	bl	8005c9c <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	e01f      	b.n	8003982 <OLED_WR_Byte+0x76>
	{ // Complete the code below
		OLED_SCLK_Clr();
 8003942:	2200      	movs	r2, #0
 8003944:	2120      	movs	r1, #32
 8003946:	4815      	ldr	r0, [pc, #84]	; (800399c <OLED_WR_Byte+0x90>)
 8003948:	f002 f9a8 	bl	8005c9c <HAL_GPIO_WritePin>
		if (dat & (0x80 >> i)) OLED_SDIN_Set();
 800394c:	79fa      	ldrb	r2, [r7, #7]
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	fa41 f303 	asr.w	r3, r1, r3
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <OLED_WR_Byte+0x5c>
 800395c:	2201      	movs	r2, #1
 800395e:	2140      	movs	r1, #64	; 0x40
 8003960:	480e      	ldr	r0, [pc, #56]	; (800399c <OLED_WR_Byte+0x90>)
 8003962:	f002 f99b 	bl	8005c9c <HAL_GPIO_WritePin>
 8003966:	e004      	b.n	8003972 <OLED_WR_Byte+0x66>
		else OLED_SDIN_Clr();
 8003968:	2200      	movs	r2, #0
 800396a:	2140      	movs	r1, #64	; 0x40
 800396c:	480b      	ldr	r0, [pc, #44]	; (800399c <OLED_WR_Byte+0x90>)
 800396e:	f002 f995 	bl	8005c9c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8003972:	2201      	movs	r2, #1
 8003974:	2120      	movs	r1, #32
 8003976:	4809      	ldr	r0, [pc, #36]	; (800399c <OLED_WR_Byte+0x90>)
 8003978:	f002 f990 	bl	8005c9c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	3301      	adds	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b07      	cmp	r3, #7
 8003986:	d9dc      	bls.n	8003942 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 8003988:	2201      	movs	r2, #1
 800398a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800398e:	4803      	ldr	r0, [pc, #12]	; (800399c <OLED_WR_Byte+0x90>)
 8003990:	f002 f984 	bl	8005c9c <HAL_GPIO_WritePin>
} 
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000

080039a0 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	71fb      	strb	r3, [r7, #7]
 80039aa:	e026      	b.n	80039fa <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	3b50      	subs	r3, #80	; 0x50
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ffa9 	bl	800390c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 80039ba:	2100      	movs	r1, #0
 80039bc:	2000      	movs	r0, #0
 80039be:	f7ff ffa5 	bl	800390c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 80039c2:	2100      	movs	r1, #0
 80039c4:	2010      	movs	r0, #16
 80039c6:	f7ff ffa1 	bl	800390c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 80039ca:	2300      	movs	r3, #0
 80039cc:	71bb      	strb	r3, [r7, #6]
 80039ce:	e00d      	b.n	80039ec <OLED_Refresh_Gram+0x4c>
 80039d0:	79ba      	ldrb	r2, [r7, #6]
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	490d      	ldr	r1, [pc, #52]	; (8003a0c <OLED_Refresh_Gram+0x6c>)
 80039d6:	00d2      	lsls	r2, r2, #3
 80039d8:	440a      	add	r2, r1
 80039da:	4413      	add	r3, r2
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2101      	movs	r1, #1
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff93 	bl	800390c <OLED_WR_Byte>
 80039e6:	79bb      	ldrb	r3, [r7, #6]
 80039e8:	3301      	adds	r3, #1
 80039ea:	71bb      	strb	r3, [r7, #6]
 80039ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	daed      	bge.n	80039d0 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	3301      	adds	r3, #1
 80039f8:	71fb      	strb	r3, [r7, #7]
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2b07      	cmp	r3, #7
 80039fe:	d9d5      	bls.n	80039ac <OLED_Refresh_Gram+0xc>
	}
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200005c0 	.word	0x200005c0

08003a10 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8003a16:	2300      	movs	r3, #0
 8003a18:	71fb      	strb	r3, [r7, #7]
 8003a1a:	e014      	b.n	8003a46 <OLED_Clear+0x36>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	71bb      	strb	r3, [r7, #6]
 8003a20:	e00a      	b.n	8003a38 <OLED_Clear+0x28>
 8003a22:	79ba      	ldrb	r2, [r7, #6]
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	490c      	ldr	r1, [pc, #48]	; (8003a58 <OLED_Clear+0x48>)
 8003a28:	00d2      	lsls	r2, r2, #3
 8003a2a:	440a      	add	r2, r1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	79bb      	ldrb	r3, [r7, #6]
 8003a34:	3301      	adds	r3, #1
 8003a36:	71bb      	strb	r3, [r7, #6]
 8003a38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	daf0      	bge.n	8003a22 <OLED_Clear+0x12>
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	3301      	adds	r3, #1
 8003a44:	71fb      	strb	r3, [r7, #7]
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	2b07      	cmp	r3, #7
 8003a4a:	d9e7      	bls.n	8003a1c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003a4c:	f7ff ffa8 	bl	80039a0 <OLED_Refresh_Gram>
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	200005c0 	.word	0x200005c0

08003a5c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
 8003a66:	460b      	mov	r3, r1
 8003a68:	71bb      	strb	r3, [r7, #6]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8003a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	db41      	blt.n	8003afe <OLED_DrawPoint+0xa2>
 8003a7a:	79bb      	ldrb	r3, [r7, #6]
 8003a7c:	2b3f      	cmp	r3, #63	; 0x3f
 8003a7e:	d83e      	bhi.n	8003afe <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003a80:	79bb      	ldrb	r3, [r7, #6]
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f1c3 0307 	rsb	r3, r3, #7
 8003a8a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003a8c:	79bb      	ldrb	r3, [r7, #6]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003a94:	7b7b      	ldrb	r3, [r7, #13]
 8003a96:	f1c3 0307 	rsb	r3, r3, #7
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8003aa2:	797b      	ldrb	r3, [r7, #5]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d012      	beq.n	8003ace <OLED_DrawPoint+0x72>
 8003aa8:	79fa      	ldrb	r2, [r7, #7]
 8003aaa:	7bbb      	ldrb	r3, [r7, #14]
 8003aac:	4917      	ldr	r1, [pc, #92]	; (8003b0c <OLED_DrawPoint+0xb0>)
 8003aae:	00d2      	lsls	r2, r2, #3
 8003ab0:	440a      	add	r2, r1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	7818      	ldrb	r0, [r3, #0]
 8003ab6:	79fa      	ldrb	r2, [r7, #7]
 8003ab8:	7bbb      	ldrb	r3, [r7, #14]
 8003aba:	7bf9      	ldrb	r1, [r7, #15]
 8003abc:	4301      	orrs	r1, r0
 8003abe:	b2c8      	uxtb	r0, r1
 8003ac0:	4912      	ldr	r1, [pc, #72]	; (8003b0c <OLED_DrawPoint+0xb0>)
 8003ac2:	00d2      	lsls	r2, r2, #3
 8003ac4:	440a      	add	r2, r1
 8003ac6:	4413      	add	r3, r2
 8003ac8:	4602      	mov	r2, r0
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e018      	b.n	8003b00 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003ace:	79fa      	ldrb	r2, [r7, #7]
 8003ad0:	7bbb      	ldrb	r3, [r7, #14]
 8003ad2:	490e      	ldr	r1, [pc, #56]	; (8003b0c <OLED_DrawPoint+0xb0>)
 8003ad4:	00d2      	lsls	r2, r2, #3
 8003ad6:	440a      	add	r2, r1
 8003ad8:	4413      	add	r3, r2
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b25a      	sxtb	r2, r3
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	b259      	sxtb	r1, r3
 8003aea:	79fa      	ldrb	r2, [r7, #7]
 8003aec:	7bbb      	ldrb	r3, [r7, #14]
 8003aee:	b2c8      	uxtb	r0, r1
 8003af0:	4906      	ldr	r1, [pc, #24]	; (8003b0c <OLED_DrawPoint+0xb0>)
 8003af2:	00d2      	lsls	r2, r2, #3
 8003af4:	440a      	add	r2, r1
 8003af6:	4413      	add	r3, r2
 8003af8:	4602      	mov	r2, r0
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	e000      	b.n	8003b00 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003afe:	bf00      	nop
}
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	200005c0 	.word	0x200005c0

08003b10 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4604      	mov	r4, r0
 8003b18:	4608      	mov	r0, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	71fb      	strb	r3, [r7, #7]
 8003b22:	4603      	mov	r3, r0
 8003b24:	71bb      	strb	r3, [r7, #6]
 8003b26:	460b      	mov	r3, r1
 8003b28:	717b      	strb	r3, [r7, #5]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8003b2e:	79bb      	ldrb	r3, [r7, #6]
 8003b30:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8003b32:	797b      	ldrb	r3, [r7, #5]
 8003b34:	3b20      	subs	r3, #32
 8003b36:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73bb      	strb	r3, [r7, #14]
 8003b3c:	e04d      	b.n	8003bda <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8003b3e:	793b      	ldrb	r3, [r7, #4]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d10b      	bne.n	8003b5c <OLED_ShowChar+0x4c>
 8003b44:	797a      	ldrb	r2, [r7, #5]
 8003b46:	7bb9      	ldrb	r1, [r7, #14]
 8003b48:	4828      	ldr	r0, [pc, #160]	; (8003bec <OLED_ShowChar+0xdc>)
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4403      	add	r3, r0
 8003b54:	440b      	add	r3, r1
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	73fb      	strb	r3, [r7, #15]
 8003b5a:	e007      	b.n	8003b6c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003b5c:	797a      	ldrb	r2, [r7, #5]
 8003b5e:	7bbb      	ldrb	r3, [r7, #14]
 8003b60:	4923      	ldr	r1, [pc, #140]	; (8003bf0 <OLED_ShowChar+0xe0>)
 8003b62:	0112      	lsls	r2, r2, #4
 8003b64:	440a      	add	r2, r1
 8003b66:	4413      	add	r3, r2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	737b      	strb	r3, [r7, #13]
 8003b70:	e02d      	b.n	8003bce <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	da07      	bge.n	8003b8a <OLED_ShowChar+0x7a>
 8003b7a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003b7e:	79b9      	ldrb	r1, [r7, #6]
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff ff6a 	bl	8003a5c <OLED_DrawPoint>
 8003b88:	e00c      	b.n	8003ba4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8003b8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	79b9      	ldrb	r1, [r7, #6]
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ff5c 	bl	8003a5c <OLED_DrawPoint>
			temp<<=1;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
			y++;
 8003baa:	79bb      	ldrb	r3, [r7, #6]
 8003bac:	3301      	adds	r3, #1
 8003bae:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003bb0:	79ba      	ldrb	r2, [r7, #6]
 8003bb2:	7b3b      	ldrb	r3, [r7, #12]
 8003bb4:	1ad2      	subs	r2, r2, r3
 8003bb6:	793b      	ldrb	r3, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d105      	bne.n	8003bc8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003bbc:	7b3b      	ldrb	r3, [r7, #12]
 8003bbe:	71bb      	strb	r3, [r7, #6]
				x++;
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	71fb      	strb	r3, [r7, #7]
				break;
 8003bc6:	e005      	b.n	8003bd4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8003bc8:	7b7b      	ldrb	r3, [r7, #13]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	737b      	strb	r3, [r7, #13]
 8003bce:	7b7b      	ldrb	r3, [r7, #13]
 8003bd0:	2b07      	cmp	r3, #7
 8003bd2:	d9ce      	bls.n	8003b72 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8003bd4:	7bbb      	ldrb	r3, [r7, #14]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	73bb      	strb	r3, [r7, #14]
 8003bda:	7bba      	ldrb	r2, [r7, #14]
 8003bdc:	793b      	ldrb	r3, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d3ad      	bcc.n	8003b3e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd90      	pop	{r4, r7, pc}
 8003bec:	080111f4 	.word	0x080111f4
 8003bf0:	08011668 	.word	0x08011668

08003bf4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	603a      	str	r2, [r7, #0]
 8003bfe:	71fb      	strb	r3, [r7, #7]
 8003c00:	460b      	mov	r3, r1
 8003c02:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003c04:	e01f      	b.n	8003c46 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	2b7a      	cmp	r3, #122	; 0x7a
 8003c0a:	d904      	bls.n	8003c16 <OLED_ShowString+0x22>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	71fb      	strb	r3, [r7, #7]
 8003c10:	79bb      	ldrb	r3, [r7, #6]
 8003c12:	3310      	adds	r3, #16
 8003c14:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8003c16:	79bb      	ldrb	r3, [r7, #6]
 8003c18:	2b3a      	cmp	r3, #58	; 0x3a
 8003c1a:	d905      	bls.n	8003c28 <OLED_ShowString+0x34>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	71fb      	strb	r3, [r7, #7]
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	71bb      	strb	r3, [r7, #6]
 8003c24:	f7ff fef4 	bl	8003a10 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781a      	ldrb	r2, [r3, #0]
 8003c2c:	79b9      	ldrb	r1, [r7, #6]
 8003c2e:	79f8      	ldrb	r0, [r7, #7]
 8003c30:	2301      	movs	r3, #1
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	230c      	movs	r3, #12
 8003c36:	f7ff ff6b 	bl	8003b10 <OLED_ShowChar>
        x+=8;
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	71fb      	strb	r3, [r7, #7]
        p++;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	3301      	adds	r3, #1
 8003c44:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1db      	bne.n	8003c06 <OLED_ShowString+0x12>
    }  
}	 
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <OLED_Init>:

void OLED_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003c5c:	f003 f85c 	bl	8006d18 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003c60:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <OLED_Init+0x110>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a40      	ldr	r2, [pc, #256]	; (8003d68 <OLED_Init+0x110>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	4b3e      	ldr	r3, [pc, #248]	; (8003d68 <OLED_Init+0x110>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a3d      	ldr	r2, [pc, #244]	; (8003d68 <OLED_Init+0x110>)
 8003c72:	f023 0304 	bic.w	r3, r3, #4
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8003c78:	f003 f862 	bl	8006d40 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	483a      	ldr	r0, [pc, #232]	; (8003d6c <OLED_Init+0x114>)
 8003c82:	f002 f80b 	bl	8005c9c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003c86:	2064      	movs	r0, #100	; 0x64
 8003c88:	f001 f8d8 	bl	8004e3c <HAL_Delay>
	OLED_RST_Set();
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	2180      	movs	r1, #128	; 0x80
 8003c90:	4836      	ldr	r0, [pc, #216]	; (8003d6c <OLED_Init+0x114>)
 8003c92:	f002 f803 	bl	8005c9c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8003c96:	2100      	movs	r1, #0
 8003c98:	20ae      	movs	r0, #174	; 0xae
 8003c9a:	f7ff fe37 	bl	800390c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	20d5      	movs	r0, #213	; 0xd5
 8003ca2:	f7ff fe33 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	2050      	movs	r0, #80	; 0x50
 8003caa:	f7ff fe2f 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003cae:	2100      	movs	r1, #0
 8003cb0:	20a8      	movs	r0, #168	; 0xa8
 8003cb2:	f7ff fe2b 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	203f      	movs	r0, #63	; 0x3f
 8003cba:	f7ff fe27 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	20d3      	movs	r0, #211	; 0xd3
 8003cc2:	f7ff fe23 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	2000      	movs	r0, #0
 8003cca:	f7ff fe1f 	bl	800390c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003cce:	2100      	movs	r1, #0
 8003cd0:	2040      	movs	r0, #64	; 0x40
 8003cd2:	f7ff fe1b 	bl	800390c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	208d      	movs	r0, #141	; 0x8d
 8003cda:	f7ff fe17 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003cde:	2100      	movs	r1, #0
 8003ce0:	2014      	movs	r0, #20
 8003ce2:	f7ff fe13 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	2020      	movs	r0, #32
 8003cea:	f7ff fe0f 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003cee:	2100      	movs	r1, #0
 8003cf0:	2002      	movs	r0, #2
 8003cf2:	f7ff fe0b 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	20a1      	movs	r0, #161	; 0xa1
 8003cfa:	f7ff fe07 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003cfe:	2100      	movs	r1, #0
 8003d00:	20c0      	movs	r0, #192	; 0xc0
 8003d02:	f7ff fe03 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8003d06:	2100      	movs	r1, #0
 8003d08:	20da      	movs	r0, #218	; 0xda
 8003d0a:	f7ff fdff 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003d0e:	2100      	movs	r1, #0
 8003d10:	2012      	movs	r0, #18
 8003d12:	f7ff fdfb 	bl	800390c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8003d16:	2100      	movs	r1, #0
 8003d18:	2081      	movs	r0, #129	; 0x81
 8003d1a:	f7ff fdf7 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8003d1e:	2100      	movs	r1, #0
 8003d20:	20ef      	movs	r0, #239	; 0xef
 8003d22:	f7ff fdf3 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8003d26:	2100      	movs	r1, #0
 8003d28:	20d9      	movs	r0, #217	; 0xd9
 8003d2a:	f7ff fdef 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003d2e:	2100      	movs	r1, #0
 8003d30:	20f1      	movs	r0, #241	; 0xf1
 8003d32:	f7ff fdeb 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8003d36:	2100      	movs	r1, #0
 8003d38:	20db      	movs	r0, #219	; 0xdb
 8003d3a:	f7ff fde7 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003d3e:	2100      	movs	r1, #0
 8003d40:	2030      	movs	r0, #48	; 0x30
 8003d42:	f7ff fde3 	bl	800390c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8003d46:	2100      	movs	r1, #0
 8003d48:	20a4      	movs	r0, #164	; 0xa4
 8003d4a:	f7ff fddf 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8003d4e:	2100      	movs	r1, #0
 8003d50:	20a6      	movs	r0, #166	; 0xa6
 8003d52:	f7ff fddb 	bl	800390c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8003d56:	2100      	movs	r1, #0
 8003d58:	20af      	movs	r0, #175	; 0xaf
 8003d5a:	f7ff fdd7 	bl	800390c <OLED_WR_Byte>
	OLED_Clear(); 
 8003d5e:	f7ff fe57 	bl	8003a10 <OLED_Clear>
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40021000 	.word	0x40021000

08003d70 <pid_reset>:
#include "pid.h"

void pid_reset(PidDef *def) {
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	def->errorArea = 0;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	605a      	str	r2, [r3, #4]
	def->errorOld = 0;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <pid_init>:

void pid_init(PidDef *def, float Kp, float Ki, float Kd) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003da0:	edc7 0a01 	vstr	s1, [r7, #4]
 8003da4:	ed87 1a00 	vstr	s2, [r7]
	pid_reset(def);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7ff ffe1 	bl	8003d70 <pid_reset>

	def->Kp = Kp;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	609a      	str	r2, [r3, #8]
	def->Ki = Ki;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	60da      	str	r2, [r3, #12]
	def->Kd = Kd;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	611a      	str	r2, [r3, #16]
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <pid_adjust>:

float pid_adjust(PidDef *def, float error, float scale) {
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003dd4:	edc7 0a01 	vstr	s1, [r7, #4]
	def->errorArea += error;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	ed93 7a01 	vldr	s14, [r3, #4]
 8003dde:	edd7 7a02 	vldr	s15, [r7, #8]
 8003de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	edc3 7a01 	vstr	s15, [r3, #4]
	float errorRate = (error - def->errorOld);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	edd3 7a00 	vldr	s15, [r3]
 8003df2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dfa:	edc7 7a05 	vstr	s15, [r7, #20]
	def->errorOld = error;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	601a      	str	r2, [r3, #0]

	return error * def->Kp * scale + def->errorArea * def->Ki * scale + errorRate * def->Kd * scale;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	ed93 7a02 	vldr	s14, [r3, #8]
 8003e0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e12:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	edd3 6a04 	vldr	s13, [r3, #16]
 8003e3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e44:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003e50:	eeb0 0a67 	vmov.f32	s0, s15
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <lpf>:
static const float a_accel = 0.8;
static const float a_mag = 0.9;
static float magOld[2];
static float headingRaw, headingOld;

static float lpf(float a, float old, float new) {
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e68:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e6c:	ed87 1a01 	vstr	s2, [r7, #4]
	return a * old + (1 - a) * new;
 8003e70:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e74:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e80:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e88:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e90:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003e94:	eeb0 0a67 	vmov.f32	s0, s15
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	0000      	movs	r0, r0
 8003ea4:	0000      	movs	r0, r0
	...

08003ea8 <read_mag_angle>:
static I2C_HandleTypeDef *hi2c_ptr;
static ADC_HandleTypeDef *hadc_ptr;
static TIM_HandleTypeDef *hic_ptr;
static Sensors *sensors_ptr;

static float read_mag_angle() {
 8003ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
	//Calculate angle from X and Y
	float mag[2];
	ICM20948_readMagnetometer_XY(hi2c_ptr, mag);
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <read_mag_angle+0x100>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	1d3a      	adds	r2, r7, #4
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fd fb59 	bl	8001570 <ICM20948_readMagnetometer_XY>
	for (uint8_t i = 0; i < 2; i++) {
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
 8003ec2:	e02d      	b.n	8003f20 <read_mag_angle+0x78>
		mag[i] = lpf(a_mag, magOld[i], mag[i]);
 8003ec4:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003fac <read_mag_angle+0x104>
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	4a39      	ldr	r2, [pc, #228]	; (8003fb0 <read_mag_angle+0x108>)
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	edd3 7a00 	vldr	s15, [r3]
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	3310      	adds	r3, #16
 8003eda:	443b      	add	r3, r7
 8003edc:	3b0c      	subs	r3, #12
 8003ede:	ed93 7a00 	vldr	s14, [r3]
 8003ee2:	7bfe      	ldrb	r6, [r7, #15]
 8003ee4:	eeb0 1a47 	vmov.f32	s2, s14
 8003ee8:	eef0 0a67 	vmov.f32	s1, s15
 8003eec:	eeb0 0a66 	vmov.f32	s0, s13
 8003ef0:	f7ff ffb5 	bl	8003e5e <lpf>
 8003ef4:	eef0 7a40 	vmov.f32	s15, s0
 8003ef8:	00b3      	lsls	r3, r6, #2
 8003efa:	3310      	adds	r3, #16
 8003efc:	443b      	add	r3, r7
 8003efe:	3b0c      	subs	r3, #12
 8003f00:	edc3 7a00 	vstr	s15, [r3]
		magOld[i] = mag[i];
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	0092      	lsls	r2, r2, #2
 8003f0a:	3210      	adds	r2, #16
 8003f0c:	443a      	add	r2, r7
 8003f0e:	3a0c      	subs	r2, #12
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	4927      	ldr	r1, [pc, #156]	; (8003fb0 <read_mag_angle+0x108>)
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 2; i++) {
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d9ce      	bls.n	8003ec4 <read_mag_angle+0x1c>
	}
	magcal_adjust(mag);
 8003f26:	1d3b      	adds	r3, r7, #4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe f9df 	bl	80022ec <magcal_adjust>
	return -atan2(mag[1], mag[0]) * 180 / M_PI;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fc fb09 	bl	8000548 <__aeabi_f2d>
 8003f36:	4680      	mov	r8, r0
 8003f38:	4689      	mov	r9, r1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fc fb03 	bl	8000548 <__aeabi_f2d>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	ec43 2b11 	vmov	d1, r2, r3
 8003f4a:	ec49 8b10 	vmov	d0, r8, r9
 8003f4e:	f00a fd57 	bl	800ea00 <atan2>
 8003f52:	ec53 2b10 	vmov	r2, r3, d0
 8003f56:	4614      	mov	r4, r2
 8003f58:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <read_mag_angle+0x10c>)
 8003f62:	4620      	mov	r0, r4
 8003f64:	4629      	mov	r1, r5
 8003f66:	f7fc fb47 	bl	80005f8 <__aeabi_dmul>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	a30b      	add	r3, pc, #44	; (adr r3, 8003fa0 <read_mag_angle+0xf8>)
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f7fc fc68 	bl	800084c <__aeabi_ddiv>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	f7fc fe30 	bl	8000be8 <__aeabi_d2f>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	ee07 3a90 	vmov	s15, r3
}
 8003f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f9a:	bf00      	nop
 8003f9c:	f3af 8000 	nop.w
 8003fa0:	54442d18 	.word	0x54442d18
 8003fa4:	400921fb 	.word	0x400921fb
 8003fa8:	200009c8 	.word	0x200009c8
 8003fac:	3f666666 	.word	0x3f666666
 8003fb0:	200009c0 	.word	0x200009c0
 8003fb4:	40668000 	.word	0x40668000

08003fb8 <sensors_init>:

void sensors_init(I2C_HandleTypeDef *i2c_ptr, ADC_HandleTypeDef *adc_ptr, TIM_HandleTypeDef *ic_ptr, Sensors *sens_ptr) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
	hi2c_ptr = i2c_ptr;
 8003fc6:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <sensors_init+0x88>)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6013      	str	r3, [r2, #0]
	hadc_ptr = adc_ptr;
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <sensors_init+0x8c>)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6013      	str	r3, [r2, #0]
	hic_ptr = ic_ptr;
 8003fd2:	4a1d      	ldr	r2, [pc, #116]	; (8004048 <sensors_init+0x90>)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6013      	str	r3, [r2, #0]
	sensors_ptr = sens_ptr;
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	; (800404c <sensors_init+0x94>)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6013      	str	r3, [r2, #0]

	ICM20948_init(hi2c_ptr, ICM_I2C_ADDR, GYRO_SENS, ACCEL_SENS);
 8003fde:	4b18      	ldr	r3, [pc, #96]	; (8004040 <sensors_init+0x88>)
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	f7fd f8e2 	bl	80011b0 <ICM20948_init>
	ICM20948_readMagnetometer_XY(hi2c_ptr, magOld); //pre-load magOld values.
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <sensors_init+0x88>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4917      	ldr	r1, [pc, #92]	; (8004050 <sensors_init+0x98>)
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd fabc 	bl	8001570 <ICM20948_readMagnetometer_XY>

	HAL_TIM_IC_Start_IT(ic_ptr, US_IC_CHANNEL);
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f003 fdb0 	bl	8007b60 <HAL_TIM_IC_Start_IT>

	sens_ptr->gyroZ_bias = 0;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	61da      	str	r2, [r3, #28]
	sens_ptr->accel_bias[0] = sens_ptr->accel_bias[1] = sens_ptr->accel_bias[2] = 0;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	629a      	str	r2, [r3, #40]	; 0x28
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	625a      	str	r2, [r3, #36]	; 0x24
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	621a      	str	r2, [r3, #32]

	float mag_angle = read_mag_angle();
 8004020:	f7ff ff42 	bl	8003ea8 <read_mag_angle>
 8004024:	ed87 0a05 	vstr	s0, [r7, #20]
	sens_ptr->heading_bias = mag_angle;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	62da      	str	r2, [r3, #44]	; 0x2c
	angle_init(mag_angle);
 800402e:	ed97 0a05 	vldr	s0, [r7, #20]
 8004032:	f7fd faed 	bl	8001610 <angle_init>
}
 8004036:	bf00      	nop
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	200009c8 	.word	0x200009c8
 8004044:	200009cc 	.word	0x200009cc
 8004048:	200009d0 	.word	0x200009d0
 800404c:	200009d4 	.word	0x200009d4
 8004050:	200009c0 	.word	0x200009c0

08004054 <sensors_us_trig>:

void sensors_us_trig() {
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
	US_TRIG_CLR();
 8004058:	2200      	movs	r2, #0
 800405a:	2180      	movs	r1, #128	; 0x80
 800405c:	480a      	ldr	r0, [pc, #40]	; (8004088 <sensors_us_trig+0x34>)
 800405e:	f001 fe1d 	bl	8005c9c <HAL_GPIO_WritePin>
	delay_us_wait(5);
 8004062:	2005      	movs	r0, #5
 8004064:	f7fd ffc0 	bl	8001fe8 <delay_us_wait>

	//1. 10us pulse
	US_TRIG_SET();
 8004068:	2201      	movs	r2, #1
 800406a:	2180      	movs	r1, #128	; 0x80
 800406c:	4806      	ldr	r0, [pc, #24]	; (8004088 <sensors_us_trig+0x34>)
 800406e:	f001 fe15 	bl	8005c9c <HAL_GPIO_WritePin>
	delay_us_wait(10);
 8004072:	200a      	movs	r0, #10
 8004074:	f7fd ffb8 	bl	8001fe8 <delay_us_wait>
	US_TRIG_CLR();
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	4802      	ldr	r0, [pc, #8]	; (8004088 <sensors_us_trig+0x34>)
 800407e:	f001 fe0d 	bl	8005c9c <HAL_GPIO_WritePin>
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40020c00 	.word	0x40020c00

0800408c <sensors_read_usDist>:

void sensors_read_usDist(float pulse_s) {
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	ed87 0a01 	vstr	s0, [r7, #4]
	sensors_ptr->usDist = lpf(a_usDist, sensors_ptr->usDist, pulse_s * 34300 / 2);
 8004096:	eddf 5a11 	vldr	s11, [pc, #68]	; 80040dc <sensors_read_usDist+0x50>
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <sensors_read_usDist+0x54>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	ed93 7a01 	vldr	s14, [r3, #4]
 80040a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80040a6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80040e4 <sensors_read_usDist+0x58>
 80040aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80040ae:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80040b2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <sensors_read_usDist+0x54>)
 80040b8:	681c      	ldr	r4, [r3, #0]
 80040ba:	eeb0 1a66 	vmov.f32	s2, s13
 80040be:	eef0 0a47 	vmov.f32	s1, s14
 80040c2:	eeb0 0a65 	vmov.f32	s0, s11
 80040c6:	f7ff feca 	bl	8003e5e <lpf>
 80040ca:	eef0 7a40 	vmov.f32	s15, s0
 80040ce:	edc4 7a01 	vstr	s15, [r4, #4]
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}
 80040da:	bf00      	nop
 80040dc:	3f0ccccd 	.word	0x3f0ccccd
 80040e0:	200009d4 	.word	0x200009d4
 80040e4:	4705fc00 	.word	0x4705fc00

080040e8 <sensors_read_irDist>:

void sensors_read_irDist() {
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
	HAL_ADC_Start(hadc_ptr);
 80040ee:	4b2c      	ldr	r3, [pc, #176]	; (80041a0 <sensors_read_irDist+0xb8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 ff0a 	bl	8004f0c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc_ptr, HAL_MAX_DELAY);
 80040f8:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <sensors_read_irDist+0xb8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004100:	4618      	mov	r0, r3
 8004102:	f000 ffd5 	bl	80050b0 <HAL_ADC_PollForConversion>

	uint16_t value = (uint16_t) HAL_ADC_GetValue(hadc_ptr);
 8004106:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <sensors_read_irDist+0xb8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f001 f85b 	bl	80051c6 <HAL_ADC_GetValue>
 8004110:	4603      	mov	r3, r0
 8004112:	80fb      	strh	r3, [r7, #6]
	float dist = 6.3028 / pow(((float) value) / 4095, 1.226);
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80041a4 <sensors_read_irDist+0xbc>
 8004122:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004126:	ee16 0a90 	vmov	r0, s13
 800412a:	f7fc fa0d 	bl	8000548 <__aeabi_f2d>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8004190 <sensors_read_irDist+0xa8>
 8004136:	ec43 2b10 	vmov	d0, r2, r3
 800413a:	f00a fc63 	bl	800ea04 <pow>
 800413e:	ec53 2b10 	vmov	r2, r3, d0
 8004142:	a115      	add	r1, pc, #84	; (adr r1, 8004198 <sensors_read_irDist+0xb0>)
 8004144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004148:	f7fc fb80 	bl	800084c <__aeabi_ddiv>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	f7fc fd48 	bl	8000be8 <__aeabi_d2f>
 8004158:	4603      	mov	r3, r0
 800415a:	603b      	str	r3, [r7, #0]
	sensors_ptr->irDist = lpf(a_irDist, sensors_ptr->irDist, dist);
 800415c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80041a8 <sensors_read_irDist+0xc0>
 8004160:	4b12      	ldr	r3, [pc, #72]	; (80041ac <sensors_read_irDist+0xc4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	edd3 7a00 	vldr	s15, [r3]
 8004168:	4b10      	ldr	r3, [pc, #64]	; (80041ac <sensors_read_irDist+0xc4>)
 800416a:	681c      	ldr	r4, [r3, #0]
 800416c:	ed97 1a00 	vldr	s2, [r7]
 8004170:	eef0 0a67 	vmov.f32	s1, s15
 8004174:	eeb0 0a47 	vmov.f32	s0, s14
 8004178:	f7ff fe71 	bl	8003e5e <lpf>
 800417c:	eef0 7a40 	vmov.f32	s15, s0
 8004180:	edc4 7a00 	vstr	s15, [r4]
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bd90      	pop	{r4, r7, pc}
 800418c:	f3af 8000 	nop.w
 8004190:	2d0e5604 	.word	0x2d0e5604
 8004194:	3ff39db2 	.word	0x3ff39db2
 8004198:	3404ea4b 	.word	0x3404ea4b
 800419c:	40193611 	.word	0x40193611
 80041a0:	200009cc 	.word	0x200009cc
 80041a4:	457ff000 	.word	0x457ff000
 80041a8:	3f4ccccd 	.word	0x3f4ccccd
 80041ac:	200009d4 	.word	0x200009d4

080041b0 <sensors_read_gyroZ>:

void sensors_read_gyroZ() {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
	float val;
	ICM20948_readGyroscope_Z(hi2c_ptr, ICM_I2C_ADDR, GYRO_SENS, &val);
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <sensors_read_gyroZ+0x3c>)
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	2200      	movs	r2, #0
 80041bc:	1d3b      	adds	r3, r7, #4
 80041be:	2100      	movs	r1, #0
 80041c0:	f7fd f87a 	bl	80012b8 <ICM20948_readGyroscope_Z>
	sensors_ptr->gyroZ = (val - sensors_ptr->gyroZ_bias) / 1000; //convert to ms
 80041c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <sensors_read_gyroZ+0x40>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80041d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <sensors_read_gyroZ+0x40>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	eddf 6a06 	vldr	s13, [pc, #24]	; 80041f4 <sensors_read_gyroZ+0x44>
 80041dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041e0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	200009c8 	.word	0x200009c8
 80041f0:	200009d4 	.word	0x200009d4
 80041f4:	447a0000 	.word	0x447a0000

080041f8 <sensors_read_accel>:


void sensors_read_accel() {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
	float accel_new[3];
	ICM20948_readAccelerometer_all(hi2c_ptr, ICM_I2C_ADDR, ACCEL_SENS, accel_new);
 80041fe:	4b19      	ldr	r3, [pc, #100]	; (8004264 <sensors_read_accel+0x6c>)
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	2200      	movs	r2, #0
 8004204:	463b      	mov	r3, r7
 8004206:	2100      	movs	r1, #0
 8004208:	f7fd f8d6 	bl	80013b8 <ICM20948_readAccelerometer_all>
	for (int i = 0; i < 3; i++) {
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	e020      	b.n	8004254 <sensors_read_accel+0x5c>
		sensors_ptr->accel[i] = (accel_new[i] - sensors_ptr->accel_bias[i]) * GRAVITY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	3310      	adds	r3, #16
 8004218:	443b      	add	r3, r7
 800421a:	3b10      	subs	r3, #16
 800421c:	ed93 7a00 	vldr	s14, [r3]
 8004220:	4b11      	ldr	r3, [pc, #68]	; (8004268 <sensors_read_accel+0x70>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3308      	adds	r3, #8
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	edd3 7a00 	vldr	s15, [r3]
 8004230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <sensors_read_accel+0x70>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800426c <sensors_read_accel+0x74>
 800423c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3302      	adds	r3, #2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	3304      	adds	r3, #4
 800424a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++) {
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3301      	adds	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b02      	cmp	r3, #2
 8004258:	dddb      	ble.n	8004212 <sensors_read_accel+0x1a>
	}
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200009c8 	.word	0x200009c8
 8004268:	200009d4 	.word	0x200009d4
 800426c:	3a8089a8 	.word	0x3a8089a8

08004270 <sensors_read_heading>:

void sensors_read_heading(float msElapsed, float gyroZ) {
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	ed87 0a01 	vstr	s0, [r7, #4]
 800427a:	edc7 0a00 	vstr	s1, [r7]
	sensors_ptr->heading = angle_diff_180(
 800427e:	f7ff fe13 	bl	8003ea8 <read_mag_angle>
 8004282:	eef0 7a40 	vmov.f32	s15, s0
 8004286:	eeb0 1a67 	vmov.f32	s2, s15
 800428a:	edd7 0a00 	vldr	s1, [r7]
 800428e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004292:	f7fd f9df 	bl	8001654 <angle_get>
 8004296:	eeb0 7a40 	vmov.f32	s14, s0
		angle_get(msElapsed, gyroZ, read_mag_angle()),
		sensors_ptr->heading_bias
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <sensors_read_heading+0x54>)
 800429c:	681b      	ldr	r3, [r3, #0]
	sensors_ptr->heading = angle_diff_180(
 800429e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <sensors_read_heading+0x54>)
 80042a4:	681c      	ldr	r4, [r3, #0]
 80042a6:	eef0 0a67 	vmov.f32	s1, s15
 80042aa:	eeb0 0a47 	vmov.f32	s0, s14
 80042ae:	f7fd fdff 	bl	8001eb0 <angle_diff_180>
 80042b2:	eef0 7a40 	vmov.f32	s15, s0
 80042b6:	edc4 7a06 	vstr	s15, [r4, #24]
	);
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd90      	pop	{r4, r7, pc}
 80042c2:	bf00      	nop
 80042c4:	200009d4 	.word	0x200009d4

080042c8 <sensors_set_bias>:

void sensors_set_bias(uint16_t count) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08e      	sub	sp, #56	; 0x38
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t j;
	float gyroZTotal = 0, gyroZ = 0,
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
		accelTotal[3] = {0}, accel[3],
 80042de:	f107 0318 	add.w	r3, r7, #24
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	609a      	str	r2, [r3, #8]
		headingTotal = 0;
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (i = 0; i < count; i++) {
 80042f0:	2300      	movs	r3, #0
 80042f2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80042f4:	e04b      	b.n	800438e <sensors_set_bias+0xc6>
		ICM20948_readGyroscope_Z(hi2c_ptr, ICM_I2C_ADDR, GYRO_SENS, &gyroZ); //gyroscope bias
 80042f6:	4b4f      	ldr	r3, [pc, #316]	; (8004434 <sensors_set_bias+0x16c>)
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004300:	2100      	movs	r1, #0
 8004302:	f7fc ffd9 	bl	80012b8 <ICM20948_readGyroscope_Z>
		gyroZTotal += gyroZ;
 8004306:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800430a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800430e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004312:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		ICM20948_readAccelerometer_all(hi2c_ptr, ICM_I2C_ADDR, ACCEL_SENS, accel); //accelerometer bias
 8004316:	4b47      	ldr	r3, [pc, #284]	; (8004434 <sensors_set_bias+0x16c>)
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	2200      	movs	r2, #0
 800431c:	f107 030c 	add.w	r3, r7, #12
 8004320:	2100      	movs	r1, #0
 8004322:	f7fd f849 	bl	80013b8 <ICM20948_readAccelerometer_all>
		for (j = 0; j < 3; j++) accelTotal[j] += accel[j];
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800432c:	e01e      	b.n	800436c <sensors_set_bias+0xa4>
 800432e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	3338      	adds	r3, #56	; 0x38
 8004336:	443b      	add	r3, r7
 8004338:	3b20      	subs	r3, #32
 800433a:	ed93 7a00 	vldr	s14, [r3]
 800433e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	3338      	adds	r3, #56	; 0x38
 8004346:	443b      	add	r3, r7
 8004348:	3b2c      	subs	r3, #44	; 0x2c
 800434a:	edd3 7a00 	vldr	s15, [r3]
 800434e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	3338      	adds	r3, #56	; 0x38
 800435a:	443b      	add	r3, r7
 800435c:	3b20      	subs	r3, #32
 800435e:	edc3 7a00 	vstr	s15, [r3]
 8004362:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004366:	3301      	adds	r3, #1
 8004368:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800436c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004370:	2b02      	cmp	r3, #2
 8004372:	d9dc      	bls.n	800432e <sensors_set_bias+0x66>

		headingTotal += read_mag_angle(); //heading bias
 8004374:	f7ff fd98 	bl	8003ea8 <read_mag_angle>
 8004378:	eeb0 7a40 	vmov.f32	s14, s0
 800437c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004384:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for (i = 0; i < count; i++) {
 8004388:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800438a:	3301      	adds	r3, #1
 800438c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800438e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	429a      	cmp	r2, r3
 8004394:	d3af      	bcc.n	80042f6 <sensors_set_bias+0x2e>
	}

	sensors_ptr->gyroZ_bias = gyroZTotal / count;
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	ee07 3a90 	vmov	s15, r3
 800439c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <sensors_set_bias+0x170>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80043a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ac:	edc3 7a07 	vstr	s15, [r3, #28]

	for (i = 0; i < 3; i++) sensors_ptr->accel_bias[i] = accelTotal[i] / count;
 80043b0:	2300      	movs	r3, #0
 80043b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80043b4:	e018      	b.n	80043e8 <sensors_set_bias+0x120>
 80043b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	3338      	adds	r3, #56	; 0x38
 80043bc:	443b      	add	r3, r7
 80043be:	3b20      	subs	r3, #32
 80043c0:	edd3 6a00 	vldr	s13, [r3]
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043ce:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <sensors_set_bias+0x170>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043d8:	3308      	adds	r3, #8
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	edc3 7a00 	vstr	s15, [r3]
 80043e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043e4:	3301      	adds	r3, #1
 80043e6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80043e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d9e3      	bls.n	80043b6 <sensors_set_bias+0xee>
	sensors_ptr->accel_bias[2] -= GRAVITY; //normally z accelerometer should read gravity.
 80043ee:	4b12      	ldr	r3, [pc, #72]	; (8004438 <sensors_set_bias+0x170>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80043f6:	4b10      	ldr	r3, [pc, #64]	; (8004438 <sensors_set_bias+0x170>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800443c <sensors_set_bias+0x174>
 80043fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004402:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	float heading_bias = headingTotal / count;
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004410:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8004414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004418:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	sensors_ptr->heading_bias = heading_bias;
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <sensors_set_bias+0x170>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c
	angle_reset(heading_bias);
 8004424:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004428:	f7fd f900 	bl	800162c <angle_reset>
}
 800442c:	bf00      	nop
 800442e:	3738      	adds	r7, #56	; 0x38
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	200009c8 	.word	0x200009c8
 8004438:	200009d4 	.word	0x200009d4
 800443c:	3a8089a8 	.word	0x3a8089a8

08004440 <servo_init>:
#include "servo.h"

static TIM_HandleTypeDef *pwm_tim;

void servo_init(TIM_HandleTypeDef *pwm) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	pwm_tim = pwm;
 8004448:	4a05      	ldr	r2, [pc, #20]	; (8004460 <servo_init+0x20>)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm, SERVO_PWM_CHANNEL);
 800444e:	2100      	movs	r1, #0
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f003 fa63 	bl	800791c <HAL_TIM_PWM_Start>
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	200009d8 	.word	0x200009d8

08004464 <setServoVal>:

static void setServoVal(uint32_t val) {
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	pwm_tim->Instance->CCR1 = val;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <setServoVal+0x20>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	200009d8 	.word	0x200009d8

08004488 <servo_setAngle>:

void servo_setAngle(float angle) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	ed87 0a01 	vstr	s0, [r7, #4]
	//clamp angle to within width.
	if (angle < -SERVO_WIDTH) angle = -SERVO_WIDTH;
 8004492:	edd7 7a01 	vldr	s15, [r7, #4]
 8004496:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 800449a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a2:	d502      	bpl.n	80044aa <servo_setAngle+0x22>
 80044a4:	4b21      	ldr	r3, [pc, #132]	; (800452c <servo_setAngle+0xa4>)
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	e00a      	b.n	80044c0 <servo_setAngle+0x38>
	else if (angle > SERVO_WIDTH) angle = SERVO_WIDTH;
 80044aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80044ae:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80044b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ba:	dd01      	ble.n	80044c0 <servo_setAngle+0x38>
 80044bc:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <servo_setAngle+0xa8>)
 80044be:	607b      	str	r3, [r7, #4]

	uint32_t val;
	if (angle < 0) {
 80044c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80044c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044cc:	d513      	bpl.n	80044f6 <servo_setAngle+0x6e>
		val = SERVO_PULSE_0 + (SERVO_PULSE_0 - SERVO_PULSE_L) * angle / SERVO_WIDTH;
 80044ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80044d2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004534 <servo_setAngle+0xac>
 80044d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044da:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80044de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044e2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004538 <servo_setAngle+0xb0>
 80044e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ee:	ee17 3a90 	vmov	r3, s15
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e012      	b.n	800451c <servo_setAngle+0x94>
	} else {
		val = SERVO_PULSE_0 + (SERVO_PULSE_R - SERVO_PULSE_0) * angle / SERVO_WIDTH;
 80044f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80044fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800453c <servo_setAngle+0xb4>
 80044fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004502:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8004506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800450a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004538 <servo_setAngle+0xb0>
 800450e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004516:	ee17 3a90 	vmov	r3, s15
 800451a:	60fb      	str	r3, [r7, #12]
	}

	setServoVal(val);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff ffa1 	bl	8004464 <setServoVal>
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	c1c80000 	.word	0xc1c80000
 8004530:	41c80000 	.word	0x41c80000
 8004534:	449c4000 	.word	0x449c4000
 8004538:	45979000 	.word	0x45979000
 800453c:	4512e000 	.word	0x4512e000

08004540 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <HAL_MspInit+0x4c>)
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	4a0f      	ldr	r2, [pc, #60]	; (800458c <HAL_MspInit+0x4c>)
 8004550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004554:	6453      	str	r3, [r2, #68]	; 0x44
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_MspInit+0x4c>)
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800455e:	607b      	str	r3, [r7, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_MspInit+0x4c>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a08      	ldr	r2, [pc, #32]	; (800458c <HAL_MspInit+0x4c>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_MspInit+0x4c>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800

08004590 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	; 0x28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004598:	f107 0314 	add.w	r3, r7, #20
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a17      	ldr	r2, [pc, #92]	; (800460c <HAL_ADC_MspInit+0x7c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d127      	bne.n	8004602 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	4b16      	ldr	r3, [pc, #88]	; (8004610 <HAL_ADC_MspInit+0x80>)
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	4a15      	ldr	r2, [pc, #84]	; (8004610 <HAL_ADC_MspInit+0x80>)
 80045bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c0:	6453      	str	r3, [r2, #68]	; 0x44
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <HAL_ADC_MspInit+0x80>)
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <HAL_ADC_MspInit+0x80>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <HAL_ADC_MspInit+0x80>)
 80045d8:	f043 0304 	orr.w	r3, r3, #4
 80045dc:	6313      	str	r3, [r2, #48]	; 0x30
 80045de:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <HAL_ADC_MspInit+0x80>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = IR_V0_Pin;
 80045ea:	2308      	movs	r3, #8
 80045ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045ee:	2303      	movs	r3, #3
 80045f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_V0_GPIO_Port, &GPIO_InitStruct);
 80045f6:	f107 0314 	add.w	r3, r7, #20
 80045fa:	4619      	mov	r1, r3
 80045fc:	4805      	ldr	r0, [pc, #20]	; (8004614 <HAL_ADC_MspInit+0x84>)
 80045fe:	f001 f9b1 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004602:	bf00      	nop
 8004604:	3728      	adds	r7, #40	; 0x28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40012000 	.word	0x40012000
 8004610:	40023800 	.word	0x40023800
 8004614:	40020800 	.word	0x40020800

08004618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004620:	f107 0314 	add.w	r3, r7, #20
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a19      	ldr	r2, [pc, #100]	; (800469c <HAL_I2C_MspInit+0x84>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d12c      	bne.n	8004694 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <HAL_I2C_MspInit+0x88>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <HAL_I2C_MspInit+0x88>)
 8004644:	f043 0302 	orr.w	r3, r3, #2
 8004648:	6313      	str	r3, [r2, #48]	; 0x30
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <HAL_I2C_MspInit+0x88>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 8004656:	f44f 7340 	mov.w	r3, #768	; 0x300
 800465a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800465c:	2312      	movs	r3, #18
 800465e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004664:	2303      	movs	r3, #3
 8004666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004668:	2304      	movs	r3, #4
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	4619      	mov	r1, r3
 8004672:	480c      	ldr	r0, [pc, #48]	; (80046a4 <HAL_I2C_MspInit+0x8c>)
 8004674:	f001 f976 	bl	8005964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <HAL_I2C_MspInit+0x88>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <HAL_I2C_MspInit+0x88>)
 8004682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004686:	6413      	str	r3, [r2, #64]	; 0x40
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_I2C_MspInit+0x88>)
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004694:	bf00      	nop
 8004696:	3728      	adds	r7, #40	; 0x28
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40005400 	.word	0x40005400
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40020400 	.word	0x40020400

080046a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	; 0x38
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a4d      	ldr	r2, [pc, #308]	; (80047fc <HAL_TIM_Base_MspInit+0x154>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d116      	bne.n	80046f8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046ca:	2300      	movs	r3, #0
 80046cc:	623b      	str	r3, [r7, #32]
 80046ce:	4b4c      	ldr	r3, [pc, #304]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	4a4b      	ldr	r2, [pc, #300]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	6453      	str	r3, [r2, #68]	; 0x44
 80046da:	4b49      	ldr	r3, [pc, #292]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	623b      	str	r3, [r7, #32]
 80046e4:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80046e6:	2200      	movs	r2, #0
 80046e8:	2100      	movs	r1, #0
 80046ea:	201b      	movs	r0, #27
 80046ec:	f001 f871 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80046f0:	201b      	movs	r0, #27
 80046f2:	f001 f88a 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80046f6:	e07d      	b.n	80047f4 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a41      	ldr	r2, [pc, #260]	; (8004804 <HAL_TIM_Base_MspInit+0x15c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d135      	bne.n	800476e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	4a3d      	ldr	r2, [pc, #244]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 800470c:	f043 0304 	orr.w	r3, r3, #4
 8004710:	6413      	str	r3, [r2, #64]	; 0x40
 8004712:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	4b37      	ldr	r3, [pc, #220]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	4a36      	ldr	r2, [pc, #216]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 8004728:	f043 0308 	orr.w	r3, r3, #8
 800472c:	6313      	str	r3, [r2, #48]	; 0x30
 800472e:	4b34      	ldr	r3, [pc, #208]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800473a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004740:	2302      	movs	r3, #2
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004744:	2300      	movs	r3, #0
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004748:	2300      	movs	r3, #0
 800474a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800474c:	2302      	movs	r3, #2
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004754:	4619      	mov	r1, r3
 8004756:	482c      	ldr	r0, [pc, #176]	; (8004808 <HAL_TIM_Base_MspInit+0x160>)
 8004758:	f001 f904 	bl	8005964 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800475c:	2200      	movs	r2, #0
 800475e:	2100      	movs	r1, #0
 8004760:	201e      	movs	r0, #30
 8004762:	f001 f836 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004766:	201e      	movs	r0, #30
 8004768:	f001 f84f 	bl	800580a <HAL_NVIC_EnableIRQ>
}
 800476c:	e042      	b.n	80047f4 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM6)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a26      	ldr	r2, [pc, #152]	; (800480c <HAL_TIM_Base_MspInit+0x164>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d10e      	bne.n	8004796 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 8004782:	f043 0310 	orr.w	r3, r3, #16
 8004786:	6413      	str	r3, [r2, #64]	; 0x40
 8004788:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	697b      	ldr	r3, [r7, #20]
}
 8004794:	e02e      	b.n	80047f4 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM7)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1d      	ldr	r2, [pc, #116]	; (8004810 <HAL_TIM_Base_MspInit+0x168>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d116      	bne.n	80047ce <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	4b16      	ldr	r3, [pc, #88]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	4a15      	ldr	r2, [pc, #84]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 80047aa:	f043 0320 	orr.w	r3, r3, #32
 80047ae:	6413      	str	r3, [r2, #64]	; 0x40
 80047b0:	4b13      	ldr	r3, [pc, #76]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80047bc:	2200      	movs	r2, #0
 80047be:	2100      	movs	r1, #0
 80047c0:	2037      	movs	r0, #55	; 0x37
 80047c2:	f001 f806 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80047c6:	2037      	movs	r0, #55	; 0x37
 80047c8:	f001 f81f 	bl	800580a <HAL_NVIC_EnableIRQ>
}
 80047cc:	e012      	b.n	80047f4 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM8)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a10      	ldr	r2, [pc, #64]	; (8004814 <HAL_TIM_Base_MspInit+0x16c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d10d      	bne.n	80047f4 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 80047de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e0:	4a07      	ldr	r2, [pc, #28]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 80047e2:	f043 0302 	orr.w	r3, r3, #2
 80047e6:	6453      	str	r3, [r2, #68]	; 0x44
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_TIM_Base_MspInit+0x158>)
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
}
 80047f4:	bf00      	nop
 80047f6:	3738      	adds	r7, #56	; 0x38
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40010000 	.word	0x40010000
 8004800:	40023800 	.word	0x40023800
 8004804:	40000800 	.word	0x40000800
 8004808:	40020c00 	.word	0x40020c00
 800480c:	40001000 	.word	0x40001000
 8004810:	40001400 	.word	0x40001400
 8004814:	40010400 	.word	0x40010400

08004818 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08c      	sub	sp, #48	; 0x30
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004820:	f107 031c 	add.w	r3, r7, #28
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004838:	d14b      	bne.n	80048d2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	4b3f      	ldr	r3, [pc, #252]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	4a3e      	ldr	r2, [pc, #248]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	6413      	str	r3, [r2, #64]	; 0x40
 800484a:	4b3c      	ldr	r3, [pc, #240]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	4b38      	ldr	r3, [pc, #224]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	4a37      	ldr	r2, [pc, #220]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	6313      	str	r3, [r2, #48]	; 0x30
 8004866:	4b35      	ldr	r3, [pc, #212]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	4b31      	ldr	r3, [pc, #196]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	4a30      	ldr	r2, [pc, #192]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 800487c:	f043 0302 	orr.w	r3, r3, #2
 8004880:	6313      	str	r3, [r2, #48]	; 0x30
 8004882:	4b2e      	ldr	r3, [pc, #184]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTORA_CH1_Pin;
 800488e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004894:	2302      	movs	r3, #2
 8004896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004898:	2300      	movs	r3, #0
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489c:	2300      	movs	r3, #0
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048a0:	2301      	movs	r3, #1
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH1_GPIO_Port, &GPIO_InitStruct);
 80048a4:	f107 031c 	add.w	r3, r7, #28
 80048a8:	4619      	mov	r1, r3
 80048aa:	4825      	ldr	r0, [pc, #148]	; (8004940 <HAL_TIM_Encoder_MspInit+0x128>)
 80048ac:	f001 f85a 	bl	8005964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTORA_CH2_Pin;
 80048b0:	2308      	movs	r3, #8
 80048b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b4:	2302      	movs	r3, #2
 80048b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048bc:	2300      	movs	r3, #0
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048c0:	2301      	movs	r3, #1
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH2_GPIO_Port, &GPIO_InitStruct);
 80048c4:	f107 031c 	add.w	r3, r7, #28
 80048c8:	4619      	mov	r1, r3
 80048ca:	481e      	ldr	r0, [pc, #120]	; (8004944 <HAL_TIM_Encoder_MspInit+0x12c>)
 80048cc:	f001 f84a 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80048d0:	e030      	b.n	8004934 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <HAL_TIM_Encoder_MspInit+0x130>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d12b      	bne.n	8004934 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	4b16      	ldr	r3, [pc, #88]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	4a15      	ldr	r2, [pc, #84]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 80048e6:	f043 0302 	orr.w	r3, r3, #2
 80048ea:	6413      	str	r3, [r2, #64]	; 0x40
 80048ec:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f8:	2300      	movs	r3, #0
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	4b0f      	ldr	r3, [pc, #60]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	4a0e      	ldr	r2, [pc, #56]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6313      	str	r3, [r2, #48]	; 0x30
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <HAL_TIM_Encoder_MspInit+0x124>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTORB_CH1_Pin|MOTORB_CH2_Pin;
 8004914:	23c0      	movs	r3, #192	; 0xc0
 8004916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004918:	2302      	movs	r3, #2
 800491a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491c:	2300      	movs	r3, #0
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004920:	2300      	movs	r3, #0
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004924:	2302      	movs	r3, #2
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004928:	f107 031c 	add.w	r3, r7, #28
 800492c:	4619      	mov	r1, r3
 800492e:	4804      	ldr	r0, [pc, #16]	; (8004940 <HAL_TIM_Encoder_MspInit+0x128>)
 8004930:	f001 f818 	bl	8005964 <HAL_GPIO_Init>
}
 8004934:	bf00      	nop
 8004936:	3730      	adds	r7, #48	; 0x30
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40023800 	.word	0x40023800
 8004940:	40020000 	.word	0x40020000
 8004944:	40020400 	.word	0x40020400
 8004948:	40000400 	.word	0x40000400

0800494c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	; 0x28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004954:	f107 0314 	add.w	r3, r7, #20
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a24      	ldr	r2, [pc, #144]	; (80049fc <HAL_TIM_MspPostInit+0xb0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d11f      	bne.n	80049ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	4b23      	ldr	r3, [pc, #140]	; (8004a00 <HAL_TIM_MspPostInit+0xb4>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <HAL_TIM_MspPostInit+0xb4>)
 8004978:	f043 0310 	orr.w	r3, r3, #16
 800497c:	6313      	str	r3, [r2, #48]	; 0x30
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <HAL_TIM_MspPostInit+0xb4>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800498a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800498e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004990:	2302      	movs	r3, #2
 8004992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004998:	2300      	movs	r3, #0
 800499a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800499c:	2301      	movs	r3, #1
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80049a0:	f107 0314 	add.w	r3, r7, #20
 80049a4:	4619      	mov	r1, r3
 80049a6:	4817      	ldr	r0, [pc, #92]	; (8004a04 <HAL_TIM_MspPostInit+0xb8>)
 80049a8:	f000 ffdc 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80049ac:	e022      	b.n	80049f4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <HAL_TIM_MspPostInit+0xbc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d11d      	bne.n	80049f4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <HAL_TIM_MspPostInit+0xb4>)
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	4a0f      	ldr	r2, [pc, #60]	; (8004a00 <HAL_TIM_MspPostInit+0xb4>)
 80049c2:	f043 0304 	orr.w	r3, r3, #4
 80049c6:	6313      	str	r3, [r2, #48]	; 0x30
 80049c8:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <HAL_TIM_MspPostInit+0xb4>)
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTORA_PWM_Pin|MOTORB_PWM_Pin;
 80049d4:	23c0      	movs	r3, #192	; 0xc0
 80049d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d8:	2302      	movs	r3, #2
 80049da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e0:	2300      	movs	r3, #0
 80049e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80049e4:	2303      	movs	r3, #3
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	4619      	mov	r1, r3
 80049ee:	4807      	ldr	r0, [pc, #28]	; (8004a0c <HAL_TIM_MspPostInit+0xc0>)
 80049f0:	f000 ffb8 	bl	8005964 <HAL_GPIO_Init>
}
 80049f4:	bf00      	nop
 80049f6:	3728      	adds	r7, #40	; 0x28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40010400 	.word	0x40010400
 8004a0c:	40020800 	.word	0x40020800

08004a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <HAL_UART_MspInit+0x94>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d134      	bne.n	8004a9c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <HAL_UART_MspInit+0x98>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <HAL_UART_MspInit+0x98>)
 8004a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a40:	6413      	str	r3, [r2, #64]	; 0x40
 8004a42:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <HAL_UART_MspInit+0x98>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <HAL_UART_MspInit+0x98>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <HAL_UART_MspInit+0x98>)
 8004a58:	f043 0304 	orr.w	r3, r3, #4
 8004a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a5e:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <HAL_UART_MspInit+0x98>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004a6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a70:	2302      	movs	r3, #2
 8004a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a7c:	2307      	movs	r3, #7
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	4619      	mov	r1, r3
 8004a86:	4809      	ldr	r0, [pc, #36]	; (8004aac <HAL_UART_MspInit+0x9c>)
 8004a88:	f000 ff6c 	bl	8005964 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2100      	movs	r1, #0
 8004a90:	2027      	movs	r0, #39	; 0x27
 8004a92:	f000 fe9e 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004a96:	2027      	movs	r0, #39	; 0x27
 8004a98:	f000 feb7 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004a9c:	bf00      	nop
 8004a9e:	3728      	adds	r7, #40	; 0x28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40004800 	.word	0x40004800
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40020800 	.word	0x40020800

08004ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ab4:	e7fe      	b.n	8004ab4 <NMI_Handler+0x4>

08004ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004aba:	e7fe      	b.n	8004aba <HardFault_Handler+0x4>

08004abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ac0:	e7fe      	b.n	8004ac0 <MemManage_Handler+0x4>

08004ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ac6:	e7fe      	b.n	8004ac6 <BusFault_Handler+0x4>

08004ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004acc:	e7fe      	b.n	8004acc <UsageFault_Handler+0x4>

08004ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004aea:	b480      	push	{r7}
 8004aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004aee:	bf00      	nop
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004afc:	f000 f97e 	bl	8004dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b00:	bf00      	nop
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b08:	4802      	ldr	r0, [pc, #8]	; (8004b14 <TIM1_CC_IRQHandler+0x10>)
 8004b0a:	f003 faa5 	bl	8008058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004b0e:	bf00      	nop
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	200002d4 	.word	0x200002d4

08004b18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004b1c:	4802      	ldr	r0, [pc, #8]	; (8004b28 <TIM4_IRQHandler+0x10>)
 8004b1e:	f003 fa9b 	bl	8008058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004b22:	bf00      	nop
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	200003ac 	.word	0x200003ac

08004b2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004b30:	4802      	ldr	r0, [pc, #8]	; (8004b3c <USART3_IRQHandler+0x10>)
 8004b32:	f004 fc31 	bl	8009398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	200004cc 	.word	0x200004cc

08004b40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004b44:	4802      	ldr	r0, [pc, #8]	; (8004b50 <TIM7_IRQHandler+0x10>)
 8004b46:	f003 fa87 	bl	8008058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	2000043c 	.word	0x2000043c

08004b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return 1;
 8004b58:	2301      	movs	r3, #1
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <_kill>:

int _kill(int pid, int sig)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b6e:	f006 fc23 	bl	800b3b8 <__errno>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2216      	movs	r2, #22
 8004b76:	601a      	str	r2, [r3, #0]
  return -1;
 8004b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_exit>:

void _exit (int status)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ffe7 	bl	8004b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b96:	e7fe      	b.n	8004b96 <_exit+0x12>

08004b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e00a      	b.n	8004bc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004baa:	f3af 8000 	nop.w
 8004bae:	4601      	mov	r1, r0
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	60ba      	str	r2, [r7, #8]
 8004bb6:	b2ca      	uxtb	r2, r1
 8004bb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	dbf0      	blt.n	8004baa <_read+0x12>
  }

  return len;
 8004bc8:	687b      	ldr	r3, [r7, #4]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b086      	sub	sp, #24
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e009      	b.n	8004bf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	60ba      	str	r2, [r7, #8]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	dbf1      	blt.n	8004be4 <_write+0x12>
  }
  return len;
 8004c00:	687b      	ldr	r3, [r7, #4]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <_close>:

int _close(int file)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c32:	605a      	str	r2, [r3, #4]
  return 0;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <_isatty>:

int _isatty(int file)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c4a:	2301      	movs	r3, #1
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c7c:	4a14      	ldr	r2, [pc, #80]	; (8004cd0 <_sbrk+0x5c>)
 8004c7e:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <_sbrk+0x60>)
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c88:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <_sbrk+0x64>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <_sbrk+0x64>)
 8004c92:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <_sbrk+0x68>)
 8004c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <_sbrk+0x64>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d207      	bcs.n	8004cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ca4:	f006 fb88 	bl	800b3b8 <__errno>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	220c      	movs	r2, #12
 8004cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cae:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb2:	e009      	b.n	8004cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cb4:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <_sbrk+0x64>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cba:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <_sbrk+0x64>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	4a05      	ldr	r2, [pc, #20]	; (8004cd8 <_sbrk+0x64>)
 8004cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20020000 	.word	0x20020000
 8004cd4:	00000400 	.word	0x00000400
 8004cd8:	200009dc 	.word	0x200009dc
 8004cdc:	20000b30 	.word	0x20000b30

08004ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <SystemInit+0x20>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	4a05      	ldr	r2, [pc, #20]	; (8004d00 <SystemInit+0x20>)
 8004cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	e000ed00 	.word	0xe000ed00

08004d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004d08:	f7ff ffea 	bl	8004ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d0c:	480c      	ldr	r0, [pc, #48]	; (8004d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d0e:	490d      	ldr	r1, [pc, #52]	; (8004d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d10:	4a0d      	ldr	r2, [pc, #52]	; (8004d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d14:	e002      	b.n	8004d1c <LoopCopyDataInit>

08004d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d1a:	3304      	adds	r3, #4

08004d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d20:	d3f9      	bcc.n	8004d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d22:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d24:	4c0a      	ldr	r4, [pc, #40]	; (8004d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d28:	e001      	b.n	8004d2e <LoopFillZerobss>

08004d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d2c:	3204      	adds	r2, #4

08004d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d30:	d3fb      	bcc.n	8004d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d32:	f006 fb47 	bl	800b3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d36:	f7fd fbef 	bl	8002518 <main>
  bx  lr    
 8004d3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d44:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004d48:	08012320 	.word	0x08012320
  ldr r2, =_sbss
 8004d4c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004d50:	20000b30 	.word	0x20000b30

08004d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d54:	e7fe      	b.n	8004d54 <ADC_IRQHandler>
	...

08004d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d5c:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <HAL_Init+0x40>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0d      	ldr	r2, [pc, #52]	; (8004d98 <HAL_Init+0x40>)
 8004d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_Init+0x40>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a0a      	ldr	r2, [pc, #40]	; (8004d98 <HAL_Init+0x40>)
 8004d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d74:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <HAL_Init+0x40>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <HAL_Init+0x40>)
 8004d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d80:	2003      	movs	r0, #3
 8004d82:	f000 fd1b 	bl	80057bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d86:	200f      	movs	r0, #15
 8004d88:	f000 f808 	bl	8004d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d8c:	f7ff fbd8 	bl	8004540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40023c00 	.word	0x40023c00

08004d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004da4:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <HAL_InitTick+0x54>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <HAL_InitTick+0x58>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	4619      	mov	r1, r3
 8004dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fd33 	bl	8005826 <HAL_SYSTICK_Config>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e00e      	b.n	8004de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b0f      	cmp	r3, #15
 8004dce:	d80a      	bhi.n	8004de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd8:	f000 fcfb 	bl	80057d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ddc:	4a06      	ldr	r2, [pc, #24]	; (8004df8 <HAL_InitTick+0x5c>)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e000      	b.n	8004de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000000 	.word	0x20000000
 8004df4:	20000008 	.word	0x20000008
 8004df8:	20000004 	.word	0x20000004

08004dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_IncTick+0x20>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <HAL_IncTick+0x24>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	4a04      	ldr	r2, [pc, #16]	; (8004e20 <HAL_IncTick+0x24>)
 8004e0e:	6013      	str	r3, [r2, #0]
}
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000008 	.word	0x20000008
 8004e20:	200009e0 	.word	0x200009e0

08004e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  return uwTick;
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <HAL_GetTick+0x14>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	200009e0 	.word	0x200009e0

08004e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e44:	f7ff ffee 	bl	8004e24 <HAL_GetTick>
 8004e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d005      	beq.n	8004e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_Delay+0x44>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e62:	bf00      	nop
 8004e64:	f7ff ffde 	bl	8004e24 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d8f7      	bhi.n	8004e64 <HAL_Delay+0x28>
  {
  }
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000008 	.word	0x20000008

08004e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e033      	b.n	8004f02 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff fb74 	bl	8004590 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d118      	bne.n	8004ef4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004eca:	f023 0302 	bic.w	r3, r3, #2
 8004ece:	f043 0202 	orr.w	r2, r3, #2
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 faa4 	bl	8005424 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	f043 0201 	orr.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ef2:	e001      	b.n	8004ef8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_ADC_Start+0x1a>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e0b2      	b.n	800508c <HAL_ADC_Start+0x180>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d018      	beq.n	8004f6e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004f4c:	4b52      	ldr	r3, [pc, #328]	; (8005098 <HAL_ADC_Start+0x18c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a52      	ldr	r2, [pc, #328]	; (800509c <HAL_ADC_Start+0x190>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	0c9a      	lsrs	r2, r3, #18
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004f60:	e002      	b.n	8004f68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f9      	bne.n	8004f62 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d17a      	bne.n	8005072 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fba:	d106      	bne.n	8004fca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc0:	f023 0206 	bic.w	r2, r3, #6
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44
 8004fc8:	e002      	b.n	8004fd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fd8:	4b31      	ldr	r3, [pc, #196]	; (80050a0 <HAL_ADC_Start+0x194>)
 8004fda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004fe4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d12a      	bne.n	8005048 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a2b      	ldr	r2, [pc, #172]	; (80050a4 <HAL_ADC_Start+0x198>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d015      	beq.n	8005028 <HAL_ADC_Start+0x11c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a29      	ldr	r2, [pc, #164]	; (80050a8 <HAL_ADC_Start+0x19c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d105      	bne.n	8005012 <HAL_ADC_Start+0x106>
 8005006:	4b26      	ldr	r3, [pc, #152]	; (80050a0 <HAL_ADC_Start+0x194>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a25      	ldr	r2, [pc, #148]	; (80050ac <HAL_ADC_Start+0x1a0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d136      	bne.n	800508a <HAL_ADC_Start+0x17e>
 800501c:	4b20      	ldr	r3, [pc, #128]	; (80050a0 <HAL_ADC_Start+0x194>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b00      	cmp	r3, #0
 8005026:	d130      	bne.n	800508a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d129      	bne.n	800508a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005044:	609a      	str	r2, [r3, #8]
 8005046:	e020      	b.n	800508a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <HAL_ADC_Start+0x198>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d11b      	bne.n	800508a <HAL_ADC_Start+0x17e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d114      	bne.n	800508a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800506e:	609a      	str	r2, [r3, #8]
 8005070:	e00b      	b.n	800508a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f043 0210 	orr.w	r2, r3, #16
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	f043 0201 	orr.w	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	20000000 	.word	0x20000000
 800509c:	431bde83 	.word	0x431bde83
 80050a0:	40012300 	.word	0x40012300
 80050a4:	40012000 	.word	0x40012000
 80050a8:	40012100 	.word	0x40012100
 80050ac:	40012200 	.word	0x40012200

080050b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050cc:	d113      	bne.n	80050f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80050d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050dc:	d10b      	bne.n	80050f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f043 0220 	orr.w	r2, r3, #32
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e063      	b.n	80051be <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80050f6:	f7ff fe95 	bl	8004e24 <HAL_GetTick>
 80050fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050fc:	e021      	b.n	8005142 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d01d      	beq.n	8005142 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <HAL_ADC_PollForConversion+0x6c>
 800510c:	f7ff fe8a 	bl	8004e24 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d212      	bcs.n	8005142 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b02      	cmp	r3, #2
 8005128:	d00b      	beq.n	8005142 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f043 0204 	orr.w	r2, r3, #4
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e03d      	b.n	80051be <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b02      	cmp	r3, #2
 800514e:	d1d6      	bne.n	80050fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0212 	mvn.w	r2, #18
 8005158:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d123      	bne.n	80051bc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005178:	2b00      	cmp	r3, #0
 800517a:	d11f      	bne.n	80051bc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005186:	2b00      	cmp	r3, #0
 8005188:	d006      	beq.n	8005198 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005194:	2b00      	cmp	r3, #0
 8005196:	d111      	bne.n	80051bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d105      	bne.n	80051bc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f043 0201 	orr.w	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x1c>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e105      	b.n	8005408 <HAL_ADC_ConfigChannel+0x228>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b09      	cmp	r3, #9
 800520a:	d925      	bls.n	8005258 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68d9      	ldr	r1, [r3, #12]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	4613      	mov	r3, r2
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	4413      	add	r3, r2
 8005220:	3b1e      	subs	r3, #30
 8005222:	2207      	movs	r2, #7
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43da      	mvns	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	400a      	ands	r2, r1
 8005230:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	b29b      	uxth	r3, r3
 8005242:	4618      	mov	r0, r3
 8005244:	4603      	mov	r3, r0
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4403      	add	r3, r0
 800524a:	3b1e      	subs	r3, #30
 800524c:	409a      	lsls	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	e022      	b.n	800529e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6919      	ldr	r1, [r3, #16]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	461a      	mov	r2, r3
 8005266:	4613      	mov	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4413      	add	r3, r2
 800526c:	2207      	movs	r2, #7
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	43da      	mvns	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	400a      	ands	r2, r1
 800527a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6919      	ldr	r1, [r3, #16]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	4618      	mov	r0, r3
 800528e:	4603      	mov	r3, r0
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	4403      	add	r3, r0
 8005294:	409a      	lsls	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b06      	cmp	r3, #6
 80052a4:	d824      	bhi.n	80052f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	3b05      	subs	r3, #5
 80052b8:	221f      	movs	r2, #31
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43da      	mvns	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	400a      	ands	r2, r1
 80052c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	4618      	mov	r0, r3
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	3b05      	subs	r3, #5
 80052e2:	fa00 f203 	lsl.w	r2, r0, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	635a      	str	r2, [r3, #52]	; 0x34
 80052ee:	e04c      	b.n	800538a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	d824      	bhi.n	8005342 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	3b23      	subs	r3, #35	; 0x23
 800530a:	221f      	movs	r2, #31
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43da      	mvns	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	400a      	ands	r2, r1
 8005318:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	4618      	mov	r0, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	3b23      	subs	r3, #35	; 0x23
 8005334:	fa00 f203 	lsl.w	r2, r0, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
 8005340:	e023      	b.n	800538a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	3b41      	subs	r3, #65	; 0x41
 8005354:	221f      	movs	r2, #31
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	43da      	mvns	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	400a      	ands	r2, r1
 8005362:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	4618      	mov	r0, r3
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	3b41      	subs	r3, #65	; 0x41
 800537e:	fa00 f203 	lsl.w	r2, r0, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800538a:	4b22      	ldr	r3, [pc, #136]	; (8005414 <HAL_ADC_ConfigChannel+0x234>)
 800538c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a21      	ldr	r2, [pc, #132]	; (8005418 <HAL_ADC_ConfigChannel+0x238>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d109      	bne.n	80053ac <HAL_ADC_ConfigChannel+0x1cc>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b12      	cmp	r3, #18
 800539e:	d105      	bne.n	80053ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a19      	ldr	r2, [pc, #100]	; (8005418 <HAL_ADC_ConfigChannel+0x238>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d123      	bne.n	80053fe <HAL_ADC_ConfigChannel+0x21e>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d003      	beq.n	80053c6 <HAL_ADC_ConfigChannel+0x1e6>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b11      	cmp	r3, #17
 80053c4:	d11b      	bne.n	80053fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b10      	cmp	r3, #16
 80053d8:	d111      	bne.n	80053fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <HAL_ADC_ConfigChannel+0x23c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a10      	ldr	r2, [pc, #64]	; (8005420 <HAL_ADC_ConfigChannel+0x240>)
 80053e0:	fba2 2303 	umull	r2, r3, r2, r3
 80053e4:	0c9a      	lsrs	r2, r3, #18
 80053e6:	4613      	mov	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80053f0:	e002      	b.n	80053f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f9      	bne.n	80053f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	40012300 	.word	0x40012300
 8005418:	40012000 	.word	0x40012000
 800541c:	20000000 	.word	0x20000000
 8005420:	431bde83 	.word	0x431bde83

08005424 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800542c:	4b79      	ldr	r3, [pc, #484]	; (8005614 <ADC_Init+0x1f0>)
 800542e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	431a      	orrs	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6859      	ldr	r1, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	021a      	lsls	r2, r3, #8
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800547c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6859      	ldr	r1, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800549e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6899      	ldr	r1, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	4a58      	ldr	r2, [pc, #352]	; (8005618 <ADC_Init+0x1f4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d022      	beq.n	8005502 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6899      	ldr	r1, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6899      	ldr	r1, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	e00f      	b.n	8005522 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005520:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0202 	bic.w	r2, r2, #2
 8005530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6899      	ldr	r1, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	7e1b      	ldrb	r3, [r3, #24]
 800553c:	005a      	lsls	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01b      	beq.n	8005588 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800555e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800556e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	3b01      	subs	r3, #1
 800557c:	035a      	lsls	r2, r3, #13
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	e007      	b.n	8005598 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005596:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	051a      	lsls	r2, r3, #20
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6899      	ldr	r1, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055da:	025a      	lsls	r2, r3, #9
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6899      	ldr	r1, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	029a      	lsls	r2, r3, #10
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40012300 	.word	0x40012300
 8005618:	0f000001 	.word	0x0f000001

0800561c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800562c:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <__NVIC_SetPriorityGrouping+0x44>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005638:	4013      	ands	r3, r2
 800563a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800564c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800564e:	4a04      	ldr	r2, [pc, #16]	; (8005660 <__NVIC_SetPriorityGrouping+0x44>)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	60d3      	str	r3, [r2, #12]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	e000ed00 	.word	0xe000ed00

08005664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <__NVIC_GetPriorityGrouping+0x18>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	0a1b      	lsrs	r3, r3, #8
 800566e:	f003 0307 	and.w	r3, r3, #7
}
 8005672:	4618      	mov	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	e000ed00 	.word	0xe000ed00

08005680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800568a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568e:	2b00      	cmp	r3, #0
 8005690:	db0b      	blt.n	80056aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	f003 021f 	and.w	r2, r3, #31
 8005698:	4907      	ldr	r1, [pc, #28]	; (80056b8 <__NVIC_EnableIRQ+0x38>)
 800569a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	2001      	movs	r0, #1
 80056a2:	fa00 f202 	lsl.w	r2, r0, r2
 80056a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	e000e100 	.word	0xe000e100

080056bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	6039      	str	r1, [r7, #0]
 80056c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	db0a      	blt.n	80056e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	490c      	ldr	r1, [pc, #48]	; (8005708 <__NVIC_SetPriority+0x4c>)
 80056d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056da:	0112      	lsls	r2, r2, #4
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	440b      	add	r3, r1
 80056e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056e4:	e00a      	b.n	80056fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	4908      	ldr	r1, [pc, #32]	; (800570c <__NVIC_SetPriority+0x50>)
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	3b04      	subs	r3, #4
 80056f4:	0112      	lsls	r2, r2, #4
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	440b      	add	r3, r1
 80056fa:	761a      	strb	r2, [r3, #24]
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	e000e100 	.word	0xe000e100
 800570c:	e000ed00 	.word	0xe000ed00

08005710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005710:	b480      	push	{r7}
 8005712:	b089      	sub	sp, #36	; 0x24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f1c3 0307 	rsb	r3, r3, #7
 800572a:	2b04      	cmp	r3, #4
 800572c:	bf28      	it	cs
 800572e:	2304      	movcs	r3, #4
 8005730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3304      	adds	r3, #4
 8005736:	2b06      	cmp	r3, #6
 8005738:	d902      	bls.n	8005740 <NVIC_EncodePriority+0x30>
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3b03      	subs	r3, #3
 800573e:	e000      	b.n	8005742 <NVIC_EncodePriority+0x32>
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005744:	f04f 32ff 	mov.w	r2, #4294967295
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43da      	mvns	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	401a      	ands	r2, r3
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005758:	f04f 31ff 	mov.w	r1, #4294967295
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	fa01 f303 	lsl.w	r3, r1, r3
 8005762:	43d9      	mvns	r1, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005768:	4313      	orrs	r3, r2
         );
}
 800576a:	4618      	mov	r0, r3
 800576c:	3724      	adds	r7, #36	; 0x24
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3b01      	subs	r3, #1
 8005784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005788:	d301      	bcc.n	800578e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800578a:	2301      	movs	r3, #1
 800578c:	e00f      	b.n	80057ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800578e:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <SysTick_Config+0x40>)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3b01      	subs	r3, #1
 8005794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005796:	210f      	movs	r1, #15
 8005798:	f04f 30ff 	mov.w	r0, #4294967295
 800579c:	f7ff ff8e 	bl	80056bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <SysTick_Config+0x40>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057a6:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <SysTick_Config+0x40>)
 80057a8:	2207      	movs	r2, #7
 80057aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	e000e010 	.word	0xe000e010

080057bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff ff29 	bl	800561c <__NVIC_SetPriorityGrouping>
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b086      	sub	sp, #24
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	4603      	mov	r3, r0
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057e4:	f7ff ff3e 	bl	8005664 <__NVIC_GetPriorityGrouping>
 80057e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	6978      	ldr	r0, [r7, #20]
 80057f0:	f7ff ff8e 	bl	8005710 <NVIC_EncodePriority>
 80057f4:	4602      	mov	r2, r0
 80057f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057fa:	4611      	mov	r1, r2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff ff5d 	bl	80056bc <__NVIC_SetPriority>
}
 8005802:	bf00      	nop
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	4603      	mov	r3, r0
 8005812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ff31 	bl	8005680 <__NVIC_EnableIRQ>
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ffa2 	bl	8005778 <SysTick_Config>
 8005834:	4603      	mov	r3, r0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800584c:	f7ff faea 	bl	8004e24 <HAL_GetTick>
 8005850:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d008      	beq.n	8005870 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2280      	movs	r2, #128	; 0x80
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e052      	b.n	8005916 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0216 	bic.w	r2, r2, #22
 800587e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695a      	ldr	r2, [r3, #20]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800588e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d103      	bne.n	80058a0 <HAL_DMA_Abort+0x62>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0208 	bic.w	r2, r2, #8
 80058ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058c0:	e013      	b.n	80058ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058c2:	f7ff faaf 	bl	8004e24 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b05      	cmp	r3, #5
 80058ce:	d90c      	bls.n	80058ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2203      	movs	r2, #3
 80058da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e015      	b.n	8005916 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e4      	bne.n	80058c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fc:	223f      	movs	r2, #63	; 0x3f
 80058fe:	409a      	lsls	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d004      	beq.n	800593c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2280      	movs	r2, #128	; 0x80
 8005936:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e00c      	b.n	8005956 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2205      	movs	r2, #5
 8005940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0201 	bic.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005964:	b480      	push	{r7}
 8005966:	b089      	sub	sp, #36	; 0x24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005972:	2300      	movs	r3, #0
 8005974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005976:	2300      	movs	r3, #0
 8005978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	e16b      	b.n	8005c58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005980:	2201      	movs	r2, #1
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4013      	ands	r3, r2
 8005992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	429a      	cmp	r2, r3
 800599a:	f040 815a 	bne.w	8005c52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d005      	beq.n	80059b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d130      	bne.n	8005a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	2203      	movs	r2, #3
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43db      	mvns	r3, r3
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	4013      	ands	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059ec:	2201      	movs	r2, #1
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	43db      	mvns	r3, r3
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	4013      	ands	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 0201 	and.w	r2, r3, #1
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 0303 	and.w	r3, r3, #3
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d017      	beq.n	8005a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	2203      	movs	r2, #3
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f003 0303 	and.w	r3, r3, #3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d123      	bne.n	8005aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	08da      	lsrs	r2, r3, #3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3208      	adds	r2, #8
 8005a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	220f      	movs	r2, #15
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	4013      	ands	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	08da      	lsrs	r2, r3, #3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3208      	adds	r2, #8
 8005aa2:	69b9      	ldr	r1, [r7, #24]
 8005aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4013      	ands	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f003 0203 	and.w	r2, r3, #3
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80b4 	beq.w	8005c52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	4b60      	ldr	r3, [pc, #384]	; (8005c70 <HAL_GPIO_Init+0x30c>)
 8005af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af2:	4a5f      	ldr	r2, [pc, #380]	; (8005c70 <HAL_GPIO_Init+0x30c>)
 8005af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005af8:	6453      	str	r3, [r2, #68]	; 0x44
 8005afa:	4b5d      	ldr	r3, [pc, #372]	; (8005c70 <HAL_GPIO_Init+0x30c>)
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b06:	4a5b      	ldr	r2, [pc, #364]	; (8005c74 <HAL_GPIO_Init+0x310>)
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	220f      	movs	r2, #15
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43db      	mvns	r3, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4013      	ands	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a52      	ldr	r2, [pc, #328]	; (8005c78 <HAL_GPIO_Init+0x314>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d02b      	beq.n	8005b8a <HAL_GPIO_Init+0x226>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a51      	ldr	r2, [pc, #324]	; (8005c7c <HAL_GPIO_Init+0x318>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d025      	beq.n	8005b86 <HAL_GPIO_Init+0x222>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a50      	ldr	r2, [pc, #320]	; (8005c80 <HAL_GPIO_Init+0x31c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01f      	beq.n	8005b82 <HAL_GPIO_Init+0x21e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a4f      	ldr	r2, [pc, #316]	; (8005c84 <HAL_GPIO_Init+0x320>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d019      	beq.n	8005b7e <HAL_GPIO_Init+0x21a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a4e      	ldr	r2, [pc, #312]	; (8005c88 <HAL_GPIO_Init+0x324>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_GPIO_Init+0x216>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a4d      	ldr	r2, [pc, #308]	; (8005c8c <HAL_GPIO_Init+0x328>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00d      	beq.n	8005b76 <HAL_GPIO_Init+0x212>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a4c      	ldr	r2, [pc, #304]	; (8005c90 <HAL_GPIO_Init+0x32c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <HAL_GPIO_Init+0x20e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a4b      	ldr	r2, [pc, #300]	; (8005c94 <HAL_GPIO_Init+0x330>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <HAL_GPIO_Init+0x20a>
 8005b6a:	2307      	movs	r3, #7
 8005b6c:	e00e      	b.n	8005b8c <HAL_GPIO_Init+0x228>
 8005b6e:	2308      	movs	r3, #8
 8005b70:	e00c      	b.n	8005b8c <HAL_GPIO_Init+0x228>
 8005b72:	2306      	movs	r3, #6
 8005b74:	e00a      	b.n	8005b8c <HAL_GPIO_Init+0x228>
 8005b76:	2305      	movs	r3, #5
 8005b78:	e008      	b.n	8005b8c <HAL_GPIO_Init+0x228>
 8005b7a:	2304      	movs	r3, #4
 8005b7c:	e006      	b.n	8005b8c <HAL_GPIO_Init+0x228>
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e004      	b.n	8005b8c <HAL_GPIO_Init+0x228>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e002      	b.n	8005b8c <HAL_GPIO_Init+0x228>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <HAL_GPIO_Init+0x228>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	f002 0203 	and.w	r2, r2, #3
 8005b92:	0092      	lsls	r2, r2, #2
 8005b94:	4093      	lsls	r3, r2
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b9c:	4935      	ldr	r1, [pc, #212]	; (8005c74 <HAL_GPIO_Init+0x310>)
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	089b      	lsrs	r3, r3, #2
 8005ba2:	3302      	adds	r3, #2
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005baa:	4b3b      	ldr	r3, [pc, #236]	; (8005c98 <HAL_GPIO_Init+0x334>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bce:	4a32      	ldr	r2, [pc, #200]	; (8005c98 <HAL_GPIO_Init+0x334>)
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bd4:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <HAL_GPIO_Init+0x334>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	4013      	ands	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bf8:	4a27      	ldr	r2, [pc, #156]	; (8005c98 <HAL_GPIO_Init+0x334>)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005bfe:	4b26      	ldr	r3, [pc, #152]	; (8005c98 <HAL_GPIO_Init+0x334>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	43db      	mvns	r3, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c22:	4a1d      	ldr	r2, [pc, #116]	; (8005c98 <HAL_GPIO_Init+0x334>)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <HAL_GPIO_Init+0x334>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4013      	ands	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c4c:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <HAL_GPIO_Init+0x334>)
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3301      	adds	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b0f      	cmp	r3, #15
 8005c5c:	f67f ae90 	bls.w	8005980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	3724      	adds	r7, #36	; 0x24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40023800 	.word	0x40023800
 8005c74:	40013800 	.word	0x40013800
 8005c78:	40020000 	.word	0x40020000
 8005c7c:	40020400 	.word	0x40020400
 8005c80:	40020800 	.word	0x40020800
 8005c84:	40020c00 	.word	0x40020c00
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	40021400 	.word	0x40021400
 8005c90:	40021800 	.word	0x40021800
 8005c94:	40021c00 	.word	0x40021c00
 8005c98:	40013c00 	.word	0x40013c00

08005c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	807b      	strh	r3, [r7, #2]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cac:	787b      	ldrb	r3, [r7, #1]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cb2:	887a      	ldrh	r2, [r7, #2]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005cb8:	e003      	b.n	8005cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005cba:	887b      	ldrh	r3, [r7, #2]
 8005cbc:	041a      	lsls	r2, r3, #16
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	619a      	str	r2, [r3, #24]
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e12b      	b.n	8005f3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fe fc8e 	bl	8004618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2224      	movs	r2, #36	; 0x24
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d34:	f001 fc48 	bl	80075c8 <HAL_RCC_GetPCLK1Freq>
 8005d38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	4a81      	ldr	r2, [pc, #516]	; (8005f44 <HAL_I2C_Init+0x274>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d807      	bhi.n	8005d54 <HAL_I2C_Init+0x84>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4a80      	ldr	r2, [pc, #512]	; (8005f48 <HAL_I2C_Init+0x278>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	bf94      	ite	ls
 8005d4c:	2301      	movls	r3, #1
 8005d4e:	2300      	movhi	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e006      	b.n	8005d62 <HAL_I2C_Init+0x92>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4a7d      	ldr	r2, [pc, #500]	; (8005f4c <HAL_I2C_Init+0x27c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	bf94      	ite	ls
 8005d5c:	2301      	movls	r3, #1
 8005d5e:	2300      	movhi	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e0e7      	b.n	8005f3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4a78      	ldr	r2, [pc, #480]	; (8005f50 <HAL_I2C_Init+0x280>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	0c9b      	lsrs	r3, r3, #18
 8005d74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	4a6a      	ldr	r2, [pc, #424]	; (8005f44 <HAL_I2C_Init+0x274>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d802      	bhi.n	8005da4 <HAL_I2C_Init+0xd4>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	3301      	adds	r3, #1
 8005da2:	e009      	b.n	8005db8 <HAL_I2C_Init+0xe8>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	4a69      	ldr	r2, [pc, #420]	; (8005f54 <HAL_I2C_Init+0x284>)
 8005db0:	fba2 2303 	umull	r2, r3, r2, r3
 8005db4:	099b      	lsrs	r3, r3, #6
 8005db6:	3301      	adds	r3, #1
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005dca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	495c      	ldr	r1, [pc, #368]	; (8005f44 <HAL_I2C_Init+0x274>)
 8005dd4:	428b      	cmp	r3, r1
 8005dd6:	d819      	bhi.n	8005e0c <HAL_I2C_Init+0x13c>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1e59      	subs	r1, r3, #1
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005de6:	1c59      	adds	r1, r3, #1
 8005de8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005dec:	400b      	ands	r3, r1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_I2C_Init+0x138>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1e59      	subs	r1, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e00:	3301      	adds	r3, #1
 8005e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e06:	e051      	b.n	8005eac <HAL_I2C_Init+0x1dc>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	e04f      	b.n	8005eac <HAL_I2C_Init+0x1dc>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d111      	bne.n	8005e38 <HAL_I2C_Init+0x168>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1e58      	subs	r0, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6859      	ldr	r1, [r3, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	440b      	add	r3, r1
 8005e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e26:	3301      	adds	r3, #1
 8005e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bf0c      	ite	eq
 8005e30:	2301      	moveq	r3, #1
 8005e32:	2300      	movne	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e012      	b.n	8005e5e <HAL_I2C_Init+0x18e>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	1e58      	subs	r0, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6859      	ldr	r1, [r3, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	0099      	lsls	r1, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e4e:	3301      	adds	r3, #1
 8005e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	bf0c      	ite	eq
 8005e58:	2301      	moveq	r3, #1
 8005e5a:	2300      	movne	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_I2C_Init+0x196>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e022      	b.n	8005eac <HAL_I2C_Init+0x1dc>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10e      	bne.n	8005e8c <HAL_I2C_Init+0x1bc>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1e58      	subs	r0, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6859      	ldr	r1, [r3, #4]
 8005e76:	460b      	mov	r3, r1
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	440b      	add	r3, r1
 8005e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e80:	3301      	adds	r3, #1
 8005e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8a:	e00f      	b.n	8005eac <HAL_I2C_Init+0x1dc>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	1e58      	subs	r0, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6859      	ldr	r1, [r3, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	0099      	lsls	r1, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	6809      	ldr	r1, [r1, #0]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69da      	ldr	r2, [r3, #28]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005eda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6911      	ldr	r1, [r2, #16]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	68d2      	ldr	r2, [r2, #12]
 8005ee6:	4311      	orrs	r1, r2
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	000186a0 	.word	0x000186a0
 8005f48:	001e847f 	.word	0x001e847f
 8005f4c:	003d08ff 	.word	0x003d08ff
 8005f50:	431bde83 	.word	0x431bde83
 8005f54:	10624dd3 	.word	0x10624dd3

08005f58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	4608      	mov	r0, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	461a      	mov	r2, r3
 8005f66:	4603      	mov	r3, r0
 8005f68:	817b      	strh	r3, [r7, #10]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	813b      	strh	r3, [r7, #8]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f72:	f7fe ff57 	bl	8004e24 <HAL_GetTick>
 8005f76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	f040 80d9 	bne.w	8006138 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	2319      	movs	r3, #25
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	496d      	ldr	r1, [pc, #436]	; (8006144 <HAL_I2C_Mem_Write+0x1ec>)
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fc8b 	bl	80068ac <I2C_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e0cc      	b.n	800613a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_I2C_Mem_Write+0x56>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e0c5      	b.n	800613a <HAL_I2C_Mem_Write+0x1e2>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d007      	beq.n	8005fd4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fe2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2221      	movs	r2, #33	; 0x21
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2240      	movs	r2, #64	; 0x40
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a3a      	ldr	r2, [r7, #32]
 8005ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006004:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4a4d      	ldr	r2, [pc, #308]	; (8006148 <HAL_I2C_Mem_Write+0x1f0>)
 8006014:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006016:	88f8      	ldrh	r0, [r7, #6]
 8006018:	893a      	ldrh	r2, [r7, #8]
 800601a:	8979      	ldrh	r1, [r7, #10]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	4603      	mov	r3, r0
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fac2 	bl	80065b0 <I2C_RequestMemoryWrite>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d052      	beq.n	80060d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e081      	b.n	800613a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fd50 	bl	8006ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00d      	beq.n	8006062 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	2b04      	cmp	r3, #4
 800604c:	d107      	bne.n	800605e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800605c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e06b      	b.n	800613a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	781a      	ldrb	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b04      	cmp	r3, #4
 800609e:	d11b      	bne.n	80060d8 <HAL_I2C_Mem_Write+0x180>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d017      	beq.n	80060d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	781a      	ldrb	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1aa      	bne.n	8006036 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 fd43 	bl	8006b70 <I2C_WaitOnBTFFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d107      	bne.n	8006108 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006106:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e016      	b.n	800613a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800611a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	e000      	b.n	800613a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006138:	2302      	movs	r3, #2
  }
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	00100002 	.word	0x00100002
 8006148:	ffff0000 	.word	0xffff0000

0800614c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08c      	sub	sp, #48	; 0x30
 8006150:	af02      	add	r7, sp, #8
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	4608      	mov	r0, r1
 8006156:	4611      	mov	r1, r2
 8006158:	461a      	mov	r2, r3
 800615a:	4603      	mov	r3, r0
 800615c:	817b      	strh	r3, [r7, #10]
 800615e:	460b      	mov	r3, r1
 8006160:	813b      	strh	r3, [r7, #8]
 8006162:	4613      	mov	r3, r2
 8006164:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006166:	f7fe fe5d 	bl	8004e24 <HAL_GetTick>
 800616a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b20      	cmp	r3, #32
 8006176:	f040 8214 	bne.w	80065a2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	2319      	movs	r3, #25
 8006180:	2201      	movs	r2, #1
 8006182:	497b      	ldr	r1, [pc, #492]	; (8006370 <HAL_I2C_Mem_Read+0x224>)
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 fb91 	bl	80068ac <I2C_WaitOnFlagUntilTimeout>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006190:	2302      	movs	r3, #2
 8006192:	e207      	b.n	80065a4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_I2C_Mem_Read+0x56>
 800619e:	2302      	movs	r3, #2
 80061a0:	e200      	b.n	80065a4 <HAL_I2C_Mem_Read+0x458>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d007      	beq.n	80061c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2222      	movs	r2, #34	; 0x22
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2240      	movs	r2, #64	; 0x40
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80061f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4a5b      	ldr	r2, [pc, #364]	; (8006374 <HAL_I2C_Mem_Read+0x228>)
 8006208:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800620a:	88f8      	ldrh	r0, [r7, #6]
 800620c:	893a      	ldrh	r2, [r7, #8]
 800620e:	8979      	ldrh	r1, [r7, #10]
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	4603      	mov	r3, r0
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fa5e 	bl	80066dc <I2C_RequestMemoryRead>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e1bc      	b.n	80065a4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d113      	bne.n	800625a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006232:	2300      	movs	r3, #0
 8006234:	623b      	str	r3, [r7, #32]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	623b      	str	r3, [r7, #32]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	623b      	str	r3, [r7, #32]
 8006246:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	e190      	b.n	800657c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625e:	2b01      	cmp	r3, #1
 8006260:	d11b      	bne.n	800629a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006272:	2300      	movs	r3, #0
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	e170      	b.n	800657c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d11b      	bne.n	80062da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062c2:	2300      	movs	r3, #0
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	e150      	b.n	800657c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80062f0:	e144      	b.n	800657c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	f200 80f1 	bhi.w	80064de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006300:	2b01      	cmp	r3, #1
 8006302:	d123      	bne.n	800634c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fc79 	bl	8006c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e145      	b.n	80065a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	855a      	strh	r2, [r3, #42]	; 0x2a
 800634a:	e117      	b.n	800657c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006350:	2b02      	cmp	r3, #2
 8006352:	d14e      	bne.n	80063f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	2200      	movs	r2, #0
 800635c:	4906      	ldr	r1, [pc, #24]	; (8006378 <HAL_I2C_Mem_Read+0x22c>)
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 faa4 	bl	80068ac <I2C_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d008      	beq.n	800637c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e11a      	b.n	80065a4 <HAL_I2C_Mem_Read+0x458>
 800636e:	bf00      	nop
 8006370:	00100002 	.word	0x00100002
 8006374:	ffff0000 	.word	0xffff0000
 8006378:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800638a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691a      	ldr	r2, [r3, #16]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063f0:	e0c4      	b.n	800657c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	2200      	movs	r2, #0
 80063fa:	496c      	ldr	r1, [pc, #432]	; (80065ac <HAL_I2C_Mem_Read+0x460>)
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fa55 	bl	80068ac <I2C_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0cb      	b.n	80065a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800641a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	2200      	movs	r2, #0
 8006456:	4955      	ldr	r1, [pc, #340]	; (80065ac <HAL_I2C_Mem_Read+0x460>)
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 fa27 	bl	80068ac <I2C_WaitOnFlagUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e09d      	b.n	80065a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006494:	3b01      	subs	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064dc:	e04e      	b.n	800657c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 fb8c 	bl	8006c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e058      	b.n	80065a4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b04      	cmp	r3, #4
 8006530:	d124      	bne.n	800657c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006536:	2b03      	cmp	r3, #3
 8006538:	d107      	bne.n	800654a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006548:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006566:	3b01      	subs	r3, #1
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006580:	2b00      	cmp	r3, #0
 8006582:	f47f aeb6 	bne.w	80062f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e000      	b.n	80065a4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80065a2:	2302      	movs	r3, #2
  }
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3728      	adds	r7, #40	; 0x28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	00010004 	.word	0x00010004

080065b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	4608      	mov	r0, r1
 80065ba:	4611      	mov	r1, r2
 80065bc:	461a      	mov	r2, r3
 80065be:	4603      	mov	r3, r0
 80065c0:	817b      	strh	r3, [r7, #10]
 80065c2:	460b      	mov	r3, r1
 80065c4:	813b      	strh	r3, [r7, #8]
 80065c6:	4613      	mov	r3, r2
 80065c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f960 	bl	80068ac <I2C_WaitOnFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006600:	d103      	bne.n	800660a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006608:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e05f      	b.n	80066ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800660e:	897b      	ldrh	r3, [r7, #10]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800661c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	6a3a      	ldr	r2, [r7, #32]
 8006622:	492d      	ldr	r1, [pc, #180]	; (80066d8 <I2C_RequestMemoryWrite+0x128>)
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f9bb 	bl	80069a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e04c      	b.n	80066ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800664a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664c:	6a39      	ldr	r1, [r7, #32]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fa46 	bl	8006ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00d      	beq.n	8006676 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	2b04      	cmp	r3, #4
 8006660:	d107      	bne.n	8006672 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006670:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e02b      	b.n	80066ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d105      	bne.n	8006688 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800667c:	893b      	ldrh	r3, [r7, #8]
 800667e:	b2da      	uxtb	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	611a      	str	r2, [r3, #16]
 8006686:	e021      	b.n	80066cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006688:	893b      	ldrh	r3, [r7, #8]
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	b29b      	uxth	r3, r3
 800668e:	b2da      	uxtb	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006698:	6a39      	ldr	r1, [r7, #32]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fa20 	bl	8006ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00d      	beq.n	80066c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d107      	bne.n	80066be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e005      	b.n	80066ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066c2:	893b      	ldrh	r3, [r7, #8]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	00010002 	.word	0x00010002

080066dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	4608      	mov	r0, r1
 80066e6:	4611      	mov	r1, r2
 80066e8:	461a      	mov	r2, r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	817b      	strh	r3, [r7, #10]
 80066ee:	460b      	mov	r3, r1
 80066f0:	813b      	strh	r3, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006704:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006714:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	2200      	movs	r2, #0
 800671e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f8c2 	bl	80068ac <I2C_WaitOnFlagUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00d      	beq.n	800674a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673c:	d103      	bne.n	8006746 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e0aa      	b.n	80068a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800674a:	897b      	ldrh	r3, [r7, #10]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	461a      	mov	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006758:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	6a3a      	ldr	r2, [r7, #32]
 800675e:	4952      	ldr	r1, [pc, #328]	; (80068a8 <I2C_RequestMemoryRead+0x1cc>)
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f91d 	bl	80069a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e097      	b.n	80068a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006788:	6a39      	ldr	r1, [r7, #32]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 f9a8 	bl	8006ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00d      	beq.n	80067b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	2b04      	cmp	r3, #4
 800679c:	d107      	bne.n	80067ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e076      	b.n	80068a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d105      	bne.n	80067c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067b8:	893b      	ldrh	r3, [r7, #8]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	611a      	str	r2, [r3, #16]
 80067c2:	e021      	b.n	8006808 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067c4:	893b      	ldrh	r3, [r7, #8]
 80067c6:	0a1b      	lsrs	r3, r3, #8
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d4:	6a39      	ldr	r1, [r7, #32]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 f982 	bl	8006ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00d      	beq.n	80067fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d107      	bne.n	80067fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e050      	b.n	80068a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067fe:	893b      	ldrh	r3, [r7, #8]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680a:	6a39      	ldr	r1, [r7, #32]
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 f967 	bl	8006ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00d      	beq.n	8006834 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	2b04      	cmp	r3, #4
 800681e:	d107      	bne.n	8006830 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800682e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e035      	b.n	80068a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006842:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	2200      	movs	r2, #0
 800684c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 f82b 	bl	80068ac <I2C_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00d      	beq.n	8006878 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686a:	d103      	bne.n	8006874 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006872:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e013      	b.n	80068a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006878:	897b      	ldrh	r3, [r7, #10]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f043 0301 	orr.w	r3, r3, #1
 8006880:	b2da      	uxtb	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	6a3a      	ldr	r2, [r7, #32]
 800688c:	4906      	ldr	r1, [pc, #24]	; (80068a8 <I2C_RequestMemoryRead+0x1cc>)
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f886 	bl	80069a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	00010002 	.word	0x00010002

080068ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068bc:	e048      	b.n	8006950 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c4:	d044      	beq.n	8006950 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c6:	f7fe faad 	bl	8004e24 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d139      	bne.n	8006950 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	0c1b      	lsrs	r3, r3, #16
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d10d      	bne.n	8006902 <I2C_WaitOnFlagUntilTimeout+0x56>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	43da      	mvns	r2, r3
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4013      	ands	r3, r2
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	bf0c      	ite	eq
 80068f8:	2301      	moveq	r3, #1
 80068fa:	2300      	movne	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	e00c      	b.n	800691c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	43da      	mvns	r2, r3
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4013      	ands	r3, r2
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	bf0c      	ite	eq
 8006914:	2301      	moveq	r3, #1
 8006916:	2300      	movne	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	429a      	cmp	r2, r3
 8006920:	d116      	bne.n	8006950 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	f043 0220 	orr.w	r2, r3, #32
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e023      	b.n	8006998 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b01      	cmp	r3, #1
 8006958:	d10d      	bne.n	8006976 <I2C_WaitOnFlagUntilTimeout+0xca>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	43da      	mvns	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	4013      	ands	r3, r2
 8006966:	b29b      	uxth	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	bf0c      	ite	eq
 800696c:	2301      	moveq	r3, #1
 800696e:	2300      	movne	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	461a      	mov	r2, r3
 8006974:	e00c      	b.n	8006990 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	43da      	mvns	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4013      	ands	r3, r2
 8006982:	b29b      	uxth	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	429a      	cmp	r2, r3
 8006994:	d093      	beq.n	80068be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069ae:	e071      	b.n	8006a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069be:	d123      	bne.n	8006a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	f043 0204 	orr.w	r2, r3, #4
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e067      	b.n	8006ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d041      	beq.n	8006a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a10:	f7fe fa08 	bl	8004e24 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d136      	bne.n	8006a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	0c1b      	lsrs	r3, r3, #16
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d10c      	bne.n	8006a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	43da      	mvns	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bf14      	ite	ne
 8006a42:	2301      	movne	r3, #1
 8006a44:	2300      	moveq	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	e00b      	b.n	8006a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	43da      	mvns	r2, r3
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	4013      	ands	r3, r2
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	bf14      	ite	ne
 8006a5c:	2301      	movne	r3, #1
 8006a5e:	2300      	moveq	r3, #0
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d016      	beq.n	8006a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	f043 0220 	orr.w	r2, r3, #32
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e021      	b.n	8006ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	0c1b      	lsrs	r3, r3, #16
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d10c      	bne.n	8006ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	43da      	mvns	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bf14      	ite	ne
 8006ab0:	2301      	movne	r3, #1
 8006ab2:	2300      	moveq	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	e00b      	b.n	8006ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	43da      	mvns	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bf14      	ite	ne
 8006aca:	2301      	movne	r3, #1
 8006acc:	2300      	moveq	r3, #0
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f47f af6d 	bne.w	80069b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aec:	e034      	b.n	8006b58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 f8e3 	bl	8006cba <I2C_IsAcknowledgeFailed>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e034      	b.n	8006b68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d028      	beq.n	8006b58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b06:	f7fe f98d 	bl	8004e24 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d302      	bcc.n	8006b1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d11d      	bne.n	8006b58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b26:	2b80      	cmp	r3, #128	; 0x80
 8006b28:	d016      	beq.n	8006b58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	f043 0220 	orr.w	r2, r3, #32
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e007      	b.n	8006b68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b62:	2b80      	cmp	r3, #128	; 0x80
 8006b64:	d1c3      	bne.n	8006aee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b7c:	e034      	b.n	8006be8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 f89b 	bl	8006cba <I2C_IsAcknowledgeFailed>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e034      	b.n	8006bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d028      	beq.n	8006be8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b96:	f7fe f945 	bl	8004e24 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d302      	bcc.n	8006bac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d11d      	bne.n	8006be8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f003 0304 	and.w	r3, r3, #4
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d016      	beq.n	8006be8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	f043 0220 	orr.w	r2, r3, #32
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e007      	b.n	8006bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d1c3      	bne.n	8006b7e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c0c:	e049      	b.n	8006ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f003 0310 	and.w	r3, r3, #16
 8006c18:	2b10      	cmp	r3, #16
 8006c1a:	d119      	bne.n	8006c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0210 	mvn.w	r2, #16
 8006c24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e030      	b.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c50:	f7fe f8e8 	bl	8004e24 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d302      	bcc.n	8006c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d11d      	bne.n	8006ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c70:	2b40      	cmp	r3, #64	; 0x40
 8006c72:	d016      	beq.n	8006ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	f043 0220 	orr.w	r2, r3, #32
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e007      	b.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	d1ae      	bne.n	8006c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd0:	d11b      	bne.n	8006d0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cda:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f043 0204 	orr.w	r2, r3, #4
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006d1e:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006d20:	2201      	movs	r2, #1
 8006d22:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <HAL_PWR_EnableBkUpAccess+0x24>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006d2a:	687b      	ldr	r3, [r7, #4]
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	420e0020 	.word	0x420e0020
 8006d3c:	40007000 	.word	0x40007000

08006d40 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006d46:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <HAL_PWR_DisableBkUpAccess+0x24>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006d52:	687b      	ldr	r3, [r7, #4]
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	420e0020 	.word	0x420e0020
 8006d64:	40007000 	.word	0x40007000

08006d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e267      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d075      	beq.n	8006e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d86:	4b88      	ldr	r3, [pc, #544]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 030c 	and.w	r3, r3, #12
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d00c      	beq.n	8006dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d92:	4b85      	ldr	r3, [pc, #532]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d112      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d9e:	4b82      	ldr	r3, [pc, #520]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006daa:	d10b      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dac:	4b7e      	ldr	r3, [pc, #504]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d05b      	beq.n	8006e70 <HAL_RCC_OscConfig+0x108>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d157      	bne.n	8006e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e242      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dcc:	d106      	bne.n	8006ddc <HAL_RCC_OscConfig+0x74>
 8006dce:	4b76      	ldr	r3, [pc, #472]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a75      	ldr	r2, [pc, #468]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e01d      	b.n	8006e18 <HAL_RCC_OscConfig+0xb0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006de4:	d10c      	bne.n	8006e00 <HAL_RCC_OscConfig+0x98>
 8006de6:	4b70      	ldr	r3, [pc, #448]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a6f      	ldr	r2, [pc, #444]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	4b6d      	ldr	r3, [pc, #436]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a6c      	ldr	r2, [pc, #432]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	e00b      	b.n	8006e18 <HAL_RCC_OscConfig+0xb0>
 8006e00:	4b69      	ldr	r3, [pc, #420]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a68      	ldr	r2, [pc, #416]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	4b66      	ldr	r3, [pc, #408]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a65      	ldr	r2, [pc, #404]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d013      	beq.n	8006e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e20:	f7fe f800 	bl	8004e24 <HAL_GetTick>
 8006e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e28:	f7fd fffc 	bl	8004e24 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b64      	cmp	r3, #100	; 0x64
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e207      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e3a:	4b5b      	ldr	r3, [pc, #364]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCC_OscConfig+0xc0>
 8006e46:	e014      	b.n	8006e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e48:	f7fd ffec 	bl	8004e24 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e50:	f7fd ffe8 	bl	8004e24 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b64      	cmp	r3, #100	; 0x64
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e1f3      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e62:	4b51      	ldr	r3, [pc, #324]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f0      	bne.n	8006e50 <HAL_RCC_OscConfig+0xe8>
 8006e6e:	e000      	b.n	8006e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d063      	beq.n	8006f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e7e:	4b4a      	ldr	r3, [pc, #296]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 030c 	and.w	r3, r3, #12
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00b      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e8a:	4b47      	ldr	r3, [pc, #284]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	d11c      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e96:	4b44      	ldr	r3, [pc, #272]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d116      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ea2:	4b41      	ldr	r3, [pc, #260]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d005      	beq.n	8006eba <HAL_RCC_OscConfig+0x152>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d001      	beq.n	8006eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e1c7      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eba:	4b3b      	ldr	r3, [pc, #236]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4937      	ldr	r1, [pc, #220]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ece:	e03a      	b.n	8006f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d020      	beq.n	8006f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ed8:	4b34      	ldr	r3, [pc, #208]	; (8006fac <HAL_RCC_OscConfig+0x244>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ede:	f7fd ffa1 	bl	8004e24 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ee6:	f7fd ff9d 	bl	8004e24 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e1a8      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef8:	4b2b      	ldr	r3, [pc, #172]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0f0      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f04:	4b28      	ldr	r3, [pc, #160]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	4925      	ldr	r1, [pc, #148]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	600b      	str	r3, [r1, #0]
 8006f18:	e015      	b.n	8006f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f1a:	4b24      	ldr	r3, [pc, #144]	; (8006fac <HAL_RCC_OscConfig+0x244>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f20:	f7fd ff80 	bl	8004e24 <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f28:	f7fd ff7c 	bl	8004e24 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e187      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f3a:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f0      	bne.n	8006f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d036      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d016      	beq.n	8006f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f5a:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <HAL_RCC_OscConfig+0x248>)
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f60:	f7fd ff60 	bl	8004e24 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f68:	f7fd ff5c 	bl	8004e24 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e167      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <HAL_RCC_OscConfig+0x240>)
 8006f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0f0      	beq.n	8006f68 <HAL_RCC_OscConfig+0x200>
 8006f86:	e01b      	b.n	8006fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f88:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <HAL_RCC_OscConfig+0x248>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f8e:	f7fd ff49 	bl	8004e24 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f94:	e00e      	b.n	8006fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f96:	f7fd ff45 	bl	8004e24 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d907      	bls.n	8006fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e150      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	42470000 	.word	0x42470000
 8006fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fb4:	4b88      	ldr	r3, [pc, #544]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8006fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1ea      	bne.n	8006f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 8097 	beq.w	80070fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fd2:	4b81      	ldr	r3, [pc, #516]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10f      	bne.n	8006ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	4b7d      	ldr	r3, [pc, #500]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	4a7c      	ldr	r2, [pc, #496]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8006fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fec:	6413      	str	r3, [r2, #64]	; 0x40
 8006fee:	4b7a      	ldr	r3, [pc, #488]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff6:	60bb      	str	r3, [r7, #8]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ffe:	4b77      	ldr	r3, [pc, #476]	; (80071dc <HAL_RCC_OscConfig+0x474>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007006:	2b00      	cmp	r3, #0
 8007008:	d118      	bne.n	800703c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800700a:	4b74      	ldr	r3, [pc, #464]	; (80071dc <HAL_RCC_OscConfig+0x474>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a73      	ldr	r2, [pc, #460]	; (80071dc <HAL_RCC_OscConfig+0x474>)
 8007010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007016:	f7fd ff05 	bl	8004e24 <HAL_GetTick>
 800701a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800701c:	e008      	b.n	8007030 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800701e:	f7fd ff01 	bl	8004e24 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d901      	bls.n	8007030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e10c      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007030:	4b6a      	ldr	r3, [pc, #424]	; (80071dc <HAL_RCC_OscConfig+0x474>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d0f0      	beq.n	800701e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d106      	bne.n	8007052 <HAL_RCC_OscConfig+0x2ea>
 8007044:	4b64      	ldr	r3, [pc, #400]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007048:	4a63      	ldr	r2, [pc, #396]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	6713      	str	r3, [r2, #112]	; 0x70
 8007050:	e01c      	b.n	800708c <HAL_RCC_OscConfig+0x324>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b05      	cmp	r3, #5
 8007058:	d10c      	bne.n	8007074 <HAL_RCC_OscConfig+0x30c>
 800705a:	4b5f      	ldr	r3, [pc, #380]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	4a5e      	ldr	r2, [pc, #376]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8007060:	f043 0304 	orr.w	r3, r3, #4
 8007064:	6713      	str	r3, [r2, #112]	; 0x70
 8007066:	4b5c      	ldr	r3, [pc, #368]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8007068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706a:	4a5b      	ldr	r2, [pc, #364]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 800706c:	f043 0301 	orr.w	r3, r3, #1
 8007070:	6713      	str	r3, [r2, #112]	; 0x70
 8007072:	e00b      	b.n	800708c <HAL_RCC_OscConfig+0x324>
 8007074:	4b58      	ldr	r3, [pc, #352]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007078:	4a57      	ldr	r2, [pc, #348]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 800707a:	f023 0301 	bic.w	r3, r3, #1
 800707e:	6713      	str	r3, [r2, #112]	; 0x70
 8007080:	4b55      	ldr	r3, [pc, #340]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8007082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007084:	4a54      	ldr	r2, [pc, #336]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8007086:	f023 0304 	bic.w	r3, r3, #4
 800708a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d015      	beq.n	80070c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007094:	f7fd fec6 	bl	8004e24 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800709a:	e00a      	b.n	80070b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800709c:	f7fd fec2 	bl	8004e24 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e0cb      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b2:	4b49      	ldr	r3, [pc, #292]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0ee      	beq.n	800709c <HAL_RCC_OscConfig+0x334>
 80070be:	e014      	b.n	80070ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070c0:	f7fd feb0 	bl	8004e24 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070c6:	e00a      	b.n	80070de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c8:	f7fd feac 	bl	8004e24 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e0b5      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070de:	4b3e      	ldr	r3, [pc, #248]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1ee      	bne.n	80070c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d105      	bne.n	80070fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070f0:	4b39      	ldr	r3, [pc, #228]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 80070f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f4:	4a38      	ldr	r2, [pc, #224]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 80070f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 80a1 	beq.w	8007248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007106:	4b34      	ldr	r3, [pc, #208]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 030c 	and.w	r3, r3, #12
 800710e:	2b08      	cmp	r3, #8
 8007110:	d05c      	beq.n	80071cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d141      	bne.n	800719e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800711a:	4b31      	ldr	r3, [pc, #196]	; (80071e0 <HAL_RCC_OscConfig+0x478>)
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007120:	f7fd fe80 	bl	8004e24 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007128:	f7fd fe7c 	bl	8004e24 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e087      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713a:	4b27      	ldr	r3, [pc, #156]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69da      	ldr	r2, [r3, #28]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	019b      	lsls	r3, r3, #6
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	3b01      	subs	r3, #1
 8007160:	041b      	lsls	r3, r3, #16
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	061b      	lsls	r3, r3, #24
 800716a:	491b      	ldr	r1, [pc, #108]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 800716c:	4313      	orrs	r3, r2
 800716e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007170:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <HAL_RCC_OscConfig+0x478>)
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007176:	f7fd fe55 	bl	8004e24 <HAL_GetTick>
 800717a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800717e:	f7fd fe51 	bl	8004e24 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e05c      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007190:	4b11      	ldr	r3, [pc, #68]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0f0      	beq.n	800717e <HAL_RCC_OscConfig+0x416>
 800719c:	e054      	b.n	8007248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800719e:	4b10      	ldr	r3, [pc, #64]	; (80071e0 <HAL_RCC_OscConfig+0x478>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a4:	f7fd fe3e 	bl	8004e24 <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071aa:	e008      	b.n	80071be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ac:	f7fd fe3a 	bl	8004e24 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e045      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071be:	4b06      	ldr	r3, [pc, #24]	; (80071d8 <HAL_RCC_OscConfig+0x470>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1f0      	bne.n	80071ac <HAL_RCC_OscConfig+0x444>
 80071ca:	e03d      	b.n	8007248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d107      	bne.n	80071e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e038      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
 80071d8:	40023800 	.word	0x40023800
 80071dc:	40007000 	.word	0x40007000
 80071e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071e4:	4b1b      	ldr	r3, [pc, #108]	; (8007254 <HAL_RCC_OscConfig+0x4ec>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d028      	beq.n	8007244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d121      	bne.n	8007244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800720a:	429a      	cmp	r2, r3
 800720c:	d11a      	bne.n	8007244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007214:	4013      	ands	r3, r2
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800721a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800721c:	4293      	cmp	r3, r2
 800721e:	d111      	bne.n	8007244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	3b01      	subs	r3, #1
 800722e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007230:	429a      	cmp	r2, r3
 8007232:	d107      	bne.n	8007244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007240:	429a      	cmp	r2, r3
 8007242:	d001      	beq.n	8007248 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40023800 	.word	0x40023800

08007258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e0cc      	b.n	8007406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800726c:	4b68      	ldr	r3, [pc, #416]	; (8007410 <HAL_RCC_ClockConfig+0x1b8>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d90c      	bls.n	8007294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727a:	4b65      	ldr	r3, [pc, #404]	; (8007410 <HAL_RCC_ClockConfig+0x1b8>)
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007282:	4b63      	ldr	r3, [pc, #396]	; (8007410 <HAL_RCC_ClockConfig+0x1b8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d001      	beq.n	8007294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e0b8      	b.n	8007406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d020      	beq.n	80072e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072ac:	4b59      	ldr	r3, [pc, #356]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	4a58      	ldr	r2, [pc, #352]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80072b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072c4:	4b53      	ldr	r3, [pc, #332]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	4a52      	ldr	r2, [pc, #328]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80072ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072d0:	4b50      	ldr	r3, [pc, #320]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	494d      	ldr	r1, [pc, #308]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d044      	beq.n	8007378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d107      	bne.n	8007306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072f6:	4b47      	ldr	r3, [pc, #284]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d119      	bne.n	8007336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e07f      	b.n	8007406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d003      	beq.n	8007316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007312:	2b03      	cmp	r3, #3
 8007314:	d107      	bne.n	8007326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007316:	4b3f      	ldr	r3, [pc, #252]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d109      	bne.n	8007336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e06f      	b.n	8007406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007326:	4b3b      	ldr	r3, [pc, #236]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e067      	b.n	8007406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007336:	4b37      	ldr	r3, [pc, #220]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f023 0203 	bic.w	r2, r3, #3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	4934      	ldr	r1, [pc, #208]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 8007344:	4313      	orrs	r3, r2
 8007346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007348:	f7fd fd6c 	bl	8004e24 <HAL_GetTick>
 800734c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800734e:	e00a      	b.n	8007366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007350:	f7fd fd68 	bl	8004e24 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	f241 3288 	movw	r2, #5000	; 0x1388
 800735e:	4293      	cmp	r3, r2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e04f      	b.n	8007406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007366:	4b2b      	ldr	r3, [pc, #172]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 020c 	and.w	r2, r3, #12
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	429a      	cmp	r2, r3
 8007376:	d1eb      	bne.n	8007350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007378:	4b25      	ldr	r3, [pc, #148]	; (8007410 <HAL_RCC_ClockConfig+0x1b8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d20c      	bcs.n	80073a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007386:	4b22      	ldr	r3, [pc, #136]	; (8007410 <HAL_RCC_ClockConfig+0x1b8>)
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800738e:	4b20      	ldr	r3, [pc, #128]	; (8007410 <HAL_RCC_ClockConfig+0x1b8>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d001      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e032      	b.n	8007406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d008      	beq.n	80073be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073ac:	4b19      	ldr	r3, [pc, #100]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	4916      	ldr	r1, [pc, #88]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0308 	and.w	r3, r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073ca:	4b12      	ldr	r3, [pc, #72]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	490e      	ldr	r1, [pc, #56]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073de:	f000 f821 	bl	8007424 <HAL_RCC_GetSysClockFreq>
 80073e2:	4602      	mov	r2, r0
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <HAL_RCC_ClockConfig+0x1bc>)
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	091b      	lsrs	r3, r3, #4
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	490a      	ldr	r1, [pc, #40]	; (8007418 <HAL_RCC_ClockConfig+0x1c0>)
 80073f0:	5ccb      	ldrb	r3, [r1, r3]
 80073f2:	fa22 f303 	lsr.w	r3, r2, r3
 80073f6:	4a09      	ldr	r2, [pc, #36]	; (800741c <HAL_RCC_ClockConfig+0x1c4>)
 80073f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073fa:	4b09      	ldr	r3, [pc, #36]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fd fccc 	bl	8004d9c <HAL_InitTick>

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	40023c00 	.word	0x40023c00
 8007414:	40023800 	.word	0x40023800
 8007418:	08011c58 	.word	0x08011c58
 800741c:	20000000 	.word	0x20000000
 8007420:	20000004 	.word	0x20000004

08007424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007428:	b090      	sub	sp, #64	; 0x40
 800742a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	637b      	str	r3, [r7, #52]	; 0x34
 8007430:	2300      	movs	r3, #0
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007434:	2300      	movs	r3, #0
 8007436:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800743c:	4b59      	ldr	r3, [pc, #356]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f003 030c 	and.w	r3, r3, #12
 8007444:	2b08      	cmp	r3, #8
 8007446:	d00d      	beq.n	8007464 <HAL_RCC_GetSysClockFreq+0x40>
 8007448:	2b08      	cmp	r3, #8
 800744a:	f200 80a1 	bhi.w	8007590 <HAL_RCC_GetSysClockFreq+0x16c>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_RCC_GetSysClockFreq+0x34>
 8007452:	2b04      	cmp	r3, #4
 8007454:	d003      	beq.n	800745e <HAL_RCC_GetSysClockFreq+0x3a>
 8007456:	e09b      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007458:	4b53      	ldr	r3, [pc, #332]	; (80075a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800745a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800745c:	e09b      	b.n	8007596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800745e:	4b53      	ldr	r3, [pc, #332]	; (80075ac <HAL_RCC_GetSysClockFreq+0x188>)
 8007460:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007462:	e098      	b.n	8007596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007464:	4b4f      	ldr	r3, [pc, #316]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800746e:	4b4d      	ldr	r3, [pc, #308]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d028      	beq.n	80074cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800747a:	4b4a      	ldr	r3, [pc, #296]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	099b      	lsrs	r3, r3, #6
 8007480:	2200      	movs	r2, #0
 8007482:	623b      	str	r3, [r7, #32]
 8007484:	627a      	str	r2, [r7, #36]	; 0x24
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800748c:	2100      	movs	r1, #0
 800748e:	4b47      	ldr	r3, [pc, #284]	; (80075ac <HAL_RCC_GetSysClockFreq+0x188>)
 8007490:	fb03 f201 	mul.w	r2, r3, r1
 8007494:	2300      	movs	r3, #0
 8007496:	fb00 f303 	mul.w	r3, r0, r3
 800749a:	4413      	add	r3, r2
 800749c:	4a43      	ldr	r2, [pc, #268]	; (80075ac <HAL_RCC_GetSysClockFreq+0x188>)
 800749e:	fba0 1202 	umull	r1, r2, r0, r2
 80074a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074a4:	460a      	mov	r2, r1
 80074a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80074a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074aa:	4413      	add	r3, r2
 80074ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b0:	2200      	movs	r2, #0
 80074b2:	61bb      	str	r3, [r7, #24]
 80074b4:	61fa      	str	r2, [r7, #28]
 80074b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80074be:	f7f9 fbe3 	bl	8000c88 <__aeabi_uldivmod>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4613      	mov	r3, r2
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ca:	e053      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074cc:	4b35      	ldr	r3, [pc, #212]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	099b      	lsrs	r3, r3, #6
 80074d2:	2200      	movs	r2, #0
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	617a      	str	r2, [r7, #20]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80074de:	f04f 0b00 	mov.w	fp, #0
 80074e2:	4652      	mov	r2, sl
 80074e4:	465b      	mov	r3, fp
 80074e6:	f04f 0000 	mov.w	r0, #0
 80074ea:	f04f 0100 	mov.w	r1, #0
 80074ee:	0159      	lsls	r1, r3, #5
 80074f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074f4:	0150      	lsls	r0, r2, #5
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	ebb2 080a 	subs.w	r8, r2, sl
 80074fe:	eb63 090b 	sbc.w	r9, r3, fp
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800750e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007512:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007516:	ebb2 0408 	subs.w	r4, r2, r8
 800751a:	eb63 0509 	sbc.w	r5, r3, r9
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	00eb      	lsls	r3, r5, #3
 8007528:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800752c:	00e2      	lsls	r2, r4, #3
 800752e:	4614      	mov	r4, r2
 8007530:	461d      	mov	r5, r3
 8007532:	eb14 030a 	adds.w	r3, r4, sl
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	eb45 030b 	adc.w	r3, r5, fp
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	f04f 0300 	mov.w	r3, #0
 8007546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800754a:	4629      	mov	r1, r5
 800754c:	028b      	lsls	r3, r1, #10
 800754e:	4621      	mov	r1, r4
 8007550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007554:	4621      	mov	r1, r4
 8007556:	028a      	lsls	r2, r1, #10
 8007558:	4610      	mov	r0, r2
 800755a:	4619      	mov	r1, r3
 800755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755e:	2200      	movs	r2, #0
 8007560:	60bb      	str	r3, [r7, #8]
 8007562:	60fa      	str	r2, [r7, #12]
 8007564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007568:	f7f9 fb8e 	bl	8000c88 <__aeabi_uldivmod>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4613      	mov	r3, r2
 8007572:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007574:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	0c1b      	lsrs	r3, r3, #16
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	3301      	adds	r3, #1
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007584:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800758e:	e002      	b.n	8007596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007598:	4618      	mov	r0, r3
 800759a:	3740      	adds	r7, #64	; 0x40
 800759c:	46bd      	mov	sp, r7
 800759e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075a2:	bf00      	nop
 80075a4:	40023800 	.word	0x40023800
 80075a8:	00f42400 	.word	0x00f42400
 80075ac:	017d7840 	.word	0x017d7840

080075b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075b4:	4b03      	ldr	r3, [pc, #12]	; (80075c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80075b6:	681b      	ldr	r3, [r3, #0]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000000 	.word	0x20000000

080075c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075cc:	f7ff fff0 	bl	80075b0 <HAL_RCC_GetHCLKFreq>
 80075d0:	4602      	mov	r2, r0
 80075d2:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	0a9b      	lsrs	r3, r3, #10
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	4903      	ldr	r1, [pc, #12]	; (80075ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80075de:	5ccb      	ldrb	r3, [r1, r3]
 80075e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40023800 	.word	0x40023800
 80075ec:	08011c68 	.word	0x08011c68

080075f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075f4:	f7ff ffdc 	bl	80075b0 <HAL_RCC_GetHCLKFreq>
 80075f8:	4602      	mov	r2, r0
 80075fa:	4b05      	ldr	r3, [pc, #20]	; (8007610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	0b5b      	lsrs	r3, r3, #13
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	4903      	ldr	r1, [pc, #12]	; (8007614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007606:	5ccb      	ldrb	r3, [r1, r3]
 8007608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800760c:	4618      	mov	r0, r3
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40023800 	.word	0x40023800
 8007614:	08011c68 	.word	0x08011c68

08007618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e041      	b.n	80076ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fd f832 	bl	80046a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f001 f876 	bl	8008748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d001      	beq.n	80076d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e046      	b.n	800775e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a23      	ldr	r2, [pc, #140]	; (800776c <HAL_TIM_Base_Start+0xb4>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d022      	beq.n	8007728 <HAL_TIM_Base_Start+0x70>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ea:	d01d      	beq.n	8007728 <HAL_TIM_Base_Start+0x70>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1f      	ldr	r2, [pc, #124]	; (8007770 <HAL_TIM_Base_Start+0xb8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d018      	beq.n	8007728 <HAL_TIM_Base_Start+0x70>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a1e      	ldr	r2, [pc, #120]	; (8007774 <HAL_TIM_Base_Start+0xbc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d013      	beq.n	8007728 <HAL_TIM_Base_Start+0x70>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a1c      	ldr	r2, [pc, #112]	; (8007778 <HAL_TIM_Base_Start+0xc0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00e      	beq.n	8007728 <HAL_TIM_Base_Start+0x70>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a1b      	ldr	r2, [pc, #108]	; (800777c <HAL_TIM_Base_Start+0xc4>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d009      	beq.n	8007728 <HAL_TIM_Base_Start+0x70>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a19      	ldr	r2, [pc, #100]	; (8007780 <HAL_TIM_Base_Start+0xc8>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d004      	beq.n	8007728 <HAL_TIM_Base_Start+0x70>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <HAL_TIM_Base_Start+0xcc>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d111      	bne.n	800774c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b06      	cmp	r3, #6
 8007738:	d010      	beq.n	800775c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0201 	orr.w	r2, r2, #1
 8007748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774a:	e007      	b.n	800775c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0201 	orr.w	r2, r2, #1
 800775a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	40010000 	.word	0x40010000
 8007770:	40000400 	.word	0x40000400
 8007774:	40000800 	.word	0x40000800
 8007778:	40000c00 	.word	0x40000c00
 800777c:	40010400 	.word	0x40010400
 8007780:	40014000 	.word	0x40014000
 8007784:	40001800 	.word	0x40001800

08007788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b01      	cmp	r3, #1
 800779a:	d001      	beq.n	80077a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e04e      	b.n	800783e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0201 	orr.w	r2, r2, #1
 80077b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a23      	ldr	r2, [pc, #140]	; (800784c <HAL_TIM_Base_Start_IT+0xc4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d022      	beq.n	8007808 <HAL_TIM_Base_Start_IT+0x80>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ca:	d01d      	beq.n	8007808 <HAL_TIM_Base_Start_IT+0x80>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a1f      	ldr	r2, [pc, #124]	; (8007850 <HAL_TIM_Base_Start_IT+0xc8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d018      	beq.n	8007808 <HAL_TIM_Base_Start_IT+0x80>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a1e      	ldr	r2, [pc, #120]	; (8007854 <HAL_TIM_Base_Start_IT+0xcc>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d013      	beq.n	8007808 <HAL_TIM_Base_Start_IT+0x80>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1c      	ldr	r2, [pc, #112]	; (8007858 <HAL_TIM_Base_Start_IT+0xd0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00e      	beq.n	8007808 <HAL_TIM_Base_Start_IT+0x80>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a1b      	ldr	r2, [pc, #108]	; (800785c <HAL_TIM_Base_Start_IT+0xd4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d009      	beq.n	8007808 <HAL_TIM_Base_Start_IT+0x80>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a19      	ldr	r2, [pc, #100]	; (8007860 <HAL_TIM_Base_Start_IT+0xd8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d004      	beq.n	8007808 <HAL_TIM_Base_Start_IT+0x80>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a18      	ldr	r2, [pc, #96]	; (8007864 <HAL_TIM_Base_Start_IT+0xdc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d111      	bne.n	800782c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b06      	cmp	r3, #6
 8007818:	d010      	beq.n	800783c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0201 	orr.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800782a:	e007      	b.n	800783c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40010000 	.word	0x40010000
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800
 8007858:	40000c00 	.word	0x40000c00
 800785c:	40010400 	.word	0x40010400
 8007860:	40014000 	.word	0x40014000
 8007864:	40001800 	.word	0x40001800

08007868 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e041      	b.n	80078fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d106      	bne.n	8007894 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f839 	bl	8007906 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3304      	adds	r3, #4
 80078a4:	4619      	mov	r1, r3
 80078a6:	4610      	mov	r0, r2
 80078a8:	f000 ff4e 	bl	8008748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
	...

0800791c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <HAL_TIM_PWM_Start+0x24>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b01      	cmp	r3, #1
 8007936:	bf14      	ite	ne
 8007938:	2301      	movne	r3, #1
 800793a:	2300      	moveq	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	e022      	b.n	8007986 <HAL_TIM_PWM_Start+0x6a>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b04      	cmp	r3, #4
 8007944:	d109      	bne.n	800795a <HAL_TIM_PWM_Start+0x3e>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b01      	cmp	r3, #1
 8007950:	bf14      	ite	ne
 8007952:	2301      	movne	r3, #1
 8007954:	2300      	moveq	r3, #0
 8007956:	b2db      	uxtb	r3, r3
 8007958:	e015      	b.n	8007986 <HAL_TIM_PWM_Start+0x6a>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b08      	cmp	r3, #8
 800795e:	d109      	bne.n	8007974 <HAL_TIM_PWM_Start+0x58>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b01      	cmp	r3, #1
 800796a:	bf14      	ite	ne
 800796c:	2301      	movne	r3, #1
 800796e:	2300      	moveq	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	e008      	b.n	8007986 <HAL_TIM_PWM_Start+0x6a>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b01      	cmp	r3, #1
 800797e:	bf14      	ite	ne
 8007980:	2301      	movne	r3, #1
 8007982:	2300      	moveq	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e07c      	b.n	8007a88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d104      	bne.n	800799e <HAL_TIM_PWM_Start+0x82>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800799c:	e013      	b.n	80079c6 <HAL_TIM_PWM_Start+0xaa>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d104      	bne.n	80079ae <HAL_TIM_PWM_Start+0x92>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079ac:	e00b      	b.n	80079c6 <HAL_TIM_PWM_Start+0xaa>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d104      	bne.n	80079be <HAL_TIM_PWM_Start+0xa2>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079bc:	e003      	b.n	80079c6 <HAL_TIM_PWM_Start+0xaa>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2201      	movs	r2, #1
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 fada 	bl	8008f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a2d      	ldr	r2, [pc, #180]	; (8007a90 <HAL_TIM_PWM_Start+0x174>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d004      	beq.n	80079e8 <HAL_TIM_PWM_Start+0xcc>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a2c      	ldr	r2, [pc, #176]	; (8007a94 <HAL_TIM_PWM_Start+0x178>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d101      	bne.n	80079ec <HAL_TIM_PWM_Start+0xd0>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e000      	b.n	80079ee <HAL_TIM_PWM_Start+0xd2>
 80079ec:	2300      	movs	r3, #0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a22      	ldr	r2, [pc, #136]	; (8007a90 <HAL_TIM_PWM_Start+0x174>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d022      	beq.n	8007a52 <HAL_TIM_PWM_Start+0x136>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a14:	d01d      	beq.n	8007a52 <HAL_TIM_PWM_Start+0x136>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a1f      	ldr	r2, [pc, #124]	; (8007a98 <HAL_TIM_PWM_Start+0x17c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d018      	beq.n	8007a52 <HAL_TIM_PWM_Start+0x136>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a1d      	ldr	r2, [pc, #116]	; (8007a9c <HAL_TIM_PWM_Start+0x180>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d013      	beq.n	8007a52 <HAL_TIM_PWM_Start+0x136>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a1c      	ldr	r2, [pc, #112]	; (8007aa0 <HAL_TIM_PWM_Start+0x184>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d00e      	beq.n	8007a52 <HAL_TIM_PWM_Start+0x136>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a16      	ldr	r2, [pc, #88]	; (8007a94 <HAL_TIM_PWM_Start+0x178>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d009      	beq.n	8007a52 <HAL_TIM_PWM_Start+0x136>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a18      	ldr	r2, [pc, #96]	; (8007aa4 <HAL_TIM_PWM_Start+0x188>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d004      	beq.n	8007a52 <HAL_TIM_PWM_Start+0x136>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a16      	ldr	r2, [pc, #88]	; (8007aa8 <HAL_TIM_PWM_Start+0x18c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d111      	bne.n	8007a76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b06      	cmp	r3, #6
 8007a62:	d010      	beq.n	8007a86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a74:	e007      	b.n	8007a86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f042 0201 	orr.w	r2, r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	40010000 	.word	0x40010000
 8007a94:	40010400 	.word	0x40010400
 8007a98:	40000400 	.word	0x40000400
 8007a9c:	40000800 	.word	0x40000800
 8007aa0:	40000c00 	.word	0x40000c00
 8007aa4:	40014000 	.word	0x40014000
 8007aa8:	40001800 	.word	0x40001800

08007aac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e041      	b.n	8007b42 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f839 	bl	8007b4a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4610      	mov	r0, r2
 8007aec:	f000 fe2c 	bl	8008748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
	...

08007b60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <HAL_TIM_IC_Start_IT+0x1e>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	e013      	b.n	8007ba6 <HAL_TIM_IC_Start_IT+0x46>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d104      	bne.n	8007b8e <HAL_TIM_IC_Start_IT+0x2e>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	e00b      	b.n	8007ba6 <HAL_TIM_IC_Start_IT+0x46>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d104      	bne.n	8007b9e <HAL_TIM_IC_Start_IT+0x3e>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	e003      	b.n	8007ba6 <HAL_TIM_IC_Start_IT+0x46>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d104      	bne.n	8007bb8 <HAL_TIM_IC_Start_IT+0x58>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	e013      	b.n	8007be0 <HAL_TIM_IC_Start_IT+0x80>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d104      	bne.n	8007bc8 <HAL_TIM_IC_Start_IT+0x68>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	e00b      	b.n	8007be0 <HAL_TIM_IC_Start_IT+0x80>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d104      	bne.n	8007bd8 <HAL_TIM_IC_Start_IT+0x78>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	e003      	b.n	8007be0 <HAL_TIM_IC_Start_IT+0x80>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d102      	bne.n	8007bee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007be8:	7b7b      	ldrb	r3, [r7, #13]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d001      	beq.n	8007bf2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e0cc      	b.n	8007d8c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d104      	bne.n	8007c02 <HAL_TIM_IC_Start_IT+0xa2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c00:	e013      	b.n	8007c2a <HAL_TIM_IC_Start_IT+0xca>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d104      	bne.n	8007c12 <HAL_TIM_IC_Start_IT+0xb2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c10:	e00b      	b.n	8007c2a <HAL_TIM_IC_Start_IT+0xca>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d104      	bne.n	8007c22 <HAL_TIM_IC_Start_IT+0xc2>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c20:	e003      	b.n	8007c2a <HAL_TIM_IC_Start_IT+0xca>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <HAL_TIM_IC_Start_IT+0xda>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c38:	e013      	b.n	8007c62 <HAL_TIM_IC_Start_IT+0x102>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d104      	bne.n	8007c4a <HAL_TIM_IC_Start_IT+0xea>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c48:	e00b      	b.n	8007c62 <HAL_TIM_IC_Start_IT+0x102>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d104      	bne.n	8007c5a <HAL_TIM_IC_Start_IT+0xfa>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c58:	e003      	b.n	8007c62 <HAL_TIM_IC_Start_IT+0x102>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b0c      	cmp	r3, #12
 8007c66:	d841      	bhi.n	8007cec <HAL_TIM_IC_Start_IT+0x18c>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <HAL_TIM_IC_Start_IT+0x110>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007ca5 	.word	0x08007ca5
 8007c74:	08007ced 	.word	0x08007ced
 8007c78:	08007ced 	.word	0x08007ced
 8007c7c:	08007ced 	.word	0x08007ced
 8007c80:	08007cb7 	.word	0x08007cb7
 8007c84:	08007ced 	.word	0x08007ced
 8007c88:	08007ced 	.word	0x08007ced
 8007c8c:	08007ced 	.word	0x08007ced
 8007c90:	08007cc9 	.word	0x08007cc9
 8007c94:	08007ced 	.word	0x08007ced
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007ced 	.word	0x08007ced
 8007ca0:	08007cdb 	.word	0x08007cdb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0202 	orr.w	r2, r2, #2
 8007cb2:	60da      	str	r2, [r3, #12]
      break;
 8007cb4:	e01d      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0204 	orr.w	r2, r2, #4
 8007cc4:	60da      	str	r2, [r3, #12]
      break;
 8007cc6:	e014      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0208 	orr.w	r2, r2, #8
 8007cd6:	60da      	str	r2, [r3, #12]
      break;
 8007cd8:	e00b      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0210 	orr.w	r2, r2, #16
 8007ce8:	60da      	str	r2, [r3, #12]
      break;
 8007cea:	e002      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d148      	bne.n	8007d8a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 f941 	bl	8008f88 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a22      	ldr	r2, [pc, #136]	; (8007d94 <HAL_TIM_IC_Start_IT+0x234>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d022      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d18:	d01d      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1e      	ldr	r2, [pc, #120]	; (8007d98 <HAL_TIM_IC_Start_IT+0x238>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d018      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a1c      	ldr	r2, [pc, #112]	; (8007d9c <HAL_TIM_IC_Start_IT+0x23c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d013      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a1b      	ldr	r2, [pc, #108]	; (8007da0 <HAL_TIM_IC_Start_IT+0x240>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00e      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a19      	ldr	r2, [pc, #100]	; (8007da4 <HAL_TIM_IC_Start_IT+0x244>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d009      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a18      	ldr	r2, [pc, #96]	; (8007da8 <HAL_TIM_IC_Start_IT+0x248>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d004      	beq.n	8007d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a16      	ldr	r2, [pc, #88]	; (8007dac <HAL_TIM_IC_Start_IT+0x24c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d111      	bne.n	8007d7a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b06      	cmp	r3, #6
 8007d66:	d010      	beq.n	8007d8a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d78:	e007      	b.n	8007d8a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 0201 	orr.w	r2, r2, #1
 8007d88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40000400 	.word	0x40000400
 8007d9c:	40000800 	.word	0x40000800
 8007da0:	40000c00 	.word	0x40000c00
 8007da4:	40010400 	.word	0x40010400
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40001800 	.word	0x40001800

08007db0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e097      	b.n	8007ef4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d106      	bne.n	8007dde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7fc fd1d 	bl	8004818 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2202      	movs	r2, #2
 8007de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007df4:	f023 0307 	bic.w	r3, r3, #7
 8007df8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4619      	mov	r1, r3
 8007e04:	4610      	mov	r0, r2
 8007e06:	f000 fc9f 	bl	8008748 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	4313      	orrs	r3, r2
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007e50:	f023 030c 	bic.w	r3, r3, #12
 8007e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	011a      	lsls	r2, r3, #4
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	031b      	lsls	r3, r3, #12
 8007e80:	4313      	orrs	r3, r2
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007e96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d110      	bne.n	8007f4e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d102      	bne.n	8007f38 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f32:	7b7b      	ldrb	r3, [r7, #13]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d001      	beq.n	8007f3c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e089      	b.n	8008050 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f4c:	e031      	b.n	8007fb2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d110      	bne.n	8007f76 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d102      	bne.n	8007f60 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f5a:	7b3b      	ldrb	r3, [r7, #12]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d001      	beq.n	8007f64 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e075      	b.n	8008050 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f74:	e01d      	b.n	8007fb2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d108      	bne.n	8007f8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d105      	bne.n	8007f8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f82:	7b7b      	ldrb	r3, [r7, #13]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d102      	bne.n	8007f8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f88:	7b3b      	ldrb	r3, [r7, #12]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d001      	beq.n	8007f92 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e05e      	b.n	8008050 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d010      	beq.n	8007fe0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007fbe:	e01f      	b.n	8008000 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 ffdd 	bl	8008f88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f042 0202 	orr.w	r2, r2, #2
 8007fdc:	60da      	str	r2, [r3, #12]
      break;
 8007fde:	e02e      	b.n	800803e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	2104      	movs	r1, #4
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 ffcd 	bl	8008f88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f042 0204 	orr.w	r2, r2, #4
 8007ffc:	60da      	str	r2, [r3, #12]
      break;
 8007ffe:	e01e      	b.n	800803e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2201      	movs	r2, #1
 8008006:	2100      	movs	r1, #0
 8008008:	4618      	mov	r0, r3
 800800a:	f000 ffbd 	bl	8008f88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2201      	movs	r2, #1
 8008014:	2104      	movs	r1, #4
 8008016:	4618      	mov	r0, r3
 8008018:	f000 ffb6 	bl	8008f88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0202 	orr.w	r2, r2, #2
 800802a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0204 	orr.w	r2, r2, #4
 800803a:	60da      	str	r2, [r3, #12]
      break;
 800803c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0201 	orr.w	r2, r2, #1
 800804c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d020      	beq.n	80080bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01b      	beq.n	80080bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 0202 	mvn.w	r2, #2
 800808c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fa f9c4 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 80080a8:	e005      	b.n	80080b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fb2e 	bl	800870c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fb35 	bl	8008720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f003 0304 	and.w	r3, r3, #4
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d020      	beq.n	8008108 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01b      	beq.n	8008108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f06f 0204 	mvn.w	r2, #4
 80080d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fa f99e 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 80080f4:	e005      	b.n	8008102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fb08 	bl	800870c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fb0f 	bl	8008720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 0308 	and.w	r3, r3, #8
 800810e:	2b00      	cmp	r3, #0
 8008110:	d020      	beq.n	8008154 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f003 0308 	and.w	r3, r3, #8
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01b      	beq.n	8008154 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f06f 0208 	mvn.w	r2, #8
 8008124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2204      	movs	r2, #4
 800812a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7fa f978 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 8008140:	e005      	b.n	800814e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fae2 	bl	800870c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fae9 	bl	8008720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f003 0310 	and.w	r3, r3, #16
 800815a:	2b00      	cmp	r3, #0
 800815c:	d020      	beq.n	80081a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	2b00      	cmp	r3, #0
 8008166:	d01b      	beq.n	80081a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0210 	mvn.w	r2, #16
 8008170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2208      	movs	r2, #8
 8008176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7fa f952 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 800818c:	e005      	b.n	800819a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fabc 	bl	800870c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fac3 	bl	8008720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00c      	beq.n	80081c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d007      	beq.n	80081c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0201 	mvn.w	r2, #1
 80081bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fa f910 	bl	80023e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00c      	beq.n	80081e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d007      	beq.n	80081e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 ffce 	bl	8009184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00c      	beq.n	800820c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d007      	beq.n	800820c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa94 	bl	8008734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f003 0320 	and.w	r3, r3, #32
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00c      	beq.n	8008230 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b00      	cmp	r3, #0
 800821e:	d007      	beq.n	8008230 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0220 	mvn.w	r2, #32
 8008228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 ffa0 	bl	8009170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008252:	2302      	movs	r3, #2
 8008254:	e088      	b.n	8008368 <HAL_TIM_IC_ConfigChannel+0x130>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d11b      	bne.n	800829c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008274:	f000 fcc4 	bl	8008c00 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 020c 	bic.w	r2, r2, #12
 8008286:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6999      	ldr	r1, [r3, #24]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	689a      	ldr	r2, [r3, #8]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	619a      	str	r2, [r3, #24]
 800829a:	e060      	b.n	800835e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d11c      	bne.n	80082dc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80082b2:	f000 fd48 	bl	8008d46 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	699a      	ldr	r2, [r3, #24]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6999      	ldr	r1, [r3, #24]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	021a      	lsls	r2, r3, #8
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	619a      	str	r2, [r3, #24]
 80082da:	e040      	b.n	800835e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b08      	cmp	r3, #8
 80082e0:	d11b      	bne.n	800831a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80082f2:	f000 fd95 	bl	8008e20 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	69da      	ldr	r2, [r3, #28]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 020c 	bic.w	r2, r2, #12
 8008304:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69d9      	ldr	r1, [r3, #28]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	430a      	orrs	r2, r1
 8008316:	61da      	str	r2, [r3, #28]
 8008318:	e021      	b.n	800835e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b0c      	cmp	r3, #12
 800831e:	d11c      	bne.n	800835a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008330:	f000 fdb2 	bl	8008e98 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	69da      	ldr	r2, [r3, #28]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008342:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	69d9      	ldr	r1, [r3, #28]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	021a      	lsls	r2, r3, #8
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	61da      	str	r2, [r3, #28]
 8008358:	e001      	b.n	800835e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008366:	7dfb      	ldrb	r3, [r7, #23]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800838a:	2302      	movs	r3, #2
 800838c:	e0ae      	b.n	80084ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b0c      	cmp	r3, #12
 800839a:	f200 809f 	bhi.w	80084dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800839e:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a4:	080083d9 	.word	0x080083d9
 80083a8:	080084dd 	.word	0x080084dd
 80083ac:	080084dd 	.word	0x080084dd
 80083b0:	080084dd 	.word	0x080084dd
 80083b4:	08008419 	.word	0x08008419
 80083b8:	080084dd 	.word	0x080084dd
 80083bc:	080084dd 	.word	0x080084dd
 80083c0:	080084dd 	.word	0x080084dd
 80083c4:	0800845b 	.word	0x0800845b
 80083c8:	080084dd 	.word	0x080084dd
 80083cc:	080084dd 	.word	0x080084dd
 80083d0:	080084dd 	.word	0x080084dd
 80083d4:	0800849b 	.word	0x0800849b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68b9      	ldr	r1, [r7, #8]
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fa5e 	bl	80088a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	699a      	ldr	r2, [r3, #24]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f042 0208 	orr.w	r2, r2, #8
 80083f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699a      	ldr	r2, [r3, #24]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0204 	bic.w	r2, r2, #4
 8008402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6999      	ldr	r1, [r3, #24]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	691a      	ldr	r2, [r3, #16]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	619a      	str	r2, [r3, #24]
      break;
 8008416:	e064      	b.n	80084e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68b9      	ldr	r1, [r7, #8]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 faae 	bl	8008980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6999      	ldr	r1, [r3, #24]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	021a      	lsls	r2, r3, #8
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	619a      	str	r2, [r3, #24]
      break;
 8008458:	e043      	b.n	80084e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fb03 	bl	8008a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69da      	ldr	r2, [r3, #28]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f042 0208 	orr.w	r2, r2, #8
 8008474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69da      	ldr	r2, [r3, #28]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0204 	bic.w	r2, r2, #4
 8008484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69d9      	ldr	r1, [r3, #28]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	691a      	ldr	r2, [r3, #16]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	61da      	str	r2, [r3, #28]
      break;
 8008498:	e023      	b.n	80084e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fb57 	bl	8008b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69da      	ldr	r2, [r3, #28]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69d9      	ldr	r1, [r3, #28]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	021a      	lsls	r2, r3, #8
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	61da      	str	r2, [r3, #28]
      break;
 80084da:	e002      	b.n	80084e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	75fb      	strb	r3, [r7, #23]
      break;
 80084e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3718      	adds	r7, #24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008508:	2b01      	cmp	r3, #1
 800850a:	d101      	bne.n	8008510 <HAL_TIM_ConfigClockSource+0x1c>
 800850c:	2302      	movs	r3, #2
 800850e:	e0b4      	b.n	800867a <HAL_TIM_ConfigClockSource+0x186>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800852e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008536:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008548:	d03e      	beq.n	80085c8 <HAL_TIM_ConfigClockSource+0xd4>
 800854a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800854e:	f200 8087 	bhi.w	8008660 <HAL_TIM_ConfigClockSource+0x16c>
 8008552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008556:	f000 8086 	beq.w	8008666 <HAL_TIM_ConfigClockSource+0x172>
 800855a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800855e:	d87f      	bhi.n	8008660 <HAL_TIM_ConfigClockSource+0x16c>
 8008560:	2b70      	cmp	r3, #112	; 0x70
 8008562:	d01a      	beq.n	800859a <HAL_TIM_ConfigClockSource+0xa6>
 8008564:	2b70      	cmp	r3, #112	; 0x70
 8008566:	d87b      	bhi.n	8008660 <HAL_TIM_ConfigClockSource+0x16c>
 8008568:	2b60      	cmp	r3, #96	; 0x60
 800856a:	d050      	beq.n	800860e <HAL_TIM_ConfigClockSource+0x11a>
 800856c:	2b60      	cmp	r3, #96	; 0x60
 800856e:	d877      	bhi.n	8008660 <HAL_TIM_ConfigClockSource+0x16c>
 8008570:	2b50      	cmp	r3, #80	; 0x50
 8008572:	d03c      	beq.n	80085ee <HAL_TIM_ConfigClockSource+0xfa>
 8008574:	2b50      	cmp	r3, #80	; 0x50
 8008576:	d873      	bhi.n	8008660 <HAL_TIM_ConfigClockSource+0x16c>
 8008578:	2b40      	cmp	r3, #64	; 0x40
 800857a:	d058      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x13a>
 800857c:	2b40      	cmp	r3, #64	; 0x40
 800857e:	d86f      	bhi.n	8008660 <HAL_TIM_ConfigClockSource+0x16c>
 8008580:	2b30      	cmp	r3, #48	; 0x30
 8008582:	d064      	beq.n	800864e <HAL_TIM_ConfigClockSource+0x15a>
 8008584:	2b30      	cmp	r3, #48	; 0x30
 8008586:	d86b      	bhi.n	8008660 <HAL_TIM_ConfigClockSource+0x16c>
 8008588:	2b20      	cmp	r3, #32
 800858a:	d060      	beq.n	800864e <HAL_TIM_ConfigClockSource+0x15a>
 800858c:	2b20      	cmp	r3, #32
 800858e:	d867      	bhi.n	8008660 <HAL_TIM_ConfigClockSource+0x16c>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d05c      	beq.n	800864e <HAL_TIM_ConfigClockSource+0x15a>
 8008594:	2b10      	cmp	r3, #16
 8008596:	d05a      	beq.n	800864e <HAL_TIM_ConfigClockSource+0x15a>
 8008598:	e062      	b.n	8008660 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085aa:	f000 fccd 	bl	8008f48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	609a      	str	r2, [r3, #8]
      break;
 80085c6:	e04f      	b.n	8008668 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085d8:	f000 fcb6 	bl	8008f48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689a      	ldr	r2, [r3, #8]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085ea:	609a      	str	r2, [r3, #8]
      break;
 80085ec:	e03c      	b.n	8008668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085fa:	461a      	mov	r2, r3
 80085fc:	f000 fb74 	bl	8008ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2150      	movs	r1, #80	; 0x50
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fc83 	bl	8008f12 <TIM_ITRx_SetConfig>
      break;
 800860c:	e02c      	b.n	8008668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800861a:	461a      	mov	r2, r3
 800861c:	f000 fbd0 	bl	8008dc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2160      	movs	r1, #96	; 0x60
 8008626:	4618      	mov	r0, r3
 8008628:	f000 fc73 	bl	8008f12 <TIM_ITRx_SetConfig>
      break;
 800862c:	e01c      	b.n	8008668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800863a:	461a      	mov	r2, r3
 800863c:	f000 fb54 	bl	8008ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2140      	movs	r1, #64	; 0x40
 8008646:	4618      	mov	r0, r3
 8008648:	f000 fc63 	bl	8008f12 <TIM_ITRx_SetConfig>
      break;
 800864c:	e00c      	b.n	8008668 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4619      	mov	r1, r3
 8008658:	4610      	mov	r0, r2
 800865a:	f000 fc5a 	bl	8008f12 <TIM_ITRx_SetConfig>
      break;
 800865e:	e003      	b.n	8008668 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	73fb      	strb	r3, [r7, #15]
      break;
 8008664:	e000      	b.n	8008668 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008666:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008678:	7bfb      	ldrb	r3, [r7, #15]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b0c      	cmp	r3, #12
 8008696:	d831      	bhi.n	80086fc <HAL_TIM_ReadCapturedValue+0x78>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	080086d5 	.word	0x080086d5
 80086a4:	080086fd 	.word	0x080086fd
 80086a8:	080086fd 	.word	0x080086fd
 80086ac:	080086fd 	.word	0x080086fd
 80086b0:	080086df 	.word	0x080086df
 80086b4:	080086fd 	.word	0x080086fd
 80086b8:	080086fd 	.word	0x080086fd
 80086bc:	080086fd 	.word	0x080086fd
 80086c0:	080086e9 	.word	0x080086e9
 80086c4:	080086fd 	.word	0x080086fd
 80086c8:	080086fd 	.word	0x080086fd
 80086cc:	080086fd 	.word	0x080086fd
 80086d0:	080086f3 	.word	0x080086f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086da:	60fb      	str	r3, [r7, #12]

      break;
 80086dc:	e00f      	b.n	80086fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e4:	60fb      	str	r3, [r7, #12]

      break;
 80086e6:	e00a      	b.n	80086fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ee:	60fb      	str	r3, [r7, #12]

      break;
 80086f0:	e005      	b.n	80086fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f8:	60fb      	str	r3, [r7, #12]

      break;
 80086fa:	e000      	b.n	80086fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80086fc:	bf00      	nop
  }

  return tmpreg;
 80086fe:	68fb      	ldr	r3, [r7, #12]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a46      	ldr	r2, [pc, #280]	; (8008874 <TIM_Base_SetConfig+0x12c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d013      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008766:	d00f      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a43      	ldr	r2, [pc, #268]	; (8008878 <TIM_Base_SetConfig+0x130>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00b      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a42      	ldr	r2, [pc, #264]	; (800887c <TIM_Base_SetConfig+0x134>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d007      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a41      	ldr	r2, [pc, #260]	; (8008880 <TIM_Base_SetConfig+0x138>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a40      	ldr	r2, [pc, #256]	; (8008884 <TIM_Base_SetConfig+0x13c>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d108      	bne.n	800879a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a35      	ldr	r2, [pc, #212]	; (8008874 <TIM_Base_SetConfig+0x12c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d02b      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a8:	d027      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a32      	ldr	r2, [pc, #200]	; (8008878 <TIM_Base_SetConfig+0x130>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d023      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a31      	ldr	r2, [pc, #196]	; (800887c <TIM_Base_SetConfig+0x134>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d01f      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a30      	ldr	r2, [pc, #192]	; (8008880 <TIM_Base_SetConfig+0x138>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d01b      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a2f      	ldr	r2, [pc, #188]	; (8008884 <TIM_Base_SetConfig+0x13c>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d017      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a2e      	ldr	r2, [pc, #184]	; (8008888 <TIM_Base_SetConfig+0x140>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d013      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a2d      	ldr	r2, [pc, #180]	; (800888c <TIM_Base_SetConfig+0x144>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00f      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a2c      	ldr	r2, [pc, #176]	; (8008890 <TIM_Base_SetConfig+0x148>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00b      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a2b      	ldr	r2, [pc, #172]	; (8008894 <TIM_Base_SetConfig+0x14c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d007      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a2a      	ldr	r2, [pc, #168]	; (8008898 <TIM_Base_SetConfig+0x150>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d003      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a29      	ldr	r2, [pc, #164]	; (800889c <TIM_Base_SetConfig+0x154>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d108      	bne.n	800880c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a10      	ldr	r2, [pc, #64]	; (8008874 <TIM_Base_SetConfig+0x12c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d003      	beq.n	8008840 <TIM_Base_SetConfig+0xf8>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a12      	ldr	r2, [pc, #72]	; (8008884 <TIM_Base_SetConfig+0x13c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d103      	bne.n	8008848 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b01      	cmp	r3, #1
 8008858:	d105      	bne.n	8008866 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	f023 0201 	bic.w	r2, r3, #1
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	611a      	str	r2, [r3, #16]
  }
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	40010000 	.word	0x40010000
 8008878:	40000400 	.word	0x40000400
 800887c:	40000800 	.word	0x40000800
 8008880:	40000c00 	.word	0x40000c00
 8008884:	40010400 	.word	0x40010400
 8008888:	40014000 	.word	0x40014000
 800888c:	40014400 	.word	0x40014400
 8008890:	40014800 	.word	0x40014800
 8008894:	40001800 	.word	0x40001800
 8008898:	40001c00 	.word	0x40001c00
 800889c:	40002000 	.word	0x40002000

080088a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	f023 0201 	bic.w	r2, r3, #1
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f023 0303 	bic.w	r3, r3, #3
 80088d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f023 0302 	bic.w	r3, r3, #2
 80088e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a20      	ldr	r2, [pc, #128]	; (8008978 <TIM_OC1_SetConfig+0xd8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_OC1_SetConfig+0x64>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a1f      	ldr	r2, [pc, #124]	; (800897c <TIM_OC1_SetConfig+0xdc>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d10c      	bne.n	800891e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f023 0308 	bic.w	r3, r3, #8
 800890a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	4313      	orrs	r3, r2
 8008914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f023 0304 	bic.w	r3, r3, #4
 800891c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a15      	ldr	r2, [pc, #84]	; (8008978 <TIM_OC1_SetConfig+0xd8>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d003      	beq.n	800892e <TIM_OC1_SetConfig+0x8e>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a14      	ldr	r2, [pc, #80]	; (800897c <TIM_OC1_SetConfig+0xdc>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d111      	bne.n	8008952 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800893c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4313      	orrs	r3, r2
 8008950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	621a      	str	r2, [r3, #32]
}
 800896c:	bf00      	nop
 800896e:	371c      	adds	r7, #28
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	40010000 	.word	0x40010000
 800897c:	40010400 	.word	0x40010400

08008980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	f023 0210 	bic.w	r2, r3, #16
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	021b      	lsls	r3, r3, #8
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f023 0320 	bic.w	r3, r3, #32
 80089ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	011b      	lsls	r3, r3, #4
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a22      	ldr	r2, [pc, #136]	; (8008a64 <TIM_OC2_SetConfig+0xe4>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d003      	beq.n	80089e8 <TIM_OC2_SetConfig+0x68>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a21      	ldr	r2, [pc, #132]	; (8008a68 <TIM_OC2_SetConfig+0xe8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d10d      	bne.n	8008a04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a17      	ldr	r2, [pc, #92]	; (8008a64 <TIM_OC2_SetConfig+0xe4>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d003      	beq.n	8008a14 <TIM_OC2_SetConfig+0x94>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a16      	ldr	r2, [pc, #88]	; (8008a68 <TIM_OC2_SetConfig+0xe8>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d113      	bne.n	8008a3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	621a      	str	r2, [r3, #32]
}
 8008a56:	bf00      	nop
 8008a58:	371c      	adds	r7, #28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	40010000 	.word	0x40010000
 8008a68:	40010400 	.word	0x40010400

08008a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0303 	bic.w	r3, r3, #3
 8008aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a21      	ldr	r2, [pc, #132]	; (8008b4c <TIM_OC3_SetConfig+0xe0>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d003      	beq.n	8008ad2 <TIM_OC3_SetConfig+0x66>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a20      	ldr	r2, [pc, #128]	; (8008b50 <TIM_OC3_SetConfig+0xe4>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d10d      	bne.n	8008aee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	021b      	lsls	r3, r3, #8
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a16      	ldr	r2, [pc, #88]	; (8008b4c <TIM_OC3_SetConfig+0xe0>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d003      	beq.n	8008afe <TIM_OC3_SetConfig+0x92>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a15      	ldr	r2, [pc, #84]	; (8008b50 <TIM_OC3_SetConfig+0xe4>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d113      	bne.n	8008b26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	011b      	lsls	r3, r3, #4
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	011b      	lsls	r3, r3, #4
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	621a      	str	r2, [r3, #32]
}
 8008b40:	bf00      	nop
 8008b42:	371c      	adds	r7, #28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	40010400 	.word	0x40010400

08008b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b087      	sub	sp, #28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	021b      	lsls	r3, r3, #8
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	031b      	lsls	r3, r3, #12
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a12      	ldr	r2, [pc, #72]	; (8008bf8 <TIM_OC4_SetConfig+0xa4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d003      	beq.n	8008bbc <TIM_OC4_SetConfig+0x68>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a11      	ldr	r2, [pc, #68]	; (8008bfc <TIM_OC4_SetConfig+0xa8>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d109      	bne.n	8008bd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	019b      	lsls	r3, r3, #6
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	40010000 	.word	0x40010000
 8008bfc:	40010400 	.word	0x40010400

08008c00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f023 0201 	bic.w	r2, r3, #1
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	4a28      	ldr	r2, [pc, #160]	; (8008ccc <TIM_TI1_SetConfig+0xcc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d01b      	beq.n	8008c66 <TIM_TI1_SetConfig+0x66>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c34:	d017      	beq.n	8008c66 <TIM_TI1_SetConfig+0x66>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	4a25      	ldr	r2, [pc, #148]	; (8008cd0 <TIM_TI1_SetConfig+0xd0>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d013      	beq.n	8008c66 <TIM_TI1_SetConfig+0x66>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4a24      	ldr	r2, [pc, #144]	; (8008cd4 <TIM_TI1_SetConfig+0xd4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d00f      	beq.n	8008c66 <TIM_TI1_SetConfig+0x66>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4a23      	ldr	r2, [pc, #140]	; (8008cd8 <TIM_TI1_SetConfig+0xd8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00b      	beq.n	8008c66 <TIM_TI1_SetConfig+0x66>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4a22      	ldr	r2, [pc, #136]	; (8008cdc <TIM_TI1_SetConfig+0xdc>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d007      	beq.n	8008c66 <TIM_TI1_SetConfig+0x66>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4a21      	ldr	r2, [pc, #132]	; (8008ce0 <TIM_TI1_SetConfig+0xe0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d003      	beq.n	8008c66 <TIM_TI1_SetConfig+0x66>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4a20      	ldr	r2, [pc, #128]	; (8008ce4 <TIM_TI1_SetConfig+0xe4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d101      	bne.n	8008c6a <TIM_TI1_SetConfig+0x6a>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <TIM_TI1_SetConfig+0x6c>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d008      	beq.n	8008c82 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	e003      	b.n	8008c8a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	011b      	lsls	r3, r3, #4
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f023 030a 	bic.w	r3, r3, #10
 8008ca4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f003 030a 	and.w	r3, r3, #10
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	621a      	str	r2, [r3, #32]
}
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40010000 	.word	0x40010000
 8008cd0:	40000400 	.word	0x40000400
 8008cd4:	40000800 	.word	0x40000800
 8008cd8:	40000c00 	.word	0x40000c00
 8008cdc:	40010400 	.word	0x40010400
 8008ce0:	40014000 	.word	0x40014000
 8008ce4:	40001800 	.word	0x40001800

08008ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	f023 0201 	bic.w	r2, r3, #1
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	011b      	lsls	r3, r3, #4
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f023 030a 	bic.w	r3, r3, #10
 8008d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	621a      	str	r2, [r3, #32]
}
 8008d3a:	bf00      	nop
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b087      	sub	sp, #28
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
 8008d52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	f023 0210 	bic.w	r2, r3, #16
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	021b      	lsls	r3, r3, #8
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	031b      	lsls	r3, r3, #12
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d98:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	011b      	lsls	r3, r3, #4
 8008d9e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	621a      	str	r2, [r3, #32]
}
 8008db4:	bf00      	nop
 8008db6:	371c      	adds	r7, #28
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	f023 0210 	bic.w	r2, r3, #16
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	031b      	lsls	r3, r3, #12
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	621a      	str	r2, [r3, #32]
}
 8008e14:	bf00      	nop
 8008e16:	371c      	adds	r7, #28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f023 0303 	bic.w	r3, r3, #3
 8008e4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	011b      	lsls	r3, r3, #4
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008e70:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	621a      	str	r2, [r3, #32]
}
 8008e8c:	bf00      	nop
 8008e8e:	371c      	adds	r7, #28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ec4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ed6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	031b      	lsls	r3, r3, #12
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008eea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	031b      	lsls	r3, r3, #12
 8008ef0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	621a      	str	r2, [r3, #32]
}
 8008f06:	bf00      	nop
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b085      	sub	sp, #20
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	f043 0307 	orr.w	r3, r3, #7
 8008f34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	609a      	str	r2, [r3, #8]
}
 8008f3c:	bf00      	nop
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	021a      	lsls	r2, r3, #8
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	609a      	str	r2, [r3, #8]
}
 8008f7c:	bf00      	nop
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	f003 031f 	and.w	r3, r3, #31
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6a1a      	ldr	r2, [r3, #32]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	43db      	mvns	r3, r3
 8008faa:	401a      	ands	r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a1a      	ldr	r2, [r3, #32]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f003 031f 	and.w	r3, r3, #31
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc0:	431a      	orrs	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	621a      	str	r2, [r3, #32]
}
 8008fc6:	bf00      	nop
 8008fc8:	371c      	adds	r7, #28
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
	...

08008fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e05a      	b.n	80090a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a21      	ldr	r2, [pc, #132]	; (80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d022      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009038:	d01d      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a1d      	ldr	r2, [pc, #116]	; (80090b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d018      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a1b      	ldr	r2, [pc, #108]	; (80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d013      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a1a      	ldr	r2, [pc, #104]	; (80090bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00e      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a18      	ldr	r2, [pc, #96]	; (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d009      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a17      	ldr	r2, [pc, #92]	; (80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d004      	beq.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a15      	ldr	r2, [pc, #84]	; (80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d10c      	bne.n	8009090 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800907c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	4313      	orrs	r3, r2
 8009086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40010000 	.word	0x40010000
 80090b4:	40000400 	.word	0x40000400
 80090b8:	40000800 	.word	0x40000800
 80090bc:	40000c00 	.word	0x40000c00
 80090c0:	40010400 	.word	0x40010400
 80090c4:	40014000 	.word	0x40014000
 80090c8:	40001800 	.word	0x40001800

080090cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d101      	bne.n	80090e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090e4:	2302      	movs	r3, #2
 80090e6:	e03d      	b.n	8009164 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	4313      	orrs	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	4313      	orrs	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4313      	orrs	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	4313      	orrs	r3, r2
 8009142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	69db      	ldr	r3, [r3, #28]
 800914e:	4313      	orrs	r3, r2
 8009150:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e042      	b.n	8009230 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d106      	bne.n	80091c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7fb fc26 	bl	8004a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2224      	movs	r2, #36	; 0x24
 80091c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fdbd 	bl	8009d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	691a      	ldr	r2, [r3, #16]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	695a      	ldr	r2, [r3, #20]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2220      	movs	r2, #32
 800921c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2220      	movs	r2, #32
 8009224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08a      	sub	sp, #40	; 0x28
 800923c:	af02      	add	r7, sp, #8
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	4613      	mov	r3, r2
 8009246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009248:	2300      	movs	r3, #0
 800924a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b20      	cmp	r3, #32
 8009256:	d175      	bne.n	8009344 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <HAL_UART_Transmit+0x2c>
 800925e:	88fb      	ldrh	r3, [r7, #6]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e06e      	b.n	8009346 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2221      	movs	r2, #33	; 0x21
 8009272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009276:	f7fb fdd5 	bl	8004e24 <HAL_GetTick>
 800927a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	88fa      	ldrh	r2, [r7, #6]
 8009280:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	88fa      	ldrh	r2, [r7, #6]
 8009286:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009290:	d108      	bne.n	80092a4 <HAL_UART_Transmit+0x6c>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d104      	bne.n	80092a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	61bb      	str	r3, [r7, #24]
 80092a2:	e003      	b.n	80092ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092a8:	2300      	movs	r3, #0
 80092aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80092ac:	e02e      	b.n	800930c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2200      	movs	r2, #0
 80092b6:	2180      	movs	r1, #128	; 0x80
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 fb1f 	bl	80098fc <UART_WaitOnFlagUntilTimeout>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d005      	beq.n	80092d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e03a      	b.n	8009346 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10b      	bne.n	80092ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	3302      	adds	r3, #2
 80092ea:	61bb      	str	r3, [r7, #24]
 80092ec:	e007      	b.n	80092fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	781a      	ldrb	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	3301      	adds	r3, #1
 80092fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009302:	b29b      	uxth	r3, r3
 8009304:	3b01      	subs	r3, #1
 8009306:	b29a      	uxth	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009310:	b29b      	uxth	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1cb      	bne.n	80092ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2200      	movs	r2, #0
 800931e:	2140      	movs	r1, #64	; 0x40
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 faeb 	bl	80098fc <UART_WaitOnFlagUntilTimeout>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2220      	movs	r2, #32
 8009330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	e006      	b.n	8009346 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	e000      	b.n	8009346 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009344:	2302      	movs	r3, #2
  }
}
 8009346:	4618      	mov	r0, r3
 8009348:	3720      	adds	r7, #32
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	4613      	mov	r3, r2
 800935a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b20      	cmp	r3, #32
 8009366:	d112      	bne.n	800938e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <HAL_UART_Receive_IT+0x26>
 800936e:	88fb      	ldrh	r3, [r7, #6]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e00b      	b.n	8009390 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	461a      	mov	r2, r3
 8009382:	68b9      	ldr	r1, [r7, #8]
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 fb12 	bl	80099ae <UART_Start_Receive_IT>
 800938a:	4603      	mov	r3, r0
 800938c:	e000      	b.n	8009390 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800938e:	2302      	movs	r3, #2
  }
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b0ba      	sub	sp, #232	; 0xe8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80093be:	2300      	movs	r3, #0
 80093c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80093ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ce:	f003 030f 	and.w	r3, r3, #15
 80093d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80093d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10f      	bne.n	80093fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d009      	beq.n	80093fe <HAL_UART_IRQHandler+0x66>
 80093ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fbf2 	bl	8009be0 <UART_Receive_IT>
      return;
 80093fc:	e25b      	b.n	80098b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80093fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 80de 	beq.w	80095c4 <HAL_UART_IRQHandler+0x22c>
 8009408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800940c:	f003 0301 	and.w	r3, r3, #1
 8009410:	2b00      	cmp	r3, #0
 8009412:	d106      	bne.n	8009422 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009418:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 80d1 	beq.w	80095c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00b      	beq.n	8009446 <HAL_UART_IRQHandler+0xae>
 800942e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009436:	2b00      	cmp	r3, #0
 8009438:	d005      	beq.n	8009446 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943e:	f043 0201 	orr.w	r2, r3, #1
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800944a:	f003 0304 	and.w	r3, r3, #4
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00b      	beq.n	800946a <HAL_UART_IRQHandler+0xd2>
 8009452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	2b00      	cmp	r3, #0
 800945c:	d005      	beq.n	800946a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009462:	f043 0202 	orr.w	r2, r3, #2
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800946a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00b      	beq.n	800948e <HAL_UART_IRQHandler+0xf6>
 8009476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	d005      	beq.n	800948e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009486:	f043 0204 	orr.w	r2, r3, #4
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800948e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009492:	f003 0308 	and.w	r3, r3, #8
 8009496:	2b00      	cmp	r3, #0
 8009498:	d011      	beq.n	80094be <HAL_UART_IRQHandler+0x126>
 800949a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800949e:	f003 0320 	and.w	r3, r3, #32
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d105      	bne.n	80094b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80094a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b6:	f043 0208 	orr.w	r2, r3, #8
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 81f2 	beq.w	80098ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094cc:	f003 0320 	and.w	r3, r3, #32
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d008      	beq.n	80094e6 <HAL_UART_IRQHandler+0x14e>
 80094d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094d8:	f003 0320 	and.w	r3, r3, #32
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fb7d 	bl	8009be0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f0:	2b40      	cmp	r3, #64	; 0x40
 80094f2:	bf0c      	ite	eq
 80094f4:	2301      	moveq	r3, #1
 80094f6:	2300      	movne	r3, #0
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009502:	f003 0308 	and.w	r3, r3, #8
 8009506:	2b00      	cmp	r3, #0
 8009508:	d103      	bne.n	8009512 <HAL_UART_IRQHandler+0x17a>
 800950a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800950e:	2b00      	cmp	r3, #0
 8009510:	d04f      	beq.n	80095b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa85 	bl	8009a22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009522:	2b40      	cmp	r3, #64	; 0x40
 8009524:	d141      	bne.n	80095aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3314      	adds	r3, #20
 800952c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800953c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3314      	adds	r3, #20
 800954e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009552:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800955e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800956a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1d9      	bne.n	8009526 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009576:	2b00      	cmp	r3, #0
 8009578:	d013      	beq.n	80095a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800957e:	4a7e      	ldr	r2, [pc, #504]	; (8009778 <HAL_UART_IRQHandler+0x3e0>)
 8009580:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009586:	4618      	mov	r0, r3
 8009588:	f7fc f9c9 	bl	800591e <HAL_DMA_Abort_IT>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d016      	beq.n	80095c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a0:	e00e      	b.n	80095c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f994 	bl	80098d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a8:	e00a      	b.n	80095c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f990 	bl	80098d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b0:	e006      	b.n	80095c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f98c 	bl	80098d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80095be:	e175      	b.n	80098ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c0:	bf00      	nop
    return;
 80095c2:	e173      	b.n	80098ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	f040 814f 	bne.w	800986c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80095ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d2:	f003 0310 	and.w	r3, r3, #16
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 8148 	beq.w	800986c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80095dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095e0:	f003 0310 	and.w	r3, r3, #16
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 8141 	beq.w	800986c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095ea:	2300      	movs	r3, #0
 80095ec:	60bb      	str	r3, [r7, #8]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	60bb      	str	r3, [r7, #8]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	60bb      	str	r3, [r7, #8]
 80095fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960a:	2b40      	cmp	r3, #64	; 0x40
 800960c:	f040 80b6 	bne.w	800977c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800961c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 8145 	beq.w	80098b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800962a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800962e:	429a      	cmp	r2, r3
 8009630:	f080 813e 	bcs.w	80098b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800963a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009646:	f000 8088 	beq.w	800975a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	330c      	adds	r3, #12
 8009650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	330c      	adds	r3, #12
 8009672:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009676:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800967a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800968e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1d9      	bne.n	800964a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3314      	adds	r3, #20
 800969c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096a0:	e853 3f00 	ldrex	r3, [r3]
 80096a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80096a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096a8:	f023 0301 	bic.w	r3, r3, #1
 80096ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3314      	adds	r3, #20
 80096b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80096ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80096be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80096c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80096c6:	e841 2300 	strex	r3, r2, [r1]
 80096ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80096cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e1      	bne.n	8009696 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3314      	adds	r3, #20
 80096d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3314      	adds	r3, #20
 80096f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80096f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e3      	bne.n	80096d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2220      	movs	r2, #32
 800970e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	330c      	adds	r3, #12
 800971e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800972a:	f023 0310 	bic.w	r3, r3, #16
 800972e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	330c      	adds	r3, #12
 8009738:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800973c:	65ba      	str	r2, [r7, #88]	; 0x58
 800973e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800974a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e3      	bne.n	8009718 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009754:	4618      	mov	r0, r3
 8009756:	f7fc f872 	bl	800583e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2202      	movs	r2, #2
 800975e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009768:	b29b      	uxth	r3, r3
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	b29b      	uxth	r3, r3
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f8b7 	bl	80098e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009776:	e09b      	b.n	80098b0 <HAL_UART_IRQHandler+0x518>
 8009778:	08009ae9 	.word	0x08009ae9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009784:	b29b      	uxth	r3, r3
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009790:	b29b      	uxth	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 808e 	beq.w	80098b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 8089 	beq.w	80098b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	330c      	adds	r3, #12
 80097a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	330c      	adds	r3, #12
 80097c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80097c6:	647a      	str	r2, [r7, #68]	; 0x44
 80097c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097ce:	e841 2300 	strex	r3, r2, [r1]
 80097d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1e3      	bne.n	80097a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3314      	adds	r3, #20
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	e853 3f00 	ldrex	r3, [r3]
 80097e8:	623b      	str	r3, [r7, #32]
   return(result);
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	f023 0301 	bic.w	r3, r3, #1
 80097f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3314      	adds	r3, #20
 80097fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80097fe:	633a      	str	r2, [r7, #48]	; 0x30
 8009800:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009806:	e841 2300 	strex	r3, r2, [r1]
 800980a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e3      	bne.n	80097da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2220      	movs	r2, #32
 8009816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	330c      	adds	r3, #12
 8009826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	e853 3f00 	ldrex	r3, [r3]
 800982e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f023 0310 	bic.w	r3, r3, #16
 8009836:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	330c      	adds	r3, #12
 8009840:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009844:	61fa      	str	r2, [r7, #28]
 8009846:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	69b9      	ldr	r1, [r7, #24]
 800984a:	69fa      	ldr	r2, [r7, #28]
 800984c:	e841 2300 	strex	r3, r2, [r1]
 8009850:	617b      	str	r3, [r7, #20]
   return(result);
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e3      	bne.n	8009820 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800985e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f83d 	bl	80098e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800986a:	e023      	b.n	80098b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800986c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009874:	2b00      	cmp	r3, #0
 8009876:	d009      	beq.n	800988c <HAL_UART_IRQHandler+0x4f4>
 8009878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800987c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f943 	bl	8009b10 <UART_Transmit_IT>
    return;
 800988a:	e014      	b.n	80098b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800988c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00e      	beq.n	80098b6 <HAL_UART_IRQHandler+0x51e>
 8009898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800989c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d008      	beq.n	80098b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f983 	bl	8009bb0 <UART_EndTransmit_IT>
    return;
 80098aa:	e004      	b.n	80098b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80098ac:	bf00      	nop
 80098ae:	e002      	b.n	80098b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80098b0:	bf00      	nop
 80098b2:	e000      	b.n	80098b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80098b4:	bf00      	nop
  }
}
 80098b6:	37e8      	adds	r7, #232	; 0xe8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	603b      	str	r3, [r7, #0]
 8009908:	4613      	mov	r3, r2
 800990a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800990c:	e03b      	b.n	8009986 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d037      	beq.n	8009986 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009916:	f7fb fa85 	bl	8004e24 <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	6a3a      	ldr	r2, [r7, #32]
 8009922:	429a      	cmp	r2, r3
 8009924:	d302      	bcc.n	800992c <UART_WaitOnFlagUntilTimeout+0x30>
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e03a      	b.n	80099a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	f003 0304 	and.w	r3, r3, #4
 800993a:	2b00      	cmp	r3, #0
 800993c:	d023      	beq.n	8009986 <UART_WaitOnFlagUntilTimeout+0x8a>
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b80      	cmp	r3, #128	; 0x80
 8009942:	d020      	beq.n	8009986 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2b40      	cmp	r3, #64	; 0x40
 8009948:	d01d      	beq.n	8009986 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0308 	and.w	r3, r3, #8
 8009954:	2b08      	cmp	r3, #8
 8009956:	d116      	bne.n	8009986 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009958:	2300      	movs	r3, #0
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	617b      	str	r3, [r7, #20]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 f857 	bl	8009a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2208      	movs	r2, #8
 8009978:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e00f      	b.n	80099a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	4013      	ands	r3, r2
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	429a      	cmp	r2, r3
 8009994:	bf0c      	ite	eq
 8009996:	2301      	moveq	r3, #1
 8009998:	2300      	movne	r3, #0
 800999a:	b2db      	uxtb	r3, r3
 800999c:	461a      	mov	r2, r3
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d0b4      	beq.n	800990e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	4613      	mov	r3, r2
 80099ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	88fa      	ldrh	r2, [r7, #6]
 80099c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	88fa      	ldrh	r2, [r7, #6]
 80099cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2222      	movs	r2, #34	; 0x22
 80099d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d007      	beq.n	80099f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	695a      	ldr	r2, [r3, #20]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f042 0201 	orr.w	r2, r2, #1
 8009a02:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68da      	ldr	r2, [r3, #12]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f042 0220 	orr.w	r2, r2, #32
 8009a12:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b095      	sub	sp, #84	; 0x54
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	330c      	adds	r3, #12
 8009a30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	330c      	adds	r3, #12
 8009a48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a4a:	643a      	str	r2, [r7, #64]	; 0x40
 8009a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e5      	bne.n	8009a2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3314      	adds	r3, #20
 8009a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	f023 0301 	bic.w	r3, r3, #1
 8009a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3314      	adds	r3, #20
 8009a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e5      	bne.n	8009a5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d119      	bne.n	8009ace <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	330c      	adds	r3, #12
 8009aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	f023 0310 	bic.w	r3, r3, #16
 8009ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	330c      	adds	r3, #12
 8009ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009aba:	61ba      	str	r2, [r7, #24]
 8009abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	6979      	ldr	r1, [r7, #20]
 8009ac0:	69ba      	ldr	r2, [r7, #24]
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e5      	bne.n	8009a9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009adc:	bf00      	nop
 8009ade:	3754      	adds	r7, #84	; 0x54
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f7ff fee4 	bl	80098d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b08:	bf00      	nop
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b21      	cmp	r3, #33	; 0x21
 8009b22:	d13e      	bne.n	8009ba2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b2c:	d114      	bne.n	8009b58 <UART_Transmit_IT+0x48>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d110      	bne.n	8009b58 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	881b      	ldrh	r3, [r3, #0]
 8009b40:	461a      	mov	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	1c9a      	adds	r2, r3, #2
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	621a      	str	r2, [r3, #32]
 8009b56:	e008      	b.n	8009b6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a1b      	ldr	r3, [r3, #32]
 8009b5c:	1c59      	adds	r1, r3, #1
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	6211      	str	r1, [r2, #32]
 8009b62:	781a      	ldrb	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	4619      	mov	r1, r3
 8009b78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10f      	bne.n	8009b9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68da      	ldr	r2, [r3, #12]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68da      	ldr	r2, [r3, #12]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	e000      	b.n	8009ba4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ba2:	2302      	movs	r3, #2
  }
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2220      	movs	r2, #32
 8009bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7ff fe73 	bl	80098bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08c      	sub	sp, #48	; 0x30
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b22      	cmp	r3, #34	; 0x22
 8009bf2:	f040 80ae 	bne.w	8009d52 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bfe:	d117      	bne.n	8009c30 <UART_Receive_IT+0x50>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d113      	bne.n	8009c30 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c10:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c28:	1c9a      	adds	r2, r3, #2
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	629a      	str	r2, [r3, #40]	; 0x28
 8009c2e:	e026      	b.n	8009c7e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009c36:	2300      	movs	r3, #0
 8009c38:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c42:	d007      	beq.n	8009c54 <UART_Receive_IT+0x74>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10a      	bne.n	8009c62 <UART_Receive_IT+0x82>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d106      	bne.n	8009c62 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5e:	701a      	strb	r2, [r3, #0]
 8009c60:	e008      	b.n	8009c74 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d15d      	bne.n	8009d4e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68da      	ldr	r2, [r3, #12]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 0220 	bic.w	r2, r2, #32
 8009ca0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	695a      	ldr	r2, [r3, #20]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 0201 	bic.w	r2, r2, #1
 8009cc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d135      	bne.n	8009d44 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	330c      	adds	r3, #12
 8009ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	613b      	str	r3, [r7, #16]
   return(result);
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	f023 0310 	bic.w	r3, r3, #16
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	330c      	adds	r3, #12
 8009cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cfe:	623a      	str	r2, [r7, #32]
 8009d00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	69f9      	ldr	r1, [r7, #28]
 8009d04:	6a3a      	ldr	r2, [r7, #32]
 8009d06:	e841 2300 	strex	r3, r2, [r1]
 8009d0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1e5      	bne.n	8009cde <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0310 	and.w	r3, r3, #16
 8009d1c:	2b10      	cmp	r3, #16
 8009d1e:	d10a      	bne.n	8009d36 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d20:	2300      	movs	r3, #0
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	60fb      	str	r3, [r7, #12]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7ff fdd1 	bl	80098e4 <HAL_UARTEx_RxEventCallback>
 8009d42:	e002      	b.n	8009d4a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7f8 fb1f 	bl	8002388 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e002      	b.n	8009d54 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	e000      	b.n	8009d54 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009d52:	2302      	movs	r3, #2
  }
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3730      	adds	r7, #48	; 0x30
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d60:	b0c0      	sub	sp, #256	; 0x100
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d78:	68d9      	ldr	r1, [r3, #12]
 8009d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	ea40 0301 	orr.w	r3, r0, r1
 8009d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	431a      	orrs	r2, r3
 8009d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	431a      	orrs	r2, r3
 8009d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009db4:	f021 010c 	bic.w	r1, r1, #12
 8009db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009dc2:	430b      	orrs	r3, r1
 8009dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd6:	6999      	ldr	r1, [r3, #24]
 8009dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	ea40 0301 	orr.w	r3, r0, r1
 8009de2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	4b8f      	ldr	r3, [pc, #572]	; (800a028 <UART_SetConfig+0x2cc>)
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d005      	beq.n	8009dfc <UART_SetConfig+0xa0>
 8009df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	4b8d      	ldr	r3, [pc, #564]	; (800a02c <UART_SetConfig+0x2d0>)
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d104      	bne.n	8009e06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009dfc:	f7fd fbf8 	bl	80075f0 <HAL_RCC_GetPCLK2Freq>
 8009e00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009e04:	e003      	b.n	8009e0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e06:	f7fd fbdf 	bl	80075c8 <HAL_RCC_GetPCLK1Freq>
 8009e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e18:	f040 810c 	bne.w	800a034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009e2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009e2e:	4622      	mov	r2, r4
 8009e30:	462b      	mov	r3, r5
 8009e32:	1891      	adds	r1, r2, r2
 8009e34:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e36:	415b      	adcs	r3, r3
 8009e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e3e:	4621      	mov	r1, r4
 8009e40:	eb12 0801 	adds.w	r8, r2, r1
 8009e44:	4629      	mov	r1, r5
 8009e46:	eb43 0901 	adc.w	r9, r3, r1
 8009e4a:	f04f 0200 	mov.w	r2, #0
 8009e4e:	f04f 0300 	mov.w	r3, #0
 8009e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e5e:	4690      	mov	r8, r2
 8009e60:	4699      	mov	r9, r3
 8009e62:	4623      	mov	r3, r4
 8009e64:	eb18 0303 	adds.w	r3, r8, r3
 8009e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e6c:	462b      	mov	r3, r5
 8009e6e:	eb49 0303 	adc.w	r3, r9, r3
 8009e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	18db      	adds	r3, r3, r3
 8009e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e90:	4613      	mov	r3, r2
 8009e92:	eb42 0303 	adc.w	r3, r2, r3
 8009e96:	657b      	str	r3, [r7, #84]	; 0x54
 8009e98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009ea0:	f7f6 fef2 	bl	8000c88 <__aeabi_uldivmod>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4b61      	ldr	r3, [pc, #388]	; (800a030 <UART_SetConfig+0x2d4>)
 8009eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8009eae:	095b      	lsrs	r3, r3, #5
 8009eb0:	011c      	lsls	r4, r3, #4
 8009eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ebc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009ec4:	4642      	mov	r2, r8
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	1891      	adds	r1, r2, r2
 8009eca:	64b9      	str	r1, [r7, #72]	; 0x48
 8009ecc:	415b      	adcs	r3, r3
 8009ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ed4:	4641      	mov	r1, r8
 8009ed6:	eb12 0a01 	adds.w	sl, r2, r1
 8009eda:	4649      	mov	r1, r9
 8009edc:	eb43 0b01 	adc.w	fp, r3, r1
 8009ee0:	f04f 0200 	mov.w	r2, #0
 8009ee4:	f04f 0300 	mov.w	r3, #0
 8009ee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009eec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ef4:	4692      	mov	sl, r2
 8009ef6:	469b      	mov	fp, r3
 8009ef8:	4643      	mov	r3, r8
 8009efa:	eb1a 0303 	adds.w	r3, sl, r3
 8009efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f02:	464b      	mov	r3, r9
 8009f04:	eb4b 0303 	adc.w	r3, fp, r3
 8009f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009f1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f20:	460b      	mov	r3, r1
 8009f22:	18db      	adds	r3, r3, r3
 8009f24:	643b      	str	r3, [r7, #64]	; 0x40
 8009f26:	4613      	mov	r3, r2
 8009f28:	eb42 0303 	adc.w	r3, r2, r3
 8009f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009f36:	f7f6 fea7 	bl	8000c88 <__aeabi_uldivmod>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4611      	mov	r1, r2
 8009f40:	4b3b      	ldr	r3, [pc, #236]	; (800a030 <UART_SetConfig+0x2d4>)
 8009f42:	fba3 2301 	umull	r2, r3, r3, r1
 8009f46:	095b      	lsrs	r3, r3, #5
 8009f48:	2264      	movs	r2, #100	; 0x64
 8009f4a:	fb02 f303 	mul.w	r3, r2, r3
 8009f4e:	1acb      	subs	r3, r1, r3
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009f56:	4b36      	ldr	r3, [pc, #216]	; (800a030 <UART_SetConfig+0x2d4>)
 8009f58:	fba3 2302 	umull	r2, r3, r3, r2
 8009f5c:	095b      	lsrs	r3, r3, #5
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f64:	441c      	add	r4, r3
 8009f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009f78:	4642      	mov	r2, r8
 8009f7a:	464b      	mov	r3, r9
 8009f7c:	1891      	adds	r1, r2, r2
 8009f7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f80:	415b      	adcs	r3, r3
 8009f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f88:	4641      	mov	r1, r8
 8009f8a:	1851      	adds	r1, r2, r1
 8009f8c:	6339      	str	r1, [r7, #48]	; 0x30
 8009f8e:	4649      	mov	r1, r9
 8009f90:	414b      	adcs	r3, r1
 8009f92:	637b      	str	r3, [r7, #52]	; 0x34
 8009f94:	f04f 0200 	mov.w	r2, #0
 8009f98:	f04f 0300 	mov.w	r3, #0
 8009f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009fa0:	4659      	mov	r1, fp
 8009fa2:	00cb      	lsls	r3, r1, #3
 8009fa4:	4651      	mov	r1, sl
 8009fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009faa:	4651      	mov	r1, sl
 8009fac:	00ca      	lsls	r2, r1, #3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	4642      	mov	r2, r8
 8009fb6:	189b      	adds	r3, r3, r2
 8009fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fbc:	464b      	mov	r3, r9
 8009fbe:	460a      	mov	r2, r1
 8009fc0:	eb42 0303 	adc.w	r3, r2, r3
 8009fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009fd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009fdc:	460b      	mov	r3, r1
 8009fde:	18db      	adds	r3, r3, r3
 8009fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	eb42 0303 	adc.w	r3, r2, r3
 8009fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009ff2:	f7f6 fe49 	bl	8000c88 <__aeabi_uldivmod>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4b0d      	ldr	r3, [pc, #52]	; (800a030 <UART_SetConfig+0x2d4>)
 8009ffc:	fba3 1302 	umull	r1, r3, r3, r2
 800a000:	095b      	lsrs	r3, r3, #5
 800a002:	2164      	movs	r1, #100	; 0x64
 800a004:	fb01 f303 	mul.w	r3, r1, r3
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	3332      	adds	r3, #50	; 0x32
 800a00e:	4a08      	ldr	r2, [pc, #32]	; (800a030 <UART_SetConfig+0x2d4>)
 800a010:	fba2 2303 	umull	r2, r3, r2, r3
 800a014:	095b      	lsrs	r3, r3, #5
 800a016:	f003 0207 	and.w	r2, r3, #7
 800a01a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4422      	add	r2, r4
 800a022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a024:	e106      	b.n	800a234 <UART_SetConfig+0x4d8>
 800a026:	bf00      	nop
 800a028:	40011000 	.word	0x40011000
 800a02c:	40011400 	.word	0x40011400
 800a030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a038:	2200      	movs	r2, #0
 800a03a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a03e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a046:	4642      	mov	r2, r8
 800a048:	464b      	mov	r3, r9
 800a04a:	1891      	adds	r1, r2, r2
 800a04c:	6239      	str	r1, [r7, #32]
 800a04e:	415b      	adcs	r3, r3
 800a050:	627b      	str	r3, [r7, #36]	; 0x24
 800a052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a056:	4641      	mov	r1, r8
 800a058:	1854      	adds	r4, r2, r1
 800a05a:	4649      	mov	r1, r9
 800a05c:	eb43 0501 	adc.w	r5, r3, r1
 800a060:	f04f 0200 	mov.w	r2, #0
 800a064:	f04f 0300 	mov.w	r3, #0
 800a068:	00eb      	lsls	r3, r5, #3
 800a06a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a06e:	00e2      	lsls	r2, r4, #3
 800a070:	4614      	mov	r4, r2
 800a072:	461d      	mov	r5, r3
 800a074:	4643      	mov	r3, r8
 800a076:	18e3      	adds	r3, r4, r3
 800a078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a07c:	464b      	mov	r3, r9
 800a07e:	eb45 0303 	adc.w	r3, r5, r3
 800a082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a092:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a096:	f04f 0200 	mov.w	r2, #0
 800a09a:	f04f 0300 	mov.w	r3, #0
 800a09e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	008b      	lsls	r3, r1, #2
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0ac:	4621      	mov	r1, r4
 800a0ae:	008a      	lsls	r2, r1, #2
 800a0b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a0b4:	f7f6 fde8 	bl	8000c88 <__aeabi_uldivmod>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4b60      	ldr	r3, [pc, #384]	; (800a240 <UART_SetConfig+0x4e4>)
 800a0be:	fba3 2302 	umull	r2, r3, r3, r2
 800a0c2:	095b      	lsrs	r3, r3, #5
 800a0c4:	011c      	lsls	r4, r3, #4
 800a0c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a0d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a0d8:	4642      	mov	r2, r8
 800a0da:	464b      	mov	r3, r9
 800a0dc:	1891      	adds	r1, r2, r2
 800a0de:	61b9      	str	r1, [r7, #24]
 800a0e0:	415b      	adcs	r3, r3
 800a0e2:	61fb      	str	r3, [r7, #28]
 800a0e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0e8:	4641      	mov	r1, r8
 800a0ea:	1851      	adds	r1, r2, r1
 800a0ec:	6139      	str	r1, [r7, #16]
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	414b      	adcs	r3, r1
 800a0f2:	617b      	str	r3, [r7, #20]
 800a0f4:	f04f 0200 	mov.w	r2, #0
 800a0f8:	f04f 0300 	mov.w	r3, #0
 800a0fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a100:	4659      	mov	r1, fp
 800a102:	00cb      	lsls	r3, r1, #3
 800a104:	4651      	mov	r1, sl
 800a106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a10a:	4651      	mov	r1, sl
 800a10c:	00ca      	lsls	r2, r1, #3
 800a10e:	4610      	mov	r0, r2
 800a110:	4619      	mov	r1, r3
 800a112:	4603      	mov	r3, r0
 800a114:	4642      	mov	r2, r8
 800a116:	189b      	adds	r3, r3, r2
 800a118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a11c:	464b      	mov	r3, r9
 800a11e:	460a      	mov	r2, r1
 800a120:	eb42 0303 	adc.w	r3, r2, r3
 800a124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	67bb      	str	r3, [r7, #120]	; 0x78
 800a132:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a134:	f04f 0200 	mov.w	r2, #0
 800a138:	f04f 0300 	mov.w	r3, #0
 800a13c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a140:	4649      	mov	r1, r9
 800a142:	008b      	lsls	r3, r1, #2
 800a144:	4641      	mov	r1, r8
 800a146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a14a:	4641      	mov	r1, r8
 800a14c:	008a      	lsls	r2, r1, #2
 800a14e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a152:	f7f6 fd99 	bl	8000c88 <__aeabi_uldivmod>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	4611      	mov	r1, r2
 800a15c:	4b38      	ldr	r3, [pc, #224]	; (800a240 <UART_SetConfig+0x4e4>)
 800a15e:	fba3 2301 	umull	r2, r3, r3, r1
 800a162:	095b      	lsrs	r3, r3, #5
 800a164:	2264      	movs	r2, #100	; 0x64
 800a166:	fb02 f303 	mul.w	r3, r2, r3
 800a16a:	1acb      	subs	r3, r1, r3
 800a16c:	011b      	lsls	r3, r3, #4
 800a16e:	3332      	adds	r3, #50	; 0x32
 800a170:	4a33      	ldr	r2, [pc, #204]	; (800a240 <UART_SetConfig+0x4e4>)
 800a172:	fba2 2303 	umull	r2, r3, r2, r3
 800a176:	095b      	lsrs	r3, r3, #5
 800a178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a17c:	441c      	add	r4, r3
 800a17e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a182:	2200      	movs	r2, #0
 800a184:	673b      	str	r3, [r7, #112]	; 0x70
 800a186:	677a      	str	r2, [r7, #116]	; 0x74
 800a188:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a18c:	4642      	mov	r2, r8
 800a18e:	464b      	mov	r3, r9
 800a190:	1891      	adds	r1, r2, r2
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	415b      	adcs	r3, r3
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a19c:	4641      	mov	r1, r8
 800a19e:	1851      	adds	r1, r2, r1
 800a1a0:	6039      	str	r1, [r7, #0]
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	414b      	adcs	r3, r1
 800a1a6:	607b      	str	r3, [r7, #4]
 800a1a8:	f04f 0200 	mov.w	r2, #0
 800a1ac:	f04f 0300 	mov.w	r3, #0
 800a1b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1b4:	4659      	mov	r1, fp
 800a1b6:	00cb      	lsls	r3, r1, #3
 800a1b8:	4651      	mov	r1, sl
 800a1ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1be:	4651      	mov	r1, sl
 800a1c0:	00ca      	lsls	r2, r1, #3
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	4642      	mov	r2, r8
 800a1ca:	189b      	adds	r3, r3, r2
 800a1cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1ce:	464b      	mov	r3, r9
 800a1d0:	460a      	mov	r2, r1
 800a1d2:	eb42 0303 	adc.w	r3, r2, r3
 800a1d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	663b      	str	r3, [r7, #96]	; 0x60
 800a1e2:	667a      	str	r2, [r7, #100]	; 0x64
 800a1e4:	f04f 0200 	mov.w	r2, #0
 800a1e8:	f04f 0300 	mov.w	r3, #0
 800a1ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	008b      	lsls	r3, r1, #2
 800a1f4:	4641      	mov	r1, r8
 800a1f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1fa:	4641      	mov	r1, r8
 800a1fc:	008a      	lsls	r2, r1, #2
 800a1fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a202:	f7f6 fd41 	bl	8000c88 <__aeabi_uldivmod>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	4b0d      	ldr	r3, [pc, #52]	; (800a240 <UART_SetConfig+0x4e4>)
 800a20c:	fba3 1302 	umull	r1, r3, r3, r2
 800a210:	095b      	lsrs	r3, r3, #5
 800a212:	2164      	movs	r1, #100	; 0x64
 800a214:	fb01 f303 	mul.w	r3, r1, r3
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	011b      	lsls	r3, r3, #4
 800a21c:	3332      	adds	r3, #50	; 0x32
 800a21e:	4a08      	ldr	r2, [pc, #32]	; (800a240 <UART_SetConfig+0x4e4>)
 800a220:	fba2 2303 	umull	r2, r3, r2, r3
 800a224:	095b      	lsrs	r3, r3, #5
 800a226:	f003 020f 	and.w	r2, r3, #15
 800a22a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4422      	add	r2, r4
 800a232:	609a      	str	r2, [r3, #8]
}
 800a234:	bf00      	nop
 800a236:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a23a:	46bd      	mov	sp, r7
 800a23c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a240:	51eb851f 	.word	0x51eb851f

0800a244 <malloc>:
 800a244:	4b02      	ldr	r3, [pc, #8]	; (800a250 <malloc+0xc>)
 800a246:	4601      	mov	r1, r0
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	f000 b82b 	b.w	800a2a4 <_malloc_r>
 800a24e:	bf00      	nop
 800a250:	20000064 	.word	0x20000064

0800a254 <free>:
 800a254:	4b02      	ldr	r3, [pc, #8]	; (800a260 <free+0xc>)
 800a256:	4601      	mov	r1, r0
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	f001 bf6b 	b.w	800c134 <_free_r>
 800a25e:	bf00      	nop
 800a260:	20000064 	.word	0x20000064

0800a264 <sbrk_aligned>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	4e0e      	ldr	r6, [pc, #56]	; (800a2a0 <sbrk_aligned+0x3c>)
 800a268:	460c      	mov	r4, r1
 800a26a:	6831      	ldr	r1, [r6, #0]
 800a26c:	4605      	mov	r5, r0
 800a26e:	b911      	cbnz	r1, 800a276 <sbrk_aligned+0x12>
 800a270:	f001 f880 	bl	800b374 <_sbrk_r>
 800a274:	6030      	str	r0, [r6, #0]
 800a276:	4621      	mov	r1, r4
 800a278:	4628      	mov	r0, r5
 800a27a:	f001 f87b 	bl	800b374 <_sbrk_r>
 800a27e:	1c43      	adds	r3, r0, #1
 800a280:	d00a      	beq.n	800a298 <sbrk_aligned+0x34>
 800a282:	1cc4      	adds	r4, r0, #3
 800a284:	f024 0403 	bic.w	r4, r4, #3
 800a288:	42a0      	cmp	r0, r4
 800a28a:	d007      	beq.n	800a29c <sbrk_aligned+0x38>
 800a28c:	1a21      	subs	r1, r4, r0
 800a28e:	4628      	mov	r0, r5
 800a290:	f001 f870 	bl	800b374 <_sbrk_r>
 800a294:	3001      	adds	r0, #1
 800a296:	d101      	bne.n	800a29c <sbrk_aligned+0x38>
 800a298:	f04f 34ff 	mov.w	r4, #4294967295
 800a29c:	4620      	mov	r0, r4
 800a29e:	bd70      	pop	{r4, r5, r6, pc}
 800a2a0:	200009e8 	.word	0x200009e8

0800a2a4 <_malloc_r>:
 800a2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a8:	1ccd      	adds	r5, r1, #3
 800a2aa:	f025 0503 	bic.w	r5, r5, #3
 800a2ae:	3508      	adds	r5, #8
 800a2b0:	2d0c      	cmp	r5, #12
 800a2b2:	bf38      	it	cc
 800a2b4:	250c      	movcc	r5, #12
 800a2b6:	2d00      	cmp	r5, #0
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	db01      	blt.n	800a2c0 <_malloc_r+0x1c>
 800a2bc:	42a9      	cmp	r1, r5
 800a2be:	d905      	bls.n	800a2cc <_malloc_r+0x28>
 800a2c0:	230c      	movs	r3, #12
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	2600      	movs	r6, #0
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a3a0 <_malloc_r+0xfc>
 800a2d0:	f000 f868 	bl	800a3a4 <__malloc_lock>
 800a2d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d8:	461c      	mov	r4, r3
 800a2da:	bb5c      	cbnz	r4, 800a334 <_malloc_r+0x90>
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f7ff ffc0 	bl	800a264 <sbrk_aligned>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	d155      	bne.n	800a396 <_malloc_r+0xf2>
 800a2ea:	f8d8 4000 	ldr.w	r4, [r8]
 800a2ee:	4626      	mov	r6, r4
 800a2f0:	2e00      	cmp	r6, #0
 800a2f2:	d145      	bne.n	800a380 <_malloc_r+0xdc>
 800a2f4:	2c00      	cmp	r4, #0
 800a2f6:	d048      	beq.n	800a38a <_malloc_r+0xe6>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	eb04 0903 	add.w	r9, r4, r3
 800a302:	f001 f837 	bl	800b374 <_sbrk_r>
 800a306:	4581      	cmp	r9, r0
 800a308:	d13f      	bne.n	800a38a <_malloc_r+0xe6>
 800a30a:	6821      	ldr	r1, [r4, #0]
 800a30c:	1a6d      	subs	r5, r5, r1
 800a30e:	4629      	mov	r1, r5
 800a310:	4638      	mov	r0, r7
 800a312:	f7ff ffa7 	bl	800a264 <sbrk_aligned>
 800a316:	3001      	adds	r0, #1
 800a318:	d037      	beq.n	800a38a <_malloc_r+0xe6>
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	442b      	add	r3, r5
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	f8d8 3000 	ldr.w	r3, [r8]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d038      	beq.n	800a39a <_malloc_r+0xf6>
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	42a2      	cmp	r2, r4
 800a32c:	d12b      	bne.n	800a386 <_malloc_r+0xe2>
 800a32e:	2200      	movs	r2, #0
 800a330:	605a      	str	r2, [r3, #4]
 800a332:	e00f      	b.n	800a354 <_malloc_r+0xb0>
 800a334:	6822      	ldr	r2, [r4, #0]
 800a336:	1b52      	subs	r2, r2, r5
 800a338:	d41f      	bmi.n	800a37a <_malloc_r+0xd6>
 800a33a:	2a0b      	cmp	r2, #11
 800a33c:	d917      	bls.n	800a36e <_malloc_r+0xca>
 800a33e:	1961      	adds	r1, r4, r5
 800a340:	42a3      	cmp	r3, r4
 800a342:	6025      	str	r5, [r4, #0]
 800a344:	bf18      	it	ne
 800a346:	6059      	strne	r1, [r3, #4]
 800a348:	6863      	ldr	r3, [r4, #4]
 800a34a:	bf08      	it	eq
 800a34c:	f8c8 1000 	streq.w	r1, [r8]
 800a350:	5162      	str	r2, [r4, r5]
 800a352:	604b      	str	r3, [r1, #4]
 800a354:	4638      	mov	r0, r7
 800a356:	f104 060b 	add.w	r6, r4, #11
 800a35a:	f000 f829 	bl	800a3b0 <__malloc_unlock>
 800a35e:	f026 0607 	bic.w	r6, r6, #7
 800a362:	1d23      	adds	r3, r4, #4
 800a364:	1af2      	subs	r2, r6, r3
 800a366:	d0ae      	beq.n	800a2c6 <_malloc_r+0x22>
 800a368:	1b9b      	subs	r3, r3, r6
 800a36a:	50a3      	str	r3, [r4, r2]
 800a36c:	e7ab      	b.n	800a2c6 <_malloc_r+0x22>
 800a36e:	42a3      	cmp	r3, r4
 800a370:	6862      	ldr	r2, [r4, #4]
 800a372:	d1dd      	bne.n	800a330 <_malloc_r+0x8c>
 800a374:	f8c8 2000 	str.w	r2, [r8]
 800a378:	e7ec      	b.n	800a354 <_malloc_r+0xb0>
 800a37a:	4623      	mov	r3, r4
 800a37c:	6864      	ldr	r4, [r4, #4]
 800a37e:	e7ac      	b.n	800a2da <_malloc_r+0x36>
 800a380:	4634      	mov	r4, r6
 800a382:	6876      	ldr	r6, [r6, #4]
 800a384:	e7b4      	b.n	800a2f0 <_malloc_r+0x4c>
 800a386:	4613      	mov	r3, r2
 800a388:	e7cc      	b.n	800a324 <_malloc_r+0x80>
 800a38a:	230c      	movs	r3, #12
 800a38c:	603b      	str	r3, [r7, #0]
 800a38e:	4638      	mov	r0, r7
 800a390:	f000 f80e 	bl	800a3b0 <__malloc_unlock>
 800a394:	e797      	b.n	800a2c6 <_malloc_r+0x22>
 800a396:	6025      	str	r5, [r4, #0]
 800a398:	e7dc      	b.n	800a354 <_malloc_r+0xb0>
 800a39a:	605b      	str	r3, [r3, #4]
 800a39c:	deff      	udf	#255	; 0xff
 800a39e:	bf00      	nop
 800a3a0:	200009e4 	.word	0x200009e4

0800a3a4 <__malloc_lock>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	; (800a3ac <__malloc_lock+0x8>)
 800a3a6:	f001 b832 	b.w	800b40e <__retarget_lock_acquire_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	20000b2c 	.word	0x20000b2c

0800a3b0 <__malloc_unlock>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	; (800a3b8 <__malloc_unlock+0x8>)
 800a3b2:	f001 b82d 	b.w	800b410 <__retarget_lock_release_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	20000b2c 	.word	0x20000b2c

0800a3bc <__cvt>:
 800a3bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c0:	ec55 4b10 	vmov	r4, r5, d0
 800a3c4:	2d00      	cmp	r5, #0
 800a3c6:	460e      	mov	r6, r1
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	462b      	mov	r3, r5
 800a3cc:	bfbb      	ittet	lt
 800a3ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a3d2:	461d      	movlt	r5, r3
 800a3d4:	2300      	movge	r3, #0
 800a3d6:	232d      	movlt	r3, #45	; 0x2d
 800a3d8:	700b      	strb	r3, [r1, #0]
 800a3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a3e0:	4691      	mov	r9, r2
 800a3e2:	f023 0820 	bic.w	r8, r3, #32
 800a3e6:	bfbc      	itt	lt
 800a3e8:	4622      	movlt	r2, r4
 800a3ea:	4614      	movlt	r4, r2
 800a3ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3f0:	d005      	beq.n	800a3fe <__cvt+0x42>
 800a3f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a3f6:	d100      	bne.n	800a3fa <__cvt+0x3e>
 800a3f8:	3601      	adds	r6, #1
 800a3fa:	2102      	movs	r1, #2
 800a3fc:	e000      	b.n	800a400 <__cvt+0x44>
 800a3fe:	2103      	movs	r1, #3
 800a400:	ab03      	add	r3, sp, #12
 800a402:	9301      	str	r3, [sp, #4]
 800a404:	ab02      	add	r3, sp, #8
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	ec45 4b10 	vmov	d0, r4, r5
 800a40c:	4653      	mov	r3, sl
 800a40e:	4632      	mov	r2, r6
 800a410:	f001 f89e 	bl	800b550 <_dtoa_r>
 800a414:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a418:	4607      	mov	r7, r0
 800a41a:	d102      	bne.n	800a422 <__cvt+0x66>
 800a41c:	f019 0f01 	tst.w	r9, #1
 800a420:	d022      	beq.n	800a468 <__cvt+0xac>
 800a422:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a426:	eb07 0906 	add.w	r9, r7, r6
 800a42a:	d110      	bne.n	800a44e <__cvt+0x92>
 800a42c:	783b      	ldrb	r3, [r7, #0]
 800a42e:	2b30      	cmp	r3, #48	; 0x30
 800a430:	d10a      	bne.n	800a448 <__cvt+0x8c>
 800a432:	2200      	movs	r2, #0
 800a434:	2300      	movs	r3, #0
 800a436:	4620      	mov	r0, r4
 800a438:	4629      	mov	r1, r5
 800a43a:	f7f6 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800a43e:	b918      	cbnz	r0, 800a448 <__cvt+0x8c>
 800a440:	f1c6 0601 	rsb	r6, r6, #1
 800a444:	f8ca 6000 	str.w	r6, [sl]
 800a448:	f8da 3000 	ldr.w	r3, [sl]
 800a44c:	4499      	add	r9, r3
 800a44e:	2200      	movs	r2, #0
 800a450:	2300      	movs	r3, #0
 800a452:	4620      	mov	r0, r4
 800a454:	4629      	mov	r1, r5
 800a456:	f7f6 fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800a45a:	b108      	cbz	r0, 800a460 <__cvt+0xa4>
 800a45c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a460:	2230      	movs	r2, #48	; 0x30
 800a462:	9b03      	ldr	r3, [sp, #12]
 800a464:	454b      	cmp	r3, r9
 800a466:	d307      	bcc.n	800a478 <__cvt+0xbc>
 800a468:	9b03      	ldr	r3, [sp, #12]
 800a46a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a46c:	1bdb      	subs	r3, r3, r7
 800a46e:	4638      	mov	r0, r7
 800a470:	6013      	str	r3, [r2, #0]
 800a472:	b004      	add	sp, #16
 800a474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a478:	1c59      	adds	r1, r3, #1
 800a47a:	9103      	str	r1, [sp, #12]
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	e7f0      	b.n	800a462 <__cvt+0xa6>

0800a480 <__exponent>:
 800a480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a482:	4603      	mov	r3, r0
 800a484:	2900      	cmp	r1, #0
 800a486:	bfb8      	it	lt
 800a488:	4249      	neglt	r1, r1
 800a48a:	f803 2b02 	strb.w	r2, [r3], #2
 800a48e:	bfb4      	ite	lt
 800a490:	222d      	movlt	r2, #45	; 0x2d
 800a492:	222b      	movge	r2, #43	; 0x2b
 800a494:	2909      	cmp	r1, #9
 800a496:	7042      	strb	r2, [r0, #1]
 800a498:	dd2a      	ble.n	800a4f0 <__exponent+0x70>
 800a49a:	f10d 0207 	add.w	r2, sp, #7
 800a49e:	4617      	mov	r7, r2
 800a4a0:	260a      	movs	r6, #10
 800a4a2:	4694      	mov	ip, r2
 800a4a4:	fb91 f5f6 	sdiv	r5, r1, r6
 800a4a8:	fb06 1415 	mls	r4, r6, r5, r1
 800a4ac:	3430      	adds	r4, #48	; 0x30
 800a4ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	2c63      	cmp	r4, #99	; 0x63
 800a4b6:	f102 32ff 	add.w	r2, r2, #4294967295
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	dcf1      	bgt.n	800a4a2 <__exponent+0x22>
 800a4be:	3130      	adds	r1, #48	; 0x30
 800a4c0:	f1ac 0402 	sub.w	r4, ip, #2
 800a4c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a4c8:	1c41      	adds	r1, r0, #1
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	42ba      	cmp	r2, r7
 800a4ce:	d30a      	bcc.n	800a4e6 <__exponent+0x66>
 800a4d0:	f10d 0209 	add.w	r2, sp, #9
 800a4d4:	eba2 020c 	sub.w	r2, r2, ip
 800a4d8:	42bc      	cmp	r4, r7
 800a4da:	bf88      	it	hi
 800a4dc:	2200      	movhi	r2, #0
 800a4de:	4413      	add	r3, r2
 800a4e0:	1a18      	subs	r0, r3, r0
 800a4e2:	b003      	add	sp, #12
 800a4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a4ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a4ee:	e7ed      	b.n	800a4cc <__exponent+0x4c>
 800a4f0:	2330      	movs	r3, #48	; 0x30
 800a4f2:	3130      	adds	r1, #48	; 0x30
 800a4f4:	7083      	strb	r3, [r0, #2]
 800a4f6:	70c1      	strb	r1, [r0, #3]
 800a4f8:	1d03      	adds	r3, r0, #4
 800a4fa:	e7f1      	b.n	800a4e0 <__exponent+0x60>

0800a4fc <_printf_float>:
 800a4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a500:	ed2d 8b02 	vpush	{d8}
 800a504:	b08d      	sub	sp, #52	; 0x34
 800a506:	460c      	mov	r4, r1
 800a508:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a50c:	4616      	mov	r6, r2
 800a50e:	461f      	mov	r7, r3
 800a510:	4605      	mov	r5, r0
 800a512:	f000 fef7 	bl	800b304 <_localeconv_r>
 800a516:	f8d0 a000 	ldr.w	sl, [r0]
 800a51a:	4650      	mov	r0, sl
 800a51c:	f7f5 fea8 	bl	8000270 <strlen>
 800a520:	2300      	movs	r3, #0
 800a522:	930a      	str	r3, [sp, #40]	; 0x28
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	9305      	str	r3, [sp, #20]
 800a528:	f8d8 3000 	ldr.w	r3, [r8]
 800a52c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a530:	3307      	adds	r3, #7
 800a532:	f023 0307 	bic.w	r3, r3, #7
 800a536:	f103 0208 	add.w	r2, r3, #8
 800a53a:	f8c8 2000 	str.w	r2, [r8]
 800a53e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a542:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a546:	9307      	str	r3, [sp, #28]
 800a548:	f8cd 8018 	str.w	r8, [sp, #24]
 800a54c:	ee08 0a10 	vmov	s16, r0
 800a550:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a558:	4b9e      	ldr	r3, [pc, #632]	; (800a7d4 <_printf_float+0x2d8>)
 800a55a:	f04f 32ff 	mov.w	r2, #4294967295
 800a55e:	f7f6 fae5 	bl	8000b2c <__aeabi_dcmpun>
 800a562:	bb88      	cbnz	r0, 800a5c8 <_printf_float+0xcc>
 800a564:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a568:	4b9a      	ldr	r3, [pc, #616]	; (800a7d4 <_printf_float+0x2d8>)
 800a56a:	f04f 32ff 	mov.w	r2, #4294967295
 800a56e:	f7f6 fabf 	bl	8000af0 <__aeabi_dcmple>
 800a572:	bb48      	cbnz	r0, 800a5c8 <_printf_float+0xcc>
 800a574:	2200      	movs	r2, #0
 800a576:	2300      	movs	r3, #0
 800a578:	4640      	mov	r0, r8
 800a57a:	4649      	mov	r1, r9
 800a57c:	f7f6 faae 	bl	8000adc <__aeabi_dcmplt>
 800a580:	b110      	cbz	r0, 800a588 <_printf_float+0x8c>
 800a582:	232d      	movs	r3, #45	; 0x2d
 800a584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a588:	4a93      	ldr	r2, [pc, #588]	; (800a7d8 <_printf_float+0x2dc>)
 800a58a:	4b94      	ldr	r3, [pc, #592]	; (800a7dc <_printf_float+0x2e0>)
 800a58c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a590:	bf94      	ite	ls
 800a592:	4690      	movls	r8, r2
 800a594:	4698      	movhi	r8, r3
 800a596:	2303      	movs	r3, #3
 800a598:	6123      	str	r3, [r4, #16]
 800a59a:	9b05      	ldr	r3, [sp, #20]
 800a59c:	f023 0304 	bic.w	r3, r3, #4
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	f04f 0900 	mov.w	r9, #0
 800a5a6:	9700      	str	r7, [sp, #0]
 800a5a8:	4633      	mov	r3, r6
 800a5aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f000 f9da 	bl	800a968 <_printf_common>
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	f040 8090 	bne.w	800a6da <_printf_float+0x1de>
 800a5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a5be:	b00d      	add	sp, #52	; 0x34
 800a5c0:	ecbd 8b02 	vpop	{d8}
 800a5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	464b      	mov	r3, r9
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	f7f6 faac 	bl	8000b2c <__aeabi_dcmpun>
 800a5d4:	b140      	cbz	r0, 800a5e8 <_printf_float+0xec>
 800a5d6:	464b      	mov	r3, r9
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	bfbc      	itt	lt
 800a5dc:	232d      	movlt	r3, #45	; 0x2d
 800a5de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a5e2:	4a7f      	ldr	r2, [pc, #508]	; (800a7e0 <_printf_float+0x2e4>)
 800a5e4:	4b7f      	ldr	r3, [pc, #508]	; (800a7e4 <_printf_float+0x2e8>)
 800a5e6:	e7d1      	b.n	800a58c <_printf_float+0x90>
 800a5e8:	6863      	ldr	r3, [r4, #4]
 800a5ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a5ee:	9206      	str	r2, [sp, #24]
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	d13f      	bne.n	800a674 <_printf_float+0x178>
 800a5f4:	2306      	movs	r3, #6
 800a5f6:	6063      	str	r3, [r4, #4]
 800a5f8:	9b05      	ldr	r3, [sp, #20]
 800a5fa:	6861      	ldr	r1, [r4, #4]
 800a5fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a600:	2300      	movs	r3, #0
 800a602:	9303      	str	r3, [sp, #12]
 800a604:	ab0a      	add	r3, sp, #40	; 0x28
 800a606:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a60a:	ab09      	add	r3, sp, #36	; 0x24
 800a60c:	ec49 8b10 	vmov	d0, r8, r9
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	6022      	str	r2, [r4, #0]
 800a614:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a618:	4628      	mov	r0, r5
 800a61a:	f7ff fecf 	bl	800a3bc <__cvt>
 800a61e:	9b06      	ldr	r3, [sp, #24]
 800a620:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a622:	2b47      	cmp	r3, #71	; 0x47
 800a624:	4680      	mov	r8, r0
 800a626:	d108      	bne.n	800a63a <_printf_float+0x13e>
 800a628:	1cc8      	adds	r0, r1, #3
 800a62a:	db02      	blt.n	800a632 <_printf_float+0x136>
 800a62c:	6863      	ldr	r3, [r4, #4]
 800a62e:	4299      	cmp	r1, r3
 800a630:	dd41      	ble.n	800a6b6 <_printf_float+0x1ba>
 800a632:	f1ab 0302 	sub.w	r3, fp, #2
 800a636:	fa5f fb83 	uxtb.w	fp, r3
 800a63a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a63e:	d820      	bhi.n	800a682 <_printf_float+0x186>
 800a640:	3901      	subs	r1, #1
 800a642:	465a      	mov	r2, fp
 800a644:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a648:	9109      	str	r1, [sp, #36]	; 0x24
 800a64a:	f7ff ff19 	bl	800a480 <__exponent>
 800a64e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a650:	1813      	adds	r3, r2, r0
 800a652:	2a01      	cmp	r2, #1
 800a654:	4681      	mov	r9, r0
 800a656:	6123      	str	r3, [r4, #16]
 800a658:	dc02      	bgt.n	800a660 <_printf_float+0x164>
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	07d2      	lsls	r2, r2, #31
 800a65e:	d501      	bpl.n	800a664 <_printf_float+0x168>
 800a660:	3301      	adds	r3, #1
 800a662:	6123      	str	r3, [r4, #16]
 800a664:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d09c      	beq.n	800a5a6 <_printf_float+0xaa>
 800a66c:	232d      	movs	r3, #45	; 0x2d
 800a66e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a672:	e798      	b.n	800a5a6 <_printf_float+0xaa>
 800a674:	9a06      	ldr	r2, [sp, #24]
 800a676:	2a47      	cmp	r2, #71	; 0x47
 800a678:	d1be      	bne.n	800a5f8 <_printf_float+0xfc>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1bc      	bne.n	800a5f8 <_printf_float+0xfc>
 800a67e:	2301      	movs	r3, #1
 800a680:	e7b9      	b.n	800a5f6 <_printf_float+0xfa>
 800a682:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a686:	d118      	bne.n	800a6ba <_printf_float+0x1be>
 800a688:	2900      	cmp	r1, #0
 800a68a:	6863      	ldr	r3, [r4, #4]
 800a68c:	dd0b      	ble.n	800a6a6 <_printf_float+0x1aa>
 800a68e:	6121      	str	r1, [r4, #16]
 800a690:	b913      	cbnz	r3, 800a698 <_printf_float+0x19c>
 800a692:	6822      	ldr	r2, [r4, #0]
 800a694:	07d0      	lsls	r0, r2, #31
 800a696:	d502      	bpl.n	800a69e <_printf_float+0x1a2>
 800a698:	3301      	adds	r3, #1
 800a69a:	440b      	add	r3, r1
 800a69c:	6123      	str	r3, [r4, #16]
 800a69e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a6a0:	f04f 0900 	mov.w	r9, #0
 800a6a4:	e7de      	b.n	800a664 <_printf_float+0x168>
 800a6a6:	b913      	cbnz	r3, 800a6ae <_printf_float+0x1b2>
 800a6a8:	6822      	ldr	r2, [r4, #0]
 800a6aa:	07d2      	lsls	r2, r2, #31
 800a6ac:	d501      	bpl.n	800a6b2 <_printf_float+0x1b6>
 800a6ae:	3302      	adds	r3, #2
 800a6b0:	e7f4      	b.n	800a69c <_printf_float+0x1a0>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e7f2      	b.n	800a69c <_printf_float+0x1a0>
 800a6b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6bc:	4299      	cmp	r1, r3
 800a6be:	db05      	blt.n	800a6cc <_printf_float+0x1d0>
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	6121      	str	r1, [r4, #16]
 800a6c4:	07d8      	lsls	r0, r3, #31
 800a6c6:	d5ea      	bpl.n	800a69e <_printf_float+0x1a2>
 800a6c8:	1c4b      	adds	r3, r1, #1
 800a6ca:	e7e7      	b.n	800a69c <_printf_float+0x1a0>
 800a6cc:	2900      	cmp	r1, #0
 800a6ce:	bfd4      	ite	le
 800a6d0:	f1c1 0202 	rsble	r2, r1, #2
 800a6d4:	2201      	movgt	r2, #1
 800a6d6:	4413      	add	r3, r2
 800a6d8:	e7e0      	b.n	800a69c <_printf_float+0x1a0>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	055a      	lsls	r2, r3, #21
 800a6de:	d407      	bmi.n	800a6f0 <_printf_float+0x1f4>
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	4642      	mov	r2, r8
 800a6e4:	4631      	mov	r1, r6
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	47b8      	blx	r7
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	d12c      	bne.n	800a748 <_printf_float+0x24c>
 800a6ee:	e764      	b.n	800a5ba <_printf_float+0xbe>
 800a6f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6f4:	f240 80e0 	bls.w	800a8b8 <_printf_float+0x3bc>
 800a6f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2300      	movs	r3, #0
 800a700:	f7f6 f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a704:	2800      	cmp	r0, #0
 800a706:	d034      	beq.n	800a772 <_printf_float+0x276>
 800a708:	4a37      	ldr	r2, [pc, #220]	; (800a7e8 <_printf_float+0x2ec>)
 800a70a:	2301      	movs	r3, #1
 800a70c:	4631      	mov	r1, r6
 800a70e:	4628      	mov	r0, r5
 800a710:	47b8      	blx	r7
 800a712:	3001      	adds	r0, #1
 800a714:	f43f af51 	beq.w	800a5ba <_printf_float+0xbe>
 800a718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a71c:	429a      	cmp	r2, r3
 800a71e:	db02      	blt.n	800a726 <_printf_float+0x22a>
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	07d8      	lsls	r0, r3, #31
 800a724:	d510      	bpl.n	800a748 <_printf_float+0x24c>
 800a726:	ee18 3a10 	vmov	r3, s16
 800a72a:	4652      	mov	r2, sl
 800a72c:	4631      	mov	r1, r6
 800a72e:	4628      	mov	r0, r5
 800a730:	47b8      	blx	r7
 800a732:	3001      	adds	r0, #1
 800a734:	f43f af41 	beq.w	800a5ba <_printf_float+0xbe>
 800a738:	f04f 0800 	mov.w	r8, #0
 800a73c:	f104 091a 	add.w	r9, r4, #26
 800a740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a742:	3b01      	subs	r3, #1
 800a744:	4543      	cmp	r3, r8
 800a746:	dc09      	bgt.n	800a75c <_printf_float+0x260>
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	079b      	lsls	r3, r3, #30
 800a74c:	f100 8107 	bmi.w	800a95e <_printf_float+0x462>
 800a750:	68e0      	ldr	r0, [r4, #12]
 800a752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a754:	4298      	cmp	r0, r3
 800a756:	bfb8      	it	lt
 800a758:	4618      	movlt	r0, r3
 800a75a:	e730      	b.n	800a5be <_printf_float+0xc2>
 800a75c:	2301      	movs	r3, #1
 800a75e:	464a      	mov	r2, r9
 800a760:	4631      	mov	r1, r6
 800a762:	4628      	mov	r0, r5
 800a764:	47b8      	blx	r7
 800a766:	3001      	adds	r0, #1
 800a768:	f43f af27 	beq.w	800a5ba <_printf_float+0xbe>
 800a76c:	f108 0801 	add.w	r8, r8, #1
 800a770:	e7e6      	b.n	800a740 <_printf_float+0x244>
 800a772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a774:	2b00      	cmp	r3, #0
 800a776:	dc39      	bgt.n	800a7ec <_printf_float+0x2f0>
 800a778:	4a1b      	ldr	r2, [pc, #108]	; (800a7e8 <_printf_float+0x2ec>)
 800a77a:	2301      	movs	r3, #1
 800a77c:	4631      	mov	r1, r6
 800a77e:	4628      	mov	r0, r5
 800a780:	47b8      	blx	r7
 800a782:	3001      	adds	r0, #1
 800a784:	f43f af19 	beq.w	800a5ba <_printf_float+0xbe>
 800a788:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a78c:	4313      	orrs	r3, r2
 800a78e:	d102      	bne.n	800a796 <_printf_float+0x29a>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	07d9      	lsls	r1, r3, #31
 800a794:	d5d8      	bpl.n	800a748 <_printf_float+0x24c>
 800a796:	ee18 3a10 	vmov	r3, s16
 800a79a:	4652      	mov	r2, sl
 800a79c:	4631      	mov	r1, r6
 800a79e:	4628      	mov	r0, r5
 800a7a0:	47b8      	blx	r7
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	f43f af09 	beq.w	800a5ba <_printf_float+0xbe>
 800a7a8:	f04f 0900 	mov.w	r9, #0
 800a7ac:	f104 0a1a 	add.w	sl, r4, #26
 800a7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b2:	425b      	negs	r3, r3
 800a7b4:	454b      	cmp	r3, r9
 800a7b6:	dc01      	bgt.n	800a7bc <_printf_float+0x2c0>
 800a7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ba:	e792      	b.n	800a6e2 <_printf_float+0x1e6>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	4652      	mov	r2, sl
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	47b8      	blx	r7
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	f43f aef7 	beq.w	800a5ba <_printf_float+0xbe>
 800a7cc:	f109 0901 	add.w	r9, r9, #1
 800a7d0:	e7ee      	b.n	800a7b0 <_printf_float+0x2b4>
 800a7d2:	bf00      	nop
 800a7d4:	7fefffff 	.word	0x7fefffff
 800a7d8:	08011c70 	.word	0x08011c70
 800a7dc:	08011c74 	.word	0x08011c74
 800a7e0:	08011c78 	.word	0x08011c78
 800a7e4:	08011c7c 	.word	0x08011c7c
 800a7e8:	08011c80 	.word	0x08011c80
 800a7ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	bfa8      	it	ge
 800a7f4:	461a      	movge	r2, r3
 800a7f6:	2a00      	cmp	r2, #0
 800a7f8:	4691      	mov	r9, r2
 800a7fa:	dc37      	bgt.n	800a86c <_printf_float+0x370>
 800a7fc:	f04f 0b00 	mov.w	fp, #0
 800a800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a804:	f104 021a 	add.w	r2, r4, #26
 800a808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a80a:	9305      	str	r3, [sp, #20]
 800a80c:	eba3 0309 	sub.w	r3, r3, r9
 800a810:	455b      	cmp	r3, fp
 800a812:	dc33      	bgt.n	800a87c <_printf_float+0x380>
 800a814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a818:	429a      	cmp	r2, r3
 800a81a:	db3b      	blt.n	800a894 <_printf_float+0x398>
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	07da      	lsls	r2, r3, #31
 800a820:	d438      	bmi.n	800a894 <_printf_float+0x398>
 800a822:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a826:	eba2 0903 	sub.w	r9, r2, r3
 800a82a:	9b05      	ldr	r3, [sp, #20]
 800a82c:	1ad2      	subs	r2, r2, r3
 800a82e:	4591      	cmp	r9, r2
 800a830:	bfa8      	it	ge
 800a832:	4691      	movge	r9, r2
 800a834:	f1b9 0f00 	cmp.w	r9, #0
 800a838:	dc35      	bgt.n	800a8a6 <_printf_float+0x3aa>
 800a83a:	f04f 0800 	mov.w	r8, #0
 800a83e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a842:	f104 0a1a 	add.w	sl, r4, #26
 800a846:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a84a:	1a9b      	subs	r3, r3, r2
 800a84c:	eba3 0309 	sub.w	r3, r3, r9
 800a850:	4543      	cmp	r3, r8
 800a852:	f77f af79 	ble.w	800a748 <_printf_float+0x24c>
 800a856:	2301      	movs	r3, #1
 800a858:	4652      	mov	r2, sl
 800a85a:	4631      	mov	r1, r6
 800a85c:	4628      	mov	r0, r5
 800a85e:	47b8      	blx	r7
 800a860:	3001      	adds	r0, #1
 800a862:	f43f aeaa 	beq.w	800a5ba <_printf_float+0xbe>
 800a866:	f108 0801 	add.w	r8, r8, #1
 800a86a:	e7ec      	b.n	800a846 <_printf_float+0x34a>
 800a86c:	4613      	mov	r3, r2
 800a86e:	4631      	mov	r1, r6
 800a870:	4642      	mov	r2, r8
 800a872:	4628      	mov	r0, r5
 800a874:	47b8      	blx	r7
 800a876:	3001      	adds	r0, #1
 800a878:	d1c0      	bne.n	800a7fc <_printf_float+0x300>
 800a87a:	e69e      	b.n	800a5ba <_printf_float+0xbe>
 800a87c:	2301      	movs	r3, #1
 800a87e:	4631      	mov	r1, r6
 800a880:	4628      	mov	r0, r5
 800a882:	9205      	str	r2, [sp, #20]
 800a884:	47b8      	blx	r7
 800a886:	3001      	adds	r0, #1
 800a888:	f43f ae97 	beq.w	800a5ba <_printf_float+0xbe>
 800a88c:	9a05      	ldr	r2, [sp, #20]
 800a88e:	f10b 0b01 	add.w	fp, fp, #1
 800a892:	e7b9      	b.n	800a808 <_printf_float+0x30c>
 800a894:	ee18 3a10 	vmov	r3, s16
 800a898:	4652      	mov	r2, sl
 800a89a:	4631      	mov	r1, r6
 800a89c:	4628      	mov	r0, r5
 800a89e:	47b8      	blx	r7
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d1be      	bne.n	800a822 <_printf_float+0x326>
 800a8a4:	e689      	b.n	800a5ba <_printf_float+0xbe>
 800a8a6:	9a05      	ldr	r2, [sp, #20]
 800a8a8:	464b      	mov	r3, r9
 800a8aa:	4442      	add	r2, r8
 800a8ac:	4631      	mov	r1, r6
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	47b8      	blx	r7
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	d1c1      	bne.n	800a83a <_printf_float+0x33e>
 800a8b6:	e680      	b.n	800a5ba <_printf_float+0xbe>
 800a8b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8ba:	2a01      	cmp	r2, #1
 800a8bc:	dc01      	bgt.n	800a8c2 <_printf_float+0x3c6>
 800a8be:	07db      	lsls	r3, r3, #31
 800a8c0:	d53a      	bpl.n	800a938 <_printf_float+0x43c>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	4642      	mov	r2, r8
 800a8c6:	4631      	mov	r1, r6
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	47b8      	blx	r7
 800a8cc:	3001      	adds	r0, #1
 800a8ce:	f43f ae74 	beq.w	800a5ba <_printf_float+0xbe>
 800a8d2:	ee18 3a10 	vmov	r3, s16
 800a8d6:	4652      	mov	r2, sl
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4628      	mov	r0, r5
 800a8dc:	47b8      	blx	r7
 800a8de:	3001      	adds	r0, #1
 800a8e0:	f43f ae6b 	beq.w	800a5ba <_printf_float+0xbe>
 800a8e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a8f0:	f7f6 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f4:	b9d8      	cbnz	r0, 800a92e <_printf_float+0x432>
 800a8f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a8fa:	f108 0201 	add.w	r2, r8, #1
 800a8fe:	4631      	mov	r1, r6
 800a900:	4628      	mov	r0, r5
 800a902:	47b8      	blx	r7
 800a904:	3001      	adds	r0, #1
 800a906:	d10e      	bne.n	800a926 <_printf_float+0x42a>
 800a908:	e657      	b.n	800a5ba <_printf_float+0xbe>
 800a90a:	2301      	movs	r3, #1
 800a90c:	4652      	mov	r2, sl
 800a90e:	4631      	mov	r1, r6
 800a910:	4628      	mov	r0, r5
 800a912:	47b8      	blx	r7
 800a914:	3001      	adds	r0, #1
 800a916:	f43f ae50 	beq.w	800a5ba <_printf_float+0xbe>
 800a91a:	f108 0801 	add.w	r8, r8, #1
 800a91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a920:	3b01      	subs	r3, #1
 800a922:	4543      	cmp	r3, r8
 800a924:	dcf1      	bgt.n	800a90a <_printf_float+0x40e>
 800a926:	464b      	mov	r3, r9
 800a928:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a92c:	e6da      	b.n	800a6e4 <_printf_float+0x1e8>
 800a92e:	f04f 0800 	mov.w	r8, #0
 800a932:	f104 0a1a 	add.w	sl, r4, #26
 800a936:	e7f2      	b.n	800a91e <_printf_float+0x422>
 800a938:	2301      	movs	r3, #1
 800a93a:	4642      	mov	r2, r8
 800a93c:	e7df      	b.n	800a8fe <_printf_float+0x402>
 800a93e:	2301      	movs	r3, #1
 800a940:	464a      	mov	r2, r9
 800a942:	4631      	mov	r1, r6
 800a944:	4628      	mov	r0, r5
 800a946:	47b8      	blx	r7
 800a948:	3001      	adds	r0, #1
 800a94a:	f43f ae36 	beq.w	800a5ba <_printf_float+0xbe>
 800a94e:	f108 0801 	add.w	r8, r8, #1
 800a952:	68e3      	ldr	r3, [r4, #12]
 800a954:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a956:	1a5b      	subs	r3, r3, r1
 800a958:	4543      	cmp	r3, r8
 800a95a:	dcf0      	bgt.n	800a93e <_printf_float+0x442>
 800a95c:	e6f8      	b.n	800a750 <_printf_float+0x254>
 800a95e:	f04f 0800 	mov.w	r8, #0
 800a962:	f104 0919 	add.w	r9, r4, #25
 800a966:	e7f4      	b.n	800a952 <_printf_float+0x456>

0800a968 <_printf_common>:
 800a968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a96c:	4616      	mov	r6, r2
 800a96e:	4699      	mov	r9, r3
 800a970:	688a      	ldr	r2, [r1, #8]
 800a972:	690b      	ldr	r3, [r1, #16]
 800a974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a978:	4293      	cmp	r3, r2
 800a97a:	bfb8      	it	lt
 800a97c:	4613      	movlt	r3, r2
 800a97e:	6033      	str	r3, [r6, #0]
 800a980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a984:	4607      	mov	r7, r0
 800a986:	460c      	mov	r4, r1
 800a988:	b10a      	cbz	r2, 800a98e <_printf_common+0x26>
 800a98a:	3301      	adds	r3, #1
 800a98c:	6033      	str	r3, [r6, #0]
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	0699      	lsls	r1, r3, #26
 800a992:	bf42      	ittt	mi
 800a994:	6833      	ldrmi	r3, [r6, #0]
 800a996:	3302      	addmi	r3, #2
 800a998:	6033      	strmi	r3, [r6, #0]
 800a99a:	6825      	ldr	r5, [r4, #0]
 800a99c:	f015 0506 	ands.w	r5, r5, #6
 800a9a0:	d106      	bne.n	800a9b0 <_printf_common+0x48>
 800a9a2:	f104 0a19 	add.w	sl, r4, #25
 800a9a6:	68e3      	ldr	r3, [r4, #12]
 800a9a8:	6832      	ldr	r2, [r6, #0]
 800a9aa:	1a9b      	subs	r3, r3, r2
 800a9ac:	42ab      	cmp	r3, r5
 800a9ae:	dc26      	bgt.n	800a9fe <_printf_common+0x96>
 800a9b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9b4:	1e13      	subs	r3, r2, #0
 800a9b6:	6822      	ldr	r2, [r4, #0]
 800a9b8:	bf18      	it	ne
 800a9ba:	2301      	movne	r3, #1
 800a9bc:	0692      	lsls	r2, r2, #26
 800a9be:	d42b      	bmi.n	800aa18 <_printf_common+0xb0>
 800a9c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9c4:	4649      	mov	r1, r9
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	47c0      	blx	r8
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	d01e      	beq.n	800aa0c <_printf_common+0xa4>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	6922      	ldr	r2, [r4, #16]
 800a9d2:	f003 0306 	and.w	r3, r3, #6
 800a9d6:	2b04      	cmp	r3, #4
 800a9d8:	bf02      	ittt	eq
 800a9da:	68e5      	ldreq	r5, [r4, #12]
 800a9dc:	6833      	ldreq	r3, [r6, #0]
 800a9de:	1aed      	subeq	r5, r5, r3
 800a9e0:	68a3      	ldr	r3, [r4, #8]
 800a9e2:	bf0c      	ite	eq
 800a9e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9e8:	2500      	movne	r5, #0
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	bfc4      	itt	gt
 800a9ee:	1a9b      	subgt	r3, r3, r2
 800a9f0:	18ed      	addgt	r5, r5, r3
 800a9f2:	2600      	movs	r6, #0
 800a9f4:	341a      	adds	r4, #26
 800a9f6:	42b5      	cmp	r5, r6
 800a9f8:	d11a      	bne.n	800aa30 <_printf_common+0xc8>
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	e008      	b.n	800aa10 <_printf_common+0xa8>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	4652      	mov	r2, sl
 800aa02:	4649      	mov	r1, r9
 800aa04:	4638      	mov	r0, r7
 800aa06:	47c0      	blx	r8
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d103      	bne.n	800aa14 <_printf_common+0xac>
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa14:	3501      	adds	r5, #1
 800aa16:	e7c6      	b.n	800a9a6 <_printf_common+0x3e>
 800aa18:	18e1      	adds	r1, r4, r3
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	2030      	movs	r0, #48	; 0x30
 800aa1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa22:	4422      	add	r2, r4
 800aa24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa2c:	3302      	adds	r3, #2
 800aa2e:	e7c7      	b.n	800a9c0 <_printf_common+0x58>
 800aa30:	2301      	movs	r3, #1
 800aa32:	4622      	mov	r2, r4
 800aa34:	4649      	mov	r1, r9
 800aa36:	4638      	mov	r0, r7
 800aa38:	47c0      	blx	r8
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	d0e6      	beq.n	800aa0c <_printf_common+0xa4>
 800aa3e:	3601      	adds	r6, #1
 800aa40:	e7d9      	b.n	800a9f6 <_printf_common+0x8e>
	...

0800aa44 <_printf_i>:
 800aa44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa48:	7e0f      	ldrb	r7, [r1, #24]
 800aa4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa4c:	2f78      	cmp	r7, #120	; 0x78
 800aa4e:	4691      	mov	r9, r2
 800aa50:	4680      	mov	r8, r0
 800aa52:	460c      	mov	r4, r1
 800aa54:	469a      	mov	sl, r3
 800aa56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa5a:	d807      	bhi.n	800aa6c <_printf_i+0x28>
 800aa5c:	2f62      	cmp	r7, #98	; 0x62
 800aa5e:	d80a      	bhi.n	800aa76 <_printf_i+0x32>
 800aa60:	2f00      	cmp	r7, #0
 800aa62:	f000 80d4 	beq.w	800ac0e <_printf_i+0x1ca>
 800aa66:	2f58      	cmp	r7, #88	; 0x58
 800aa68:	f000 80c0 	beq.w	800abec <_printf_i+0x1a8>
 800aa6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa74:	e03a      	b.n	800aaec <_printf_i+0xa8>
 800aa76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa7a:	2b15      	cmp	r3, #21
 800aa7c:	d8f6      	bhi.n	800aa6c <_printf_i+0x28>
 800aa7e:	a101      	add	r1, pc, #4	; (adr r1, 800aa84 <_printf_i+0x40>)
 800aa80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa84:	0800aadd 	.word	0x0800aadd
 800aa88:	0800aaf1 	.word	0x0800aaf1
 800aa8c:	0800aa6d 	.word	0x0800aa6d
 800aa90:	0800aa6d 	.word	0x0800aa6d
 800aa94:	0800aa6d 	.word	0x0800aa6d
 800aa98:	0800aa6d 	.word	0x0800aa6d
 800aa9c:	0800aaf1 	.word	0x0800aaf1
 800aaa0:	0800aa6d 	.word	0x0800aa6d
 800aaa4:	0800aa6d 	.word	0x0800aa6d
 800aaa8:	0800aa6d 	.word	0x0800aa6d
 800aaac:	0800aa6d 	.word	0x0800aa6d
 800aab0:	0800abf5 	.word	0x0800abf5
 800aab4:	0800ab1d 	.word	0x0800ab1d
 800aab8:	0800abaf 	.word	0x0800abaf
 800aabc:	0800aa6d 	.word	0x0800aa6d
 800aac0:	0800aa6d 	.word	0x0800aa6d
 800aac4:	0800ac17 	.word	0x0800ac17
 800aac8:	0800aa6d 	.word	0x0800aa6d
 800aacc:	0800ab1d 	.word	0x0800ab1d
 800aad0:	0800aa6d 	.word	0x0800aa6d
 800aad4:	0800aa6d 	.word	0x0800aa6d
 800aad8:	0800abb7 	.word	0x0800abb7
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	1d1a      	adds	r2, r3, #4
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	602a      	str	r2, [r5, #0]
 800aae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aaec:	2301      	movs	r3, #1
 800aaee:	e09f      	b.n	800ac30 <_printf_i+0x1ec>
 800aaf0:	6820      	ldr	r0, [r4, #0]
 800aaf2:	682b      	ldr	r3, [r5, #0]
 800aaf4:	0607      	lsls	r7, r0, #24
 800aaf6:	f103 0104 	add.w	r1, r3, #4
 800aafa:	6029      	str	r1, [r5, #0]
 800aafc:	d501      	bpl.n	800ab02 <_printf_i+0xbe>
 800aafe:	681e      	ldr	r6, [r3, #0]
 800ab00:	e003      	b.n	800ab0a <_printf_i+0xc6>
 800ab02:	0646      	lsls	r6, r0, #25
 800ab04:	d5fb      	bpl.n	800aafe <_printf_i+0xba>
 800ab06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ab0a:	2e00      	cmp	r6, #0
 800ab0c:	da03      	bge.n	800ab16 <_printf_i+0xd2>
 800ab0e:	232d      	movs	r3, #45	; 0x2d
 800ab10:	4276      	negs	r6, r6
 800ab12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab16:	485a      	ldr	r0, [pc, #360]	; (800ac80 <_printf_i+0x23c>)
 800ab18:	230a      	movs	r3, #10
 800ab1a:	e012      	b.n	800ab42 <_printf_i+0xfe>
 800ab1c:	682b      	ldr	r3, [r5, #0]
 800ab1e:	6820      	ldr	r0, [r4, #0]
 800ab20:	1d19      	adds	r1, r3, #4
 800ab22:	6029      	str	r1, [r5, #0]
 800ab24:	0605      	lsls	r5, r0, #24
 800ab26:	d501      	bpl.n	800ab2c <_printf_i+0xe8>
 800ab28:	681e      	ldr	r6, [r3, #0]
 800ab2a:	e002      	b.n	800ab32 <_printf_i+0xee>
 800ab2c:	0641      	lsls	r1, r0, #25
 800ab2e:	d5fb      	bpl.n	800ab28 <_printf_i+0xe4>
 800ab30:	881e      	ldrh	r6, [r3, #0]
 800ab32:	4853      	ldr	r0, [pc, #332]	; (800ac80 <_printf_i+0x23c>)
 800ab34:	2f6f      	cmp	r7, #111	; 0x6f
 800ab36:	bf0c      	ite	eq
 800ab38:	2308      	moveq	r3, #8
 800ab3a:	230a      	movne	r3, #10
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab42:	6865      	ldr	r5, [r4, #4]
 800ab44:	60a5      	str	r5, [r4, #8]
 800ab46:	2d00      	cmp	r5, #0
 800ab48:	bfa2      	ittt	ge
 800ab4a:	6821      	ldrge	r1, [r4, #0]
 800ab4c:	f021 0104 	bicge.w	r1, r1, #4
 800ab50:	6021      	strge	r1, [r4, #0]
 800ab52:	b90e      	cbnz	r6, 800ab58 <_printf_i+0x114>
 800ab54:	2d00      	cmp	r5, #0
 800ab56:	d04b      	beq.n	800abf0 <_printf_i+0x1ac>
 800ab58:	4615      	mov	r5, r2
 800ab5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab5e:	fb03 6711 	mls	r7, r3, r1, r6
 800ab62:	5dc7      	ldrb	r7, [r0, r7]
 800ab64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab68:	4637      	mov	r7, r6
 800ab6a:	42bb      	cmp	r3, r7
 800ab6c:	460e      	mov	r6, r1
 800ab6e:	d9f4      	bls.n	800ab5a <_printf_i+0x116>
 800ab70:	2b08      	cmp	r3, #8
 800ab72:	d10b      	bne.n	800ab8c <_printf_i+0x148>
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	07de      	lsls	r6, r3, #31
 800ab78:	d508      	bpl.n	800ab8c <_printf_i+0x148>
 800ab7a:	6923      	ldr	r3, [r4, #16]
 800ab7c:	6861      	ldr	r1, [r4, #4]
 800ab7e:	4299      	cmp	r1, r3
 800ab80:	bfde      	ittt	le
 800ab82:	2330      	movle	r3, #48	; 0x30
 800ab84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab8c:	1b52      	subs	r2, r2, r5
 800ab8e:	6122      	str	r2, [r4, #16]
 800ab90:	f8cd a000 	str.w	sl, [sp]
 800ab94:	464b      	mov	r3, r9
 800ab96:	aa03      	add	r2, sp, #12
 800ab98:	4621      	mov	r1, r4
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	f7ff fee4 	bl	800a968 <_printf_common>
 800aba0:	3001      	adds	r0, #1
 800aba2:	d14a      	bne.n	800ac3a <_printf_i+0x1f6>
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	b004      	add	sp, #16
 800abaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	f043 0320 	orr.w	r3, r3, #32
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	4833      	ldr	r0, [pc, #204]	; (800ac84 <_printf_i+0x240>)
 800abb8:	2778      	movs	r7, #120	; 0x78
 800abba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	6829      	ldr	r1, [r5, #0]
 800abc2:	061f      	lsls	r7, r3, #24
 800abc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800abc8:	d402      	bmi.n	800abd0 <_printf_i+0x18c>
 800abca:	065f      	lsls	r7, r3, #25
 800abcc:	bf48      	it	mi
 800abce:	b2b6      	uxthmi	r6, r6
 800abd0:	07df      	lsls	r7, r3, #31
 800abd2:	bf48      	it	mi
 800abd4:	f043 0320 	orrmi.w	r3, r3, #32
 800abd8:	6029      	str	r1, [r5, #0]
 800abda:	bf48      	it	mi
 800abdc:	6023      	strmi	r3, [r4, #0]
 800abde:	b91e      	cbnz	r6, 800abe8 <_printf_i+0x1a4>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	f023 0320 	bic.w	r3, r3, #32
 800abe6:	6023      	str	r3, [r4, #0]
 800abe8:	2310      	movs	r3, #16
 800abea:	e7a7      	b.n	800ab3c <_printf_i+0xf8>
 800abec:	4824      	ldr	r0, [pc, #144]	; (800ac80 <_printf_i+0x23c>)
 800abee:	e7e4      	b.n	800abba <_printf_i+0x176>
 800abf0:	4615      	mov	r5, r2
 800abf2:	e7bd      	b.n	800ab70 <_printf_i+0x12c>
 800abf4:	682b      	ldr	r3, [r5, #0]
 800abf6:	6826      	ldr	r6, [r4, #0]
 800abf8:	6961      	ldr	r1, [r4, #20]
 800abfa:	1d18      	adds	r0, r3, #4
 800abfc:	6028      	str	r0, [r5, #0]
 800abfe:	0635      	lsls	r5, r6, #24
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	d501      	bpl.n	800ac08 <_printf_i+0x1c4>
 800ac04:	6019      	str	r1, [r3, #0]
 800ac06:	e002      	b.n	800ac0e <_printf_i+0x1ca>
 800ac08:	0670      	lsls	r0, r6, #25
 800ac0a:	d5fb      	bpl.n	800ac04 <_printf_i+0x1c0>
 800ac0c:	8019      	strh	r1, [r3, #0]
 800ac0e:	2300      	movs	r3, #0
 800ac10:	6123      	str	r3, [r4, #16]
 800ac12:	4615      	mov	r5, r2
 800ac14:	e7bc      	b.n	800ab90 <_printf_i+0x14c>
 800ac16:	682b      	ldr	r3, [r5, #0]
 800ac18:	1d1a      	adds	r2, r3, #4
 800ac1a:	602a      	str	r2, [r5, #0]
 800ac1c:	681d      	ldr	r5, [r3, #0]
 800ac1e:	6862      	ldr	r2, [r4, #4]
 800ac20:	2100      	movs	r1, #0
 800ac22:	4628      	mov	r0, r5
 800ac24:	f7f5 fad4 	bl	80001d0 <memchr>
 800ac28:	b108      	cbz	r0, 800ac2e <_printf_i+0x1ea>
 800ac2a:	1b40      	subs	r0, r0, r5
 800ac2c:	6060      	str	r0, [r4, #4]
 800ac2e:	6863      	ldr	r3, [r4, #4]
 800ac30:	6123      	str	r3, [r4, #16]
 800ac32:	2300      	movs	r3, #0
 800ac34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac38:	e7aa      	b.n	800ab90 <_printf_i+0x14c>
 800ac3a:	6923      	ldr	r3, [r4, #16]
 800ac3c:	462a      	mov	r2, r5
 800ac3e:	4649      	mov	r1, r9
 800ac40:	4640      	mov	r0, r8
 800ac42:	47d0      	blx	sl
 800ac44:	3001      	adds	r0, #1
 800ac46:	d0ad      	beq.n	800aba4 <_printf_i+0x160>
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	079b      	lsls	r3, r3, #30
 800ac4c:	d413      	bmi.n	800ac76 <_printf_i+0x232>
 800ac4e:	68e0      	ldr	r0, [r4, #12]
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	4298      	cmp	r0, r3
 800ac54:	bfb8      	it	lt
 800ac56:	4618      	movlt	r0, r3
 800ac58:	e7a6      	b.n	800aba8 <_printf_i+0x164>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	4632      	mov	r2, r6
 800ac5e:	4649      	mov	r1, r9
 800ac60:	4640      	mov	r0, r8
 800ac62:	47d0      	blx	sl
 800ac64:	3001      	adds	r0, #1
 800ac66:	d09d      	beq.n	800aba4 <_printf_i+0x160>
 800ac68:	3501      	adds	r5, #1
 800ac6a:	68e3      	ldr	r3, [r4, #12]
 800ac6c:	9903      	ldr	r1, [sp, #12]
 800ac6e:	1a5b      	subs	r3, r3, r1
 800ac70:	42ab      	cmp	r3, r5
 800ac72:	dcf2      	bgt.n	800ac5a <_printf_i+0x216>
 800ac74:	e7eb      	b.n	800ac4e <_printf_i+0x20a>
 800ac76:	2500      	movs	r5, #0
 800ac78:	f104 0619 	add.w	r6, r4, #25
 800ac7c:	e7f5      	b.n	800ac6a <_printf_i+0x226>
 800ac7e:	bf00      	nop
 800ac80:	08011c82 	.word	0x08011c82
 800ac84:	08011c93 	.word	0x08011c93

0800ac88 <_scanf_float>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	b087      	sub	sp, #28
 800ac8e:	4617      	mov	r7, r2
 800ac90:	9303      	str	r3, [sp, #12]
 800ac92:	688b      	ldr	r3, [r1, #8]
 800ac94:	1e5a      	subs	r2, r3, #1
 800ac96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ac9a:	bf83      	ittte	hi
 800ac9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aca0:	195b      	addhi	r3, r3, r5
 800aca2:	9302      	strhi	r3, [sp, #8]
 800aca4:	2300      	movls	r3, #0
 800aca6:	bf86      	itte	hi
 800aca8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800acac:	608b      	strhi	r3, [r1, #8]
 800acae:	9302      	strls	r3, [sp, #8]
 800acb0:	680b      	ldr	r3, [r1, #0]
 800acb2:	468b      	mov	fp, r1
 800acb4:	2500      	movs	r5, #0
 800acb6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800acba:	f84b 3b1c 	str.w	r3, [fp], #28
 800acbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800acc2:	4680      	mov	r8, r0
 800acc4:	460c      	mov	r4, r1
 800acc6:	465e      	mov	r6, fp
 800acc8:	46aa      	mov	sl, r5
 800acca:	46a9      	mov	r9, r5
 800accc:	9501      	str	r5, [sp, #4]
 800acce:	68a2      	ldr	r2, [r4, #8]
 800acd0:	b152      	cbz	r2, 800ace8 <_scanf_float+0x60>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	2b4e      	cmp	r3, #78	; 0x4e
 800acd8:	d864      	bhi.n	800ada4 <_scanf_float+0x11c>
 800acda:	2b40      	cmp	r3, #64	; 0x40
 800acdc:	d83c      	bhi.n	800ad58 <_scanf_float+0xd0>
 800acde:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ace2:	b2c8      	uxtb	r0, r1
 800ace4:	280e      	cmp	r0, #14
 800ace6:	d93a      	bls.n	800ad5e <_scanf_float+0xd6>
 800ace8:	f1b9 0f00 	cmp.w	r9, #0
 800acec:	d003      	beq.n	800acf6 <_scanf_float+0x6e>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acfa:	f1ba 0f01 	cmp.w	sl, #1
 800acfe:	f200 8113 	bhi.w	800af28 <_scanf_float+0x2a0>
 800ad02:	455e      	cmp	r6, fp
 800ad04:	f200 8105 	bhi.w	800af12 <_scanf_float+0x28a>
 800ad08:	2501      	movs	r5, #1
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	b007      	add	sp, #28
 800ad0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ad16:	2a0d      	cmp	r2, #13
 800ad18:	d8e6      	bhi.n	800ace8 <_scanf_float+0x60>
 800ad1a:	a101      	add	r1, pc, #4	; (adr r1, 800ad20 <_scanf_float+0x98>)
 800ad1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad20:	0800ae5f 	.word	0x0800ae5f
 800ad24:	0800ace9 	.word	0x0800ace9
 800ad28:	0800ace9 	.word	0x0800ace9
 800ad2c:	0800ace9 	.word	0x0800ace9
 800ad30:	0800aebf 	.word	0x0800aebf
 800ad34:	0800ae97 	.word	0x0800ae97
 800ad38:	0800ace9 	.word	0x0800ace9
 800ad3c:	0800ace9 	.word	0x0800ace9
 800ad40:	0800ae6d 	.word	0x0800ae6d
 800ad44:	0800ace9 	.word	0x0800ace9
 800ad48:	0800ace9 	.word	0x0800ace9
 800ad4c:	0800ace9 	.word	0x0800ace9
 800ad50:	0800ace9 	.word	0x0800ace9
 800ad54:	0800ae25 	.word	0x0800ae25
 800ad58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ad5c:	e7db      	b.n	800ad16 <_scanf_float+0x8e>
 800ad5e:	290e      	cmp	r1, #14
 800ad60:	d8c2      	bhi.n	800ace8 <_scanf_float+0x60>
 800ad62:	a001      	add	r0, pc, #4	; (adr r0, 800ad68 <_scanf_float+0xe0>)
 800ad64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ad68:	0800ae17 	.word	0x0800ae17
 800ad6c:	0800ace9 	.word	0x0800ace9
 800ad70:	0800ae17 	.word	0x0800ae17
 800ad74:	0800aeab 	.word	0x0800aeab
 800ad78:	0800ace9 	.word	0x0800ace9
 800ad7c:	0800adc5 	.word	0x0800adc5
 800ad80:	0800ae01 	.word	0x0800ae01
 800ad84:	0800ae01 	.word	0x0800ae01
 800ad88:	0800ae01 	.word	0x0800ae01
 800ad8c:	0800ae01 	.word	0x0800ae01
 800ad90:	0800ae01 	.word	0x0800ae01
 800ad94:	0800ae01 	.word	0x0800ae01
 800ad98:	0800ae01 	.word	0x0800ae01
 800ad9c:	0800ae01 	.word	0x0800ae01
 800ada0:	0800ae01 	.word	0x0800ae01
 800ada4:	2b6e      	cmp	r3, #110	; 0x6e
 800ada6:	d809      	bhi.n	800adbc <_scanf_float+0x134>
 800ada8:	2b60      	cmp	r3, #96	; 0x60
 800adaa:	d8b2      	bhi.n	800ad12 <_scanf_float+0x8a>
 800adac:	2b54      	cmp	r3, #84	; 0x54
 800adae:	d077      	beq.n	800aea0 <_scanf_float+0x218>
 800adb0:	2b59      	cmp	r3, #89	; 0x59
 800adb2:	d199      	bne.n	800ace8 <_scanf_float+0x60>
 800adb4:	2d07      	cmp	r5, #7
 800adb6:	d197      	bne.n	800ace8 <_scanf_float+0x60>
 800adb8:	2508      	movs	r5, #8
 800adba:	e029      	b.n	800ae10 <_scanf_float+0x188>
 800adbc:	2b74      	cmp	r3, #116	; 0x74
 800adbe:	d06f      	beq.n	800aea0 <_scanf_float+0x218>
 800adc0:	2b79      	cmp	r3, #121	; 0x79
 800adc2:	e7f6      	b.n	800adb2 <_scanf_float+0x12a>
 800adc4:	6821      	ldr	r1, [r4, #0]
 800adc6:	05c8      	lsls	r0, r1, #23
 800adc8:	d51a      	bpl.n	800ae00 <_scanf_float+0x178>
 800adca:	9b02      	ldr	r3, [sp, #8]
 800adcc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800add0:	6021      	str	r1, [r4, #0]
 800add2:	f109 0901 	add.w	r9, r9, #1
 800add6:	b11b      	cbz	r3, 800ade0 <_scanf_float+0x158>
 800add8:	3b01      	subs	r3, #1
 800adda:	3201      	adds	r2, #1
 800addc:	9302      	str	r3, [sp, #8]
 800adde:	60a2      	str	r2, [r4, #8]
 800ade0:	68a3      	ldr	r3, [r4, #8]
 800ade2:	3b01      	subs	r3, #1
 800ade4:	60a3      	str	r3, [r4, #8]
 800ade6:	6923      	ldr	r3, [r4, #16]
 800ade8:	3301      	adds	r3, #1
 800adea:	6123      	str	r3, [r4, #16]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	3b01      	subs	r3, #1
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	607b      	str	r3, [r7, #4]
 800adf4:	f340 8084 	ble.w	800af00 <_scanf_float+0x278>
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	3301      	adds	r3, #1
 800adfc:	603b      	str	r3, [r7, #0]
 800adfe:	e766      	b.n	800acce <_scanf_float+0x46>
 800ae00:	eb1a 0f05 	cmn.w	sl, r5
 800ae04:	f47f af70 	bne.w	800ace8 <_scanf_float+0x60>
 800ae08:	6822      	ldr	r2, [r4, #0]
 800ae0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ae0e:	6022      	str	r2, [r4, #0]
 800ae10:	f806 3b01 	strb.w	r3, [r6], #1
 800ae14:	e7e4      	b.n	800ade0 <_scanf_float+0x158>
 800ae16:	6822      	ldr	r2, [r4, #0]
 800ae18:	0610      	lsls	r0, r2, #24
 800ae1a:	f57f af65 	bpl.w	800ace8 <_scanf_float+0x60>
 800ae1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae22:	e7f4      	b.n	800ae0e <_scanf_float+0x186>
 800ae24:	f1ba 0f00 	cmp.w	sl, #0
 800ae28:	d10e      	bne.n	800ae48 <_scanf_float+0x1c0>
 800ae2a:	f1b9 0f00 	cmp.w	r9, #0
 800ae2e:	d10e      	bne.n	800ae4e <_scanf_float+0x1c6>
 800ae30:	6822      	ldr	r2, [r4, #0]
 800ae32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ae36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae3a:	d108      	bne.n	800ae4e <_scanf_float+0x1c6>
 800ae3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae40:	6022      	str	r2, [r4, #0]
 800ae42:	f04f 0a01 	mov.w	sl, #1
 800ae46:	e7e3      	b.n	800ae10 <_scanf_float+0x188>
 800ae48:	f1ba 0f02 	cmp.w	sl, #2
 800ae4c:	d055      	beq.n	800aefa <_scanf_float+0x272>
 800ae4e:	2d01      	cmp	r5, #1
 800ae50:	d002      	beq.n	800ae58 <_scanf_float+0x1d0>
 800ae52:	2d04      	cmp	r5, #4
 800ae54:	f47f af48 	bne.w	800ace8 <_scanf_float+0x60>
 800ae58:	3501      	adds	r5, #1
 800ae5a:	b2ed      	uxtb	r5, r5
 800ae5c:	e7d8      	b.n	800ae10 <_scanf_float+0x188>
 800ae5e:	f1ba 0f01 	cmp.w	sl, #1
 800ae62:	f47f af41 	bne.w	800ace8 <_scanf_float+0x60>
 800ae66:	f04f 0a02 	mov.w	sl, #2
 800ae6a:	e7d1      	b.n	800ae10 <_scanf_float+0x188>
 800ae6c:	b97d      	cbnz	r5, 800ae8e <_scanf_float+0x206>
 800ae6e:	f1b9 0f00 	cmp.w	r9, #0
 800ae72:	f47f af3c 	bne.w	800acee <_scanf_float+0x66>
 800ae76:	6822      	ldr	r2, [r4, #0]
 800ae78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ae7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae80:	f47f af39 	bne.w	800acf6 <_scanf_float+0x6e>
 800ae84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae88:	6022      	str	r2, [r4, #0]
 800ae8a:	2501      	movs	r5, #1
 800ae8c:	e7c0      	b.n	800ae10 <_scanf_float+0x188>
 800ae8e:	2d03      	cmp	r5, #3
 800ae90:	d0e2      	beq.n	800ae58 <_scanf_float+0x1d0>
 800ae92:	2d05      	cmp	r5, #5
 800ae94:	e7de      	b.n	800ae54 <_scanf_float+0x1cc>
 800ae96:	2d02      	cmp	r5, #2
 800ae98:	f47f af26 	bne.w	800ace8 <_scanf_float+0x60>
 800ae9c:	2503      	movs	r5, #3
 800ae9e:	e7b7      	b.n	800ae10 <_scanf_float+0x188>
 800aea0:	2d06      	cmp	r5, #6
 800aea2:	f47f af21 	bne.w	800ace8 <_scanf_float+0x60>
 800aea6:	2507      	movs	r5, #7
 800aea8:	e7b2      	b.n	800ae10 <_scanf_float+0x188>
 800aeaa:	6822      	ldr	r2, [r4, #0]
 800aeac:	0591      	lsls	r1, r2, #22
 800aeae:	f57f af1b 	bpl.w	800ace8 <_scanf_float+0x60>
 800aeb2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aeb6:	6022      	str	r2, [r4, #0]
 800aeb8:	f8cd 9004 	str.w	r9, [sp, #4]
 800aebc:	e7a8      	b.n	800ae10 <_scanf_float+0x188>
 800aebe:	6822      	ldr	r2, [r4, #0]
 800aec0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aec4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aec8:	d006      	beq.n	800aed8 <_scanf_float+0x250>
 800aeca:	0550      	lsls	r0, r2, #21
 800aecc:	f57f af0c 	bpl.w	800ace8 <_scanf_float+0x60>
 800aed0:	f1b9 0f00 	cmp.w	r9, #0
 800aed4:	f43f af0f 	beq.w	800acf6 <_scanf_float+0x6e>
 800aed8:	0591      	lsls	r1, r2, #22
 800aeda:	bf58      	it	pl
 800aedc:	9901      	ldrpl	r1, [sp, #4]
 800aede:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aee2:	bf58      	it	pl
 800aee4:	eba9 0101 	subpl.w	r1, r9, r1
 800aee8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aeec:	bf58      	it	pl
 800aeee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aef2:	6022      	str	r2, [r4, #0]
 800aef4:	f04f 0900 	mov.w	r9, #0
 800aef8:	e78a      	b.n	800ae10 <_scanf_float+0x188>
 800aefa:	f04f 0a03 	mov.w	sl, #3
 800aefe:	e787      	b.n	800ae10 <_scanf_float+0x188>
 800af00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af04:	4639      	mov	r1, r7
 800af06:	4640      	mov	r0, r8
 800af08:	4798      	blx	r3
 800af0a:	2800      	cmp	r0, #0
 800af0c:	f43f aedf 	beq.w	800acce <_scanf_float+0x46>
 800af10:	e6ea      	b.n	800ace8 <_scanf_float+0x60>
 800af12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af1a:	463a      	mov	r2, r7
 800af1c:	4640      	mov	r0, r8
 800af1e:	4798      	blx	r3
 800af20:	6923      	ldr	r3, [r4, #16]
 800af22:	3b01      	subs	r3, #1
 800af24:	6123      	str	r3, [r4, #16]
 800af26:	e6ec      	b.n	800ad02 <_scanf_float+0x7a>
 800af28:	1e6b      	subs	r3, r5, #1
 800af2a:	2b06      	cmp	r3, #6
 800af2c:	d825      	bhi.n	800af7a <_scanf_float+0x2f2>
 800af2e:	2d02      	cmp	r5, #2
 800af30:	d836      	bhi.n	800afa0 <_scanf_float+0x318>
 800af32:	455e      	cmp	r6, fp
 800af34:	f67f aee8 	bls.w	800ad08 <_scanf_float+0x80>
 800af38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af40:	463a      	mov	r2, r7
 800af42:	4640      	mov	r0, r8
 800af44:	4798      	blx	r3
 800af46:	6923      	ldr	r3, [r4, #16]
 800af48:	3b01      	subs	r3, #1
 800af4a:	6123      	str	r3, [r4, #16]
 800af4c:	e7f1      	b.n	800af32 <_scanf_float+0x2aa>
 800af4e:	9802      	ldr	r0, [sp, #8]
 800af50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800af58:	9002      	str	r0, [sp, #8]
 800af5a:	463a      	mov	r2, r7
 800af5c:	4640      	mov	r0, r8
 800af5e:	4798      	blx	r3
 800af60:	6923      	ldr	r3, [r4, #16]
 800af62:	3b01      	subs	r3, #1
 800af64:	6123      	str	r3, [r4, #16]
 800af66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af6a:	fa5f fa8a 	uxtb.w	sl, sl
 800af6e:	f1ba 0f02 	cmp.w	sl, #2
 800af72:	d1ec      	bne.n	800af4e <_scanf_float+0x2c6>
 800af74:	3d03      	subs	r5, #3
 800af76:	b2ed      	uxtb	r5, r5
 800af78:	1b76      	subs	r6, r6, r5
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	05da      	lsls	r2, r3, #23
 800af7e:	d52f      	bpl.n	800afe0 <_scanf_float+0x358>
 800af80:	055b      	lsls	r3, r3, #21
 800af82:	d510      	bpl.n	800afa6 <_scanf_float+0x31e>
 800af84:	455e      	cmp	r6, fp
 800af86:	f67f aebf 	bls.w	800ad08 <_scanf_float+0x80>
 800af8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af92:	463a      	mov	r2, r7
 800af94:	4640      	mov	r0, r8
 800af96:	4798      	blx	r3
 800af98:	6923      	ldr	r3, [r4, #16]
 800af9a:	3b01      	subs	r3, #1
 800af9c:	6123      	str	r3, [r4, #16]
 800af9e:	e7f1      	b.n	800af84 <_scanf_float+0x2fc>
 800afa0:	46aa      	mov	sl, r5
 800afa2:	9602      	str	r6, [sp, #8]
 800afa4:	e7df      	b.n	800af66 <_scanf_float+0x2de>
 800afa6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800afaa:	6923      	ldr	r3, [r4, #16]
 800afac:	2965      	cmp	r1, #101	; 0x65
 800afae:	f103 33ff 	add.w	r3, r3, #4294967295
 800afb2:	f106 35ff 	add.w	r5, r6, #4294967295
 800afb6:	6123      	str	r3, [r4, #16]
 800afb8:	d00c      	beq.n	800afd4 <_scanf_float+0x34c>
 800afba:	2945      	cmp	r1, #69	; 0x45
 800afbc:	d00a      	beq.n	800afd4 <_scanf_float+0x34c>
 800afbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afc2:	463a      	mov	r2, r7
 800afc4:	4640      	mov	r0, r8
 800afc6:	4798      	blx	r3
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800afce:	3b01      	subs	r3, #1
 800afd0:	1eb5      	subs	r5, r6, #2
 800afd2:	6123      	str	r3, [r4, #16]
 800afd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afd8:	463a      	mov	r2, r7
 800afda:	4640      	mov	r0, r8
 800afdc:	4798      	blx	r3
 800afde:	462e      	mov	r6, r5
 800afe0:	6825      	ldr	r5, [r4, #0]
 800afe2:	f015 0510 	ands.w	r5, r5, #16
 800afe6:	d158      	bne.n	800b09a <_scanf_float+0x412>
 800afe8:	7035      	strb	r5, [r6, #0]
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aff4:	d11c      	bne.n	800b030 <_scanf_float+0x3a8>
 800aff6:	9b01      	ldr	r3, [sp, #4]
 800aff8:	454b      	cmp	r3, r9
 800affa:	eba3 0209 	sub.w	r2, r3, r9
 800affe:	d124      	bne.n	800b04a <_scanf_float+0x3c2>
 800b000:	2200      	movs	r2, #0
 800b002:	4659      	mov	r1, fp
 800b004:	4640      	mov	r0, r8
 800b006:	f002 fb9b 	bl	800d740 <_strtod_r>
 800b00a:	9b03      	ldr	r3, [sp, #12]
 800b00c:	6821      	ldr	r1, [r4, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f011 0f02 	tst.w	r1, #2
 800b014:	ec57 6b10 	vmov	r6, r7, d0
 800b018:	f103 0204 	add.w	r2, r3, #4
 800b01c:	d020      	beq.n	800b060 <_scanf_float+0x3d8>
 800b01e:	9903      	ldr	r1, [sp, #12]
 800b020:	600a      	str	r2, [r1, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	e9c3 6700 	strd	r6, r7, [r3]
 800b028:	68e3      	ldr	r3, [r4, #12]
 800b02a:	3301      	adds	r3, #1
 800b02c:	60e3      	str	r3, [r4, #12]
 800b02e:	e66c      	b.n	800ad0a <_scanf_float+0x82>
 800b030:	9b04      	ldr	r3, [sp, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0e4      	beq.n	800b000 <_scanf_float+0x378>
 800b036:	9905      	ldr	r1, [sp, #20]
 800b038:	230a      	movs	r3, #10
 800b03a:	462a      	mov	r2, r5
 800b03c:	3101      	adds	r1, #1
 800b03e:	4640      	mov	r0, r8
 800b040:	f002 fc06 	bl	800d850 <_strtol_r>
 800b044:	9b04      	ldr	r3, [sp, #16]
 800b046:	9e05      	ldr	r6, [sp, #20]
 800b048:	1ac2      	subs	r2, r0, r3
 800b04a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b04e:	429e      	cmp	r6, r3
 800b050:	bf28      	it	cs
 800b052:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b056:	4912      	ldr	r1, [pc, #72]	; (800b0a0 <_scanf_float+0x418>)
 800b058:	4630      	mov	r0, r6
 800b05a:	f000 f8e7 	bl	800b22c <siprintf>
 800b05e:	e7cf      	b.n	800b000 <_scanf_float+0x378>
 800b060:	f011 0f04 	tst.w	r1, #4
 800b064:	9903      	ldr	r1, [sp, #12]
 800b066:	600a      	str	r2, [r1, #0]
 800b068:	d1db      	bne.n	800b022 <_scanf_float+0x39a>
 800b06a:	f8d3 8000 	ldr.w	r8, [r3]
 800b06e:	ee10 2a10 	vmov	r2, s0
 800b072:	ee10 0a10 	vmov	r0, s0
 800b076:	463b      	mov	r3, r7
 800b078:	4639      	mov	r1, r7
 800b07a:	f7f5 fd57 	bl	8000b2c <__aeabi_dcmpun>
 800b07e:	b128      	cbz	r0, 800b08c <_scanf_float+0x404>
 800b080:	4808      	ldr	r0, [pc, #32]	; (800b0a4 <_scanf_float+0x41c>)
 800b082:	f000 f9d5 	bl	800b430 <nanf>
 800b086:	ed88 0a00 	vstr	s0, [r8]
 800b08a:	e7cd      	b.n	800b028 <_scanf_float+0x3a0>
 800b08c:	4630      	mov	r0, r6
 800b08e:	4639      	mov	r1, r7
 800b090:	f7f5 fdaa 	bl	8000be8 <__aeabi_d2f>
 800b094:	f8c8 0000 	str.w	r0, [r8]
 800b098:	e7c6      	b.n	800b028 <_scanf_float+0x3a0>
 800b09a:	2500      	movs	r5, #0
 800b09c:	e635      	b.n	800ad0a <_scanf_float+0x82>
 800b09e:	bf00      	nop
 800b0a0:	08011ca4 	.word	0x08011ca4
 800b0a4:	08012035 	.word	0x08012035

0800b0a8 <std>:
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	b510      	push	{r4, lr}
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0b6:	6083      	str	r3, [r0, #8]
 800b0b8:	8181      	strh	r1, [r0, #12]
 800b0ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b0bc:	81c2      	strh	r2, [r0, #14]
 800b0be:	6183      	str	r3, [r0, #24]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	2208      	movs	r2, #8
 800b0c4:	305c      	adds	r0, #92	; 0x5c
 800b0c6:	f000 f914 	bl	800b2f2 <memset>
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	; (800b100 <std+0x58>)
 800b0cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b0ce:	4b0d      	ldr	r3, [pc, #52]	; (800b104 <std+0x5c>)
 800b0d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0d2:	4b0d      	ldr	r3, [pc, #52]	; (800b108 <std+0x60>)
 800b0d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0d6:	4b0d      	ldr	r3, [pc, #52]	; (800b10c <std+0x64>)
 800b0d8:	6323      	str	r3, [r4, #48]	; 0x30
 800b0da:	4b0d      	ldr	r3, [pc, #52]	; (800b110 <std+0x68>)
 800b0dc:	6224      	str	r4, [r4, #32]
 800b0de:	429c      	cmp	r4, r3
 800b0e0:	d006      	beq.n	800b0f0 <std+0x48>
 800b0e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b0e6:	4294      	cmp	r4, r2
 800b0e8:	d002      	beq.n	800b0f0 <std+0x48>
 800b0ea:	33d0      	adds	r3, #208	; 0xd0
 800b0ec:	429c      	cmp	r4, r3
 800b0ee:	d105      	bne.n	800b0fc <std+0x54>
 800b0f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0f8:	f000 b988 	b.w	800b40c <__retarget_lock_init_recursive>
 800b0fc:	bd10      	pop	{r4, pc}
 800b0fe:	bf00      	nop
 800b100:	0800b26d 	.word	0x0800b26d
 800b104:	0800b28f 	.word	0x0800b28f
 800b108:	0800b2c7 	.word	0x0800b2c7
 800b10c:	0800b2eb 	.word	0x0800b2eb
 800b110:	200009ec 	.word	0x200009ec

0800b114 <stdio_exit_handler>:
 800b114:	4a02      	ldr	r2, [pc, #8]	; (800b120 <stdio_exit_handler+0xc>)
 800b116:	4903      	ldr	r1, [pc, #12]	; (800b124 <stdio_exit_handler+0x10>)
 800b118:	4803      	ldr	r0, [pc, #12]	; (800b128 <stdio_exit_handler+0x14>)
 800b11a:	f000 b869 	b.w	800b1f0 <_fwalk_sglue>
 800b11e:	bf00      	nop
 800b120:	2000000c 	.word	0x2000000c
 800b124:	0800dc11 	.word	0x0800dc11
 800b128:	20000018 	.word	0x20000018

0800b12c <cleanup_stdio>:
 800b12c:	6841      	ldr	r1, [r0, #4]
 800b12e:	4b0c      	ldr	r3, [pc, #48]	; (800b160 <cleanup_stdio+0x34>)
 800b130:	4299      	cmp	r1, r3
 800b132:	b510      	push	{r4, lr}
 800b134:	4604      	mov	r4, r0
 800b136:	d001      	beq.n	800b13c <cleanup_stdio+0x10>
 800b138:	f002 fd6a 	bl	800dc10 <_fflush_r>
 800b13c:	68a1      	ldr	r1, [r4, #8]
 800b13e:	4b09      	ldr	r3, [pc, #36]	; (800b164 <cleanup_stdio+0x38>)
 800b140:	4299      	cmp	r1, r3
 800b142:	d002      	beq.n	800b14a <cleanup_stdio+0x1e>
 800b144:	4620      	mov	r0, r4
 800b146:	f002 fd63 	bl	800dc10 <_fflush_r>
 800b14a:	68e1      	ldr	r1, [r4, #12]
 800b14c:	4b06      	ldr	r3, [pc, #24]	; (800b168 <cleanup_stdio+0x3c>)
 800b14e:	4299      	cmp	r1, r3
 800b150:	d004      	beq.n	800b15c <cleanup_stdio+0x30>
 800b152:	4620      	mov	r0, r4
 800b154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b158:	f002 bd5a 	b.w	800dc10 <_fflush_r>
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	bf00      	nop
 800b160:	200009ec 	.word	0x200009ec
 800b164:	20000a54 	.word	0x20000a54
 800b168:	20000abc 	.word	0x20000abc

0800b16c <global_stdio_init.part.0>:
 800b16c:	b510      	push	{r4, lr}
 800b16e:	4b0b      	ldr	r3, [pc, #44]	; (800b19c <global_stdio_init.part.0+0x30>)
 800b170:	4c0b      	ldr	r4, [pc, #44]	; (800b1a0 <global_stdio_init.part.0+0x34>)
 800b172:	4a0c      	ldr	r2, [pc, #48]	; (800b1a4 <global_stdio_init.part.0+0x38>)
 800b174:	601a      	str	r2, [r3, #0]
 800b176:	4620      	mov	r0, r4
 800b178:	2200      	movs	r2, #0
 800b17a:	2104      	movs	r1, #4
 800b17c:	f7ff ff94 	bl	800b0a8 <std>
 800b180:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b184:	2201      	movs	r2, #1
 800b186:	2109      	movs	r1, #9
 800b188:	f7ff ff8e 	bl	800b0a8 <std>
 800b18c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b190:	2202      	movs	r2, #2
 800b192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b196:	2112      	movs	r1, #18
 800b198:	f7ff bf86 	b.w	800b0a8 <std>
 800b19c:	20000b24 	.word	0x20000b24
 800b1a0:	200009ec 	.word	0x200009ec
 800b1a4:	0800b115 	.word	0x0800b115

0800b1a8 <__sfp_lock_acquire>:
 800b1a8:	4801      	ldr	r0, [pc, #4]	; (800b1b0 <__sfp_lock_acquire+0x8>)
 800b1aa:	f000 b930 	b.w	800b40e <__retarget_lock_acquire_recursive>
 800b1ae:	bf00      	nop
 800b1b0:	20000b2d 	.word	0x20000b2d

0800b1b4 <__sfp_lock_release>:
 800b1b4:	4801      	ldr	r0, [pc, #4]	; (800b1bc <__sfp_lock_release+0x8>)
 800b1b6:	f000 b92b 	b.w	800b410 <__retarget_lock_release_recursive>
 800b1ba:	bf00      	nop
 800b1bc:	20000b2d 	.word	0x20000b2d

0800b1c0 <__sinit>:
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	f7ff fff0 	bl	800b1a8 <__sfp_lock_acquire>
 800b1c8:	6a23      	ldr	r3, [r4, #32]
 800b1ca:	b11b      	cbz	r3, 800b1d4 <__sinit+0x14>
 800b1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1d0:	f7ff bff0 	b.w	800b1b4 <__sfp_lock_release>
 800b1d4:	4b04      	ldr	r3, [pc, #16]	; (800b1e8 <__sinit+0x28>)
 800b1d6:	6223      	str	r3, [r4, #32]
 800b1d8:	4b04      	ldr	r3, [pc, #16]	; (800b1ec <__sinit+0x2c>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1f5      	bne.n	800b1cc <__sinit+0xc>
 800b1e0:	f7ff ffc4 	bl	800b16c <global_stdio_init.part.0>
 800b1e4:	e7f2      	b.n	800b1cc <__sinit+0xc>
 800b1e6:	bf00      	nop
 800b1e8:	0800b12d 	.word	0x0800b12d
 800b1ec:	20000b24 	.word	0x20000b24

0800b1f0 <_fwalk_sglue>:
 800b1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1f4:	4607      	mov	r7, r0
 800b1f6:	4688      	mov	r8, r1
 800b1f8:	4614      	mov	r4, r2
 800b1fa:	2600      	movs	r6, #0
 800b1fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b200:	f1b9 0901 	subs.w	r9, r9, #1
 800b204:	d505      	bpl.n	800b212 <_fwalk_sglue+0x22>
 800b206:	6824      	ldr	r4, [r4, #0]
 800b208:	2c00      	cmp	r4, #0
 800b20a:	d1f7      	bne.n	800b1fc <_fwalk_sglue+0xc>
 800b20c:	4630      	mov	r0, r6
 800b20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b212:	89ab      	ldrh	r3, [r5, #12]
 800b214:	2b01      	cmp	r3, #1
 800b216:	d907      	bls.n	800b228 <_fwalk_sglue+0x38>
 800b218:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b21c:	3301      	adds	r3, #1
 800b21e:	d003      	beq.n	800b228 <_fwalk_sglue+0x38>
 800b220:	4629      	mov	r1, r5
 800b222:	4638      	mov	r0, r7
 800b224:	47c0      	blx	r8
 800b226:	4306      	orrs	r6, r0
 800b228:	3568      	adds	r5, #104	; 0x68
 800b22a:	e7e9      	b.n	800b200 <_fwalk_sglue+0x10>

0800b22c <siprintf>:
 800b22c:	b40e      	push	{r1, r2, r3}
 800b22e:	b500      	push	{lr}
 800b230:	b09c      	sub	sp, #112	; 0x70
 800b232:	ab1d      	add	r3, sp, #116	; 0x74
 800b234:	9002      	str	r0, [sp, #8]
 800b236:	9006      	str	r0, [sp, #24]
 800b238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b23c:	4809      	ldr	r0, [pc, #36]	; (800b264 <siprintf+0x38>)
 800b23e:	9107      	str	r1, [sp, #28]
 800b240:	9104      	str	r1, [sp, #16]
 800b242:	4909      	ldr	r1, [pc, #36]	; (800b268 <siprintf+0x3c>)
 800b244:	f853 2b04 	ldr.w	r2, [r3], #4
 800b248:	9105      	str	r1, [sp, #20]
 800b24a:	6800      	ldr	r0, [r0, #0]
 800b24c:	9301      	str	r3, [sp, #4]
 800b24e:	a902      	add	r1, sp, #8
 800b250:	f002 fb5a 	bl	800d908 <_svfiprintf_r>
 800b254:	9b02      	ldr	r3, [sp, #8]
 800b256:	2200      	movs	r2, #0
 800b258:	701a      	strb	r2, [r3, #0]
 800b25a:	b01c      	add	sp, #112	; 0x70
 800b25c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b260:	b003      	add	sp, #12
 800b262:	4770      	bx	lr
 800b264:	20000064 	.word	0x20000064
 800b268:	ffff0208 	.word	0xffff0208

0800b26c <__sread>:
 800b26c:	b510      	push	{r4, lr}
 800b26e:	460c      	mov	r4, r1
 800b270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b274:	f000 f86c 	bl	800b350 <_read_r>
 800b278:	2800      	cmp	r0, #0
 800b27a:	bfab      	itete	ge
 800b27c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b27e:	89a3      	ldrhlt	r3, [r4, #12]
 800b280:	181b      	addge	r3, r3, r0
 800b282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b286:	bfac      	ite	ge
 800b288:	6563      	strge	r3, [r4, #84]	; 0x54
 800b28a:	81a3      	strhlt	r3, [r4, #12]
 800b28c:	bd10      	pop	{r4, pc}

0800b28e <__swrite>:
 800b28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b292:	461f      	mov	r7, r3
 800b294:	898b      	ldrh	r3, [r1, #12]
 800b296:	05db      	lsls	r3, r3, #23
 800b298:	4605      	mov	r5, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	4616      	mov	r6, r2
 800b29e:	d505      	bpl.n	800b2ac <__swrite+0x1e>
 800b2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f000 f840 	bl	800b32c <_lseek_r>
 800b2ac:	89a3      	ldrh	r3, [r4, #12]
 800b2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2b6:	81a3      	strh	r3, [r4, #12]
 800b2b8:	4632      	mov	r2, r6
 800b2ba:	463b      	mov	r3, r7
 800b2bc:	4628      	mov	r0, r5
 800b2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c2:	f000 b867 	b.w	800b394 <_write_r>

0800b2c6 <__sseek>:
 800b2c6:	b510      	push	{r4, lr}
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ce:	f000 f82d 	bl	800b32c <_lseek_r>
 800b2d2:	1c43      	adds	r3, r0, #1
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	bf15      	itete	ne
 800b2d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2e2:	81a3      	strheq	r3, [r4, #12]
 800b2e4:	bf18      	it	ne
 800b2e6:	81a3      	strhne	r3, [r4, #12]
 800b2e8:	bd10      	pop	{r4, pc}

0800b2ea <__sclose>:
 800b2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ee:	f000 b80d 	b.w	800b30c <_close_r>

0800b2f2 <memset>:
 800b2f2:	4402      	add	r2, r0
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d100      	bne.n	800b2fc <memset+0xa>
 800b2fa:	4770      	bx	lr
 800b2fc:	f803 1b01 	strb.w	r1, [r3], #1
 800b300:	e7f9      	b.n	800b2f6 <memset+0x4>
	...

0800b304 <_localeconv_r>:
 800b304:	4800      	ldr	r0, [pc, #0]	; (800b308 <_localeconv_r+0x4>)
 800b306:	4770      	bx	lr
 800b308:	20000158 	.word	0x20000158

0800b30c <_close_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d06      	ldr	r5, [pc, #24]	; (800b328 <_close_r+0x1c>)
 800b310:	2300      	movs	r3, #0
 800b312:	4604      	mov	r4, r0
 800b314:	4608      	mov	r0, r1
 800b316:	602b      	str	r3, [r5, #0]
 800b318:	f7f9 fc77 	bl	8004c0a <_close>
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d102      	bne.n	800b326 <_close_r+0x1a>
 800b320:	682b      	ldr	r3, [r5, #0]
 800b322:	b103      	cbz	r3, 800b326 <_close_r+0x1a>
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	bd38      	pop	{r3, r4, r5, pc}
 800b328:	20000b28 	.word	0x20000b28

0800b32c <_lseek_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4d07      	ldr	r5, [pc, #28]	; (800b34c <_lseek_r+0x20>)
 800b330:	4604      	mov	r4, r0
 800b332:	4608      	mov	r0, r1
 800b334:	4611      	mov	r1, r2
 800b336:	2200      	movs	r2, #0
 800b338:	602a      	str	r2, [r5, #0]
 800b33a:	461a      	mov	r2, r3
 800b33c:	f7f9 fc8c 	bl	8004c58 <_lseek>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d102      	bne.n	800b34a <_lseek_r+0x1e>
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	b103      	cbz	r3, 800b34a <_lseek_r+0x1e>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	20000b28 	.word	0x20000b28

0800b350 <_read_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4d07      	ldr	r5, [pc, #28]	; (800b370 <_read_r+0x20>)
 800b354:	4604      	mov	r4, r0
 800b356:	4608      	mov	r0, r1
 800b358:	4611      	mov	r1, r2
 800b35a:	2200      	movs	r2, #0
 800b35c:	602a      	str	r2, [r5, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	f7f9 fc1a 	bl	8004b98 <_read>
 800b364:	1c43      	adds	r3, r0, #1
 800b366:	d102      	bne.n	800b36e <_read_r+0x1e>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	b103      	cbz	r3, 800b36e <_read_r+0x1e>
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	20000b28 	.word	0x20000b28

0800b374 <_sbrk_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4d06      	ldr	r5, [pc, #24]	; (800b390 <_sbrk_r+0x1c>)
 800b378:	2300      	movs	r3, #0
 800b37a:	4604      	mov	r4, r0
 800b37c:	4608      	mov	r0, r1
 800b37e:	602b      	str	r3, [r5, #0]
 800b380:	f7f9 fc78 	bl	8004c74 <_sbrk>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d102      	bne.n	800b38e <_sbrk_r+0x1a>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	b103      	cbz	r3, 800b38e <_sbrk_r+0x1a>
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	20000b28 	.word	0x20000b28

0800b394 <_write_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4d07      	ldr	r5, [pc, #28]	; (800b3b4 <_write_r+0x20>)
 800b398:	4604      	mov	r4, r0
 800b39a:	4608      	mov	r0, r1
 800b39c:	4611      	mov	r1, r2
 800b39e:	2200      	movs	r2, #0
 800b3a0:	602a      	str	r2, [r5, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f7f9 fc15 	bl	8004bd2 <_write>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_write_r+0x1e>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_write_r+0x1e>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	20000b28 	.word	0x20000b28

0800b3b8 <__errno>:
 800b3b8:	4b01      	ldr	r3, [pc, #4]	; (800b3c0 <__errno+0x8>)
 800b3ba:	6818      	ldr	r0, [r3, #0]
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	20000064 	.word	0x20000064

0800b3c4 <__libc_init_array>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	4d0d      	ldr	r5, [pc, #52]	; (800b3fc <__libc_init_array+0x38>)
 800b3c8:	4c0d      	ldr	r4, [pc, #52]	; (800b400 <__libc_init_array+0x3c>)
 800b3ca:	1b64      	subs	r4, r4, r5
 800b3cc:	10a4      	asrs	r4, r4, #2
 800b3ce:	2600      	movs	r6, #0
 800b3d0:	42a6      	cmp	r6, r4
 800b3d2:	d109      	bne.n	800b3e8 <__libc_init_array+0x24>
 800b3d4:	4d0b      	ldr	r5, [pc, #44]	; (800b404 <__libc_init_array+0x40>)
 800b3d6:	4c0c      	ldr	r4, [pc, #48]	; (800b408 <__libc_init_array+0x44>)
 800b3d8:	f005 fee2 	bl	80111a0 <_init>
 800b3dc:	1b64      	subs	r4, r4, r5
 800b3de:	10a4      	asrs	r4, r4, #2
 800b3e0:	2600      	movs	r6, #0
 800b3e2:	42a6      	cmp	r6, r4
 800b3e4:	d105      	bne.n	800b3f2 <__libc_init_array+0x2e>
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}
 800b3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ec:	4798      	blx	r3
 800b3ee:	3601      	adds	r6, #1
 800b3f0:	e7ee      	b.n	800b3d0 <__libc_init_array+0xc>
 800b3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f6:	4798      	blx	r3
 800b3f8:	3601      	adds	r6, #1
 800b3fa:	e7f2      	b.n	800b3e2 <__libc_init_array+0x1e>
 800b3fc:	08012318 	.word	0x08012318
 800b400:	08012318 	.word	0x08012318
 800b404:	08012318 	.word	0x08012318
 800b408:	0801231c 	.word	0x0801231c

0800b40c <__retarget_lock_init_recursive>:
 800b40c:	4770      	bx	lr

0800b40e <__retarget_lock_acquire_recursive>:
 800b40e:	4770      	bx	lr

0800b410 <__retarget_lock_release_recursive>:
 800b410:	4770      	bx	lr

0800b412 <memcpy>:
 800b412:	440a      	add	r2, r1
 800b414:	4291      	cmp	r1, r2
 800b416:	f100 33ff 	add.w	r3, r0, #4294967295
 800b41a:	d100      	bne.n	800b41e <memcpy+0xc>
 800b41c:	4770      	bx	lr
 800b41e:	b510      	push	{r4, lr}
 800b420:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b424:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b428:	4291      	cmp	r1, r2
 800b42a:	d1f9      	bne.n	800b420 <memcpy+0xe>
 800b42c:	bd10      	pop	{r4, pc}
	...

0800b430 <nanf>:
 800b430:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b438 <nanf+0x8>
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	7fc00000 	.word	0x7fc00000

0800b43c <quorem>:
 800b43c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b440:	6903      	ldr	r3, [r0, #16]
 800b442:	690c      	ldr	r4, [r1, #16]
 800b444:	42a3      	cmp	r3, r4
 800b446:	4607      	mov	r7, r0
 800b448:	db7e      	blt.n	800b548 <quorem+0x10c>
 800b44a:	3c01      	subs	r4, #1
 800b44c:	f101 0814 	add.w	r8, r1, #20
 800b450:	f100 0514 	add.w	r5, r0, #20
 800b454:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b45e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b462:	3301      	adds	r3, #1
 800b464:	429a      	cmp	r2, r3
 800b466:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b46a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b46e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b472:	d331      	bcc.n	800b4d8 <quorem+0x9c>
 800b474:	f04f 0e00 	mov.w	lr, #0
 800b478:	4640      	mov	r0, r8
 800b47a:	46ac      	mov	ip, r5
 800b47c:	46f2      	mov	sl, lr
 800b47e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b482:	b293      	uxth	r3, r2
 800b484:	fb06 e303 	mla	r3, r6, r3, lr
 800b488:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b48c:	0c1a      	lsrs	r2, r3, #16
 800b48e:	b29b      	uxth	r3, r3
 800b490:	ebaa 0303 	sub.w	r3, sl, r3
 800b494:	f8dc a000 	ldr.w	sl, [ip]
 800b498:	fa13 f38a 	uxtah	r3, r3, sl
 800b49c:	fb06 220e 	mla	r2, r6, lr, r2
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	9b00      	ldr	r3, [sp, #0]
 800b4a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4a8:	b292      	uxth	r2, r2
 800b4aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b4ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4b2:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4b6:	4581      	cmp	r9, r0
 800b4b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4bc:	f84c 3b04 	str.w	r3, [ip], #4
 800b4c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4c4:	d2db      	bcs.n	800b47e <quorem+0x42>
 800b4c6:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4ca:	b92b      	cbnz	r3, 800b4d8 <quorem+0x9c>
 800b4cc:	9b01      	ldr	r3, [sp, #4]
 800b4ce:	3b04      	subs	r3, #4
 800b4d0:	429d      	cmp	r5, r3
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	d32c      	bcc.n	800b530 <quorem+0xf4>
 800b4d6:	613c      	str	r4, [r7, #16]
 800b4d8:	4638      	mov	r0, r7
 800b4da:	f001 f93d 	bl	800c758 <__mcmp>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	db22      	blt.n	800b528 <quorem+0xec>
 800b4e2:	3601      	adds	r6, #1
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4ec:	f8d1 c000 	ldr.w	ip, [r1]
 800b4f0:	b293      	uxth	r3, r2
 800b4f2:	1ac3      	subs	r3, r0, r3
 800b4f4:	0c12      	lsrs	r2, r2, #16
 800b4f6:	fa13 f38c 	uxtah	r3, r3, ip
 800b4fa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b4fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b502:	b29b      	uxth	r3, r3
 800b504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b508:	45c1      	cmp	r9, r8
 800b50a:	f841 3b04 	str.w	r3, [r1], #4
 800b50e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b512:	d2e9      	bcs.n	800b4e8 <quorem+0xac>
 800b514:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b518:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b51c:	b922      	cbnz	r2, 800b528 <quorem+0xec>
 800b51e:	3b04      	subs	r3, #4
 800b520:	429d      	cmp	r5, r3
 800b522:	461a      	mov	r2, r3
 800b524:	d30a      	bcc.n	800b53c <quorem+0x100>
 800b526:	613c      	str	r4, [r7, #16]
 800b528:	4630      	mov	r0, r6
 800b52a:	b003      	add	sp, #12
 800b52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b530:	6812      	ldr	r2, [r2, #0]
 800b532:	3b04      	subs	r3, #4
 800b534:	2a00      	cmp	r2, #0
 800b536:	d1ce      	bne.n	800b4d6 <quorem+0x9a>
 800b538:	3c01      	subs	r4, #1
 800b53a:	e7c9      	b.n	800b4d0 <quorem+0x94>
 800b53c:	6812      	ldr	r2, [r2, #0]
 800b53e:	3b04      	subs	r3, #4
 800b540:	2a00      	cmp	r2, #0
 800b542:	d1f0      	bne.n	800b526 <quorem+0xea>
 800b544:	3c01      	subs	r4, #1
 800b546:	e7eb      	b.n	800b520 <quorem+0xe4>
 800b548:	2000      	movs	r0, #0
 800b54a:	e7ee      	b.n	800b52a <quorem+0xee>
 800b54c:	0000      	movs	r0, r0
	...

0800b550 <_dtoa_r>:
 800b550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	ed2d 8b04 	vpush	{d8-d9}
 800b558:	69c5      	ldr	r5, [r0, #28]
 800b55a:	b093      	sub	sp, #76	; 0x4c
 800b55c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b560:	ec57 6b10 	vmov	r6, r7, d0
 800b564:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b568:	9107      	str	r1, [sp, #28]
 800b56a:	4604      	mov	r4, r0
 800b56c:	920a      	str	r2, [sp, #40]	; 0x28
 800b56e:	930d      	str	r3, [sp, #52]	; 0x34
 800b570:	b975      	cbnz	r5, 800b590 <_dtoa_r+0x40>
 800b572:	2010      	movs	r0, #16
 800b574:	f7fe fe66 	bl	800a244 <malloc>
 800b578:	4602      	mov	r2, r0
 800b57a:	61e0      	str	r0, [r4, #28]
 800b57c:	b920      	cbnz	r0, 800b588 <_dtoa_r+0x38>
 800b57e:	4bae      	ldr	r3, [pc, #696]	; (800b838 <_dtoa_r+0x2e8>)
 800b580:	21ef      	movs	r1, #239	; 0xef
 800b582:	48ae      	ldr	r0, [pc, #696]	; (800b83c <_dtoa_r+0x2ec>)
 800b584:	f002 fba0 	bl	800dcc8 <__assert_func>
 800b588:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b58c:	6005      	str	r5, [r0, #0]
 800b58e:	60c5      	str	r5, [r0, #12]
 800b590:	69e3      	ldr	r3, [r4, #28]
 800b592:	6819      	ldr	r1, [r3, #0]
 800b594:	b151      	cbz	r1, 800b5ac <_dtoa_r+0x5c>
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	604a      	str	r2, [r1, #4]
 800b59a:	2301      	movs	r3, #1
 800b59c:	4093      	lsls	r3, r2
 800b59e:	608b      	str	r3, [r1, #8]
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f000 fe53 	bl	800c24c <_Bfree>
 800b5a6:	69e3      	ldr	r3, [r4, #28]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	1e3b      	subs	r3, r7, #0
 800b5ae:	bfbb      	ittet	lt
 800b5b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5b4:	9303      	strlt	r3, [sp, #12]
 800b5b6:	2300      	movge	r3, #0
 800b5b8:	2201      	movlt	r2, #1
 800b5ba:	bfac      	ite	ge
 800b5bc:	f8c8 3000 	strge.w	r3, [r8]
 800b5c0:	f8c8 2000 	strlt.w	r2, [r8]
 800b5c4:	4b9e      	ldr	r3, [pc, #632]	; (800b840 <_dtoa_r+0x2f0>)
 800b5c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b5ca:	ea33 0308 	bics.w	r3, r3, r8
 800b5ce:	d11b      	bne.n	800b608 <_dtoa_r+0xb8>
 800b5d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b5dc:	4333      	orrs	r3, r6
 800b5de:	f000 8593 	beq.w	800c108 <_dtoa_r+0xbb8>
 800b5e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5e4:	b963      	cbnz	r3, 800b600 <_dtoa_r+0xb0>
 800b5e6:	4b97      	ldr	r3, [pc, #604]	; (800b844 <_dtoa_r+0x2f4>)
 800b5e8:	e027      	b.n	800b63a <_dtoa_r+0xea>
 800b5ea:	4b97      	ldr	r3, [pc, #604]	; (800b848 <_dtoa_r+0x2f8>)
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	3308      	adds	r3, #8
 800b5f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5f2:	6013      	str	r3, [r2, #0]
 800b5f4:	9800      	ldr	r0, [sp, #0]
 800b5f6:	b013      	add	sp, #76	; 0x4c
 800b5f8:	ecbd 8b04 	vpop	{d8-d9}
 800b5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b600:	4b90      	ldr	r3, [pc, #576]	; (800b844 <_dtoa_r+0x2f4>)
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	3303      	adds	r3, #3
 800b606:	e7f3      	b.n	800b5f0 <_dtoa_r+0xa0>
 800b608:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b60c:	2200      	movs	r2, #0
 800b60e:	ec51 0b17 	vmov	r0, r1, d7
 800b612:	eeb0 8a47 	vmov.f32	s16, s14
 800b616:	eef0 8a67 	vmov.f32	s17, s15
 800b61a:	2300      	movs	r3, #0
 800b61c:	f7f5 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 800b620:	4681      	mov	r9, r0
 800b622:	b160      	cbz	r0, 800b63e <_dtoa_r+0xee>
 800b624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b626:	2301      	movs	r3, #1
 800b628:	6013      	str	r3, [r2, #0]
 800b62a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 8568 	beq.w	800c102 <_dtoa_r+0xbb2>
 800b632:	4b86      	ldr	r3, [pc, #536]	; (800b84c <_dtoa_r+0x2fc>)
 800b634:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b636:	6013      	str	r3, [r2, #0]
 800b638:	3b01      	subs	r3, #1
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	e7da      	b.n	800b5f4 <_dtoa_r+0xa4>
 800b63e:	aa10      	add	r2, sp, #64	; 0x40
 800b640:	a911      	add	r1, sp, #68	; 0x44
 800b642:	4620      	mov	r0, r4
 800b644:	eeb0 0a48 	vmov.f32	s0, s16
 800b648:	eef0 0a68 	vmov.f32	s1, s17
 800b64c:	f001 f99a 	bl	800c984 <__d2b>
 800b650:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b654:	4682      	mov	sl, r0
 800b656:	2d00      	cmp	r5, #0
 800b658:	d07f      	beq.n	800b75a <_dtoa_r+0x20a>
 800b65a:	ee18 3a90 	vmov	r3, s17
 800b65e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b662:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b666:	ec51 0b18 	vmov	r0, r1, d8
 800b66a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b66e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b672:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b676:	4619      	mov	r1, r3
 800b678:	2200      	movs	r2, #0
 800b67a:	4b75      	ldr	r3, [pc, #468]	; (800b850 <_dtoa_r+0x300>)
 800b67c:	f7f4 fe04 	bl	8000288 <__aeabi_dsub>
 800b680:	a367      	add	r3, pc, #412	; (adr r3, 800b820 <_dtoa_r+0x2d0>)
 800b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b686:	f7f4 ffb7 	bl	80005f8 <__aeabi_dmul>
 800b68a:	a367      	add	r3, pc, #412	; (adr r3, 800b828 <_dtoa_r+0x2d8>)
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	f7f4 fdfc 	bl	800028c <__adddf3>
 800b694:	4606      	mov	r6, r0
 800b696:	4628      	mov	r0, r5
 800b698:	460f      	mov	r7, r1
 800b69a:	f7f4 ff43 	bl	8000524 <__aeabi_i2d>
 800b69e:	a364      	add	r3, pc, #400	; (adr r3, 800b830 <_dtoa_r+0x2e0>)
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	f7f4 ffa8 	bl	80005f8 <__aeabi_dmul>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f7f4 fdec 	bl	800028c <__adddf3>
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	460f      	mov	r7, r1
 800b6b8:	f7f5 fa4e 	bl	8000b58 <__aeabi_d2iz>
 800b6bc:	2200      	movs	r2, #0
 800b6be:	4683      	mov	fp, r0
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	4639      	mov	r1, r7
 800b6c6:	f7f5 fa09 	bl	8000adc <__aeabi_dcmplt>
 800b6ca:	b148      	cbz	r0, 800b6e0 <_dtoa_r+0x190>
 800b6cc:	4658      	mov	r0, fp
 800b6ce:	f7f4 ff29 	bl	8000524 <__aeabi_i2d>
 800b6d2:	4632      	mov	r2, r6
 800b6d4:	463b      	mov	r3, r7
 800b6d6:	f7f5 f9f7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6da:	b908      	cbnz	r0, 800b6e0 <_dtoa_r+0x190>
 800b6dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6e0:	f1bb 0f16 	cmp.w	fp, #22
 800b6e4:	d857      	bhi.n	800b796 <_dtoa_r+0x246>
 800b6e6:	4b5b      	ldr	r3, [pc, #364]	; (800b854 <_dtoa_r+0x304>)
 800b6e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	ec51 0b18 	vmov	r0, r1, d8
 800b6f4:	f7f5 f9f2 	bl	8000adc <__aeabi_dcmplt>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d04e      	beq.n	800b79a <_dtoa_r+0x24a>
 800b6fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b700:	2300      	movs	r3, #0
 800b702:	930c      	str	r3, [sp, #48]	; 0x30
 800b704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b706:	1b5b      	subs	r3, r3, r5
 800b708:	1e5a      	subs	r2, r3, #1
 800b70a:	bf45      	ittet	mi
 800b70c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b710:	9305      	strmi	r3, [sp, #20]
 800b712:	2300      	movpl	r3, #0
 800b714:	2300      	movmi	r3, #0
 800b716:	9206      	str	r2, [sp, #24]
 800b718:	bf54      	ite	pl
 800b71a:	9305      	strpl	r3, [sp, #20]
 800b71c:	9306      	strmi	r3, [sp, #24]
 800b71e:	f1bb 0f00 	cmp.w	fp, #0
 800b722:	db3c      	blt.n	800b79e <_dtoa_r+0x24e>
 800b724:	9b06      	ldr	r3, [sp, #24]
 800b726:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b72a:	445b      	add	r3, fp
 800b72c:	9306      	str	r3, [sp, #24]
 800b72e:	2300      	movs	r3, #0
 800b730:	9308      	str	r3, [sp, #32]
 800b732:	9b07      	ldr	r3, [sp, #28]
 800b734:	2b09      	cmp	r3, #9
 800b736:	d868      	bhi.n	800b80a <_dtoa_r+0x2ba>
 800b738:	2b05      	cmp	r3, #5
 800b73a:	bfc4      	itt	gt
 800b73c:	3b04      	subgt	r3, #4
 800b73e:	9307      	strgt	r3, [sp, #28]
 800b740:	9b07      	ldr	r3, [sp, #28]
 800b742:	f1a3 0302 	sub.w	r3, r3, #2
 800b746:	bfcc      	ite	gt
 800b748:	2500      	movgt	r5, #0
 800b74a:	2501      	movle	r5, #1
 800b74c:	2b03      	cmp	r3, #3
 800b74e:	f200 8085 	bhi.w	800b85c <_dtoa_r+0x30c>
 800b752:	e8df f003 	tbb	[pc, r3]
 800b756:	3b2e      	.short	0x3b2e
 800b758:	5839      	.short	0x5839
 800b75a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b75e:	441d      	add	r5, r3
 800b760:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b764:	2b20      	cmp	r3, #32
 800b766:	bfc1      	itttt	gt
 800b768:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b76c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b770:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b774:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b778:	bfd6      	itet	le
 800b77a:	f1c3 0320 	rsble	r3, r3, #32
 800b77e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b782:	fa06 f003 	lslle.w	r0, r6, r3
 800b786:	f7f4 febd 	bl	8000504 <__aeabi_ui2d>
 800b78a:	2201      	movs	r2, #1
 800b78c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b790:	3d01      	subs	r5, #1
 800b792:	920e      	str	r2, [sp, #56]	; 0x38
 800b794:	e76f      	b.n	800b676 <_dtoa_r+0x126>
 800b796:	2301      	movs	r3, #1
 800b798:	e7b3      	b.n	800b702 <_dtoa_r+0x1b2>
 800b79a:	900c      	str	r0, [sp, #48]	; 0x30
 800b79c:	e7b2      	b.n	800b704 <_dtoa_r+0x1b4>
 800b79e:	9b05      	ldr	r3, [sp, #20]
 800b7a0:	eba3 030b 	sub.w	r3, r3, fp
 800b7a4:	9305      	str	r3, [sp, #20]
 800b7a6:	f1cb 0300 	rsb	r3, fp, #0
 800b7aa:	9308      	str	r3, [sp, #32]
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7b0:	e7bf      	b.n	800b732 <_dtoa_r+0x1e2>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	dc52      	bgt.n	800b862 <_dtoa_r+0x312>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	920a      	str	r2, [sp, #40]	; 0x28
 800b7c6:	e00b      	b.n	800b7e0 <_dtoa_r+0x290>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e7f3      	b.n	800b7b4 <_dtoa_r+0x264>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7d2:	445b      	add	r3, fp
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	9304      	str	r3, [sp, #16]
 800b7dc:	bfb8      	it	lt
 800b7de:	2301      	movlt	r3, #1
 800b7e0:	69e0      	ldr	r0, [r4, #28]
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	2204      	movs	r2, #4
 800b7e6:	f102 0614 	add.w	r6, r2, #20
 800b7ea:	429e      	cmp	r6, r3
 800b7ec:	d93d      	bls.n	800b86a <_dtoa_r+0x31a>
 800b7ee:	6041      	str	r1, [r0, #4]
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 fceb 	bl	800c1cc <_Balloc>
 800b7f6:	9000      	str	r0, [sp, #0]
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d139      	bne.n	800b870 <_dtoa_r+0x320>
 800b7fc:	4b16      	ldr	r3, [pc, #88]	; (800b858 <_dtoa_r+0x308>)
 800b7fe:	4602      	mov	r2, r0
 800b800:	f240 11af 	movw	r1, #431	; 0x1af
 800b804:	e6bd      	b.n	800b582 <_dtoa_r+0x32>
 800b806:	2301      	movs	r3, #1
 800b808:	e7e1      	b.n	800b7ce <_dtoa_r+0x27e>
 800b80a:	2501      	movs	r5, #1
 800b80c:	2300      	movs	r3, #0
 800b80e:	9307      	str	r3, [sp, #28]
 800b810:	9509      	str	r5, [sp, #36]	; 0x24
 800b812:	f04f 33ff 	mov.w	r3, #4294967295
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	9304      	str	r3, [sp, #16]
 800b81a:	2200      	movs	r2, #0
 800b81c:	2312      	movs	r3, #18
 800b81e:	e7d1      	b.n	800b7c4 <_dtoa_r+0x274>
 800b820:	636f4361 	.word	0x636f4361
 800b824:	3fd287a7 	.word	0x3fd287a7
 800b828:	8b60c8b3 	.word	0x8b60c8b3
 800b82c:	3fc68a28 	.word	0x3fc68a28
 800b830:	509f79fb 	.word	0x509f79fb
 800b834:	3fd34413 	.word	0x3fd34413
 800b838:	08011cb6 	.word	0x08011cb6
 800b83c:	08011ccd 	.word	0x08011ccd
 800b840:	7ff00000 	.word	0x7ff00000
 800b844:	08011cb2 	.word	0x08011cb2
 800b848:	08011ca9 	.word	0x08011ca9
 800b84c:	08011c81 	.word	0x08011c81
 800b850:	3ff80000 	.word	0x3ff80000
 800b854:	08011db8 	.word	0x08011db8
 800b858:	08011d25 	.word	0x08011d25
 800b85c:	2301      	movs	r3, #1
 800b85e:	9309      	str	r3, [sp, #36]	; 0x24
 800b860:	e7d7      	b.n	800b812 <_dtoa_r+0x2c2>
 800b862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b864:	9301      	str	r3, [sp, #4]
 800b866:	9304      	str	r3, [sp, #16]
 800b868:	e7ba      	b.n	800b7e0 <_dtoa_r+0x290>
 800b86a:	3101      	adds	r1, #1
 800b86c:	0052      	lsls	r2, r2, #1
 800b86e:	e7ba      	b.n	800b7e6 <_dtoa_r+0x296>
 800b870:	69e3      	ldr	r3, [r4, #28]
 800b872:	9a00      	ldr	r2, [sp, #0]
 800b874:	601a      	str	r2, [r3, #0]
 800b876:	9b04      	ldr	r3, [sp, #16]
 800b878:	2b0e      	cmp	r3, #14
 800b87a:	f200 80a8 	bhi.w	800b9ce <_dtoa_r+0x47e>
 800b87e:	2d00      	cmp	r5, #0
 800b880:	f000 80a5 	beq.w	800b9ce <_dtoa_r+0x47e>
 800b884:	f1bb 0f00 	cmp.w	fp, #0
 800b888:	dd38      	ble.n	800b8fc <_dtoa_r+0x3ac>
 800b88a:	4bc0      	ldr	r3, [pc, #768]	; (800bb8c <_dtoa_r+0x63c>)
 800b88c:	f00b 020f 	and.w	r2, fp, #15
 800b890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b894:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b898:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b89c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b8a0:	d019      	beq.n	800b8d6 <_dtoa_r+0x386>
 800b8a2:	4bbb      	ldr	r3, [pc, #748]	; (800bb90 <_dtoa_r+0x640>)
 800b8a4:	ec51 0b18 	vmov	r0, r1, d8
 800b8a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8ac:	f7f4 ffce 	bl	800084c <__aeabi_ddiv>
 800b8b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8b4:	f008 080f 	and.w	r8, r8, #15
 800b8b8:	2503      	movs	r5, #3
 800b8ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bb90 <_dtoa_r+0x640>
 800b8be:	f1b8 0f00 	cmp.w	r8, #0
 800b8c2:	d10a      	bne.n	800b8da <_dtoa_r+0x38a>
 800b8c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8c8:	4632      	mov	r2, r6
 800b8ca:	463b      	mov	r3, r7
 800b8cc:	f7f4 ffbe 	bl	800084c <__aeabi_ddiv>
 800b8d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8d4:	e02b      	b.n	800b92e <_dtoa_r+0x3de>
 800b8d6:	2502      	movs	r5, #2
 800b8d8:	e7ef      	b.n	800b8ba <_dtoa_r+0x36a>
 800b8da:	f018 0f01 	tst.w	r8, #1
 800b8de:	d008      	beq.n	800b8f2 <_dtoa_r+0x3a2>
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	4639      	mov	r1, r7
 800b8e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b8e8:	f7f4 fe86 	bl	80005f8 <__aeabi_dmul>
 800b8ec:	3501      	adds	r5, #1
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	460f      	mov	r7, r1
 800b8f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b8f6:	f109 0908 	add.w	r9, r9, #8
 800b8fa:	e7e0      	b.n	800b8be <_dtoa_r+0x36e>
 800b8fc:	f000 809f 	beq.w	800ba3e <_dtoa_r+0x4ee>
 800b900:	f1cb 0600 	rsb	r6, fp, #0
 800b904:	4ba1      	ldr	r3, [pc, #644]	; (800bb8c <_dtoa_r+0x63c>)
 800b906:	4fa2      	ldr	r7, [pc, #648]	; (800bb90 <_dtoa_r+0x640>)
 800b908:	f006 020f 	and.w	r2, r6, #15
 800b90c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b914:	ec51 0b18 	vmov	r0, r1, d8
 800b918:	f7f4 fe6e 	bl	80005f8 <__aeabi_dmul>
 800b91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b920:	1136      	asrs	r6, r6, #4
 800b922:	2300      	movs	r3, #0
 800b924:	2502      	movs	r5, #2
 800b926:	2e00      	cmp	r6, #0
 800b928:	d17e      	bne.n	800ba28 <_dtoa_r+0x4d8>
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1d0      	bne.n	800b8d0 <_dtoa_r+0x380>
 800b92e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b930:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 8084 	beq.w	800ba42 <_dtoa_r+0x4f2>
 800b93a:	4b96      	ldr	r3, [pc, #600]	; (800bb94 <_dtoa_r+0x644>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	4640      	mov	r0, r8
 800b940:	4649      	mov	r1, r9
 800b942:	f7f5 f8cb 	bl	8000adc <__aeabi_dcmplt>
 800b946:	2800      	cmp	r0, #0
 800b948:	d07b      	beq.n	800ba42 <_dtoa_r+0x4f2>
 800b94a:	9b04      	ldr	r3, [sp, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d078      	beq.n	800ba42 <_dtoa_r+0x4f2>
 800b950:	9b01      	ldr	r3, [sp, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	dd39      	ble.n	800b9ca <_dtoa_r+0x47a>
 800b956:	4b90      	ldr	r3, [pc, #576]	; (800bb98 <_dtoa_r+0x648>)
 800b958:	2200      	movs	r2, #0
 800b95a:	4640      	mov	r0, r8
 800b95c:	4649      	mov	r1, r9
 800b95e:	f7f4 fe4b 	bl	80005f8 <__aeabi_dmul>
 800b962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b966:	9e01      	ldr	r6, [sp, #4]
 800b968:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b96c:	3501      	adds	r5, #1
 800b96e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b972:	4628      	mov	r0, r5
 800b974:	f7f4 fdd6 	bl	8000524 <__aeabi_i2d>
 800b978:	4642      	mov	r2, r8
 800b97a:	464b      	mov	r3, r9
 800b97c:	f7f4 fe3c 	bl	80005f8 <__aeabi_dmul>
 800b980:	4b86      	ldr	r3, [pc, #536]	; (800bb9c <_dtoa_r+0x64c>)
 800b982:	2200      	movs	r2, #0
 800b984:	f7f4 fc82 	bl	800028c <__adddf3>
 800b988:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b990:	9303      	str	r3, [sp, #12]
 800b992:	2e00      	cmp	r6, #0
 800b994:	d158      	bne.n	800ba48 <_dtoa_r+0x4f8>
 800b996:	4b82      	ldr	r3, [pc, #520]	; (800bba0 <_dtoa_r+0x650>)
 800b998:	2200      	movs	r2, #0
 800b99a:	4640      	mov	r0, r8
 800b99c:	4649      	mov	r1, r9
 800b99e:	f7f4 fc73 	bl	8000288 <__aeabi_dsub>
 800b9a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9a6:	4680      	mov	r8, r0
 800b9a8:	4689      	mov	r9, r1
 800b9aa:	f7f5 f8b5 	bl	8000b18 <__aeabi_dcmpgt>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	f040 8296 	bne.w	800bee0 <_dtoa_r+0x990>
 800b9b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b9b8:	4640      	mov	r0, r8
 800b9ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9be:	4649      	mov	r1, r9
 800b9c0:	f7f5 f88c 	bl	8000adc <__aeabi_dcmplt>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	f040 8289 	bne.w	800bedc <_dtoa_r+0x98c>
 800b9ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b9ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f2c0 814e 	blt.w	800bc72 <_dtoa_r+0x722>
 800b9d6:	f1bb 0f0e 	cmp.w	fp, #14
 800b9da:	f300 814a 	bgt.w	800bc72 <_dtoa_r+0x722>
 800b9de:	4b6b      	ldr	r3, [pc, #428]	; (800bb8c <_dtoa_r+0x63c>)
 800b9e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b9e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f280 80dc 	bge.w	800bba8 <_dtoa_r+0x658>
 800b9f0:	9b04      	ldr	r3, [sp, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f300 80d8 	bgt.w	800bba8 <_dtoa_r+0x658>
 800b9f8:	f040 826f 	bne.w	800beda <_dtoa_r+0x98a>
 800b9fc:	4b68      	ldr	r3, [pc, #416]	; (800bba0 <_dtoa_r+0x650>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	4640      	mov	r0, r8
 800ba02:	4649      	mov	r1, r9
 800ba04:	f7f4 fdf8 	bl	80005f8 <__aeabi_dmul>
 800ba08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba0c:	f7f5 f87a 	bl	8000b04 <__aeabi_dcmpge>
 800ba10:	9e04      	ldr	r6, [sp, #16]
 800ba12:	4637      	mov	r7, r6
 800ba14:	2800      	cmp	r0, #0
 800ba16:	f040 8245 	bne.w	800bea4 <_dtoa_r+0x954>
 800ba1a:	9d00      	ldr	r5, [sp, #0]
 800ba1c:	2331      	movs	r3, #49	; 0x31
 800ba1e:	f805 3b01 	strb.w	r3, [r5], #1
 800ba22:	f10b 0b01 	add.w	fp, fp, #1
 800ba26:	e241      	b.n	800beac <_dtoa_r+0x95c>
 800ba28:	07f2      	lsls	r2, r6, #31
 800ba2a:	d505      	bpl.n	800ba38 <_dtoa_r+0x4e8>
 800ba2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba30:	f7f4 fde2 	bl	80005f8 <__aeabi_dmul>
 800ba34:	3501      	adds	r5, #1
 800ba36:	2301      	movs	r3, #1
 800ba38:	1076      	asrs	r6, r6, #1
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	e773      	b.n	800b926 <_dtoa_r+0x3d6>
 800ba3e:	2502      	movs	r5, #2
 800ba40:	e775      	b.n	800b92e <_dtoa_r+0x3de>
 800ba42:	9e04      	ldr	r6, [sp, #16]
 800ba44:	465f      	mov	r7, fp
 800ba46:	e792      	b.n	800b96e <_dtoa_r+0x41e>
 800ba48:	9900      	ldr	r1, [sp, #0]
 800ba4a:	4b50      	ldr	r3, [pc, #320]	; (800bb8c <_dtoa_r+0x63c>)
 800ba4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba50:	4431      	add	r1, r6
 800ba52:	9102      	str	r1, [sp, #8]
 800ba54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba56:	eeb0 9a47 	vmov.f32	s18, s14
 800ba5a:	eef0 9a67 	vmov.f32	s19, s15
 800ba5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba66:	2900      	cmp	r1, #0
 800ba68:	d044      	beq.n	800baf4 <_dtoa_r+0x5a4>
 800ba6a:	494e      	ldr	r1, [pc, #312]	; (800bba4 <_dtoa_r+0x654>)
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	f7f4 feed 	bl	800084c <__aeabi_ddiv>
 800ba72:	ec53 2b19 	vmov	r2, r3, d9
 800ba76:	f7f4 fc07 	bl	8000288 <__aeabi_dsub>
 800ba7a:	9d00      	ldr	r5, [sp, #0]
 800ba7c:	ec41 0b19 	vmov	d9, r0, r1
 800ba80:	4649      	mov	r1, r9
 800ba82:	4640      	mov	r0, r8
 800ba84:	f7f5 f868 	bl	8000b58 <__aeabi_d2iz>
 800ba88:	4606      	mov	r6, r0
 800ba8a:	f7f4 fd4b 	bl	8000524 <__aeabi_i2d>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	4640      	mov	r0, r8
 800ba94:	4649      	mov	r1, r9
 800ba96:	f7f4 fbf7 	bl	8000288 <__aeabi_dsub>
 800ba9a:	3630      	adds	r6, #48	; 0x30
 800ba9c:	f805 6b01 	strb.w	r6, [r5], #1
 800baa0:	ec53 2b19 	vmov	r2, r3, d9
 800baa4:	4680      	mov	r8, r0
 800baa6:	4689      	mov	r9, r1
 800baa8:	f7f5 f818 	bl	8000adc <__aeabi_dcmplt>
 800baac:	2800      	cmp	r0, #0
 800baae:	d164      	bne.n	800bb7a <_dtoa_r+0x62a>
 800bab0:	4642      	mov	r2, r8
 800bab2:	464b      	mov	r3, r9
 800bab4:	4937      	ldr	r1, [pc, #220]	; (800bb94 <_dtoa_r+0x644>)
 800bab6:	2000      	movs	r0, #0
 800bab8:	f7f4 fbe6 	bl	8000288 <__aeabi_dsub>
 800babc:	ec53 2b19 	vmov	r2, r3, d9
 800bac0:	f7f5 f80c 	bl	8000adc <__aeabi_dcmplt>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	f040 80b6 	bne.w	800bc36 <_dtoa_r+0x6e6>
 800baca:	9b02      	ldr	r3, [sp, #8]
 800bacc:	429d      	cmp	r5, r3
 800bace:	f43f af7c 	beq.w	800b9ca <_dtoa_r+0x47a>
 800bad2:	4b31      	ldr	r3, [pc, #196]	; (800bb98 <_dtoa_r+0x648>)
 800bad4:	ec51 0b19 	vmov	r0, r1, d9
 800bad8:	2200      	movs	r2, #0
 800bada:	f7f4 fd8d 	bl	80005f8 <__aeabi_dmul>
 800bade:	4b2e      	ldr	r3, [pc, #184]	; (800bb98 <_dtoa_r+0x648>)
 800bae0:	ec41 0b19 	vmov	d9, r0, r1
 800bae4:	2200      	movs	r2, #0
 800bae6:	4640      	mov	r0, r8
 800bae8:	4649      	mov	r1, r9
 800baea:	f7f4 fd85 	bl	80005f8 <__aeabi_dmul>
 800baee:	4680      	mov	r8, r0
 800baf0:	4689      	mov	r9, r1
 800baf2:	e7c5      	b.n	800ba80 <_dtoa_r+0x530>
 800baf4:	ec51 0b17 	vmov	r0, r1, d7
 800baf8:	f7f4 fd7e 	bl	80005f8 <__aeabi_dmul>
 800bafc:	9b02      	ldr	r3, [sp, #8]
 800bafe:	9d00      	ldr	r5, [sp, #0]
 800bb00:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb02:	ec41 0b19 	vmov	d9, r0, r1
 800bb06:	4649      	mov	r1, r9
 800bb08:	4640      	mov	r0, r8
 800bb0a:	f7f5 f825 	bl	8000b58 <__aeabi_d2iz>
 800bb0e:	4606      	mov	r6, r0
 800bb10:	f7f4 fd08 	bl	8000524 <__aeabi_i2d>
 800bb14:	3630      	adds	r6, #48	; 0x30
 800bb16:	4602      	mov	r2, r0
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	f7f4 fbb3 	bl	8000288 <__aeabi_dsub>
 800bb22:	f805 6b01 	strb.w	r6, [r5], #1
 800bb26:	9b02      	ldr	r3, [sp, #8]
 800bb28:	429d      	cmp	r5, r3
 800bb2a:	4680      	mov	r8, r0
 800bb2c:	4689      	mov	r9, r1
 800bb2e:	f04f 0200 	mov.w	r2, #0
 800bb32:	d124      	bne.n	800bb7e <_dtoa_r+0x62e>
 800bb34:	4b1b      	ldr	r3, [pc, #108]	; (800bba4 <_dtoa_r+0x654>)
 800bb36:	ec51 0b19 	vmov	r0, r1, d9
 800bb3a:	f7f4 fba7 	bl	800028c <__adddf3>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4640      	mov	r0, r8
 800bb44:	4649      	mov	r1, r9
 800bb46:	f7f4 ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d173      	bne.n	800bc36 <_dtoa_r+0x6e6>
 800bb4e:	ec53 2b19 	vmov	r2, r3, d9
 800bb52:	4914      	ldr	r1, [pc, #80]	; (800bba4 <_dtoa_r+0x654>)
 800bb54:	2000      	movs	r0, #0
 800bb56:	f7f4 fb97 	bl	8000288 <__aeabi_dsub>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4640      	mov	r0, r8
 800bb60:	4649      	mov	r1, r9
 800bb62:	f7f4 ffbb 	bl	8000adc <__aeabi_dcmplt>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	f43f af2f 	beq.w	800b9ca <_dtoa_r+0x47a>
 800bb6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb6e:	1e6b      	subs	r3, r5, #1
 800bb70:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb76:	2b30      	cmp	r3, #48	; 0x30
 800bb78:	d0f8      	beq.n	800bb6c <_dtoa_r+0x61c>
 800bb7a:	46bb      	mov	fp, r7
 800bb7c:	e04a      	b.n	800bc14 <_dtoa_r+0x6c4>
 800bb7e:	4b06      	ldr	r3, [pc, #24]	; (800bb98 <_dtoa_r+0x648>)
 800bb80:	f7f4 fd3a 	bl	80005f8 <__aeabi_dmul>
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	e7bd      	b.n	800bb06 <_dtoa_r+0x5b6>
 800bb8a:	bf00      	nop
 800bb8c:	08011db8 	.word	0x08011db8
 800bb90:	08011d90 	.word	0x08011d90
 800bb94:	3ff00000 	.word	0x3ff00000
 800bb98:	40240000 	.word	0x40240000
 800bb9c:	401c0000 	.word	0x401c0000
 800bba0:	40140000 	.word	0x40140000
 800bba4:	3fe00000 	.word	0x3fe00000
 800bba8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bbac:	9d00      	ldr	r5, [sp, #0]
 800bbae:	4642      	mov	r2, r8
 800bbb0:	464b      	mov	r3, r9
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	4639      	mov	r1, r7
 800bbb6:	f7f4 fe49 	bl	800084c <__aeabi_ddiv>
 800bbba:	f7f4 ffcd 	bl	8000b58 <__aeabi_d2iz>
 800bbbe:	9001      	str	r0, [sp, #4]
 800bbc0:	f7f4 fcb0 	bl	8000524 <__aeabi_i2d>
 800bbc4:	4642      	mov	r2, r8
 800bbc6:	464b      	mov	r3, r9
 800bbc8:	f7f4 fd16 	bl	80005f8 <__aeabi_dmul>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	4639      	mov	r1, r7
 800bbd4:	f7f4 fb58 	bl	8000288 <__aeabi_dsub>
 800bbd8:	9e01      	ldr	r6, [sp, #4]
 800bbda:	9f04      	ldr	r7, [sp, #16]
 800bbdc:	3630      	adds	r6, #48	; 0x30
 800bbde:	f805 6b01 	strb.w	r6, [r5], #1
 800bbe2:	9e00      	ldr	r6, [sp, #0]
 800bbe4:	1bae      	subs	r6, r5, r6
 800bbe6:	42b7      	cmp	r7, r6
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	d134      	bne.n	800bc58 <_dtoa_r+0x708>
 800bbee:	f7f4 fb4d 	bl	800028c <__adddf3>
 800bbf2:	4642      	mov	r2, r8
 800bbf4:	464b      	mov	r3, r9
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	460f      	mov	r7, r1
 800bbfa:	f7f4 ff8d 	bl	8000b18 <__aeabi_dcmpgt>
 800bbfe:	b9c8      	cbnz	r0, 800bc34 <_dtoa_r+0x6e4>
 800bc00:	4642      	mov	r2, r8
 800bc02:	464b      	mov	r3, r9
 800bc04:	4630      	mov	r0, r6
 800bc06:	4639      	mov	r1, r7
 800bc08:	f7f4 ff5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc0c:	b110      	cbz	r0, 800bc14 <_dtoa_r+0x6c4>
 800bc0e:	9b01      	ldr	r3, [sp, #4]
 800bc10:	07db      	lsls	r3, r3, #31
 800bc12:	d40f      	bmi.n	800bc34 <_dtoa_r+0x6e4>
 800bc14:	4651      	mov	r1, sl
 800bc16:	4620      	mov	r0, r4
 800bc18:	f000 fb18 	bl	800c24c <_Bfree>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc20:	702b      	strb	r3, [r5, #0]
 800bc22:	f10b 0301 	add.w	r3, fp, #1
 800bc26:	6013      	str	r3, [r2, #0]
 800bc28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f43f ace2 	beq.w	800b5f4 <_dtoa_r+0xa4>
 800bc30:	601d      	str	r5, [r3, #0]
 800bc32:	e4df      	b.n	800b5f4 <_dtoa_r+0xa4>
 800bc34:	465f      	mov	r7, fp
 800bc36:	462b      	mov	r3, r5
 800bc38:	461d      	mov	r5, r3
 800bc3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc3e:	2a39      	cmp	r2, #57	; 0x39
 800bc40:	d106      	bne.n	800bc50 <_dtoa_r+0x700>
 800bc42:	9a00      	ldr	r2, [sp, #0]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d1f7      	bne.n	800bc38 <_dtoa_r+0x6e8>
 800bc48:	9900      	ldr	r1, [sp, #0]
 800bc4a:	2230      	movs	r2, #48	; 0x30
 800bc4c:	3701      	adds	r7, #1
 800bc4e:	700a      	strb	r2, [r1, #0]
 800bc50:	781a      	ldrb	r2, [r3, #0]
 800bc52:	3201      	adds	r2, #1
 800bc54:	701a      	strb	r2, [r3, #0]
 800bc56:	e790      	b.n	800bb7a <_dtoa_r+0x62a>
 800bc58:	4ba3      	ldr	r3, [pc, #652]	; (800bee8 <_dtoa_r+0x998>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f7f4 fccc 	bl	80005f8 <__aeabi_dmul>
 800bc60:	2200      	movs	r2, #0
 800bc62:	2300      	movs	r3, #0
 800bc64:	4606      	mov	r6, r0
 800bc66:	460f      	mov	r7, r1
 800bc68:	f7f4 ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d09e      	beq.n	800bbae <_dtoa_r+0x65e>
 800bc70:	e7d0      	b.n	800bc14 <_dtoa_r+0x6c4>
 800bc72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc74:	2a00      	cmp	r2, #0
 800bc76:	f000 80ca 	beq.w	800be0e <_dtoa_r+0x8be>
 800bc7a:	9a07      	ldr	r2, [sp, #28]
 800bc7c:	2a01      	cmp	r2, #1
 800bc7e:	f300 80ad 	bgt.w	800bddc <_dtoa_r+0x88c>
 800bc82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc84:	2a00      	cmp	r2, #0
 800bc86:	f000 80a5 	beq.w	800bdd4 <_dtoa_r+0x884>
 800bc8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc8e:	9e08      	ldr	r6, [sp, #32]
 800bc90:	9d05      	ldr	r5, [sp, #20]
 800bc92:	9a05      	ldr	r2, [sp, #20]
 800bc94:	441a      	add	r2, r3
 800bc96:	9205      	str	r2, [sp, #20]
 800bc98:	9a06      	ldr	r2, [sp, #24]
 800bc9a:	2101      	movs	r1, #1
 800bc9c:	441a      	add	r2, r3
 800bc9e:	4620      	mov	r0, r4
 800bca0:	9206      	str	r2, [sp, #24]
 800bca2:	f000 fbd3 	bl	800c44c <__i2b>
 800bca6:	4607      	mov	r7, r0
 800bca8:	b165      	cbz	r5, 800bcc4 <_dtoa_r+0x774>
 800bcaa:	9b06      	ldr	r3, [sp, #24]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	dd09      	ble.n	800bcc4 <_dtoa_r+0x774>
 800bcb0:	42ab      	cmp	r3, r5
 800bcb2:	9a05      	ldr	r2, [sp, #20]
 800bcb4:	bfa8      	it	ge
 800bcb6:	462b      	movge	r3, r5
 800bcb8:	1ad2      	subs	r2, r2, r3
 800bcba:	9205      	str	r2, [sp, #20]
 800bcbc:	9a06      	ldr	r2, [sp, #24]
 800bcbe:	1aed      	subs	r5, r5, r3
 800bcc0:	1ad3      	subs	r3, r2, r3
 800bcc2:	9306      	str	r3, [sp, #24]
 800bcc4:	9b08      	ldr	r3, [sp, #32]
 800bcc6:	b1f3      	cbz	r3, 800bd06 <_dtoa_r+0x7b6>
 800bcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 80a3 	beq.w	800be16 <_dtoa_r+0x8c6>
 800bcd0:	2e00      	cmp	r6, #0
 800bcd2:	dd10      	ble.n	800bcf6 <_dtoa_r+0x7a6>
 800bcd4:	4639      	mov	r1, r7
 800bcd6:	4632      	mov	r2, r6
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f000 fc77 	bl	800c5cc <__pow5mult>
 800bcde:	4652      	mov	r2, sl
 800bce0:	4601      	mov	r1, r0
 800bce2:	4607      	mov	r7, r0
 800bce4:	4620      	mov	r0, r4
 800bce6:	f000 fbc7 	bl	800c478 <__multiply>
 800bcea:	4651      	mov	r1, sl
 800bcec:	4680      	mov	r8, r0
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 faac 	bl	800c24c <_Bfree>
 800bcf4:	46c2      	mov	sl, r8
 800bcf6:	9b08      	ldr	r3, [sp, #32]
 800bcf8:	1b9a      	subs	r2, r3, r6
 800bcfa:	d004      	beq.n	800bd06 <_dtoa_r+0x7b6>
 800bcfc:	4651      	mov	r1, sl
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f000 fc64 	bl	800c5cc <__pow5mult>
 800bd04:	4682      	mov	sl, r0
 800bd06:	2101      	movs	r1, #1
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f000 fb9f 	bl	800c44c <__i2b>
 800bd0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	4606      	mov	r6, r0
 800bd14:	f340 8081 	ble.w	800be1a <_dtoa_r+0x8ca>
 800bd18:	461a      	mov	r2, r3
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f000 fc55 	bl	800c5cc <__pow5mult>
 800bd22:	9b07      	ldr	r3, [sp, #28]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	4606      	mov	r6, r0
 800bd28:	dd7a      	ble.n	800be20 <_dtoa_r+0x8d0>
 800bd2a:	f04f 0800 	mov.w	r8, #0
 800bd2e:	6933      	ldr	r3, [r6, #16]
 800bd30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd34:	6918      	ldr	r0, [r3, #16]
 800bd36:	f000 fb3b 	bl	800c3b0 <__hi0bits>
 800bd3a:	f1c0 0020 	rsb	r0, r0, #32
 800bd3e:	9b06      	ldr	r3, [sp, #24]
 800bd40:	4418      	add	r0, r3
 800bd42:	f010 001f 	ands.w	r0, r0, #31
 800bd46:	f000 8094 	beq.w	800be72 <_dtoa_r+0x922>
 800bd4a:	f1c0 0320 	rsb	r3, r0, #32
 800bd4e:	2b04      	cmp	r3, #4
 800bd50:	f340 8085 	ble.w	800be5e <_dtoa_r+0x90e>
 800bd54:	9b05      	ldr	r3, [sp, #20]
 800bd56:	f1c0 001c 	rsb	r0, r0, #28
 800bd5a:	4403      	add	r3, r0
 800bd5c:	9305      	str	r3, [sp, #20]
 800bd5e:	9b06      	ldr	r3, [sp, #24]
 800bd60:	4403      	add	r3, r0
 800bd62:	4405      	add	r5, r0
 800bd64:	9306      	str	r3, [sp, #24]
 800bd66:	9b05      	ldr	r3, [sp, #20]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	dd05      	ble.n	800bd78 <_dtoa_r+0x828>
 800bd6c:	4651      	mov	r1, sl
 800bd6e:	461a      	mov	r2, r3
 800bd70:	4620      	mov	r0, r4
 800bd72:	f000 fc85 	bl	800c680 <__lshift>
 800bd76:	4682      	mov	sl, r0
 800bd78:	9b06      	ldr	r3, [sp, #24]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	dd05      	ble.n	800bd8a <_dtoa_r+0x83a>
 800bd7e:	4631      	mov	r1, r6
 800bd80:	461a      	mov	r2, r3
 800bd82:	4620      	mov	r0, r4
 800bd84:	f000 fc7c 	bl	800c680 <__lshift>
 800bd88:	4606      	mov	r6, r0
 800bd8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d072      	beq.n	800be76 <_dtoa_r+0x926>
 800bd90:	4631      	mov	r1, r6
 800bd92:	4650      	mov	r0, sl
 800bd94:	f000 fce0 	bl	800c758 <__mcmp>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	da6c      	bge.n	800be76 <_dtoa_r+0x926>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4651      	mov	r1, sl
 800bda0:	220a      	movs	r2, #10
 800bda2:	4620      	mov	r0, r4
 800bda4:	f000 fa74 	bl	800c290 <__multadd>
 800bda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdae:	4682      	mov	sl, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 81b0 	beq.w	800c116 <_dtoa_r+0xbc6>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	4639      	mov	r1, r7
 800bdba:	220a      	movs	r2, #10
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f000 fa67 	bl	800c290 <__multadd>
 800bdc2:	9b01      	ldr	r3, [sp, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	4607      	mov	r7, r0
 800bdc8:	f300 8096 	bgt.w	800bef8 <_dtoa_r+0x9a8>
 800bdcc:	9b07      	ldr	r3, [sp, #28]
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	dc59      	bgt.n	800be86 <_dtoa_r+0x936>
 800bdd2:	e091      	b.n	800bef8 <_dtoa_r+0x9a8>
 800bdd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bdda:	e758      	b.n	800bc8e <_dtoa_r+0x73e>
 800bddc:	9b04      	ldr	r3, [sp, #16]
 800bdde:	1e5e      	subs	r6, r3, #1
 800bde0:	9b08      	ldr	r3, [sp, #32]
 800bde2:	42b3      	cmp	r3, r6
 800bde4:	bfbf      	itttt	lt
 800bde6:	9b08      	ldrlt	r3, [sp, #32]
 800bde8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bdea:	9608      	strlt	r6, [sp, #32]
 800bdec:	1af3      	sublt	r3, r6, r3
 800bdee:	bfb4      	ite	lt
 800bdf0:	18d2      	addlt	r2, r2, r3
 800bdf2:	1b9e      	subge	r6, r3, r6
 800bdf4:	9b04      	ldr	r3, [sp, #16]
 800bdf6:	bfbc      	itt	lt
 800bdf8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bdfa:	2600      	movlt	r6, #0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bfb7      	itett	lt
 800be00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800be04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800be08:	1a9d      	sublt	r5, r3, r2
 800be0a:	2300      	movlt	r3, #0
 800be0c:	e741      	b.n	800bc92 <_dtoa_r+0x742>
 800be0e:	9e08      	ldr	r6, [sp, #32]
 800be10:	9d05      	ldr	r5, [sp, #20]
 800be12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be14:	e748      	b.n	800bca8 <_dtoa_r+0x758>
 800be16:	9a08      	ldr	r2, [sp, #32]
 800be18:	e770      	b.n	800bcfc <_dtoa_r+0x7ac>
 800be1a:	9b07      	ldr	r3, [sp, #28]
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	dc19      	bgt.n	800be54 <_dtoa_r+0x904>
 800be20:	9b02      	ldr	r3, [sp, #8]
 800be22:	b9bb      	cbnz	r3, 800be54 <_dtoa_r+0x904>
 800be24:	9b03      	ldr	r3, [sp, #12]
 800be26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be2a:	b99b      	cbnz	r3, 800be54 <_dtoa_r+0x904>
 800be2c:	9b03      	ldr	r3, [sp, #12]
 800be2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be32:	0d1b      	lsrs	r3, r3, #20
 800be34:	051b      	lsls	r3, r3, #20
 800be36:	b183      	cbz	r3, 800be5a <_dtoa_r+0x90a>
 800be38:	9b05      	ldr	r3, [sp, #20]
 800be3a:	3301      	adds	r3, #1
 800be3c:	9305      	str	r3, [sp, #20]
 800be3e:	9b06      	ldr	r3, [sp, #24]
 800be40:	3301      	adds	r3, #1
 800be42:	9306      	str	r3, [sp, #24]
 800be44:	f04f 0801 	mov.w	r8, #1
 800be48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f47f af6f 	bne.w	800bd2e <_dtoa_r+0x7de>
 800be50:	2001      	movs	r0, #1
 800be52:	e774      	b.n	800bd3e <_dtoa_r+0x7ee>
 800be54:	f04f 0800 	mov.w	r8, #0
 800be58:	e7f6      	b.n	800be48 <_dtoa_r+0x8f8>
 800be5a:	4698      	mov	r8, r3
 800be5c:	e7f4      	b.n	800be48 <_dtoa_r+0x8f8>
 800be5e:	d082      	beq.n	800bd66 <_dtoa_r+0x816>
 800be60:	9a05      	ldr	r2, [sp, #20]
 800be62:	331c      	adds	r3, #28
 800be64:	441a      	add	r2, r3
 800be66:	9205      	str	r2, [sp, #20]
 800be68:	9a06      	ldr	r2, [sp, #24]
 800be6a:	441a      	add	r2, r3
 800be6c:	441d      	add	r5, r3
 800be6e:	9206      	str	r2, [sp, #24]
 800be70:	e779      	b.n	800bd66 <_dtoa_r+0x816>
 800be72:	4603      	mov	r3, r0
 800be74:	e7f4      	b.n	800be60 <_dtoa_r+0x910>
 800be76:	9b04      	ldr	r3, [sp, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	dc37      	bgt.n	800beec <_dtoa_r+0x99c>
 800be7c:	9b07      	ldr	r3, [sp, #28]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	dd34      	ble.n	800beec <_dtoa_r+0x99c>
 800be82:	9b04      	ldr	r3, [sp, #16]
 800be84:	9301      	str	r3, [sp, #4]
 800be86:	9b01      	ldr	r3, [sp, #4]
 800be88:	b963      	cbnz	r3, 800bea4 <_dtoa_r+0x954>
 800be8a:	4631      	mov	r1, r6
 800be8c:	2205      	movs	r2, #5
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 f9fe 	bl	800c290 <__multadd>
 800be94:	4601      	mov	r1, r0
 800be96:	4606      	mov	r6, r0
 800be98:	4650      	mov	r0, sl
 800be9a:	f000 fc5d 	bl	800c758 <__mcmp>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	f73f adbb 	bgt.w	800ba1a <_dtoa_r+0x4ca>
 800bea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bea6:	9d00      	ldr	r5, [sp, #0]
 800bea8:	ea6f 0b03 	mvn.w	fp, r3
 800beac:	f04f 0800 	mov.w	r8, #0
 800beb0:	4631      	mov	r1, r6
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 f9ca 	bl	800c24c <_Bfree>
 800beb8:	2f00      	cmp	r7, #0
 800beba:	f43f aeab 	beq.w	800bc14 <_dtoa_r+0x6c4>
 800bebe:	f1b8 0f00 	cmp.w	r8, #0
 800bec2:	d005      	beq.n	800bed0 <_dtoa_r+0x980>
 800bec4:	45b8      	cmp	r8, r7
 800bec6:	d003      	beq.n	800bed0 <_dtoa_r+0x980>
 800bec8:	4641      	mov	r1, r8
 800beca:	4620      	mov	r0, r4
 800becc:	f000 f9be 	bl	800c24c <_Bfree>
 800bed0:	4639      	mov	r1, r7
 800bed2:	4620      	mov	r0, r4
 800bed4:	f000 f9ba 	bl	800c24c <_Bfree>
 800bed8:	e69c      	b.n	800bc14 <_dtoa_r+0x6c4>
 800beda:	2600      	movs	r6, #0
 800bedc:	4637      	mov	r7, r6
 800bede:	e7e1      	b.n	800bea4 <_dtoa_r+0x954>
 800bee0:	46bb      	mov	fp, r7
 800bee2:	4637      	mov	r7, r6
 800bee4:	e599      	b.n	800ba1a <_dtoa_r+0x4ca>
 800bee6:	bf00      	nop
 800bee8:	40240000 	.word	0x40240000
 800beec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 80c8 	beq.w	800c084 <_dtoa_r+0xb34>
 800bef4:	9b04      	ldr	r3, [sp, #16]
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	2d00      	cmp	r5, #0
 800befa:	dd05      	ble.n	800bf08 <_dtoa_r+0x9b8>
 800befc:	4639      	mov	r1, r7
 800befe:	462a      	mov	r2, r5
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 fbbd 	bl	800c680 <__lshift>
 800bf06:	4607      	mov	r7, r0
 800bf08:	f1b8 0f00 	cmp.w	r8, #0
 800bf0c:	d05b      	beq.n	800bfc6 <_dtoa_r+0xa76>
 800bf0e:	6879      	ldr	r1, [r7, #4]
 800bf10:	4620      	mov	r0, r4
 800bf12:	f000 f95b 	bl	800c1cc <_Balloc>
 800bf16:	4605      	mov	r5, r0
 800bf18:	b928      	cbnz	r0, 800bf26 <_dtoa_r+0x9d6>
 800bf1a:	4b83      	ldr	r3, [pc, #524]	; (800c128 <_dtoa_r+0xbd8>)
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bf22:	f7ff bb2e 	b.w	800b582 <_dtoa_r+0x32>
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	3202      	adds	r2, #2
 800bf2a:	0092      	lsls	r2, r2, #2
 800bf2c:	f107 010c 	add.w	r1, r7, #12
 800bf30:	300c      	adds	r0, #12
 800bf32:	f7ff fa6e 	bl	800b412 <memcpy>
 800bf36:	2201      	movs	r2, #1
 800bf38:	4629      	mov	r1, r5
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f000 fba0 	bl	800c680 <__lshift>
 800bf40:	9b00      	ldr	r3, [sp, #0]
 800bf42:	3301      	adds	r3, #1
 800bf44:	9304      	str	r3, [sp, #16]
 800bf46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	9308      	str	r3, [sp, #32]
 800bf4e:	9b02      	ldr	r3, [sp, #8]
 800bf50:	f003 0301 	and.w	r3, r3, #1
 800bf54:	46b8      	mov	r8, r7
 800bf56:	9306      	str	r3, [sp, #24]
 800bf58:	4607      	mov	r7, r0
 800bf5a:	9b04      	ldr	r3, [sp, #16]
 800bf5c:	4631      	mov	r1, r6
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	4650      	mov	r0, sl
 800bf62:	9301      	str	r3, [sp, #4]
 800bf64:	f7ff fa6a 	bl	800b43c <quorem>
 800bf68:	4641      	mov	r1, r8
 800bf6a:	9002      	str	r0, [sp, #8]
 800bf6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bf70:	4650      	mov	r0, sl
 800bf72:	f000 fbf1 	bl	800c758 <__mcmp>
 800bf76:	463a      	mov	r2, r7
 800bf78:	9005      	str	r0, [sp, #20]
 800bf7a:	4631      	mov	r1, r6
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f000 fc07 	bl	800c790 <__mdiff>
 800bf82:	68c2      	ldr	r2, [r0, #12]
 800bf84:	4605      	mov	r5, r0
 800bf86:	bb02      	cbnz	r2, 800bfca <_dtoa_r+0xa7a>
 800bf88:	4601      	mov	r1, r0
 800bf8a:	4650      	mov	r0, sl
 800bf8c:	f000 fbe4 	bl	800c758 <__mcmp>
 800bf90:	4602      	mov	r2, r0
 800bf92:	4629      	mov	r1, r5
 800bf94:	4620      	mov	r0, r4
 800bf96:	9209      	str	r2, [sp, #36]	; 0x24
 800bf98:	f000 f958 	bl	800c24c <_Bfree>
 800bf9c:	9b07      	ldr	r3, [sp, #28]
 800bf9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfa0:	9d04      	ldr	r5, [sp, #16]
 800bfa2:	ea43 0102 	orr.w	r1, r3, r2
 800bfa6:	9b06      	ldr	r3, [sp, #24]
 800bfa8:	4319      	orrs	r1, r3
 800bfaa:	d110      	bne.n	800bfce <_dtoa_r+0xa7e>
 800bfac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bfb0:	d029      	beq.n	800c006 <_dtoa_r+0xab6>
 800bfb2:	9b05      	ldr	r3, [sp, #20]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	dd02      	ble.n	800bfbe <_dtoa_r+0xa6e>
 800bfb8:	9b02      	ldr	r3, [sp, #8]
 800bfba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bfbe:	9b01      	ldr	r3, [sp, #4]
 800bfc0:	f883 9000 	strb.w	r9, [r3]
 800bfc4:	e774      	b.n	800beb0 <_dtoa_r+0x960>
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	e7ba      	b.n	800bf40 <_dtoa_r+0x9f0>
 800bfca:	2201      	movs	r2, #1
 800bfcc:	e7e1      	b.n	800bf92 <_dtoa_r+0xa42>
 800bfce:	9b05      	ldr	r3, [sp, #20]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	db04      	blt.n	800bfde <_dtoa_r+0xa8e>
 800bfd4:	9907      	ldr	r1, [sp, #28]
 800bfd6:	430b      	orrs	r3, r1
 800bfd8:	9906      	ldr	r1, [sp, #24]
 800bfda:	430b      	orrs	r3, r1
 800bfdc:	d120      	bne.n	800c020 <_dtoa_r+0xad0>
 800bfde:	2a00      	cmp	r2, #0
 800bfe0:	dded      	ble.n	800bfbe <_dtoa_r+0xa6e>
 800bfe2:	4651      	mov	r1, sl
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f000 fb4a 	bl	800c680 <__lshift>
 800bfec:	4631      	mov	r1, r6
 800bfee:	4682      	mov	sl, r0
 800bff0:	f000 fbb2 	bl	800c758 <__mcmp>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	dc03      	bgt.n	800c000 <_dtoa_r+0xab0>
 800bff8:	d1e1      	bne.n	800bfbe <_dtoa_r+0xa6e>
 800bffa:	f019 0f01 	tst.w	r9, #1
 800bffe:	d0de      	beq.n	800bfbe <_dtoa_r+0xa6e>
 800c000:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c004:	d1d8      	bne.n	800bfb8 <_dtoa_r+0xa68>
 800c006:	9a01      	ldr	r2, [sp, #4]
 800c008:	2339      	movs	r3, #57	; 0x39
 800c00a:	7013      	strb	r3, [r2, #0]
 800c00c:	462b      	mov	r3, r5
 800c00e:	461d      	mov	r5, r3
 800c010:	3b01      	subs	r3, #1
 800c012:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c016:	2a39      	cmp	r2, #57	; 0x39
 800c018:	d06c      	beq.n	800c0f4 <_dtoa_r+0xba4>
 800c01a:	3201      	adds	r2, #1
 800c01c:	701a      	strb	r2, [r3, #0]
 800c01e:	e747      	b.n	800beb0 <_dtoa_r+0x960>
 800c020:	2a00      	cmp	r2, #0
 800c022:	dd07      	ble.n	800c034 <_dtoa_r+0xae4>
 800c024:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c028:	d0ed      	beq.n	800c006 <_dtoa_r+0xab6>
 800c02a:	9a01      	ldr	r2, [sp, #4]
 800c02c:	f109 0301 	add.w	r3, r9, #1
 800c030:	7013      	strb	r3, [r2, #0]
 800c032:	e73d      	b.n	800beb0 <_dtoa_r+0x960>
 800c034:	9b04      	ldr	r3, [sp, #16]
 800c036:	9a08      	ldr	r2, [sp, #32]
 800c038:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d043      	beq.n	800c0c8 <_dtoa_r+0xb78>
 800c040:	4651      	mov	r1, sl
 800c042:	2300      	movs	r3, #0
 800c044:	220a      	movs	r2, #10
 800c046:	4620      	mov	r0, r4
 800c048:	f000 f922 	bl	800c290 <__multadd>
 800c04c:	45b8      	cmp	r8, r7
 800c04e:	4682      	mov	sl, r0
 800c050:	f04f 0300 	mov.w	r3, #0
 800c054:	f04f 020a 	mov.w	r2, #10
 800c058:	4641      	mov	r1, r8
 800c05a:	4620      	mov	r0, r4
 800c05c:	d107      	bne.n	800c06e <_dtoa_r+0xb1e>
 800c05e:	f000 f917 	bl	800c290 <__multadd>
 800c062:	4680      	mov	r8, r0
 800c064:	4607      	mov	r7, r0
 800c066:	9b04      	ldr	r3, [sp, #16]
 800c068:	3301      	adds	r3, #1
 800c06a:	9304      	str	r3, [sp, #16]
 800c06c:	e775      	b.n	800bf5a <_dtoa_r+0xa0a>
 800c06e:	f000 f90f 	bl	800c290 <__multadd>
 800c072:	4639      	mov	r1, r7
 800c074:	4680      	mov	r8, r0
 800c076:	2300      	movs	r3, #0
 800c078:	220a      	movs	r2, #10
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 f908 	bl	800c290 <__multadd>
 800c080:	4607      	mov	r7, r0
 800c082:	e7f0      	b.n	800c066 <_dtoa_r+0xb16>
 800c084:	9b04      	ldr	r3, [sp, #16]
 800c086:	9301      	str	r3, [sp, #4]
 800c088:	9d00      	ldr	r5, [sp, #0]
 800c08a:	4631      	mov	r1, r6
 800c08c:	4650      	mov	r0, sl
 800c08e:	f7ff f9d5 	bl	800b43c <quorem>
 800c092:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c096:	9b00      	ldr	r3, [sp, #0]
 800c098:	f805 9b01 	strb.w	r9, [r5], #1
 800c09c:	1aea      	subs	r2, r5, r3
 800c09e:	9b01      	ldr	r3, [sp, #4]
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	dd07      	ble.n	800c0b4 <_dtoa_r+0xb64>
 800c0a4:	4651      	mov	r1, sl
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	220a      	movs	r2, #10
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 f8f0 	bl	800c290 <__multadd>
 800c0b0:	4682      	mov	sl, r0
 800c0b2:	e7ea      	b.n	800c08a <_dtoa_r+0xb3a>
 800c0b4:	9b01      	ldr	r3, [sp, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	bfc8      	it	gt
 800c0ba:	461d      	movgt	r5, r3
 800c0bc:	9b00      	ldr	r3, [sp, #0]
 800c0be:	bfd8      	it	le
 800c0c0:	2501      	movle	r5, #1
 800c0c2:	441d      	add	r5, r3
 800c0c4:	f04f 0800 	mov.w	r8, #0
 800c0c8:	4651      	mov	r1, sl
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 fad7 	bl	800c680 <__lshift>
 800c0d2:	4631      	mov	r1, r6
 800c0d4:	4682      	mov	sl, r0
 800c0d6:	f000 fb3f 	bl	800c758 <__mcmp>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	dc96      	bgt.n	800c00c <_dtoa_r+0xabc>
 800c0de:	d102      	bne.n	800c0e6 <_dtoa_r+0xb96>
 800c0e0:	f019 0f01 	tst.w	r9, #1
 800c0e4:	d192      	bne.n	800c00c <_dtoa_r+0xabc>
 800c0e6:	462b      	mov	r3, r5
 800c0e8:	461d      	mov	r5, r3
 800c0ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0ee:	2a30      	cmp	r2, #48	; 0x30
 800c0f0:	d0fa      	beq.n	800c0e8 <_dtoa_r+0xb98>
 800c0f2:	e6dd      	b.n	800beb0 <_dtoa_r+0x960>
 800c0f4:	9a00      	ldr	r2, [sp, #0]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d189      	bne.n	800c00e <_dtoa_r+0xabe>
 800c0fa:	f10b 0b01 	add.w	fp, fp, #1
 800c0fe:	2331      	movs	r3, #49	; 0x31
 800c100:	e796      	b.n	800c030 <_dtoa_r+0xae0>
 800c102:	4b0a      	ldr	r3, [pc, #40]	; (800c12c <_dtoa_r+0xbdc>)
 800c104:	f7ff ba99 	b.w	800b63a <_dtoa_r+0xea>
 800c108:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f47f aa6d 	bne.w	800b5ea <_dtoa_r+0x9a>
 800c110:	4b07      	ldr	r3, [pc, #28]	; (800c130 <_dtoa_r+0xbe0>)
 800c112:	f7ff ba92 	b.w	800b63a <_dtoa_r+0xea>
 800c116:	9b01      	ldr	r3, [sp, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	dcb5      	bgt.n	800c088 <_dtoa_r+0xb38>
 800c11c:	9b07      	ldr	r3, [sp, #28]
 800c11e:	2b02      	cmp	r3, #2
 800c120:	f73f aeb1 	bgt.w	800be86 <_dtoa_r+0x936>
 800c124:	e7b0      	b.n	800c088 <_dtoa_r+0xb38>
 800c126:	bf00      	nop
 800c128:	08011d25 	.word	0x08011d25
 800c12c:	08011c80 	.word	0x08011c80
 800c130:	08011ca9 	.word	0x08011ca9

0800c134 <_free_r>:
 800c134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c136:	2900      	cmp	r1, #0
 800c138:	d044      	beq.n	800c1c4 <_free_r+0x90>
 800c13a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c13e:	9001      	str	r0, [sp, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	f1a1 0404 	sub.w	r4, r1, #4
 800c146:	bfb8      	it	lt
 800c148:	18e4      	addlt	r4, r4, r3
 800c14a:	f7fe f92b 	bl	800a3a4 <__malloc_lock>
 800c14e:	4a1e      	ldr	r2, [pc, #120]	; (800c1c8 <_free_r+0x94>)
 800c150:	9801      	ldr	r0, [sp, #4]
 800c152:	6813      	ldr	r3, [r2, #0]
 800c154:	b933      	cbnz	r3, 800c164 <_free_r+0x30>
 800c156:	6063      	str	r3, [r4, #4]
 800c158:	6014      	str	r4, [r2, #0]
 800c15a:	b003      	add	sp, #12
 800c15c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c160:	f7fe b926 	b.w	800a3b0 <__malloc_unlock>
 800c164:	42a3      	cmp	r3, r4
 800c166:	d908      	bls.n	800c17a <_free_r+0x46>
 800c168:	6825      	ldr	r5, [r4, #0]
 800c16a:	1961      	adds	r1, r4, r5
 800c16c:	428b      	cmp	r3, r1
 800c16e:	bf01      	itttt	eq
 800c170:	6819      	ldreq	r1, [r3, #0]
 800c172:	685b      	ldreq	r3, [r3, #4]
 800c174:	1949      	addeq	r1, r1, r5
 800c176:	6021      	streq	r1, [r4, #0]
 800c178:	e7ed      	b.n	800c156 <_free_r+0x22>
 800c17a:	461a      	mov	r2, r3
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	b10b      	cbz	r3, 800c184 <_free_r+0x50>
 800c180:	42a3      	cmp	r3, r4
 800c182:	d9fa      	bls.n	800c17a <_free_r+0x46>
 800c184:	6811      	ldr	r1, [r2, #0]
 800c186:	1855      	adds	r5, r2, r1
 800c188:	42a5      	cmp	r5, r4
 800c18a:	d10b      	bne.n	800c1a4 <_free_r+0x70>
 800c18c:	6824      	ldr	r4, [r4, #0]
 800c18e:	4421      	add	r1, r4
 800c190:	1854      	adds	r4, r2, r1
 800c192:	42a3      	cmp	r3, r4
 800c194:	6011      	str	r1, [r2, #0]
 800c196:	d1e0      	bne.n	800c15a <_free_r+0x26>
 800c198:	681c      	ldr	r4, [r3, #0]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	6053      	str	r3, [r2, #4]
 800c19e:	440c      	add	r4, r1
 800c1a0:	6014      	str	r4, [r2, #0]
 800c1a2:	e7da      	b.n	800c15a <_free_r+0x26>
 800c1a4:	d902      	bls.n	800c1ac <_free_r+0x78>
 800c1a6:	230c      	movs	r3, #12
 800c1a8:	6003      	str	r3, [r0, #0]
 800c1aa:	e7d6      	b.n	800c15a <_free_r+0x26>
 800c1ac:	6825      	ldr	r5, [r4, #0]
 800c1ae:	1961      	adds	r1, r4, r5
 800c1b0:	428b      	cmp	r3, r1
 800c1b2:	bf04      	itt	eq
 800c1b4:	6819      	ldreq	r1, [r3, #0]
 800c1b6:	685b      	ldreq	r3, [r3, #4]
 800c1b8:	6063      	str	r3, [r4, #4]
 800c1ba:	bf04      	itt	eq
 800c1bc:	1949      	addeq	r1, r1, r5
 800c1be:	6021      	streq	r1, [r4, #0]
 800c1c0:	6054      	str	r4, [r2, #4]
 800c1c2:	e7ca      	b.n	800c15a <_free_r+0x26>
 800c1c4:	b003      	add	sp, #12
 800c1c6:	bd30      	pop	{r4, r5, pc}
 800c1c8:	200009e4 	.word	0x200009e4

0800c1cc <_Balloc>:
 800c1cc:	b570      	push	{r4, r5, r6, lr}
 800c1ce:	69c6      	ldr	r6, [r0, #28]
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	460d      	mov	r5, r1
 800c1d4:	b976      	cbnz	r6, 800c1f4 <_Balloc+0x28>
 800c1d6:	2010      	movs	r0, #16
 800c1d8:	f7fe f834 	bl	800a244 <malloc>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	61e0      	str	r0, [r4, #28]
 800c1e0:	b920      	cbnz	r0, 800c1ec <_Balloc+0x20>
 800c1e2:	4b18      	ldr	r3, [pc, #96]	; (800c244 <_Balloc+0x78>)
 800c1e4:	4818      	ldr	r0, [pc, #96]	; (800c248 <_Balloc+0x7c>)
 800c1e6:	216b      	movs	r1, #107	; 0x6b
 800c1e8:	f001 fd6e 	bl	800dcc8 <__assert_func>
 800c1ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1f0:	6006      	str	r6, [r0, #0]
 800c1f2:	60c6      	str	r6, [r0, #12]
 800c1f4:	69e6      	ldr	r6, [r4, #28]
 800c1f6:	68f3      	ldr	r3, [r6, #12]
 800c1f8:	b183      	cbz	r3, 800c21c <_Balloc+0x50>
 800c1fa:	69e3      	ldr	r3, [r4, #28]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c202:	b9b8      	cbnz	r0, 800c234 <_Balloc+0x68>
 800c204:	2101      	movs	r1, #1
 800c206:	fa01 f605 	lsl.w	r6, r1, r5
 800c20a:	1d72      	adds	r2, r6, #5
 800c20c:	0092      	lsls	r2, r2, #2
 800c20e:	4620      	mov	r0, r4
 800c210:	f001 fd78 	bl	800dd04 <_calloc_r>
 800c214:	b160      	cbz	r0, 800c230 <_Balloc+0x64>
 800c216:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c21a:	e00e      	b.n	800c23a <_Balloc+0x6e>
 800c21c:	2221      	movs	r2, #33	; 0x21
 800c21e:	2104      	movs	r1, #4
 800c220:	4620      	mov	r0, r4
 800c222:	f001 fd6f 	bl	800dd04 <_calloc_r>
 800c226:	69e3      	ldr	r3, [r4, #28]
 800c228:	60f0      	str	r0, [r6, #12]
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1e4      	bne.n	800c1fa <_Balloc+0x2e>
 800c230:	2000      	movs	r0, #0
 800c232:	bd70      	pop	{r4, r5, r6, pc}
 800c234:	6802      	ldr	r2, [r0, #0]
 800c236:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c23a:	2300      	movs	r3, #0
 800c23c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c240:	e7f7      	b.n	800c232 <_Balloc+0x66>
 800c242:	bf00      	nop
 800c244:	08011cb6 	.word	0x08011cb6
 800c248:	08011d36 	.word	0x08011d36

0800c24c <_Bfree>:
 800c24c:	b570      	push	{r4, r5, r6, lr}
 800c24e:	69c6      	ldr	r6, [r0, #28]
 800c250:	4605      	mov	r5, r0
 800c252:	460c      	mov	r4, r1
 800c254:	b976      	cbnz	r6, 800c274 <_Bfree+0x28>
 800c256:	2010      	movs	r0, #16
 800c258:	f7fd fff4 	bl	800a244 <malloc>
 800c25c:	4602      	mov	r2, r0
 800c25e:	61e8      	str	r0, [r5, #28]
 800c260:	b920      	cbnz	r0, 800c26c <_Bfree+0x20>
 800c262:	4b09      	ldr	r3, [pc, #36]	; (800c288 <_Bfree+0x3c>)
 800c264:	4809      	ldr	r0, [pc, #36]	; (800c28c <_Bfree+0x40>)
 800c266:	218f      	movs	r1, #143	; 0x8f
 800c268:	f001 fd2e 	bl	800dcc8 <__assert_func>
 800c26c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c270:	6006      	str	r6, [r0, #0]
 800c272:	60c6      	str	r6, [r0, #12]
 800c274:	b13c      	cbz	r4, 800c286 <_Bfree+0x3a>
 800c276:	69eb      	ldr	r3, [r5, #28]
 800c278:	6862      	ldr	r2, [r4, #4]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c280:	6021      	str	r1, [r4, #0]
 800c282:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c286:	bd70      	pop	{r4, r5, r6, pc}
 800c288:	08011cb6 	.word	0x08011cb6
 800c28c:	08011d36 	.word	0x08011d36

0800c290 <__multadd>:
 800c290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c294:	690d      	ldr	r5, [r1, #16]
 800c296:	4607      	mov	r7, r0
 800c298:	460c      	mov	r4, r1
 800c29a:	461e      	mov	r6, r3
 800c29c:	f101 0c14 	add.w	ip, r1, #20
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	f8dc 3000 	ldr.w	r3, [ip]
 800c2a6:	b299      	uxth	r1, r3
 800c2a8:	fb02 6101 	mla	r1, r2, r1, r6
 800c2ac:	0c1e      	lsrs	r6, r3, #16
 800c2ae:	0c0b      	lsrs	r3, r1, #16
 800c2b0:	fb02 3306 	mla	r3, r2, r6, r3
 800c2b4:	b289      	uxth	r1, r1
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2bc:	4285      	cmp	r5, r0
 800c2be:	f84c 1b04 	str.w	r1, [ip], #4
 800c2c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2c6:	dcec      	bgt.n	800c2a2 <__multadd+0x12>
 800c2c8:	b30e      	cbz	r6, 800c30e <__multadd+0x7e>
 800c2ca:	68a3      	ldr	r3, [r4, #8]
 800c2cc:	42ab      	cmp	r3, r5
 800c2ce:	dc19      	bgt.n	800c304 <__multadd+0x74>
 800c2d0:	6861      	ldr	r1, [r4, #4]
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	3101      	adds	r1, #1
 800c2d6:	f7ff ff79 	bl	800c1cc <_Balloc>
 800c2da:	4680      	mov	r8, r0
 800c2dc:	b928      	cbnz	r0, 800c2ea <__multadd+0x5a>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	4b0c      	ldr	r3, [pc, #48]	; (800c314 <__multadd+0x84>)
 800c2e2:	480d      	ldr	r0, [pc, #52]	; (800c318 <__multadd+0x88>)
 800c2e4:	21ba      	movs	r1, #186	; 0xba
 800c2e6:	f001 fcef 	bl	800dcc8 <__assert_func>
 800c2ea:	6922      	ldr	r2, [r4, #16]
 800c2ec:	3202      	adds	r2, #2
 800c2ee:	f104 010c 	add.w	r1, r4, #12
 800c2f2:	0092      	lsls	r2, r2, #2
 800c2f4:	300c      	adds	r0, #12
 800c2f6:	f7ff f88c 	bl	800b412 <memcpy>
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f7ff ffa5 	bl	800c24c <_Bfree>
 800c302:	4644      	mov	r4, r8
 800c304:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c308:	3501      	adds	r5, #1
 800c30a:	615e      	str	r6, [r3, #20]
 800c30c:	6125      	str	r5, [r4, #16]
 800c30e:	4620      	mov	r0, r4
 800c310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c314:	08011d25 	.word	0x08011d25
 800c318:	08011d36 	.word	0x08011d36

0800c31c <__s2b>:
 800c31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c320:	460c      	mov	r4, r1
 800c322:	4615      	mov	r5, r2
 800c324:	461f      	mov	r7, r3
 800c326:	2209      	movs	r2, #9
 800c328:	3308      	adds	r3, #8
 800c32a:	4606      	mov	r6, r0
 800c32c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c330:	2100      	movs	r1, #0
 800c332:	2201      	movs	r2, #1
 800c334:	429a      	cmp	r2, r3
 800c336:	db09      	blt.n	800c34c <__s2b+0x30>
 800c338:	4630      	mov	r0, r6
 800c33a:	f7ff ff47 	bl	800c1cc <_Balloc>
 800c33e:	b940      	cbnz	r0, 800c352 <__s2b+0x36>
 800c340:	4602      	mov	r2, r0
 800c342:	4b19      	ldr	r3, [pc, #100]	; (800c3a8 <__s2b+0x8c>)
 800c344:	4819      	ldr	r0, [pc, #100]	; (800c3ac <__s2b+0x90>)
 800c346:	21d3      	movs	r1, #211	; 0xd3
 800c348:	f001 fcbe 	bl	800dcc8 <__assert_func>
 800c34c:	0052      	lsls	r2, r2, #1
 800c34e:	3101      	adds	r1, #1
 800c350:	e7f0      	b.n	800c334 <__s2b+0x18>
 800c352:	9b08      	ldr	r3, [sp, #32]
 800c354:	6143      	str	r3, [r0, #20]
 800c356:	2d09      	cmp	r5, #9
 800c358:	f04f 0301 	mov.w	r3, #1
 800c35c:	6103      	str	r3, [r0, #16]
 800c35e:	dd16      	ble.n	800c38e <__s2b+0x72>
 800c360:	f104 0909 	add.w	r9, r4, #9
 800c364:	46c8      	mov	r8, r9
 800c366:	442c      	add	r4, r5
 800c368:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c36c:	4601      	mov	r1, r0
 800c36e:	3b30      	subs	r3, #48	; 0x30
 800c370:	220a      	movs	r2, #10
 800c372:	4630      	mov	r0, r6
 800c374:	f7ff ff8c 	bl	800c290 <__multadd>
 800c378:	45a0      	cmp	r8, r4
 800c37a:	d1f5      	bne.n	800c368 <__s2b+0x4c>
 800c37c:	f1a5 0408 	sub.w	r4, r5, #8
 800c380:	444c      	add	r4, r9
 800c382:	1b2d      	subs	r5, r5, r4
 800c384:	1963      	adds	r3, r4, r5
 800c386:	42bb      	cmp	r3, r7
 800c388:	db04      	blt.n	800c394 <__s2b+0x78>
 800c38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c38e:	340a      	adds	r4, #10
 800c390:	2509      	movs	r5, #9
 800c392:	e7f6      	b.n	800c382 <__s2b+0x66>
 800c394:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c398:	4601      	mov	r1, r0
 800c39a:	3b30      	subs	r3, #48	; 0x30
 800c39c:	220a      	movs	r2, #10
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f7ff ff76 	bl	800c290 <__multadd>
 800c3a4:	e7ee      	b.n	800c384 <__s2b+0x68>
 800c3a6:	bf00      	nop
 800c3a8:	08011d25 	.word	0x08011d25
 800c3ac:	08011d36 	.word	0x08011d36

0800c3b0 <__hi0bits>:
 800c3b0:	0c03      	lsrs	r3, r0, #16
 800c3b2:	041b      	lsls	r3, r3, #16
 800c3b4:	b9d3      	cbnz	r3, 800c3ec <__hi0bits+0x3c>
 800c3b6:	0400      	lsls	r0, r0, #16
 800c3b8:	2310      	movs	r3, #16
 800c3ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3be:	bf04      	itt	eq
 800c3c0:	0200      	lsleq	r0, r0, #8
 800c3c2:	3308      	addeq	r3, #8
 800c3c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3c8:	bf04      	itt	eq
 800c3ca:	0100      	lsleq	r0, r0, #4
 800c3cc:	3304      	addeq	r3, #4
 800c3ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c3d2:	bf04      	itt	eq
 800c3d4:	0080      	lsleq	r0, r0, #2
 800c3d6:	3302      	addeq	r3, #2
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	db05      	blt.n	800c3e8 <__hi0bits+0x38>
 800c3dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c3e0:	f103 0301 	add.w	r3, r3, #1
 800c3e4:	bf08      	it	eq
 800c3e6:	2320      	moveq	r3, #32
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	4770      	bx	lr
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	e7e4      	b.n	800c3ba <__hi0bits+0xa>

0800c3f0 <__lo0bits>:
 800c3f0:	6803      	ldr	r3, [r0, #0]
 800c3f2:	f013 0207 	ands.w	r2, r3, #7
 800c3f6:	d00c      	beq.n	800c412 <__lo0bits+0x22>
 800c3f8:	07d9      	lsls	r1, r3, #31
 800c3fa:	d422      	bmi.n	800c442 <__lo0bits+0x52>
 800c3fc:	079a      	lsls	r2, r3, #30
 800c3fe:	bf49      	itett	mi
 800c400:	085b      	lsrmi	r3, r3, #1
 800c402:	089b      	lsrpl	r3, r3, #2
 800c404:	6003      	strmi	r3, [r0, #0]
 800c406:	2201      	movmi	r2, #1
 800c408:	bf5c      	itt	pl
 800c40a:	6003      	strpl	r3, [r0, #0]
 800c40c:	2202      	movpl	r2, #2
 800c40e:	4610      	mov	r0, r2
 800c410:	4770      	bx	lr
 800c412:	b299      	uxth	r1, r3
 800c414:	b909      	cbnz	r1, 800c41a <__lo0bits+0x2a>
 800c416:	0c1b      	lsrs	r3, r3, #16
 800c418:	2210      	movs	r2, #16
 800c41a:	b2d9      	uxtb	r1, r3
 800c41c:	b909      	cbnz	r1, 800c422 <__lo0bits+0x32>
 800c41e:	3208      	adds	r2, #8
 800c420:	0a1b      	lsrs	r3, r3, #8
 800c422:	0719      	lsls	r1, r3, #28
 800c424:	bf04      	itt	eq
 800c426:	091b      	lsreq	r3, r3, #4
 800c428:	3204      	addeq	r2, #4
 800c42a:	0799      	lsls	r1, r3, #30
 800c42c:	bf04      	itt	eq
 800c42e:	089b      	lsreq	r3, r3, #2
 800c430:	3202      	addeq	r2, #2
 800c432:	07d9      	lsls	r1, r3, #31
 800c434:	d403      	bmi.n	800c43e <__lo0bits+0x4e>
 800c436:	085b      	lsrs	r3, r3, #1
 800c438:	f102 0201 	add.w	r2, r2, #1
 800c43c:	d003      	beq.n	800c446 <__lo0bits+0x56>
 800c43e:	6003      	str	r3, [r0, #0]
 800c440:	e7e5      	b.n	800c40e <__lo0bits+0x1e>
 800c442:	2200      	movs	r2, #0
 800c444:	e7e3      	b.n	800c40e <__lo0bits+0x1e>
 800c446:	2220      	movs	r2, #32
 800c448:	e7e1      	b.n	800c40e <__lo0bits+0x1e>
	...

0800c44c <__i2b>:
 800c44c:	b510      	push	{r4, lr}
 800c44e:	460c      	mov	r4, r1
 800c450:	2101      	movs	r1, #1
 800c452:	f7ff febb 	bl	800c1cc <_Balloc>
 800c456:	4602      	mov	r2, r0
 800c458:	b928      	cbnz	r0, 800c466 <__i2b+0x1a>
 800c45a:	4b05      	ldr	r3, [pc, #20]	; (800c470 <__i2b+0x24>)
 800c45c:	4805      	ldr	r0, [pc, #20]	; (800c474 <__i2b+0x28>)
 800c45e:	f240 1145 	movw	r1, #325	; 0x145
 800c462:	f001 fc31 	bl	800dcc8 <__assert_func>
 800c466:	2301      	movs	r3, #1
 800c468:	6144      	str	r4, [r0, #20]
 800c46a:	6103      	str	r3, [r0, #16]
 800c46c:	bd10      	pop	{r4, pc}
 800c46e:	bf00      	nop
 800c470:	08011d25 	.word	0x08011d25
 800c474:	08011d36 	.word	0x08011d36

0800c478 <__multiply>:
 800c478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	4691      	mov	r9, r2
 800c47e:	690a      	ldr	r2, [r1, #16]
 800c480:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c484:	429a      	cmp	r2, r3
 800c486:	bfb8      	it	lt
 800c488:	460b      	movlt	r3, r1
 800c48a:	460c      	mov	r4, r1
 800c48c:	bfbc      	itt	lt
 800c48e:	464c      	movlt	r4, r9
 800c490:	4699      	movlt	r9, r3
 800c492:	6927      	ldr	r7, [r4, #16]
 800c494:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c498:	68a3      	ldr	r3, [r4, #8]
 800c49a:	6861      	ldr	r1, [r4, #4]
 800c49c:	eb07 060a 	add.w	r6, r7, sl
 800c4a0:	42b3      	cmp	r3, r6
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	bfb8      	it	lt
 800c4a6:	3101      	addlt	r1, #1
 800c4a8:	f7ff fe90 	bl	800c1cc <_Balloc>
 800c4ac:	b930      	cbnz	r0, 800c4bc <__multiply+0x44>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	4b44      	ldr	r3, [pc, #272]	; (800c5c4 <__multiply+0x14c>)
 800c4b2:	4845      	ldr	r0, [pc, #276]	; (800c5c8 <__multiply+0x150>)
 800c4b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c4b8:	f001 fc06 	bl	800dcc8 <__assert_func>
 800c4bc:	f100 0514 	add.w	r5, r0, #20
 800c4c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4c4:	462b      	mov	r3, r5
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	4543      	cmp	r3, r8
 800c4ca:	d321      	bcc.n	800c510 <__multiply+0x98>
 800c4cc:	f104 0314 	add.w	r3, r4, #20
 800c4d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c4d4:	f109 0314 	add.w	r3, r9, #20
 800c4d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c4dc:	9202      	str	r2, [sp, #8]
 800c4de:	1b3a      	subs	r2, r7, r4
 800c4e0:	3a15      	subs	r2, #21
 800c4e2:	f022 0203 	bic.w	r2, r2, #3
 800c4e6:	3204      	adds	r2, #4
 800c4e8:	f104 0115 	add.w	r1, r4, #21
 800c4ec:	428f      	cmp	r7, r1
 800c4ee:	bf38      	it	cc
 800c4f0:	2204      	movcc	r2, #4
 800c4f2:	9201      	str	r2, [sp, #4]
 800c4f4:	9a02      	ldr	r2, [sp, #8]
 800c4f6:	9303      	str	r3, [sp, #12]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d80c      	bhi.n	800c516 <__multiply+0x9e>
 800c4fc:	2e00      	cmp	r6, #0
 800c4fe:	dd03      	ble.n	800c508 <__multiply+0x90>
 800c500:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c504:	2b00      	cmp	r3, #0
 800c506:	d05b      	beq.n	800c5c0 <__multiply+0x148>
 800c508:	6106      	str	r6, [r0, #16]
 800c50a:	b005      	add	sp, #20
 800c50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c510:	f843 2b04 	str.w	r2, [r3], #4
 800c514:	e7d8      	b.n	800c4c8 <__multiply+0x50>
 800c516:	f8b3 a000 	ldrh.w	sl, [r3]
 800c51a:	f1ba 0f00 	cmp.w	sl, #0
 800c51e:	d024      	beq.n	800c56a <__multiply+0xf2>
 800c520:	f104 0e14 	add.w	lr, r4, #20
 800c524:	46a9      	mov	r9, r5
 800c526:	f04f 0c00 	mov.w	ip, #0
 800c52a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c52e:	f8d9 1000 	ldr.w	r1, [r9]
 800c532:	fa1f fb82 	uxth.w	fp, r2
 800c536:	b289      	uxth	r1, r1
 800c538:	fb0a 110b 	mla	r1, sl, fp, r1
 800c53c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c540:	f8d9 2000 	ldr.w	r2, [r9]
 800c544:	4461      	add	r1, ip
 800c546:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c54a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c54e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c552:	b289      	uxth	r1, r1
 800c554:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c558:	4577      	cmp	r7, lr
 800c55a:	f849 1b04 	str.w	r1, [r9], #4
 800c55e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c562:	d8e2      	bhi.n	800c52a <__multiply+0xb2>
 800c564:	9a01      	ldr	r2, [sp, #4]
 800c566:	f845 c002 	str.w	ip, [r5, r2]
 800c56a:	9a03      	ldr	r2, [sp, #12]
 800c56c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c570:	3304      	adds	r3, #4
 800c572:	f1b9 0f00 	cmp.w	r9, #0
 800c576:	d021      	beq.n	800c5bc <__multiply+0x144>
 800c578:	6829      	ldr	r1, [r5, #0]
 800c57a:	f104 0c14 	add.w	ip, r4, #20
 800c57e:	46ae      	mov	lr, r5
 800c580:	f04f 0a00 	mov.w	sl, #0
 800c584:	f8bc b000 	ldrh.w	fp, [ip]
 800c588:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c58c:	fb09 220b 	mla	r2, r9, fp, r2
 800c590:	4452      	add	r2, sl
 800c592:	b289      	uxth	r1, r1
 800c594:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c598:	f84e 1b04 	str.w	r1, [lr], #4
 800c59c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c5a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5a4:	f8be 1000 	ldrh.w	r1, [lr]
 800c5a8:	fb09 110a 	mla	r1, r9, sl, r1
 800c5ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c5b0:	4567      	cmp	r7, ip
 800c5b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5b6:	d8e5      	bhi.n	800c584 <__multiply+0x10c>
 800c5b8:	9a01      	ldr	r2, [sp, #4]
 800c5ba:	50a9      	str	r1, [r5, r2]
 800c5bc:	3504      	adds	r5, #4
 800c5be:	e799      	b.n	800c4f4 <__multiply+0x7c>
 800c5c0:	3e01      	subs	r6, #1
 800c5c2:	e79b      	b.n	800c4fc <__multiply+0x84>
 800c5c4:	08011d25 	.word	0x08011d25
 800c5c8:	08011d36 	.word	0x08011d36

0800c5cc <__pow5mult>:
 800c5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	4615      	mov	r5, r2
 800c5d2:	f012 0203 	ands.w	r2, r2, #3
 800c5d6:	4606      	mov	r6, r0
 800c5d8:	460f      	mov	r7, r1
 800c5da:	d007      	beq.n	800c5ec <__pow5mult+0x20>
 800c5dc:	4c25      	ldr	r4, [pc, #148]	; (800c674 <__pow5mult+0xa8>)
 800c5de:	3a01      	subs	r2, #1
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5e6:	f7ff fe53 	bl	800c290 <__multadd>
 800c5ea:	4607      	mov	r7, r0
 800c5ec:	10ad      	asrs	r5, r5, #2
 800c5ee:	d03d      	beq.n	800c66c <__pow5mult+0xa0>
 800c5f0:	69f4      	ldr	r4, [r6, #28]
 800c5f2:	b97c      	cbnz	r4, 800c614 <__pow5mult+0x48>
 800c5f4:	2010      	movs	r0, #16
 800c5f6:	f7fd fe25 	bl	800a244 <malloc>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	61f0      	str	r0, [r6, #28]
 800c5fe:	b928      	cbnz	r0, 800c60c <__pow5mult+0x40>
 800c600:	4b1d      	ldr	r3, [pc, #116]	; (800c678 <__pow5mult+0xac>)
 800c602:	481e      	ldr	r0, [pc, #120]	; (800c67c <__pow5mult+0xb0>)
 800c604:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c608:	f001 fb5e 	bl	800dcc8 <__assert_func>
 800c60c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c610:	6004      	str	r4, [r0, #0]
 800c612:	60c4      	str	r4, [r0, #12]
 800c614:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c618:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c61c:	b94c      	cbnz	r4, 800c632 <__pow5mult+0x66>
 800c61e:	f240 2171 	movw	r1, #625	; 0x271
 800c622:	4630      	mov	r0, r6
 800c624:	f7ff ff12 	bl	800c44c <__i2b>
 800c628:	2300      	movs	r3, #0
 800c62a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c62e:	4604      	mov	r4, r0
 800c630:	6003      	str	r3, [r0, #0]
 800c632:	f04f 0900 	mov.w	r9, #0
 800c636:	07eb      	lsls	r3, r5, #31
 800c638:	d50a      	bpl.n	800c650 <__pow5mult+0x84>
 800c63a:	4639      	mov	r1, r7
 800c63c:	4622      	mov	r2, r4
 800c63e:	4630      	mov	r0, r6
 800c640:	f7ff ff1a 	bl	800c478 <__multiply>
 800c644:	4639      	mov	r1, r7
 800c646:	4680      	mov	r8, r0
 800c648:	4630      	mov	r0, r6
 800c64a:	f7ff fdff 	bl	800c24c <_Bfree>
 800c64e:	4647      	mov	r7, r8
 800c650:	106d      	asrs	r5, r5, #1
 800c652:	d00b      	beq.n	800c66c <__pow5mult+0xa0>
 800c654:	6820      	ldr	r0, [r4, #0]
 800c656:	b938      	cbnz	r0, 800c668 <__pow5mult+0x9c>
 800c658:	4622      	mov	r2, r4
 800c65a:	4621      	mov	r1, r4
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7ff ff0b 	bl	800c478 <__multiply>
 800c662:	6020      	str	r0, [r4, #0]
 800c664:	f8c0 9000 	str.w	r9, [r0]
 800c668:	4604      	mov	r4, r0
 800c66a:	e7e4      	b.n	800c636 <__pow5mult+0x6a>
 800c66c:	4638      	mov	r0, r7
 800c66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c672:	bf00      	nop
 800c674:	08011e80 	.word	0x08011e80
 800c678:	08011cb6 	.word	0x08011cb6
 800c67c:	08011d36 	.word	0x08011d36

0800c680 <__lshift>:
 800c680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c684:	460c      	mov	r4, r1
 800c686:	6849      	ldr	r1, [r1, #4]
 800c688:	6923      	ldr	r3, [r4, #16]
 800c68a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c68e:	68a3      	ldr	r3, [r4, #8]
 800c690:	4607      	mov	r7, r0
 800c692:	4691      	mov	r9, r2
 800c694:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c698:	f108 0601 	add.w	r6, r8, #1
 800c69c:	42b3      	cmp	r3, r6
 800c69e:	db0b      	blt.n	800c6b8 <__lshift+0x38>
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	f7ff fd93 	bl	800c1cc <_Balloc>
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	b948      	cbnz	r0, 800c6be <__lshift+0x3e>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	4b28      	ldr	r3, [pc, #160]	; (800c750 <__lshift+0xd0>)
 800c6ae:	4829      	ldr	r0, [pc, #164]	; (800c754 <__lshift+0xd4>)
 800c6b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c6b4:	f001 fb08 	bl	800dcc8 <__assert_func>
 800c6b8:	3101      	adds	r1, #1
 800c6ba:	005b      	lsls	r3, r3, #1
 800c6bc:	e7ee      	b.n	800c69c <__lshift+0x1c>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	f100 0114 	add.w	r1, r0, #20
 800c6c4:	f100 0210 	add.w	r2, r0, #16
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	4553      	cmp	r3, sl
 800c6cc:	db33      	blt.n	800c736 <__lshift+0xb6>
 800c6ce:	6920      	ldr	r0, [r4, #16]
 800c6d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6d4:	f104 0314 	add.w	r3, r4, #20
 800c6d8:	f019 091f 	ands.w	r9, r9, #31
 800c6dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c6e4:	d02b      	beq.n	800c73e <__lshift+0xbe>
 800c6e6:	f1c9 0e20 	rsb	lr, r9, #32
 800c6ea:	468a      	mov	sl, r1
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	6818      	ldr	r0, [r3, #0]
 800c6f0:	fa00 f009 	lsl.w	r0, r0, r9
 800c6f4:	4310      	orrs	r0, r2
 800c6f6:	f84a 0b04 	str.w	r0, [sl], #4
 800c6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6fe:	459c      	cmp	ip, r3
 800c700:	fa22 f20e 	lsr.w	r2, r2, lr
 800c704:	d8f3      	bhi.n	800c6ee <__lshift+0x6e>
 800c706:	ebac 0304 	sub.w	r3, ip, r4
 800c70a:	3b15      	subs	r3, #21
 800c70c:	f023 0303 	bic.w	r3, r3, #3
 800c710:	3304      	adds	r3, #4
 800c712:	f104 0015 	add.w	r0, r4, #21
 800c716:	4584      	cmp	ip, r0
 800c718:	bf38      	it	cc
 800c71a:	2304      	movcc	r3, #4
 800c71c:	50ca      	str	r2, [r1, r3]
 800c71e:	b10a      	cbz	r2, 800c724 <__lshift+0xa4>
 800c720:	f108 0602 	add.w	r6, r8, #2
 800c724:	3e01      	subs	r6, #1
 800c726:	4638      	mov	r0, r7
 800c728:	612e      	str	r6, [r5, #16]
 800c72a:	4621      	mov	r1, r4
 800c72c:	f7ff fd8e 	bl	800c24c <_Bfree>
 800c730:	4628      	mov	r0, r5
 800c732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c736:	f842 0f04 	str.w	r0, [r2, #4]!
 800c73a:	3301      	adds	r3, #1
 800c73c:	e7c5      	b.n	800c6ca <__lshift+0x4a>
 800c73e:	3904      	subs	r1, #4
 800c740:	f853 2b04 	ldr.w	r2, [r3], #4
 800c744:	f841 2f04 	str.w	r2, [r1, #4]!
 800c748:	459c      	cmp	ip, r3
 800c74a:	d8f9      	bhi.n	800c740 <__lshift+0xc0>
 800c74c:	e7ea      	b.n	800c724 <__lshift+0xa4>
 800c74e:	bf00      	nop
 800c750:	08011d25 	.word	0x08011d25
 800c754:	08011d36 	.word	0x08011d36

0800c758 <__mcmp>:
 800c758:	b530      	push	{r4, r5, lr}
 800c75a:	6902      	ldr	r2, [r0, #16]
 800c75c:	690c      	ldr	r4, [r1, #16]
 800c75e:	1b12      	subs	r2, r2, r4
 800c760:	d10e      	bne.n	800c780 <__mcmp+0x28>
 800c762:	f100 0314 	add.w	r3, r0, #20
 800c766:	3114      	adds	r1, #20
 800c768:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c76c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c770:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c774:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c778:	42a5      	cmp	r5, r4
 800c77a:	d003      	beq.n	800c784 <__mcmp+0x2c>
 800c77c:	d305      	bcc.n	800c78a <__mcmp+0x32>
 800c77e:	2201      	movs	r2, #1
 800c780:	4610      	mov	r0, r2
 800c782:	bd30      	pop	{r4, r5, pc}
 800c784:	4283      	cmp	r3, r0
 800c786:	d3f3      	bcc.n	800c770 <__mcmp+0x18>
 800c788:	e7fa      	b.n	800c780 <__mcmp+0x28>
 800c78a:	f04f 32ff 	mov.w	r2, #4294967295
 800c78e:	e7f7      	b.n	800c780 <__mcmp+0x28>

0800c790 <__mdiff>:
 800c790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c794:	460c      	mov	r4, r1
 800c796:	4606      	mov	r6, r0
 800c798:	4611      	mov	r1, r2
 800c79a:	4620      	mov	r0, r4
 800c79c:	4690      	mov	r8, r2
 800c79e:	f7ff ffdb 	bl	800c758 <__mcmp>
 800c7a2:	1e05      	subs	r5, r0, #0
 800c7a4:	d110      	bne.n	800c7c8 <__mdiff+0x38>
 800c7a6:	4629      	mov	r1, r5
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f7ff fd0f 	bl	800c1cc <_Balloc>
 800c7ae:	b930      	cbnz	r0, 800c7be <__mdiff+0x2e>
 800c7b0:	4b3a      	ldr	r3, [pc, #232]	; (800c89c <__mdiff+0x10c>)
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	f240 2137 	movw	r1, #567	; 0x237
 800c7b8:	4839      	ldr	r0, [pc, #228]	; (800c8a0 <__mdiff+0x110>)
 800c7ba:	f001 fa85 	bl	800dcc8 <__assert_func>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c8:	bfa4      	itt	ge
 800c7ca:	4643      	movge	r3, r8
 800c7cc:	46a0      	movge	r8, r4
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c7d4:	bfa6      	itte	ge
 800c7d6:	461c      	movge	r4, r3
 800c7d8:	2500      	movge	r5, #0
 800c7da:	2501      	movlt	r5, #1
 800c7dc:	f7ff fcf6 	bl	800c1cc <_Balloc>
 800c7e0:	b920      	cbnz	r0, 800c7ec <__mdiff+0x5c>
 800c7e2:	4b2e      	ldr	r3, [pc, #184]	; (800c89c <__mdiff+0x10c>)
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	f240 2145 	movw	r1, #581	; 0x245
 800c7ea:	e7e5      	b.n	800c7b8 <__mdiff+0x28>
 800c7ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c7f0:	6926      	ldr	r6, [r4, #16]
 800c7f2:	60c5      	str	r5, [r0, #12]
 800c7f4:	f104 0914 	add.w	r9, r4, #20
 800c7f8:	f108 0514 	add.w	r5, r8, #20
 800c7fc:	f100 0e14 	add.w	lr, r0, #20
 800c800:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c804:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c808:	f108 0210 	add.w	r2, r8, #16
 800c80c:	46f2      	mov	sl, lr
 800c80e:	2100      	movs	r1, #0
 800c810:	f859 3b04 	ldr.w	r3, [r9], #4
 800c814:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c818:	fa11 f88b 	uxtah	r8, r1, fp
 800c81c:	b299      	uxth	r1, r3
 800c81e:	0c1b      	lsrs	r3, r3, #16
 800c820:	eba8 0801 	sub.w	r8, r8, r1
 800c824:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c828:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c82c:	fa1f f888 	uxth.w	r8, r8
 800c830:	1419      	asrs	r1, r3, #16
 800c832:	454e      	cmp	r6, r9
 800c834:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c838:	f84a 3b04 	str.w	r3, [sl], #4
 800c83c:	d8e8      	bhi.n	800c810 <__mdiff+0x80>
 800c83e:	1b33      	subs	r3, r6, r4
 800c840:	3b15      	subs	r3, #21
 800c842:	f023 0303 	bic.w	r3, r3, #3
 800c846:	3304      	adds	r3, #4
 800c848:	3415      	adds	r4, #21
 800c84a:	42a6      	cmp	r6, r4
 800c84c:	bf38      	it	cc
 800c84e:	2304      	movcc	r3, #4
 800c850:	441d      	add	r5, r3
 800c852:	4473      	add	r3, lr
 800c854:	469e      	mov	lr, r3
 800c856:	462e      	mov	r6, r5
 800c858:	4566      	cmp	r6, ip
 800c85a:	d30e      	bcc.n	800c87a <__mdiff+0xea>
 800c85c:	f10c 0203 	add.w	r2, ip, #3
 800c860:	1b52      	subs	r2, r2, r5
 800c862:	f022 0203 	bic.w	r2, r2, #3
 800c866:	3d03      	subs	r5, #3
 800c868:	45ac      	cmp	ip, r5
 800c86a:	bf38      	it	cc
 800c86c:	2200      	movcc	r2, #0
 800c86e:	4413      	add	r3, r2
 800c870:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c874:	b17a      	cbz	r2, 800c896 <__mdiff+0x106>
 800c876:	6107      	str	r7, [r0, #16]
 800c878:	e7a4      	b.n	800c7c4 <__mdiff+0x34>
 800c87a:	f856 8b04 	ldr.w	r8, [r6], #4
 800c87e:	fa11 f288 	uxtah	r2, r1, r8
 800c882:	1414      	asrs	r4, r2, #16
 800c884:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c888:	b292      	uxth	r2, r2
 800c88a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c88e:	f84e 2b04 	str.w	r2, [lr], #4
 800c892:	1421      	asrs	r1, r4, #16
 800c894:	e7e0      	b.n	800c858 <__mdiff+0xc8>
 800c896:	3f01      	subs	r7, #1
 800c898:	e7ea      	b.n	800c870 <__mdiff+0xe0>
 800c89a:	bf00      	nop
 800c89c:	08011d25 	.word	0x08011d25
 800c8a0:	08011d36 	.word	0x08011d36

0800c8a4 <__ulp>:
 800c8a4:	b082      	sub	sp, #8
 800c8a6:	ed8d 0b00 	vstr	d0, [sp]
 800c8aa:	9a01      	ldr	r2, [sp, #4]
 800c8ac:	4b0f      	ldr	r3, [pc, #60]	; (800c8ec <__ulp+0x48>)
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	dc08      	bgt.n	800c8ca <__ulp+0x26>
 800c8b8:	425b      	negs	r3, r3
 800c8ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c8be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c8c2:	da04      	bge.n	800c8ce <__ulp+0x2a>
 800c8c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c8c8:	4113      	asrs	r3, r2
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	e008      	b.n	800c8e0 <__ulp+0x3c>
 800c8ce:	f1a2 0314 	sub.w	r3, r2, #20
 800c8d2:	2b1e      	cmp	r3, #30
 800c8d4:	bfda      	itte	le
 800c8d6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c8da:	40da      	lsrle	r2, r3
 800c8dc:	2201      	movgt	r2, #1
 800c8de:	2300      	movs	r3, #0
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	ec41 0b10 	vmov	d0, r0, r1
 800c8e8:	b002      	add	sp, #8
 800c8ea:	4770      	bx	lr
 800c8ec:	7ff00000 	.word	0x7ff00000

0800c8f0 <__b2d>:
 800c8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f4:	6906      	ldr	r6, [r0, #16]
 800c8f6:	f100 0814 	add.w	r8, r0, #20
 800c8fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c8fe:	1f37      	subs	r7, r6, #4
 800c900:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c904:	4610      	mov	r0, r2
 800c906:	f7ff fd53 	bl	800c3b0 <__hi0bits>
 800c90a:	f1c0 0320 	rsb	r3, r0, #32
 800c90e:	280a      	cmp	r0, #10
 800c910:	600b      	str	r3, [r1, #0]
 800c912:	491b      	ldr	r1, [pc, #108]	; (800c980 <__b2d+0x90>)
 800c914:	dc15      	bgt.n	800c942 <__b2d+0x52>
 800c916:	f1c0 0c0b 	rsb	ip, r0, #11
 800c91a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c91e:	45b8      	cmp	r8, r7
 800c920:	ea43 0501 	orr.w	r5, r3, r1
 800c924:	bf34      	ite	cc
 800c926:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c92a:	2300      	movcs	r3, #0
 800c92c:	3015      	adds	r0, #21
 800c92e:	fa02 f000 	lsl.w	r0, r2, r0
 800c932:	fa23 f30c 	lsr.w	r3, r3, ip
 800c936:	4303      	orrs	r3, r0
 800c938:	461c      	mov	r4, r3
 800c93a:	ec45 4b10 	vmov	d0, r4, r5
 800c93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c942:	45b8      	cmp	r8, r7
 800c944:	bf3a      	itte	cc
 800c946:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c94a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c94e:	2300      	movcs	r3, #0
 800c950:	380b      	subs	r0, #11
 800c952:	d012      	beq.n	800c97a <__b2d+0x8a>
 800c954:	f1c0 0120 	rsb	r1, r0, #32
 800c958:	fa23 f401 	lsr.w	r4, r3, r1
 800c95c:	4082      	lsls	r2, r0
 800c95e:	4322      	orrs	r2, r4
 800c960:	4547      	cmp	r7, r8
 800c962:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c966:	bf8c      	ite	hi
 800c968:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c96c:	2200      	movls	r2, #0
 800c96e:	4083      	lsls	r3, r0
 800c970:	40ca      	lsrs	r2, r1
 800c972:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c976:	4313      	orrs	r3, r2
 800c978:	e7de      	b.n	800c938 <__b2d+0x48>
 800c97a:	ea42 0501 	orr.w	r5, r2, r1
 800c97e:	e7db      	b.n	800c938 <__b2d+0x48>
 800c980:	3ff00000 	.word	0x3ff00000

0800c984 <__d2b>:
 800c984:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c988:	460f      	mov	r7, r1
 800c98a:	2101      	movs	r1, #1
 800c98c:	ec59 8b10 	vmov	r8, r9, d0
 800c990:	4616      	mov	r6, r2
 800c992:	f7ff fc1b 	bl	800c1cc <_Balloc>
 800c996:	4604      	mov	r4, r0
 800c998:	b930      	cbnz	r0, 800c9a8 <__d2b+0x24>
 800c99a:	4602      	mov	r2, r0
 800c99c:	4b24      	ldr	r3, [pc, #144]	; (800ca30 <__d2b+0xac>)
 800c99e:	4825      	ldr	r0, [pc, #148]	; (800ca34 <__d2b+0xb0>)
 800c9a0:	f240 310f 	movw	r1, #783	; 0x30f
 800c9a4:	f001 f990 	bl	800dcc8 <__assert_func>
 800c9a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9b0:	bb2d      	cbnz	r5, 800c9fe <__d2b+0x7a>
 800c9b2:	9301      	str	r3, [sp, #4]
 800c9b4:	f1b8 0300 	subs.w	r3, r8, #0
 800c9b8:	d026      	beq.n	800ca08 <__d2b+0x84>
 800c9ba:	4668      	mov	r0, sp
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	f7ff fd17 	bl	800c3f0 <__lo0bits>
 800c9c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c9c6:	b1e8      	cbz	r0, 800ca04 <__d2b+0x80>
 800c9c8:	f1c0 0320 	rsb	r3, r0, #32
 800c9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d0:	430b      	orrs	r3, r1
 800c9d2:	40c2      	lsrs	r2, r0
 800c9d4:	6163      	str	r3, [r4, #20]
 800c9d6:	9201      	str	r2, [sp, #4]
 800c9d8:	9b01      	ldr	r3, [sp, #4]
 800c9da:	61a3      	str	r3, [r4, #24]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	bf14      	ite	ne
 800c9e0:	2202      	movne	r2, #2
 800c9e2:	2201      	moveq	r2, #1
 800c9e4:	6122      	str	r2, [r4, #16]
 800c9e6:	b1bd      	cbz	r5, 800ca18 <__d2b+0x94>
 800c9e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c9ec:	4405      	add	r5, r0
 800c9ee:	603d      	str	r5, [r7, #0]
 800c9f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c9f4:	6030      	str	r0, [r6, #0]
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	b003      	add	sp, #12
 800c9fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca02:	e7d6      	b.n	800c9b2 <__d2b+0x2e>
 800ca04:	6161      	str	r1, [r4, #20]
 800ca06:	e7e7      	b.n	800c9d8 <__d2b+0x54>
 800ca08:	a801      	add	r0, sp, #4
 800ca0a:	f7ff fcf1 	bl	800c3f0 <__lo0bits>
 800ca0e:	9b01      	ldr	r3, [sp, #4]
 800ca10:	6163      	str	r3, [r4, #20]
 800ca12:	3020      	adds	r0, #32
 800ca14:	2201      	movs	r2, #1
 800ca16:	e7e5      	b.n	800c9e4 <__d2b+0x60>
 800ca18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca20:	6038      	str	r0, [r7, #0]
 800ca22:	6918      	ldr	r0, [r3, #16]
 800ca24:	f7ff fcc4 	bl	800c3b0 <__hi0bits>
 800ca28:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca2c:	e7e2      	b.n	800c9f4 <__d2b+0x70>
 800ca2e:	bf00      	nop
 800ca30:	08011d25 	.word	0x08011d25
 800ca34:	08011d36 	.word	0x08011d36

0800ca38 <__ratio>:
 800ca38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	4688      	mov	r8, r1
 800ca3e:	4669      	mov	r1, sp
 800ca40:	4681      	mov	r9, r0
 800ca42:	f7ff ff55 	bl	800c8f0 <__b2d>
 800ca46:	a901      	add	r1, sp, #4
 800ca48:	4640      	mov	r0, r8
 800ca4a:	ec55 4b10 	vmov	r4, r5, d0
 800ca4e:	f7ff ff4f 	bl	800c8f0 <__b2d>
 800ca52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ca5a:	eba3 0c02 	sub.w	ip, r3, r2
 800ca5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ca62:	1a9b      	subs	r3, r3, r2
 800ca64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ca68:	ec51 0b10 	vmov	r0, r1, d0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	bfd6      	itet	le
 800ca70:	460a      	movle	r2, r1
 800ca72:	462a      	movgt	r2, r5
 800ca74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ca78:	468b      	mov	fp, r1
 800ca7a:	462f      	mov	r7, r5
 800ca7c:	bfd4      	ite	le
 800ca7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ca82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ca86:	4620      	mov	r0, r4
 800ca88:	ee10 2a10 	vmov	r2, s0
 800ca8c:	465b      	mov	r3, fp
 800ca8e:	4639      	mov	r1, r7
 800ca90:	f7f3 fedc 	bl	800084c <__aeabi_ddiv>
 800ca94:	ec41 0b10 	vmov	d0, r0, r1
 800ca98:	b003      	add	sp, #12
 800ca9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca9e <__copybits>:
 800ca9e:	3901      	subs	r1, #1
 800caa0:	b570      	push	{r4, r5, r6, lr}
 800caa2:	1149      	asrs	r1, r1, #5
 800caa4:	6914      	ldr	r4, [r2, #16]
 800caa6:	3101      	adds	r1, #1
 800caa8:	f102 0314 	add.w	r3, r2, #20
 800caac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cab0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cab4:	1f05      	subs	r5, r0, #4
 800cab6:	42a3      	cmp	r3, r4
 800cab8:	d30c      	bcc.n	800cad4 <__copybits+0x36>
 800caba:	1aa3      	subs	r3, r4, r2
 800cabc:	3b11      	subs	r3, #17
 800cabe:	f023 0303 	bic.w	r3, r3, #3
 800cac2:	3211      	adds	r2, #17
 800cac4:	42a2      	cmp	r2, r4
 800cac6:	bf88      	it	hi
 800cac8:	2300      	movhi	r3, #0
 800caca:	4418      	add	r0, r3
 800cacc:	2300      	movs	r3, #0
 800cace:	4288      	cmp	r0, r1
 800cad0:	d305      	bcc.n	800cade <__copybits+0x40>
 800cad2:	bd70      	pop	{r4, r5, r6, pc}
 800cad4:	f853 6b04 	ldr.w	r6, [r3], #4
 800cad8:	f845 6f04 	str.w	r6, [r5, #4]!
 800cadc:	e7eb      	b.n	800cab6 <__copybits+0x18>
 800cade:	f840 3b04 	str.w	r3, [r0], #4
 800cae2:	e7f4      	b.n	800cace <__copybits+0x30>

0800cae4 <__any_on>:
 800cae4:	f100 0214 	add.w	r2, r0, #20
 800cae8:	6900      	ldr	r0, [r0, #16]
 800caea:	114b      	asrs	r3, r1, #5
 800caec:	4298      	cmp	r0, r3
 800caee:	b510      	push	{r4, lr}
 800caf0:	db11      	blt.n	800cb16 <__any_on+0x32>
 800caf2:	dd0a      	ble.n	800cb0a <__any_on+0x26>
 800caf4:	f011 011f 	ands.w	r1, r1, #31
 800caf8:	d007      	beq.n	800cb0a <__any_on+0x26>
 800cafa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cafe:	fa24 f001 	lsr.w	r0, r4, r1
 800cb02:	fa00 f101 	lsl.w	r1, r0, r1
 800cb06:	428c      	cmp	r4, r1
 800cb08:	d10b      	bne.n	800cb22 <__any_on+0x3e>
 800cb0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d803      	bhi.n	800cb1a <__any_on+0x36>
 800cb12:	2000      	movs	r0, #0
 800cb14:	bd10      	pop	{r4, pc}
 800cb16:	4603      	mov	r3, r0
 800cb18:	e7f7      	b.n	800cb0a <__any_on+0x26>
 800cb1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb1e:	2900      	cmp	r1, #0
 800cb20:	d0f5      	beq.n	800cb0e <__any_on+0x2a>
 800cb22:	2001      	movs	r0, #1
 800cb24:	e7f6      	b.n	800cb14 <__any_on+0x30>

0800cb26 <sulp>:
 800cb26:	b570      	push	{r4, r5, r6, lr}
 800cb28:	4604      	mov	r4, r0
 800cb2a:	460d      	mov	r5, r1
 800cb2c:	ec45 4b10 	vmov	d0, r4, r5
 800cb30:	4616      	mov	r6, r2
 800cb32:	f7ff feb7 	bl	800c8a4 <__ulp>
 800cb36:	ec51 0b10 	vmov	r0, r1, d0
 800cb3a:	b17e      	cbz	r6, 800cb5c <sulp+0x36>
 800cb3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cb40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	dd09      	ble.n	800cb5c <sulp+0x36>
 800cb48:	051b      	lsls	r3, r3, #20
 800cb4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cb4e:	2400      	movs	r4, #0
 800cb50:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cb54:	4622      	mov	r2, r4
 800cb56:	462b      	mov	r3, r5
 800cb58:	f7f3 fd4e 	bl	80005f8 <__aeabi_dmul>
 800cb5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb60 <_strtod_l>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	ed2d 8b02 	vpush	{d8}
 800cb68:	b09b      	sub	sp, #108	; 0x6c
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	9213      	str	r2, [sp, #76]	; 0x4c
 800cb6e:	2200      	movs	r2, #0
 800cb70:	9216      	str	r2, [sp, #88]	; 0x58
 800cb72:	460d      	mov	r5, r1
 800cb74:	f04f 0800 	mov.w	r8, #0
 800cb78:	f04f 0900 	mov.w	r9, #0
 800cb7c:	460a      	mov	r2, r1
 800cb7e:	9215      	str	r2, [sp, #84]	; 0x54
 800cb80:	7811      	ldrb	r1, [r2, #0]
 800cb82:	292b      	cmp	r1, #43	; 0x2b
 800cb84:	d04c      	beq.n	800cc20 <_strtod_l+0xc0>
 800cb86:	d83a      	bhi.n	800cbfe <_strtod_l+0x9e>
 800cb88:	290d      	cmp	r1, #13
 800cb8a:	d834      	bhi.n	800cbf6 <_strtod_l+0x96>
 800cb8c:	2908      	cmp	r1, #8
 800cb8e:	d834      	bhi.n	800cbfa <_strtod_l+0x9a>
 800cb90:	2900      	cmp	r1, #0
 800cb92:	d03d      	beq.n	800cc10 <_strtod_l+0xb0>
 800cb94:	2200      	movs	r2, #0
 800cb96:	920a      	str	r2, [sp, #40]	; 0x28
 800cb98:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800cb9a:	7832      	ldrb	r2, [r6, #0]
 800cb9c:	2a30      	cmp	r2, #48	; 0x30
 800cb9e:	f040 80b4 	bne.w	800cd0a <_strtod_l+0x1aa>
 800cba2:	7872      	ldrb	r2, [r6, #1]
 800cba4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800cba8:	2a58      	cmp	r2, #88	; 0x58
 800cbaa:	d170      	bne.n	800cc8e <_strtod_l+0x12e>
 800cbac:	9302      	str	r3, [sp, #8]
 800cbae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	ab16      	add	r3, sp, #88	; 0x58
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	4a8e      	ldr	r2, [pc, #568]	; (800cdf0 <_strtod_l+0x290>)
 800cbb8:	ab17      	add	r3, sp, #92	; 0x5c
 800cbba:	a915      	add	r1, sp, #84	; 0x54
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f001 f91f 	bl	800de00 <__gethex>
 800cbc2:	f010 070f 	ands.w	r7, r0, #15
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	d005      	beq.n	800cbd6 <_strtod_l+0x76>
 800cbca:	2f06      	cmp	r7, #6
 800cbcc:	d12a      	bne.n	800cc24 <_strtod_l+0xc4>
 800cbce:	3601      	adds	r6, #1
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	9615      	str	r6, [sp, #84]	; 0x54
 800cbd4:	930a      	str	r3, [sp, #40]	; 0x28
 800cbd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f040 857f 	bne.w	800d6dc <_strtod_l+0xb7c>
 800cbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbe0:	b1db      	cbz	r3, 800cc1a <_strtod_l+0xba>
 800cbe2:	4642      	mov	r2, r8
 800cbe4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cbe8:	ec43 2b10 	vmov	d0, r2, r3
 800cbec:	b01b      	add	sp, #108	; 0x6c
 800cbee:	ecbd 8b02 	vpop	{d8}
 800cbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf6:	2920      	cmp	r1, #32
 800cbf8:	d1cc      	bne.n	800cb94 <_strtod_l+0x34>
 800cbfa:	3201      	adds	r2, #1
 800cbfc:	e7bf      	b.n	800cb7e <_strtod_l+0x1e>
 800cbfe:	292d      	cmp	r1, #45	; 0x2d
 800cc00:	d1c8      	bne.n	800cb94 <_strtod_l+0x34>
 800cc02:	2101      	movs	r1, #1
 800cc04:	910a      	str	r1, [sp, #40]	; 0x28
 800cc06:	1c51      	adds	r1, r2, #1
 800cc08:	9115      	str	r1, [sp, #84]	; 0x54
 800cc0a:	7852      	ldrb	r2, [r2, #1]
 800cc0c:	2a00      	cmp	r2, #0
 800cc0e:	d1c3      	bne.n	800cb98 <_strtod_l+0x38>
 800cc10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc12:	9515      	str	r5, [sp, #84]	; 0x54
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f040 855f 	bne.w	800d6d8 <_strtod_l+0xb78>
 800cc1a:	4642      	mov	r2, r8
 800cc1c:	464b      	mov	r3, r9
 800cc1e:	e7e3      	b.n	800cbe8 <_strtod_l+0x88>
 800cc20:	2100      	movs	r1, #0
 800cc22:	e7ef      	b.n	800cc04 <_strtod_l+0xa4>
 800cc24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cc26:	b13a      	cbz	r2, 800cc38 <_strtod_l+0xd8>
 800cc28:	2135      	movs	r1, #53	; 0x35
 800cc2a:	a818      	add	r0, sp, #96	; 0x60
 800cc2c:	f7ff ff37 	bl	800ca9e <__copybits>
 800cc30:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cc32:	4620      	mov	r0, r4
 800cc34:	f7ff fb0a 	bl	800c24c <_Bfree>
 800cc38:	3f01      	subs	r7, #1
 800cc3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cc3c:	2f04      	cmp	r7, #4
 800cc3e:	d806      	bhi.n	800cc4e <_strtod_l+0xee>
 800cc40:	e8df f007 	tbb	[pc, r7]
 800cc44:	201d0314 	.word	0x201d0314
 800cc48:	14          	.byte	0x14
 800cc49:	00          	.byte	0x00
 800cc4a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800cc4e:	05e9      	lsls	r1, r5, #23
 800cc50:	bf48      	it	mi
 800cc52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800cc56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc5a:	0d1b      	lsrs	r3, r3, #20
 800cc5c:	051b      	lsls	r3, r3, #20
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1b9      	bne.n	800cbd6 <_strtod_l+0x76>
 800cc62:	f7fe fba9 	bl	800b3b8 <__errno>
 800cc66:	2322      	movs	r3, #34	; 0x22
 800cc68:	6003      	str	r3, [r0, #0]
 800cc6a:	e7b4      	b.n	800cbd6 <_strtod_l+0x76>
 800cc6c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800cc70:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cc74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cc78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800cc7c:	e7e7      	b.n	800cc4e <_strtod_l+0xee>
 800cc7e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800cdf8 <_strtod_l+0x298>
 800cc82:	e7e4      	b.n	800cc4e <_strtod_l+0xee>
 800cc84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800cc88:	f04f 38ff 	mov.w	r8, #4294967295
 800cc8c:	e7df      	b.n	800cc4e <_strtod_l+0xee>
 800cc8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc90:	1c5a      	adds	r2, r3, #1
 800cc92:	9215      	str	r2, [sp, #84]	; 0x54
 800cc94:	785b      	ldrb	r3, [r3, #1]
 800cc96:	2b30      	cmp	r3, #48	; 0x30
 800cc98:	d0f9      	beq.n	800cc8e <_strtod_l+0x12e>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d09b      	beq.n	800cbd6 <_strtod_l+0x76>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	f04f 0a00 	mov.w	sl, #0
 800cca4:	9304      	str	r3, [sp, #16]
 800cca6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cca8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccaa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ccae:	46d3      	mov	fp, sl
 800ccb0:	220a      	movs	r2, #10
 800ccb2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ccb4:	7806      	ldrb	r6, [r0, #0]
 800ccb6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ccba:	b2d9      	uxtb	r1, r3
 800ccbc:	2909      	cmp	r1, #9
 800ccbe:	d926      	bls.n	800cd0e <_strtod_l+0x1ae>
 800ccc0:	494c      	ldr	r1, [pc, #304]	; (800cdf4 <_strtod_l+0x294>)
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	f000 ffe6 	bl	800dc94 <strncmp>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d030      	beq.n	800cd2e <_strtod_l+0x1ce>
 800cccc:	2000      	movs	r0, #0
 800ccce:	4632      	mov	r2, r6
 800ccd0:	9005      	str	r0, [sp, #20]
 800ccd2:	465e      	mov	r6, fp
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2a65      	cmp	r2, #101	; 0x65
 800ccd8:	d001      	beq.n	800ccde <_strtod_l+0x17e>
 800ccda:	2a45      	cmp	r2, #69	; 0x45
 800ccdc:	d113      	bne.n	800cd06 <_strtod_l+0x1a6>
 800ccde:	b91e      	cbnz	r6, 800cce8 <_strtod_l+0x188>
 800cce0:	9a04      	ldr	r2, [sp, #16]
 800cce2:	4302      	orrs	r2, r0
 800cce4:	d094      	beq.n	800cc10 <_strtod_l+0xb0>
 800cce6:	2600      	movs	r6, #0
 800cce8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ccea:	1c6a      	adds	r2, r5, #1
 800ccec:	9215      	str	r2, [sp, #84]	; 0x54
 800ccee:	786a      	ldrb	r2, [r5, #1]
 800ccf0:	2a2b      	cmp	r2, #43	; 0x2b
 800ccf2:	d074      	beq.n	800cdde <_strtod_l+0x27e>
 800ccf4:	2a2d      	cmp	r2, #45	; 0x2d
 800ccf6:	d078      	beq.n	800cdea <_strtod_l+0x28a>
 800ccf8:	f04f 0c00 	mov.w	ip, #0
 800ccfc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cd00:	2909      	cmp	r1, #9
 800cd02:	d97f      	bls.n	800ce04 <_strtod_l+0x2a4>
 800cd04:	9515      	str	r5, [sp, #84]	; 0x54
 800cd06:	2700      	movs	r7, #0
 800cd08:	e09e      	b.n	800ce48 <_strtod_l+0x2e8>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	e7c8      	b.n	800cca0 <_strtod_l+0x140>
 800cd0e:	f1bb 0f08 	cmp.w	fp, #8
 800cd12:	bfd8      	it	le
 800cd14:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cd16:	f100 0001 	add.w	r0, r0, #1
 800cd1a:	bfda      	itte	le
 800cd1c:	fb02 3301 	mlale	r3, r2, r1, r3
 800cd20:	9309      	strle	r3, [sp, #36]	; 0x24
 800cd22:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800cd26:	f10b 0b01 	add.w	fp, fp, #1
 800cd2a:	9015      	str	r0, [sp, #84]	; 0x54
 800cd2c:	e7c1      	b.n	800ccb2 <_strtod_l+0x152>
 800cd2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd30:	1c5a      	adds	r2, r3, #1
 800cd32:	9215      	str	r2, [sp, #84]	; 0x54
 800cd34:	785a      	ldrb	r2, [r3, #1]
 800cd36:	f1bb 0f00 	cmp.w	fp, #0
 800cd3a:	d037      	beq.n	800cdac <_strtod_l+0x24c>
 800cd3c:	9005      	str	r0, [sp, #20]
 800cd3e:	465e      	mov	r6, fp
 800cd40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cd44:	2b09      	cmp	r3, #9
 800cd46:	d912      	bls.n	800cd6e <_strtod_l+0x20e>
 800cd48:	2301      	movs	r3, #1
 800cd4a:	e7c4      	b.n	800ccd6 <_strtod_l+0x176>
 800cd4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd4e:	1c5a      	adds	r2, r3, #1
 800cd50:	9215      	str	r2, [sp, #84]	; 0x54
 800cd52:	785a      	ldrb	r2, [r3, #1]
 800cd54:	3001      	adds	r0, #1
 800cd56:	2a30      	cmp	r2, #48	; 0x30
 800cd58:	d0f8      	beq.n	800cd4c <_strtod_l+0x1ec>
 800cd5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cd5e:	2b08      	cmp	r3, #8
 800cd60:	f200 84c1 	bhi.w	800d6e6 <_strtod_l+0xb86>
 800cd64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd66:	9005      	str	r0, [sp, #20]
 800cd68:	2000      	movs	r0, #0
 800cd6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd6c:	4606      	mov	r6, r0
 800cd6e:	3a30      	subs	r2, #48	; 0x30
 800cd70:	f100 0301 	add.w	r3, r0, #1
 800cd74:	d014      	beq.n	800cda0 <_strtod_l+0x240>
 800cd76:	9905      	ldr	r1, [sp, #20]
 800cd78:	4419      	add	r1, r3
 800cd7a:	9105      	str	r1, [sp, #20]
 800cd7c:	4633      	mov	r3, r6
 800cd7e:	eb00 0c06 	add.w	ip, r0, r6
 800cd82:	210a      	movs	r1, #10
 800cd84:	4563      	cmp	r3, ip
 800cd86:	d113      	bne.n	800cdb0 <_strtod_l+0x250>
 800cd88:	1833      	adds	r3, r6, r0
 800cd8a:	2b08      	cmp	r3, #8
 800cd8c:	f106 0601 	add.w	r6, r6, #1
 800cd90:	4406      	add	r6, r0
 800cd92:	dc1a      	bgt.n	800cdca <_strtod_l+0x26a>
 800cd94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd96:	230a      	movs	r3, #10
 800cd98:	fb03 2301 	mla	r3, r3, r1, r2
 800cd9c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd9e:	2300      	movs	r3, #0
 800cda0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cda2:	1c51      	adds	r1, r2, #1
 800cda4:	9115      	str	r1, [sp, #84]	; 0x54
 800cda6:	7852      	ldrb	r2, [r2, #1]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	e7c9      	b.n	800cd40 <_strtod_l+0x1e0>
 800cdac:	4658      	mov	r0, fp
 800cdae:	e7d2      	b.n	800cd56 <_strtod_l+0x1f6>
 800cdb0:	2b08      	cmp	r3, #8
 800cdb2:	f103 0301 	add.w	r3, r3, #1
 800cdb6:	dc03      	bgt.n	800cdc0 <_strtod_l+0x260>
 800cdb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cdba:	434f      	muls	r7, r1
 800cdbc:	9709      	str	r7, [sp, #36]	; 0x24
 800cdbe:	e7e1      	b.n	800cd84 <_strtod_l+0x224>
 800cdc0:	2b10      	cmp	r3, #16
 800cdc2:	bfd8      	it	le
 800cdc4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800cdc8:	e7dc      	b.n	800cd84 <_strtod_l+0x224>
 800cdca:	2e10      	cmp	r6, #16
 800cdcc:	bfdc      	itt	le
 800cdce:	230a      	movle	r3, #10
 800cdd0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800cdd4:	e7e3      	b.n	800cd9e <_strtod_l+0x23e>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	9305      	str	r3, [sp, #20]
 800cdda:	2301      	movs	r3, #1
 800cddc:	e780      	b.n	800cce0 <_strtod_l+0x180>
 800cdde:	f04f 0c00 	mov.w	ip, #0
 800cde2:	1caa      	adds	r2, r5, #2
 800cde4:	9215      	str	r2, [sp, #84]	; 0x54
 800cde6:	78aa      	ldrb	r2, [r5, #2]
 800cde8:	e788      	b.n	800ccfc <_strtod_l+0x19c>
 800cdea:	f04f 0c01 	mov.w	ip, #1
 800cdee:	e7f8      	b.n	800cde2 <_strtod_l+0x282>
 800cdf0:	08011e90 	.word	0x08011e90
 800cdf4:	08011e8c 	.word	0x08011e8c
 800cdf8:	7ff00000 	.word	0x7ff00000
 800cdfc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cdfe:	1c51      	adds	r1, r2, #1
 800ce00:	9115      	str	r1, [sp, #84]	; 0x54
 800ce02:	7852      	ldrb	r2, [r2, #1]
 800ce04:	2a30      	cmp	r2, #48	; 0x30
 800ce06:	d0f9      	beq.n	800cdfc <_strtod_l+0x29c>
 800ce08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ce0c:	2908      	cmp	r1, #8
 800ce0e:	f63f af7a 	bhi.w	800cd06 <_strtod_l+0x1a6>
 800ce12:	3a30      	subs	r2, #48	; 0x30
 800ce14:	9208      	str	r2, [sp, #32]
 800ce16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce18:	920c      	str	r2, [sp, #48]	; 0x30
 800ce1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce1c:	1c57      	adds	r7, r2, #1
 800ce1e:	9715      	str	r7, [sp, #84]	; 0x54
 800ce20:	7852      	ldrb	r2, [r2, #1]
 800ce22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ce26:	f1be 0f09 	cmp.w	lr, #9
 800ce2a:	d938      	bls.n	800ce9e <_strtod_l+0x33e>
 800ce2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce2e:	1a7f      	subs	r7, r7, r1
 800ce30:	2f08      	cmp	r7, #8
 800ce32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ce36:	dc03      	bgt.n	800ce40 <_strtod_l+0x2e0>
 800ce38:	9908      	ldr	r1, [sp, #32]
 800ce3a:	428f      	cmp	r7, r1
 800ce3c:	bfa8      	it	ge
 800ce3e:	460f      	movge	r7, r1
 800ce40:	f1bc 0f00 	cmp.w	ip, #0
 800ce44:	d000      	beq.n	800ce48 <_strtod_l+0x2e8>
 800ce46:	427f      	negs	r7, r7
 800ce48:	2e00      	cmp	r6, #0
 800ce4a:	d14f      	bne.n	800ceec <_strtod_l+0x38c>
 800ce4c:	9904      	ldr	r1, [sp, #16]
 800ce4e:	4301      	orrs	r1, r0
 800ce50:	f47f aec1 	bne.w	800cbd6 <_strtod_l+0x76>
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f47f aedb 	bne.w	800cc10 <_strtod_l+0xb0>
 800ce5a:	2a69      	cmp	r2, #105	; 0x69
 800ce5c:	d029      	beq.n	800ceb2 <_strtod_l+0x352>
 800ce5e:	dc26      	bgt.n	800ceae <_strtod_l+0x34e>
 800ce60:	2a49      	cmp	r2, #73	; 0x49
 800ce62:	d026      	beq.n	800ceb2 <_strtod_l+0x352>
 800ce64:	2a4e      	cmp	r2, #78	; 0x4e
 800ce66:	f47f aed3 	bne.w	800cc10 <_strtod_l+0xb0>
 800ce6a:	499b      	ldr	r1, [pc, #620]	; (800d0d8 <_strtod_l+0x578>)
 800ce6c:	a815      	add	r0, sp, #84	; 0x54
 800ce6e:	f001 fa07 	bl	800e280 <__match>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	f43f aecc 	beq.w	800cc10 <_strtod_l+0xb0>
 800ce78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	2b28      	cmp	r3, #40	; 0x28
 800ce7e:	d12f      	bne.n	800cee0 <_strtod_l+0x380>
 800ce80:	4996      	ldr	r1, [pc, #600]	; (800d0dc <_strtod_l+0x57c>)
 800ce82:	aa18      	add	r2, sp, #96	; 0x60
 800ce84:	a815      	add	r0, sp, #84	; 0x54
 800ce86:	f001 fa0f 	bl	800e2a8 <__hexnan>
 800ce8a:	2805      	cmp	r0, #5
 800ce8c:	d128      	bne.n	800cee0 <_strtod_l+0x380>
 800ce8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ce94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ce98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ce9c:	e69b      	b.n	800cbd6 <_strtod_l+0x76>
 800ce9e:	9f08      	ldr	r7, [sp, #32]
 800cea0:	210a      	movs	r1, #10
 800cea2:	fb01 2107 	mla	r1, r1, r7, r2
 800cea6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ceaa:	9208      	str	r2, [sp, #32]
 800ceac:	e7b5      	b.n	800ce1a <_strtod_l+0x2ba>
 800ceae:	2a6e      	cmp	r2, #110	; 0x6e
 800ceb0:	e7d9      	b.n	800ce66 <_strtod_l+0x306>
 800ceb2:	498b      	ldr	r1, [pc, #556]	; (800d0e0 <_strtod_l+0x580>)
 800ceb4:	a815      	add	r0, sp, #84	; 0x54
 800ceb6:	f001 f9e3 	bl	800e280 <__match>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	f43f aea8 	beq.w	800cc10 <_strtod_l+0xb0>
 800cec0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cec2:	4988      	ldr	r1, [pc, #544]	; (800d0e4 <_strtod_l+0x584>)
 800cec4:	3b01      	subs	r3, #1
 800cec6:	a815      	add	r0, sp, #84	; 0x54
 800cec8:	9315      	str	r3, [sp, #84]	; 0x54
 800ceca:	f001 f9d9 	bl	800e280 <__match>
 800cece:	b910      	cbnz	r0, 800ced6 <_strtod_l+0x376>
 800ced0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ced2:	3301      	adds	r3, #1
 800ced4:	9315      	str	r3, [sp, #84]	; 0x54
 800ced6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d0f4 <_strtod_l+0x594>
 800ceda:	f04f 0800 	mov.w	r8, #0
 800cede:	e67a      	b.n	800cbd6 <_strtod_l+0x76>
 800cee0:	4881      	ldr	r0, [pc, #516]	; (800d0e8 <_strtod_l+0x588>)
 800cee2:	f000 fee9 	bl	800dcb8 <nan>
 800cee6:	ec59 8b10 	vmov	r8, r9, d0
 800ceea:	e674      	b.n	800cbd6 <_strtod_l+0x76>
 800ceec:	9b05      	ldr	r3, [sp, #20]
 800ceee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cef0:	1afb      	subs	r3, r7, r3
 800cef2:	f1bb 0f00 	cmp.w	fp, #0
 800cef6:	bf08      	it	eq
 800cef8:	46b3      	moveq	fp, r6
 800cefa:	2e10      	cmp	r6, #16
 800cefc:	9308      	str	r3, [sp, #32]
 800cefe:	4635      	mov	r5, r6
 800cf00:	bfa8      	it	ge
 800cf02:	2510      	movge	r5, #16
 800cf04:	f7f3 fafe 	bl	8000504 <__aeabi_ui2d>
 800cf08:	2e09      	cmp	r6, #9
 800cf0a:	4680      	mov	r8, r0
 800cf0c:	4689      	mov	r9, r1
 800cf0e:	dd13      	ble.n	800cf38 <_strtod_l+0x3d8>
 800cf10:	4b76      	ldr	r3, [pc, #472]	; (800d0ec <_strtod_l+0x58c>)
 800cf12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cf16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cf1a:	f7f3 fb6d 	bl	80005f8 <__aeabi_dmul>
 800cf1e:	4680      	mov	r8, r0
 800cf20:	4650      	mov	r0, sl
 800cf22:	4689      	mov	r9, r1
 800cf24:	f7f3 faee 	bl	8000504 <__aeabi_ui2d>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	4640      	mov	r0, r8
 800cf2e:	4649      	mov	r1, r9
 800cf30:	f7f3 f9ac 	bl	800028c <__adddf3>
 800cf34:	4680      	mov	r8, r0
 800cf36:	4689      	mov	r9, r1
 800cf38:	2e0f      	cmp	r6, #15
 800cf3a:	dc38      	bgt.n	800cfae <_strtod_l+0x44e>
 800cf3c:	9b08      	ldr	r3, [sp, #32]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f43f ae49 	beq.w	800cbd6 <_strtod_l+0x76>
 800cf44:	dd24      	ble.n	800cf90 <_strtod_l+0x430>
 800cf46:	2b16      	cmp	r3, #22
 800cf48:	dc0b      	bgt.n	800cf62 <_strtod_l+0x402>
 800cf4a:	4968      	ldr	r1, [pc, #416]	; (800d0ec <_strtod_l+0x58c>)
 800cf4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf54:	4642      	mov	r2, r8
 800cf56:	464b      	mov	r3, r9
 800cf58:	f7f3 fb4e 	bl	80005f8 <__aeabi_dmul>
 800cf5c:	4680      	mov	r8, r0
 800cf5e:	4689      	mov	r9, r1
 800cf60:	e639      	b.n	800cbd6 <_strtod_l+0x76>
 800cf62:	9a08      	ldr	r2, [sp, #32]
 800cf64:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	db20      	blt.n	800cfae <_strtod_l+0x44e>
 800cf6c:	4c5f      	ldr	r4, [pc, #380]	; (800d0ec <_strtod_l+0x58c>)
 800cf6e:	f1c6 060f 	rsb	r6, r6, #15
 800cf72:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800cf76:	4642      	mov	r2, r8
 800cf78:	464b      	mov	r3, r9
 800cf7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf7e:	f7f3 fb3b 	bl	80005f8 <__aeabi_dmul>
 800cf82:	9b08      	ldr	r3, [sp, #32]
 800cf84:	1b9e      	subs	r6, r3, r6
 800cf86:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800cf8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf8e:	e7e3      	b.n	800cf58 <_strtod_l+0x3f8>
 800cf90:	9b08      	ldr	r3, [sp, #32]
 800cf92:	3316      	adds	r3, #22
 800cf94:	db0b      	blt.n	800cfae <_strtod_l+0x44e>
 800cf96:	9b05      	ldr	r3, [sp, #20]
 800cf98:	1bdf      	subs	r7, r3, r7
 800cf9a:	4b54      	ldr	r3, [pc, #336]	; (800d0ec <_strtod_l+0x58c>)
 800cf9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cfa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfa4:	4640      	mov	r0, r8
 800cfa6:	4649      	mov	r1, r9
 800cfa8:	f7f3 fc50 	bl	800084c <__aeabi_ddiv>
 800cfac:	e7d6      	b.n	800cf5c <_strtod_l+0x3fc>
 800cfae:	9b08      	ldr	r3, [sp, #32]
 800cfb0:	1b75      	subs	r5, r6, r5
 800cfb2:	441d      	add	r5, r3
 800cfb4:	2d00      	cmp	r5, #0
 800cfb6:	dd70      	ble.n	800d09a <_strtod_l+0x53a>
 800cfb8:	f015 030f 	ands.w	r3, r5, #15
 800cfbc:	d00a      	beq.n	800cfd4 <_strtod_l+0x474>
 800cfbe:	494b      	ldr	r1, [pc, #300]	; (800d0ec <_strtod_l+0x58c>)
 800cfc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cfc4:	4642      	mov	r2, r8
 800cfc6:	464b      	mov	r3, r9
 800cfc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfcc:	f7f3 fb14 	bl	80005f8 <__aeabi_dmul>
 800cfd0:	4680      	mov	r8, r0
 800cfd2:	4689      	mov	r9, r1
 800cfd4:	f035 050f 	bics.w	r5, r5, #15
 800cfd8:	d04d      	beq.n	800d076 <_strtod_l+0x516>
 800cfda:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800cfde:	dd22      	ble.n	800d026 <_strtod_l+0x4c6>
 800cfe0:	2500      	movs	r5, #0
 800cfe2:	46ab      	mov	fp, r5
 800cfe4:	9509      	str	r5, [sp, #36]	; 0x24
 800cfe6:	9505      	str	r5, [sp, #20]
 800cfe8:	2322      	movs	r3, #34	; 0x22
 800cfea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d0f4 <_strtod_l+0x594>
 800cfee:	6023      	str	r3, [r4, #0]
 800cff0:	f04f 0800 	mov.w	r8, #0
 800cff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f43f aded 	beq.w	800cbd6 <_strtod_l+0x76>
 800cffc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cffe:	4620      	mov	r0, r4
 800d000:	f7ff f924 	bl	800c24c <_Bfree>
 800d004:	9905      	ldr	r1, [sp, #20]
 800d006:	4620      	mov	r0, r4
 800d008:	f7ff f920 	bl	800c24c <_Bfree>
 800d00c:	4659      	mov	r1, fp
 800d00e:	4620      	mov	r0, r4
 800d010:	f7ff f91c 	bl	800c24c <_Bfree>
 800d014:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d016:	4620      	mov	r0, r4
 800d018:	f7ff f918 	bl	800c24c <_Bfree>
 800d01c:	4629      	mov	r1, r5
 800d01e:	4620      	mov	r0, r4
 800d020:	f7ff f914 	bl	800c24c <_Bfree>
 800d024:	e5d7      	b.n	800cbd6 <_strtod_l+0x76>
 800d026:	4b32      	ldr	r3, [pc, #200]	; (800d0f0 <_strtod_l+0x590>)
 800d028:	9304      	str	r3, [sp, #16]
 800d02a:	2300      	movs	r3, #0
 800d02c:	112d      	asrs	r5, r5, #4
 800d02e:	4640      	mov	r0, r8
 800d030:	4649      	mov	r1, r9
 800d032:	469a      	mov	sl, r3
 800d034:	2d01      	cmp	r5, #1
 800d036:	dc21      	bgt.n	800d07c <_strtod_l+0x51c>
 800d038:	b10b      	cbz	r3, 800d03e <_strtod_l+0x4de>
 800d03a:	4680      	mov	r8, r0
 800d03c:	4689      	mov	r9, r1
 800d03e:	492c      	ldr	r1, [pc, #176]	; (800d0f0 <_strtod_l+0x590>)
 800d040:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d044:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d048:	4642      	mov	r2, r8
 800d04a:	464b      	mov	r3, r9
 800d04c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d050:	f7f3 fad2 	bl	80005f8 <__aeabi_dmul>
 800d054:	4b27      	ldr	r3, [pc, #156]	; (800d0f4 <_strtod_l+0x594>)
 800d056:	460a      	mov	r2, r1
 800d058:	400b      	ands	r3, r1
 800d05a:	4927      	ldr	r1, [pc, #156]	; (800d0f8 <_strtod_l+0x598>)
 800d05c:	428b      	cmp	r3, r1
 800d05e:	4680      	mov	r8, r0
 800d060:	d8be      	bhi.n	800cfe0 <_strtod_l+0x480>
 800d062:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d066:	428b      	cmp	r3, r1
 800d068:	bf86      	itte	hi
 800d06a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d0fc <_strtod_l+0x59c>
 800d06e:	f04f 38ff 	movhi.w	r8, #4294967295
 800d072:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d076:	2300      	movs	r3, #0
 800d078:	9304      	str	r3, [sp, #16]
 800d07a:	e07b      	b.n	800d174 <_strtod_l+0x614>
 800d07c:	07ea      	lsls	r2, r5, #31
 800d07e:	d505      	bpl.n	800d08c <_strtod_l+0x52c>
 800d080:	9b04      	ldr	r3, [sp, #16]
 800d082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d086:	f7f3 fab7 	bl	80005f8 <__aeabi_dmul>
 800d08a:	2301      	movs	r3, #1
 800d08c:	9a04      	ldr	r2, [sp, #16]
 800d08e:	3208      	adds	r2, #8
 800d090:	f10a 0a01 	add.w	sl, sl, #1
 800d094:	106d      	asrs	r5, r5, #1
 800d096:	9204      	str	r2, [sp, #16]
 800d098:	e7cc      	b.n	800d034 <_strtod_l+0x4d4>
 800d09a:	d0ec      	beq.n	800d076 <_strtod_l+0x516>
 800d09c:	426d      	negs	r5, r5
 800d09e:	f015 020f 	ands.w	r2, r5, #15
 800d0a2:	d00a      	beq.n	800d0ba <_strtod_l+0x55a>
 800d0a4:	4b11      	ldr	r3, [pc, #68]	; (800d0ec <_strtod_l+0x58c>)
 800d0a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0aa:	4640      	mov	r0, r8
 800d0ac:	4649      	mov	r1, r9
 800d0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b2:	f7f3 fbcb 	bl	800084c <__aeabi_ddiv>
 800d0b6:	4680      	mov	r8, r0
 800d0b8:	4689      	mov	r9, r1
 800d0ba:	112d      	asrs	r5, r5, #4
 800d0bc:	d0db      	beq.n	800d076 <_strtod_l+0x516>
 800d0be:	2d1f      	cmp	r5, #31
 800d0c0:	dd1e      	ble.n	800d100 <_strtod_l+0x5a0>
 800d0c2:	2500      	movs	r5, #0
 800d0c4:	46ab      	mov	fp, r5
 800d0c6:	9509      	str	r5, [sp, #36]	; 0x24
 800d0c8:	9505      	str	r5, [sp, #20]
 800d0ca:	2322      	movs	r3, #34	; 0x22
 800d0cc:	f04f 0800 	mov.w	r8, #0
 800d0d0:	f04f 0900 	mov.w	r9, #0
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	e78d      	b.n	800cff4 <_strtod_l+0x494>
 800d0d8:	08011c7d 	.word	0x08011c7d
 800d0dc:	08011ea4 	.word	0x08011ea4
 800d0e0:	08011c75 	.word	0x08011c75
 800d0e4:	08011cac 	.word	0x08011cac
 800d0e8:	08012035 	.word	0x08012035
 800d0ec:	08011db8 	.word	0x08011db8
 800d0f0:	08011d90 	.word	0x08011d90
 800d0f4:	7ff00000 	.word	0x7ff00000
 800d0f8:	7ca00000 	.word	0x7ca00000
 800d0fc:	7fefffff 	.word	0x7fefffff
 800d100:	f015 0310 	ands.w	r3, r5, #16
 800d104:	bf18      	it	ne
 800d106:	236a      	movne	r3, #106	; 0x6a
 800d108:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d4ac <_strtod_l+0x94c>
 800d10c:	9304      	str	r3, [sp, #16]
 800d10e:	4640      	mov	r0, r8
 800d110:	4649      	mov	r1, r9
 800d112:	2300      	movs	r3, #0
 800d114:	07ea      	lsls	r2, r5, #31
 800d116:	d504      	bpl.n	800d122 <_strtod_l+0x5c2>
 800d118:	e9da 2300 	ldrd	r2, r3, [sl]
 800d11c:	f7f3 fa6c 	bl	80005f8 <__aeabi_dmul>
 800d120:	2301      	movs	r3, #1
 800d122:	106d      	asrs	r5, r5, #1
 800d124:	f10a 0a08 	add.w	sl, sl, #8
 800d128:	d1f4      	bne.n	800d114 <_strtod_l+0x5b4>
 800d12a:	b10b      	cbz	r3, 800d130 <_strtod_l+0x5d0>
 800d12c:	4680      	mov	r8, r0
 800d12e:	4689      	mov	r9, r1
 800d130:	9b04      	ldr	r3, [sp, #16]
 800d132:	b1bb      	cbz	r3, 800d164 <_strtod_l+0x604>
 800d134:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d138:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	4649      	mov	r1, r9
 800d140:	dd10      	ble.n	800d164 <_strtod_l+0x604>
 800d142:	2b1f      	cmp	r3, #31
 800d144:	f340 811e 	ble.w	800d384 <_strtod_l+0x824>
 800d148:	2b34      	cmp	r3, #52	; 0x34
 800d14a:	bfde      	ittt	le
 800d14c:	f04f 33ff 	movle.w	r3, #4294967295
 800d150:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d154:	4093      	lslle	r3, r2
 800d156:	f04f 0800 	mov.w	r8, #0
 800d15a:	bfcc      	ite	gt
 800d15c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d160:	ea03 0901 	andle.w	r9, r3, r1
 800d164:	2200      	movs	r2, #0
 800d166:	2300      	movs	r3, #0
 800d168:	4640      	mov	r0, r8
 800d16a:	4649      	mov	r1, r9
 800d16c:	f7f3 fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 800d170:	2800      	cmp	r0, #0
 800d172:	d1a6      	bne.n	800d0c2 <_strtod_l+0x562>
 800d174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d176:	9300      	str	r3, [sp, #0]
 800d178:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d17a:	4633      	mov	r3, r6
 800d17c:	465a      	mov	r2, fp
 800d17e:	4620      	mov	r0, r4
 800d180:	f7ff f8cc 	bl	800c31c <__s2b>
 800d184:	9009      	str	r0, [sp, #36]	; 0x24
 800d186:	2800      	cmp	r0, #0
 800d188:	f43f af2a 	beq.w	800cfe0 <_strtod_l+0x480>
 800d18c:	9a08      	ldr	r2, [sp, #32]
 800d18e:	9b05      	ldr	r3, [sp, #20]
 800d190:	2a00      	cmp	r2, #0
 800d192:	eba3 0307 	sub.w	r3, r3, r7
 800d196:	bfa8      	it	ge
 800d198:	2300      	movge	r3, #0
 800d19a:	930c      	str	r3, [sp, #48]	; 0x30
 800d19c:	2500      	movs	r5, #0
 800d19e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d1a2:	9312      	str	r3, [sp, #72]	; 0x48
 800d1a4:	46ab      	mov	fp, r5
 800d1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	6859      	ldr	r1, [r3, #4]
 800d1ac:	f7ff f80e 	bl	800c1cc <_Balloc>
 800d1b0:	9005      	str	r0, [sp, #20]
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	f43f af18 	beq.w	800cfe8 <_strtod_l+0x488>
 800d1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ba:	691a      	ldr	r2, [r3, #16]
 800d1bc:	3202      	adds	r2, #2
 800d1be:	f103 010c 	add.w	r1, r3, #12
 800d1c2:	0092      	lsls	r2, r2, #2
 800d1c4:	300c      	adds	r0, #12
 800d1c6:	f7fe f924 	bl	800b412 <memcpy>
 800d1ca:	ec49 8b10 	vmov	d0, r8, r9
 800d1ce:	aa18      	add	r2, sp, #96	; 0x60
 800d1d0:	a917      	add	r1, sp, #92	; 0x5c
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f7ff fbd6 	bl	800c984 <__d2b>
 800d1d8:	ec49 8b18 	vmov	d8, r8, r9
 800d1dc:	9016      	str	r0, [sp, #88]	; 0x58
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	f43f af02 	beq.w	800cfe8 <_strtod_l+0x488>
 800d1e4:	2101      	movs	r1, #1
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f7ff f930 	bl	800c44c <__i2b>
 800d1ec:	4683      	mov	fp, r0
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	f43f aefa 	beq.w	800cfe8 <_strtod_l+0x488>
 800d1f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d1f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d1f8:	2e00      	cmp	r6, #0
 800d1fa:	bfab      	itete	ge
 800d1fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d1fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d200:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d202:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d206:	bfac      	ite	ge
 800d208:	eb06 0a03 	addge.w	sl, r6, r3
 800d20c:	1b9f      	sublt	r7, r3, r6
 800d20e:	9b04      	ldr	r3, [sp, #16]
 800d210:	1af6      	subs	r6, r6, r3
 800d212:	4416      	add	r6, r2
 800d214:	4ba0      	ldr	r3, [pc, #640]	; (800d498 <_strtod_l+0x938>)
 800d216:	3e01      	subs	r6, #1
 800d218:	429e      	cmp	r6, r3
 800d21a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d21e:	f280 80c4 	bge.w	800d3aa <_strtod_l+0x84a>
 800d222:	1b9b      	subs	r3, r3, r6
 800d224:	2b1f      	cmp	r3, #31
 800d226:	eba2 0203 	sub.w	r2, r2, r3
 800d22a:	f04f 0101 	mov.w	r1, #1
 800d22e:	f300 80b0 	bgt.w	800d392 <_strtod_l+0x832>
 800d232:	fa01 f303 	lsl.w	r3, r1, r3
 800d236:	930e      	str	r3, [sp, #56]	; 0x38
 800d238:	2300      	movs	r3, #0
 800d23a:	930d      	str	r3, [sp, #52]	; 0x34
 800d23c:	eb0a 0602 	add.w	r6, sl, r2
 800d240:	9b04      	ldr	r3, [sp, #16]
 800d242:	45b2      	cmp	sl, r6
 800d244:	4417      	add	r7, r2
 800d246:	441f      	add	r7, r3
 800d248:	4653      	mov	r3, sl
 800d24a:	bfa8      	it	ge
 800d24c:	4633      	movge	r3, r6
 800d24e:	42bb      	cmp	r3, r7
 800d250:	bfa8      	it	ge
 800d252:	463b      	movge	r3, r7
 800d254:	2b00      	cmp	r3, #0
 800d256:	bfc2      	ittt	gt
 800d258:	1af6      	subgt	r6, r6, r3
 800d25a:	1aff      	subgt	r7, r7, r3
 800d25c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d262:	2b00      	cmp	r3, #0
 800d264:	dd17      	ble.n	800d296 <_strtod_l+0x736>
 800d266:	4659      	mov	r1, fp
 800d268:	461a      	mov	r2, r3
 800d26a:	4620      	mov	r0, r4
 800d26c:	f7ff f9ae 	bl	800c5cc <__pow5mult>
 800d270:	4683      	mov	fp, r0
 800d272:	2800      	cmp	r0, #0
 800d274:	f43f aeb8 	beq.w	800cfe8 <_strtod_l+0x488>
 800d278:	4601      	mov	r1, r0
 800d27a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d27c:	4620      	mov	r0, r4
 800d27e:	f7ff f8fb 	bl	800c478 <__multiply>
 800d282:	900b      	str	r0, [sp, #44]	; 0x2c
 800d284:	2800      	cmp	r0, #0
 800d286:	f43f aeaf 	beq.w	800cfe8 <_strtod_l+0x488>
 800d28a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d28c:	4620      	mov	r0, r4
 800d28e:	f7fe ffdd 	bl	800c24c <_Bfree>
 800d292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d294:	9316      	str	r3, [sp, #88]	; 0x58
 800d296:	2e00      	cmp	r6, #0
 800d298:	f300 808c 	bgt.w	800d3b4 <_strtod_l+0x854>
 800d29c:	9b08      	ldr	r3, [sp, #32]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	dd08      	ble.n	800d2b4 <_strtod_l+0x754>
 800d2a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2a4:	9905      	ldr	r1, [sp, #20]
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f7ff f990 	bl	800c5cc <__pow5mult>
 800d2ac:	9005      	str	r0, [sp, #20]
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	f43f ae9a 	beq.w	800cfe8 <_strtod_l+0x488>
 800d2b4:	2f00      	cmp	r7, #0
 800d2b6:	dd08      	ble.n	800d2ca <_strtod_l+0x76a>
 800d2b8:	9905      	ldr	r1, [sp, #20]
 800d2ba:	463a      	mov	r2, r7
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f7ff f9df 	bl	800c680 <__lshift>
 800d2c2:	9005      	str	r0, [sp, #20]
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	f43f ae8f 	beq.w	800cfe8 <_strtod_l+0x488>
 800d2ca:	f1ba 0f00 	cmp.w	sl, #0
 800d2ce:	dd08      	ble.n	800d2e2 <_strtod_l+0x782>
 800d2d0:	4659      	mov	r1, fp
 800d2d2:	4652      	mov	r2, sl
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f7ff f9d3 	bl	800c680 <__lshift>
 800d2da:	4683      	mov	fp, r0
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	f43f ae83 	beq.w	800cfe8 <_strtod_l+0x488>
 800d2e2:	9a05      	ldr	r2, [sp, #20]
 800d2e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f7ff fa52 	bl	800c790 <__mdiff>
 800d2ec:	4605      	mov	r5, r0
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	f43f ae7a 	beq.w	800cfe8 <_strtod_l+0x488>
 800d2f4:	68c3      	ldr	r3, [r0, #12]
 800d2f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	60c3      	str	r3, [r0, #12]
 800d2fc:	4659      	mov	r1, fp
 800d2fe:	f7ff fa2b 	bl	800c758 <__mcmp>
 800d302:	2800      	cmp	r0, #0
 800d304:	da60      	bge.n	800d3c8 <_strtod_l+0x868>
 800d306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d308:	ea53 0308 	orrs.w	r3, r3, r8
 800d30c:	f040 8084 	bne.w	800d418 <_strtod_l+0x8b8>
 800d310:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d314:	2b00      	cmp	r3, #0
 800d316:	d17f      	bne.n	800d418 <_strtod_l+0x8b8>
 800d318:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d31c:	0d1b      	lsrs	r3, r3, #20
 800d31e:	051b      	lsls	r3, r3, #20
 800d320:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d324:	d978      	bls.n	800d418 <_strtod_l+0x8b8>
 800d326:	696b      	ldr	r3, [r5, #20]
 800d328:	b913      	cbnz	r3, 800d330 <_strtod_l+0x7d0>
 800d32a:	692b      	ldr	r3, [r5, #16]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	dd73      	ble.n	800d418 <_strtod_l+0x8b8>
 800d330:	4629      	mov	r1, r5
 800d332:	2201      	movs	r2, #1
 800d334:	4620      	mov	r0, r4
 800d336:	f7ff f9a3 	bl	800c680 <__lshift>
 800d33a:	4659      	mov	r1, fp
 800d33c:	4605      	mov	r5, r0
 800d33e:	f7ff fa0b 	bl	800c758 <__mcmp>
 800d342:	2800      	cmp	r0, #0
 800d344:	dd68      	ble.n	800d418 <_strtod_l+0x8b8>
 800d346:	9904      	ldr	r1, [sp, #16]
 800d348:	4a54      	ldr	r2, [pc, #336]	; (800d49c <_strtod_l+0x93c>)
 800d34a:	464b      	mov	r3, r9
 800d34c:	2900      	cmp	r1, #0
 800d34e:	f000 8084 	beq.w	800d45a <_strtod_l+0x8fa>
 800d352:	ea02 0109 	and.w	r1, r2, r9
 800d356:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d35a:	dc7e      	bgt.n	800d45a <_strtod_l+0x8fa>
 800d35c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d360:	f77f aeb3 	ble.w	800d0ca <_strtod_l+0x56a>
 800d364:	4b4e      	ldr	r3, [pc, #312]	; (800d4a0 <_strtod_l+0x940>)
 800d366:	4640      	mov	r0, r8
 800d368:	4649      	mov	r1, r9
 800d36a:	2200      	movs	r2, #0
 800d36c:	f7f3 f944 	bl	80005f8 <__aeabi_dmul>
 800d370:	4b4a      	ldr	r3, [pc, #296]	; (800d49c <_strtod_l+0x93c>)
 800d372:	400b      	ands	r3, r1
 800d374:	4680      	mov	r8, r0
 800d376:	4689      	mov	r9, r1
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f47f ae3f 	bne.w	800cffc <_strtod_l+0x49c>
 800d37e:	2322      	movs	r3, #34	; 0x22
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	e63b      	b.n	800cffc <_strtod_l+0x49c>
 800d384:	f04f 32ff 	mov.w	r2, #4294967295
 800d388:	fa02 f303 	lsl.w	r3, r2, r3
 800d38c:	ea03 0808 	and.w	r8, r3, r8
 800d390:	e6e8      	b.n	800d164 <_strtod_l+0x604>
 800d392:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d396:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d39a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d39e:	36e2      	adds	r6, #226	; 0xe2
 800d3a0:	fa01 f306 	lsl.w	r3, r1, r6
 800d3a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d3a8:	e748      	b.n	800d23c <_strtod_l+0x6dc>
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d3b2:	e743      	b.n	800d23c <_strtod_l+0x6dc>
 800d3b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d3b6:	4632      	mov	r2, r6
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f7ff f961 	bl	800c680 <__lshift>
 800d3be:	9016      	str	r0, [sp, #88]	; 0x58
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	f47f af6b 	bne.w	800d29c <_strtod_l+0x73c>
 800d3c6:	e60f      	b.n	800cfe8 <_strtod_l+0x488>
 800d3c8:	46ca      	mov	sl, r9
 800d3ca:	d171      	bne.n	800d4b0 <_strtod_l+0x950>
 800d3cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3d2:	b352      	cbz	r2, 800d42a <_strtod_l+0x8ca>
 800d3d4:	4a33      	ldr	r2, [pc, #204]	; (800d4a4 <_strtod_l+0x944>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d12a      	bne.n	800d430 <_strtod_l+0x8d0>
 800d3da:	9b04      	ldr	r3, [sp, #16]
 800d3dc:	4641      	mov	r1, r8
 800d3de:	b1fb      	cbz	r3, 800d420 <_strtod_l+0x8c0>
 800d3e0:	4b2e      	ldr	r3, [pc, #184]	; (800d49c <_strtod_l+0x93c>)
 800d3e2:	ea09 0303 	and.w	r3, r9, r3
 800d3e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ee:	d81a      	bhi.n	800d426 <_strtod_l+0x8c6>
 800d3f0:	0d1b      	lsrs	r3, r3, #20
 800d3f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3fa:	4299      	cmp	r1, r3
 800d3fc:	d118      	bne.n	800d430 <_strtod_l+0x8d0>
 800d3fe:	4b2a      	ldr	r3, [pc, #168]	; (800d4a8 <_strtod_l+0x948>)
 800d400:	459a      	cmp	sl, r3
 800d402:	d102      	bne.n	800d40a <_strtod_l+0x8aa>
 800d404:	3101      	adds	r1, #1
 800d406:	f43f adef 	beq.w	800cfe8 <_strtod_l+0x488>
 800d40a:	4b24      	ldr	r3, [pc, #144]	; (800d49c <_strtod_l+0x93c>)
 800d40c:	ea0a 0303 	and.w	r3, sl, r3
 800d410:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d414:	f04f 0800 	mov.w	r8, #0
 800d418:	9b04      	ldr	r3, [sp, #16]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1a2      	bne.n	800d364 <_strtod_l+0x804>
 800d41e:	e5ed      	b.n	800cffc <_strtod_l+0x49c>
 800d420:	f04f 33ff 	mov.w	r3, #4294967295
 800d424:	e7e9      	b.n	800d3fa <_strtod_l+0x89a>
 800d426:	4613      	mov	r3, r2
 800d428:	e7e7      	b.n	800d3fa <_strtod_l+0x89a>
 800d42a:	ea53 0308 	orrs.w	r3, r3, r8
 800d42e:	d08a      	beq.n	800d346 <_strtod_l+0x7e6>
 800d430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d432:	b1e3      	cbz	r3, 800d46e <_strtod_l+0x90e>
 800d434:	ea13 0f0a 	tst.w	r3, sl
 800d438:	d0ee      	beq.n	800d418 <_strtod_l+0x8b8>
 800d43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d43c:	9a04      	ldr	r2, [sp, #16]
 800d43e:	4640      	mov	r0, r8
 800d440:	4649      	mov	r1, r9
 800d442:	b1c3      	cbz	r3, 800d476 <_strtod_l+0x916>
 800d444:	f7ff fb6f 	bl	800cb26 <sulp>
 800d448:	4602      	mov	r2, r0
 800d44a:	460b      	mov	r3, r1
 800d44c:	ec51 0b18 	vmov	r0, r1, d8
 800d450:	f7f2 ff1c 	bl	800028c <__adddf3>
 800d454:	4680      	mov	r8, r0
 800d456:	4689      	mov	r9, r1
 800d458:	e7de      	b.n	800d418 <_strtod_l+0x8b8>
 800d45a:	4013      	ands	r3, r2
 800d45c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d460:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d464:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d468:	f04f 38ff 	mov.w	r8, #4294967295
 800d46c:	e7d4      	b.n	800d418 <_strtod_l+0x8b8>
 800d46e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d470:	ea13 0f08 	tst.w	r3, r8
 800d474:	e7e0      	b.n	800d438 <_strtod_l+0x8d8>
 800d476:	f7ff fb56 	bl	800cb26 <sulp>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	ec51 0b18 	vmov	r0, r1, d8
 800d482:	f7f2 ff01 	bl	8000288 <__aeabi_dsub>
 800d486:	2200      	movs	r2, #0
 800d488:	2300      	movs	r3, #0
 800d48a:	4680      	mov	r8, r0
 800d48c:	4689      	mov	r9, r1
 800d48e:	f7f3 fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d492:	2800      	cmp	r0, #0
 800d494:	d0c0      	beq.n	800d418 <_strtod_l+0x8b8>
 800d496:	e618      	b.n	800d0ca <_strtod_l+0x56a>
 800d498:	fffffc02 	.word	0xfffffc02
 800d49c:	7ff00000 	.word	0x7ff00000
 800d4a0:	39500000 	.word	0x39500000
 800d4a4:	000fffff 	.word	0x000fffff
 800d4a8:	7fefffff 	.word	0x7fefffff
 800d4ac:	08011eb8 	.word	0x08011eb8
 800d4b0:	4659      	mov	r1, fp
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	f7ff fac0 	bl	800ca38 <__ratio>
 800d4b8:	ec57 6b10 	vmov	r6, r7, d0
 800d4bc:	ee10 0a10 	vmov	r0, s0
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4c6:	4639      	mov	r1, r7
 800d4c8:	f7f3 fb12 	bl	8000af0 <__aeabi_dcmple>
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	d071      	beq.n	800d5b4 <_strtod_l+0xa54>
 800d4d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d17c      	bne.n	800d5d0 <_strtod_l+0xa70>
 800d4d6:	f1b8 0f00 	cmp.w	r8, #0
 800d4da:	d15a      	bne.n	800d592 <_strtod_l+0xa32>
 800d4dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d15d      	bne.n	800d5a0 <_strtod_l+0xa40>
 800d4e4:	4b90      	ldr	r3, [pc, #576]	; (800d728 <_strtod_l+0xbc8>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	4639      	mov	r1, r7
 800d4ec:	f7f3 faf6 	bl	8000adc <__aeabi_dcmplt>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d15c      	bne.n	800d5ae <_strtod_l+0xa4e>
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	4639      	mov	r1, r7
 800d4f8:	4b8c      	ldr	r3, [pc, #560]	; (800d72c <_strtod_l+0xbcc>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f7f3 f87c 	bl	80005f8 <__aeabi_dmul>
 800d500:	4606      	mov	r6, r0
 800d502:	460f      	mov	r7, r1
 800d504:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d508:	9606      	str	r6, [sp, #24]
 800d50a:	9307      	str	r3, [sp, #28]
 800d50c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d510:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d514:	4b86      	ldr	r3, [pc, #536]	; (800d730 <_strtod_l+0xbd0>)
 800d516:	ea0a 0303 	and.w	r3, sl, r3
 800d51a:	930d      	str	r3, [sp, #52]	; 0x34
 800d51c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d51e:	4b85      	ldr	r3, [pc, #532]	; (800d734 <_strtod_l+0xbd4>)
 800d520:	429a      	cmp	r2, r3
 800d522:	f040 8090 	bne.w	800d646 <_strtod_l+0xae6>
 800d526:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d52a:	ec49 8b10 	vmov	d0, r8, r9
 800d52e:	f7ff f9b9 	bl	800c8a4 <__ulp>
 800d532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d536:	ec51 0b10 	vmov	r0, r1, d0
 800d53a:	f7f3 f85d 	bl	80005f8 <__aeabi_dmul>
 800d53e:	4642      	mov	r2, r8
 800d540:	464b      	mov	r3, r9
 800d542:	f7f2 fea3 	bl	800028c <__adddf3>
 800d546:	460b      	mov	r3, r1
 800d548:	4979      	ldr	r1, [pc, #484]	; (800d730 <_strtod_l+0xbd0>)
 800d54a:	4a7b      	ldr	r2, [pc, #492]	; (800d738 <_strtod_l+0xbd8>)
 800d54c:	4019      	ands	r1, r3
 800d54e:	4291      	cmp	r1, r2
 800d550:	4680      	mov	r8, r0
 800d552:	d944      	bls.n	800d5de <_strtod_l+0xa7e>
 800d554:	ee18 2a90 	vmov	r2, s17
 800d558:	4b78      	ldr	r3, [pc, #480]	; (800d73c <_strtod_l+0xbdc>)
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d104      	bne.n	800d568 <_strtod_l+0xa08>
 800d55e:	ee18 3a10 	vmov	r3, s16
 800d562:	3301      	adds	r3, #1
 800d564:	f43f ad40 	beq.w	800cfe8 <_strtod_l+0x488>
 800d568:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d73c <_strtod_l+0xbdc>
 800d56c:	f04f 38ff 	mov.w	r8, #4294967295
 800d570:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d572:	4620      	mov	r0, r4
 800d574:	f7fe fe6a 	bl	800c24c <_Bfree>
 800d578:	9905      	ldr	r1, [sp, #20]
 800d57a:	4620      	mov	r0, r4
 800d57c:	f7fe fe66 	bl	800c24c <_Bfree>
 800d580:	4659      	mov	r1, fp
 800d582:	4620      	mov	r0, r4
 800d584:	f7fe fe62 	bl	800c24c <_Bfree>
 800d588:	4629      	mov	r1, r5
 800d58a:	4620      	mov	r0, r4
 800d58c:	f7fe fe5e 	bl	800c24c <_Bfree>
 800d590:	e609      	b.n	800d1a6 <_strtod_l+0x646>
 800d592:	f1b8 0f01 	cmp.w	r8, #1
 800d596:	d103      	bne.n	800d5a0 <_strtod_l+0xa40>
 800d598:	f1b9 0f00 	cmp.w	r9, #0
 800d59c:	f43f ad95 	beq.w	800d0ca <_strtod_l+0x56a>
 800d5a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d6f8 <_strtod_l+0xb98>
 800d5a4:	4f60      	ldr	r7, [pc, #384]	; (800d728 <_strtod_l+0xbc8>)
 800d5a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d5aa:	2600      	movs	r6, #0
 800d5ac:	e7ae      	b.n	800d50c <_strtod_l+0x9ac>
 800d5ae:	4f5f      	ldr	r7, [pc, #380]	; (800d72c <_strtod_l+0xbcc>)
 800d5b0:	2600      	movs	r6, #0
 800d5b2:	e7a7      	b.n	800d504 <_strtod_l+0x9a4>
 800d5b4:	4b5d      	ldr	r3, [pc, #372]	; (800d72c <_strtod_l+0xbcc>)
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	4639      	mov	r1, r7
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f7f3 f81c 	bl	80005f8 <__aeabi_dmul>
 800d5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5c2:	4606      	mov	r6, r0
 800d5c4:	460f      	mov	r7, r1
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d09c      	beq.n	800d504 <_strtod_l+0x9a4>
 800d5ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d5ce:	e79d      	b.n	800d50c <_strtod_l+0x9ac>
 800d5d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d700 <_strtod_l+0xba0>
 800d5d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d5d8:	ec57 6b17 	vmov	r6, r7, d7
 800d5dc:	e796      	b.n	800d50c <_strtod_l+0x9ac>
 800d5de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d5e2:	9b04      	ldr	r3, [sp, #16]
 800d5e4:	46ca      	mov	sl, r9
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1c2      	bne.n	800d570 <_strtod_l+0xa10>
 800d5ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d5ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5f0:	0d1b      	lsrs	r3, r3, #20
 800d5f2:	051b      	lsls	r3, r3, #20
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d1bb      	bne.n	800d570 <_strtod_l+0xa10>
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	f7f3 fb5c 	bl	8000cb8 <__aeabi_d2lz>
 800d600:	f7f2 ffcc 	bl	800059c <__aeabi_l2d>
 800d604:	4602      	mov	r2, r0
 800d606:	460b      	mov	r3, r1
 800d608:	4630      	mov	r0, r6
 800d60a:	4639      	mov	r1, r7
 800d60c:	f7f2 fe3c 	bl	8000288 <__aeabi_dsub>
 800d610:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d612:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d616:	ea43 0308 	orr.w	r3, r3, r8
 800d61a:	4313      	orrs	r3, r2
 800d61c:	4606      	mov	r6, r0
 800d61e:	460f      	mov	r7, r1
 800d620:	d054      	beq.n	800d6cc <_strtod_l+0xb6c>
 800d622:	a339      	add	r3, pc, #228	; (adr r3, 800d708 <_strtod_l+0xba8>)
 800d624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d628:	f7f3 fa58 	bl	8000adc <__aeabi_dcmplt>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	f47f ace5 	bne.w	800cffc <_strtod_l+0x49c>
 800d632:	a337      	add	r3, pc, #220	; (adr r3, 800d710 <_strtod_l+0xbb0>)
 800d634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d638:	4630      	mov	r0, r6
 800d63a:	4639      	mov	r1, r7
 800d63c:	f7f3 fa6c 	bl	8000b18 <__aeabi_dcmpgt>
 800d640:	2800      	cmp	r0, #0
 800d642:	d095      	beq.n	800d570 <_strtod_l+0xa10>
 800d644:	e4da      	b.n	800cffc <_strtod_l+0x49c>
 800d646:	9b04      	ldr	r3, [sp, #16]
 800d648:	b333      	cbz	r3, 800d698 <_strtod_l+0xb38>
 800d64a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d64c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d650:	d822      	bhi.n	800d698 <_strtod_l+0xb38>
 800d652:	a331      	add	r3, pc, #196	; (adr r3, 800d718 <_strtod_l+0xbb8>)
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	4630      	mov	r0, r6
 800d65a:	4639      	mov	r1, r7
 800d65c:	f7f3 fa48 	bl	8000af0 <__aeabi_dcmple>
 800d660:	b1a0      	cbz	r0, 800d68c <_strtod_l+0xb2c>
 800d662:	4639      	mov	r1, r7
 800d664:	4630      	mov	r0, r6
 800d666:	f7f3 fa9f 	bl	8000ba8 <__aeabi_d2uiz>
 800d66a:	2801      	cmp	r0, #1
 800d66c:	bf38      	it	cc
 800d66e:	2001      	movcc	r0, #1
 800d670:	f7f2 ff48 	bl	8000504 <__aeabi_ui2d>
 800d674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d676:	4606      	mov	r6, r0
 800d678:	460f      	mov	r7, r1
 800d67a:	bb23      	cbnz	r3, 800d6c6 <_strtod_l+0xb66>
 800d67c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d680:	9010      	str	r0, [sp, #64]	; 0x40
 800d682:	9311      	str	r3, [sp, #68]	; 0x44
 800d684:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d688:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d68c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d68e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d690:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d694:	1a9b      	subs	r3, r3, r2
 800d696:	930f      	str	r3, [sp, #60]	; 0x3c
 800d698:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d69c:	eeb0 0a48 	vmov.f32	s0, s16
 800d6a0:	eef0 0a68 	vmov.f32	s1, s17
 800d6a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d6a8:	f7ff f8fc 	bl	800c8a4 <__ulp>
 800d6ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d6b0:	ec53 2b10 	vmov	r2, r3, d0
 800d6b4:	f7f2 ffa0 	bl	80005f8 <__aeabi_dmul>
 800d6b8:	ec53 2b18 	vmov	r2, r3, d8
 800d6bc:	f7f2 fde6 	bl	800028c <__adddf3>
 800d6c0:	4680      	mov	r8, r0
 800d6c2:	4689      	mov	r9, r1
 800d6c4:	e78d      	b.n	800d5e2 <_strtod_l+0xa82>
 800d6c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d6ca:	e7db      	b.n	800d684 <_strtod_l+0xb24>
 800d6cc:	a314      	add	r3, pc, #80	; (adr r3, 800d720 <_strtod_l+0xbc0>)
 800d6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d2:	f7f3 fa03 	bl	8000adc <__aeabi_dcmplt>
 800d6d6:	e7b3      	b.n	800d640 <_strtod_l+0xae0>
 800d6d8:	2300      	movs	r3, #0
 800d6da:	930a      	str	r3, [sp, #40]	; 0x28
 800d6dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6e0:	6013      	str	r3, [r2, #0]
 800d6e2:	f7ff ba7c 	b.w	800cbde <_strtod_l+0x7e>
 800d6e6:	2a65      	cmp	r2, #101	; 0x65
 800d6e8:	f43f ab75 	beq.w	800cdd6 <_strtod_l+0x276>
 800d6ec:	2a45      	cmp	r2, #69	; 0x45
 800d6ee:	f43f ab72 	beq.w	800cdd6 <_strtod_l+0x276>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	f7ff bbaa 	b.w	800ce4c <_strtod_l+0x2ec>
 800d6f8:	00000000 	.word	0x00000000
 800d6fc:	bff00000 	.word	0xbff00000
 800d700:	00000000 	.word	0x00000000
 800d704:	3ff00000 	.word	0x3ff00000
 800d708:	94a03595 	.word	0x94a03595
 800d70c:	3fdfffff 	.word	0x3fdfffff
 800d710:	35afe535 	.word	0x35afe535
 800d714:	3fe00000 	.word	0x3fe00000
 800d718:	ffc00000 	.word	0xffc00000
 800d71c:	41dfffff 	.word	0x41dfffff
 800d720:	94a03595 	.word	0x94a03595
 800d724:	3fcfffff 	.word	0x3fcfffff
 800d728:	3ff00000 	.word	0x3ff00000
 800d72c:	3fe00000 	.word	0x3fe00000
 800d730:	7ff00000 	.word	0x7ff00000
 800d734:	7fe00000 	.word	0x7fe00000
 800d738:	7c9fffff 	.word	0x7c9fffff
 800d73c:	7fefffff 	.word	0x7fefffff

0800d740 <_strtod_r>:
 800d740:	4b01      	ldr	r3, [pc, #4]	; (800d748 <_strtod_r+0x8>)
 800d742:	f7ff ba0d 	b.w	800cb60 <_strtod_l>
 800d746:	bf00      	nop
 800d748:	20000068 	.word	0x20000068

0800d74c <_strtol_l.constprop.0>:
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d752:	d001      	beq.n	800d758 <_strtol_l.constprop.0+0xc>
 800d754:	2b24      	cmp	r3, #36	; 0x24
 800d756:	d906      	bls.n	800d766 <_strtol_l.constprop.0+0x1a>
 800d758:	f7fd fe2e 	bl	800b3b8 <__errno>
 800d75c:	2316      	movs	r3, #22
 800d75e:	6003      	str	r3, [r0, #0]
 800d760:	2000      	movs	r0, #0
 800d762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d766:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d84c <_strtol_l.constprop.0+0x100>
 800d76a:	460d      	mov	r5, r1
 800d76c:	462e      	mov	r6, r5
 800d76e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d772:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d776:	f017 0708 	ands.w	r7, r7, #8
 800d77a:	d1f7      	bne.n	800d76c <_strtol_l.constprop.0+0x20>
 800d77c:	2c2d      	cmp	r4, #45	; 0x2d
 800d77e:	d132      	bne.n	800d7e6 <_strtol_l.constprop.0+0x9a>
 800d780:	782c      	ldrb	r4, [r5, #0]
 800d782:	2701      	movs	r7, #1
 800d784:	1cb5      	adds	r5, r6, #2
 800d786:	2b00      	cmp	r3, #0
 800d788:	d05b      	beq.n	800d842 <_strtol_l.constprop.0+0xf6>
 800d78a:	2b10      	cmp	r3, #16
 800d78c:	d109      	bne.n	800d7a2 <_strtol_l.constprop.0+0x56>
 800d78e:	2c30      	cmp	r4, #48	; 0x30
 800d790:	d107      	bne.n	800d7a2 <_strtol_l.constprop.0+0x56>
 800d792:	782c      	ldrb	r4, [r5, #0]
 800d794:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d798:	2c58      	cmp	r4, #88	; 0x58
 800d79a:	d14d      	bne.n	800d838 <_strtol_l.constprop.0+0xec>
 800d79c:	786c      	ldrb	r4, [r5, #1]
 800d79e:	2310      	movs	r3, #16
 800d7a0:	3502      	adds	r5, #2
 800d7a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d7a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800d7aa:	f04f 0e00 	mov.w	lr, #0
 800d7ae:	fbb8 f9f3 	udiv	r9, r8, r3
 800d7b2:	4676      	mov	r6, lr
 800d7b4:	fb03 8a19 	mls	sl, r3, r9, r8
 800d7b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d7bc:	f1bc 0f09 	cmp.w	ip, #9
 800d7c0:	d816      	bhi.n	800d7f0 <_strtol_l.constprop.0+0xa4>
 800d7c2:	4664      	mov	r4, ip
 800d7c4:	42a3      	cmp	r3, r4
 800d7c6:	dd24      	ble.n	800d812 <_strtol_l.constprop.0+0xc6>
 800d7c8:	f1be 3fff 	cmp.w	lr, #4294967295
 800d7cc:	d008      	beq.n	800d7e0 <_strtol_l.constprop.0+0x94>
 800d7ce:	45b1      	cmp	r9, r6
 800d7d0:	d31c      	bcc.n	800d80c <_strtol_l.constprop.0+0xc0>
 800d7d2:	d101      	bne.n	800d7d8 <_strtol_l.constprop.0+0x8c>
 800d7d4:	45a2      	cmp	sl, r4
 800d7d6:	db19      	blt.n	800d80c <_strtol_l.constprop.0+0xc0>
 800d7d8:	fb06 4603 	mla	r6, r6, r3, r4
 800d7dc:	f04f 0e01 	mov.w	lr, #1
 800d7e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7e4:	e7e8      	b.n	800d7b8 <_strtol_l.constprop.0+0x6c>
 800d7e6:	2c2b      	cmp	r4, #43	; 0x2b
 800d7e8:	bf04      	itt	eq
 800d7ea:	782c      	ldrbeq	r4, [r5, #0]
 800d7ec:	1cb5      	addeq	r5, r6, #2
 800d7ee:	e7ca      	b.n	800d786 <_strtol_l.constprop.0+0x3a>
 800d7f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d7f4:	f1bc 0f19 	cmp.w	ip, #25
 800d7f8:	d801      	bhi.n	800d7fe <_strtol_l.constprop.0+0xb2>
 800d7fa:	3c37      	subs	r4, #55	; 0x37
 800d7fc:	e7e2      	b.n	800d7c4 <_strtol_l.constprop.0+0x78>
 800d7fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d802:	f1bc 0f19 	cmp.w	ip, #25
 800d806:	d804      	bhi.n	800d812 <_strtol_l.constprop.0+0xc6>
 800d808:	3c57      	subs	r4, #87	; 0x57
 800d80a:	e7db      	b.n	800d7c4 <_strtol_l.constprop.0+0x78>
 800d80c:	f04f 3eff 	mov.w	lr, #4294967295
 800d810:	e7e6      	b.n	800d7e0 <_strtol_l.constprop.0+0x94>
 800d812:	f1be 3fff 	cmp.w	lr, #4294967295
 800d816:	d105      	bne.n	800d824 <_strtol_l.constprop.0+0xd8>
 800d818:	2322      	movs	r3, #34	; 0x22
 800d81a:	6003      	str	r3, [r0, #0]
 800d81c:	4646      	mov	r6, r8
 800d81e:	b942      	cbnz	r2, 800d832 <_strtol_l.constprop.0+0xe6>
 800d820:	4630      	mov	r0, r6
 800d822:	e79e      	b.n	800d762 <_strtol_l.constprop.0+0x16>
 800d824:	b107      	cbz	r7, 800d828 <_strtol_l.constprop.0+0xdc>
 800d826:	4276      	negs	r6, r6
 800d828:	2a00      	cmp	r2, #0
 800d82a:	d0f9      	beq.n	800d820 <_strtol_l.constprop.0+0xd4>
 800d82c:	f1be 0f00 	cmp.w	lr, #0
 800d830:	d000      	beq.n	800d834 <_strtol_l.constprop.0+0xe8>
 800d832:	1e69      	subs	r1, r5, #1
 800d834:	6011      	str	r1, [r2, #0]
 800d836:	e7f3      	b.n	800d820 <_strtol_l.constprop.0+0xd4>
 800d838:	2430      	movs	r4, #48	; 0x30
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1b1      	bne.n	800d7a2 <_strtol_l.constprop.0+0x56>
 800d83e:	2308      	movs	r3, #8
 800d840:	e7af      	b.n	800d7a2 <_strtol_l.constprop.0+0x56>
 800d842:	2c30      	cmp	r4, #48	; 0x30
 800d844:	d0a5      	beq.n	800d792 <_strtol_l.constprop.0+0x46>
 800d846:	230a      	movs	r3, #10
 800d848:	e7ab      	b.n	800d7a2 <_strtol_l.constprop.0+0x56>
 800d84a:	bf00      	nop
 800d84c:	08011ee1 	.word	0x08011ee1

0800d850 <_strtol_r>:
 800d850:	f7ff bf7c 	b.w	800d74c <_strtol_l.constprop.0>

0800d854 <__ssputs_r>:
 800d854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d858:	688e      	ldr	r6, [r1, #8]
 800d85a:	461f      	mov	r7, r3
 800d85c:	42be      	cmp	r6, r7
 800d85e:	680b      	ldr	r3, [r1, #0]
 800d860:	4682      	mov	sl, r0
 800d862:	460c      	mov	r4, r1
 800d864:	4690      	mov	r8, r2
 800d866:	d82c      	bhi.n	800d8c2 <__ssputs_r+0x6e>
 800d868:	898a      	ldrh	r2, [r1, #12]
 800d86a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d86e:	d026      	beq.n	800d8be <__ssputs_r+0x6a>
 800d870:	6965      	ldr	r5, [r4, #20]
 800d872:	6909      	ldr	r1, [r1, #16]
 800d874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d878:	eba3 0901 	sub.w	r9, r3, r1
 800d87c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d880:	1c7b      	adds	r3, r7, #1
 800d882:	444b      	add	r3, r9
 800d884:	106d      	asrs	r5, r5, #1
 800d886:	429d      	cmp	r5, r3
 800d888:	bf38      	it	cc
 800d88a:	461d      	movcc	r5, r3
 800d88c:	0553      	lsls	r3, r2, #21
 800d88e:	d527      	bpl.n	800d8e0 <__ssputs_r+0x8c>
 800d890:	4629      	mov	r1, r5
 800d892:	f7fc fd07 	bl	800a2a4 <_malloc_r>
 800d896:	4606      	mov	r6, r0
 800d898:	b360      	cbz	r0, 800d8f4 <__ssputs_r+0xa0>
 800d89a:	6921      	ldr	r1, [r4, #16]
 800d89c:	464a      	mov	r2, r9
 800d89e:	f7fd fdb8 	bl	800b412 <memcpy>
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8ac:	81a3      	strh	r3, [r4, #12]
 800d8ae:	6126      	str	r6, [r4, #16]
 800d8b0:	6165      	str	r5, [r4, #20]
 800d8b2:	444e      	add	r6, r9
 800d8b4:	eba5 0509 	sub.w	r5, r5, r9
 800d8b8:	6026      	str	r6, [r4, #0]
 800d8ba:	60a5      	str	r5, [r4, #8]
 800d8bc:	463e      	mov	r6, r7
 800d8be:	42be      	cmp	r6, r7
 800d8c0:	d900      	bls.n	800d8c4 <__ssputs_r+0x70>
 800d8c2:	463e      	mov	r6, r7
 800d8c4:	6820      	ldr	r0, [r4, #0]
 800d8c6:	4632      	mov	r2, r6
 800d8c8:	4641      	mov	r1, r8
 800d8ca:	f000 f9c9 	bl	800dc60 <memmove>
 800d8ce:	68a3      	ldr	r3, [r4, #8]
 800d8d0:	1b9b      	subs	r3, r3, r6
 800d8d2:	60a3      	str	r3, [r4, #8]
 800d8d4:	6823      	ldr	r3, [r4, #0]
 800d8d6:	4433      	add	r3, r6
 800d8d8:	6023      	str	r3, [r4, #0]
 800d8da:	2000      	movs	r0, #0
 800d8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e0:	462a      	mov	r2, r5
 800d8e2:	f000 fd8e 	bl	800e402 <_realloc_r>
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d1e0      	bne.n	800d8ae <__ssputs_r+0x5a>
 800d8ec:	6921      	ldr	r1, [r4, #16]
 800d8ee:	4650      	mov	r0, sl
 800d8f0:	f7fe fc20 	bl	800c134 <_free_r>
 800d8f4:	230c      	movs	r3, #12
 800d8f6:	f8ca 3000 	str.w	r3, [sl]
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d900:	81a3      	strh	r3, [r4, #12]
 800d902:	f04f 30ff 	mov.w	r0, #4294967295
 800d906:	e7e9      	b.n	800d8dc <__ssputs_r+0x88>

0800d908 <_svfiprintf_r>:
 800d908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d90c:	4698      	mov	r8, r3
 800d90e:	898b      	ldrh	r3, [r1, #12]
 800d910:	061b      	lsls	r3, r3, #24
 800d912:	b09d      	sub	sp, #116	; 0x74
 800d914:	4607      	mov	r7, r0
 800d916:	460d      	mov	r5, r1
 800d918:	4614      	mov	r4, r2
 800d91a:	d50e      	bpl.n	800d93a <_svfiprintf_r+0x32>
 800d91c:	690b      	ldr	r3, [r1, #16]
 800d91e:	b963      	cbnz	r3, 800d93a <_svfiprintf_r+0x32>
 800d920:	2140      	movs	r1, #64	; 0x40
 800d922:	f7fc fcbf 	bl	800a2a4 <_malloc_r>
 800d926:	6028      	str	r0, [r5, #0]
 800d928:	6128      	str	r0, [r5, #16]
 800d92a:	b920      	cbnz	r0, 800d936 <_svfiprintf_r+0x2e>
 800d92c:	230c      	movs	r3, #12
 800d92e:	603b      	str	r3, [r7, #0]
 800d930:	f04f 30ff 	mov.w	r0, #4294967295
 800d934:	e0d0      	b.n	800dad8 <_svfiprintf_r+0x1d0>
 800d936:	2340      	movs	r3, #64	; 0x40
 800d938:	616b      	str	r3, [r5, #20]
 800d93a:	2300      	movs	r3, #0
 800d93c:	9309      	str	r3, [sp, #36]	; 0x24
 800d93e:	2320      	movs	r3, #32
 800d940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d944:	f8cd 800c 	str.w	r8, [sp, #12]
 800d948:	2330      	movs	r3, #48	; 0x30
 800d94a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800daf0 <_svfiprintf_r+0x1e8>
 800d94e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d952:	f04f 0901 	mov.w	r9, #1
 800d956:	4623      	mov	r3, r4
 800d958:	469a      	mov	sl, r3
 800d95a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d95e:	b10a      	cbz	r2, 800d964 <_svfiprintf_r+0x5c>
 800d960:	2a25      	cmp	r2, #37	; 0x25
 800d962:	d1f9      	bne.n	800d958 <_svfiprintf_r+0x50>
 800d964:	ebba 0b04 	subs.w	fp, sl, r4
 800d968:	d00b      	beq.n	800d982 <_svfiprintf_r+0x7a>
 800d96a:	465b      	mov	r3, fp
 800d96c:	4622      	mov	r2, r4
 800d96e:	4629      	mov	r1, r5
 800d970:	4638      	mov	r0, r7
 800d972:	f7ff ff6f 	bl	800d854 <__ssputs_r>
 800d976:	3001      	adds	r0, #1
 800d978:	f000 80a9 	beq.w	800dace <_svfiprintf_r+0x1c6>
 800d97c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d97e:	445a      	add	r2, fp
 800d980:	9209      	str	r2, [sp, #36]	; 0x24
 800d982:	f89a 3000 	ldrb.w	r3, [sl]
 800d986:	2b00      	cmp	r3, #0
 800d988:	f000 80a1 	beq.w	800dace <_svfiprintf_r+0x1c6>
 800d98c:	2300      	movs	r3, #0
 800d98e:	f04f 32ff 	mov.w	r2, #4294967295
 800d992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d996:	f10a 0a01 	add.w	sl, sl, #1
 800d99a:	9304      	str	r3, [sp, #16]
 800d99c:	9307      	str	r3, [sp, #28]
 800d99e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9a2:	931a      	str	r3, [sp, #104]	; 0x68
 800d9a4:	4654      	mov	r4, sl
 800d9a6:	2205      	movs	r2, #5
 800d9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ac:	4850      	ldr	r0, [pc, #320]	; (800daf0 <_svfiprintf_r+0x1e8>)
 800d9ae:	f7f2 fc0f 	bl	80001d0 <memchr>
 800d9b2:	9a04      	ldr	r2, [sp, #16]
 800d9b4:	b9d8      	cbnz	r0, 800d9ee <_svfiprintf_r+0xe6>
 800d9b6:	06d0      	lsls	r0, r2, #27
 800d9b8:	bf44      	itt	mi
 800d9ba:	2320      	movmi	r3, #32
 800d9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9c0:	0711      	lsls	r1, r2, #28
 800d9c2:	bf44      	itt	mi
 800d9c4:	232b      	movmi	r3, #43	; 0x2b
 800d9c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d9d0:	d015      	beq.n	800d9fe <_svfiprintf_r+0xf6>
 800d9d2:	9a07      	ldr	r2, [sp, #28]
 800d9d4:	4654      	mov	r4, sl
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	f04f 0c0a 	mov.w	ip, #10
 800d9dc:	4621      	mov	r1, r4
 800d9de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9e2:	3b30      	subs	r3, #48	; 0x30
 800d9e4:	2b09      	cmp	r3, #9
 800d9e6:	d94d      	bls.n	800da84 <_svfiprintf_r+0x17c>
 800d9e8:	b1b0      	cbz	r0, 800da18 <_svfiprintf_r+0x110>
 800d9ea:	9207      	str	r2, [sp, #28]
 800d9ec:	e014      	b.n	800da18 <_svfiprintf_r+0x110>
 800d9ee:	eba0 0308 	sub.w	r3, r0, r8
 800d9f2:	fa09 f303 	lsl.w	r3, r9, r3
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	9304      	str	r3, [sp, #16]
 800d9fa:	46a2      	mov	sl, r4
 800d9fc:	e7d2      	b.n	800d9a4 <_svfiprintf_r+0x9c>
 800d9fe:	9b03      	ldr	r3, [sp, #12]
 800da00:	1d19      	adds	r1, r3, #4
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	9103      	str	r1, [sp, #12]
 800da06:	2b00      	cmp	r3, #0
 800da08:	bfbb      	ittet	lt
 800da0a:	425b      	neglt	r3, r3
 800da0c:	f042 0202 	orrlt.w	r2, r2, #2
 800da10:	9307      	strge	r3, [sp, #28]
 800da12:	9307      	strlt	r3, [sp, #28]
 800da14:	bfb8      	it	lt
 800da16:	9204      	strlt	r2, [sp, #16]
 800da18:	7823      	ldrb	r3, [r4, #0]
 800da1a:	2b2e      	cmp	r3, #46	; 0x2e
 800da1c:	d10c      	bne.n	800da38 <_svfiprintf_r+0x130>
 800da1e:	7863      	ldrb	r3, [r4, #1]
 800da20:	2b2a      	cmp	r3, #42	; 0x2a
 800da22:	d134      	bne.n	800da8e <_svfiprintf_r+0x186>
 800da24:	9b03      	ldr	r3, [sp, #12]
 800da26:	1d1a      	adds	r2, r3, #4
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	9203      	str	r2, [sp, #12]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	bfb8      	it	lt
 800da30:	f04f 33ff 	movlt.w	r3, #4294967295
 800da34:	3402      	adds	r4, #2
 800da36:	9305      	str	r3, [sp, #20]
 800da38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800db00 <_svfiprintf_r+0x1f8>
 800da3c:	7821      	ldrb	r1, [r4, #0]
 800da3e:	2203      	movs	r2, #3
 800da40:	4650      	mov	r0, sl
 800da42:	f7f2 fbc5 	bl	80001d0 <memchr>
 800da46:	b138      	cbz	r0, 800da58 <_svfiprintf_r+0x150>
 800da48:	9b04      	ldr	r3, [sp, #16]
 800da4a:	eba0 000a 	sub.w	r0, r0, sl
 800da4e:	2240      	movs	r2, #64	; 0x40
 800da50:	4082      	lsls	r2, r0
 800da52:	4313      	orrs	r3, r2
 800da54:	3401      	adds	r4, #1
 800da56:	9304      	str	r3, [sp, #16]
 800da58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da5c:	4825      	ldr	r0, [pc, #148]	; (800daf4 <_svfiprintf_r+0x1ec>)
 800da5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da62:	2206      	movs	r2, #6
 800da64:	f7f2 fbb4 	bl	80001d0 <memchr>
 800da68:	2800      	cmp	r0, #0
 800da6a:	d038      	beq.n	800dade <_svfiprintf_r+0x1d6>
 800da6c:	4b22      	ldr	r3, [pc, #136]	; (800daf8 <_svfiprintf_r+0x1f0>)
 800da6e:	bb1b      	cbnz	r3, 800dab8 <_svfiprintf_r+0x1b0>
 800da70:	9b03      	ldr	r3, [sp, #12]
 800da72:	3307      	adds	r3, #7
 800da74:	f023 0307 	bic.w	r3, r3, #7
 800da78:	3308      	adds	r3, #8
 800da7a:	9303      	str	r3, [sp, #12]
 800da7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da7e:	4433      	add	r3, r6
 800da80:	9309      	str	r3, [sp, #36]	; 0x24
 800da82:	e768      	b.n	800d956 <_svfiprintf_r+0x4e>
 800da84:	fb0c 3202 	mla	r2, ip, r2, r3
 800da88:	460c      	mov	r4, r1
 800da8a:	2001      	movs	r0, #1
 800da8c:	e7a6      	b.n	800d9dc <_svfiprintf_r+0xd4>
 800da8e:	2300      	movs	r3, #0
 800da90:	3401      	adds	r4, #1
 800da92:	9305      	str	r3, [sp, #20]
 800da94:	4619      	mov	r1, r3
 800da96:	f04f 0c0a 	mov.w	ip, #10
 800da9a:	4620      	mov	r0, r4
 800da9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daa0:	3a30      	subs	r2, #48	; 0x30
 800daa2:	2a09      	cmp	r2, #9
 800daa4:	d903      	bls.n	800daae <_svfiprintf_r+0x1a6>
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d0c6      	beq.n	800da38 <_svfiprintf_r+0x130>
 800daaa:	9105      	str	r1, [sp, #20]
 800daac:	e7c4      	b.n	800da38 <_svfiprintf_r+0x130>
 800daae:	fb0c 2101 	mla	r1, ip, r1, r2
 800dab2:	4604      	mov	r4, r0
 800dab4:	2301      	movs	r3, #1
 800dab6:	e7f0      	b.n	800da9a <_svfiprintf_r+0x192>
 800dab8:	ab03      	add	r3, sp, #12
 800daba:	9300      	str	r3, [sp, #0]
 800dabc:	462a      	mov	r2, r5
 800dabe:	4b0f      	ldr	r3, [pc, #60]	; (800dafc <_svfiprintf_r+0x1f4>)
 800dac0:	a904      	add	r1, sp, #16
 800dac2:	4638      	mov	r0, r7
 800dac4:	f7fc fd1a 	bl	800a4fc <_printf_float>
 800dac8:	1c42      	adds	r2, r0, #1
 800daca:	4606      	mov	r6, r0
 800dacc:	d1d6      	bne.n	800da7c <_svfiprintf_r+0x174>
 800dace:	89ab      	ldrh	r3, [r5, #12]
 800dad0:	065b      	lsls	r3, r3, #25
 800dad2:	f53f af2d 	bmi.w	800d930 <_svfiprintf_r+0x28>
 800dad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dad8:	b01d      	add	sp, #116	; 0x74
 800dada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dade:	ab03      	add	r3, sp, #12
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	462a      	mov	r2, r5
 800dae4:	4b05      	ldr	r3, [pc, #20]	; (800dafc <_svfiprintf_r+0x1f4>)
 800dae6:	a904      	add	r1, sp, #16
 800dae8:	4638      	mov	r0, r7
 800daea:	f7fc ffab 	bl	800aa44 <_printf_i>
 800daee:	e7eb      	b.n	800dac8 <_svfiprintf_r+0x1c0>
 800daf0:	08011fe1 	.word	0x08011fe1
 800daf4:	08011feb 	.word	0x08011feb
 800daf8:	0800a4fd 	.word	0x0800a4fd
 800dafc:	0800d855 	.word	0x0800d855
 800db00:	08011fe7 	.word	0x08011fe7

0800db04 <__sflush_r>:
 800db04:	898a      	ldrh	r2, [r1, #12]
 800db06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db0a:	4605      	mov	r5, r0
 800db0c:	0710      	lsls	r0, r2, #28
 800db0e:	460c      	mov	r4, r1
 800db10:	d458      	bmi.n	800dbc4 <__sflush_r+0xc0>
 800db12:	684b      	ldr	r3, [r1, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	dc05      	bgt.n	800db24 <__sflush_r+0x20>
 800db18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	dc02      	bgt.n	800db24 <__sflush_r+0x20>
 800db1e:	2000      	movs	r0, #0
 800db20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db26:	2e00      	cmp	r6, #0
 800db28:	d0f9      	beq.n	800db1e <__sflush_r+0x1a>
 800db2a:	2300      	movs	r3, #0
 800db2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db30:	682f      	ldr	r7, [r5, #0]
 800db32:	6a21      	ldr	r1, [r4, #32]
 800db34:	602b      	str	r3, [r5, #0]
 800db36:	d032      	beq.n	800db9e <__sflush_r+0x9a>
 800db38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db3a:	89a3      	ldrh	r3, [r4, #12]
 800db3c:	075a      	lsls	r2, r3, #29
 800db3e:	d505      	bpl.n	800db4c <__sflush_r+0x48>
 800db40:	6863      	ldr	r3, [r4, #4]
 800db42:	1ac0      	subs	r0, r0, r3
 800db44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db46:	b10b      	cbz	r3, 800db4c <__sflush_r+0x48>
 800db48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db4a:	1ac0      	subs	r0, r0, r3
 800db4c:	2300      	movs	r3, #0
 800db4e:	4602      	mov	r2, r0
 800db50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db52:	6a21      	ldr	r1, [r4, #32]
 800db54:	4628      	mov	r0, r5
 800db56:	47b0      	blx	r6
 800db58:	1c43      	adds	r3, r0, #1
 800db5a:	89a3      	ldrh	r3, [r4, #12]
 800db5c:	d106      	bne.n	800db6c <__sflush_r+0x68>
 800db5e:	6829      	ldr	r1, [r5, #0]
 800db60:	291d      	cmp	r1, #29
 800db62:	d82b      	bhi.n	800dbbc <__sflush_r+0xb8>
 800db64:	4a29      	ldr	r2, [pc, #164]	; (800dc0c <__sflush_r+0x108>)
 800db66:	410a      	asrs	r2, r1
 800db68:	07d6      	lsls	r6, r2, #31
 800db6a:	d427      	bmi.n	800dbbc <__sflush_r+0xb8>
 800db6c:	2200      	movs	r2, #0
 800db6e:	6062      	str	r2, [r4, #4]
 800db70:	04d9      	lsls	r1, r3, #19
 800db72:	6922      	ldr	r2, [r4, #16]
 800db74:	6022      	str	r2, [r4, #0]
 800db76:	d504      	bpl.n	800db82 <__sflush_r+0x7e>
 800db78:	1c42      	adds	r2, r0, #1
 800db7a:	d101      	bne.n	800db80 <__sflush_r+0x7c>
 800db7c:	682b      	ldr	r3, [r5, #0]
 800db7e:	b903      	cbnz	r3, 800db82 <__sflush_r+0x7e>
 800db80:	6560      	str	r0, [r4, #84]	; 0x54
 800db82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db84:	602f      	str	r7, [r5, #0]
 800db86:	2900      	cmp	r1, #0
 800db88:	d0c9      	beq.n	800db1e <__sflush_r+0x1a>
 800db8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db8e:	4299      	cmp	r1, r3
 800db90:	d002      	beq.n	800db98 <__sflush_r+0x94>
 800db92:	4628      	mov	r0, r5
 800db94:	f7fe face 	bl	800c134 <_free_r>
 800db98:	2000      	movs	r0, #0
 800db9a:	6360      	str	r0, [r4, #52]	; 0x34
 800db9c:	e7c0      	b.n	800db20 <__sflush_r+0x1c>
 800db9e:	2301      	movs	r3, #1
 800dba0:	4628      	mov	r0, r5
 800dba2:	47b0      	blx	r6
 800dba4:	1c41      	adds	r1, r0, #1
 800dba6:	d1c8      	bne.n	800db3a <__sflush_r+0x36>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d0c5      	beq.n	800db3a <__sflush_r+0x36>
 800dbae:	2b1d      	cmp	r3, #29
 800dbb0:	d001      	beq.n	800dbb6 <__sflush_r+0xb2>
 800dbb2:	2b16      	cmp	r3, #22
 800dbb4:	d101      	bne.n	800dbba <__sflush_r+0xb6>
 800dbb6:	602f      	str	r7, [r5, #0]
 800dbb8:	e7b1      	b.n	800db1e <__sflush_r+0x1a>
 800dbba:	89a3      	ldrh	r3, [r4, #12]
 800dbbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbc0:	81a3      	strh	r3, [r4, #12]
 800dbc2:	e7ad      	b.n	800db20 <__sflush_r+0x1c>
 800dbc4:	690f      	ldr	r7, [r1, #16]
 800dbc6:	2f00      	cmp	r7, #0
 800dbc8:	d0a9      	beq.n	800db1e <__sflush_r+0x1a>
 800dbca:	0793      	lsls	r3, r2, #30
 800dbcc:	680e      	ldr	r6, [r1, #0]
 800dbce:	bf08      	it	eq
 800dbd0:	694b      	ldreq	r3, [r1, #20]
 800dbd2:	600f      	str	r7, [r1, #0]
 800dbd4:	bf18      	it	ne
 800dbd6:	2300      	movne	r3, #0
 800dbd8:	eba6 0807 	sub.w	r8, r6, r7
 800dbdc:	608b      	str	r3, [r1, #8]
 800dbde:	f1b8 0f00 	cmp.w	r8, #0
 800dbe2:	dd9c      	ble.n	800db1e <__sflush_r+0x1a>
 800dbe4:	6a21      	ldr	r1, [r4, #32]
 800dbe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dbe8:	4643      	mov	r3, r8
 800dbea:	463a      	mov	r2, r7
 800dbec:	4628      	mov	r0, r5
 800dbee:	47b0      	blx	r6
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	dc06      	bgt.n	800dc02 <__sflush_r+0xfe>
 800dbf4:	89a3      	ldrh	r3, [r4, #12]
 800dbf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbfa:	81a3      	strh	r3, [r4, #12]
 800dbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800dc00:	e78e      	b.n	800db20 <__sflush_r+0x1c>
 800dc02:	4407      	add	r7, r0
 800dc04:	eba8 0800 	sub.w	r8, r8, r0
 800dc08:	e7e9      	b.n	800dbde <__sflush_r+0xda>
 800dc0a:	bf00      	nop
 800dc0c:	dfbffffe 	.word	0xdfbffffe

0800dc10 <_fflush_r>:
 800dc10:	b538      	push	{r3, r4, r5, lr}
 800dc12:	690b      	ldr	r3, [r1, #16]
 800dc14:	4605      	mov	r5, r0
 800dc16:	460c      	mov	r4, r1
 800dc18:	b913      	cbnz	r3, 800dc20 <_fflush_r+0x10>
 800dc1a:	2500      	movs	r5, #0
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	b118      	cbz	r0, 800dc2a <_fflush_r+0x1a>
 800dc22:	6a03      	ldr	r3, [r0, #32]
 800dc24:	b90b      	cbnz	r3, 800dc2a <_fflush_r+0x1a>
 800dc26:	f7fd facb 	bl	800b1c0 <__sinit>
 800dc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d0f3      	beq.n	800dc1a <_fflush_r+0xa>
 800dc32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc34:	07d0      	lsls	r0, r2, #31
 800dc36:	d404      	bmi.n	800dc42 <_fflush_r+0x32>
 800dc38:	0599      	lsls	r1, r3, #22
 800dc3a:	d402      	bmi.n	800dc42 <_fflush_r+0x32>
 800dc3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc3e:	f7fd fbe6 	bl	800b40e <__retarget_lock_acquire_recursive>
 800dc42:	4628      	mov	r0, r5
 800dc44:	4621      	mov	r1, r4
 800dc46:	f7ff ff5d 	bl	800db04 <__sflush_r>
 800dc4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc4c:	07da      	lsls	r2, r3, #31
 800dc4e:	4605      	mov	r5, r0
 800dc50:	d4e4      	bmi.n	800dc1c <_fflush_r+0xc>
 800dc52:	89a3      	ldrh	r3, [r4, #12]
 800dc54:	059b      	lsls	r3, r3, #22
 800dc56:	d4e1      	bmi.n	800dc1c <_fflush_r+0xc>
 800dc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc5a:	f7fd fbd9 	bl	800b410 <__retarget_lock_release_recursive>
 800dc5e:	e7dd      	b.n	800dc1c <_fflush_r+0xc>

0800dc60 <memmove>:
 800dc60:	4288      	cmp	r0, r1
 800dc62:	b510      	push	{r4, lr}
 800dc64:	eb01 0402 	add.w	r4, r1, r2
 800dc68:	d902      	bls.n	800dc70 <memmove+0x10>
 800dc6a:	4284      	cmp	r4, r0
 800dc6c:	4623      	mov	r3, r4
 800dc6e:	d807      	bhi.n	800dc80 <memmove+0x20>
 800dc70:	1e43      	subs	r3, r0, #1
 800dc72:	42a1      	cmp	r1, r4
 800dc74:	d008      	beq.n	800dc88 <memmove+0x28>
 800dc76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc7e:	e7f8      	b.n	800dc72 <memmove+0x12>
 800dc80:	4402      	add	r2, r0
 800dc82:	4601      	mov	r1, r0
 800dc84:	428a      	cmp	r2, r1
 800dc86:	d100      	bne.n	800dc8a <memmove+0x2a>
 800dc88:	bd10      	pop	{r4, pc}
 800dc8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc92:	e7f7      	b.n	800dc84 <memmove+0x24>

0800dc94 <strncmp>:
 800dc94:	b510      	push	{r4, lr}
 800dc96:	b16a      	cbz	r2, 800dcb4 <strncmp+0x20>
 800dc98:	3901      	subs	r1, #1
 800dc9a:	1884      	adds	r4, r0, r2
 800dc9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dca0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d103      	bne.n	800dcb0 <strncmp+0x1c>
 800dca8:	42a0      	cmp	r0, r4
 800dcaa:	d001      	beq.n	800dcb0 <strncmp+0x1c>
 800dcac:	2a00      	cmp	r2, #0
 800dcae:	d1f5      	bne.n	800dc9c <strncmp+0x8>
 800dcb0:	1ad0      	subs	r0, r2, r3
 800dcb2:	bd10      	pop	{r4, pc}
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	e7fc      	b.n	800dcb2 <strncmp+0x1e>

0800dcb8 <nan>:
 800dcb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dcc0 <nan+0x8>
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	00000000 	.word	0x00000000
 800dcc4:	7ff80000 	.word	0x7ff80000

0800dcc8 <__assert_func>:
 800dcc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcca:	4614      	mov	r4, r2
 800dccc:	461a      	mov	r2, r3
 800dcce:	4b09      	ldr	r3, [pc, #36]	; (800dcf4 <__assert_func+0x2c>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	68d8      	ldr	r0, [r3, #12]
 800dcd6:	b14c      	cbz	r4, 800dcec <__assert_func+0x24>
 800dcd8:	4b07      	ldr	r3, [pc, #28]	; (800dcf8 <__assert_func+0x30>)
 800dcda:	9100      	str	r1, [sp, #0]
 800dcdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dce0:	4906      	ldr	r1, [pc, #24]	; (800dcfc <__assert_func+0x34>)
 800dce2:	462b      	mov	r3, r5
 800dce4:	f000 fbca 	bl	800e47c <fiprintf>
 800dce8:	f000 fbda 	bl	800e4a0 <abort>
 800dcec:	4b04      	ldr	r3, [pc, #16]	; (800dd00 <__assert_func+0x38>)
 800dcee:	461c      	mov	r4, r3
 800dcf0:	e7f3      	b.n	800dcda <__assert_func+0x12>
 800dcf2:	bf00      	nop
 800dcf4:	20000064 	.word	0x20000064
 800dcf8:	08011ffa 	.word	0x08011ffa
 800dcfc:	08012007 	.word	0x08012007
 800dd00:	08012035 	.word	0x08012035

0800dd04 <_calloc_r>:
 800dd04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd06:	fba1 2402 	umull	r2, r4, r1, r2
 800dd0a:	b94c      	cbnz	r4, 800dd20 <_calloc_r+0x1c>
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	9201      	str	r2, [sp, #4]
 800dd10:	f7fc fac8 	bl	800a2a4 <_malloc_r>
 800dd14:	9a01      	ldr	r2, [sp, #4]
 800dd16:	4605      	mov	r5, r0
 800dd18:	b930      	cbnz	r0, 800dd28 <_calloc_r+0x24>
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	b003      	add	sp, #12
 800dd1e:	bd30      	pop	{r4, r5, pc}
 800dd20:	220c      	movs	r2, #12
 800dd22:	6002      	str	r2, [r0, #0]
 800dd24:	2500      	movs	r5, #0
 800dd26:	e7f8      	b.n	800dd1a <_calloc_r+0x16>
 800dd28:	4621      	mov	r1, r4
 800dd2a:	f7fd fae2 	bl	800b2f2 <memset>
 800dd2e:	e7f4      	b.n	800dd1a <_calloc_r+0x16>

0800dd30 <rshift>:
 800dd30:	6903      	ldr	r3, [r0, #16]
 800dd32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd3e:	f100 0414 	add.w	r4, r0, #20
 800dd42:	dd45      	ble.n	800ddd0 <rshift+0xa0>
 800dd44:	f011 011f 	ands.w	r1, r1, #31
 800dd48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd50:	d10c      	bne.n	800dd6c <rshift+0x3c>
 800dd52:	f100 0710 	add.w	r7, r0, #16
 800dd56:	4629      	mov	r1, r5
 800dd58:	42b1      	cmp	r1, r6
 800dd5a:	d334      	bcc.n	800ddc6 <rshift+0x96>
 800dd5c:	1a9b      	subs	r3, r3, r2
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	1eea      	subs	r2, r5, #3
 800dd62:	4296      	cmp	r6, r2
 800dd64:	bf38      	it	cc
 800dd66:	2300      	movcc	r3, #0
 800dd68:	4423      	add	r3, r4
 800dd6a:	e015      	b.n	800dd98 <rshift+0x68>
 800dd6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd70:	f1c1 0820 	rsb	r8, r1, #32
 800dd74:	40cf      	lsrs	r7, r1
 800dd76:	f105 0e04 	add.w	lr, r5, #4
 800dd7a:	46a1      	mov	r9, r4
 800dd7c:	4576      	cmp	r6, lr
 800dd7e:	46f4      	mov	ip, lr
 800dd80:	d815      	bhi.n	800ddae <rshift+0x7e>
 800dd82:	1a9a      	subs	r2, r3, r2
 800dd84:	0092      	lsls	r2, r2, #2
 800dd86:	3a04      	subs	r2, #4
 800dd88:	3501      	adds	r5, #1
 800dd8a:	42ae      	cmp	r6, r5
 800dd8c:	bf38      	it	cc
 800dd8e:	2200      	movcc	r2, #0
 800dd90:	18a3      	adds	r3, r4, r2
 800dd92:	50a7      	str	r7, [r4, r2]
 800dd94:	b107      	cbz	r7, 800dd98 <rshift+0x68>
 800dd96:	3304      	adds	r3, #4
 800dd98:	1b1a      	subs	r2, r3, r4
 800dd9a:	42a3      	cmp	r3, r4
 800dd9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dda0:	bf08      	it	eq
 800dda2:	2300      	moveq	r3, #0
 800dda4:	6102      	str	r2, [r0, #16]
 800dda6:	bf08      	it	eq
 800dda8:	6143      	streq	r3, [r0, #20]
 800ddaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddae:	f8dc c000 	ldr.w	ip, [ip]
 800ddb2:	fa0c fc08 	lsl.w	ip, ip, r8
 800ddb6:	ea4c 0707 	orr.w	r7, ip, r7
 800ddba:	f849 7b04 	str.w	r7, [r9], #4
 800ddbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddc2:	40cf      	lsrs	r7, r1
 800ddc4:	e7da      	b.n	800dd7c <rshift+0x4c>
 800ddc6:	f851 cb04 	ldr.w	ip, [r1], #4
 800ddca:	f847 cf04 	str.w	ip, [r7, #4]!
 800ddce:	e7c3      	b.n	800dd58 <rshift+0x28>
 800ddd0:	4623      	mov	r3, r4
 800ddd2:	e7e1      	b.n	800dd98 <rshift+0x68>

0800ddd4 <__hexdig_fun>:
 800ddd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ddd8:	2b09      	cmp	r3, #9
 800ddda:	d802      	bhi.n	800dde2 <__hexdig_fun+0xe>
 800dddc:	3820      	subs	r0, #32
 800ddde:	b2c0      	uxtb	r0, r0
 800dde0:	4770      	bx	lr
 800dde2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dde6:	2b05      	cmp	r3, #5
 800dde8:	d801      	bhi.n	800ddee <__hexdig_fun+0x1a>
 800ddea:	3847      	subs	r0, #71	; 0x47
 800ddec:	e7f7      	b.n	800ddde <__hexdig_fun+0xa>
 800ddee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ddf2:	2b05      	cmp	r3, #5
 800ddf4:	d801      	bhi.n	800ddfa <__hexdig_fun+0x26>
 800ddf6:	3827      	subs	r0, #39	; 0x27
 800ddf8:	e7f1      	b.n	800ddde <__hexdig_fun+0xa>
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	4770      	bx	lr
	...

0800de00 <__gethex>:
 800de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de04:	4617      	mov	r7, r2
 800de06:	680a      	ldr	r2, [r1, #0]
 800de08:	b085      	sub	sp, #20
 800de0a:	f102 0b02 	add.w	fp, r2, #2
 800de0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800de12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de16:	4681      	mov	r9, r0
 800de18:	468a      	mov	sl, r1
 800de1a:	9302      	str	r3, [sp, #8]
 800de1c:	32fe      	adds	r2, #254	; 0xfe
 800de1e:	eb02 030b 	add.w	r3, r2, fp
 800de22:	46d8      	mov	r8, fp
 800de24:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800de28:	9301      	str	r3, [sp, #4]
 800de2a:	2830      	cmp	r0, #48	; 0x30
 800de2c:	d0f7      	beq.n	800de1e <__gethex+0x1e>
 800de2e:	f7ff ffd1 	bl	800ddd4 <__hexdig_fun>
 800de32:	4604      	mov	r4, r0
 800de34:	2800      	cmp	r0, #0
 800de36:	d138      	bne.n	800deaa <__gethex+0xaa>
 800de38:	49a7      	ldr	r1, [pc, #668]	; (800e0d8 <__gethex+0x2d8>)
 800de3a:	2201      	movs	r2, #1
 800de3c:	4640      	mov	r0, r8
 800de3e:	f7ff ff29 	bl	800dc94 <strncmp>
 800de42:	4606      	mov	r6, r0
 800de44:	2800      	cmp	r0, #0
 800de46:	d169      	bne.n	800df1c <__gethex+0x11c>
 800de48:	f898 0001 	ldrb.w	r0, [r8, #1]
 800de4c:	465d      	mov	r5, fp
 800de4e:	f7ff ffc1 	bl	800ddd4 <__hexdig_fun>
 800de52:	2800      	cmp	r0, #0
 800de54:	d064      	beq.n	800df20 <__gethex+0x120>
 800de56:	465a      	mov	r2, fp
 800de58:	7810      	ldrb	r0, [r2, #0]
 800de5a:	2830      	cmp	r0, #48	; 0x30
 800de5c:	4690      	mov	r8, r2
 800de5e:	f102 0201 	add.w	r2, r2, #1
 800de62:	d0f9      	beq.n	800de58 <__gethex+0x58>
 800de64:	f7ff ffb6 	bl	800ddd4 <__hexdig_fun>
 800de68:	2301      	movs	r3, #1
 800de6a:	fab0 f480 	clz	r4, r0
 800de6e:	0964      	lsrs	r4, r4, #5
 800de70:	465e      	mov	r6, fp
 800de72:	9301      	str	r3, [sp, #4]
 800de74:	4642      	mov	r2, r8
 800de76:	4615      	mov	r5, r2
 800de78:	3201      	adds	r2, #1
 800de7a:	7828      	ldrb	r0, [r5, #0]
 800de7c:	f7ff ffaa 	bl	800ddd4 <__hexdig_fun>
 800de80:	2800      	cmp	r0, #0
 800de82:	d1f8      	bne.n	800de76 <__gethex+0x76>
 800de84:	4994      	ldr	r1, [pc, #592]	; (800e0d8 <__gethex+0x2d8>)
 800de86:	2201      	movs	r2, #1
 800de88:	4628      	mov	r0, r5
 800de8a:	f7ff ff03 	bl	800dc94 <strncmp>
 800de8e:	b978      	cbnz	r0, 800deb0 <__gethex+0xb0>
 800de90:	b946      	cbnz	r6, 800dea4 <__gethex+0xa4>
 800de92:	1c6e      	adds	r6, r5, #1
 800de94:	4632      	mov	r2, r6
 800de96:	4615      	mov	r5, r2
 800de98:	3201      	adds	r2, #1
 800de9a:	7828      	ldrb	r0, [r5, #0]
 800de9c:	f7ff ff9a 	bl	800ddd4 <__hexdig_fun>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	d1f8      	bne.n	800de96 <__gethex+0x96>
 800dea4:	1b73      	subs	r3, r6, r5
 800dea6:	009e      	lsls	r6, r3, #2
 800dea8:	e004      	b.n	800deb4 <__gethex+0xb4>
 800deaa:	2400      	movs	r4, #0
 800deac:	4626      	mov	r6, r4
 800deae:	e7e1      	b.n	800de74 <__gethex+0x74>
 800deb0:	2e00      	cmp	r6, #0
 800deb2:	d1f7      	bne.n	800dea4 <__gethex+0xa4>
 800deb4:	782b      	ldrb	r3, [r5, #0]
 800deb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800deba:	2b50      	cmp	r3, #80	; 0x50
 800debc:	d13d      	bne.n	800df3a <__gethex+0x13a>
 800debe:	786b      	ldrb	r3, [r5, #1]
 800dec0:	2b2b      	cmp	r3, #43	; 0x2b
 800dec2:	d02f      	beq.n	800df24 <__gethex+0x124>
 800dec4:	2b2d      	cmp	r3, #45	; 0x2d
 800dec6:	d031      	beq.n	800df2c <__gethex+0x12c>
 800dec8:	1c69      	adds	r1, r5, #1
 800deca:	f04f 0b00 	mov.w	fp, #0
 800dece:	7808      	ldrb	r0, [r1, #0]
 800ded0:	f7ff ff80 	bl	800ddd4 <__hexdig_fun>
 800ded4:	1e42      	subs	r2, r0, #1
 800ded6:	b2d2      	uxtb	r2, r2
 800ded8:	2a18      	cmp	r2, #24
 800deda:	d82e      	bhi.n	800df3a <__gethex+0x13a>
 800dedc:	f1a0 0210 	sub.w	r2, r0, #16
 800dee0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dee4:	f7ff ff76 	bl	800ddd4 <__hexdig_fun>
 800dee8:	f100 3cff 	add.w	ip, r0, #4294967295
 800deec:	fa5f fc8c 	uxtb.w	ip, ip
 800def0:	f1bc 0f18 	cmp.w	ip, #24
 800def4:	d91d      	bls.n	800df32 <__gethex+0x132>
 800def6:	f1bb 0f00 	cmp.w	fp, #0
 800defa:	d000      	beq.n	800defe <__gethex+0xfe>
 800defc:	4252      	negs	r2, r2
 800defe:	4416      	add	r6, r2
 800df00:	f8ca 1000 	str.w	r1, [sl]
 800df04:	b1dc      	cbz	r4, 800df3e <__gethex+0x13e>
 800df06:	9b01      	ldr	r3, [sp, #4]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	bf14      	ite	ne
 800df0c:	f04f 0800 	movne.w	r8, #0
 800df10:	f04f 0806 	moveq.w	r8, #6
 800df14:	4640      	mov	r0, r8
 800df16:	b005      	add	sp, #20
 800df18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df1c:	4645      	mov	r5, r8
 800df1e:	4626      	mov	r6, r4
 800df20:	2401      	movs	r4, #1
 800df22:	e7c7      	b.n	800deb4 <__gethex+0xb4>
 800df24:	f04f 0b00 	mov.w	fp, #0
 800df28:	1ca9      	adds	r1, r5, #2
 800df2a:	e7d0      	b.n	800dece <__gethex+0xce>
 800df2c:	f04f 0b01 	mov.w	fp, #1
 800df30:	e7fa      	b.n	800df28 <__gethex+0x128>
 800df32:	230a      	movs	r3, #10
 800df34:	fb03 0002 	mla	r0, r3, r2, r0
 800df38:	e7d0      	b.n	800dedc <__gethex+0xdc>
 800df3a:	4629      	mov	r1, r5
 800df3c:	e7e0      	b.n	800df00 <__gethex+0x100>
 800df3e:	eba5 0308 	sub.w	r3, r5, r8
 800df42:	3b01      	subs	r3, #1
 800df44:	4621      	mov	r1, r4
 800df46:	2b07      	cmp	r3, #7
 800df48:	dc0a      	bgt.n	800df60 <__gethex+0x160>
 800df4a:	4648      	mov	r0, r9
 800df4c:	f7fe f93e 	bl	800c1cc <_Balloc>
 800df50:	4604      	mov	r4, r0
 800df52:	b940      	cbnz	r0, 800df66 <__gethex+0x166>
 800df54:	4b61      	ldr	r3, [pc, #388]	; (800e0dc <__gethex+0x2dc>)
 800df56:	4602      	mov	r2, r0
 800df58:	21e4      	movs	r1, #228	; 0xe4
 800df5a:	4861      	ldr	r0, [pc, #388]	; (800e0e0 <__gethex+0x2e0>)
 800df5c:	f7ff feb4 	bl	800dcc8 <__assert_func>
 800df60:	3101      	adds	r1, #1
 800df62:	105b      	asrs	r3, r3, #1
 800df64:	e7ef      	b.n	800df46 <__gethex+0x146>
 800df66:	f100 0a14 	add.w	sl, r0, #20
 800df6a:	2300      	movs	r3, #0
 800df6c:	495a      	ldr	r1, [pc, #360]	; (800e0d8 <__gethex+0x2d8>)
 800df6e:	f8cd a004 	str.w	sl, [sp, #4]
 800df72:	469b      	mov	fp, r3
 800df74:	45a8      	cmp	r8, r5
 800df76:	d342      	bcc.n	800dffe <__gethex+0x1fe>
 800df78:	9801      	ldr	r0, [sp, #4]
 800df7a:	f840 bb04 	str.w	fp, [r0], #4
 800df7e:	eba0 000a 	sub.w	r0, r0, sl
 800df82:	1080      	asrs	r0, r0, #2
 800df84:	6120      	str	r0, [r4, #16]
 800df86:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800df8a:	4658      	mov	r0, fp
 800df8c:	f7fe fa10 	bl	800c3b0 <__hi0bits>
 800df90:	683d      	ldr	r5, [r7, #0]
 800df92:	eba8 0000 	sub.w	r0, r8, r0
 800df96:	42a8      	cmp	r0, r5
 800df98:	dd59      	ble.n	800e04e <__gethex+0x24e>
 800df9a:	eba0 0805 	sub.w	r8, r0, r5
 800df9e:	4641      	mov	r1, r8
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f7fe fd9f 	bl	800cae4 <__any_on>
 800dfa6:	4683      	mov	fp, r0
 800dfa8:	b1b8      	cbz	r0, 800dfda <__gethex+0x1da>
 800dfaa:	f108 33ff 	add.w	r3, r8, #4294967295
 800dfae:	1159      	asrs	r1, r3, #5
 800dfb0:	f003 021f 	and.w	r2, r3, #31
 800dfb4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dfb8:	f04f 0b01 	mov.w	fp, #1
 800dfbc:	fa0b f202 	lsl.w	r2, fp, r2
 800dfc0:	420a      	tst	r2, r1
 800dfc2:	d00a      	beq.n	800dfda <__gethex+0x1da>
 800dfc4:	455b      	cmp	r3, fp
 800dfc6:	dd06      	ble.n	800dfd6 <__gethex+0x1d6>
 800dfc8:	f1a8 0102 	sub.w	r1, r8, #2
 800dfcc:	4620      	mov	r0, r4
 800dfce:	f7fe fd89 	bl	800cae4 <__any_on>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d138      	bne.n	800e048 <__gethex+0x248>
 800dfd6:	f04f 0b02 	mov.w	fp, #2
 800dfda:	4641      	mov	r1, r8
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f7ff fea7 	bl	800dd30 <rshift>
 800dfe2:	4446      	add	r6, r8
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	42b3      	cmp	r3, r6
 800dfe8:	da41      	bge.n	800e06e <__gethex+0x26e>
 800dfea:	4621      	mov	r1, r4
 800dfec:	4648      	mov	r0, r9
 800dfee:	f7fe f92d 	bl	800c24c <_Bfree>
 800dff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dff4:	2300      	movs	r3, #0
 800dff6:	6013      	str	r3, [r2, #0]
 800dff8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800dffc:	e78a      	b.n	800df14 <__gethex+0x114>
 800dffe:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e002:	2a2e      	cmp	r2, #46	; 0x2e
 800e004:	d014      	beq.n	800e030 <__gethex+0x230>
 800e006:	2b20      	cmp	r3, #32
 800e008:	d106      	bne.n	800e018 <__gethex+0x218>
 800e00a:	9b01      	ldr	r3, [sp, #4]
 800e00c:	f843 bb04 	str.w	fp, [r3], #4
 800e010:	f04f 0b00 	mov.w	fp, #0
 800e014:	9301      	str	r3, [sp, #4]
 800e016:	465b      	mov	r3, fp
 800e018:	7828      	ldrb	r0, [r5, #0]
 800e01a:	9303      	str	r3, [sp, #12]
 800e01c:	f7ff feda 	bl	800ddd4 <__hexdig_fun>
 800e020:	9b03      	ldr	r3, [sp, #12]
 800e022:	f000 000f 	and.w	r0, r0, #15
 800e026:	4098      	lsls	r0, r3
 800e028:	ea4b 0b00 	orr.w	fp, fp, r0
 800e02c:	3304      	adds	r3, #4
 800e02e:	e7a1      	b.n	800df74 <__gethex+0x174>
 800e030:	45a8      	cmp	r8, r5
 800e032:	d8e8      	bhi.n	800e006 <__gethex+0x206>
 800e034:	2201      	movs	r2, #1
 800e036:	4628      	mov	r0, r5
 800e038:	9303      	str	r3, [sp, #12]
 800e03a:	f7ff fe2b 	bl	800dc94 <strncmp>
 800e03e:	4926      	ldr	r1, [pc, #152]	; (800e0d8 <__gethex+0x2d8>)
 800e040:	9b03      	ldr	r3, [sp, #12]
 800e042:	2800      	cmp	r0, #0
 800e044:	d1df      	bne.n	800e006 <__gethex+0x206>
 800e046:	e795      	b.n	800df74 <__gethex+0x174>
 800e048:	f04f 0b03 	mov.w	fp, #3
 800e04c:	e7c5      	b.n	800dfda <__gethex+0x1da>
 800e04e:	da0b      	bge.n	800e068 <__gethex+0x268>
 800e050:	eba5 0800 	sub.w	r8, r5, r0
 800e054:	4621      	mov	r1, r4
 800e056:	4642      	mov	r2, r8
 800e058:	4648      	mov	r0, r9
 800e05a:	f7fe fb11 	bl	800c680 <__lshift>
 800e05e:	eba6 0608 	sub.w	r6, r6, r8
 800e062:	4604      	mov	r4, r0
 800e064:	f100 0a14 	add.w	sl, r0, #20
 800e068:	f04f 0b00 	mov.w	fp, #0
 800e06c:	e7ba      	b.n	800dfe4 <__gethex+0x1e4>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	42b3      	cmp	r3, r6
 800e072:	dd73      	ble.n	800e15c <__gethex+0x35c>
 800e074:	1b9e      	subs	r6, r3, r6
 800e076:	42b5      	cmp	r5, r6
 800e078:	dc34      	bgt.n	800e0e4 <__gethex+0x2e4>
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2b02      	cmp	r3, #2
 800e07e:	d023      	beq.n	800e0c8 <__gethex+0x2c8>
 800e080:	2b03      	cmp	r3, #3
 800e082:	d025      	beq.n	800e0d0 <__gethex+0x2d0>
 800e084:	2b01      	cmp	r3, #1
 800e086:	d115      	bne.n	800e0b4 <__gethex+0x2b4>
 800e088:	42b5      	cmp	r5, r6
 800e08a:	d113      	bne.n	800e0b4 <__gethex+0x2b4>
 800e08c:	2d01      	cmp	r5, #1
 800e08e:	d10b      	bne.n	800e0a8 <__gethex+0x2a8>
 800e090:	9a02      	ldr	r2, [sp, #8]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6013      	str	r3, [r2, #0]
 800e096:	2301      	movs	r3, #1
 800e098:	6123      	str	r3, [r4, #16]
 800e09a:	f8ca 3000 	str.w	r3, [sl]
 800e09e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0a0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e0a4:	601c      	str	r4, [r3, #0]
 800e0a6:	e735      	b.n	800df14 <__gethex+0x114>
 800e0a8:	1e69      	subs	r1, r5, #1
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f7fe fd1a 	bl	800cae4 <__any_on>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	d1ed      	bne.n	800e090 <__gethex+0x290>
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	4648      	mov	r0, r9
 800e0b8:	f7fe f8c8 	bl	800c24c <_Bfree>
 800e0bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0be:	2300      	movs	r3, #0
 800e0c0:	6013      	str	r3, [r2, #0]
 800e0c2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e0c6:	e725      	b.n	800df14 <__gethex+0x114>
 800e0c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d1f2      	bne.n	800e0b4 <__gethex+0x2b4>
 800e0ce:	e7df      	b.n	800e090 <__gethex+0x290>
 800e0d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1dc      	bne.n	800e090 <__gethex+0x290>
 800e0d6:	e7ed      	b.n	800e0b4 <__gethex+0x2b4>
 800e0d8:	08011e8c 	.word	0x08011e8c
 800e0dc:	08011d25 	.word	0x08011d25
 800e0e0:	08012036 	.word	0x08012036
 800e0e4:	f106 38ff 	add.w	r8, r6, #4294967295
 800e0e8:	f1bb 0f00 	cmp.w	fp, #0
 800e0ec:	d133      	bne.n	800e156 <__gethex+0x356>
 800e0ee:	f1b8 0f00 	cmp.w	r8, #0
 800e0f2:	d004      	beq.n	800e0fe <__gethex+0x2fe>
 800e0f4:	4641      	mov	r1, r8
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f7fe fcf4 	bl	800cae4 <__any_on>
 800e0fc:	4683      	mov	fp, r0
 800e0fe:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e102:	2301      	movs	r3, #1
 800e104:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e108:	f008 081f 	and.w	r8, r8, #31
 800e10c:	fa03 f308 	lsl.w	r3, r3, r8
 800e110:	4213      	tst	r3, r2
 800e112:	4631      	mov	r1, r6
 800e114:	4620      	mov	r0, r4
 800e116:	bf18      	it	ne
 800e118:	f04b 0b02 	orrne.w	fp, fp, #2
 800e11c:	1bad      	subs	r5, r5, r6
 800e11e:	f7ff fe07 	bl	800dd30 <rshift>
 800e122:	687e      	ldr	r6, [r7, #4]
 800e124:	f04f 0802 	mov.w	r8, #2
 800e128:	f1bb 0f00 	cmp.w	fp, #0
 800e12c:	d04a      	beq.n	800e1c4 <__gethex+0x3c4>
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2b02      	cmp	r3, #2
 800e132:	d016      	beq.n	800e162 <__gethex+0x362>
 800e134:	2b03      	cmp	r3, #3
 800e136:	d018      	beq.n	800e16a <__gethex+0x36a>
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d109      	bne.n	800e150 <__gethex+0x350>
 800e13c:	f01b 0f02 	tst.w	fp, #2
 800e140:	d006      	beq.n	800e150 <__gethex+0x350>
 800e142:	f8da 3000 	ldr.w	r3, [sl]
 800e146:	ea4b 0b03 	orr.w	fp, fp, r3
 800e14a:	f01b 0f01 	tst.w	fp, #1
 800e14e:	d10f      	bne.n	800e170 <__gethex+0x370>
 800e150:	f048 0810 	orr.w	r8, r8, #16
 800e154:	e036      	b.n	800e1c4 <__gethex+0x3c4>
 800e156:	f04f 0b01 	mov.w	fp, #1
 800e15a:	e7d0      	b.n	800e0fe <__gethex+0x2fe>
 800e15c:	f04f 0801 	mov.w	r8, #1
 800e160:	e7e2      	b.n	800e128 <__gethex+0x328>
 800e162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e164:	f1c3 0301 	rsb	r3, r3, #1
 800e168:	930f      	str	r3, [sp, #60]	; 0x3c
 800e16a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d0ef      	beq.n	800e150 <__gethex+0x350>
 800e170:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e174:	f104 0214 	add.w	r2, r4, #20
 800e178:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e17c:	9301      	str	r3, [sp, #4]
 800e17e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e182:	2300      	movs	r3, #0
 800e184:	4694      	mov	ip, r2
 800e186:	f852 1b04 	ldr.w	r1, [r2], #4
 800e18a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e18e:	d01e      	beq.n	800e1ce <__gethex+0x3ce>
 800e190:	3101      	adds	r1, #1
 800e192:	f8cc 1000 	str.w	r1, [ip]
 800e196:	f1b8 0f02 	cmp.w	r8, #2
 800e19a:	f104 0214 	add.w	r2, r4, #20
 800e19e:	d13d      	bne.n	800e21c <__gethex+0x41c>
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	3b01      	subs	r3, #1
 800e1a4:	42ab      	cmp	r3, r5
 800e1a6:	d10b      	bne.n	800e1c0 <__gethex+0x3c0>
 800e1a8:	1169      	asrs	r1, r5, #5
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	f005 051f 	and.w	r5, r5, #31
 800e1b0:	fa03 f505 	lsl.w	r5, r3, r5
 800e1b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1b8:	421d      	tst	r5, r3
 800e1ba:	bf18      	it	ne
 800e1bc:	f04f 0801 	movne.w	r8, #1
 800e1c0:	f048 0820 	orr.w	r8, r8, #32
 800e1c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1c6:	601c      	str	r4, [r3, #0]
 800e1c8:	9b02      	ldr	r3, [sp, #8]
 800e1ca:	601e      	str	r6, [r3, #0]
 800e1cc:	e6a2      	b.n	800df14 <__gethex+0x114>
 800e1ce:	4290      	cmp	r0, r2
 800e1d0:	f842 3c04 	str.w	r3, [r2, #-4]
 800e1d4:	d8d6      	bhi.n	800e184 <__gethex+0x384>
 800e1d6:	68a2      	ldr	r2, [r4, #8]
 800e1d8:	4593      	cmp	fp, r2
 800e1da:	db17      	blt.n	800e20c <__gethex+0x40c>
 800e1dc:	6861      	ldr	r1, [r4, #4]
 800e1de:	4648      	mov	r0, r9
 800e1e0:	3101      	adds	r1, #1
 800e1e2:	f7fd fff3 	bl	800c1cc <_Balloc>
 800e1e6:	4682      	mov	sl, r0
 800e1e8:	b918      	cbnz	r0, 800e1f2 <__gethex+0x3f2>
 800e1ea:	4b1b      	ldr	r3, [pc, #108]	; (800e258 <__gethex+0x458>)
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	2184      	movs	r1, #132	; 0x84
 800e1f0:	e6b3      	b.n	800df5a <__gethex+0x15a>
 800e1f2:	6922      	ldr	r2, [r4, #16]
 800e1f4:	3202      	adds	r2, #2
 800e1f6:	f104 010c 	add.w	r1, r4, #12
 800e1fa:	0092      	lsls	r2, r2, #2
 800e1fc:	300c      	adds	r0, #12
 800e1fe:	f7fd f908 	bl	800b412 <memcpy>
 800e202:	4621      	mov	r1, r4
 800e204:	4648      	mov	r0, r9
 800e206:	f7fe f821 	bl	800c24c <_Bfree>
 800e20a:	4654      	mov	r4, sl
 800e20c:	6922      	ldr	r2, [r4, #16]
 800e20e:	1c51      	adds	r1, r2, #1
 800e210:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e214:	6121      	str	r1, [r4, #16]
 800e216:	2101      	movs	r1, #1
 800e218:	6151      	str	r1, [r2, #20]
 800e21a:	e7bc      	b.n	800e196 <__gethex+0x396>
 800e21c:	6921      	ldr	r1, [r4, #16]
 800e21e:	4559      	cmp	r1, fp
 800e220:	dd0b      	ble.n	800e23a <__gethex+0x43a>
 800e222:	2101      	movs	r1, #1
 800e224:	4620      	mov	r0, r4
 800e226:	f7ff fd83 	bl	800dd30 <rshift>
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	3601      	adds	r6, #1
 800e22e:	42b3      	cmp	r3, r6
 800e230:	f6ff aedb 	blt.w	800dfea <__gethex+0x1ea>
 800e234:	f04f 0801 	mov.w	r8, #1
 800e238:	e7c2      	b.n	800e1c0 <__gethex+0x3c0>
 800e23a:	f015 051f 	ands.w	r5, r5, #31
 800e23e:	d0f9      	beq.n	800e234 <__gethex+0x434>
 800e240:	9b01      	ldr	r3, [sp, #4]
 800e242:	441a      	add	r2, r3
 800e244:	f1c5 0520 	rsb	r5, r5, #32
 800e248:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e24c:	f7fe f8b0 	bl	800c3b0 <__hi0bits>
 800e250:	42a8      	cmp	r0, r5
 800e252:	dbe6      	blt.n	800e222 <__gethex+0x422>
 800e254:	e7ee      	b.n	800e234 <__gethex+0x434>
 800e256:	bf00      	nop
 800e258:	08011d25 	.word	0x08011d25

0800e25c <L_shift>:
 800e25c:	f1c2 0208 	rsb	r2, r2, #8
 800e260:	0092      	lsls	r2, r2, #2
 800e262:	b570      	push	{r4, r5, r6, lr}
 800e264:	f1c2 0620 	rsb	r6, r2, #32
 800e268:	6843      	ldr	r3, [r0, #4]
 800e26a:	6804      	ldr	r4, [r0, #0]
 800e26c:	fa03 f506 	lsl.w	r5, r3, r6
 800e270:	432c      	orrs	r4, r5
 800e272:	40d3      	lsrs	r3, r2
 800e274:	6004      	str	r4, [r0, #0]
 800e276:	f840 3f04 	str.w	r3, [r0, #4]!
 800e27a:	4288      	cmp	r0, r1
 800e27c:	d3f4      	bcc.n	800e268 <L_shift+0xc>
 800e27e:	bd70      	pop	{r4, r5, r6, pc}

0800e280 <__match>:
 800e280:	b530      	push	{r4, r5, lr}
 800e282:	6803      	ldr	r3, [r0, #0]
 800e284:	3301      	adds	r3, #1
 800e286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e28a:	b914      	cbnz	r4, 800e292 <__match+0x12>
 800e28c:	6003      	str	r3, [r0, #0]
 800e28e:	2001      	movs	r0, #1
 800e290:	bd30      	pop	{r4, r5, pc}
 800e292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e296:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e29a:	2d19      	cmp	r5, #25
 800e29c:	bf98      	it	ls
 800e29e:	3220      	addls	r2, #32
 800e2a0:	42a2      	cmp	r2, r4
 800e2a2:	d0f0      	beq.n	800e286 <__match+0x6>
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	e7f3      	b.n	800e290 <__match+0x10>

0800e2a8 <__hexnan>:
 800e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ac:	680b      	ldr	r3, [r1, #0]
 800e2ae:	6801      	ldr	r1, [r0, #0]
 800e2b0:	115e      	asrs	r6, r3, #5
 800e2b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e2b6:	f013 031f 	ands.w	r3, r3, #31
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	bf18      	it	ne
 800e2be:	3604      	addne	r6, #4
 800e2c0:	2500      	movs	r5, #0
 800e2c2:	1f37      	subs	r7, r6, #4
 800e2c4:	4682      	mov	sl, r0
 800e2c6:	4690      	mov	r8, r2
 800e2c8:	9301      	str	r3, [sp, #4]
 800e2ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800e2ce:	46b9      	mov	r9, r7
 800e2d0:	463c      	mov	r4, r7
 800e2d2:	9502      	str	r5, [sp, #8]
 800e2d4:	46ab      	mov	fp, r5
 800e2d6:	784a      	ldrb	r2, [r1, #1]
 800e2d8:	1c4b      	adds	r3, r1, #1
 800e2da:	9303      	str	r3, [sp, #12]
 800e2dc:	b342      	cbz	r2, 800e330 <__hexnan+0x88>
 800e2de:	4610      	mov	r0, r2
 800e2e0:	9105      	str	r1, [sp, #20]
 800e2e2:	9204      	str	r2, [sp, #16]
 800e2e4:	f7ff fd76 	bl	800ddd4 <__hexdig_fun>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d14f      	bne.n	800e38c <__hexnan+0xe4>
 800e2ec:	9a04      	ldr	r2, [sp, #16]
 800e2ee:	9905      	ldr	r1, [sp, #20]
 800e2f0:	2a20      	cmp	r2, #32
 800e2f2:	d818      	bhi.n	800e326 <__hexnan+0x7e>
 800e2f4:	9b02      	ldr	r3, [sp, #8]
 800e2f6:	459b      	cmp	fp, r3
 800e2f8:	dd13      	ble.n	800e322 <__hexnan+0x7a>
 800e2fa:	454c      	cmp	r4, r9
 800e2fc:	d206      	bcs.n	800e30c <__hexnan+0x64>
 800e2fe:	2d07      	cmp	r5, #7
 800e300:	dc04      	bgt.n	800e30c <__hexnan+0x64>
 800e302:	462a      	mov	r2, r5
 800e304:	4649      	mov	r1, r9
 800e306:	4620      	mov	r0, r4
 800e308:	f7ff ffa8 	bl	800e25c <L_shift>
 800e30c:	4544      	cmp	r4, r8
 800e30e:	d950      	bls.n	800e3b2 <__hexnan+0x10a>
 800e310:	2300      	movs	r3, #0
 800e312:	f1a4 0904 	sub.w	r9, r4, #4
 800e316:	f844 3c04 	str.w	r3, [r4, #-4]
 800e31a:	f8cd b008 	str.w	fp, [sp, #8]
 800e31e:	464c      	mov	r4, r9
 800e320:	461d      	mov	r5, r3
 800e322:	9903      	ldr	r1, [sp, #12]
 800e324:	e7d7      	b.n	800e2d6 <__hexnan+0x2e>
 800e326:	2a29      	cmp	r2, #41	; 0x29
 800e328:	d155      	bne.n	800e3d6 <__hexnan+0x12e>
 800e32a:	3102      	adds	r1, #2
 800e32c:	f8ca 1000 	str.w	r1, [sl]
 800e330:	f1bb 0f00 	cmp.w	fp, #0
 800e334:	d04f      	beq.n	800e3d6 <__hexnan+0x12e>
 800e336:	454c      	cmp	r4, r9
 800e338:	d206      	bcs.n	800e348 <__hexnan+0xa0>
 800e33a:	2d07      	cmp	r5, #7
 800e33c:	dc04      	bgt.n	800e348 <__hexnan+0xa0>
 800e33e:	462a      	mov	r2, r5
 800e340:	4649      	mov	r1, r9
 800e342:	4620      	mov	r0, r4
 800e344:	f7ff ff8a 	bl	800e25c <L_shift>
 800e348:	4544      	cmp	r4, r8
 800e34a:	d934      	bls.n	800e3b6 <__hexnan+0x10e>
 800e34c:	f1a8 0204 	sub.w	r2, r8, #4
 800e350:	4623      	mov	r3, r4
 800e352:	f853 1b04 	ldr.w	r1, [r3], #4
 800e356:	f842 1f04 	str.w	r1, [r2, #4]!
 800e35a:	429f      	cmp	r7, r3
 800e35c:	d2f9      	bcs.n	800e352 <__hexnan+0xaa>
 800e35e:	1b3b      	subs	r3, r7, r4
 800e360:	f023 0303 	bic.w	r3, r3, #3
 800e364:	3304      	adds	r3, #4
 800e366:	3e03      	subs	r6, #3
 800e368:	3401      	adds	r4, #1
 800e36a:	42a6      	cmp	r6, r4
 800e36c:	bf38      	it	cc
 800e36e:	2304      	movcc	r3, #4
 800e370:	4443      	add	r3, r8
 800e372:	2200      	movs	r2, #0
 800e374:	f843 2b04 	str.w	r2, [r3], #4
 800e378:	429f      	cmp	r7, r3
 800e37a:	d2fb      	bcs.n	800e374 <__hexnan+0xcc>
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	b91b      	cbnz	r3, 800e388 <__hexnan+0xe0>
 800e380:	4547      	cmp	r7, r8
 800e382:	d126      	bne.n	800e3d2 <__hexnan+0x12a>
 800e384:	2301      	movs	r3, #1
 800e386:	603b      	str	r3, [r7, #0]
 800e388:	2005      	movs	r0, #5
 800e38a:	e025      	b.n	800e3d8 <__hexnan+0x130>
 800e38c:	3501      	adds	r5, #1
 800e38e:	2d08      	cmp	r5, #8
 800e390:	f10b 0b01 	add.w	fp, fp, #1
 800e394:	dd06      	ble.n	800e3a4 <__hexnan+0xfc>
 800e396:	4544      	cmp	r4, r8
 800e398:	d9c3      	bls.n	800e322 <__hexnan+0x7a>
 800e39a:	2300      	movs	r3, #0
 800e39c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3a0:	2501      	movs	r5, #1
 800e3a2:	3c04      	subs	r4, #4
 800e3a4:	6822      	ldr	r2, [r4, #0]
 800e3a6:	f000 000f 	and.w	r0, r0, #15
 800e3aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e3ae:	6020      	str	r0, [r4, #0]
 800e3b0:	e7b7      	b.n	800e322 <__hexnan+0x7a>
 800e3b2:	2508      	movs	r5, #8
 800e3b4:	e7b5      	b.n	800e322 <__hexnan+0x7a>
 800e3b6:	9b01      	ldr	r3, [sp, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d0df      	beq.n	800e37c <__hexnan+0xd4>
 800e3bc:	f1c3 0320 	rsb	r3, r3, #32
 800e3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c4:	40da      	lsrs	r2, r3
 800e3c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	f846 3c04 	str.w	r3, [r6, #-4]
 800e3d0:	e7d4      	b.n	800e37c <__hexnan+0xd4>
 800e3d2:	3f04      	subs	r7, #4
 800e3d4:	e7d2      	b.n	800e37c <__hexnan+0xd4>
 800e3d6:	2004      	movs	r0, #4
 800e3d8:	b007      	add	sp, #28
 800e3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e3de <__ascii_mbtowc>:
 800e3de:	b082      	sub	sp, #8
 800e3e0:	b901      	cbnz	r1, 800e3e4 <__ascii_mbtowc+0x6>
 800e3e2:	a901      	add	r1, sp, #4
 800e3e4:	b142      	cbz	r2, 800e3f8 <__ascii_mbtowc+0x1a>
 800e3e6:	b14b      	cbz	r3, 800e3fc <__ascii_mbtowc+0x1e>
 800e3e8:	7813      	ldrb	r3, [r2, #0]
 800e3ea:	600b      	str	r3, [r1, #0]
 800e3ec:	7812      	ldrb	r2, [r2, #0]
 800e3ee:	1e10      	subs	r0, r2, #0
 800e3f0:	bf18      	it	ne
 800e3f2:	2001      	movne	r0, #1
 800e3f4:	b002      	add	sp, #8
 800e3f6:	4770      	bx	lr
 800e3f8:	4610      	mov	r0, r2
 800e3fa:	e7fb      	b.n	800e3f4 <__ascii_mbtowc+0x16>
 800e3fc:	f06f 0001 	mvn.w	r0, #1
 800e400:	e7f8      	b.n	800e3f4 <__ascii_mbtowc+0x16>

0800e402 <_realloc_r>:
 800e402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e406:	4680      	mov	r8, r0
 800e408:	4614      	mov	r4, r2
 800e40a:	460e      	mov	r6, r1
 800e40c:	b921      	cbnz	r1, 800e418 <_realloc_r+0x16>
 800e40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e412:	4611      	mov	r1, r2
 800e414:	f7fb bf46 	b.w	800a2a4 <_malloc_r>
 800e418:	b92a      	cbnz	r2, 800e426 <_realloc_r+0x24>
 800e41a:	f7fd fe8b 	bl	800c134 <_free_r>
 800e41e:	4625      	mov	r5, r4
 800e420:	4628      	mov	r0, r5
 800e422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e426:	f000 f842 	bl	800e4ae <_malloc_usable_size_r>
 800e42a:	4284      	cmp	r4, r0
 800e42c:	4607      	mov	r7, r0
 800e42e:	d802      	bhi.n	800e436 <_realloc_r+0x34>
 800e430:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e434:	d812      	bhi.n	800e45c <_realloc_r+0x5a>
 800e436:	4621      	mov	r1, r4
 800e438:	4640      	mov	r0, r8
 800e43a:	f7fb ff33 	bl	800a2a4 <_malloc_r>
 800e43e:	4605      	mov	r5, r0
 800e440:	2800      	cmp	r0, #0
 800e442:	d0ed      	beq.n	800e420 <_realloc_r+0x1e>
 800e444:	42bc      	cmp	r4, r7
 800e446:	4622      	mov	r2, r4
 800e448:	4631      	mov	r1, r6
 800e44a:	bf28      	it	cs
 800e44c:	463a      	movcs	r2, r7
 800e44e:	f7fc ffe0 	bl	800b412 <memcpy>
 800e452:	4631      	mov	r1, r6
 800e454:	4640      	mov	r0, r8
 800e456:	f7fd fe6d 	bl	800c134 <_free_r>
 800e45a:	e7e1      	b.n	800e420 <_realloc_r+0x1e>
 800e45c:	4635      	mov	r5, r6
 800e45e:	e7df      	b.n	800e420 <_realloc_r+0x1e>

0800e460 <__ascii_wctomb>:
 800e460:	b149      	cbz	r1, 800e476 <__ascii_wctomb+0x16>
 800e462:	2aff      	cmp	r2, #255	; 0xff
 800e464:	bf85      	ittet	hi
 800e466:	238a      	movhi	r3, #138	; 0x8a
 800e468:	6003      	strhi	r3, [r0, #0]
 800e46a:	700a      	strbls	r2, [r1, #0]
 800e46c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e470:	bf98      	it	ls
 800e472:	2001      	movls	r0, #1
 800e474:	4770      	bx	lr
 800e476:	4608      	mov	r0, r1
 800e478:	4770      	bx	lr
	...

0800e47c <fiprintf>:
 800e47c:	b40e      	push	{r1, r2, r3}
 800e47e:	b503      	push	{r0, r1, lr}
 800e480:	4601      	mov	r1, r0
 800e482:	ab03      	add	r3, sp, #12
 800e484:	4805      	ldr	r0, [pc, #20]	; (800e49c <fiprintf+0x20>)
 800e486:	f853 2b04 	ldr.w	r2, [r3], #4
 800e48a:	6800      	ldr	r0, [r0, #0]
 800e48c:	9301      	str	r3, [sp, #4]
 800e48e:	f000 f83f 	bl	800e510 <_vfiprintf_r>
 800e492:	b002      	add	sp, #8
 800e494:	f85d eb04 	ldr.w	lr, [sp], #4
 800e498:	b003      	add	sp, #12
 800e49a:	4770      	bx	lr
 800e49c:	20000064 	.word	0x20000064

0800e4a0 <abort>:
 800e4a0:	b508      	push	{r3, lr}
 800e4a2:	2006      	movs	r0, #6
 800e4a4:	f000 fa0c 	bl	800e8c0 <raise>
 800e4a8:	2001      	movs	r0, #1
 800e4aa:	f7f6 fb6b 	bl	8004b84 <_exit>

0800e4ae <_malloc_usable_size_r>:
 800e4ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4b2:	1f18      	subs	r0, r3, #4
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	bfbc      	itt	lt
 800e4b8:	580b      	ldrlt	r3, [r1, r0]
 800e4ba:	18c0      	addlt	r0, r0, r3
 800e4bc:	4770      	bx	lr

0800e4be <__sfputc_r>:
 800e4be:	6893      	ldr	r3, [r2, #8]
 800e4c0:	3b01      	subs	r3, #1
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	b410      	push	{r4}
 800e4c6:	6093      	str	r3, [r2, #8]
 800e4c8:	da08      	bge.n	800e4dc <__sfputc_r+0x1e>
 800e4ca:	6994      	ldr	r4, [r2, #24]
 800e4cc:	42a3      	cmp	r3, r4
 800e4ce:	db01      	blt.n	800e4d4 <__sfputc_r+0x16>
 800e4d0:	290a      	cmp	r1, #10
 800e4d2:	d103      	bne.n	800e4dc <__sfputc_r+0x1e>
 800e4d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4d8:	f000 b934 	b.w	800e744 <__swbuf_r>
 800e4dc:	6813      	ldr	r3, [r2, #0]
 800e4de:	1c58      	adds	r0, r3, #1
 800e4e0:	6010      	str	r0, [r2, #0]
 800e4e2:	7019      	strb	r1, [r3, #0]
 800e4e4:	4608      	mov	r0, r1
 800e4e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <__sfputs_r>:
 800e4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	460f      	mov	r7, r1
 800e4f2:	4614      	mov	r4, r2
 800e4f4:	18d5      	adds	r5, r2, r3
 800e4f6:	42ac      	cmp	r4, r5
 800e4f8:	d101      	bne.n	800e4fe <__sfputs_r+0x12>
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	e007      	b.n	800e50e <__sfputs_r+0x22>
 800e4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e502:	463a      	mov	r2, r7
 800e504:	4630      	mov	r0, r6
 800e506:	f7ff ffda 	bl	800e4be <__sfputc_r>
 800e50a:	1c43      	adds	r3, r0, #1
 800e50c:	d1f3      	bne.n	800e4f6 <__sfputs_r+0xa>
 800e50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e510 <_vfiprintf_r>:
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	460d      	mov	r5, r1
 800e516:	b09d      	sub	sp, #116	; 0x74
 800e518:	4614      	mov	r4, r2
 800e51a:	4698      	mov	r8, r3
 800e51c:	4606      	mov	r6, r0
 800e51e:	b118      	cbz	r0, 800e528 <_vfiprintf_r+0x18>
 800e520:	6a03      	ldr	r3, [r0, #32]
 800e522:	b90b      	cbnz	r3, 800e528 <_vfiprintf_r+0x18>
 800e524:	f7fc fe4c 	bl	800b1c0 <__sinit>
 800e528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e52a:	07d9      	lsls	r1, r3, #31
 800e52c:	d405      	bmi.n	800e53a <_vfiprintf_r+0x2a>
 800e52e:	89ab      	ldrh	r3, [r5, #12]
 800e530:	059a      	lsls	r2, r3, #22
 800e532:	d402      	bmi.n	800e53a <_vfiprintf_r+0x2a>
 800e534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e536:	f7fc ff6a 	bl	800b40e <__retarget_lock_acquire_recursive>
 800e53a:	89ab      	ldrh	r3, [r5, #12]
 800e53c:	071b      	lsls	r3, r3, #28
 800e53e:	d501      	bpl.n	800e544 <_vfiprintf_r+0x34>
 800e540:	692b      	ldr	r3, [r5, #16]
 800e542:	b99b      	cbnz	r3, 800e56c <_vfiprintf_r+0x5c>
 800e544:	4629      	mov	r1, r5
 800e546:	4630      	mov	r0, r6
 800e548:	f000 f93a 	bl	800e7c0 <__swsetup_r>
 800e54c:	b170      	cbz	r0, 800e56c <_vfiprintf_r+0x5c>
 800e54e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e550:	07dc      	lsls	r4, r3, #31
 800e552:	d504      	bpl.n	800e55e <_vfiprintf_r+0x4e>
 800e554:	f04f 30ff 	mov.w	r0, #4294967295
 800e558:	b01d      	add	sp, #116	; 0x74
 800e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55e:	89ab      	ldrh	r3, [r5, #12]
 800e560:	0598      	lsls	r0, r3, #22
 800e562:	d4f7      	bmi.n	800e554 <_vfiprintf_r+0x44>
 800e564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e566:	f7fc ff53 	bl	800b410 <__retarget_lock_release_recursive>
 800e56a:	e7f3      	b.n	800e554 <_vfiprintf_r+0x44>
 800e56c:	2300      	movs	r3, #0
 800e56e:	9309      	str	r3, [sp, #36]	; 0x24
 800e570:	2320      	movs	r3, #32
 800e572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e576:	f8cd 800c 	str.w	r8, [sp, #12]
 800e57a:	2330      	movs	r3, #48	; 0x30
 800e57c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e730 <_vfiprintf_r+0x220>
 800e580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e584:	f04f 0901 	mov.w	r9, #1
 800e588:	4623      	mov	r3, r4
 800e58a:	469a      	mov	sl, r3
 800e58c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e590:	b10a      	cbz	r2, 800e596 <_vfiprintf_r+0x86>
 800e592:	2a25      	cmp	r2, #37	; 0x25
 800e594:	d1f9      	bne.n	800e58a <_vfiprintf_r+0x7a>
 800e596:	ebba 0b04 	subs.w	fp, sl, r4
 800e59a:	d00b      	beq.n	800e5b4 <_vfiprintf_r+0xa4>
 800e59c:	465b      	mov	r3, fp
 800e59e:	4622      	mov	r2, r4
 800e5a0:	4629      	mov	r1, r5
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	f7ff ffa2 	bl	800e4ec <__sfputs_r>
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	f000 80a9 	beq.w	800e700 <_vfiprintf_r+0x1f0>
 800e5ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5b0:	445a      	add	r2, fp
 800e5b2:	9209      	str	r2, [sp, #36]	; 0x24
 800e5b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 80a1 	beq.w	800e700 <_vfiprintf_r+0x1f0>
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5c8:	f10a 0a01 	add.w	sl, sl, #1
 800e5cc:	9304      	str	r3, [sp, #16]
 800e5ce:	9307      	str	r3, [sp, #28]
 800e5d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5d4:	931a      	str	r3, [sp, #104]	; 0x68
 800e5d6:	4654      	mov	r4, sl
 800e5d8:	2205      	movs	r2, #5
 800e5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5de:	4854      	ldr	r0, [pc, #336]	; (800e730 <_vfiprintf_r+0x220>)
 800e5e0:	f7f1 fdf6 	bl	80001d0 <memchr>
 800e5e4:	9a04      	ldr	r2, [sp, #16]
 800e5e6:	b9d8      	cbnz	r0, 800e620 <_vfiprintf_r+0x110>
 800e5e8:	06d1      	lsls	r1, r2, #27
 800e5ea:	bf44      	itt	mi
 800e5ec:	2320      	movmi	r3, #32
 800e5ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5f2:	0713      	lsls	r3, r2, #28
 800e5f4:	bf44      	itt	mi
 800e5f6:	232b      	movmi	r3, #43	; 0x2b
 800e5f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e600:	2b2a      	cmp	r3, #42	; 0x2a
 800e602:	d015      	beq.n	800e630 <_vfiprintf_r+0x120>
 800e604:	9a07      	ldr	r2, [sp, #28]
 800e606:	4654      	mov	r4, sl
 800e608:	2000      	movs	r0, #0
 800e60a:	f04f 0c0a 	mov.w	ip, #10
 800e60e:	4621      	mov	r1, r4
 800e610:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e614:	3b30      	subs	r3, #48	; 0x30
 800e616:	2b09      	cmp	r3, #9
 800e618:	d94d      	bls.n	800e6b6 <_vfiprintf_r+0x1a6>
 800e61a:	b1b0      	cbz	r0, 800e64a <_vfiprintf_r+0x13a>
 800e61c:	9207      	str	r2, [sp, #28]
 800e61e:	e014      	b.n	800e64a <_vfiprintf_r+0x13a>
 800e620:	eba0 0308 	sub.w	r3, r0, r8
 800e624:	fa09 f303 	lsl.w	r3, r9, r3
 800e628:	4313      	orrs	r3, r2
 800e62a:	9304      	str	r3, [sp, #16]
 800e62c:	46a2      	mov	sl, r4
 800e62e:	e7d2      	b.n	800e5d6 <_vfiprintf_r+0xc6>
 800e630:	9b03      	ldr	r3, [sp, #12]
 800e632:	1d19      	adds	r1, r3, #4
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	9103      	str	r1, [sp, #12]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	bfbb      	ittet	lt
 800e63c:	425b      	neglt	r3, r3
 800e63e:	f042 0202 	orrlt.w	r2, r2, #2
 800e642:	9307      	strge	r3, [sp, #28]
 800e644:	9307      	strlt	r3, [sp, #28]
 800e646:	bfb8      	it	lt
 800e648:	9204      	strlt	r2, [sp, #16]
 800e64a:	7823      	ldrb	r3, [r4, #0]
 800e64c:	2b2e      	cmp	r3, #46	; 0x2e
 800e64e:	d10c      	bne.n	800e66a <_vfiprintf_r+0x15a>
 800e650:	7863      	ldrb	r3, [r4, #1]
 800e652:	2b2a      	cmp	r3, #42	; 0x2a
 800e654:	d134      	bne.n	800e6c0 <_vfiprintf_r+0x1b0>
 800e656:	9b03      	ldr	r3, [sp, #12]
 800e658:	1d1a      	adds	r2, r3, #4
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	9203      	str	r2, [sp, #12]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	bfb8      	it	lt
 800e662:	f04f 33ff 	movlt.w	r3, #4294967295
 800e666:	3402      	adds	r4, #2
 800e668:	9305      	str	r3, [sp, #20]
 800e66a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e740 <_vfiprintf_r+0x230>
 800e66e:	7821      	ldrb	r1, [r4, #0]
 800e670:	2203      	movs	r2, #3
 800e672:	4650      	mov	r0, sl
 800e674:	f7f1 fdac 	bl	80001d0 <memchr>
 800e678:	b138      	cbz	r0, 800e68a <_vfiprintf_r+0x17a>
 800e67a:	9b04      	ldr	r3, [sp, #16]
 800e67c:	eba0 000a 	sub.w	r0, r0, sl
 800e680:	2240      	movs	r2, #64	; 0x40
 800e682:	4082      	lsls	r2, r0
 800e684:	4313      	orrs	r3, r2
 800e686:	3401      	adds	r4, #1
 800e688:	9304      	str	r3, [sp, #16]
 800e68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e68e:	4829      	ldr	r0, [pc, #164]	; (800e734 <_vfiprintf_r+0x224>)
 800e690:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e694:	2206      	movs	r2, #6
 800e696:	f7f1 fd9b 	bl	80001d0 <memchr>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d03f      	beq.n	800e71e <_vfiprintf_r+0x20e>
 800e69e:	4b26      	ldr	r3, [pc, #152]	; (800e738 <_vfiprintf_r+0x228>)
 800e6a0:	bb1b      	cbnz	r3, 800e6ea <_vfiprintf_r+0x1da>
 800e6a2:	9b03      	ldr	r3, [sp, #12]
 800e6a4:	3307      	adds	r3, #7
 800e6a6:	f023 0307 	bic.w	r3, r3, #7
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	9303      	str	r3, [sp, #12]
 800e6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6b0:	443b      	add	r3, r7
 800e6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b4:	e768      	b.n	800e588 <_vfiprintf_r+0x78>
 800e6b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	2001      	movs	r0, #1
 800e6be:	e7a6      	b.n	800e60e <_vfiprintf_r+0xfe>
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	3401      	adds	r4, #1
 800e6c4:	9305      	str	r3, [sp, #20]
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	f04f 0c0a 	mov.w	ip, #10
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6d2:	3a30      	subs	r2, #48	; 0x30
 800e6d4:	2a09      	cmp	r2, #9
 800e6d6:	d903      	bls.n	800e6e0 <_vfiprintf_r+0x1d0>
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d0c6      	beq.n	800e66a <_vfiprintf_r+0x15a>
 800e6dc:	9105      	str	r1, [sp, #20]
 800e6de:	e7c4      	b.n	800e66a <_vfiprintf_r+0x15a>
 800e6e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6e4:	4604      	mov	r4, r0
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e7f0      	b.n	800e6cc <_vfiprintf_r+0x1bc>
 800e6ea:	ab03      	add	r3, sp, #12
 800e6ec:	9300      	str	r3, [sp, #0]
 800e6ee:	462a      	mov	r2, r5
 800e6f0:	4b12      	ldr	r3, [pc, #72]	; (800e73c <_vfiprintf_r+0x22c>)
 800e6f2:	a904      	add	r1, sp, #16
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	f7fb ff01 	bl	800a4fc <_printf_float>
 800e6fa:	4607      	mov	r7, r0
 800e6fc:	1c78      	adds	r0, r7, #1
 800e6fe:	d1d6      	bne.n	800e6ae <_vfiprintf_r+0x19e>
 800e700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e702:	07d9      	lsls	r1, r3, #31
 800e704:	d405      	bmi.n	800e712 <_vfiprintf_r+0x202>
 800e706:	89ab      	ldrh	r3, [r5, #12]
 800e708:	059a      	lsls	r2, r3, #22
 800e70a:	d402      	bmi.n	800e712 <_vfiprintf_r+0x202>
 800e70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e70e:	f7fc fe7f 	bl	800b410 <__retarget_lock_release_recursive>
 800e712:	89ab      	ldrh	r3, [r5, #12]
 800e714:	065b      	lsls	r3, r3, #25
 800e716:	f53f af1d 	bmi.w	800e554 <_vfiprintf_r+0x44>
 800e71a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e71c:	e71c      	b.n	800e558 <_vfiprintf_r+0x48>
 800e71e:	ab03      	add	r3, sp, #12
 800e720:	9300      	str	r3, [sp, #0]
 800e722:	462a      	mov	r2, r5
 800e724:	4b05      	ldr	r3, [pc, #20]	; (800e73c <_vfiprintf_r+0x22c>)
 800e726:	a904      	add	r1, sp, #16
 800e728:	4630      	mov	r0, r6
 800e72a:	f7fc f98b 	bl	800aa44 <_printf_i>
 800e72e:	e7e4      	b.n	800e6fa <_vfiprintf_r+0x1ea>
 800e730:	08011fe1 	.word	0x08011fe1
 800e734:	08011feb 	.word	0x08011feb
 800e738:	0800a4fd 	.word	0x0800a4fd
 800e73c:	0800e4ed 	.word	0x0800e4ed
 800e740:	08011fe7 	.word	0x08011fe7

0800e744 <__swbuf_r>:
 800e744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e746:	460e      	mov	r6, r1
 800e748:	4614      	mov	r4, r2
 800e74a:	4605      	mov	r5, r0
 800e74c:	b118      	cbz	r0, 800e756 <__swbuf_r+0x12>
 800e74e:	6a03      	ldr	r3, [r0, #32]
 800e750:	b90b      	cbnz	r3, 800e756 <__swbuf_r+0x12>
 800e752:	f7fc fd35 	bl	800b1c0 <__sinit>
 800e756:	69a3      	ldr	r3, [r4, #24]
 800e758:	60a3      	str	r3, [r4, #8]
 800e75a:	89a3      	ldrh	r3, [r4, #12]
 800e75c:	071a      	lsls	r2, r3, #28
 800e75e:	d525      	bpl.n	800e7ac <__swbuf_r+0x68>
 800e760:	6923      	ldr	r3, [r4, #16]
 800e762:	b31b      	cbz	r3, 800e7ac <__swbuf_r+0x68>
 800e764:	6823      	ldr	r3, [r4, #0]
 800e766:	6922      	ldr	r2, [r4, #16]
 800e768:	1a98      	subs	r0, r3, r2
 800e76a:	6963      	ldr	r3, [r4, #20]
 800e76c:	b2f6      	uxtb	r6, r6
 800e76e:	4283      	cmp	r3, r0
 800e770:	4637      	mov	r7, r6
 800e772:	dc04      	bgt.n	800e77e <__swbuf_r+0x3a>
 800e774:	4621      	mov	r1, r4
 800e776:	4628      	mov	r0, r5
 800e778:	f7ff fa4a 	bl	800dc10 <_fflush_r>
 800e77c:	b9e0      	cbnz	r0, 800e7b8 <__swbuf_r+0x74>
 800e77e:	68a3      	ldr	r3, [r4, #8]
 800e780:	3b01      	subs	r3, #1
 800e782:	60a3      	str	r3, [r4, #8]
 800e784:	6823      	ldr	r3, [r4, #0]
 800e786:	1c5a      	adds	r2, r3, #1
 800e788:	6022      	str	r2, [r4, #0]
 800e78a:	701e      	strb	r6, [r3, #0]
 800e78c:	6962      	ldr	r2, [r4, #20]
 800e78e:	1c43      	adds	r3, r0, #1
 800e790:	429a      	cmp	r2, r3
 800e792:	d004      	beq.n	800e79e <__swbuf_r+0x5a>
 800e794:	89a3      	ldrh	r3, [r4, #12]
 800e796:	07db      	lsls	r3, r3, #31
 800e798:	d506      	bpl.n	800e7a8 <__swbuf_r+0x64>
 800e79a:	2e0a      	cmp	r6, #10
 800e79c:	d104      	bne.n	800e7a8 <__swbuf_r+0x64>
 800e79e:	4621      	mov	r1, r4
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	f7ff fa35 	bl	800dc10 <_fflush_r>
 800e7a6:	b938      	cbnz	r0, 800e7b8 <__swbuf_r+0x74>
 800e7a8:	4638      	mov	r0, r7
 800e7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7ac:	4621      	mov	r1, r4
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	f000 f806 	bl	800e7c0 <__swsetup_r>
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d0d5      	beq.n	800e764 <__swbuf_r+0x20>
 800e7b8:	f04f 37ff 	mov.w	r7, #4294967295
 800e7bc:	e7f4      	b.n	800e7a8 <__swbuf_r+0x64>
	...

0800e7c0 <__swsetup_r>:
 800e7c0:	b538      	push	{r3, r4, r5, lr}
 800e7c2:	4b2a      	ldr	r3, [pc, #168]	; (800e86c <__swsetup_r+0xac>)
 800e7c4:	4605      	mov	r5, r0
 800e7c6:	6818      	ldr	r0, [r3, #0]
 800e7c8:	460c      	mov	r4, r1
 800e7ca:	b118      	cbz	r0, 800e7d4 <__swsetup_r+0x14>
 800e7cc:	6a03      	ldr	r3, [r0, #32]
 800e7ce:	b90b      	cbnz	r3, 800e7d4 <__swsetup_r+0x14>
 800e7d0:	f7fc fcf6 	bl	800b1c0 <__sinit>
 800e7d4:	89a3      	ldrh	r3, [r4, #12]
 800e7d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7da:	0718      	lsls	r0, r3, #28
 800e7dc:	d422      	bmi.n	800e824 <__swsetup_r+0x64>
 800e7de:	06d9      	lsls	r1, r3, #27
 800e7e0:	d407      	bmi.n	800e7f2 <__swsetup_r+0x32>
 800e7e2:	2309      	movs	r3, #9
 800e7e4:	602b      	str	r3, [r5, #0]
 800e7e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7ea:	81a3      	strh	r3, [r4, #12]
 800e7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f0:	e034      	b.n	800e85c <__swsetup_r+0x9c>
 800e7f2:	0758      	lsls	r0, r3, #29
 800e7f4:	d512      	bpl.n	800e81c <__swsetup_r+0x5c>
 800e7f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7f8:	b141      	cbz	r1, 800e80c <__swsetup_r+0x4c>
 800e7fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7fe:	4299      	cmp	r1, r3
 800e800:	d002      	beq.n	800e808 <__swsetup_r+0x48>
 800e802:	4628      	mov	r0, r5
 800e804:	f7fd fc96 	bl	800c134 <_free_r>
 800e808:	2300      	movs	r3, #0
 800e80a:	6363      	str	r3, [r4, #52]	; 0x34
 800e80c:	89a3      	ldrh	r3, [r4, #12]
 800e80e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e812:	81a3      	strh	r3, [r4, #12]
 800e814:	2300      	movs	r3, #0
 800e816:	6063      	str	r3, [r4, #4]
 800e818:	6923      	ldr	r3, [r4, #16]
 800e81a:	6023      	str	r3, [r4, #0]
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	f043 0308 	orr.w	r3, r3, #8
 800e822:	81a3      	strh	r3, [r4, #12]
 800e824:	6923      	ldr	r3, [r4, #16]
 800e826:	b94b      	cbnz	r3, 800e83c <__swsetup_r+0x7c>
 800e828:	89a3      	ldrh	r3, [r4, #12]
 800e82a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e82e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e832:	d003      	beq.n	800e83c <__swsetup_r+0x7c>
 800e834:	4621      	mov	r1, r4
 800e836:	4628      	mov	r0, r5
 800e838:	f000 f884 	bl	800e944 <__smakebuf_r>
 800e83c:	89a0      	ldrh	r0, [r4, #12]
 800e83e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e842:	f010 0301 	ands.w	r3, r0, #1
 800e846:	d00a      	beq.n	800e85e <__swsetup_r+0x9e>
 800e848:	2300      	movs	r3, #0
 800e84a:	60a3      	str	r3, [r4, #8]
 800e84c:	6963      	ldr	r3, [r4, #20]
 800e84e:	425b      	negs	r3, r3
 800e850:	61a3      	str	r3, [r4, #24]
 800e852:	6923      	ldr	r3, [r4, #16]
 800e854:	b943      	cbnz	r3, 800e868 <__swsetup_r+0xa8>
 800e856:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e85a:	d1c4      	bne.n	800e7e6 <__swsetup_r+0x26>
 800e85c:	bd38      	pop	{r3, r4, r5, pc}
 800e85e:	0781      	lsls	r1, r0, #30
 800e860:	bf58      	it	pl
 800e862:	6963      	ldrpl	r3, [r4, #20]
 800e864:	60a3      	str	r3, [r4, #8]
 800e866:	e7f4      	b.n	800e852 <__swsetup_r+0x92>
 800e868:	2000      	movs	r0, #0
 800e86a:	e7f7      	b.n	800e85c <__swsetup_r+0x9c>
 800e86c:	20000064 	.word	0x20000064

0800e870 <_raise_r>:
 800e870:	291f      	cmp	r1, #31
 800e872:	b538      	push	{r3, r4, r5, lr}
 800e874:	4604      	mov	r4, r0
 800e876:	460d      	mov	r5, r1
 800e878:	d904      	bls.n	800e884 <_raise_r+0x14>
 800e87a:	2316      	movs	r3, #22
 800e87c:	6003      	str	r3, [r0, #0]
 800e87e:	f04f 30ff 	mov.w	r0, #4294967295
 800e882:	bd38      	pop	{r3, r4, r5, pc}
 800e884:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e886:	b112      	cbz	r2, 800e88e <_raise_r+0x1e>
 800e888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e88c:	b94b      	cbnz	r3, 800e8a2 <_raise_r+0x32>
 800e88e:	4620      	mov	r0, r4
 800e890:	f000 f830 	bl	800e8f4 <_getpid_r>
 800e894:	462a      	mov	r2, r5
 800e896:	4601      	mov	r1, r0
 800e898:	4620      	mov	r0, r4
 800e89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e89e:	f000 b817 	b.w	800e8d0 <_kill_r>
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d00a      	beq.n	800e8bc <_raise_r+0x4c>
 800e8a6:	1c59      	adds	r1, r3, #1
 800e8a8:	d103      	bne.n	800e8b2 <_raise_r+0x42>
 800e8aa:	2316      	movs	r3, #22
 800e8ac:	6003      	str	r3, [r0, #0]
 800e8ae:	2001      	movs	r0, #1
 800e8b0:	e7e7      	b.n	800e882 <_raise_r+0x12>
 800e8b2:	2400      	movs	r4, #0
 800e8b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	4798      	blx	r3
 800e8bc:	2000      	movs	r0, #0
 800e8be:	e7e0      	b.n	800e882 <_raise_r+0x12>

0800e8c0 <raise>:
 800e8c0:	4b02      	ldr	r3, [pc, #8]	; (800e8cc <raise+0xc>)
 800e8c2:	4601      	mov	r1, r0
 800e8c4:	6818      	ldr	r0, [r3, #0]
 800e8c6:	f7ff bfd3 	b.w	800e870 <_raise_r>
 800e8ca:	bf00      	nop
 800e8cc:	20000064 	.word	0x20000064

0800e8d0 <_kill_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4d07      	ldr	r5, [pc, #28]	; (800e8f0 <_kill_r+0x20>)
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	4611      	mov	r1, r2
 800e8dc:	602b      	str	r3, [r5, #0]
 800e8de:	f7f6 f941 	bl	8004b64 <_kill>
 800e8e2:	1c43      	adds	r3, r0, #1
 800e8e4:	d102      	bne.n	800e8ec <_kill_r+0x1c>
 800e8e6:	682b      	ldr	r3, [r5, #0]
 800e8e8:	b103      	cbz	r3, 800e8ec <_kill_r+0x1c>
 800e8ea:	6023      	str	r3, [r4, #0]
 800e8ec:	bd38      	pop	{r3, r4, r5, pc}
 800e8ee:	bf00      	nop
 800e8f0:	20000b28 	.word	0x20000b28

0800e8f4 <_getpid_r>:
 800e8f4:	f7f6 b92e 	b.w	8004b54 <_getpid>

0800e8f8 <__swhatbuf_r>:
 800e8f8:	b570      	push	{r4, r5, r6, lr}
 800e8fa:	460c      	mov	r4, r1
 800e8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e900:	2900      	cmp	r1, #0
 800e902:	b096      	sub	sp, #88	; 0x58
 800e904:	4615      	mov	r5, r2
 800e906:	461e      	mov	r6, r3
 800e908:	da0d      	bge.n	800e926 <__swhatbuf_r+0x2e>
 800e90a:	89a3      	ldrh	r3, [r4, #12]
 800e90c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e910:	f04f 0100 	mov.w	r1, #0
 800e914:	bf0c      	ite	eq
 800e916:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e91a:	2340      	movne	r3, #64	; 0x40
 800e91c:	2000      	movs	r0, #0
 800e91e:	6031      	str	r1, [r6, #0]
 800e920:	602b      	str	r3, [r5, #0]
 800e922:	b016      	add	sp, #88	; 0x58
 800e924:	bd70      	pop	{r4, r5, r6, pc}
 800e926:	466a      	mov	r2, sp
 800e928:	f000 f848 	bl	800e9bc <_fstat_r>
 800e92c:	2800      	cmp	r0, #0
 800e92e:	dbec      	blt.n	800e90a <__swhatbuf_r+0x12>
 800e930:	9901      	ldr	r1, [sp, #4]
 800e932:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e936:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e93a:	4259      	negs	r1, r3
 800e93c:	4159      	adcs	r1, r3
 800e93e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e942:	e7eb      	b.n	800e91c <__swhatbuf_r+0x24>

0800e944 <__smakebuf_r>:
 800e944:	898b      	ldrh	r3, [r1, #12]
 800e946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e948:	079d      	lsls	r5, r3, #30
 800e94a:	4606      	mov	r6, r0
 800e94c:	460c      	mov	r4, r1
 800e94e:	d507      	bpl.n	800e960 <__smakebuf_r+0x1c>
 800e950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e954:	6023      	str	r3, [r4, #0]
 800e956:	6123      	str	r3, [r4, #16]
 800e958:	2301      	movs	r3, #1
 800e95a:	6163      	str	r3, [r4, #20]
 800e95c:	b002      	add	sp, #8
 800e95e:	bd70      	pop	{r4, r5, r6, pc}
 800e960:	ab01      	add	r3, sp, #4
 800e962:	466a      	mov	r2, sp
 800e964:	f7ff ffc8 	bl	800e8f8 <__swhatbuf_r>
 800e968:	9900      	ldr	r1, [sp, #0]
 800e96a:	4605      	mov	r5, r0
 800e96c:	4630      	mov	r0, r6
 800e96e:	f7fb fc99 	bl	800a2a4 <_malloc_r>
 800e972:	b948      	cbnz	r0, 800e988 <__smakebuf_r+0x44>
 800e974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e978:	059a      	lsls	r2, r3, #22
 800e97a:	d4ef      	bmi.n	800e95c <__smakebuf_r+0x18>
 800e97c:	f023 0303 	bic.w	r3, r3, #3
 800e980:	f043 0302 	orr.w	r3, r3, #2
 800e984:	81a3      	strh	r3, [r4, #12]
 800e986:	e7e3      	b.n	800e950 <__smakebuf_r+0xc>
 800e988:	89a3      	ldrh	r3, [r4, #12]
 800e98a:	6020      	str	r0, [r4, #0]
 800e98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e990:	81a3      	strh	r3, [r4, #12]
 800e992:	9b00      	ldr	r3, [sp, #0]
 800e994:	6163      	str	r3, [r4, #20]
 800e996:	9b01      	ldr	r3, [sp, #4]
 800e998:	6120      	str	r0, [r4, #16]
 800e99a:	b15b      	cbz	r3, 800e9b4 <__smakebuf_r+0x70>
 800e99c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	f000 f81d 	bl	800e9e0 <_isatty_r>
 800e9a6:	b128      	cbz	r0, 800e9b4 <__smakebuf_r+0x70>
 800e9a8:	89a3      	ldrh	r3, [r4, #12]
 800e9aa:	f023 0303 	bic.w	r3, r3, #3
 800e9ae:	f043 0301 	orr.w	r3, r3, #1
 800e9b2:	81a3      	strh	r3, [r4, #12]
 800e9b4:	89a3      	ldrh	r3, [r4, #12]
 800e9b6:	431d      	orrs	r5, r3
 800e9b8:	81a5      	strh	r5, [r4, #12]
 800e9ba:	e7cf      	b.n	800e95c <__smakebuf_r+0x18>

0800e9bc <_fstat_r>:
 800e9bc:	b538      	push	{r3, r4, r5, lr}
 800e9be:	4d07      	ldr	r5, [pc, #28]	; (800e9dc <_fstat_r+0x20>)
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	4608      	mov	r0, r1
 800e9c6:	4611      	mov	r1, r2
 800e9c8:	602b      	str	r3, [r5, #0]
 800e9ca:	f7f6 f92a 	bl	8004c22 <_fstat>
 800e9ce:	1c43      	adds	r3, r0, #1
 800e9d0:	d102      	bne.n	800e9d8 <_fstat_r+0x1c>
 800e9d2:	682b      	ldr	r3, [r5, #0]
 800e9d4:	b103      	cbz	r3, 800e9d8 <_fstat_r+0x1c>
 800e9d6:	6023      	str	r3, [r4, #0]
 800e9d8:	bd38      	pop	{r3, r4, r5, pc}
 800e9da:	bf00      	nop
 800e9dc:	20000b28 	.word	0x20000b28

0800e9e0 <_isatty_r>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	4d06      	ldr	r5, [pc, #24]	; (800e9fc <_isatty_r+0x1c>)
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	4608      	mov	r0, r1
 800e9ea:	602b      	str	r3, [r5, #0]
 800e9ec:	f7f6 f929 	bl	8004c42 <_isatty>
 800e9f0:	1c43      	adds	r3, r0, #1
 800e9f2:	d102      	bne.n	800e9fa <_isatty_r+0x1a>
 800e9f4:	682b      	ldr	r3, [r5, #0]
 800e9f6:	b103      	cbz	r3, 800e9fa <_isatty_r+0x1a>
 800e9f8:	6023      	str	r3, [r4, #0]
 800e9fa:	bd38      	pop	{r3, r4, r5, pc}
 800e9fc:	20000b28 	.word	0x20000b28

0800ea00 <atan2>:
 800ea00:	f000 bda6 	b.w	800f550 <__ieee754_atan2>

0800ea04 <pow>:
 800ea04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea06:	ed2d 8b02 	vpush	{d8}
 800ea0a:	eeb0 8a40 	vmov.f32	s16, s0
 800ea0e:	eef0 8a60 	vmov.f32	s17, s1
 800ea12:	ec55 4b11 	vmov	r4, r5, d1
 800ea16:	f000 fe63 	bl	800f6e0 <__ieee754_pow>
 800ea1a:	4622      	mov	r2, r4
 800ea1c:	462b      	mov	r3, r5
 800ea1e:	4620      	mov	r0, r4
 800ea20:	4629      	mov	r1, r5
 800ea22:	ec57 6b10 	vmov	r6, r7, d0
 800ea26:	f7f2 f881 	bl	8000b2c <__aeabi_dcmpun>
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	d13b      	bne.n	800eaa6 <pow+0xa2>
 800ea2e:	ec51 0b18 	vmov	r0, r1, d8
 800ea32:	2200      	movs	r2, #0
 800ea34:	2300      	movs	r3, #0
 800ea36:	f7f2 f847 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea3a:	b1b8      	cbz	r0, 800ea6c <pow+0x68>
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	2300      	movs	r3, #0
 800ea40:	4620      	mov	r0, r4
 800ea42:	4629      	mov	r1, r5
 800ea44:	f7f2 f840 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d146      	bne.n	800eada <pow+0xd6>
 800ea4c:	ec45 4b10 	vmov	d0, r4, r5
 800ea50:	f000 f902 	bl	800ec58 <finite>
 800ea54:	b338      	cbz	r0, 800eaa6 <pow+0xa2>
 800ea56:	2200      	movs	r2, #0
 800ea58:	2300      	movs	r3, #0
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	f7f2 f83d 	bl	8000adc <__aeabi_dcmplt>
 800ea62:	b300      	cbz	r0, 800eaa6 <pow+0xa2>
 800ea64:	f7fc fca8 	bl	800b3b8 <__errno>
 800ea68:	2322      	movs	r3, #34	; 0x22
 800ea6a:	e01b      	b.n	800eaa4 <pow+0xa0>
 800ea6c:	ec47 6b10 	vmov	d0, r6, r7
 800ea70:	f000 f8f2 	bl	800ec58 <finite>
 800ea74:	b9e0      	cbnz	r0, 800eab0 <pow+0xac>
 800ea76:	eeb0 0a48 	vmov.f32	s0, s16
 800ea7a:	eef0 0a68 	vmov.f32	s1, s17
 800ea7e:	f000 f8eb 	bl	800ec58 <finite>
 800ea82:	b1a8      	cbz	r0, 800eab0 <pow+0xac>
 800ea84:	ec45 4b10 	vmov	d0, r4, r5
 800ea88:	f000 f8e6 	bl	800ec58 <finite>
 800ea8c:	b180      	cbz	r0, 800eab0 <pow+0xac>
 800ea8e:	4632      	mov	r2, r6
 800ea90:	463b      	mov	r3, r7
 800ea92:	4630      	mov	r0, r6
 800ea94:	4639      	mov	r1, r7
 800ea96:	f7f2 f849 	bl	8000b2c <__aeabi_dcmpun>
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	d0e2      	beq.n	800ea64 <pow+0x60>
 800ea9e:	f7fc fc8b 	bl	800b3b8 <__errno>
 800eaa2:	2321      	movs	r3, #33	; 0x21
 800eaa4:	6003      	str	r3, [r0, #0]
 800eaa6:	ecbd 8b02 	vpop	{d8}
 800eaaa:	ec47 6b10 	vmov	d0, r6, r7
 800eaae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eab0:	2200      	movs	r2, #0
 800eab2:	2300      	movs	r3, #0
 800eab4:	4630      	mov	r0, r6
 800eab6:	4639      	mov	r1, r7
 800eab8:	f7f2 f806 	bl	8000ac8 <__aeabi_dcmpeq>
 800eabc:	2800      	cmp	r0, #0
 800eabe:	d0f2      	beq.n	800eaa6 <pow+0xa2>
 800eac0:	eeb0 0a48 	vmov.f32	s0, s16
 800eac4:	eef0 0a68 	vmov.f32	s1, s17
 800eac8:	f000 f8c6 	bl	800ec58 <finite>
 800eacc:	2800      	cmp	r0, #0
 800eace:	d0ea      	beq.n	800eaa6 <pow+0xa2>
 800ead0:	ec45 4b10 	vmov	d0, r4, r5
 800ead4:	f000 f8c0 	bl	800ec58 <finite>
 800ead8:	e7c3      	b.n	800ea62 <pow+0x5e>
 800eada:	4f01      	ldr	r7, [pc, #4]	; (800eae0 <pow+0xdc>)
 800eadc:	2600      	movs	r6, #0
 800eade:	e7e2      	b.n	800eaa6 <pow+0xa2>
 800eae0:	3ff00000 	.word	0x3ff00000

0800eae4 <sqrt>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	ed2d 8b02 	vpush	{d8}
 800eaea:	ec55 4b10 	vmov	r4, r5, d0
 800eaee:	f000 f8bf 	bl	800ec70 <__ieee754_sqrt>
 800eaf2:	4622      	mov	r2, r4
 800eaf4:	462b      	mov	r3, r5
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	4629      	mov	r1, r5
 800eafa:	eeb0 8a40 	vmov.f32	s16, s0
 800eafe:	eef0 8a60 	vmov.f32	s17, s1
 800eb02:	f7f2 f813 	bl	8000b2c <__aeabi_dcmpun>
 800eb06:	b990      	cbnz	r0, 800eb2e <sqrt+0x4a>
 800eb08:	2200      	movs	r2, #0
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	4629      	mov	r1, r5
 800eb10:	f7f1 ffe4 	bl	8000adc <__aeabi_dcmplt>
 800eb14:	b158      	cbz	r0, 800eb2e <sqrt+0x4a>
 800eb16:	f7fc fc4f 	bl	800b3b8 <__errno>
 800eb1a:	2321      	movs	r3, #33	; 0x21
 800eb1c:	6003      	str	r3, [r0, #0]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	2300      	movs	r3, #0
 800eb22:	4610      	mov	r0, r2
 800eb24:	4619      	mov	r1, r3
 800eb26:	f7f1 fe91 	bl	800084c <__aeabi_ddiv>
 800eb2a:	ec41 0b18 	vmov	d8, r0, r1
 800eb2e:	eeb0 0a48 	vmov.f32	s0, s16
 800eb32:	eef0 0a68 	vmov.f32	s1, s17
 800eb36:	ecbd 8b02 	vpop	{d8}
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}
 800eb3c:	0000      	movs	r0, r0
	...

0800eb40 <sin>:
 800eb40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb42:	ec53 2b10 	vmov	r2, r3, d0
 800eb46:	4828      	ldr	r0, [pc, #160]	; (800ebe8 <sin+0xa8>)
 800eb48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eb4c:	4281      	cmp	r1, r0
 800eb4e:	dc07      	bgt.n	800eb60 <sin+0x20>
 800eb50:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ebe0 <sin+0xa0>
 800eb54:	2000      	movs	r0, #0
 800eb56:	b005      	add	sp, #20
 800eb58:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb5c:	f000 ba2c 	b.w	800efb8 <__kernel_sin>
 800eb60:	4822      	ldr	r0, [pc, #136]	; (800ebec <sin+0xac>)
 800eb62:	4281      	cmp	r1, r0
 800eb64:	dd09      	ble.n	800eb7a <sin+0x3a>
 800eb66:	ee10 0a10 	vmov	r0, s0
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	f7f1 fb8c 	bl	8000288 <__aeabi_dsub>
 800eb70:	ec41 0b10 	vmov	d0, r0, r1
 800eb74:	b005      	add	sp, #20
 800eb76:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb7a:	4668      	mov	r0, sp
 800eb7c:	f001 fadc 	bl	8010138 <__ieee754_rem_pio2>
 800eb80:	f000 0003 	and.w	r0, r0, #3
 800eb84:	2801      	cmp	r0, #1
 800eb86:	d00c      	beq.n	800eba2 <sin+0x62>
 800eb88:	2802      	cmp	r0, #2
 800eb8a:	d011      	beq.n	800ebb0 <sin+0x70>
 800eb8c:	b9f0      	cbnz	r0, 800ebcc <sin+0x8c>
 800eb8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb92:	ed9d 0b00 	vldr	d0, [sp]
 800eb96:	2001      	movs	r0, #1
 800eb98:	f000 fa0e 	bl	800efb8 <__kernel_sin>
 800eb9c:	ec51 0b10 	vmov	r0, r1, d0
 800eba0:	e7e6      	b.n	800eb70 <sin+0x30>
 800eba2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eba6:	ed9d 0b00 	vldr	d0, [sp]
 800ebaa:	f000 f93d 	bl	800ee28 <__kernel_cos>
 800ebae:	e7f5      	b.n	800eb9c <sin+0x5c>
 800ebb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebb4:	ed9d 0b00 	vldr	d0, [sp]
 800ebb8:	2001      	movs	r0, #1
 800ebba:	f000 f9fd 	bl	800efb8 <__kernel_sin>
 800ebbe:	ec53 2b10 	vmov	r2, r3, d0
 800ebc2:	ee10 0a10 	vmov	r0, s0
 800ebc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ebca:	e7d1      	b.n	800eb70 <sin+0x30>
 800ebcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebd0:	ed9d 0b00 	vldr	d0, [sp]
 800ebd4:	f000 f928 	bl	800ee28 <__kernel_cos>
 800ebd8:	e7f1      	b.n	800ebbe <sin+0x7e>
 800ebda:	bf00      	nop
 800ebdc:	f3af 8000 	nop.w
	...
 800ebe8:	3fe921fb 	.word	0x3fe921fb
 800ebec:	7fefffff 	.word	0x7fefffff

0800ebf0 <tan>:
 800ebf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebf2:	ec53 2b10 	vmov	r2, r3, d0
 800ebf6:	4816      	ldr	r0, [pc, #88]	; (800ec50 <tan+0x60>)
 800ebf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ebfc:	4281      	cmp	r1, r0
 800ebfe:	dc07      	bgt.n	800ec10 <tan+0x20>
 800ec00:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800ec48 <tan+0x58>
 800ec04:	2001      	movs	r0, #1
 800ec06:	b005      	add	sp, #20
 800ec08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec0c:	f000 ba94 	b.w	800f138 <__kernel_tan>
 800ec10:	4810      	ldr	r0, [pc, #64]	; (800ec54 <tan+0x64>)
 800ec12:	4281      	cmp	r1, r0
 800ec14:	dd09      	ble.n	800ec2a <tan+0x3a>
 800ec16:	ee10 0a10 	vmov	r0, s0
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	f7f1 fb34 	bl	8000288 <__aeabi_dsub>
 800ec20:	ec41 0b10 	vmov	d0, r0, r1
 800ec24:	b005      	add	sp, #20
 800ec26:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec2a:	4668      	mov	r0, sp
 800ec2c:	f001 fa84 	bl	8010138 <__ieee754_rem_pio2>
 800ec30:	0040      	lsls	r0, r0, #1
 800ec32:	f000 0002 	and.w	r0, r0, #2
 800ec36:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec3a:	ed9d 0b00 	vldr	d0, [sp]
 800ec3e:	f1c0 0001 	rsb	r0, r0, #1
 800ec42:	f000 fa79 	bl	800f138 <__kernel_tan>
 800ec46:	e7ed      	b.n	800ec24 <tan+0x34>
	...
 800ec50:	3fe921fb 	.word	0x3fe921fb
 800ec54:	7fefffff 	.word	0x7fefffff

0800ec58 <finite>:
 800ec58:	b082      	sub	sp, #8
 800ec5a:	ed8d 0b00 	vstr	d0, [sp]
 800ec5e:	9801      	ldr	r0, [sp, #4]
 800ec60:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ec64:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ec68:	0fc0      	lsrs	r0, r0, #31
 800ec6a:	b002      	add	sp, #8
 800ec6c:	4770      	bx	lr
	...

0800ec70 <__ieee754_sqrt>:
 800ec70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	ec55 4b10 	vmov	r4, r5, d0
 800ec78:	4e67      	ldr	r6, [pc, #412]	; (800ee18 <__ieee754_sqrt+0x1a8>)
 800ec7a:	43ae      	bics	r6, r5
 800ec7c:	ee10 0a10 	vmov	r0, s0
 800ec80:	ee10 2a10 	vmov	r2, s0
 800ec84:	4629      	mov	r1, r5
 800ec86:	462b      	mov	r3, r5
 800ec88:	d10d      	bne.n	800eca6 <__ieee754_sqrt+0x36>
 800ec8a:	f7f1 fcb5 	bl	80005f8 <__aeabi_dmul>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	460b      	mov	r3, r1
 800ec92:	4620      	mov	r0, r4
 800ec94:	4629      	mov	r1, r5
 800ec96:	f7f1 faf9 	bl	800028c <__adddf3>
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	460d      	mov	r5, r1
 800ec9e:	ec45 4b10 	vmov	d0, r4, r5
 800eca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca6:	2d00      	cmp	r5, #0
 800eca8:	dc0b      	bgt.n	800ecc2 <__ieee754_sqrt+0x52>
 800ecaa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ecae:	4326      	orrs	r6, r4
 800ecb0:	d0f5      	beq.n	800ec9e <__ieee754_sqrt+0x2e>
 800ecb2:	b135      	cbz	r5, 800ecc2 <__ieee754_sqrt+0x52>
 800ecb4:	f7f1 fae8 	bl	8000288 <__aeabi_dsub>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	f7f1 fdc6 	bl	800084c <__aeabi_ddiv>
 800ecc0:	e7eb      	b.n	800ec9a <__ieee754_sqrt+0x2a>
 800ecc2:	1509      	asrs	r1, r1, #20
 800ecc4:	f000 808d 	beq.w	800ede2 <__ieee754_sqrt+0x172>
 800ecc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eccc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ecd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecd4:	07c9      	lsls	r1, r1, #31
 800ecd6:	bf5c      	itt	pl
 800ecd8:	005b      	lslpl	r3, r3, #1
 800ecda:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ecde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ece2:	bf58      	it	pl
 800ece4:	0052      	lslpl	r2, r2, #1
 800ece6:	2500      	movs	r5, #0
 800ece8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ecec:	1076      	asrs	r6, r6, #1
 800ecee:	0052      	lsls	r2, r2, #1
 800ecf0:	f04f 0e16 	mov.w	lr, #22
 800ecf4:	46ac      	mov	ip, r5
 800ecf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ecfa:	eb0c 0001 	add.w	r0, ip, r1
 800ecfe:	4298      	cmp	r0, r3
 800ed00:	bfde      	ittt	le
 800ed02:	1a1b      	suble	r3, r3, r0
 800ed04:	eb00 0c01 	addle.w	ip, r0, r1
 800ed08:	186d      	addle	r5, r5, r1
 800ed0a:	005b      	lsls	r3, r3, #1
 800ed0c:	f1be 0e01 	subs.w	lr, lr, #1
 800ed10:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ed14:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ed18:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ed1c:	d1ed      	bne.n	800ecfa <__ieee754_sqrt+0x8a>
 800ed1e:	4674      	mov	r4, lr
 800ed20:	2720      	movs	r7, #32
 800ed22:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ed26:	4563      	cmp	r3, ip
 800ed28:	eb01 000e 	add.w	r0, r1, lr
 800ed2c:	dc02      	bgt.n	800ed34 <__ieee754_sqrt+0xc4>
 800ed2e:	d113      	bne.n	800ed58 <__ieee754_sqrt+0xe8>
 800ed30:	4290      	cmp	r0, r2
 800ed32:	d811      	bhi.n	800ed58 <__ieee754_sqrt+0xe8>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	eb00 0e01 	add.w	lr, r0, r1
 800ed3a:	da57      	bge.n	800edec <__ieee754_sqrt+0x17c>
 800ed3c:	f1be 0f00 	cmp.w	lr, #0
 800ed40:	db54      	blt.n	800edec <__ieee754_sqrt+0x17c>
 800ed42:	f10c 0801 	add.w	r8, ip, #1
 800ed46:	eba3 030c 	sub.w	r3, r3, ip
 800ed4a:	4290      	cmp	r0, r2
 800ed4c:	bf88      	it	hi
 800ed4e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ed52:	1a12      	subs	r2, r2, r0
 800ed54:	440c      	add	r4, r1
 800ed56:	46c4      	mov	ip, r8
 800ed58:	005b      	lsls	r3, r3, #1
 800ed5a:	3f01      	subs	r7, #1
 800ed5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ed60:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ed64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ed68:	d1dd      	bne.n	800ed26 <__ieee754_sqrt+0xb6>
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	d01b      	beq.n	800eda6 <__ieee754_sqrt+0x136>
 800ed6e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ee1c <__ieee754_sqrt+0x1ac>
 800ed72:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ee20 <__ieee754_sqrt+0x1b0>
 800ed76:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed7a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ed7e:	f7f1 fa83 	bl	8000288 <__aeabi_dsub>
 800ed82:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed86:	4602      	mov	r2, r0
 800ed88:	460b      	mov	r3, r1
 800ed8a:	4640      	mov	r0, r8
 800ed8c:	4649      	mov	r1, r9
 800ed8e:	f7f1 feaf 	bl	8000af0 <__aeabi_dcmple>
 800ed92:	b140      	cbz	r0, 800eda6 <__ieee754_sqrt+0x136>
 800ed94:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ed98:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed9c:	e9db 2300 	ldrd	r2, r3, [fp]
 800eda0:	d126      	bne.n	800edf0 <__ieee754_sqrt+0x180>
 800eda2:	3501      	adds	r5, #1
 800eda4:	463c      	mov	r4, r7
 800eda6:	106a      	asrs	r2, r5, #1
 800eda8:	0863      	lsrs	r3, r4, #1
 800edaa:	07e9      	lsls	r1, r5, #31
 800edac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800edb0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800edb4:	bf48      	it	mi
 800edb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800edba:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800edbe:	461c      	mov	r4, r3
 800edc0:	e76d      	b.n	800ec9e <__ieee754_sqrt+0x2e>
 800edc2:	0ad3      	lsrs	r3, r2, #11
 800edc4:	3815      	subs	r0, #21
 800edc6:	0552      	lsls	r2, r2, #21
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d0fa      	beq.n	800edc2 <__ieee754_sqrt+0x152>
 800edcc:	02dc      	lsls	r4, r3, #11
 800edce:	d50a      	bpl.n	800ede6 <__ieee754_sqrt+0x176>
 800edd0:	f1c1 0420 	rsb	r4, r1, #32
 800edd4:	fa22 f404 	lsr.w	r4, r2, r4
 800edd8:	1e4d      	subs	r5, r1, #1
 800edda:	408a      	lsls	r2, r1
 800eddc:	4323      	orrs	r3, r4
 800edde:	1b41      	subs	r1, r0, r5
 800ede0:	e772      	b.n	800ecc8 <__ieee754_sqrt+0x58>
 800ede2:	4608      	mov	r0, r1
 800ede4:	e7f0      	b.n	800edc8 <__ieee754_sqrt+0x158>
 800ede6:	005b      	lsls	r3, r3, #1
 800ede8:	3101      	adds	r1, #1
 800edea:	e7ef      	b.n	800edcc <__ieee754_sqrt+0x15c>
 800edec:	46e0      	mov	r8, ip
 800edee:	e7aa      	b.n	800ed46 <__ieee754_sqrt+0xd6>
 800edf0:	f7f1 fa4c 	bl	800028c <__adddf3>
 800edf4:	e9da 8900 	ldrd	r8, r9, [sl]
 800edf8:	4602      	mov	r2, r0
 800edfa:	460b      	mov	r3, r1
 800edfc:	4640      	mov	r0, r8
 800edfe:	4649      	mov	r1, r9
 800ee00:	f7f1 fe6c 	bl	8000adc <__aeabi_dcmplt>
 800ee04:	b120      	cbz	r0, 800ee10 <__ieee754_sqrt+0x1a0>
 800ee06:	1ca0      	adds	r0, r4, #2
 800ee08:	bf08      	it	eq
 800ee0a:	3501      	addeq	r5, #1
 800ee0c:	3402      	adds	r4, #2
 800ee0e:	e7ca      	b.n	800eda6 <__ieee754_sqrt+0x136>
 800ee10:	3401      	adds	r4, #1
 800ee12:	f024 0401 	bic.w	r4, r4, #1
 800ee16:	e7c6      	b.n	800eda6 <__ieee754_sqrt+0x136>
 800ee18:	7ff00000 	.word	0x7ff00000
 800ee1c:	200001d8 	.word	0x200001d8
 800ee20:	200001e0 	.word	0x200001e0
 800ee24:	00000000 	.word	0x00000000

0800ee28 <__kernel_cos>:
 800ee28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee2c:	ec57 6b10 	vmov	r6, r7, d0
 800ee30:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ee34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ee38:	ed8d 1b00 	vstr	d1, [sp]
 800ee3c:	da07      	bge.n	800ee4e <__kernel_cos+0x26>
 800ee3e:	ee10 0a10 	vmov	r0, s0
 800ee42:	4639      	mov	r1, r7
 800ee44:	f7f1 fe88 	bl	8000b58 <__aeabi_d2iz>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	f000 8088 	beq.w	800ef5e <__kernel_cos+0x136>
 800ee4e:	4632      	mov	r2, r6
 800ee50:	463b      	mov	r3, r7
 800ee52:	4630      	mov	r0, r6
 800ee54:	4639      	mov	r1, r7
 800ee56:	f7f1 fbcf 	bl	80005f8 <__aeabi_dmul>
 800ee5a:	4b51      	ldr	r3, [pc, #324]	; (800efa0 <__kernel_cos+0x178>)
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	4604      	mov	r4, r0
 800ee60:	460d      	mov	r5, r1
 800ee62:	f7f1 fbc9 	bl	80005f8 <__aeabi_dmul>
 800ee66:	a340      	add	r3, pc, #256	; (adr r3, 800ef68 <__kernel_cos+0x140>)
 800ee68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6c:	4682      	mov	sl, r0
 800ee6e:	468b      	mov	fp, r1
 800ee70:	4620      	mov	r0, r4
 800ee72:	4629      	mov	r1, r5
 800ee74:	f7f1 fbc0 	bl	80005f8 <__aeabi_dmul>
 800ee78:	a33d      	add	r3, pc, #244	; (adr r3, 800ef70 <__kernel_cos+0x148>)
 800ee7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7e:	f7f1 fa05 	bl	800028c <__adddf3>
 800ee82:	4622      	mov	r2, r4
 800ee84:	462b      	mov	r3, r5
 800ee86:	f7f1 fbb7 	bl	80005f8 <__aeabi_dmul>
 800ee8a:	a33b      	add	r3, pc, #236	; (adr r3, 800ef78 <__kernel_cos+0x150>)
 800ee8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee90:	f7f1 f9fa 	bl	8000288 <__aeabi_dsub>
 800ee94:	4622      	mov	r2, r4
 800ee96:	462b      	mov	r3, r5
 800ee98:	f7f1 fbae 	bl	80005f8 <__aeabi_dmul>
 800ee9c:	a338      	add	r3, pc, #224	; (adr r3, 800ef80 <__kernel_cos+0x158>)
 800ee9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea2:	f7f1 f9f3 	bl	800028c <__adddf3>
 800eea6:	4622      	mov	r2, r4
 800eea8:	462b      	mov	r3, r5
 800eeaa:	f7f1 fba5 	bl	80005f8 <__aeabi_dmul>
 800eeae:	a336      	add	r3, pc, #216	; (adr r3, 800ef88 <__kernel_cos+0x160>)
 800eeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb4:	f7f1 f9e8 	bl	8000288 <__aeabi_dsub>
 800eeb8:	4622      	mov	r2, r4
 800eeba:	462b      	mov	r3, r5
 800eebc:	f7f1 fb9c 	bl	80005f8 <__aeabi_dmul>
 800eec0:	a333      	add	r3, pc, #204	; (adr r3, 800ef90 <__kernel_cos+0x168>)
 800eec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec6:	f7f1 f9e1 	bl	800028c <__adddf3>
 800eeca:	4622      	mov	r2, r4
 800eecc:	462b      	mov	r3, r5
 800eece:	f7f1 fb93 	bl	80005f8 <__aeabi_dmul>
 800eed2:	4622      	mov	r2, r4
 800eed4:	462b      	mov	r3, r5
 800eed6:	f7f1 fb8f 	bl	80005f8 <__aeabi_dmul>
 800eeda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eede:	4604      	mov	r4, r0
 800eee0:	460d      	mov	r5, r1
 800eee2:	4630      	mov	r0, r6
 800eee4:	4639      	mov	r1, r7
 800eee6:	f7f1 fb87 	bl	80005f8 <__aeabi_dmul>
 800eeea:	460b      	mov	r3, r1
 800eeec:	4602      	mov	r2, r0
 800eeee:	4629      	mov	r1, r5
 800eef0:	4620      	mov	r0, r4
 800eef2:	f7f1 f9c9 	bl	8000288 <__aeabi_dsub>
 800eef6:	4b2b      	ldr	r3, [pc, #172]	; (800efa4 <__kernel_cos+0x17c>)
 800eef8:	4598      	cmp	r8, r3
 800eefa:	4606      	mov	r6, r0
 800eefc:	460f      	mov	r7, r1
 800eefe:	dc10      	bgt.n	800ef22 <__kernel_cos+0xfa>
 800ef00:	4602      	mov	r2, r0
 800ef02:	460b      	mov	r3, r1
 800ef04:	4650      	mov	r0, sl
 800ef06:	4659      	mov	r1, fp
 800ef08:	f7f1 f9be 	bl	8000288 <__aeabi_dsub>
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	4926      	ldr	r1, [pc, #152]	; (800efa8 <__kernel_cos+0x180>)
 800ef10:	4602      	mov	r2, r0
 800ef12:	2000      	movs	r0, #0
 800ef14:	f7f1 f9b8 	bl	8000288 <__aeabi_dsub>
 800ef18:	ec41 0b10 	vmov	d0, r0, r1
 800ef1c:	b003      	add	sp, #12
 800ef1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef22:	4b22      	ldr	r3, [pc, #136]	; (800efac <__kernel_cos+0x184>)
 800ef24:	4920      	ldr	r1, [pc, #128]	; (800efa8 <__kernel_cos+0x180>)
 800ef26:	4598      	cmp	r8, r3
 800ef28:	bfcc      	ite	gt
 800ef2a:	4d21      	ldrgt	r5, [pc, #132]	; (800efb0 <__kernel_cos+0x188>)
 800ef2c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ef30:	2400      	movs	r4, #0
 800ef32:	4622      	mov	r2, r4
 800ef34:	462b      	mov	r3, r5
 800ef36:	2000      	movs	r0, #0
 800ef38:	f7f1 f9a6 	bl	8000288 <__aeabi_dsub>
 800ef3c:	4622      	mov	r2, r4
 800ef3e:	4680      	mov	r8, r0
 800ef40:	4689      	mov	r9, r1
 800ef42:	462b      	mov	r3, r5
 800ef44:	4650      	mov	r0, sl
 800ef46:	4659      	mov	r1, fp
 800ef48:	f7f1 f99e 	bl	8000288 <__aeabi_dsub>
 800ef4c:	4632      	mov	r2, r6
 800ef4e:	463b      	mov	r3, r7
 800ef50:	f7f1 f99a 	bl	8000288 <__aeabi_dsub>
 800ef54:	4602      	mov	r2, r0
 800ef56:	460b      	mov	r3, r1
 800ef58:	4640      	mov	r0, r8
 800ef5a:	4649      	mov	r1, r9
 800ef5c:	e7da      	b.n	800ef14 <__kernel_cos+0xec>
 800ef5e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ef98 <__kernel_cos+0x170>
 800ef62:	e7db      	b.n	800ef1c <__kernel_cos+0xf4>
 800ef64:	f3af 8000 	nop.w
 800ef68:	be8838d4 	.word	0xbe8838d4
 800ef6c:	bda8fae9 	.word	0xbda8fae9
 800ef70:	bdb4b1c4 	.word	0xbdb4b1c4
 800ef74:	3e21ee9e 	.word	0x3e21ee9e
 800ef78:	809c52ad 	.word	0x809c52ad
 800ef7c:	3e927e4f 	.word	0x3e927e4f
 800ef80:	19cb1590 	.word	0x19cb1590
 800ef84:	3efa01a0 	.word	0x3efa01a0
 800ef88:	16c15177 	.word	0x16c15177
 800ef8c:	3f56c16c 	.word	0x3f56c16c
 800ef90:	5555554c 	.word	0x5555554c
 800ef94:	3fa55555 	.word	0x3fa55555
 800ef98:	00000000 	.word	0x00000000
 800ef9c:	3ff00000 	.word	0x3ff00000
 800efa0:	3fe00000 	.word	0x3fe00000
 800efa4:	3fd33332 	.word	0x3fd33332
 800efa8:	3ff00000 	.word	0x3ff00000
 800efac:	3fe90000 	.word	0x3fe90000
 800efb0:	3fd20000 	.word	0x3fd20000
 800efb4:	00000000 	.word	0x00000000

0800efb8 <__kernel_sin>:
 800efb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efbc:	ed2d 8b04 	vpush	{d8-d9}
 800efc0:	eeb0 8a41 	vmov.f32	s16, s2
 800efc4:	eef0 8a61 	vmov.f32	s17, s3
 800efc8:	ec55 4b10 	vmov	r4, r5, d0
 800efcc:	b083      	sub	sp, #12
 800efce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800efd2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800efd6:	9001      	str	r0, [sp, #4]
 800efd8:	da06      	bge.n	800efe8 <__kernel_sin+0x30>
 800efda:	ee10 0a10 	vmov	r0, s0
 800efde:	4629      	mov	r1, r5
 800efe0:	f7f1 fdba 	bl	8000b58 <__aeabi_d2iz>
 800efe4:	2800      	cmp	r0, #0
 800efe6:	d051      	beq.n	800f08c <__kernel_sin+0xd4>
 800efe8:	4622      	mov	r2, r4
 800efea:	462b      	mov	r3, r5
 800efec:	4620      	mov	r0, r4
 800efee:	4629      	mov	r1, r5
 800eff0:	f7f1 fb02 	bl	80005f8 <__aeabi_dmul>
 800eff4:	4682      	mov	sl, r0
 800eff6:	468b      	mov	fp, r1
 800eff8:	4602      	mov	r2, r0
 800effa:	460b      	mov	r3, r1
 800effc:	4620      	mov	r0, r4
 800effe:	4629      	mov	r1, r5
 800f000:	f7f1 fafa 	bl	80005f8 <__aeabi_dmul>
 800f004:	a341      	add	r3, pc, #260	; (adr r3, 800f10c <__kernel_sin+0x154>)
 800f006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00a:	4680      	mov	r8, r0
 800f00c:	4689      	mov	r9, r1
 800f00e:	4650      	mov	r0, sl
 800f010:	4659      	mov	r1, fp
 800f012:	f7f1 faf1 	bl	80005f8 <__aeabi_dmul>
 800f016:	a33f      	add	r3, pc, #252	; (adr r3, 800f114 <__kernel_sin+0x15c>)
 800f018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f01c:	f7f1 f934 	bl	8000288 <__aeabi_dsub>
 800f020:	4652      	mov	r2, sl
 800f022:	465b      	mov	r3, fp
 800f024:	f7f1 fae8 	bl	80005f8 <__aeabi_dmul>
 800f028:	a33c      	add	r3, pc, #240	; (adr r3, 800f11c <__kernel_sin+0x164>)
 800f02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02e:	f7f1 f92d 	bl	800028c <__adddf3>
 800f032:	4652      	mov	r2, sl
 800f034:	465b      	mov	r3, fp
 800f036:	f7f1 fadf 	bl	80005f8 <__aeabi_dmul>
 800f03a:	a33a      	add	r3, pc, #232	; (adr r3, 800f124 <__kernel_sin+0x16c>)
 800f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f040:	f7f1 f922 	bl	8000288 <__aeabi_dsub>
 800f044:	4652      	mov	r2, sl
 800f046:	465b      	mov	r3, fp
 800f048:	f7f1 fad6 	bl	80005f8 <__aeabi_dmul>
 800f04c:	a337      	add	r3, pc, #220	; (adr r3, 800f12c <__kernel_sin+0x174>)
 800f04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f052:	f7f1 f91b 	bl	800028c <__adddf3>
 800f056:	9b01      	ldr	r3, [sp, #4]
 800f058:	4606      	mov	r6, r0
 800f05a:	460f      	mov	r7, r1
 800f05c:	b9eb      	cbnz	r3, 800f09a <__kernel_sin+0xe2>
 800f05e:	4602      	mov	r2, r0
 800f060:	460b      	mov	r3, r1
 800f062:	4650      	mov	r0, sl
 800f064:	4659      	mov	r1, fp
 800f066:	f7f1 fac7 	bl	80005f8 <__aeabi_dmul>
 800f06a:	a325      	add	r3, pc, #148	; (adr r3, 800f100 <__kernel_sin+0x148>)
 800f06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f070:	f7f1 f90a 	bl	8000288 <__aeabi_dsub>
 800f074:	4642      	mov	r2, r8
 800f076:	464b      	mov	r3, r9
 800f078:	f7f1 fabe 	bl	80005f8 <__aeabi_dmul>
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
 800f080:	4620      	mov	r0, r4
 800f082:	4629      	mov	r1, r5
 800f084:	f7f1 f902 	bl	800028c <__adddf3>
 800f088:	4604      	mov	r4, r0
 800f08a:	460d      	mov	r5, r1
 800f08c:	ec45 4b10 	vmov	d0, r4, r5
 800f090:	b003      	add	sp, #12
 800f092:	ecbd 8b04 	vpop	{d8-d9}
 800f096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f09a:	4b1b      	ldr	r3, [pc, #108]	; (800f108 <__kernel_sin+0x150>)
 800f09c:	ec51 0b18 	vmov	r0, r1, d8
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f7f1 faa9 	bl	80005f8 <__aeabi_dmul>
 800f0a6:	4632      	mov	r2, r6
 800f0a8:	ec41 0b19 	vmov	d9, r0, r1
 800f0ac:	463b      	mov	r3, r7
 800f0ae:	4640      	mov	r0, r8
 800f0b0:	4649      	mov	r1, r9
 800f0b2:	f7f1 faa1 	bl	80005f8 <__aeabi_dmul>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	ec51 0b19 	vmov	r0, r1, d9
 800f0be:	f7f1 f8e3 	bl	8000288 <__aeabi_dsub>
 800f0c2:	4652      	mov	r2, sl
 800f0c4:	465b      	mov	r3, fp
 800f0c6:	f7f1 fa97 	bl	80005f8 <__aeabi_dmul>
 800f0ca:	ec53 2b18 	vmov	r2, r3, d8
 800f0ce:	f7f1 f8db 	bl	8000288 <__aeabi_dsub>
 800f0d2:	a30b      	add	r3, pc, #44	; (adr r3, 800f100 <__kernel_sin+0x148>)
 800f0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d8:	4606      	mov	r6, r0
 800f0da:	460f      	mov	r7, r1
 800f0dc:	4640      	mov	r0, r8
 800f0de:	4649      	mov	r1, r9
 800f0e0:	f7f1 fa8a 	bl	80005f8 <__aeabi_dmul>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	4639      	mov	r1, r7
 800f0ec:	f7f1 f8ce 	bl	800028c <__adddf3>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	4629      	mov	r1, r5
 800f0f8:	f7f1 f8c6 	bl	8000288 <__aeabi_dsub>
 800f0fc:	e7c4      	b.n	800f088 <__kernel_sin+0xd0>
 800f0fe:	bf00      	nop
 800f100:	55555549 	.word	0x55555549
 800f104:	3fc55555 	.word	0x3fc55555
 800f108:	3fe00000 	.word	0x3fe00000
 800f10c:	5acfd57c 	.word	0x5acfd57c
 800f110:	3de5d93a 	.word	0x3de5d93a
 800f114:	8a2b9ceb 	.word	0x8a2b9ceb
 800f118:	3e5ae5e6 	.word	0x3e5ae5e6
 800f11c:	57b1fe7d 	.word	0x57b1fe7d
 800f120:	3ec71de3 	.word	0x3ec71de3
 800f124:	19c161d5 	.word	0x19c161d5
 800f128:	3f2a01a0 	.word	0x3f2a01a0
 800f12c:	1110f8a6 	.word	0x1110f8a6
 800f130:	3f811111 	.word	0x3f811111
 800f134:	00000000 	.word	0x00000000

0800f138 <__kernel_tan>:
 800f138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13c:	ed2d 8b06 	vpush	{d8-d10}
 800f140:	ec5b ab10 	vmov	sl, fp, d0
 800f144:	4be0      	ldr	r3, [pc, #896]	; (800f4c8 <__kernel_tan+0x390>)
 800f146:	b083      	sub	sp, #12
 800f148:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800f14c:	429f      	cmp	r7, r3
 800f14e:	ec59 8b11 	vmov	r8, r9, d1
 800f152:	4606      	mov	r6, r0
 800f154:	f8cd b000 	str.w	fp, [sp]
 800f158:	dc61      	bgt.n	800f21e <__kernel_tan+0xe6>
 800f15a:	ee10 0a10 	vmov	r0, s0
 800f15e:	4659      	mov	r1, fp
 800f160:	f7f1 fcfa 	bl	8000b58 <__aeabi_d2iz>
 800f164:	4605      	mov	r5, r0
 800f166:	2800      	cmp	r0, #0
 800f168:	f040 8083 	bne.w	800f272 <__kernel_tan+0x13a>
 800f16c:	1c73      	adds	r3, r6, #1
 800f16e:	4652      	mov	r2, sl
 800f170:	4313      	orrs	r3, r2
 800f172:	433b      	orrs	r3, r7
 800f174:	d112      	bne.n	800f19c <__kernel_tan+0x64>
 800f176:	ec4b ab10 	vmov	d0, sl, fp
 800f17a:	f001 fb85 	bl	8010888 <fabs>
 800f17e:	49d3      	ldr	r1, [pc, #844]	; (800f4cc <__kernel_tan+0x394>)
 800f180:	ec53 2b10 	vmov	r2, r3, d0
 800f184:	2000      	movs	r0, #0
 800f186:	f7f1 fb61 	bl	800084c <__aeabi_ddiv>
 800f18a:	4682      	mov	sl, r0
 800f18c:	468b      	mov	fp, r1
 800f18e:	ec4b ab10 	vmov	d0, sl, fp
 800f192:	b003      	add	sp, #12
 800f194:	ecbd 8b06 	vpop	{d8-d10}
 800f198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19c:	2e01      	cmp	r6, #1
 800f19e:	d0f6      	beq.n	800f18e <__kernel_tan+0x56>
 800f1a0:	4642      	mov	r2, r8
 800f1a2:	464b      	mov	r3, r9
 800f1a4:	4650      	mov	r0, sl
 800f1a6:	4659      	mov	r1, fp
 800f1a8:	f7f1 f870 	bl	800028c <__adddf3>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	460f      	mov	r7, r1
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	49c6      	ldr	r1, [pc, #792]	; (800f4d0 <__kernel_tan+0x398>)
 800f1b6:	f7f1 fb49 	bl	800084c <__aeabi_ddiv>
 800f1ba:	e9cd 0100 	strd	r0, r1, [sp]
 800f1be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1c2:	462e      	mov	r6, r5
 800f1c4:	4652      	mov	r2, sl
 800f1c6:	462c      	mov	r4, r5
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	461d      	mov	r5, r3
 800f1cc:	4639      	mov	r1, r7
 800f1ce:	465b      	mov	r3, fp
 800f1d0:	f7f1 f85a 	bl	8000288 <__aeabi_dsub>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	4640      	mov	r0, r8
 800f1da:	4649      	mov	r1, r9
 800f1dc:	f7f1 f854 	bl	8000288 <__aeabi_dsub>
 800f1e0:	4632      	mov	r2, r6
 800f1e2:	462b      	mov	r3, r5
 800f1e4:	f7f1 fa08 	bl	80005f8 <__aeabi_dmul>
 800f1e8:	4632      	mov	r2, r6
 800f1ea:	4680      	mov	r8, r0
 800f1ec:	4689      	mov	r9, r1
 800f1ee:	462b      	mov	r3, r5
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	4639      	mov	r1, r7
 800f1f4:	f7f1 fa00 	bl	80005f8 <__aeabi_dmul>
 800f1f8:	4bb4      	ldr	r3, [pc, #720]	; (800f4cc <__kernel_tan+0x394>)
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f7f1 f846 	bl	800028c <__adddf3>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	4640      	mov	r0, r8
 800f206:	4649      	mov	r1, r9
 800f208:	f7f1 f840 	bl	800028c <__adddf3>
 800f20c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f210:	f7f1 f9f2 	bl	80005f8 <__aeabi_dmul>
 800f214:	4622      	mov	r2, r4
 800f216:	462b      	mov	r3, r5
 800f218:	f7f1 f838 	bl	800028c <__adddf3>
 800f21c:	e7b5      	b.n	800f18a <__kernel_tan+0x52>
 800f21e:	4bad      	ldr	r3, [pc, #692]	; (800f4d4 <__kernel_tan+0x39c>)
 800f220:	429f      	cmp	r7, r3
 800f222:	dd26      	ble.n	800f272 <__kernel_tan+0x13a>
 800f224:	9b00      	ldr	r3, [sp, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	da09      	bge.n	800f23e <__kernel_tan+0x106>
 800f22a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f22e:	469b      	mov	fp, r3
 800f230:	ee10 aa10 	vmov	sl, s0
 800f234:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f238:	ee11 8a10 	vmov	r8, s2
 800f23c:	4699      	mov	r9, r3
 800f23e:	4652      	mov	r2, sl
 800f240:	465b      	mov	r3, fp
 800f242:	a183      	add	r1, pc, #524	; (adr r1, 800f450 <__kernel_tan+0x318>)
 800f244:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f248:	f7f1 f81e 	bl	8000288 <__aeabi_dsub>
 800f24c:	4642      	mov	r2, r8
 800f24e:	464b      	mov	r3, r9
 800f250:	4604      	mov	r4, r0
 800f252:	460d      	mov	r5, r1
 800f254:	a180      	add	r1, pc, #512	; (adr r1, 800f458 <__kernel_tan+0x320>)
 800f256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f25a:	f7f1 f815 	bl	8000288 <__aeabi_dsub>
 800f25e:	4622      	mov	r2, r4
 800f260:	462b      	mov	r3, r5
 800f262:	f7f1 f813 	bl	800028c <__adddf3>
 800f266:	f04f 0800 	mov.w	r8, #0
 800f26a:	4682      	mov	sl, r0
 800f26c:	468b      	mov	fp, r1
 800f26e:	f04f 0900 	mov.w	r9, #0
 800f272:	4652      	mov	r2, sl
 800f274:	465b      	mov	r3, fp
 800f276:	4650      	mov	r0, sl
 800f278:	4659      	mov	r1, fp
 800f27a:	f7f1 f9bd 	bl	80005f8 <__aeabi_dmul>
 800f27e:	4602      	mov	r2, r0
 800f280:	460b      	mov	r3, r1
 800f282:	ec43 2b18 	vmov	d8, r2, r3
 800f286:	f7f1 f9b7 	bl	80005f8 <__aeabi_dmul>
 800f28a:	ec53 2b18 	vmov	r2, r3, d8
 800f28e:	4604      	mov	r4, r0
 800f290:	460d      	mov	r5, r1
 800f292:	4650      	mov	r0, sl
 800f294:	4659      	mov	r1, fp
 800f296:	f7f1 f9af 	bl	80005f8 <__aeabi_dmul>
 800f29a:	a371      	add	r3, pc, #452	; (adr r3, 800f460 <__kernel_tan+0x328>)
 800f29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a0:	ec41 0b19 	vmov	d9, r0, r1
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	4629      	mov	r1, r5
 800f2a8:	f7f1 f9a6 	bl	80005f8 <__aeabi_dmul>
 800f2ac:	a36e      	add	r3, pc, #440	; (adr r3, 800f468 <__kernel_tan+0x330>)
 800f2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b2:	f7f0 ffeb 	bl	800028c <__adddf3>
 800f2b6:	4622      	mov	r2, r4
 800f2b8:	462b      	mov	r3, r5
 800f2ba:	f7f1 f99d 	bl	80005f8 <__aeabi_dmul>
 800f2be:	a36c      	add	r3, pc, #432	; (adr r3, 800f470 <__kernel_tan+0x338>)
 800f2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c4:	f7f0 ffe2 	bl	800028c <__adddf3>
 800f2c8:	4622      	mov	r2, r4
 800f2ca:	462b      	mov	r3, r5
 800f2cc:	f7f1 f994 	bl	80005f8 <__aeabi_dmul>
 800f2d0:	a369      	add	r3, pc, #420	; (adr r3, 800f478 <__kernel_tan+0x340>)
 800f2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d6:	f7f0 ffd9 	bl	800028c <__adddf3>
 800f2da:	4622      	mov	r2, r4
 800f2dc:	462b      	mov	r3, r5
 800f2de:	f7f1 f98b 	bl	80005f8 <__aeabi_dmul>
 800f2e2:	a367      	add	r3, pc, #412	; (adr r3, 800f480 <__kernel_tan+0x348>)
 800f2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e8:	f7f0 ffd0 	bl	800028c <__adddf3>
 800f2ec:	4622      	mov	r2, r4
 800f2ee:	462b      	mov	r3, r5
 800f2f0:	f7f1 f982 	bl	80005f8 <__aeabi_dmul>
 800f2f4:	a364      	add	r3, pc, #400	; (adr r3, 800f488 <__kernel_tan+0x350>)
 800f2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fa:	f7f0 ffc7 	bl	800028c <__adddf3>
 800f2fe:	ec53 2b18 	vmov	r2, r3, d8
 800f302:	f7f1 f979 	bl	80005f8 <__aeabi_dmul>
 800f306:	a362      	add	r3, pc, #392	; (adr r3, 800f490 <__kernel_tan+0x358>)
 800f308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30c:	ec41 0b1a 	vmov	d10, r0, r1
 800f310:	4620      	mov	r0, r4
 800f312:	4629      	mov	r1, r5
 800f314:	f7f1 f970 	bl	80005f8 <__aeabi_dmul>
 800f318:	a35f      	add	r3, pc, #380	; (adr r3, 800f498 <__kernel_tan+0x360>)
 800f31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31e:	f7f0 ffb5 	bl	800028c <__adddf3>
 800f322:	4622      	mov	r2, r4
 800f324:	462b      	mov	r3, r5
 800f326:	f7f1 f967 	bl	80005f8 <__aeabi_dmul>
 800f32a:	a35d      	add	r3, pc, #372	; (adr r3, 800f4a0 <__kernel_tan+0x368>)
 800f32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f330:	f7f0 ffac 	bl	800028c <__adddf3>
 800f334:	4622      	mov	r2, r4
 800f336:	462b      	mov	r3, r5
 800f338:	f7f1 f95e 	bl	80005f8 <__aeabi_dmul>
 800f33c:	a35a      	add	r3, pc, #360	; (adr r3, 800f4a8 <__kernel_tan+0x370>)
 800f33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f342:	f7f0 ffa3 	bl	800028c <__adddf3>
 800f346:	4622      	mov	r2, r4
 800f348:	462b      	mov	r3, r5
 800f34a:	f7f1 f955 	bl	80005f8 <__aeabi_dmul>
 800f34e:	a358      	add	r3, pc, #352	; (adr r3, 800f4b0 <__kernel_tan+0x378>)
 800f350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f354:	f7f0 ff9a 	bl	800028c <__adddf3>
 800f358:	4622      	mov	r2, r4
 800f35a:	462b      	mov	r3, r5
 800f35c:	f7f1 f94c 	bl	80005f8 <__aeabi_dmul>
 800f360:	a355      	add	r3, pc, #340	; (adr r3, 800f4b8 <__kernel_tan+0x380>)
 800f362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f366:	f7f0 ff91 	bl	800028c <__adddf3>
 800f36a:	4602      	mov	r2, r0
 800f36c:	460b      	mov	r3, r1
 800f36e:	ec51 0b1a 	vmov	r0, r1, d10
 800f372:	f7f0 ff8b 	bl	800028c <__adddf3>
 800f376:	ec53 2b19 	vmov	r2, r3, d9
 800f37a:	f7f1 f93d 	bl	80005f8 <__aeabi_dmul>
 800f37e:	4642      	mov	r2, r8
 800f380:	464b      	mov	r3, r9
 800f382:	f7f0 ff83 	bl	800028c <__adddf3>
 800f386:	ec53 2b18 	vmov	r2, r3, d8
 800f38a:	f7f1 f935 	bl	80005f8 <__aeabi_dmul>
 800f38e:	4642      	mov	r2, r8
 800f390:	464b      	mov	r3, r9
 800f392:	f7f0 ff7b 	bl	800028c <__adddf3>
 800f396:	a34a      	add	r3, pc, #296	; (adr r3, 800f4c0 <__kernel_tan+0x388>)
 800f398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39c:	4604      	mov	r4, r0
 800f39e:	460d      	mov	r5, r1
 800f3a0:	ec51 0b19 	vmov	r0, r1, d9
 800f3a4:	f7f1 f928 	bl	80005f8 <__aeabi_dmul>
 800f3a8:	4622      	mov	r2, r4
 800f3aa:	462b      	mov	r3, r5
 800f3ac:	f7f0 ff6e 	bl	800028c <__adddf3>
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	ec41 0b18 	vmov	d8, r0, r1
 800f3b6:	4602      	mov	r2, r0
 800f3b8:	4659      	mov	r1, fp
 800f3ba:	4650      	mov	r0, sl
 800f3bc:	f7f0 ff66 	bl	800028c <__adddf3>
 800f3c0:	4b44      	ldr	r3, [pc, #272]	; (800f4d4 <__kernel_tan+0x39c>)
 800f3c2:	429f      	cmp	r7, r3
 800f3c4:	4604      	mov	r4, r0
 800f3c6:	460d      	mov	r5, r1
 800f3c8:	f340 8086 	ble.w	800f4d8 <__kernel_tan+0x3a0>
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	f7f1 f8a9 	bl	8000524 <__aeabi_i2d>
 800f3d2:	4622      	mov	r2, r4
 800f3d4:	4680      	mov	r8, r0
 800f3d6:	4689      	mov	r9, r1
 800f3d8:	462b      	mov	r3, r5
 800f3da:	4620      	mov	r0, r4
 800f3dc:	4629      	mov	r1, r5
 800f3de:	f7f1 f90b 	bl	80005f8 <__aeabi_dmul>
 800f3e2:	4642      	mov	r2, r8
 800f3e4:	4606      	mov	r6, r0
 800f3e6:	460f      	mov	r7, r1
 800f3e8:	464b      	mov	r3, r9
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	f7f0 ff4d 	bl	800028c <__adddf3>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	4639      	mov	r1, r7
 800f3fa:	f7f1 fa27 	bl	800084c <__aeabi_ddiv>
 800f3fe:	ec53 2b18 	vmov	r2, r3, d8
 800f402:	f7f0 ff41 	bl	8000288 <__aeabi_dsub>
 800f406:	4602      	mov	r2, r0
 800f408:	460b      	mov	r3, r1
 800f40a:	4650      	mov	r0, sl
 800f40c:	4659      	mov	r1, fp
 800f40e:	f7f0 ff3b 	bl	8000288 <__aeabi_dsub>
 800f412:	4602      	mov	r2, r0
 800f414:	460b      	mov	r3, r1
 800f416:	f7f0 ff39 	bl	800028c <__adddf3>
 800f41a:	4602      	mov	r2, r0
 800f41c:	460b      	mov	r3, r1
 800f41e:	4640      	mov	r0, r8
 800f420:	4649      	mov	r1, r9
 800f422:	f7f0 ff31 	bl	8000288 <__aeabi_dsub>
 800f426:	9b00      	ldr	r3, [sp, #0]
 800f428:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800f42c:	f00a 0a02 	and.w	sl, sl, #2
 800f430:	4604      	mov	r4, r0
 800f432:	f1ca 0001 	rsb	r0, sl, #1
 800f436:	460d      	mov	r5, r1
 800f438:	f7f1 f874 	bl	8000524 <__aeabi_i2d>
 800f43c:	4602      	mov	r2, r0
 800f43e:	460b      	mov	r3, r1
 800f440:	4620      	mov	r0, r4
 800f442:	4629      	mov	r1, r5
 800f444:	f7f1 f8d8 	bl	80005f8 <__aeabi_dmul>
 800f448:	e69f      	b.n	800f18a <__kernel_tan+0x52>
 800f44a:	bf00      	nop
 800f44c:	f3af 8000 	nop.w
 800f450:	54442d18 	.word	0x54442d18
 800f454:	3fe921fb 	.word	0x3fe921fb
 800f458:	33145c07 	.word	0x33145c07
 800f45c:	3c81a626 	.word	0x3c81a626
 800f460:	74bf7ad4 	.word	0x74bf7ad4
 800f464:	3efb2a70 	.word	0x3efb2a70
 800f468:	32f0a7e9 	.word	0x32f0a7e9
 800f46c:	3f12b80f 	.word	0x3f12b80f
 800f470:	1a8d1068 	.word	0x1a8d1068
 800f474:	3f3026f7 	.word	0x3f3026f7
 800f478:	fee08315 	.word	0xfee08315
 800f47c:	3f57dbc8 	.word	0x3f57dbc8
 800f480:	e96e8493 	.word	0xe96e8493
 800f484:	3f8226e3 	.word	0x3f8226e3
 800f488:	1bb341fe 	.word	0x1bb341fe
 800f48c:	3faba1ba 	.word	0x3faba1ba
 800f490:	db605373 	.word	0xdb605373
 800f494:	bef375cb 	.word	0xbef375cb
 800f498:	a03792a6 	.word	0xa03792a6
 800f49c:	3f147e88 	.word	0x3f147e88
 800f4a0:	f2f26501 	.word	0xf2f26501
 800f4a4:	3f4344d8 	.word	0x3f4344d8
 800f4a8:	c9560328 	.word	0xc9560328
 800f4ac:	3f6d6d22 	.word	0x3f6d6d22
 800f4b0:	8406d637 	.word	0x8406d637
 800f4b4:	3f9664f4 	.word	0x3f9664f4
 800f4b8:	1110fe7a 	.word	0x1110fe7a
 800f4bc:	3fc11111 	.word	0x3fc11111
 800f4c0:	55555563 	.word	0x55555563
 800f4c4:	3fd55555 	.word	0x3fd55555
 800f4c8:	3e2fffff 	.word	0x3e2fffff
 800f4cc:	3ff00000 	.word	0x3ff00000
 800f4d0:	bff00000 	.word	0xbff00000
 800f4d4:	3fe59427 	.word	0x3fe59427
 800f4d8:	2e01      	cmp	r6, #1
 800f4da:	d02f      	beq.n	800f53c <__kernel_tan+0x404>
 800f4dc:	460f      	mov	r7, r1
 800f4de:	4602      	mov	r2, r0
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	4689      	mov	r9, r1
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	4917      	ldr	r1, [pc, #92]	; (800f544 <__kernel_tan+0x40c>)
 800f4e8:	f7f1 f9b0 	bl	800084c <__aeabi_ddiv>
 800f4ec:	2600      	movs	r6, #0
 800f4ee:	e9cd 0100 	strd	r0, r1, [sp]
 800f4f2:	4652      	mov	r2, sl
 800f4f4:	465b      	mov	r3, fp
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	4639      	mov	r1, r7
 800f4fa:	f7f0 fec5 	bl	8000288 <__aeabi_dsub>
 800f4fe:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f502:	4602      	mov	r2, r0
 800f504:	460b      	mov	r3, r1
 800f506:	ec51 0b18 	vmov	r0, r1, d8
 800f50a:	f7f0 febd 	bl	8000288 <__aeabi_dsub>
 800f50e:	4632      	mov	r2, r6
 800f510:	462b      	mov	r3, r5
 800f512:	f7f1 f871 	bl	80005f8 <__aeabi_dmul>
 800f516:	46b0      	mov	r8, r6
 800f518:	460f      	mov	r7, r1
 800f51a:	4642      	mov	r2, r8
 800f51c:	462b      	mov	r3, r5
 800f51e:	4634      	mov	r4, r6
 800f520:	4649      	mov	r1, r9
 800f522:	4606      	mov	r6, r0
 800f524:	4640      	mov	r0, r8
 800f526:	f7f1 f867 	bl	80005f8 <__aeabi_dmul>
 800f52a:	4b07      	ldr	r3, [pc, #28]	; (800f548 <__kernel_tan+0x410>)
 800f52c:	2200      	movs	r2, #0
 800f52e:	f7f0 fead 	bl	800028c <__adddf3>
 800f532:	4602      	mov	r2, r0
 800f534:	460b      	mov	r3, r1
 800f536:	4630      	mov	r0, r6
 800f538:	4639      	mov	r1, r7
 800f53a:	e665      	b.n	800f208 <__kernel_tan+0xd0>
 800f53c:	4682      	mov	sl, r0
 800f53e:	468b      	mov	fp, r1
 800f540:	e625      	b.n	800f18e <__kernel_tan+0x56>
 800f542:	bf00      	nop
 800f544:	bff00000 	.word	0xbff00000
 800f548:	3ff00000 	.word	0x3ff00000
 800f54c:	00000000 	.word	0x00000000

0800f550 <__ieee754_atan2>:
 800f550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f554:	ec57 6b11 	vmov	r6, r7, d1
 800f558:	4273      	negs	r3, r6
 800f55a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800f6d8 <__ieee754_atan2+0x188>
 800f55e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f562:	4333      	orrs	r3, r6
 800f564:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f568:	4543      	cmp	r3, r8
 800f56a:	ec51 0b10 	vmov	r0, r1, d0
 800f56e:	ee11 5a10 	vmov	r5, s2
 800f572:	d80a      	bhi.n	800f58a <__ieee754_atan2+0x3a>
 800f574:	4244      	negs	r4, r0
 800f576:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f57a:	4304      	orrs	r4, r0
 800f57c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f580:	4544      	cmp	r4, r8
 800f582:	ee10 9a10 	vmov	r9, s0
 800f586:	468e      	mov	lr, r1
 800f588:	d907      	bls.n	800f59a <__ieee754_atan2+0x4a>
 800f58a:	4632      	mov	r2, r6
 800f58c:	463b      	mov	r3, r7
 800f58e:	f7f0 fe7d 	bl	800028c <__adddf3>
 800f592:	ec41 0b10 	vmov	d0, r0, r1
 800f596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f59a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f59e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f5a2:	4334      	orrs	r4, r6
 800f5a4:	d103      	bne.n	800f5ae <__ieee754_atan2+0x5e>
 800f5a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5aa:	f000 bfcd 	b.w	8010548 <atan>
 800f5ae:	17bc      	asrs	r4, r7, #30
 800f5b0:	f004 0402 	and.w	r4, r4, #2
 800f5b4:	ea53 0909 	orrs.w	r9, r3, r9
 800f5b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f5bc:	d107      	bne.n	800f5ce <__ieee754_atan2+0x7e>
 800f5be:	2c02      	cmp	r4, #2
 800f5c0:	d05f      	beq.n	800f682 <__ieee754_atan2+0x132>
 800f5c2:	2c03      	cmp	r4, #3
 800f5c4:	d1e5      	bne.n	800f592 <__ieee754_atan2+0x42>
 800f5c6:	a140      	add	r1, pc, #256	; (adr r1, 800f6c8 <__ieee754_atan2+0x178>)
 800f5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5cc:	e7e1      	b.n	800f592 <__ieee754_atan2+0x42>
 800f5ce:	4315      	orrs	r5, r2
 800f5d0:	d106      	bne.n	800f5e0 <__ieee754_atan2+0x90>
 800f5d2:	f1be 0f00 	cmp.w	lr, #0
 800f5d6:	da5f      	bge.n	800f698 <__ieee754_atan2+0x148>
 800f5d8:	a13d      	add	r1, pc, #244	; (adr r1, 800f6d0 <__ieee754_atan2+0x180>)
 800f5da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5de:	e7d8      	b.n	800f592 <__ieee754_atan2+0x42>
 800f5e0:	4542      	cmp	r2, r8
 800f5e2:	d10f      	bne.n	800f604 <__ieee754_atan2+0xb4>
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	f104 34ff 	add.w	r4, r4, #4294967295
 800f5ea:	d107      	bne.n	800f5fc <__ieee754_atan2+0xac>
 800f5ec:	2c02      	cmp	r4, #2
 800f5ee:	d84c      	bhi.n	800f68a <__ieee754_atan2+0x13a>
 800f5f0:	4b33      	ldr	r3, [pc, #204]	; (800f6c0 <__ieee754_atan2+0x170>)
 800f5f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5fa:	e7ca      	b.n	800f592 <__ieee754_atan2+0x42>
 800f5fc:	2c02      	cmp	r4, #2
 800f5fe:	d848      	bhi.n	800f692 <__ieee754_atan2+0x142>
 800f600:	4b30      	ldr	r3, [pc, #192]	; (800f6c4 <__ieee754_atan2+0x174>)
 800f602:	e7f6      	b.n	800f5f2 <__ieee754_atan2+0xa2>
 800f604:	4543      	cmp	r3, r8
 800f606:	d0e4      	beq.n	800f5d2 <__ieee754_atan2+0x82>
 800f608:	1a9b      	subs	r3, r3, r2
 800f60a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f60e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f612:	da1e      	bge.n	800f652 <__ieee754_atan2+0x102>
 800f614:	2f00      	cmp	r7, #0
 800f616:	da01      	bge.n	800f61c <__ieee754_atan2+0xcc>
 800f618:	323c      	adds	r2, #60	; 0x3c
 800f61a:	db1e      	blt.n	800f65a <__ieee754_atan2+0x10a>
 800f61c:	4632      	mov	r2, r6
 800f61e:	463b      	mov	r3, r7
 800f620:	f7f1 f914 	bl	800084c <__aeabi_ddiv>
 800f624:	ec41 0b10 	vmov	d0, r0, r1
 800f628:	f001 f92e 	bl	8010888 <fabs>
 800f62c:	f000 ff8c 	bl	8010548 <atan>
 800f630:	ec51 0b10 	vmov	r0, r1, d0
 800f634:	2c01      	cmp	r4, #1
 800f636:	d013      	beq.n	800f660 <__ieee754_atan2+0x110>
 800f638:	2c02      	cmp	r4, #2
 800f63a:	d015      	beq.n	800f668 <__ieee754_atan2+0x118>
 800f63c:	2c00      	cmp	r4, #0
 800f63e:	d0a8      	beq.n	800f592 <__ieee754_atan2+0x42>
 800f640:	a317      	add	r3, pc, #92	; (adr r3, 800f6a0 <__ieee754_atan2+0x150>)
 800f642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f646:	f7f0 fe1f 	bl	8000288 <__aeabi_dsub>
 800f64a:	a317      	add	r3, pc, #92	; (adr r3, 800f6a8 <__ieee754_atan2+0x158>)
 800f64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f650:	e014      	b.n	800f67c <__ieee754_atan2+0x12c>
 800f652:	a117      	add	r1, pc, #92	; (adr r1, 800f6b0 <__ieee754_atan2+0x160>)
 800f654:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f658:	e7ec      	b.n	800f634 <__ieee754_atan2+0xe4>
 800f65a:	2000      	movs	r0, #0
 800f65c:	2100      	movs	r1, #0
 800f65e:	e7e9      	b.n	800f634 <__ieee754_atan2+0xe4>
 800f660:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f664:	4619      	mov	r1, r3
 800f666:	e794      	b.n	800f592 <__ieee754_atan2+0x42>
 800f668:	a30d      	add	r3, pc, #52	; (adr r3, 800f6a0 <__ieee754_atan2+0x150>)
 800f66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66e:	f7f0 fe0b 	bl	8000288 <__aeabi_dsub>
 800f672:	4602      	mov	r2, r0
 800f674:	460b      	mov	r3, r1
 800f676:	a10c      	add	r1, pc, #48	; (adr r1, 800f6a8 <__ieee754_atan2+0x158>)
 800f678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f67c:	f7f0 fe04 	bl	8000288 <__aeabi_dsub>
 800f680:	e787      	b.n	800f592 <__ieee754_atan2+0x42>
 800f682:	a109      	add	r1, pc, #36	; (adr r1, 800f6a8 <__ieee754_atan2+0x158>)
 800f684:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f688:	e783      	b.n	800f592 <__ieee754_atan2+0x42>
 800f68a:	a10b      	add	r1, pc, #44	; (adr r1, 800f6b8 <__ieee754_atan2+0x168>)
 800f68c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f690:	e77f      	b.n	800f592 <__ieee754_atan2+0x42>
 800f692:	2000      	movs	r0, #0
 800f694:	2100      	movs	r1, #0
 800f696:	e77c      	b.n	800f592 <__ieee754_atan2+0x42>
 800f698:	a105      	add	r1, pc, #20	; (adr r1, 800f6b0 <__ieee754_atan2+0x160>)
 800f69a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f69e:	e778      	b.n	800f592 <__ieee754_atan2+0x42>
 800f6a0:	33145c07 	.word	0x33145c07
 800f6a4:	3ca1a626 	.word	0x3ca1a626
 800f6a8:	54442d18 	.word	0x54442d18
 800f6ac:	400921fb 	.word	0x400921fb
 800f6b0:	54442d18 	.word	0x54442d18
 800f6b4:	3ff921fb 	.word	0x3ff921fb
 800f6b8:	54442d18 	.word	0x54442d18
 800f6bc:	3fe921fb 	.word	0x3fe921fb
 800f6c0:	08012098 	.word	0x08012098
 800f6c4:	080120b0 	.word	0x080120b0
 800f6c8:	54442d18 	.word	0x54442d18
 800f6cc:	c00921fb 	.word	0xc00921fb
 800f6d0:	54442d18 	.word	0x54442d18
 800f6d4:	bff921fb 	.word	0xbff921fb
 800f6d8:	7ff00000 	.word	0x7ff00000
 800f6dc:	00000000 	.word	0x00000000

0800f6e0 <__ieee754_pow>:
 800f6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e4:	ed2d 8b06 	vpush	{d8-d10}
 800f6e8:	b089      	sub	sp, #36	; 0x24
 800f6ea:	ed8d 1b00 	vstr	d1, [sp]
 800f6ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f6f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f6f6:	ea58 0102 	orrs.w	r1, r8, r2
 800f6fa:	ec57 6b10 	vmov	r6, r7, d0
 800f6fe:	d115      	bne.n	800f72c <__ieee754_pow+0x4c>
 800f700:	19b3      	adds	r3, r6, r6
 800f702:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f706:	4152      	adcs	r2, r2
 800f708:	4299      	cmp	r1, r3
 800f70a:	4b89      	ldr	r3, [pc, #548]	; (800f930 <__ieee754_pow+0x250>)
 800f70c:	4193      	sbcs	r3, r2
 800f70e:	f080 84d1 	bcs.w	80100b4 <__ieee754_pow+0x9d4>
 800f712:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f716:	4630      	mov	r0, r6
 800f718:	4639      	mov	r1, r7
 800f71a:	f7f0 fdb7 	bl	800028c <__adddf3>
 800f71e:	ec41 0b10 	vmov	d0, r0, r1
 800f722:	b009      	add	sp, #36	; 0x24
 800f724:	ecbd 8b06 	vpop	{d8-d10}
 800f728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f72c:	4b81      	ldr	r3, [pc, #516]	; (800f934 <__ieee754_pow+0x254>)
 800f72e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f732:	429c      	cmp	r4, r3
 800f734:	ee10 aa10 	vmov	sl, s0
 800f738:	463d      	mov	r5, r7
 800f73a:	dc06      	bgt.n	800f74a <__ieee754_pow+0x6a>
 800f73c:	d101      	bne.n	800f742 <__ieee754_pow+0x62>
 800f73e:	2e00      	cmp	r6, #0
 800f740:	d1e7      	bne.n	800f712 <__ieee754_pow+0x32>
 800f742:	4598      	cmp	r8, r3
 800f744:	dc01      	bgt.n	800f74a <__ieee754_pow+0x6a>
 800f746:	d10f      	bne.n	800f768 <__ieee754_pow+0x88>
 800f748:	b172      	cbz	r2, 800f768 <__ieee754_pow+0x88>
 800f74a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f74e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f752:	ea55 050a 	orrs.w	r5, r5, sl
 800f756:	d1dc      	bne.n	800f712 <__ieee754_pow+0x32>
 800f758:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f75c:	18db      	adds	r3, r3, r3
 800f75e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f762:	4152      	adcs	r2, r2
 800f764:	429d      	cmp	r5, r3
 800f766:	e7d0      	b.n	800f70a <__ieee754_pow+0x2a>
 800f768:	2d00      	cmp	r5, #0
 800f76a:	da3b      	bge.n	800f7e4 <__ieee754_pow+0x104>
 800f76c:	4b72      	ldr	r3, [pc, #456]	; (800f938 <__ieee754_pow+0x258>)
 800f76e:	4598      	cmp	r8, r3
 800f770:	dc51      	bgt.n	800f816 <__ieee754_pow+0x136>
 800f772:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f776:	4598      	cmp	r8, r3
 800f778:	f340 84ab 	ble.w	80100d2 <__ieee754_pow+0x9f2>
 800f77c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f780:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f784:	2b14      	cmp	r3, #20
 800f786:	dd0f      	ble.n	800f7a8 <__ieee754_pow+0xc8>
 800f788:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f78c:	fa22 f103 	lsr.w	r1, r2, r3
 800f790:	fa01 f303 	lsl.w	r3, r1, r3
 800f794:	4293      	cmp	r3, r2
 800f796:	f040 849c 	bne.w	80100d2 <__ieee754_pow+0x9f2>
 800f79a:	f001 0101 	and.w	r1, r1, #1
 800f79e:	f1c1 0302 	rsb	r3, r1, #2
 800f7a2:	9304      	str	r3, [sp, #16]
 800f7a4:	b182      	cbz	r2, 800f7c8 <__ieee754_pow+0xe8>
 800f7a6:	e05f      	b.n	800f868 <__ieee754_pow+0x188>
 800f7a8:	2a00      	cmp	r2, #0
 800f7aa:	d15b      	bne.n	800f864 <__ieee754_pow+0x184>
 800f7ac:	f1c3 0314 	rsb	r3, r3, #20
 800f7b0:	fa48 f103 	asr.w	r1, r8, r3
 800f7b4:	fa01 f303 	lsl.w	r3, r1, r3
 800f7b8:	4543      	cmp	r3, r8
 800f7ba:	f040 8487 	bne.w	80100cc <__ieee754_pow+0x9ec>
 800f7be:	f001 0101 	and.w	r1, r1, #1
 800f7c2:	f1c1 0302 	rsb	r3, r1, #2
 800f7c6:	9304      	str	r3, [sp, #16]
 800f7c8:	4b5c      	ldr	r3, [pc, #368]	; (800f93c <__ieee754_pow+0x25c>)
 800f7ca:	4598      	cmp	r8, r3
 800f7cc:	d132      	bne.n	800f834 <__ieee754_pow+0x154>
 800f7ce:	f1b9 0f00 	cmp.w	r9, #0
 800f7d2:	f280 8477 	bge.w	80100c4 <__ieee754_pow+0x9e4>
 800f7d6:	4959      	ldr	r1, [pc, #356]	; (800f93c <__ieee754_pow+0x25c>)
 800f7d8:	4632      	mov	r2, r6
 800f7da:	463b      	mov	r3, r7
 800f7dc:	2000      	movs	r0, #0
 800f7de:	f7f1 f835 	bl	800084c <__aeabi_ddiv>
 800f7e2:	e79c      	b.n	800f71e <__ieee754_pow+0x3e>
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	9304      	str	r3, [sp, #16]
 800f7e8:	2a00      	cmp	r2, #0
 800f7ea:	d13d      	bne.n	800f868 <__ieee754_pow+0x188>
 800f7ec:	4b51      	ldr	r3, [pc, #324]	; (800f934 <__ieee754_pow+0x254>)
 800f7ee:	4598      	cmp	r8, r3
 800f7f0:	d1ea      	bne.n	800f7c8 <__ieee754_pow+0xe8>
 800f7f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f7f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f7fa:	ea53 030a 	orrs.w	r3, r3, sl
 800f7fe:	f000 8459 	beq.w	80100b4 <__ieee754_pow+0x9d4>
 800f802:	4b4f      	ldr	r3, [pc, #316]	; (800f940 <__ieee754_pow+0x260>)
 800f804:	429c      	cmp	r4, r3
 800f806:	dd08      	ble.n	800f81a <__ieee754_pow+0x13a>
 800f808:	f1b9 0f00 	cmp.w	r9, #0
 800f80c:	f2c0 8456 	blt.w	80100bc <__ieee754_pow+0x9dc>
 800f810:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f814:	e783      	b.n	800f71e <__ieee754_pow+0x3e>
 800f816:	2302      	movs	r3, #2
 800f818:	e7e5      	b.n	800f7e6 <__ieee754_pow+0x106>
 800f81a:	f1b9 0f00 	cmp.w	r9, #0
 800f81e:	f04f 0000 	mov.w	r0, #0
 800f822:	f04f 0100 	mov.w	r1, #0
 800f826:	f6bf af7a 	bge.w	800f71e <__ieee754_pow+0x3e>
 800f82a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f82e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f832:	e774      	b.n	800f71e <__ieee754_pow+0x3e>
 800f834:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f838:	d106      	bne.n	800f848 <__ieee754_pow+0x168>
 800f83a:	4632      	mov	r2, r6
 800f83c:	463b      	mov	r3, r7
 800f83e:	4630      	mov	r0, r6
 800f840:	4639      	mov	r1, r7
 800f842:	f7f0 fed9 	bl	80005f8 <__aeabi_dmul>
 800f846:	e76a      	b.n	800f71e <__ieee754_pow+0x3e>
 800f848:	4b3e      	ldr	r3, [pc, #248]	; (800f944 <__ieee754_pow+0x264>)
 800f84a:	4599      	cmp	r9, r3
 800f84c:	d10c      	bne.n	800f868 <__ieee754_pow+0x188>
 800f84e:	2d00      	cmp	r5, #0
 800f850:	db0a      	blt.n	800f868 <__ieee754_pow+0x188>
 800f852:	ec47 6b10 	vmov	d0, r6, r7
 800f856:	b009      	add	sp, #36	; 0x24
 800f858:	ecbd 8b06 	vpop	{d8-d10}
 800f85c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f860:	f7ff ba06 	b.w	800ec70 <__ieee754_sqrt>
 800f864:	2300      	movs	r3, #0
 800f866:	9304      	str	r3, [sp, #16]
 800f868:	ec47 6b10 	vmov	d0, r6, r7
 800f86c:	f001 f80c 	bl	8010888 <fabs>
 800f870:	ec51 0b10 	vmov	r0, r1, d0
 800f874:	f1ba 0f00 	cmp.w	sl, #0
 800f878:	d129      	bne.n	800f8ce <__ieee754_pow+0x1ee>
 800f87a:	b124      	cbz	r4, 800f886 <__ieee754_pow+0x1a6>
 800f87c:	4b2f      	ldr	r3, [pc, #188]	; (800f93c <__ieee754_pow+0x25c>)
 800f87e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f882:	429a      	cmp	r2, r3
 800f884:	d123      	bne.n	800f8ce <__ieee754_pow+0x1ee>
 800f886:	f1b9 0f00 	cmp.w	r9, #0
 800f88a:	da05      	bge.n	800f898 <__ieee754_pow+0x1b8>
 800f88c:	4602      	mov	r2, r0
 800f88e:	460b      	mov	r3, r1
 800f890:	2000      	movs	r0, #0
 800f892:	492a      	ldr	r1, [pc, #168]	; (800f93c <__ieee754_pow+0x25c>)
 800f894:	f7f0 ffda 	bl	800084c <__aeabi_ddiv>
 800f898:	2d00      	cmp	r5, #0
 800f89a:	f6bf af40 	bge.w	800f71e <__ieee754_pow+0x3e>
 800f89e:	9b04      	ldr	r3, [sp, #16]
 800f8a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f8a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f8a8:	431c      	orrs	r4, r3
 800f8aa:	d108      	bne.n	800f8be <__ieee754_pow+0x1de>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	460b      	mov	r3, r1
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	f7f0 fce8 	bl	8000288 <__aeabi_dsub>
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	e78f      	b.n	800f7de <__ieee754_pow+0xfe>
 800f8be:	9b04      	ldr	r3, [sp, #16]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	f47f af2c 	bne.w	800f71e <__ieee754_pow+0x3e>
 800f8c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	e727      	b.n	800f71e <__ieee754_pow+0x3e>
 800f8ce:	0feb      	lsrs	r3, r5, #31
 800f8d0:	3b01      	subs	r3, #1
 800f8d2:	9306      	str	r3, [sp, #24]
 800f8d4:	9a06      	ldr	r2, [sp, #24]
 800f8d6:	9b04      	ldr	r3, [sp, #16]
 800f8d8:	4313      	orrs	r3, r2
 800f8da:	d102      	bne.n	800f8e2 <__ieee754_pow+0x202>
 800f8dc:	4632      	mov	r2, r6
 800f8de:	463b      	mov	r3, r7
 800f8e0:	e7e6      	b.n	800f8b0 <__ieee754_pow+0x1d0>
 800f8e2:	4b19      	ldr	r3, [pc, #100]	; (800f948 <__ieee754_pow+0x268>)
 800f8e4:	4598      	cmp	r8, r3
 800f8e6:	f340 80fb 	ble.w	800fae0 <__ieee754_pow+0x400>
 800f8ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f8ee:	4598      	cmp	r8, r3
 800f8f0:	4b13      	ldr	r3, [pc, #76]	; (800f940 <__ieee754_pow+0x260>)
 800f8f2:	dd0c      	ble.n	800f90e <__ieee754_pow+0x22e>
 800f8f4:	429c      	cmp	r4, r3
 800f8f6:	dc0f      	bgt.n	800f918 <__ieee754_pow+0x238>
 800f8f8:	f1b9 0f00 	cmp.w	r9, #0
 800f8fc:	da0f      	bge.n	800f91e <__ieee754_pow+0x23e>
 800f8fe:	2000      	movs	r0, #0
 800f900:	b009      	add	sp, #36	; 0x24
 800f902:	ecbd 8b06 	vpop	{d8-d10}
 800f906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90a:	f001 b86e 	b.w	80109ea <__math_oflow>
 800f90e:	429c      	cmp	r4, r3
 800f910:	dbf2      	blt.n	800f8f8 <__ieee754_pow+0x218>
 800f912:	4b0a      	ldr	r3, [pc, #40]	; (800f93c <__ieee754_pow+0x25c>)
 800f914:	429c      	cmp	r4, r3
 800f916:	dd19      	ble.n	800f94c <__ieee754_pow+0x26c>
 800f918:	f1b9 0f00 	cmp.w	r9, #0
 800f91c:	dcef      	bgt.n	800f8fe <__ieee754_pow+0x21e>
 800f91e:	2000      	movs	r0, #0
 800f920:	b009      	add	sp, #36	; 0x24
 800f922:	ecbd 8b06 	vpop	{d8-d10}
 800f926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f92a:	f001 b855 	b.w	80109d8 <__math_uflow>
 800f92e:	bf00      	nop
 800f930:	fff00000 	.word	0xfff00000
 800f934:	7ff00000 	.word	0x7ff00000
 800f938:	433fffff 	.word	0x433fffff
 800f93c:	3ff00000 	.word	0x3ff00000
 800f940:	3fefffff 	.word	0x3fefffff
 800f944:	3fe00000 	.word	0x3fe00000
 800f948:	41e00000 	.word	0x41e00000
 800f94c:	4b60      	ldr	r3, [pc, #384]	; (800fad0 <__ieee754_pow+0x3f0>)
 800f94e:	2200      	movs	r2, #0
 800f950:	f7f0 fc9a 	bl	8000288 <__aeabi_dsub>
 800f954:	a354      	add	r3, pc, #336	; (adr r3, 800faa8 <__ieee754_pow+0x3c8>)
 800f956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95a:	4604      	mov	r4, r0
 800f95c:	460d      	mov	r5, r1
 800f95e:	f7f0 fe4b 	bl	80005f8 <__aeabi_dmul>
 800f962:	a353      	add	r3, pc, #332	; (adr r3, 800fab0 <__ieee754_pow+0x3d0>)
 800f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f968:	4606      	mov	r6, r0
 800f96a:	460f      	mov	r7, r1
 800f96c:	4620      	mov	r0, r4
 800f96e:	4629      	mov	r1, r5
 800f970:	f7f0 fe42 	bl	80005f8 <__aeabi_dmul>
 800f974:	4b57      	ldr	r3, [pc, #348]	; (800fad4 <__ieee754_pow+0x3f4>)
 800f976:	4682      	mov	sl, r0
 800f978:	468b      	mov	fp, r1
 800f97a:	2200      	movs	r2, #0
 800f97c:	4620      	mov	r0, r4
 800f97e:	4629      	mov	r1, r5
 800f980:	f7f0 fe3a 	bl	80005f8 <__aeabi_dmul>
 800f984:	4602      	mov	r2, r0
 800f986:	460b      	mov	r3, r1
 800f988:	a14b      	add	r1, pc, #300	; (adr r1, 800fab8 <__ieee754_pow+0x3d8>)
 800f98a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f98e:	f7f0 fc7b 	bl	8000288 <__aeabi_dsub>
 800f992:	4622      	mov	r2, r4
 800f994:	462b      	mov	r3, r5
 800f996:	f7f0 fe2f 	bl	80005f8 <__aeabi_dmul>
 800f99a:	4602      	mov	r2, r0
 800f99c:	460b      	mov	r3, r1
 800f99e:	2000      	movs	r0, #0
 800f9a0:	494d      	ldr	r1, [pc, #308]	; (800fad8 <__ieee754_pow+0x3f8>)
 800f9a2:	f7f0 fc71 	bl	8000288 <__aeabi_dsub>
 800f9a6:	4622      	mov	r2, r4
 800f9a8:	4680      	mov	r8, r0
 800f9aa:	4689      	mov	r9, r1
 800f9ac:	462b      	mov	r3, r5
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	4629      	mov	r1, r5
 800f9b2:	f7f0 fe21 	bl	80005f8 <__aeabi_dmul>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	4640      	mov	r0, r8
 800f9bc:	4649      	mov	r1, r9
 800f9be:	f7f0 fe1b 	bl	80005f8 <__aeabi_dmul>
 800f9c2:	a33f      	add	r3, pc, #252	; (adr r3, 800fac0 <__ieee754_pow+0x3e0>)
 800f9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c8:	f7f0 fe16 	bl	80005f8 <__aeabi_dmul>
 800f9cc:	4602      	mov	r2, r0
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	4650      	mov	r0, sl
 800f9d2:	4659      	mov	r1, fp
 800f9d4:	f7f0 fc58 	bl	8000288 <__aeabi_dsub>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	460b      	mov	r3, r1
 800f9dc:	4680      	mov	r8, r0
 800f9de:	4689      	mov	r9, r1
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	4639      	mov	r1, r7
 800f9e4:	f7f0 fc52 	bl	800028c <__adddf3>
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	4632      	mov	r2, r6
 800f9ec:	463b      	mov	r3, r7
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	460d      	mov	r5, r1
 800f9f2:	f7f0 fc49 	bl	8000288 <__aeabi_dsub>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	460b      	mov	r3, r1
 800f9fa:	4640      	mov	r0, r8
 800f9fc:	4649      	mov	r1, r9
 800f9fe:	f7f0 fc43 	bl	8000288 <__aeabi_dsub>
 800fa02:	9b04      	ldr	r3, [sp, #16]
 800fa04:	9a06      	ldr	r2, [sp, #24]
 800fa06:	3b01      	subs	r3, #1
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	4682      	mov	sl, r0
 800fa0c:	468b      	mov	fp, r1
 800fa0e:	f040 81e7 	bne.w	800fde0 <__ieee754_pow+0x700>
 800fa12:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fac8 <__ieee754_pow+0x3e8>
 800fa16:	eeb0 8a47 	vmov.f32	s16, s14
 800fa1a:	eef0 8a67 	vmov.f32	s17, s15
 800fa1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fa22:	2600      	movs	r6, #0
 800fa24:	4632      	mov	r2, r6
 800fa26:	463b      	mov	r3, r7
 800fa28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa2c:	f7f0 fc2c 	bl	8000288 <__aeabi_dsub>
 800fa30:	4622      	mov	r2, r4
 800fa32:	462b      	mov	r3, r5
 800fa34:	f7f0 fde0 	bl	80005f8 <__aeabi_dmul>
 800fa38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa3c:	4680      	mov	r8, r0
 800fa3e:	4689      	mov	r9, r1
 800fa40:	4650      	mov	r0, sl
 800fa42:	4659      	mov	r1, fp
 800fa44:	f7f0 fdd8 	bl	80005f8 <__aeabi_dmul>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	4640      	mov	r0, r8
 800fa4e:	4649      	mov	r1, r9
 800fa50:	f7f0 fc1c 	bl	800028c <__adddf3>
 800fa54:	4632      	mov	r2, r6
 800fa56:	463b      	mov	r3, r7
 800fa58:	4680      	mov	r8, r0
 800fa5a:	4689      	mov	r9, r1
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	4629      	mov	r1, r5
 800fa60:	f7f0 fdca 	bl	80005f8 <__aeabi_dmul>
 800fa64:	460b      	mov	r3, r1
 800fa66:	4604      	mov	r4, r0
 800fa68:	460d      	mov	r5, r1
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	4649      	mov	r1, r9
 800fa6e:	4640      	mov	r0, r8
 800fa70:	f7f0 fc0c 	bl	800028c <__adddf3>
 800fa74:	4b19      	ldr	r3, [pc, #100]	; (800fadc <__ieee754_pow+0x3fc>)
 800fa76:	4299      	cmp	r1, r3
 800fa78:	ec45 4b19 	vmov	d9, r4, r5
 800fa7c:	4606      	mov	r6, r0
 800fa7e:	460f      	mov	r7, r1
 800fa80:	468b      	mov	fp, r1
 800fa82:	f340 82f0 	ble.w	8010066 <__ieee754_pow+0x986>
 800fa86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fa8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fa8e:	4303      	orrs	r3, r0
 800fa90:	f000 81e4 	beq.w	800fe5c <__ieee754_pow+0x77c>
 800fa94:	ec51 0b18 	vmov	r0, r1, d8
 800fa98:	2200      	movs	r2, #0
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	f7f1 f81e 	bl	8000adc <__aeabi_dcmplt>
 800faa0:	3800      	subs	r0, #0
 800faa2:	bf18      	it	ne
 800faa4:	2001      	movne	r0, #1
 800faa6:	e72b      	b.n	800f900 <__ieee754_pow+0x220>
 800faa8:	60000000 	.word	0x60000000
 800faac:	3ff71547 	.word	0x3ff71547
 800fab0:	f85ddf44 	.word	0xf85ddf44
 800fab4:	3e54ae0b 	.word	0x3e54ae0b
 800fab8:	55555555 	.word	0x55555555
 800fabc:	3fd55555 	.word	0x3fd55555
 800fac0:	652b82fe 	.word	0x652b82fe
 800fac4:	3ff71547 	.word	0x3ff71547
 800fac8:	00000000 	.word	0x00000000
 800facc:	bff00000 	.word	0xbff00000
 800fad0:	3ff00000 	.word	0x3ff00000
 800fad4:	3fd00000 	.word	0x3fd00000
 800fad8:	3fe00000 	.word	0x3fe00000
 800fadc:	408fffff 	.word	0x408fffff
 800fae0:	4bd5      	ldr	r3, [pc, #852]	; (800fe38 <__ieee754_pow+0x758>)
 800fae2:	402b      	ands	r3, r5
 800fae4:	2200      	movs	r2, #0
 800fae6:	b92b      	cbnz	r3, 800faf4 <__ieee754_pow+0x414>
 800fae8:	4bd4      	ldr	r3, [pc, #848]	; (800fe3c <__ieee754_pow+0x75c>)
 800faea:	f7f0 fd85 	bl	80005f8 <__aeabi_dmul>
 800faee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800faf2:	460c      	mov	r4, r1
 800faf4:	1523      	asrs	r3, r4, #20
 800faf6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fafa:	4413      	add	r3, r2
 800fafc:	9305      	str	r3, [sp, #20]
 800fafe:	4bd0      	ldr	r3, [pc, #832]	; (800fe40 <__ieee754_pow+0x760>)
 800fb00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fb04:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fb08:	429c      	cmp	r4, r3
 800fb0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fb0e:	dd08      	ble.n	800fb22 <__ieee754_pow+0x442>
 800fb10:	4bcc      	ldr	r3, [pc, #816]	; (800fe44 <__ieee754_pow+0x764>)
 800fb12:	429c      	cmp	r4, r3
 800fb14:	f340 8162 	ble.w	800fddc <__ieee754_pow+0x6fc>
 800fb18:	9b05      	ldr	r3, [sp, #20]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	9305      	str	r3, [sp, #20]
 800fb1e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fb22:	2400      	movs	r4, #0
 800fb24:	00e3      	lsls	r3, r4, #3
 800fb26:	9307      	str	r3, [sp, #28]
 800fb28:	4bc7      	ldr	r3, [pc, #796]	; (800fe48 <__ieee754_pow+0x768>)
 800fb2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fb2e:	ed93 7b00 	vldr	d7, [r3]
 800fb32:	4629      	mov	r1, r5
 800fb34:	ec53 2b17 	vmov	r2, r3, d7
 800fb38:	eeb0 9a47 	vmov.f32	s18, s14
 800fb3c:	eef0 9a67 	vmov.f32	s19, s15
 800fb40:	4682      	mov	sl, r0
 800fb42:	f7f0 fba1 	bl	8000288 <__aeabi_dsub>
 800fb46:	4652      	mov	r2, sl
 800fb48:	4606      	mov	r6, r0
 800fb4a:	460f      	mov	r7, r1
 800fb4c:	462b      	mov	r3, r5
 800fb4e:	ec51 0b19 	vmov	r0, r1, d9
 800fb52:	f7f0 fb9b 	bl	800028c <__adddf3>
 800fb56:	4602      	mov	r2, r0
 800fb58:	460b      	mov	r3, r1
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	49bb      	ldr	r1, [pc, #748]	; (800fe4c <__ieee754_pow+0x76c>)
 800fb5e:	f7f0 fe75 	bl	800084c <__aeabi_ddiv>
 800fb62:	ec41 0b1a 	vmov	d10, r0, r1
 800fb66:	4602      	mov	r2, r0
 800fb68:	460b      	mov	r3, r1
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	4639      	mov	r1, r7
 800fb6e:	f7f0 fd43 	bl	80005f8 <__aeabi_dmul>
 800fb72:	2300      	movs	r3, #0
 800fb74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb78:	9302      	str	r3, [sp, #8]
 800fb7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fb7e:	46ab      	mov	fp, r5
 800fb80:	106d      	asrs	r5, r5, #1
 800fb82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fb86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fb8a:	ec41 0b18 	vmov	d8, r0, r1
 800fb8e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fb92:	2200      	movs	r2, #0
 800fb94:	4640      	mov	r0, r8
 800fb96:	4649      	mov	r1, r9
 800fb98:	4614      	mov	r4, r2
 800fb9a:	461d      	mov	r5, r3
 800fb9c:	f7f0 fd2c 	bl	80005f8 <__aeabi_dmul>
 800fba0:	4602      	mov	r2, r0
 800fba2:	460b      	mov	r3, r1
 800fba4:	4630      	mov	r0, r6
 800fba6:	4639      	mov	r1, r7
 800fba8:	f7f0 fb6e 	bl	8000288 <__aeabi_dsub>
 800fbac:	ec53 2b19 	vmov	r2, r3, d9
 800fbb0:	4606      	mov	r6, r0
 800fbb2:	460f      	mov	r7, r1
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	f7f0 fb66 	bl	8000288 <__aeabi_dsub>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	460b      	mov	r3, r1
 800fbc0:	4650      	mov	r0, sl
 800fbc2:	4659      	mov	r1, fp
 800fbc4:	f7f0 fb60 	bl	8000288 <__aeabi_dsub>
 800fbc8:	4642      	mov	r2, r8
 800fbca:	464b      	mov	r3, r9
 800fbcc:	f7f0 fd14 	bl	80005f8 <__aeabi_dmul>
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	4630      	mov	r0, r6
 800fbd6:	4639      	mov	r1, r7
 800fbd8:	f7f0 fb56 	bl	8000288 <__aeabi_dsub>
 800fbdc:	ec53 2b1a 	vmov	r2, r3, d10
 800fbe0:	f7f0 fd0a 	bl	80005f8 <__aeabi_dmul>
 800fbe4:	ec53 2b18 	vmov	r2, r3, d8
 800fbe8:	ec41 0b19 	vmov	d9, r0, r1
 800fbec:	ec51 0b18 	vmov	r0, r1, d8
 800fbf0:	f7f0 fd02 	bl	80005f8 <__aeabi_dmul>
 800fbf4:	a37c      	add	r3, pc, #496	; (adr r3, 800fde8 <__ieee754_pow+0x708>)
 800fbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	460d      	mov	r5, r1
 800fbfe:	f7f0 fcfb 	bl	80005f8 <__aeabi_dmul>
 800fc02:	a37b      	add	r3, pc, #492	; (adr r3, 800fdf0 <__ieee754_pow+0x710>)
 800fc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc08:	f7f0 fb40 	bl	800028c <__adddf3>
 800fc0c:	4622      	mov	r2, r4
 800fc0e:	462b      	mov	r3, r5
 800fc10:	f7f0 fcf2 	bl	80005f8 <__aeabi_dmul>
 800fc14:	a378      	add	r3, pc, #480	; (adr r3, 800fdf8 <__ieee754_pow+0x718>)
 800fc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1a:	f7f0 fb37 	bl	800028c <__adddf3>
 800fc1e:	4622      	mov	r2, r4
 800fc20:	462b      	mov	r3, r5
 800fc22:	f7f0 fce9 	bl	80005f8 <__aeabi_dmul>
 800fc26:	a376      	add	r3, pc, #472	; (adr r3, 800fe00 <__ieee754_pow+0x720>)
 800fc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2c:	f7f0 fb2e 	bl	800028c <__adddf3>
 800fc30:	4622      	mov	r2, r4
 800fc32:	462b      	mov	r3, r5
 800fc34:	f7f0 fce0 	bl	80005f8 <__aeabi_dmul>
 800fc38:	a373      	add	r3, pc, #460	; (adr r3, 800fe08 <__ieee754_pow+0x728>)
 800fc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3e:	f7f0 fb25 	bl	800028c <__adddf3>
 800fc42:	4622      	mov	r2, r4
 800fc44:	462b      	mov	r3, r5
 800fc46:	f7f0 fcd7 	bl	80005f8 <__aeabi_dmul>
 800fc4a:	a371      	add	r3, pc, #452	; (adr r3, 800fe10 <__ieee754_pow+0x730>)
 800fc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc50:	f7f0 fb1c 	bl	800028c <__adddf3>
 800fc54:	4622      	mov	r2, r4
 800fc56:	4606      	mov	r6, r0
 800fc58:	460f      	mov	r7, r1
 800fc5a:	462b      	mov	r3, r5
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	4629      	mov	r1, r5
 800fc60:	f7f0 fcca 	bl	80005f8 <__aeabi_dmul>
 800fc64:	4602      	mov	r2, r0
 800fc66:	460b      	mov	r3, r1
 800fc68:	4630      	mov	r0, r6
 800fc6a:	4639      	mov	r1, r7
 800fc6c:	f7f0 fcc4 	bl	80005f8 <__aeabi_dmul>
 800fc70:	4642      	mov	r2, r8
 800fc72:	4604      	mov	r4, r0
 800fc74:	460d      	mov	r5, r1
 800fc76:	464b      	mov	r3, r9
 800fc78:	ec51 0b18 	vmov	r0, r1, d8
 800fc7c:	f7f0 fb06 	bl	800028c <__adddf3>
 800fc80:	ec53 2b19 	vmov	r2, r3, d9
 800fc84:	f7f0 fcb8 	bl	80005f8 <__aeabi_dmul>
 800fc88:	4622      	mov	r2, r4
 800fc8a:	462b      	mov	r3, r5
 800fc8c:	f7f0 fafe 	bl	800028c <__adddf3>
 800fc90:	4642      	mov	r2, r8
 800fc92:	4682      	mov	sl, r0
 800fc94:	468b      	mov	fp, r1
 800fc96:	464b      	mov	r3, r9
 800fc98:	4640      	mov	r0, r8
 800fc9a:	4649      	mov	r1, r9
 800fc9c:	f7f0 fcac 	bl	80005f8 <__aeabi_dmul>
 800fca0:	4b6b      	ldr	r3, [pc, #428]	; (800fe50 <__ieee754_pow+0x770>)
 800fca2:	2200      	movs	r2, #0
 800fca4:	4606      	mov	r6, r0
 800fca6:	460f      	mov	r7, r1
 800fca8:	f7f0 faf0 	bl	800028c <__adddf3>
 800fcac:	4652      	mov	r2, sl
 800fcae:	465b      	mov	r3, fp
 800fcb0:	f7f0 faec 	bl	800028c <__adddf3>
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	460d      	mov	r5, r1
 800fcba:	4602      	mov	r2, r0
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	4640      	mov	r0, r8
 800fcc0:	4649      	mov	r1, r9
 800fcc2:	f7f0 fc99 	bl	80005f8 <__aeabi_dmul>
 800fcc6:	4b62      	ldr	r3, [pc, #392]	; (800fe50 <__ieee754_pow+0x770>)
 800fcc8:	4680      	mov	r8, r0
 800fcca:	4689      	mov	r9, r1
 800fccc:	2200      	movs	r2, #0
 800fcce:	4620      	mov	r0, r4
 800fcd0:	4629      	mov	r1, r5
 800fcd2:	f7f0 fad9 	bl	8000288 <__aeabi_dsub>
 800fcd6:	4632      	mov	r2, r6
 800fcd8:	463b      	mov	r3, r7
 800fcda:	f7f0 fad5 	bl	8000288 <__aeabi_dsub>
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	4650      	mov	r0, sl
 800fce4:	4659      	mov	r1, fp
 800fce6:	f7f0 facf 	bl	8000288 <__aeabi_dsub>
 800fcea:	ec53 2b18 	vmov	r2, r3, d8
 800fcee:	f7f0 fc83 	bl	80005f8 <__aeabi_dmul>
 800fcf2:	4622      	mov	r2, r4
 800fcf4:	4606      	mov	r6, r0
 800fcf6:	460f      	mov	r7, r1
 800fcf8:	462b      	mov	r3, r5
 800fcfa:	ec51 0b19 	vmov	r0, r1, d9
 800fcfe:	f7f0 fc7b 	bl	80005f8 <__aeabi_dmul>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	4630      	mov	r0, r6
 800fd08:	4639      	mov	r1, r7
 800fd0a:	f7f0 fabf 	bl	800028c <__adddf3>
 800fd0e:	4606      	mov	r6, r0
 800fd10:	460f      	mov	r7, r1
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	4640      	mov	r0, r8
 800fd18:	4649      	mov	r1, r9
 800fd1a:	f7f0 fab7 	bl	800028c <__adddf3>
 800fd1e:	a33e      	add	r3, pc, #248	; (adr r3, 800fe18 <__ieee754_pow+0x738>)
 800fd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd24:	2000      	movs	r0, #0
 800fd26:	4604      	mov	r4, r0
 800fd28:	460d      	mov	r5, r1
 800fd2a:	f7f0 fc65 	bl	80005f8 <__aeabi_dmul>
 800fd2e:	4642      	mov	r2, r8
 800fd30:	ec41 0b18 	vmov	d8, r0, r1
 800fd34:	464b      	mov	r3, r9
 800fd36:	4620      	mov	r0, r4
 800fd38:	4629      	mov	r1, r5
 800fd3a:	f7f0 faa5 	bl	8000288 <__aeabi_dsub>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	460b      	mov	r3, r1
 800fd42:	4630      	mov	r0, r6
 800fd44:	4639      	mov	r1, r7
 800fd46:	f7f0 fa9f 	bl	8000288 <__aeabi_dsub>
 800fd4a:	a335      	add	r3, pc, #212	; (adr r3, 800fe20 <__ieee754_pow+0x740>)
 800fd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd50:	f7f0 fc52 	bl	80005f8 <__aeabi_dmul>
 800fd54:	a334      	add	r3, pc, #208	; (adr r3, 800fe28 <__ieee754_pow+0x748>)
 800fd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5a:	4606      	mov	r6, r0
 800fd5c:	460f      	mov	r7, r1
 800fd5e:	4620      	mov	r0, r4
 800fd60:	4629      	mov	r1, r5
 800fd62:	f7f0 fc49 	bl	80005f8 <__aeabi_dmul>
 800fd66:	4602      	mov	r2, r0
 800fd68:	460b      	mov	r3, r1
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	4639      	mov	r1, r7
 800fd6e:	f7f0 fa8d 	bl	800028c <__adddf3>
 800fd72:	9a07      	ldr	r2, [sp, #28]
 800fd74:	4b37      	ldr	r3, [pc, #220]	; (800fe54 <__ieee754_pow+0x774>)
 800fd76:	4413      	add	r3, r2
 800fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7c:	f7f0 fa86 	bl	800028c <__adddf3>
 800fd80:	4682      	mov	sl, r0
 800fd82:	9805      	ldr	r0, [sp, #20]
 800fd84:	468b      	mov	fp, r1
 800fd86:	f7f0 fbcd 	bl	8000524 <__aeabi_i2d>
 800fd8a:	9a07      	ldr	r2, [sp, #28]
 800fd8c:	4b32      	ldr	r3, [pc, #200]	; (800fe58 <__ieee754_pow+0x778>)
 800fd8e:	4413      	add	r3, r2
 800fd90:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd94:	4606      	mov	r6, r0
 800fd96:	460f      	mov	r7, r1
 800fd98:	4652      	mov	r2, sl
 800fd9a:	465b      	mov	r3, fp
 800fd9c:	ec51 0b18 	vmov	r0, r1, d8
 800fda0:	f7f0 fa74 	bl	800028c <__adddf3>
 800fda4:	4642      	mov	r2, r8
 800fda6:	464b      	mov	r3, r9
 800fda8:	f7f0 fa70 	bl	800028c <__adddf3>
 800fdac:	4632      	mov	r2, r6
 800fdae:	463b      	mov	r3, r7
 800fdb0:	f7f0 fa6c 	bl	800028c <__adddf3>
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	4632      	mov	r2, r6
 800fdb8:	463b      	mov	r3, r7
 800fdba:	4604      	mov	r4, r0
 800fdbc:	460d      	mov	r5, r1
 800fdbe:	f7f0 fa63 	bl	8000288 <__aeabi_dsub>
 800fdc2:	4642      	mov	r2, r8
 800fdc4:	464b      	mov	r3, r9
 800fdc6:	f7f0 fa5f 	bl	8000288 <__aeabi_dsub>
 800fdca:	ec53 2b18 	vmov	r2, r3, d8
 800fdce:	f7f0 fa5b 	bl	8000288 <__aeabi_dsub>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	4650      	mov	r0, sl
 800fdd8:	4659      	mov	r1, fp
 800fdda:	e610      	b.n	800f9fe <__ieee754_pow+0x31e>
 800fddc:	2401      	movs	r4, #1
 800fdde:	e6a1      	b.n	800fb24 <__ieee754_pow+0x444>
 800fde0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800fe30 <__ieee754_pow+0x750>
 800fde4:	e617      	b.n	800fa16 <__ieee754_pow+0x336>
 800fde6:	bf00      	nop
 800fde8:	4a454eef 	.word	0x4a454eef
 800fdec:	3fca7e28 	.word	0x3fca7e28
 800fdf0:	93c9db65 	.word	0x93c9db65
 800fdf4:	3fcd864a 	.word	0x3fcd864a
 800fdf8:	a91d4101 	.word	0xa91d4101
 800fdfc:	3fd17460 	.word	0x3fd17460
 800fe00:	518f264d 	.word	0x518f264d
 800fe04:	3fd55555 	.word	0x3fd55555
 800fe08:	db6fabff 	.word	0xdb6fabff
 800fe0c:	3fdb6db6 	.word	0x3fdb6db6
 800fe10:	33333303 	.word	0x33333303
 800fe14:	3fe33333 	.word	0x3fe33333
 800fe18:	e0000000 	.word	0xe0000000
 800fe1c:	3feec709 	.word	0x3feec709
 800fe20:	dc3a03fd 	.word	0xdc3a03fd
 800fe24:	3feec709 	.word	0x3feec709
 800fe28:	145b01f5 	.word	0x145b01f5
 800fe2c:	be3e2fe0 	.word	0xbe3e2fe0
 800fe30:	00000000 	.word	0x00000000
 800fe34:	3ff00000 	.word	0x3ff00000
 800fe38:	7ff00000 	.word	0x7ff00000
 800fe3c:	43400000 	.word	0x43400000
 800fe40:	0003988e 	.word	0x0003988e
 800fe44:	000bb679 	.word	0x000bb679
 800fe48:	080120c8 	.word	0x080120c8
 800fe4c:	3ff00000 	.word	0x3ff00000
 800fe50:	40080000 	.word	0x40080000
 800fe54:	080120e8 	.word	0x080120e8
 800fe58:	080120d8 	.word	0x080120d8
 800fe5c:	a3b3      	add	r3, pc, #716	; (adr r3, 801012c <__ieee754_pow+0xa4c>)
 800fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe62:	4640      	mov	r0, r8
 800fe64:	4649      	mov	r1, r9
 800fe66:	f7f0 fa11 	bl	800028c <__adddf3>
 800fe6a:	4622      	mov	r2, r4
 800fe6c:	ec41 0b1a 	vmov	d10, r0, r1
 800fe70:	462b      	mov	r3, r5
 800fe72:	4630      	mov	r0, r6
 800fe74:	4639      	mov	r1, r7
 800fe76:	f7f0 fa07 	bl	8000288 <__aeabi_dsub>
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	ec51 0b1a 	vmov	r0, r1, d10
 800fe82:	f7f0 fe49 	bl	8000b18 <__aeabi_dcmpgt>
 800fe86:	2800      	cmp	r0, #0
 800fe88:	f47f ae04 	bne.w	800fa94 <__ieee754_pow+0x3b4>
 800fe8c:	4aa2      	ldr	r2, [pc, #648]	; (8010118 <__ieee754_pow+0xa38>)
 800fe8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fe92:	4293      	cmp	r3, r2
 800fe94:	f340 8107 	ble.w	80100a6 <__ieee754_pow+0x9c6>
 800fe98:	151b      	asrs	r3, r3, #20
 800fe9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fe9e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fea2:	fa4a fa03 	asr.w	sl, sl, r3
 800fea6:	44da      	add	sl, fp
 800fea8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800feac:	489b      	ldr	r0, [pc, #620]	; (801011c <__ieee754_pow+0xa3c>)
 800feae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800feb2:	4108      	asrs	r0, r1
 800feb4:	ea00 030a 	and.w	r3, r0, sl
 800feb8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800febc:	f1c1 0114 	rsb	r1, r1, #20
 800fec0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fec4:	fa4a fa01 	asr.w	sl, sl, r1
 800fec8:	f1bb 0f00 	cmp.w	fp, #0
 800fecc:	f04f 0200 	mov.w	r2, #0
 800fed0:	4620      	mov	r0, r4
 800fed2:	4629      	mov	r1, r5
 800fed4:	bfb8      	it	lt
 800fed6:	f1ca 0a00 	rsblt	sl, sl, #0
 800feda:	f7f0 f9d5 	bl	8000288 <__aeabi_dsub>
 800fede:	ec41 0b19 	vmov	d9, r0, r1
 800fee2:	4642      	mov	r2, r8
 800fee4:	464b      	mov	r3, r9
 800fee6:	ec51 0b19 	vmov	r0, r1, d9
 800feea:	f7f0 f9cf 	bl	800028c <__adddf3>
 800feee:	a37a      	add	r3, pc, #488	; (adr r3, 80100d8 <__ieee754_pow+0x9f8>)
 800fef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef4:	2000      	movs	r0, #0
 800fef6:	4604      	mov	r4, r0
 800fef8:	460d      	mov	r5, r1
 800fefa:	f7f0 fb7d 	bl	80005f8 <__aeabi_dmul>
 800fefe:	ec53 2b19 	vmov	r2, r3, d9
 800ff02:	4606      	mov	r6, r0
 800ff04:	460f      	mov	r7, r1
 800ff06:	4620      	mov	r0, r4
 800ff08:	4629      	mov	r1, r5
 800ff0a:	f7f0 f9bd 	bl	8000288 <__aeabi_dsub>
 800ff0e:	4602      	mov	r2, r0
 800ff10:	460b      	mov	r3, r1
 800ff12:	4640      	mov	r0, r8
 800ff14:	4649      	mov	r1, r9
 800ff16:	f7f0 f9b7 	bl	8000288 <__aeabi_dsub>
 800ff1a:	a371      	add	r3, pc, #452	; (adr r3, 80100e0 <__ieee754_pow+0xa00>)
 800ff1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff20:	f7f0 fb6a 	bl	80005f8 <__aeabi_dmul>
 800ff24:	a370      	add	r3, pc, #448	; (adr r3, 80100e8 <__ieee754_pow+0xa08>)
 800ff26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2a:	4680      	mov	r8, r0
 800ff2c:	4689      	mov	r9, r1
 800ff2e:	4620      	mov	r0, r4
 800ff30:	4629      	mov	r1, r5
 800ff32:	f7f0 fb61 	bl	80005f8 <__aeabi_dmul>
 800ff36:	4602      	mov	r2, r0
 800ff38:	460b      	mov	r3, r1
 800ff3a:	4640      	mov	r0, r8
 800ff3c:	4649      	mov	r1, r9
 800ff3e:	f7f0 f9a5 	bl	800028c <__adddf3>
 800ff42:	4604      	mov	r4, r0
 800ff44:	460d      	mov	r5, r1
 800ff46:	4602      	mov	r2, r0
 800ff48:	460b      	mov	r3, r1
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	4639      	mov	r1, r7
 800ff4e:	f7f0 f99d 	bl	800028c <__adddf3>
 800ff52:	4632      	mov	r2, r6
 800ff54:	463b      	mov	r3, r7
 800ff56:	4680      	mov	r8, r0
 800ff58:	4689      	mov	r9, r1
 800ff5a:	f7f0 f995 	bl	8000288 <__aeabi_dsub>
 800ff5e:	4602      	mov	r2, r0
 800ff60:	460b      	mov	r3, r1
 800ff62:	4620      	mov	r0, r4
 800ff64:	4629      	mov	r1, r5
 800ff66:	f7f0 f98f 	bl	8000288 <__aeabi_dsub>
 800ff6a:	4642      	mov	r2, r8
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	460f      	mov	r7, r1
 800ff70:	464b      	mov	r3, r9
 800ff72:	4640      	mov	r0, r8
 800ff74:	4649      	mov	r1, r9
 800ff76:	f7f0 fb3f 	bl	80005f8 <__aeabi_dmul>
 800ff7a:	a35d      	add	r3, pc, #372	; (adr r3, 80100f0 <__ieee754_pow+0xa10>)
 800ff7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff80:	4604      	mov	r4, r0
 800ff82:	460d      	mov	r5, r1
 800ff84:	f7f0 fb38 	bl	80005f8 <__aeabi_dmul>
 800ff88:	a35b      	add	r3, pc, #364	; (adr r3, 80100f8 <__ieee754_pow+0xa18>)
 800ff8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8e:	f7f0 f97b 	bl	8000288 <__aeabi_dsub>
 800ff92:	4622      	mov	r2, r4
 800ff94:	462b      	mov	r3, r5
 800ff96:	f7f0 fb2f 	bl	80005f8 <__aeabi_dmul>
 800ff9a:	a359      	add	r3, pc, #356	; (adr r3, 8010100 <__ieee754_pow+0xa20>)
 800ff9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa0:	f7f0 f974 	bl	800028c <__adddf3>
 800ffa4:	4622      	mov	r2, r4
 800ffa6:	462b      	mov	r3, r5
 800ffa8:	f7f0 fb26 	bl	80005f8 <__aeabi_dmul>
 800ffac:	a356      	add	r3, pc, #344	; (adr r3, 8010108 <__ieee754_pow+0xa28>)
 800ffae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb2:	f7f0 f969 	bl	8000288 <__aeabi_dsub>
 800ffb6:	4622      	mov	r2, r4
 800ffb8:	462b      	mov	r3, r5
 800ffba:	f7f0 fb1d 	bl	80005f8 <__aeabi_dmul>
 800ffbe:	a354      	add	r3, pc, #336	; (adr r3, 8010110 <__ieee754_pow+0xa30>)
 800ffc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc4:	f7f0 f962 	bl	800028c <__adddf3>
 800ffc8:	4622      	mov	r2, r4
 800ffca:	462b      	mov	r3, r5
 800ffcc:	f7f0 fb14 	bl	80005f8 <__aeabi_dmul>
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	4640      	mov	r0, r8
 800ffd6:	4649      	mov	r1, r9
 800ffd8:	f7f0 f956 	bl	8000288 <__aeabi_dsub>
 800ffdc:	4604      	mov	r4, r0
 800ffde:	460d      	mov	r5, r1
 800ffe0:	4602      	mov	r2, r0
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	4640      	mov	r0, r8
 800ffe6:	4649      	mov	r1, r9
 800ffe8:	f7f0 fb06 	bl	80005f8 <__aeabi_dmul>
 800ffec:	2200      	movs	r2, #0
 800ffee:	ec41 0b19 	vmov	d9, r0, r1
 800fff2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fff6:	4620      	mov	r0, r4
 800fff8:	4629      	mov	r1, r5
 800fffa:	f7f0 f945 	bl	8000288 <__aeabi_dsub>
 800fffe:	4602      	mov	r2, r0
 8010000:	460b      	mov	r3, r1
 8010002:	ec51 0b19 	vmov	r0, r1, d9
 8010006:	f7f0 fc21 	bl	800084c <__aeabi_ddiv>
 801000a:	4632      	mov	r2, r6
 801000c:	4604      	mov	r4, r0
 801000e:	460d      	mov	r5, r1
 8010010:	463b      	mov	r3, r7
 8010012:	4640      	mov	r0, r8
 8010014:	4649      	mov	r1, r9
 8010016:	f7f0 faef 	bl	80005f8 <__aeabi_dmul>
 801001a:	4632      	mov	r2, r6
 801001c:	463b      	mov	r3, r7
 801001e:	f7f0 f935 	bl	800028c <__adddf3>
 8010022:	4602      	mov	r2, r0
 8010024:	460b      	mov	r3, r1
 8010026:	4620      	mov	r0, r4
 8010028:	4629      	mov	r1, r5
 801002a:	f7f0 f92d 	bl	8000288 <__aeabi_dsub>
 801002e:	4642      	mov	r2, r8
 8010030:	464b      	mov	r3, r9
 8010032:	f7f0 f929 	bl	8000288 <__aeabi_dsub>
 8010036:	460b      	mov	r3, r1
 8010038:	4602      	mov	r2, r0
 801003a:	4939      	ldr	r1, [pc, #228]	; (8010120 <__ieee754_pow+0xa40>)
 801003c:	2000      	movs	r0, #0
 801003e:	f7f0 f923 	bl	8000288 <__aeabi_dsub>
 8010042:	ec41 0b10 	vmov	d0, r0, r1
 8010046:	ee10 3a90 	vmov	r3, s1
 801004a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801004e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010052:	da2b      	bge.n	80100ac <__ieee754_pow+0x9cc>
 8010054:	4650      	mov	r0, sl
 8010056:	f000 fc23 	bl	80108a0 <scalbn>
 801005a:	ec51 0b10 	vmov	r0, r1, d0
 801005e:	ec53 2b18 	vmov	r2, r3, d8
 8010062:	f7ff bbee 	b.w	800f842 <__ieee754_pow+0x162>
 8010066:	4b2f      	ldr	r3, [pc, #188]	; (8010124 <__ieee754_pow+0xa44>)
 8010068:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801006c:	429e      	cmp	r6, r3
 801006e:	f77f af0d 	ble.w	800fe8c <__ieee754_pow+0x7ac>
 8010072:	4b2d      	ldr	r3, [pc, #180]	; (8010128 <__ieee754_pow+0xa48>)
 8010074:	440b      	add	r3, r1
 8010076:	4303      	orrs	r3, r0
 8010078:	d009      	beq.n	801008e <__ieee754_pow+0x9ae>
 801007a:	ec51 0b18 	vmov	r0, r1, d8
 801007e:	2200      	movs	r2, #0
 8010080:	2300      	movs	r3, #0
 8010082:	f7f0 fd2b 	bl	8000adc <__aeabi_dcmplt>
 8010086:	3800      	subs	r0, #0
 8010088:	bf18      	it	ne
 801008a:	2001      	movne	r0, #1
 801008c:	e448      	b.n	800f920 <__ieee754_pow+0x240>
 801008e:	4622      	mov	r2, r4
 8010090:	462b      	mov	r3, r5
 8010092:	f7f0 f8f9 	bl	8000288 <__aeabi_dsub>
 8010096:	4642      	mov	r2, r8
 8010098:	464b      	mov	r3, r9
 801009a:	f7f0 fd33 	bl	8000b04 <__aeabi_dcmpge>
 801009e:	2800      	cmp	r0, #0
 80100a0:	f43f aef4 	beq.w	800fe8c <__ieee754_pow+0x7ac>
 80100a4:	e7e9      	b.n	801007a <__ieee754_pow+0x99a>
 80100a6:	f04f 0a00 	mov.w	sl, #0
 80100aa:	e71a      	b.n	800fee2 <__ieee754_pow+0x802>
 80100ac:	ec51 0b10 	vmov	r0, r1, d0
 80100b0:	4619      	mov	r1, r3
 80100b2:	e7d4      	b.n	801005e <__ieee754_pow+0x97e>
 80100b4:	491a      	ldr	r1, [pc, #104]	; (8010120 <__ieee754_pow+0xa40>)
 80100b6:	2000      	movs	r0, #0
 80100b8:	f7ff bb31 	b.w	800f71e <__ieee754_pow+0x3e>
 80100bc:	2000      	movs	r0, #0
 80100be:	2100      	movs	r1, #0
 80100c0:	f7ff bb2d 	b.w	800f71e <__ieee754_pow+0x3e>
 80100c4:	4630      	mov	r0, r6
 80100c6:	4639      	mov	r1, r7
 80100c8:	f7ff bb29 	b.w	800f71e <__ieee754_pow+0x3e>
 80100cc:	9204      	str	r2, [sp, #16]
 80100ce:	f7ff bb7b 	b.w	800f7c8 <__ieee754_pow+0xe8>
 80100d2:	2300      	movs	r3, #0
 80100d4:	f7ff bb65 	b.w	800f7a2 <__ieee754_pow+0xc2>
 80100d8:	00000000 	.word	0x00000000
 80100dc:	3fe62e43 	.word	0x3fe62e43
 80100e0:	fefa39ef 	.word	0xfefa39ef
 80100e4:	3fe62e42 	.word	0x3fe62e42
 80100e8:	0ca86c39 	.word	0x0ca86c39
 80100ec:	be205c61 	.word	0xbe205c61
 80100f0:	72bea4d0 	.word	0x72bea4d0
 80100f4:	3e663769 	.word	0x3e663769
 80100f8:	c5d26bf1 	.word	0xc5d26bf1
 80100fc:	3ebbbd41 	.word	0x3ebbbd41
 8010100:	af25de2c 	.word	0xaf25de2c
 8010104:	3f11566a 	.word	0x3f11566a
 8010108:	16bebd93 	.word	0x16bebd93
 801010c:	3f66c16c 	.word	0x3f66c16c
 8010110:	5555553e 	.word	0x5555553e
 8010114:	3fc55555 	.word	0x3fc55555
 8010118:	3fe00000 	.word	0x3fe00000
 801011c:	fff00000 	.word	0xfff00000
 8010120:	3ff00000 	.word	0x3ff00000
 8010124:	4090cbff 	.word	0x4090cbff
 8010128:	3f6f3400 	.word	0x3f6f3400
 801012c:	652b82fe 	.word	0x652b82fe
 8010130:	3c971547 	.word	0x3c971547
 8010134:	00000000 	.word	0x00000000

08010138 <__ieee754_rem_pio2>:
 8010138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801013c:	ed2d 8b02 	vpush	{d8}
 8010140:	ec55 4b10 	vmov	r4, r5, d0
 8010144:	4bca      	ldr	r3, [pc, #808]	; (8010470 <__ieee754_rem_pio2+0x338>)
 8010146:	b08b      	sub	sp, #44	; 0x2c
 8010148:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801014c:	4598      	cmp	r8, r3
 801014e:	4682      	mov	sl, r0
 8010150:	9502      	str	r5, [sp, #8]
 8010152:	dc08      	bgt.n	8010166 <__ieee754_rem_pio2+0x2e>
 8010154:	2200      	movs	r2, #0
 8010156:	2300      	movs	r3, #0
 8010158:	ed80 0b00 	vstr	d0, [r0]
 801015c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010160:	f04f 0b00 	mov.w	fp, #0
 8010164:	e028      	b.n	80101b8 <__ieee754_rem_pio2+0x80>
 8010166:	4bc3      	ldr	r3, [pc, #780]	; (8010474 <__ieee754_rem_pio2+0x33c>)
 8010168:	4598      	cmp	r8, r3
 801016a:	dc78      	bgt.n	801025e <__ieee754_rem_pio2+0x126>
 801016c:	9b02      	ldr	r3, [sp, #8]
 801016e:	4ec2      	ldr	r6, [pc, #776]	; (8010478 <__ieee754_rem_pio2+0x340>)
 8010170:	2b00      	cmp	r3, #0
 8010172:	ee10 0a10 	vmov	r0, s0
 8010176:	a3b0      	add	r3, pc, #704	; (adr r3, 8010438 <__ieee754_rem_pio2+0x300>)
 8010178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017c:	4629      	mov	r1, r5
 801017e:	dd39      	ble.n	80101f4 <__ieee754_rem_pio2+0xbc>
 8010180:	f7f0 f882 	bl	8000288 <__aeabi_dsub>
 8010184:	45b0      	cmp	r8, r6
 8010186:	4604      	mov	r4, r0
 8010188:	460d      	mov	r5, r1
 801018a:	d01b      	beq.n	80101c4 <__ieee754_rem_pio2+0x8c>
 801018c:	a3ac      	add	r3, pc, #688	; (adr r3, 8010440 <__ieee754_rem_pio2+0x308>)
 801018e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010192:	f7f0 f879 	bl	8000288 <__aeabi_dsub>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	e9ca 2300 	strd	r2, r3, [sl]
 801019e:	4620      	mov	r0, r4
 80101a0:	4629      	mov	r1, r5
 80101a2:	f7f0 f871 	bl	8000288 <__aeabi_dsub>
 80101a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8010440 <__ieee754_rem_pio2+0x308>)
 80101a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ac:	f7f0 f86c 	bl	8000288 <__aeabi_dsub>
 80101b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80101b4:	f04f 0b01 	mov.w	fp, #1
 80101b8:	4658      	mov	r0, fp
 80101ba:	b00b      	add	sp, #44	; 0x2c
 80101bc:	ecbd 8b02 	vpop	{d8}
 80101c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8010448 <__ieee754_rem_pio2+0x310>)
 80101c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ca:	f7f0 f85d 	bl	8000288 <__aeabi_dsub>
 80101ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8010450 <__ieee754_rem_pio2+0x318>)
 80101d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d4:	4604      	mov	r4, r0
 80101d6:	460d      	mov	r5, r1
 80101d8:	f7f0 f856 	bl	8000288 <__aeabi_dsub>
 80101dc:	4602      	mov	r2, r0
 80101de:	460b      	mov	r3, r1
 80101e0:	e9ca 2300 	strd	r2, r3, [sl]
 80101e4:	4620      	mov	r0, r4
 80101e6:	4629      	mov	r1, r5
 80101e8:	f7f0 f84e 	bl	8000288 <__aeabi_dsub>
 80101ec:	a398      	add	r3, pc, #608	; (adr r3, 8010450 <__ieee754_rem_pio2+0x318>)
 80101ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f2:	e7db      	b.n	80101ac <__ieee754_rem_pio2+0x74>
 80101f4:	f7f0 f84a 	bl	800028c <__adddf3>
 80101f8:	45b0      	cmp	r8, r6
 80101fa:	4604      	mov	r4, r0
 80101fc:	460d      	mov	r5, r1
 80101fe:	d016      	beq.n	801022e <__ieee754_rem_pio2+0xf6>
 8010200:	a38f      	add	r3, pc, #572	; (adr r3, 8010440 <__ieee754_rem_pio2+0x308>)
 8010202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010206:	f7f0 f841 	bl	800028c <__adddf3>
 801020a:	4602      	mov	r2, r0
 801020c:	460b      	mov	r3, r1
 801020e:	e9ca 2300 	strd	r2, r3, [sl]
 8010212:	4620      	mov	r0, r4
 8010214:	4629      	mov	r1, r5
 8010216:	f7f0 f837 	bl	8000288 <__aeabi_dsub>
 801021a:	a389      	add	r3, pc, #548	; (adr r3, 8010440 <__ieee754_rem_pio2+0x308>)
 801021c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010220:	f7f0 f834 	bl	800028c <__adddf3>
 8010224:	f04f 3bff 	mov.w	fp, #4294967295
 8010228:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801022c:	e7c4      	b.n	80101b8 <__ieee754_rem_pio2+0x80>
 801022e:	a386      	add	r3, pc, #536	; (adr r3, 8010448 <__ieee754_rem_pio2+0x310>)
 8010230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010234:	f7f0 f82a 	bl	800028c <__adddf3>
 8010238:	a385      	add	r3, pc, #532	; (adr r3, 8010450 <__ieee754_rem_pio2+0x318>)
 801023a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023e:	4604      	mov	r4, r0
 8010240:	460d      	mov	r5, r1
 8010242:	f7f0 f823 	bl	800028c <__adddf3>
 8010246:	4602      	mov	r2, r0
 8010248:	460b      	mov	r3, r1
 801024a:	e9ca 2300 	strd	r2, r3, [sl]
 801024e:	4620      	mov	r0, r4
 8010250:	4629      	mov	r1, r5
 8010252:	f7f0 f819 	bl	8000288 <__aeabi_dsub>
 8010256:	a37e      	add	r3, pc, #504	; (adr r3, 8010450 <__ieee754_rem_pio2+0x318>)
 8010258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025c:	e7e0      	b.n	8010220 <__ieee754_rem_pio2+0xe8>
 801025e:	4b87      	ldr	r3, [pc, #540]	; (801047c <__ieee754_rem_pio2+0x344>)
 8010260:	4598      	cmp	r8, r3
 8010262:	f300 80d8 	bgt.w	8010416 <__ieee754_rem_pio2+0x2de>
 8010266:	f000 fb0f 	bl	8010888 <fabs>
 801026a:	ec55 4b10 	vmov	r4, r5, d0
 801026e:	ee10 0a10 	vmov	r0, s0
 8010272:	a379      	add	r3, pc, #484	; (adr r3, 8010458 <__ieee754_rem_pio2+0x320>)
 8010274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010278:	4629      	mov	r1, r5
 801027a:	f7f0 f9bd 	bl	80005f8 <__aeabi_dmul>
 801027e:	4b80      	ldr	r3, [pc, #512]	; (8010480 <__ieee754_rem_pio2+0x348>)
 8010280:	2200      	movs	r2, #0
 8010282:	f7f0 f803 	bl	800028c <__adddf3>
 8010286:	f7f0 fc67 	bl	8000b58 <__aeabi_d2iz>
 801028a:	4683      	mov	fp, r0
 801028c:	f7f0 f94a 	bl	8000524 <__aeabi_i2d>
 8010290:	4602      	mov	r2, r0
 8010292:	460b      	mov	r3, r1
 8010294:	ec43 2b18 	vmov	d8, r2, r3
 8010298:	a367      	add	r3, pc, #412	; (adr r3, 8010438 <__ieee754_rem_pio2+0x300>)
 801029a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029e:	f7f0 f9ab 	bl	80005f8 <__aeabi_dmul>
 80102a2:	4602      	mov	r2, r0
 80102a4:	460b      	mov	r3, r1
 80102a6:	4620      	mov	r0, r4
 80102a8:	4629      	mov	r1, r5
 80102aa:	f7ef ffed 	bl	8000288 <__aeabi_dsub>
 80102ae:	a364      	add	r3, pc, #400	; (adr r3, 8010440 <__ieee754_rem_pio2+0x308>)
 80102b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b4:	4606      	mov	r6, r0
 80102b6:	460f      	mov	r7, r1
 80102b8:	ec51 0b18 	vmov	r0, r1, d8
 80102bc:	f7f0 f99c 	bl	80005f8 <__aeabi_dmul>
 80102c0:	f1bb 0f1f 	cmp.w	fp, #31
 80102c4:	4604      	mov	r4, r0
 80102c6:	460d      	mov	r5, r1
 80102c8:	dc0d      	bgt.n	80102e6 <__ieee754_rem_pio2+0x1ae>
 80102ca:	4b6e      	ldr	r3, [pc, #440]	; (8010484 <__ieee754_rem_pio2+0x34c>)
 80102cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80102d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102d4:	4543      	cmp	r3, r8
 80102d6:	d006      	beq.n	80102e6 <__ieee754_rem_pio2+0x1ae>
 80102d8:	4622      	mov	r2, r4
 80102da:	462b      	mov	r3, r5
 80102dc:	4630      	mov	r0, r6
 80102de:	4639      	mov	r1, r7
 80102e0:	f7ef ffd2 	bl	8000288 <__aeabi_dsub>
 80102e4:	e00e      	b.n	8010304 <__ieee754_rem_pio2+0x1cc>
 80102e6:	462b      	mov	r3, r5
 80102e8:	4622      	mov	r2, r4
 80102ea:	4630      	mov	r0, r6
 80102ec:	4639      	mov	r1, r7
 80102ee:	f7ef ffcb 	bl	8000288 <__aeabi_dsub>
 80102f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80102f6:	9303      	str	r3, [sp, #12]
 80102f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80102fc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010300:	2b10      	cmp	r3, #16
 8010302:	dc02      	bgt.n	801030a <__ieee754_rem_pio2+0x1d2>
 8010304:	e9ca 0100 	strd	r0, r1, [sl]
 8010308:	e039      	b.n	801037e <__ieee754_rem_pio2+0x246>
 801030a:	a34f      	add	r3, pc, #316	; (adr r3, 8010448 <__ieee754_rem_pio2+0x310>)
 801030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010310:	ec51 0b18 	vmov	r0, r1, d8
 8010314:	f7f0 f970 	bl	80005f8 <__aeabi_dmul>
 8010318:	4604      	mov	r4, r0
 801031a:	460d      	mov	r5, r1
 801031c:	4602      	mov	r2, r0
 801031e:	460b      	mov	r3, r1
 8010320:	4630      	mov	r0, r6
 8010322:	4639      	mov	r1, r7
 8010324:	f7ef ffb0 	bl	8000288 <__aeabi_dsub>
 8010328:	4602      	mov	r2, r0
 801032a:	460b      	mov	r3, r1
 801032c:	4680      	mov	r8, r0
 801032e:	4689      	mov	r9, r1
 8010330:	4630      	mov	r0, r6
 8010332:	4639      	mov	r1, r7
 8010334:	f7ef ffa8 	bl	8000288 <__aeabi_dsub>
 8010338:	4622      	mov	r2, r4
 801033a:	462b      	mov	r3, r5
 801033c:	f7ef ffa4 	bl	8000288 <__aeabi_dsub>
 8010340:	a343      	add	r3, pc, #268	; (adr r3, 8010450 <__ieee754_rem_pio2+0x318>)
 8010342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010346:	4604      	mov	r4, r0
 8010348:	460d      	mov	r5, r1
 801034a:	ec51 0b18 	vmov	r0, r1, d8
 801034e:	f7f0 f953 	bl	80005f8 <__aeabi_dmul>
 8010352:	4622      	mov	r2, r4
 8010354:	462b      	mov	r3, r5
 8010356:	f7ef ff97 	bl	8000288 <__aeabi_dsub>
 801035a:	4602      	mov	r2, r0
 801035c:	460b      	mov	r3, r1
 801035e:	4604      	mov	r4, r0
 8010360:	460d      	mov	r5, r1
 8010362:	4640      	mov	r0, r8
 8010364:	4649      	mov	r1, r9
 8010366:	f7ef ff8f 	bl	8000288 <__aeabi_dsub>
 801036a:	9a03      	ldr	r2, [sp, #12]
 801036c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010370:	1ad3      	subs	r3, r2, r3
 8010372:	2b31      	cmp	r3, #49	; 0x31
 8010374:	dc24      	bgt.n	80103c0 <__ieee754_rem_pio2+0x288>
 8010376:	e9ca 0100 	strd	r0, r1, [sl]
 801037a:	4646      	mov	r6, r8
 801037c:	464f      	mov	r7, r9
 801037e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010382:	4630      	mov	r0, r6
 8010384:	4642      	mov	r2, r8
 8010386:	464b      	mov	r3, r9
 8010388:	4639      	mov	r1, r7
 801038a:	f7ef ff7d 	bl	8000288 <__aeabi_dsub>
 801038e:	462b      	mov	r3, r5
 8010390:	4622      	mov	r2, r4
 8010392:	f7ef ff79 	bl	8000288 <__aeabi_dsub>
 8010396:	9b02      	ldr	r3, [sp, #8]
 8010398:	2b00      	cmp	r3, #0
 801039a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801039e:	f6bf af0b 	bge.w	80101b8 <__ieee754_rem_pio2+0x80>
 80103a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80103a6:	f8ca 3004 	str.w	r3, [sl, #4]
 80103aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103ae:	f8ca 8000 	str.w	r8, [sl]
 80103b2:	f8ca 0008 	str.w	r0, [sl, #8]
 80103b6:	f8ca 300c 	str.w	r3, [sl, #12]
 80103ba:	f1cb 0b00 	rsb	fp, fp, #0
 80103be:	e6fb      	b.n	80101b8 <__ieee754_rem_pio2+0x80>
 80103c0:	a327      	add	r3, pc, #156	; (adr r3, 8010460 <__ieee754_rem_pio2+0x328>)
 80103c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c6:	ec51 0b18 	vmov	r0, r1, d8
 80103ca:	f7f0 f915 	bl	80005f8 <__aeabi_dmul>
 80103ce:	4604      	mov	r4, r0
 80103d0:	460d      	mov	r5, r1
 80103d2:	4602      	mov	r2, r0
 80103d4:	460b      	mov	r3, r1
 80103d6:	4640      	mov	r0, r8
 80103d8:	4649      	mov	r1, r9
 80103da:	f7ef ff55 	bl	8000288 <__aeabi_dsub>
 80103de:	4602      	mov	r2, r0
 80103e0:	460b      	mov	r3, r1
 80103e2:	4606      	mov	r6, r0
 80103e4:	460f      	mov	r7, r1
 80103e6:	4640      	mov	r0, r8
 80103e8:	4649      	mov	r1, r9
 80103ea:	f7ef ff4d 	bl	8000288 <__aeabi_dsub>
 80103ee:	4622      	mov	r2, r4
 80103f0:	462b      	mov	r3, r5
 80103f2:	f7ef ff49 	bl	8000288 <__aeabi_dsub>
 80103f6:	a31c      	add	r3, pc, #112	; (adr r3, 8010468 <__ieee754_rem_pio2+0x330>)
 80103f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fc:	4604      	mov	r4, r0
 80103fe:	460d      	mov	r5, r1
 8010400:	ec51 0b18 	vmov	r0, r1, d8
 8010404:	f7f0 f8f8 	bl	80005f8 <__aeabi_dmul>
 8010408:	4622      	mov	r2, r4
 801040a:	462b      	mov	r3, r5
 801040c:	f7ef ff3c 	bl	8000288 <__aeabi_dsub>
 8010410:	4604      	mov	r4, r0
 8010412:	460d      	mov	r5, r1
 8010414:	e760      	b.n	80102d8 <__ieee754_rem_pio2+0x1a0>
 8010416:	4b1c      	ldr	r3, [pc, #112]	; (8010488 <__ieee754_rem_pio2+0x350>)
 8010418:	4598      	cmp	r8, r3
 801041a:	dd37      	ble.n	801048c <__ieee754_rem_pio2+0x354>
 801041c:	ee10 2a10 	vmov	r2, s0
 8010420:	462b      	mov	r3, r5
 8010422:	4620      	mov	r0, r4
 8010424:	4629      	mov	r1, r5
 8010426:	f7ef ff2f 	bl	8000288 <__aeabi_dsub>
 801042a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801042e:	e9ca 0100 	strd	r0, r1, [sl]
 8010432:	e695      	b.n	8010160 <__ieee754_rem_pio2+0x28>
 8010434:	f3af 8000 	nop.w
 8010438:	54400000 	.word	0x54400000
 801043c:	3ff921fb 	.word	0x3ff921fb
 8010440:	1a626331 	.word	0x1a626331
 8010444:	3dd0b461 	.word	0x3dd0b461
 8010448:	1a600000 	.word	0x1a600000
 801044c:	3dd0b461 	.word	0x3dd0b461
 8010450:	2e037073 	.word	0x2e037073
 8010454:	3ba3198a 	.word	0x3ba3198a
 8010458:	6dc9c883 	.word	0x6dc9c883
 801045c:	3fe45f30 	.word	0x3fe45f30
 8010460:	2e000000 	.word	0x2e000000
 8010464:	3ba3198a 	.word	0x3ba3198a
 8010468:	252049c1 	.word	0x252049c1
 801046c:	397b839a 	.word	0x397b839a
 8010470:	3fe921fb 	.word	0x3fe921fb
 8010474:	4002d97b 	.word	0x4002d97b
 8010478:	3ff921fb 	.word	0x3ff921fb
 801047c:	413921fb 	.word	0x413921fb
 8010480:	3fe00000 	.word	0x3fe00000
 8010484:	080120f8 	.word	0x080120f8
 8010488:	7fefffff 	.word	0x7fefffff
 801048c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010490:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8010494:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010498:	4620      	mov	r0, r4
 801049a:	460d      	mov	r5, r1
 801049c:	f7f0 fb5c 	bl	8000b58 <__aeabi_d2iz>
 80104a0:	f7f0 f840 	bl	8000524 <__aeabi_i2d>
 80104a4:	4602      	mov	r2, r0
 80104a6:	460b      	mov	r3, r1
 80104a8:	4620      	mov	r0, r4
 80104aa:	4629      	mov	r1, r5
 80104ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80104b0:	f7ef feea 	bl	8000288 <__aeabi_dsub>
 80104b4:	4b21      	ldr	r3, [pc, #132]	; (801053c <__ieee754_rem_pio2+0x404>)
 80104b6:	2200      	movs	r2, #0
 80104b8:	f7f0 f89e 	bl	80005f8 <__aeabi_dmul>
 80104bc:	460d      	mov	r5, r1
 80104be:	4604      	mov	r4, r0
 80104c0:	f7f0 fb4a 	bl	8000b58 <__aeabi_d2iz>
 80104c4:	f7f0 f82e 	bl	8000524 <__aeabi_i2d>
 80104c8:	4602      	mov	r2, r0
 80104ca:	460b      	mov	r3, r1
 80104cc:	4620      	mov	r0, r4
 80104ce:	4629      	mov	r1, r5
 80104d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80104d4:	f7ef fed8 	bl	8000288 <__aeabi_dsub>
 80104d8:	4b18      	ldr	r3, [pc, #96]	; (801053c <__ieee754_rem_pio2+0x404>)
 80104da:	2200      	movs	r2, #0
 80104dc:	f7f0 f88c 	bl	80005f8 <__aeabi_dmul>
 80104e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80104e4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80104e8:	2703      	movs	r7, #3
 80104ea:	2400      	movs	r4, #0
 80104ec:	2500      	movs	r5, #0
 80104ee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80104f2:	4622      	mov	r2, r4
 80104f4:	462b      	mov	r3, r5
 80104f6:	46b9      	mov	r9, r7
 80104f8:	3f01      	subs	r7, #1
 80104fa:	f7f0 fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 80104fe:	2800      	cmp	r0, #0
 8010500:	d1f5      	bne.n	80104ee <__ieee754_rem_pio2+0x3b6>
 8010502:	4b0f      	ldr	r3, [pc, #60]	; (8010540 <__ieee754_rem_pio2+0x408>)
 8010504:	9301      	str	r3, [sp, #4]
 8010506:	2302      	movs	r3, #2
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	4632      	mov	r2, r6
 801050c:	464b      	mov	r3, r9
 801050e:	4651      	mov	r1, sl
 8010510:	a804      	add	r0, sp, #16
 8010512:	f000 fa75 	bl	8010a00 <__kernel_rem_pio2>
 8010516:	9b02      	ldr	r3, [sp, #8]
 8010518:	2b00      	cmp	r3, #0
 801051a:	4683      	mov	fp, r0
 801051c:	f6bf ae4c 	bge.w	80101b8 <__ieee754_rem_pio2+0x80>
 8010520:	e9da 2100 	ldrd	r2, r1, [sl]
 8010524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010528:	e9ca 2300 	strd	r2, r3, [sl]
 801052c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010530:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010534:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010538:	e73f      	b.n	80103ba <__ieee754_rem_pio2+0x282>
 801053a:	bf00      	nop
 801053c:	41700000 	.word	0x41700000
 8010540:	08012178 	.word	0x08012178
 8010544:	00000000 	.word	0x00000000

08010548 <atan>:
 8010548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801054c:	ec55 4b10 	vmov	r4, r5, d0
 8010550:	4bc3      	ldr	r3, [pc, #780]	; (8010860 <atan+0x318>)
 8010552:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010556:	429e      	cmp	r6, r3
 8010558:	46ab      	mov	fp, r5
 801055a:	dd18      	ble.n	801058e <atan+0x46>
 801055c:	4bc1      	ldr	r3, [pc, #772]	; (8010864 <atan+0x31c>)
 801055e:	429e      	cmp	r6, r3
 8010560:	dc01      	bgt.n	8010566 <atan+0x1e>
 8010562:	d109      	bne.n	8010578 <atan+0x30>
 8010564:	b144      	cbz	r4, 8010578 <atan+0x30>
 8010566:	4622      	mov	r2, r4
 8010568:	462b      	mov	r3, r5
 801056a:	4620      	mov	r0, r4
 801056c:	4629      	mov	r1, r5
 801056e:	f7ef fe8d 	bl	800028c <__adddf3>
 8010572:	4604      	mov	r4, r0
 8010574:	460d      	mov	r5, r1
 8010576:	e006      	b.n	8010586 <atan+0x3e>
 8010578:	f1bb 0f00 	cmp.w	fp, #0
 801057c:	f300 8131 	bgt.w	80107e2 <atan+0x29a>
 8010580:	a59b      	add	r5, pc, #620	; (adr r5, 80107f0 <atan+0x2a8>)
 8010582:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010586:	ec45 4b10 	vmov	d0, r4, r5
 801058a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801058e:	4bb6      	ldr	r3, [pc, #728]	; (8010868 <atan+0x320>)
 8010590:	429e      	cmp	r6, r3
 8010592:	dc14      	bgt.n	80105be <atan+0x76>
 8010594:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010598:	429e      	cmp	r6, r3
 801059a:	dc0d      	bgt.n	80105b8 <atan+0x70>
 801059c:	a396      	add	r3, pc, #600	; (adr r3, 80107f8 <atan+0x2b0>)
 801059e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a2:	ee10 0a10 	vmov	r0, s0
 80105a6:	4629      	mov	r1, r5
 80105a8:	f7ef fe70 	bl	800028c <__adddf3>
 80105ac:	4baf      	ldr	r3, [pc, #700]	; (801086c <atan+0x324>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	f7f0 fab2 	bl	8000b18 <__aeabi_dcmpgt>
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d1e6      	bne.n	8010586 <atan+0x3e>
 80105b8:	f04f 3aff 	mov.w	sl, #4294967295
 80105bc:	e02b      	b.n	8010616 <atan+0xce>
 80105be:	f000 f963 	bl	8010888 <fabs>
 80105c2:	4bab      	ldr	r3, [pc, #684]	; (8010870 <atan+0x328>)
 80105c4:	429e      	cmp	r6, r3
 80105c6:	ec55 4b10 	vmov	r4, r5, d0
 80105ca:	f300 80bf 	bgt.w	801074c <atan+0x204>
 80105ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80105d2:	429e      	cmp	r6, r3
 80105d4:	f300 80a0 	bgt.w	8010718 <atan+0x1d0>
 80105d8:	ee10 2a10 	vmov	r2, s0
 80105dc:	ee10 0a10 	vmov	r0, s0
 80105e0:	462b      	mov	r3, r5
 80105e2:	4629      	mov	r1, r5
 80105e4:	f7ef fe52 	bl	800028c <__adddf3>
 80105e8:	4ba0      	ldr	r3, [pc, #640]	; (801086c <atan+0x324>)
 80105ea:	2200      	movs	r2, #0
 80105ec:	f7ef fe4c 	bl	8000288 <__aeabi_dsub>
 80105f0:	2200      	movs	r2, #0
 80105f2:	4606      	mov	r6, r0
 80105f4:	460f      	mov	r7, r1
 80105f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80105fa:	4620      	mov	r0, r4
 80105fc:	4629      	mov	r1, r5
 80105fe:	f7ef fe45 	bl	800028c <__adddf3>
 8010602:	4602      	mov	r2, r0
 8010604:	460b      	mov	r3, r1
 8010606:	4630      	mov	r0, r6
 8010608:	4639      	mov	r1, r7
 801060a:	f7f0 f91f 	bl	800084c <__aeabi_ddiv>
 801060e:	f04f 0a00 	mov.w	sl, #0
 8010612:	4604      	mov	r4, r0
 8010614:	460d      	mov	r5, r1
 8010616:	4622      	mov	r2, r4
 8010618:	462b      	mov	r3, r5
 801061a:	4620      	mov	r0, r4
 801061c:	4629      	mov	r1, r5
 801061e:	f7ef ffeb 	bl	80005f8 <__aeabi_dmul>
 8010622:	4602      	mov	r2, r0
 8010624:	460b      	mov	r3, r1
 8010626:	4680      	mov	r8, r0
 8010628:	4689      	mov	r9, r1
 801062a:	f7ef ffe5 	bl	80005f8 <__aeabi_dmul>
 801062e:	a374      	add	r3, pc, #464	; (adr r3, 8010800 <atan+0x2b8>)
 8010630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010634:	4606      	mov	r6, r0
 8010636:	460f      	mov	r7, r1
 8010638:	f7ef ffde 	bl	80005f8 <__aeabi_dmul>
 801063c:	a372      	add	r3, pc, #456	; (adr r3, 8010808 <atan+0x2c0>)
 801063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010642:	f7ef fe23 	bl	800028c <__adddf3>
 8010646:	4632      	mov	r2, r6
 8010648:	463b      	mov	r3, r7
 801064a:	f7ef ffd5 	bl	80005f8 <__aeabi_dmul>
 801064e:	a370      	add	r3, pc, #448	; (adr r3, 8010810 <atan+0x2c8>)
 8010650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010654:	f7ef fe1a 	bl	800028c <__adddf3>
 8010658:	4632      	mov	r2, r6
 801065a:	463b      	mov	r3, r7
 801065c:	f7ef ffcc 	bl	80005f8 <__aeabi_dmul>
 8010660:	a36d      	add	r3, pc, #436	; (adr r3, 8010818 <atan+0x2d0>)
 8010662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010666:	f7ef fe11 	bl	800028c <__adddf3>
 801066a:	4632      	mov	r2, r6
 801066c:	463b      	mov	r3, r7
 801066e:	f7ef ffc3 	bl	80005f8 <__aeabi_dmul>
 8010672:	a36b      	add	r3, pc, #428	; (adr r3, 8010820 <atan+0x2d8>)
 8010674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010678:	f7ef fe08 	bl	800028c <__adddf3>
 801067c:	4632      	mov	r2, r6
 801067e:	463b      	mov	r3, r7
 8010680:	f7ef ffba 	bl	80005f8 <__aeabi_dmul>
 8010684:	a368      	add	r3, pc, #416	; (adr r3, 8010828 <atan+0x2e0>)
 8010686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068a:	f7ef fdff 	bl	800028c <__adddf3>
 801068e:	4642      	mov	r2, r8
 8010690:	464b      	mov	r3, r9
 8010692:	f7ef ffb1 	bl	80005f8 <__aeabi_dmul>
 8010696:	a366      	add	r3, pc, #408	; (adr r3, 8010830 <atan+0x2e8>)
 8010698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069c:	4680      	mov	r8, r0
 801069e:	4689      	mov	r9, r1
 80106a0:	4630      	mov	r0, r6
 80106a2:	4639      	mov	r1, r7
 80106a4:	f7ef ffa8 	bl	80005f8 <__aeabi_dmul>
 80106a8:	a363      	add	r3, pc, #396	; (adr r3, 8010838 <atan+0x2f0>)
 80106aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ae:	f7ef fdeb 	bl	8000288 <__aeabi_dsub>
 80106b2:	4632      	mov	r2, r6
 80106b4:	463b      	mov	r3, r7
 80106b6:	f7ef ff9f 	bl	80005f8 <__aeabi_dmul>
 80106ba:	a361      	add	r3, pc, #388	; (adr r3, 8010840 <atan+0x2f8>)
 80106bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c0:	f7ef fde2 	bl	8000288 <__aeabi_dsub>
 80106c4:	4632      	mov	r2, r6
 80106c6:	463b      	mov	r3, r7
 80106c8:	f7ef ff96 	bl	80005f8 <__aeabi_dmul>
 80106cc:	a35e      	add	r3, pc, #376	; (adr r3, 8010848 <atan+0x300>)
 80106ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d2:	f7ef fdd9 	bl	8000288 <__aeabi_dsub>
 80106d6:	4632      	mov	r2, r6
 80106d8:	463b      	mov	r3, r7
 80106da:	f7ef ff8d 	bl	80005f8 <__aeabi_dmul>
 80106de:	a35c      	add	r3, pc, #368	; (adr r3, 8010850 <atan+0x308>)
 80106e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e4:	f7ef fdd0 	bl	8000288 <__aeabi_dsub>
 80106e8:	4632      	mov	r2, r6
 80106ea:	463b      	mov	r3, r7
 80106ec:	f7ef ff84 	bl	80005f8 <__aeabi_dmul>
 80106f0:	4602      	mov	r2, r0
 80106f2:	460b      	mov	r3, r1
 80106f4:	4640      	mov	r0, r8
 80106f6:	4649      	mov	r1, r9
 80106f8:	f7ef fdc8 	bl	800028c <__adddf3>
 80106fc:	4622      	mov	r2, r4
 80106fe:	462b      	mov	r3, r5
 8010700:	f7ef ff7a 	bl	80005f8 <__aeabi_dmul>
 8010704:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010708:	4602      	mov	r2, r0
 801070a:	460b      	mov	r3, r1
 801070c:	d14b      	bne.n	80107a6 <atan+0x25e>
 801070e:	4620      	mov	r0, r4
 8010710:	4629      	mov	r1, r5
 8010712:	f7ef fdb9 	bl	8000288 <__aeabi_dsub>
 8010716:	e72c      	b.n	8010572 <atan+0x2a>
 8010718:	ee10 0a10 	vmov	r0, s0
 801071c:	4b53      	ldr	r3, [pc, #332]	; (801086c <atan+0x324>)
 801071e:	2200      	movs	r2, #0
 8010720:	4629      	mov	r1, r5
 8010722:	f7ef fdb1 	bl	8000288 <__aeabi_dsub>
 8010726:	4b51      	ldr	r3, [pc, #324]	; (801086c <atan+0x324>)
 8010728:	4606      	mov	r6, r0
 801072a:	460f      	mov	r7, r1
 801072c:	2200      	movs	r2, #0
 801072e:	4620      	mov	r0, r4
 8010730:	4629      	mov	r1, r5
 8010732:	f7ef fdab 	bl	800028c <__adddf3>
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	4630      	mov	r0, r6
 801073c:	4639      	mov	r1, r7
 801073e:	f7f0 f885 	bl	800084c <__aeabi_ddiv>
 8010742:	f04f 0a01 	mov.w	sl, #1
 8010746:	4604      	mov	r4, r0
 8010748:	460d      	mov	r5, r1
 801074a:	e764      	b.n	8010616 <atan+0xce>
 801074c:	4b49      	ldr	r3, [pc, #292]	; (8010874 <atan+0x32c>)
 801074e:	429e      	cmp	r6, r3
 8010750:	da1d      	bge.n	801078e <atan+0x246>
 8010752:	ee10 0a10 	vmov	r0, s0
 8010756:	4b48      	ldr	r3, [pc, #288]	; (8010878 <atan+0x330>)
 8010758:	2200      	movs	r2, #0
 801075a:	4629      	mov	r1, r5
 801075c:	f7ef fd94 	bl	8000288 <__aeabi_dsub>
 8010760:	4b45      	ldr	r3, [pc, #276]	; (8010878 <atan+0x330>)
 8010762:	4606      	mov	r6, r0
 8010764:	460f      	mov	r7, r1
 8010766:	2200      	movs	r2, #0
 8010768:	4620      	mov	r0, r4
 801076a:	4629      	mov	r1, r5
 801076c:	f7ef ff44 	bl	80005f8 <__aeabi_dmul>
 8010770:	4b3e      	ldr	r3, [pc, #248]	; (801086c <atan+0x324>)
 8010772:	2200      	movs	r2, #0
 8010774:	f7ef fd8a 	bl	800028c <__adddf3>
 8010778:	4602      	mov	r2, r0
 801077a:	460b      	mov	r3, r1
 801077c:	4630      	mov	r0, r6
 801077e:	4639      	mov	r1, r7
 8010780:	f7f0 f864 	bl	800084c <__aeabi_ddiv>
 8010784:	f04f 0a02 	mov.w	sl, #2
 8010788:	4604      	mov	r4, r0
 801078a:	460d      	mov	r5, r1
 801078c:	e743      	b.n	8010616 <atan+0xce>
 801078e:	462b      	mov	r3, r5
 8010790:	ee10 2a10 	vmov	r2, s0
 8010794:	4939      	ldr	r1, [pc, #228]	; (801087c <atan+0x334>)
 8010796:	2000      	movs	r0, #0
 8010798:	f7f0 f858 	bl	800084c <__aeabi_ddiv>
 801079c:	f04f 0a03 	mov.w	sl, #3
 80107a0:	4604      	mov	r4, r0
 80107a2:	460d      	mov	r5, r1
 80107a4:	e737      	b.n	8010616 <atan+0xce>
 80107a6:	4b36      	ldr	r3, [pc, #216]	; (8010880 <atan+0x338>)
 80107a8:	4e36      	ldr	r6, [pc, #216]	; (8010884 <atan+0x33c>)
 80107aa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80107ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b2:	f7ef fd69 	bl	8000288 <__aeabi_dsub>
 80107b6:	4622      	mov	r2, r4
 80107b8:	462b      	mov	r3, r5
 80107ba:	f7ef fd65 	bl	8000288 <__aeabi_dsub>
 80107be:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80107c2:	4602      	mov	r2, r0
 80107c4:	460b      	mov	r3, r1
 80107c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80107ca:	f7ef fd5d 	bl	8000288 <__aeabi_dsub>
 80107ce:	f1bb 0f00 	cmp.w	fp, #0
 80107d2:	4604      	mov	r4, r0
 80107d4:	460d      	mov	r5, r1
 80107d6:	f6bf aed6 	bge.w	8010586 <atan+0x3e>
 80107da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107de:	461d      	mov	r5, r3
 80107e0:	e6d1      	b.n	8010586 <atan+0x3e>
 80107e2:	a51d      	add	r5, pc, #116	; (adr r5, 8010858 <atan+0x310>)
 80107e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80107e8:	e6cd      	b.n	8010586 <atan+0x3e>
 80107ea:	bf00      	nop
 80107ec:	f3af 8000 	nop.w
 80107f0:	54442d18 	.word	0x54442d18
 80107f4:	bff921fb 	.word	0xbff921fb
 80107f8:	8800759c 	.word	0x8800759c
 80107fc:	7e37e43c 	.word	0x7e37e43c
 8010800:	e322da11 	.word	0xe322da11
 8010804:	3f90ad3a 	.word	0x3f90ad3a
 8010808:	24760deb 	.word	0x24760deb
 801080c:	3fa97b4b 	.word	0x3fa97b4b
 8010810:	a0d03d51 	.word	0xa0d03d51
 8010814:	3fb10d66 	.word	0x3fb10d66
 8010818:	c54c206e 	.word	0xc54c206e
 801081c:	3fb745cd 	.word	0x3fb745cd
 8010820:	920083ff 	.word	0x920083ff
 8010824:	3fc24924 	.word	0x3fc24924
 8010828:	5555550d 	.word	0x5555550d
 801082c:	3fd55555 	.word	0x3fd55555
 8010830:	2c6a6c2f 	.word	0x2c6a6c2f
 8010834:	bfa2b444 	.word	0xbfa2b444
 8010838:	52defd9a 	.word	0x52defd9a
 801083c:	3fadde2d 	.word	0x3fadde2d
 8010840:	af749a6d 	.word	0xaf749a6d
 8010844:	3fb3b0f2 	.word	0x3fb3b0f2
 8010848:	fe231671 	.word	0xfe231671
 801084c:	3fbc71c6 	.word	0x3fbc71c6
 8010850:	9998ebc4 	.word	0x9998ebc4
 8010854:	3fc99999 	.word	0x3fc99999
 8010858:	54442d18 	.word	0x54442d18
 801085c:	3ff921fb 	.word	0x3ff921fb
 8010860:	440fffff 	.word	0x440fffff
 8010864:	7ff00000 	.word	0x7ff00000
 8010868:	3fdbffff 	.word	0x3fdbffff
 801086c:	3ff00000 	.word	0x3ff00000
 8010870:	3ff2ffff 	.word	0x3ff2ffff
 8010874:	40038000 	.word	0x40038000
 8010878:	3ff80000 	.word	0x3ff80000
 801087c:	bff00000 	.word	0xbff00000
 8010880:	080122a0 	.word	0x080122a0
 8010884:	08012280 	.word	0x08012280

08010888 <fabs>:
 8010888:	ec51 0b10 	vmov	r0, r1, d0
 801088c:	ee10 2a10 	vmov	r2, s0
 8010890:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010894:	ec43 2b10 	vmov	d0, r2, r3
 8010898:	4770      	bx	lr
 801089a:	0000      	movs	r0, r0
 801089c:	0000      	movs	r0, r0
	...

080108a0 <scalbn>:
 80108a0:	b570      	push	{r4, r5, r6, lr}
 80108a2:	ec55 4b10 	vmov	r4, r5, d0
 80108a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80108aa:	4606      	mov	r6, r0
 80108ac:	462b      	mov	r3, r5
 80108ae:	b999      	cbnz	r1, 80108d8 <scalbn+0x38>
 80108b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80108b4:	4323      	orrs	r3, r4
 80108b6:	d03f      	beq.n	8010938 <scalbn+0x98>
 80108b8:	4b35      	ldr	r3, [pc, #212]	; (8010990 <scalbn+0xf0>)
 80108ba:	4629      	mov	r1, r5
 80108bc:	ee10 0a10 	vmov	r0, s0
 80108c0:	2200      	movs	r2, #0
 80108c2:	f7ef fe99 	bl	80005f8 <__aeabi_dmul>
 80108c6:	4b33      	ldr	r3, [pc, #204]	; (8010994 <scalbn+0xf4>)
 80108c8:	429e      	cmp	r6, r3
 80108ca:	4604      	mov	r4, r0
 80108cc:	460d      	mov	r5, r1
 80108ce:	da10      	bge.n	80108f2 <scalbn+0x52>
 80108d0:	a327      	add	r3, pc, #156	; (adr r3, 8010970 <scalbn+0xd0>)
 80108d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d6:	e01f      	b.n	8010918 <scalbn+0x78>
 80108d8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80108dc:	4291      	cmp	r1, r2
 80108de:	d10c      	bne.n	80108fa <scalbn+0x5a>
 80108e0:	ee10 2a10 	vmov	r2, s0
 80108e4:	4620      	mov	r0, r4
 80108e6:	4629      	mov	r1, r5
 80108e8:	f7ef fcd0 	bl	800028c <__adddf3>
 80108ec:	4604      	mov	r4, r0
 80108ee:	460d      	mov	r5, r1
 80108f0:	e022      	b.n	8010938 <scalbn+0x98>
 80108f2:	460b      	mov	r3, r1
 80108f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80108f8:	3936      	subs	r1, #54	; 0x36
 80108fa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80108fe:	4296      	cmp	r6, r2
 8010900:	dd0d      	ble.n	801091e <scalbn+0x7e>
 8010902:	2d00      	cmp	r5, #0
 8010904:	a11c      	add	r1, pc, #112	; (adr r1, 8010978 <scalbn+0xd8>)
 8010906:	e9d1 0100 	ldrd	r0, r1, [r1]
 801090a:	da02      	bge.n	8010912 <scalbn+0x72>
 801090c:	a11c      	add	r1, pc, #112	; (adr r1, 8010980 <scalbn+0xe0>)
 801090e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010912:	a319      	add	r3, pc, #100	; (adr r3, 8010978 <scalbn+0xd8>)
 8010914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010918:	f7ef fe6e 	bl	80005f8 <__aeabi_dmul>
 801091c:	e7e6      	b.n	80108ec <scalbn+0x4c>
 801091e:	1872      	adds	r2, r6, r1
 8010920:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010924:	428a      	cmp	r2, r1
 8010926:	dcec      	bgt.n	8010902 <scalbn+0x62>
 8010928:	2a00      	cmp	r2, #0
 801092a:	dd08      	ble.n	801093e <scalbn+0x9e>
 801092c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010930:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010934:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010938:	ec45 4b10 	vmov	d0, r4, r5
 801093c:	bd70      	pop	{r4, r5, r6, pc}
 801093e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010942:	da08      	bge.n	8010956 <scalbn+0xb6>
 8010944:	2d00      	cmp	r5, #0
 8010946:	a10a      	add	r1, pc, #40	; (adr r1, 8010970 <scalbn+0xd0>)
 8010948:	e9d1 0100 	ldrd	r0, r1, [r1]
 801094c:	dac0      	bge.n	80108d0 <scalbn+0x30>
 801094e:	a10e      	add	r1, pc, #56	; (adr r1, 8010988 <scalbn+0xe8>)
 8010950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010954:	e7bc      	b.n	80108d0 <scalbn+0x30>
 8010956:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801095a:	3236      	adds	r2, #54	; 0x36
 801095c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010960:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010964:	4620      	mov	r0, r4
 8010966:	4b0c      	ldr	r3, [pc, #48]	; (8010998 <scalbn+0xf8>)
 8010968:	2200      	movs	r2, #0
 801096a:	e7d5      	b.n	8010918 <scalbn+0x78>
 801096c:	f3af 8000 	nop.w
 8010970:	c2f8f359 	.word	0xc2f8f359
 8010974:	01a56e1f 	.word	0x01a56e1f
 8010978:	8800759c 	.word	0x8800759c
 801097c:	7e37e43c 	.word	0x7e37e43c
 8010980:	8800759c 	.word	0x8800759c
 8010984:	fe37e43c 	.word	0xfe37e43c
 8010988:	c2f8f359 	.word	0xc2f8f359
 801098c:	81a56e1f 	.word	0x81a56e1f
 8010990:	43500000 	.word	0x43500000
 8010994:	ffff3cb0 	.word	0xffff3cb0
 8010998:	3c900000 	.word	0x3c900000

0801099c <with_errno>:
 801099c:	b570      	push	{r4, r5, r6, lr}
 801099e:	4604      	mov	r4, r0
 80109a0:	460d      	mov	r5, r1
 80109a2:	4616      	mov	r6, r2
 80109a4:	f7fa fd08 	bl	800b3b8 <__errno>
 80109a8:	4629      	mov	r1, r5
 80109aa:	6006      	str	r6, [r0, #0]
 80109ac:	4620      	mov	r0, r4
 80109ae:	bd70      	pop	{r4, r5, r6, pc}

080109b0 <xflow>:
 80109b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109b2:	4614      	mov	r4, r2
 80109b4:	461d      	mov	r5, r3
 80109b6:	b108      	cbz	r0, 80109bc <xflow+0xc>
 80109b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80109bc:	e9cd 2300 	strd	r2, r3, [sp]
 80109c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109c4:	4620      	mov	r0, r4
 80109c6:	4629      	mov	r1, r5
 80109c8:	f7ef fe16 	bl	80005f8 <__aeabi_dmul>
 80109cc:	2222      	movs	r2, #34	; 0x22
 80109ce:	b003      	add	sp, #12
 80109d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109d4:	f7ff bfe2 	b.w	801099c <with_errno>

080109d8 <__math_uflow>:
 80109d8:	b508      	push	{r3, lr}
 80109da:	2200      	movs	r2, #0
 80109dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80109e0:	f7ff ffe6 	bl	80109b0 <xflow>
 80109e4:	ec41 0b10 	vmov	d0, r0, r1
 80109e8:	bd08      	pop	{r3, pc}

080109ea <__math_oflow>:
 80109ea:	b508      	push	{r3, lr}
 80109ec:	2200      	movs	r2, #0
 80109ee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80109f2:	f7ff ffdd 	bl	80109b0 <xflow>
 80109f6:	ec41 0b10 	vmov	d0, r0, r1
 80109fa:	bd08      	pop	{r3, pc}
 80109fc:	0000      	movs	r0, r0
	...

08010a00 <__kernel_rem_pio2>:
 8010a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a04:	ed2d 8b02 	vpush	{d8}
 8010a08:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010a0c:	f112 0f14 	cmn.w	r2, #20
 8010a10:	9306      	str	r3, [sp, #24]
 8010a12:	9104      	str	r1, [sp, #16]
 8010a14:	4bc2      	ldr	r3, [pc, #776]	; (8010d20 <__kernel_rem_pio2+0x320>)
 8010a16:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010a18:	9009      	str	r0, [sp, #36]	; 0x24
 8010a1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a1e:	9300      	str	r3, [sp, #0]
 8010a20:	9b06      	ldr	r3, [sp, #24]
 8010a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8010a26:	bfa8      	it	ge
 8010a28:	1ed4      	subge	r4, r2, #3
 8010a2a:	9305      	str	r3, [sp, #20]
 8010a2c:	bfb2      	itee	lt
 8010a2e:	2400      	movlt	r4, #0
 8010a30:	2318      	movge	r3, #24
 8010a32:	fb94 f4f3 	sdivge	r4, r4, r3
 8010a36:	f06f 0317 	mvn.w	r3, #23
 8010a3a:	fb04 3303 	mla	r3, r4, r3, r3
 8010a3e:	eb03 0a02 	add.w	sl, r3, r2
 8010a42:	9b00      	ldr	r3, [sp, #0]
 8010a44:	9a05      	ldr	r2, [sp, #20]
 8010a46:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8010d10 <__kernel_rem_pio2+0x310>
 8010a4a:	eb03 0802 	add.w	r8, r3, r2
 8010a4e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010a50:	1aa7      	subs	r7, r4, r2
 8010a52:	ae20      	add	r6, sp, #128	; 0x80
 8010a54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010a58:	2500      	movs	r5, #0
 8010a5a:	4545      	cmp	r5, r8
 8010a5c:	dd13      	ble.n	8010a86 <__kernel_rem_pio2+0x86>
 8010a5e:	9b06      	ldr	r3, [sp, #24]
 8010a60:	aa20      	add	r2, sp, #128	; 0x80
 8010a62:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010a66:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010a6a:	f04f 0800 	mov.w	r8, #0
 8010a6e:	9b00      	ldr	r3, [sp, #0]
 8010a70:	4598      	cmp	r8, r3
 8010a72:	dc31      	bgt.n	8010ad8 <__kernel_rem_pio2+0xd8>
 8010a74:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8010d10 <__kernel_rem_pio2+0x310>
 8010a78:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010a7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a80:	462f      	mov	r7, r5
 8010a82:	2600      	movs	r6, #0
 8010a84:	e01b      	b.n	8010abe <__kernel_rem_pio2+0xbe>
 8010a86:	42ef      	cmn	r7, r5
 8010a88:	d407      	bmi.n	8010a9a <__kernel_rem_pio2+0x9a>
 8010a8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010a8e:	f7ef fd49 	bl	8000524 <__aeabi_i2d>
 8010a92:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010a96:	3501      	adds	r5, #1
 8010a98:	e7df      	b.n	8010a5a <__kernel_rem_pio2+0x5a>
 8010a9a:	ec51 0b18 	vmov	r0, r1, d8
 8010a9e:	e7f8      	b.n	8010a92 <__kernel_rem_pio2+0x92>
 8010aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010aa4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010aa8:	f7ef fda6 	bl	80005f8 <__aeabi_dmul>
 8010aac:	4602      	mov	r2, r0
 8010aae:	460b      	mov	r3, r1
 8010ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ab4:	f7ef fbea 	bl	800028c <__adddf3>
 8010ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010abc:	3601      	adds	r6, #1
 8010abe:	9b05      	ldr	r3, [sp, #20]
 8010ac0:	429e      	cmp	r6, r3
 8010ac2:	f1a7 0708 	sub.w	r7, r7, #8
 8010ac6:	ddeb      	ble.n	8010aa0 <__kernel_rem_pio2+0xa0>
 8010ac8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010acc:	f108 0801 	add.w	r8, r8, #1
 8010ad0:	ecab 7b02 	vstmia	fp!, {d7}
 8010ad4:	3508      	adds	r5, #8
 8010ad6:	e7ca      	b.n	8010a6e <__kernel_rem_pio2+0x6e>
 8010ad8:	9b00      	ldr	r3, [sp, #0]
 8010ada:	aa0c      	add	r2, sp, #48	; 0x30
 8010adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ae0:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ae2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010ae4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010ae8:	9c00      	ldr	r4, [sp, #0]
 8010aea:	930a      	str	r3, [sp, #40]	; 0x28
 8010aec:	00e3      	lsls	r3, r4, #3
 8010aee:	9308      	str	r3, [sp, #32]
 8010af0:	ab98      	add	r3, sp, #608	; 0x260
 8010af2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010af6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010afa:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8010afe:	ab70      	add	r3, sp, #448	; 0x1c0
 8010b00:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010b04:	46c3      	mov	fp, r8
 8010b06:	46a1      	mov	r9, r4
 8010b08:	f1b9 0f00 	cmp.w	r9, #0
 8010b0c:	f1a5 0508 	sub.w	r5, r5, #8
 8010b10:	dc77      	bgt.n	8010c02 <__kernel_rem_pio2+0x202>
 8010b12:	ec47 6b10 	vmov	d0, r6, r7
 8010b16:	4650      	mov	r0, sl
 8010b18:	f7ff fec2 	bl	80108a0 <scalbn>
 8010b1c:	ec57 6b10 	vmov	r6, r7, d0
 8010b20:	2200      	movs	r2, #0
 8010b22:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010b26:	ee10 0a10 	vmov	r0, s0
 8010b2a:	4639      	mov	r1, r7
 8010b2c:	f7ef fd64 	bl	80005f8 <__aeabi_dmul>
 8010b30:	ec41 0b10 	vmov	d0, r0, r1
 8010b34:	f000 fab4 	bl	80110a0 <floor>
 8010b38:	4b7a      	ldr	r3, [pc, #488]	; (8010d24 <__kernel_rem_pio2+0x324>)
 8010b3a:	ec51 0b10 	vmov	r0, r1, d0
 8010b3e:	2200      	movs	r2, #0
 8010b40:	f7ef fd5a 	bl	80005f8 <__aeabi_dmul>
 8010b44:	4602      	mov	r2, r0
 8010b46:	460b      	mov	r3, r1
 8010b48:	4630      	mov	r0, r6
 8010b4a:	4639      	mov	r1, r7
 8010b4c:	f7ef fb9c 	bl	8000288 <__aeabi_dsub>
 8010b50:	460f      	mov	r7, r1
 8010b52:	4606      	mov	r6, r0
 8010b54:	f7f0 f800 	bl	8000b58 <__aeabi_d2iz>
 8010b58:	9002      	str	r0, [sp, #8]
 8010b5a:	f7ef fce3 	bl	8000524 <__aeabi_i2d>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	460b      	mov	r3, r1
 8010b62:	4630      	mov	r0, r6
 8010b64:	4639      	mov	r1, r7
 8010b66:	f7ef fb8f 	bl	8000288 <__aeabi_dsub>
 8010b6a:	f1ba 0f00 	cmp.w	sl, #0
 8010b6e:	4606      	mov	r6, r0
 8010b70:	460f      	mov	r7, r1
 8010b72:	dd6d      	ble.n	8010c50 <__kernel_rem_pio2+0x250>
 8010b74:	1e61      	subs	r1, r4, #1
 8010b76:	ab0c      	add	r3, sp, #48	; 0x30
 8010b78:	9d02      	ldr	r5, [sp, #8]
 8010b7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010b7e:	f1ca 0018 	rsb	r0, sl, #24
 8010b82:	fa43 f200 	asr.w	r2, r3, r0
 8010b86:	4415      	add	r5, r2
 8010b88:	4082      	lsls	r2, r0
 8010b8a:	1a9b      	subs	r3, r3, r2
 8010b8c:	aa0c      	add	r2, sp, #48	; 0x30
 8010b8e:	9502      	str	r5, [sp, #8]
 8010b90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010b94:	f1ca 0217 	rsb	r2, sl, #23
 8010b98:	fa43 fb02 	asr.w	fp, r3, r2
 8010b9c:	f1bb 0f00 	cmp.w	fp, #0
 8010ba0:	dd65      	ble.n	8010c6e <__kernel_rem_pio2+0x26e>
 8010ba2:	9b02      	ldr	r3, [sp, #8]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	9302      	str	r3, [sp, #8]
 8010baa:	4615      	mov	r5, r2
 8010bac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010bb0:	4294      	cmp	r4, r2
 8010bb2:	f300 809f 	bgt.w	8010cf4 <__kernel_rem_pio2+0x2f4>
 8010bb6:	f1ba 0f00 	cmp.w	sl, #0
 8010bba:	dd07      	ble.n	8010bcc <__kernel_rem_pio2+0x1cc>
 8010bbc:	f1ba 0f01 	cmp.w	sl, #1
 8010bc0:	f000 80c1 	beq.w	8010d46 <__kernel_rem_pio2+0x346>
 8010bc4:	f1ba 0f02 	cmp.w	sl, #2
 8010bc8:	f000 80c7 	beq.w	8010d5a <__kernel_rem_pio2+0x35a>
 8010bcc:	f1bb 0f02 	cmp.w	fp, #2
 8010bd0:	d14d      	bne.n	8010c6e <__kernel_rem_pio2+0x26e>
 8010bd2:	4632      	mov	r2, r6
 8010bd4:	463b      	mov	r3, r7
 8010bd6:	4954      	ldr	r1, [pc, #336]	; (8010d28 <__kernel_rem_pio2+0x328>)
 8010bd8:	2000      	movs	r0, #0
 8010bda:	f7ef fb55 	bl	8000288 <__aeabi_dsub>
 8010bde:	4606      	mov	r6, r0
 8010be0:	460f      	mov	r7, r1
 8010be2:	2d00      	cmp	r5, #0
 8010be4:	d043      	beq.n	8010c6e <__kernel_rem_pio2+0x26e>
 8010be6:	4650      	mov	r0, sl
 8010be8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8010d18 <__kernel_rem_pio2+0x318>
 8010bec:	f7ff fe58 	bl	80108a0 <scalbn>
 8010bf0:	4630      	mov	r0, r6
 8010bf2:	4639      	mov	r1, r7
 8010bf4:	ec53 2b10 	vmov	r2, r3, d0
 8010bf8:	f7ef fb46 	bl	8000288 <__aeabi_dsub>
 8010bfc:	4606      	mov	r6, r0
 8010bfe:	460f      	mov	r7, r1
 8010c00:	e035      	b.n	8010c6e <__kernel_rem_pio2+0x26e>
 8010c02:	4b4a      	ldr	r3, [pc, #296]	; (8010d2c <__kernel_rem_pio2+0x32c>)
 8010c04:	2200      	movs	r2, #0
 8010c06:	4630      	mov	r0, r6
 8010c08:	4639      	mov	r1, r7
 8010c0a:	f7ef fcf5 	bl	80005f8 <__aeabi_dmul>
 8010c0e:	f7ef ffa3 	bl	8000b58 <__aeabi_d2iz>
 8010c12:	f7ef fc87 	bl	8000524 <__aeabi_i2d>
 8010c16:	4602      	mov	r2, r0
 8010c18:	460b      	mov	r3, r1
 8010c1a:	ec43 2b18 	vmov	d8, r2, r3
 8010c1e:	4b44      	ldr	r3, [pc, #272]	; (8010d30 <__kernel_rem_pio2+0x330>)
 8010c20:	2200      	movs	r2, #0
 8010c22:	f7ef fce9 	bl	80005f8 <__aeabi_dmul>
 8010c26:	4602      	mov	r2, r0
 8010c28:	460b      	mov	r3, r1
 8010c2a:	4630      	mov	r0, r6
 8010c2c:	4639      	mov	r1, r7
 8010c2e:	f7ef fb2b 	bl	8000288 <__aeabi_dsub>
 8010c32:	f7ef ff91 	bl	8000b58 <__aeabi_d2iz>
 8010c36:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c3a:	f84b 0b04 	str.w	r0, [fp], #4
 8010c3e:	ec51 0b18 	vmov	r0, r1, d8
 8010c42:	f7ef fb23 	bl	800028c <__adddf3>
 8010c46:	f109 39ff 	add.w	r9, r9, #4294967295
 8010c4a:	4606      	mov	r6, r0
 8010c4c:	460f      	mov	r7, r1
 8010c4e:	e75b      	b.n	8010b08 <__kernel_rem_pio2+0x108>
 8010c50:	d106      	bne.n	8010c60 <__kernel_rem_pio2+0x260>
 8010c52:	1e63      	subs	r3, r4, #1
 8010c54:	aa0c      	add	r2, sp, #48	; 0x30
 8010c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c5a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8010c5e:	e79d      	b.n	8010b9c <__kernel_rem_pio2+0x19c>
 8010c60:	4b34      	ldr	r3, [pc, #208]	; (8010d34 <__kernel_rem_pio2+0x334>)
 8010c62:	2200      	movs	r2, #0
 8010c64:	f7ef ff4e 	bl	8000b04 <__aeabi_dcmpge>
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	d140      	bne.n	8010cee <__kernel_rem_pio2+0x2ee>
 8010c6c:	4683      	mov	fp, r0
 8010c6e:	2200      	movs	r2, #0
 8010c70:	2300      	movs	r3, #0
 8010c72:	4630      	mov	r0, r6
 8010c74:	4639      	mov	r1, r7
 8010c76:	f7ef ff27 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	f000 80c1 	beq.w	8010e02 <__kernel_rem_pio2+0x402>
 8010c80:	1e65      	subs	r5, r4, #1
 8010c82:	462b      	mov	r3, r5
 8010c84:	2200      	movs	r2, #0
 8010c86:	9900      	ldr	r1, [sp, #0]
 8010c88:	428b      	cmp	r3, r1
 8010c8a:	da6d      	bge.n	8010d68 <__kernel_rem_pio2+0x368>
 8010c8c:	2a00      	cmp	r2, #0
 8010c8e:	f000 808a 	beq.w	8010da6 <__kernel_rem_pio2+0x3a6>
 8010c92:	ab0c      	add	r3, sp, #48	; 0x30
 8010c94:	f1aa 0a18 	sub.w	sl, sl, #24
 8010c98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f000 80ae 	beq.w	8010dfe <__kernel_rem_pio2+0x3fe>
 8010ca2:	4650      	mov	r0, sl
 8010ca4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8010d18 <__kernel_rem_pio2+0x318>
 8010ca8:	f7ff fdfa 	bl	80108a0 <scalbn>
 8010cac:	1c6b      	adds	r3, r5, #1
 8010cae:	00da      	lsls	r2, r3, #3
 8010cb0:	9205      	str	r2, [sp, #20]
 8010cb2:	ec57 6b10 	vmov	r6, r7, d0
 8010cb6:	aa70      	add	r2, sp, #448	; 0x1c0
 8010cb8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8010d2c <__kernel_rem_pio2+0x32c>
 8010cbc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8010cc0:	462c      	mov	r4, r5
 8010cc2:	f04f 0800 	mov.w	r8, #0
 8010cc6:	2c00      	cmp	r4, #0
 8010cc8:	f280 80d4 	bge.w	8010e74 <__kernel_rem_pio2+0x474>
 8010ccc:	462c      	mov	r4, r5
 8010cce:	2c00      	cmp	r4, #0
 8010cd0:	f2c0 8102 	blt.w	8010ed8 <__kernel_rem_pio2+0x4d8>
 8010cd4:	4b18      	ldr	r3, [pc, #96]	; (8010d38 <__kernel_rem_pio2+0x338>)
 8010cd6:	461e      	mov	r6, r3
 8010cd8:	ab70      	add	r3, sp, #448	; 0x1c0
 8010cda:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8010cde:	1b2b      	subs	r3, r5, r4
 8010ce0:	f04f 0900 	mov.w	r9, #0
 8010ce4:	f04f 0a00 	mov.w	sl, #0
 8010ce8:	2700      	movs	r7, #0
 8010cea:	9306      	str	r3, [sp, #24]
 8010cec:	e0e6      	b.n	8010ebc <__kernel_rem_pio2+0x4bc>
 8010cee:	f04f 0b02 	mov.w	fp, #2
 8010cf2:	e756      	b.n	8010ba2 <__kernel_rem_pio2+0x1a2>
 8010cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8010cf8:	bb05      	cbnz	r5, 8010d3c <__kernel_rem_pio2+0x33c>
 8010cfa:	b123      	cbz	r3, 8010d06 <__kernel_rem_pio2+0x306>
 8010cfc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010d00:	f8c8 3000 	str.w	r3, [r8]
 8010d04:	2301      	movs	r3, #1
 8010d06:	3201      	adds	r2, #1
 8010d08:	f108 0804 	add.w	r8, r8, #4
 8010d0c:	461d      	mov	r5, r3
 8010d0e:	e74f      	b.n	8010bb0 <__kernel_rem_pio2+0x1b0>
	...
 8010d1c:	3ff00000 	.word	0x3ff00000
 8010d20:	08012300 	.word	0x08012300
 8010d24:	40200000 	.word	0x40200000
 8010d28:	3ff00000 	.word	0x3ff00000
 8010d2c:	3e700000 	.word	0x3e700000
 8010d30:	41700000 	.word	0x41700000
 8010d34:	3fe00000 	.word	0x3fe00000
 8010d38:	080122c0 	.word	0x080122c0
 8010d3c:	1acb      	subs	r3, r1, r3
 8010d3e:	f8c8 3000 	str.w	r3, [r8]
 8010d42:	462b      	mov	r3, r5
 8010d44:	e7df      	b.n	8010d06 <__kernel_rem_pio2+0x306>
 8010d46:	1e62      	subs	r2, r4, #1
 8010d48:	ab0c      	add	r3, sp, #48	; 0x30
 8010d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010d52:	a90c      	add	r1, sp, #48	; 0x30
 8010d54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010d58:	e738      	b.n	8010bcc <__kernel_rem_pio2+0x1cc>
 8010d5a:	1e62      	subs	r2, r4, #1
 8010d5c:	ab0c      	add	r3, sp, #48	; 0x30
 8010d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d62:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010d66:	e7f4      	b.n	8010d52 <__kernel_rem_pio2+0x352>
 8010d68:	a90c      	add	r1, sp, #48	; 0x30
 8010d6a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010d6e:	3b01      	subs	r3, #1
 8010d70:	430a      	orrs	r2, r1
 8010d72:	e788      	b.n	8010c86 <__kernel_rem_pio2+0x286>
 8010d74:	3301      	adds	r3, #1
 8010d76:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010d7a:	2900      	cmp	r1, #0
 8010d7c:	d0fa      	beq.n	8010d74 <__kernel_rem_pio2+0x374>
 8010d7e:	9a08      	ldr	r2, [sp, #32]
 8010d80:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8010d84:	446a      	add	r2, sp
 8010d86:	3a98      	subs	r2, #152	; 0x98
 8010d88:	9208      	str	r2, [sp, #32]
 8010d8a:	9a06      	ldr	r2, [sp, #24]
 8010d8c:	a920      	add	r1, sp, #128	; 0x80
 8010d8e:	18a2      	adds	r2, r4, r2
 8010d90:	18e3      	adds	r3, r4, r3
 8010d92:	f104 0801 	add.w	r8, r4, #1
 8010d96:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010d9a:	9302      	str	r3, [sp, #8]
 8010d9c:	9b02      	ldr	r3, [sp, #8]
 8010d9e:	4543      	cmp	r3, r8
 8010da0:	da04      	bge.n	8010dac <__kernel_rem_pio2+0x3ac>
 8010da2:	461c      	mov	r4, r3
 8010da4:	e6a2      	b.n	8010aec <__kernel_rem_pio2+0xec>
 8010da6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010da8:	2301      	movs	r3, #1
 8010daa:	e7e4      	b.n	8010d76 <__kernel_rem_pio2+0x376>
 8010dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dae:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010db2:	f7ef fbb7 	bl	8000524 <__aeabi_i2d>
 8010db6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dbc:	46ab      	mov	fp, r5
 8010dbe:	461c      	mov	r4, r3
 8010dc0:	f04f 0900 	mov.w	r9, #0
 8010dc4:	2600      	movs	r6, #0
 8010dc6:	2700      	movs	r7, #0
 8010dc8:	9b05      	ldr	r3, [sp, #20]
 8010dca:	4599      	cmp	r9, r3
 8010dcc:	dd06      	ble.n	8010ddc <__kernel_rem_pio2+0x3dc>
 8010dce:	9b08      	ldr	r3, [sp, #32]
 8010dd0:	e8e3 6702 	strd	r6, r7, [r3], #8
 8010dd4:	f108 0801 	add.w	r8, r8, #1
 8010dd8:	9308      	str	r3, [sp, #32]
 8010dda:	e7df      	b.n	8010d9c <__kernel_rem_pio2+0x39c>
 8010ddc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010de0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010de4:	f7ef fc08 	bl	80005f8 <__aeabi_dmul>
 8010de8:	4602      	mov	r2, r0
 8010dea:	460b      	mov	r3, r1
 8010dec:	4630      	mov	r0, r6
 8010dee:	4639      	mov	r1, r7
 8010df0:	f7ef fa4c 	bl	800028c <__adddf3>
 8010df4:	f109 0901 	add.w	r9, r9, #1
 8010df8:	4606      	mov	r6, r0
 8010dfa:	460f      	mov	r7, r1
 8010dfc:	e7e4      	b.n	8010dc8 <__kernel_rem_pio2+0x3c8>
 8010dfe:	3d01      	subs	r5, #1
 8010e00:	e747      	b.n	8010c92 <__kernel_rem_pio2+0x292>
 8010e02:	ec47 6b10 	vmov	d0, r6, r7
 8010e06:	f1ca 0000 	rsb	r0, sl, #0
 8010e0a:	f7ff fd49 	bl	80108a0 <scalbn>
 8010e0e:	ec57 6b10 	vmov	r6, r7, d0
 8010e12:	4ba0      	ldr	r3, [pc, #640]	; (8011094 <__kernel_rem_pio2+0x694>)
 8010e14:	ee10 0a10 	vmov	r0, s0
 8010e18:	2200      	movs	r2, #0
 8010e1a:	4639      	mov	r1, r7
 8010e1c:	f7ef fe72 	bl	8000b04 <__aeabi_dcmpge>
 8010e20:	b1f8      	cbz	r0, 8010e62 <__kernel_rem_pio2+0x462>
 8010e22:	4b9d      	ldr	r3, [pc, #628]	; (8011098 <__kernel_rem_pio2+0x698>)
 8010e24:	2200      	movs	r2, #0
 8010e26:	4630      	mov	r0, r6
 8010e28:	4639      	mov	r1, r7
 8010e2a:	f7ef fbe5 	bl	80005f8 <__aeabi_dmul>
 8010e2e:	f7ef fe93 	bl	8000b58 <__aeabi_d2iz>
 8010e32:	4680      	mov	r8, r0
 8010e34:	f7ef fb76 	bl	8000524 <__aeabi_i2d>
 8010e38:	4b96      	ldr	r3, [pc, #600]	; (8011094 <__kernel_rem_pio2+0x694>)
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f7ef fbdc 	bl	80005f8 <__aeabi_dmul>
 8010e40:	460b      	mov	r3, r1
 8010e42:	4602      	mov	r2, r0
 8010e44:	4639      	mov	r1, r7
 8010e46:	4630      	mov	r0, r6
 8010e48:	f7ef fa1e 	bl	8000288 <__aeabi_dsub>
 8010e4c:	f7ef fe84 	bl	8000b58 <__aeabi_d2iz>
 8010e50:	1c65      	adds	r5, r4, #1
 8010e52:	ab0c      	add	r3, sp, #48	; 0x30
 8010e54:	f10a 0a18 	add.w	sl, sl, #24
 8010e58:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010e5c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010e60:	e71f      	b.n	8010ca2 <__kernel_rem_pio2+0x2a2>
 8010e62:	4630      	mov	r0, r6
 8010e64:	4639      	mov	r1, r7
 8010e66:	f7ef fe77 	bl	8000b58 <__aeabi_d2iz>
 8010e6a:	ab0c      	add	r3, sp, #48	; 0x30
 8010e6c:	4625      	mov	r5, r4
 8010e6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010e72:	e716      	b.n	8010ca2 <__kernel_rem_pio2+0x2a2>
 8010e74:	ab0c      	add	r3, sp, #48	; 0x30
 8010e76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e7a:	f7ef fb53 	bl	8000524 <__aeabi_i2d>
 8010e7e:	4632      	mov	r2, r6
 8010e80:	463b      	mov	r3, r7
 8010e82:	f7ef fbb9 	bl	80005f8 <__aeabi_dmul>
 8010e86:	4642      	mov	r2, r8
 8010e88:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010e8c:	464b      	mov	r3, r9
 8010e8e:	4630      	mov	r0, r6
 8010e90:	4639      	mov	r1, r7
 8010e92:	f7ef fbb1 	bl	80005f8 <__aeabi_dmul>
 8010e96:	3c01      	subs	r4, #1
 8010e98:	4606      	mov	r6, r0
 8010e9a:	460f      	mov	r7, r1
 8010e9c:	e713      	b.n	8010cc6 <__kernel_rem_pio2+0x2c6>
 8010e9e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010ea2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010ea6:	f7ef fba7 	bl	80005f8 <__aeabi_dmul>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	460b      	mov	r3, r1
 8010eae:	4648      	mov	r0, r9
 8010eb0:	4651      	mov	r1, sl
 8010eb2:	f7ef f9eb 	bl	800028c <__adddf3>
 8010eb6:	3701      	adds	r7, #1
 8010eb8:	4681      	mov	r9, r0
 8010eba:	468a      	mov	sl, r1
 8010ebc:	9b00      	ldr	r3, [sp, #0]
 8010ebe:	429f      	cmp	r7, r3
 8010ec0:	dc02      	bgt.n	8010ec8 <__kernel_rem_pio2+0x4c8>
 8010ec2:	9b06      	ldr	r3, [sp, #24]
 8010ec4:	429f      	cmp	r7, r3
 8010ec6:	ddea      	ble.n	8010e9e <__kernel_rem_pio2+0x49e>
 8010ec8:	9a06      	ldr	r2, [sp, #24]
 8010eca:	ab48      	add	r3, sp, #288	; 0x120
 8010ecc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8010ed0:	e9c6 9a00 	strd	r9, sl, [r6]
 8010ed4:	3c01      	subs	r4, #1
 8010ed6:	e6fa      	b.n	8010cce <__kernel_rem_pio2+0x2ce>
 8010ed8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010eda:	2b02      	cmp	r3, #2
 8010edc:	dc0b      	bgt.n	8010ef6 <__kernel_rem_pio2+0x4f6>
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	dc39      	bgt.n	8010f56 <__kernel_rem_pio2+0x556>
 8010ee2:	d05d      	beq.n	8010fa0 <__kernel_rem_pio2+0x5a0>
 8010ee4:	9b02      	ldr	r3, [sp, #8]
 8010ee6:	f003 0007 	and.w	r0, r3, #7
 8010eea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010eee:	ecbd 8b02 	vpop	{d8}
 8010ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ef6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010ef8:	2b03      	cmp	r3, #3
 8010efa:	d1f3      	bne.n	8010ee4 <__kernel_rem_pio2+0x4e4>
 8010efc:	9b05      	ldr	r3, [sp, #20]
 8010efe:	9500      	str	r5, [sp, #0]
 8010f00:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010f04:	eb0d 0403 	add.w	r4, sp, r3
 8010f08:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8010f0c:	46a2      	mov	sl, r4
 8010f0e:	9b00      	ldr	r3, [sp, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	f1aa 0a08 	sub.w	sl, sl, #8
 8010f16:	dc69      	bgt.n	8010fec <__kernel_rem_pio2+0x5ec>
 8010f18:	46aa      	mov	sl, r5
 8010f1a:	f1ba 0f01 	cmp.w	sl, #1
 8010f1e:	f1a4 0408 	sub.w	r4, r4, #8
 8010f22:	f300 8083 	bgt.w	801102c <__kernel_rem_pio2+0x62c>
 8010f26:	9c05      	ldr	r4, [sp, #20]
 8010f28:	ab48      	add	r3, sp, #288	; 0x120
 8010f2a:	441c      	add	r4, r3
 8010f2c:	2000      	movs	r0, #0
 8010f2e:	2100      	movs	r1, #0
 8010f30:	2d01      	cmp	r5, #1
 8010f32:	f300 809a 	bgt.w	801106a <__kernel_rem_pio2+0x66a>
 8010f36:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8010f3a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010f3e:	f1bb 0f00 	cmp.w	fp, #0
 8010f42:	f040 8098 	bne.w	8011076 <__kernel_rem_pio2+0x676>
 8010f46:	9b04      	ldr	r3, [sp, #16]
 8010f48:	e9c3 7800 	strd	r7, r8, [r3]
 8010f4c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010f50:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010f54:	e7c6      	b.n	8010ee4 <__kernel_rem_pio2+0x4e4>
 8010f56:	9e05      	ldr	r6, [sp, #20]
 8010f58:	ab48      	add	r3, sp, #288	; 0x120
 8010f5a:	441e      	add	r6, r3
 8010f5c:	462c      	mov	r4, r5
 8010f5e:	2000      	movs	r0, #0
 8010f60:	2100      	movs	r1, #0
 8010f62:	2c00      	cmp	r4, #0
 8010f64:	da33      	bge.n	8010fce <__kernel_rem_pio2+0x5ce>
 8010f66:	f1bb 0f00 	cmp.w	fp, #0
 8010f6a:	d036      	beq.n	8010fda <__kernel_rem_pio2+0x5da>
 8010f6c:	4602      	mov	r2, r0
 8010f6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f72:	9c04      	ldr	r4, [sp, #16]
 8010f74:	e9c4 2300 	strd	r2, r3, [r4]
 8010f78:	4602      	mov	r2, r0
 8010f7a:	460b      	mov	r3, r1
 8010f7c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010f80:	f7ef f982 	bl	8000288 <__aeabi_dsub>
 8010f84:	ae4a      	add	r6, sp, #296	; 0x128
 8010f86:	2401      	movs	r4, #1
 8010f88:	42a5      	cmp	r5, r4
 8010f8a:	da29      	bge.n	8010fe0 <__kernel_rem_pio2+0x5e0>
 8010f8c:	f1bb 0f00 	cmp.w	fp, #0
 8010f90:	d002      	beq.n	8010f98 <__kernel_rem_pio2+0x598>
 8010f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f96:	4619      	mov	r1, r3
 8010f98:	9b04      	ldr	r3, [sp, #16]
 8010f9a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010f9e:	e7a1      	b.n	8010ee4 <__kernel_rem_pio2+0x4e4>
 8010fa0:	9c05      	ldr	r4, [sp, #20]
 8010fa2:	ab48      	add	r3, sp, #288	; 0x120
 8010fa4:	441c      	add	r4, r3
 8010fa6:	2000      	movs	r0, #0
 8010fa8:	2100      	movs	r1, #0
 8010faa:	2d00      	cmp	r5, #0
 8010fac:	da09      	bge.n	8010fc2 <__kernel_rem_pio2+0x5c2>
 8010fae:	f1bb 0f00 	cmp.w	fp, #0
 8010fb2:	d002      	beq.n	8010fba <__kernel_rem_pio2+0x5ba>
 8010fb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fb8:	4619      	mov	r1, r3
 8010fba:	9b04      	ldr	r3, [sp, #16]
 8010fbc:	e9c3 0100 	strd	r0, r1, [r3]
 8010fc0:	e790      	b.n	8010ee4 <__kernel_rem_pio2+0x4e4>
 8010fc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010fc6:	f7ef f961 	bl	800028c <__adddf3>
 8010fca:	3d01      	subs	r5, #1
 8010fcc:	e7ed      	b.n	8010faa <__kernel_rem_pio2+0x5aa>
 8010fce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8010fd2:	f7ef f95b 	bl	800028c <__adddf3>
 8010fd6:	3c01      	subs	r4, #1
 8010fd8:	e7c3      	b.n	8010f62 <__kernel_rem_pio2+0x562>
 8010fda:	4602      	mov	r2, r0
 8010fdc:	460b      	mov	r3, r1
 8010fde:	e7c8      	b.n	8010f72 <__kernel_rem_pio2+0x572>
 8010fe0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010fe4:	f7ef f952 	bl	800028c <__adddf3>
 8010fe8:	3401      	adds	r4, #1
 8010fea:	e7cd      	b.n	8010f88 <__kernel_rem_pio2+0x588>
 8010fec:	e9da 8900 	ldrd	r8, r9, [sl]
 8010ff0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010ff4:	9b00      	ldr	r3, [sp, #0]
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	9300      	str	r3, [sp, #0]
 8010ffa:	4632      	mov	r2, r6
 8010ffc:	463b      	mov	r3, r7
 8010ffe:	4640      	mov	r0, r8
 8011000:	4649      	mov	r1, r9
 8011002:	f7ef f943 	bl	800028c <__adddf3>
 8011006:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801100a:	4602      	mov	r2, r0
 801100c:	460b      	mov	r3, r1
 801100e:	4640      	mov	r0, r8
 8011010:	4649      	mov	r1, r9
 8011012:	f7ef f939 	bl	8000288 <__aeabi_dsub>
 8011016:	4632      	mov	r2, r6
 8011018:	463b      	mov	r3, r7
 801101a:	f7ef f937 	bl	800028c <__adddf3>
 801101e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011022:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011026:	ed8a 7b00 	vstr	d7, [sl]
 801102a:	e770      	b.n	8010f0e <__kernel_rem_pio2+0x50e>
 801102c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011030:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011034:	4640      	mov	r0, r8
 8011036:	4632      	mov	r2, r6
 8011038:	463b      	mov	r3, r7
 801103a:	4649      	mov	r1, r9
 801103c:	f7ef f926 	bl	800028c <__adddf3>
 8011040:	e9cd 0100 	strd	r0, r1, [sp]
 8011044:	4602      	mov	r2, r0
 8011046:	460b      	mov	r3, r1
 8011048:	4640      	mov	r0, r8
 801104a:	4649      	mov	r1, r9
 801104c:	f7ef f91c 	bl	8000288 <__aeabi_dsub>
 8011050:	4632      	mov	r2, r6
 8011052:	463b      	mov	r3, r7
 8011054:	f7ef f91a 	bl	800028c <__adddf3>
 8011058:	ed9d 7b00 	vldr	d7, [sp]
 801105c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011060:	ed84 7b00 	vstr	d7, [r4]
 8011064:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011068:	e757      	b.n	8010f1a <__kernel_rem_pio2+0x51a>
 801106a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801106e:	f7ef f90d 	bl	800028c <__adddf3>
 8011072:	3d01      	subs	r5, #1
 8011074:	e75c      	b.n	8010f30 <__kernel_rem_pio2+0x530>
 8011076:	9b04      	ldr	r3, [sp, #16]
 8011078:	9a04      	ldr	r2, [sp, #16]
 801107a:	601f      	str	r7, [r3, #0]
 801107c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011080:	605c      	str	r4, [r3, #4]
 8011082:	609d      	str	r5, [r3, #8]
 8011084:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011088:	60d3      	str	r3, [r2, #12]
 801108a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801108e:	6110      	str	r0, [r2, #16]
 8011090:	6153      	str	r3, [r2, #20]
 8011092:	e727      	b.n	8010ee4 <__kernel_rem_pio2+0x4e4>
 8011094:	41700000 	.word	0x41700000
 8011098:	3e700000 	.word	0x3e700000
 801109c:	00000000 	.word	0x00000000

080110a0 <floor>:
 80110a0:	ec51 0b10 	vmov	r0, r1, d0
 80110a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80110a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ac:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80110b0:	2e13      	cmp	r6, #19
 80110b2:	ee10 5a10 	vmov	r5, s0
 80110b6:	ee10 8a10 	vmov	r8, s0
 80110ba:	460c      	mov	r4, r1
 80110bc:	dc31      	bgt.n	8011122 <floor+0x82>
 80110be:	2e00      	cmp	r6, #0
 80110c0:	da14      	bge.n	80110ec <floor+0x4c>
 80110c2:	a333      	add	r3, pc, #204	; (adr r3, 8011190 <floor+0xf0>)
 80110c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c8:	f7ef f8e0 	bl	800028c <__adddf3>
 80110cc:	2200      	movs	r2, #0
 80110ce:	2300      	movs	r3, #0
 80110d0:	f7ef fd22 	bl	8000b18 <__aeabi_dcmpgt>
 80110d4:	b138      	cbz	r0, 80110e6 <floor+0x46>
 80110d6:	2c00      	cmp	r4, #0
 80110d8:	da53      	bge.n	8011182 <floor+0xe2>
 80110da:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80110de:	4325      	orrs	r5, r4
 80110e0:	d052      	beq.n	8011188 <floor+0xe8>
 80110e2:	4c2d      	ldr	r4, [pc, #180]	; (8011198 <floor+0xf8>)
 80110e4:	2500      	movs	r5, #0
 80110e6:	4621      	mov	r1, r4
 80110e8:	4628      	mov	r0, r5
 80110ea:	e024      	b.n	8011136 <floor+0x96>
 80110ec:	4f2b      	ldr	r7, [pc, #172]	; (801119c <floor+0xfc>)
 80110ee:	4137      	asrs	r7, r6
 80110f0:	ea01 0307 	and.w	r3, r1, r7
 80110f4:	4303      	orrs	r3, r0
 80110f6:	d01e      	beq.n	8011136 <floor+0x96>
 80110f8:	a325      	add	r3, pc, #148	; (adr r3, 8011190 <floor+0xf0>)
 80110fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fe:	f7ef f8c5 	bl	800028c <__adddf3>
 8011102:	2200      	movs	r2, #0
 8011104:	2300      	movs	r3, #0
 8011106:	f7ef fd07 	bl	8000b18 <__aeabi_dcmpgt>
 801110a:	2800      	cmp	r0, #0
 801110c:	d0eb      	beq.n	80110e6 <floor+0x46>
 801110e:	2c00      	cmp	r4, #0
 8011110:	bfbe      	ittt	lt
 8011112:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011116:	4133      	asrlt	r3, r6
 8011118:	18e4      	addlt	r4, r4, r3
 801111a:	ea24 0407 	bic.w	r4, r4, r7
 801111e:	2500      	movs	r5, #0
 8011120:	e7e1      	b.n	80110e6 <floor+0x46>
 8011122:	2e33      	cmp	r6, #51	; 0x33
 8011124:	dd0b      	ble.n	801113e <floor+0x9e>
 8011126:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801112a:	d104      	bne.n	8011136 <floor+0x96>
 801112c:	ee10 2a10 	vmov	r2, s0
 8011130:	460b      	mov	r3, r1
 8011132:	f7ef f8ab 	bl	800028c <__adddf3>
 8011136:	ec41 0b10 	vmov	d0, r0, r1
 801113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801113e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8011142:	f04f 37ff 	mov.w	r7, #4294967295
 8011146:	40df      	lsrs	r7, r3
 8011148:	4238      	tst	r0, r7
 801114a:	d0f4      	beq.n	8011136 <floor+0x96>
 801114c:	a310      	add	r3, pc, #64	; (adr r3, 8011190 <floor+0xf0>)
 801114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011152:	f7ef f89b 	bl	800028c <__adddf3>
 8011156:	2200      	movs	r2, #0
 8011158:	2300      	movs	r3, #0
 801115a:	f7ef fcdd 	bl	8000b18 <__aeabi_dcmpgt>
 801115e:	2800      	cmp	r0, #0
 8011160:	d0c1      	beq.n	80110e6 <floor+0x46>
 8011162:	2c00      	cmp	r4, #0
 8011164:	da0a      	bge.n	801117c <floor+0xdc>
 8011166:	2e14      	cmp	r6, #20
 8011168:	d101      	bne.n	801116e <floor+0xce>
 801116a:	3401      	adds	r4, #1
 801116c:	e006      	b.n	801117c <floor+0xdc>
 801116e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011172:	2301      	movs	r3, #1
 8011174:	40b3      	lsls	r3, r6
 8011176:	441d      	add	r5, r3
 8011178:	45a8      	cmp	r8, r5
 801117a:	d8f6      	bhi.n	801116a <floor+0xca>
 801117c:	ea25 0507 	bic.w	r5, r5, r7
 8011180:	e7b1      	b.n	80110e6 <floor+0x46>
 8011182:	2500      	movs	r5, #0
 8011184:	462c      	mov	r4, r5
 8011186:	e7ae      	b.n	80110e6 <floor+0x46>
 8011188:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801118c:	e7ab      	b.n	80110e6 <floor+0x46>
 801118e:	bf00      	nop
 8011190:	8800759c 	.word	0x8800759c
 8011194:	7e37e43c 	.word	0x7e37e43c
 8011198:	bff00000 	.word	0xbff00000
 801119c:	000fffff 	.word	0x000fffff

080111a0 <_init>:
 80111a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111a2:	bf00      	nop
 80111a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111a6:	bc08      	pop	{r3}
 80111a8:	469e      	mov	lr, r3
 80111aa:	4770      	bx	lr

080111ac <_fini>:
 80111ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ae:	bf00      	nop
 80111b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111b2:	bc08      	pop	{r3}
 80111b4:	469e      	mov	lr, r3
 80111b6:	4770      	bx	lr
