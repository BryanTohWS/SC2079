
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eae0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001138  0800ec70  0800ec70  0001ec70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fda8  0800fda8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fda8  0800fda8  0001fda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdb0  0800fdb0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdb0  0800fdb0  0001fdb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdb4  0800fdb4  0001fdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800fdb8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000844  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a2c  20000a2c  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   000158d7  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036ff  00000000  00000000  00035b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013f8  00000000  00000000  00039238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f8c  00000000  00000000  0003a630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024902  00000000  00000000  0003b5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019b28  00000000  00000000  0005febe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d31e5  00000000  00000000  000799e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b84  00000000  00000000  0014cbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00153750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec58 	.word	0x0800ec58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800ec58 	.word	0x0800ec58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_ICM20948_SelectUserBank>:

#include "ICM20948.h"

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	b2db      	uxtb	r3, r3
 800100a:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <_ICM20948_SelectUserBank+0x26>
 8001012:	2368      	movs	r3, #104	; 0x68
 8001014:	e000      	b.n	8001018 <_ICM20948_SelectUserBank+0x28>
 8001016:	2369      	movs	r3, #105	; 0x69
 8001018:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800101a:	7dbb      	ldrb	r3, [r7, #22]
 800101c:	b29b      	uxth	r3, r3
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b299      	uxth	r1, r3
 8001022:	230a      	movs	r3, #10
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2301      	movs	r3, #1
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 0315 	add.w	r3, r7, #21
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	227f      	movs	r2, #127	; 0x7f
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f003 fdc7 	bl	8004bc8 <HAL_I2C_Mem_Write>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4603      	mov	r3, r0
 8001058:	70fb      	strb	r3, [r7, #3]
 800105a:	460b      	mov	r3, r1
 800105c:	70bb      	strb	r3, [r7, #2]
 800105e:	4613      	mov	r3, r2
 8001060:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <_ICM20948_WriteByte+0x28>
 800106c:	2368      	movs	r3, #104	; 0x68
 800106e:	e000      	b.n	8001072 <_ICM20948_WriteByte+0x2a>
 8001070:	2369      	movs	r3, #105	; 0x69
 8001072:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	b29b      	uxth	r3, r3
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b299      	uxth	r1, r3
 800107c:	78bb      	ldrb	r3, [r7, #2]
 800107e:	b29a      	uxth	r2, r3
 8001080:	230a      	movs	r3, #10
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1c7b      	adds	r3, r7, #1
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f003 fd9a 	bl	8004bc8 <HAL_I2C_Mem_Write>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b088      	sub	sp, #32
 80010a6:	af04      	add	r7, sp, #16
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	70fb      	strb	r3, [r7, #3]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70bb      	strb	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <_ICM20948_BrustRead+0x28>
 80010c6:	2368      	movs	r3, #104	; 0x68
 80010c8:	e000      	b.n	80010cc <_ICM20948_BrustRead+0x2a>
 80010ca:	2369      	movs	r3, #105	; 0x69
 80010cc:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b299      	uxth	r1, r3
 80010d6:	78bb      	ldrb	r3, [r7, #2]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	230a      	movs	r3, #10
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	883b      	ldrh	r3, [r7, #0]
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f003 fe67 	bl	8004dbc <HAL_I2C_Mem_Read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	b29a      	uxth	r2, r3
 8001114:	230a      	movs	r3, #10
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	1cbb      	adds	r3, r7, #2
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2118      	movs	r1, #24
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f003 fd4f 	bl	8004bc8 <HAL_I2C_Mem_Write>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_AK09916_ReadByte>:

HAL_StatusTypeDef _AK09916_ReadByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t *readData) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af04      	add	r7, sp, #16
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	460b      	mov	r3, r1
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	b29a      	uxth	r2, r3
 800114e:	230a      	movs	r3, #10
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	2118      	movs	r1, #24
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f003 fe2c 	bl	8004dbc <HAL_I2C_Mem_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001168:	7dfb      	ldrb	r3, [r7, #23]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_AK09916_BrustRead>:

HAL_StatusTypeDef _AK09916_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b08a      	sub	sp, #40	; 0x28
 8001176:	af04      	add	r7, sp, #16
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	72fb      	strb	r3, [r7, #11]
 8001180:	4613      	mov	r3, r2
 8001182:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	b29a      	uxth	r2, r3
 800118c:	230a      	movs	r3, #10
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	893b      	ldrh	r3, [r7, #8]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2118      	movs	r1, #24
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f003 fe0d 	bl	8004dbc <HAL_I2C_Mem_Read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	70fb      	strb	r3, [r7, #3]
 80011c2:	460b      	mov	r3, r1
 80011c4:	70bb      	strb	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff0b 	bl	8000ff0 <_ICM20948_SelectUserBank>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 80011de:	78f9      	ldrb	r1, [r7, #3]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	2206      	movs	r2, #6
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff2f 	bl	8001048 <_ICM20948_WriteByte>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 80011ee:	20c8      	movs	r0, #200	; 0xc8
 80011f0:	f003 f810 	bl	8004214 <HAL_Delay>

	status = _ICM20948_WriteByte(
 80011f4:	78f9      	ldrb	r1, [r7, #3]
 80011f6:	2301      	movs	r3, #1
 80011f8:	2206      	movs	r2, #6
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff24 	bl	8001048 <_ICM20948_WriteByte>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8001204:	78f9      	ldrb	r1, [r7, #3]
 8001206:	2300      	movs	r3, #0
 8001208:	2207      	movs	r2, #7
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff1c 	bl	8001048 <_ICM20948_WriteByte>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2202      	movs	r2, #2
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fee8 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8001230:	b2db      	uxtb	r3, r3
 8001232:	78f9      	ldrb	r1, [r7, #3]
 8001234:	2201      	movs	r2, #1
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff06 	bl	8001048 <_ICM20948_WriteByte>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8001240:	78f9      	ldrb	r1, [r7, #3]
 8001242:	2304      	movs	r3, #4
 8001244:	2200      	movs	r2, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fefe 	bl	8001048 <_ICM20948_WriteByte>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	b25b      	sxtb	r3, r3
 8001256:	f043 0309 	orr.w	r3, r3, #9
 800125a:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800125c:	b2db      	uxtb	r3, r3
 800125e:	78f9      	ldrb	r1, [r7, #3]
 8001260:	2214      	movs	r2, #20
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fef0 	bl	8001048 <_ICM20948_WriteByte>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 800126c:	78f9      	ldrb	r1, [r7, #3]
 800126e:	2304      	movs	r3, #4
 8001270:	2211      	movs	r2, #17
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fee8 	bl	8001048 <_ICM20948_WriteByte>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff feb4 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800128c:	78f9      	ldrb	r1, [r7, #3]
 800128e:	2302      	movs	r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fed8 	bl	8001048 <_ICM20948_WriteByte>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 800129c:	2208      	movs	r2, #8
 800129e:	2131      	movs	r1, #49	; 0x31
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff2b 	bl	80010fc <_AK09916_WriteByte>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	0000      	movs	r0, r0
 80012b4:	0000      	movs	r0, r0
	...

080012b8 <ICM20948_readGyroscope_Z>:

void ICM20948_readGyroscope_Z(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float *gyroZ) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	72fb      	strb	r3, [r7, #11]
 80012c6:	4613      	mov	r3, r2
 80012c8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[2];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_ZOUT_H__REGISTER, 2, readData);
 80012ca:	7af9      	ldrb	r1, [r7, #11]
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2302      	movs	r3, #2
 80012d4:	2237      	movs	r2, #55	; 0x37
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff fee3 	bl	80010a2 <_ICM20948_BrustRead>

	int16_t reading = readData[0]<<8 | readData[1];
 80012dc:	7d3b      	ldrb	r3, [r7, #20]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	7d7b      	ldrb	r3, [r7, #21]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	82fb      	strh	r3, [r7, #22]
	*gyroZ = (float) -reading;
 80012ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012ee:	425b      	negs	r3, r3
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edc3 7a00 	vstr	s15, [r3]
	switch (selectGyroSensitivity) {
 80012fe:	7abb      	ldrb	r3, [r7, #10]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d849      	bhi.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <ICM20948_readGyroscope_Z+0x54>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001333 	.word	0x08001333
 8001314:	08001349 	.word	0x08001349
 8001318:	08001371 	.word	0x08001371
		case GYRO_FULL_SCALE_250DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	eddf 6a23 	vldr	s13, [pc, #140]	; 80013b0 <ICM20948_readGyroscope_Z+0xf8>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001330:	e032      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_500DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80013b4 <ICM20948_readGyroscope_Z+0xfc>
 800133c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001346:	e027      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_1000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8fb 	bl	8000548 <__aeabi_f2d>
 8001352:	a313      	add	r3, pc, #76	; (adr r3, 80013a0 <ICM20948_readGyroscope_Z+0xe8>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff fa78 	bl	800084c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc40 	bl	8000be8 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	601a      	str	r2, [r3, #0]
			break;
 800136e:	e013      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_2000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	a30b      	add	r3, pc, #44	; (adr r3, 80013a8 <ICM20948_readGyroscope_Z+0xf0>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fa64 	bl	800084c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc2c 	bl	8000be8 <__aeabi_d2f>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
			break;
 8001396:	bf00      	nop
	}

}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	66666666 	.word	0x66666666
 80013a4:	40406666 	.word	0x40406666
 80013a8:	66666666 	.word	0x66666666
 80013ac:	40306666 	.word	0x40306666
 80013b0:	43030000 	.word	0x43030000
 80013b4:	42830000 	.word	0x42830000

080013b8 <ICM20948_readAccelerometer_all>:

void ICM20948_readAccelerometer_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, float readings[3]) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af02      	add	r7, sp, #8
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	72fb      	strb	r3, [r7, #11]
 80013c6:	4613      	mov	r3, r2
 80013c8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 80013ca:	7af9      	ldrb	r1, [r7, #11]
 80013cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2306      	movs	r3, #6
 80013d4:	222d      	movs	r2, #45	; 0x2d
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff fe63 	bl	80010a2 <_ICM20948_BrustRead>


	int16_t rD_int[3];
	rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 80013dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	843b      	strh	r3, [r7, #32]
	rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 80013f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21b      	sxth	r3, r3
 8001402:	847b      	strh	r3, [r7, #34]	; 0x22
	rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8001404:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21b      	sxth	r3, r3
 8001416:	84bb      	strh	r3, [r7, #36]	; 0x24

	float rD[3];
	rD[X] = (float) rD_int[X];
 8001418:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001424:	edc7 7a05 	vstr	s15, [r7, #20]
	rD[Y] = (float) rD_int[Y];
 8001428:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001434:	edc7 7a06 	vstr	s15, [r7, #24]
	rD[Z] = (float) rD_int[Z];
 8001438:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001444:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (selectAccelSensitivity) {
 8001448:	7abb      	ldrb	r3, [r7, #10]
 800144a:	2b03      	cmp	r3, #3
 800144c:	f200 8084 	bhi.w	8001558 <ICM20948_readAccelerometer_all+0x1a0>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <ICM20948_readAccelerometer_all+0xa0>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001469 	.word	0x08001469
 800145c:	080014a5 	.word	0x080014a5
 8001460:	080014e1 	.word	0x080014e1
 8001464:	0800151d 	.word	0x0800151d
		case ACCEL_FULL_SCALE_2G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8001468:	ed97 7a05 	vldr	s14, [r7, #20]
 800146c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 8001470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800147a:	ed97 7a06 	vldr	s14, [r7, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3304      	adds	r3, #4
 8001482:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 8001486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148a:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800148e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3308      	adds	r3, #8
 8001496:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 800149a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149e:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014a2:	e059      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_4G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80014a8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3304      	adds	r3, #4
 80014be:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c6:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3308      	adds	r3, #8
 80014d2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014da:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014de:	e03b      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_8G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 80014e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 80014e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 80014f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3304      	adds	r3, #4
 80014fa:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 80014fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001502:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8001506:	ed97 7a07 	vldr	s14, [r7, #28]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3308      	adds	r3, #8
 800150e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 8001512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001516:	edc3 7a00 	vstr	s15, [r3]
			break;
 800151a:	e01d      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_16G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800151c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001520:	eddf 6a12 	vldr	s13, [pc, #72]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 8001524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800152e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 800153a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153e:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8001542:	ed97 7a07 	vldr	s14, [r7, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3308      	adds	r3, #8
 800154a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001556:	bf00      	nop
	}
}
 8001558:	bf00      	nop
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	46800000 	.word	0x46800000
 8001564:	46000000 	.word	0x46000000
 8001568:	45800000 	.word	0x45800000
 800156c:	45000000 	.word	0x45000000

08001570 <ICM20948_readMagnetometer_XY>:

void ICM20948_readMagnetometer_XY(I2C_HandleTypeDef * hi2c, float magXY[2]) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	uint8_t readData[4];
	_AK09916_BrustRead(hi2c, AK09916__XOUT_L__REGISTER, 4, readData);
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2204      	movs	r2, #4
 8001580:	2111      	movs	r1, #17
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fdf5 	bl	8001172 <_AK09916_BrustRead>

	//read status register to mark end of data read.
	uint8_t st2;
	_AK09916_ReadByte(hi2c, AK09916__ST2__REGISTER, &st2);
 8001588:	f107 030f 	add.w	r3, r7, #15
 800158c:	461a      	mov	r2, r3
 800158e:	2118      	movs	r1, #24
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fdd1 	bl	8001138 <_AK09916_ReadByte>
	int16_t reading;
	for (uint8_t i = 0; i < 2; i++) {
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
 800159a:	e02a      	b.n	80015f2 <ICM20948_readMagnetometer_XY+0x82>
		reading = readData[1+2*i]<<8|readData[2*i];
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	3301      	adds	r3, #1
 80015a2:	3318      	adds	r3, #24
 80015a4:	443b      	add	r3, r7
 80015a6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	3318      	adds	r3, #24
 80015b4:	443b      	add	r3, r7
 80015b6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	82bb      	strh	r3, [r7, #20]
		magXY[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
 80015c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffad 	bl	8000524 <__aeabi_i2d>
 80015ca:	a30f      	add	r3, pc, #60	; (adr r3, 8001608 <ICM20948_readMagnetometer_XY+0x98>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f812 	bl	80005f8 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	18d4      	adds	r4, r2, r3
 80015e4:	f7ff fb00 	bl	8000be8 <__aeabi_d2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	6023      	str	r3, [r4, #0]
	for (uint8_t i = 0; i < 2; i++) {
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	3301      	adds	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d9d1      	bls.n	800159c <ICM20948_readMagnetometer_XY+0x2c>
	}
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	33333333 	.word	0x33333333
 800160c:	3fc33333 	.word	0x3fc33333

08001610 <get_new_cmd>:
#include "commands.h"

static Command *cur = NULL;

static Command *get_new_cmd() {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	Command *new = (Command *) malloc(sizeof(Command));
 8001616:	2018      	movs	r0, #24
 8001618:	f007 f916 	bl	8008848 <malloc>
 800161c:	4603      	mov	r3, r0
 800161e:	607b      	str	r3, [r7, #4]
	new->dir = 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	715a      	strb	r2, [r3, #5]
	new->speed = 0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	719a      	strb	r2, [r3, #6]
	new->steeringAngle = 0;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
	new->dist = 0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
	new->distType = TARGET;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	731a      	strb	r2, [r3, #12]
	new->next = NULL;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]

	return new;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <commands_ack>:

static void commands_ack(UART_HandleTypeDef *uart, Command *cmd, uint8_t indicator) {
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	4613      	mov	r3, r2
 800165e:	71fb      	strb	r3, [r7, #7]
	uint8_t buf_size = cmd->str_size + 1;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	791b      	ldrb	r3, [r3, #4]
 8001664:	3301      	adds	r3, #1
 8001666:	75fb      	strb	r3, [r7, #23]
	uint8_t *buf = (uint8_t *) malloc(buf_size * sizeof(uint8_t));
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	4618      	mov	r0, r3
 800166c:	f007 f8ec 	bl	8008848 <malloc>
 8001670:	4603      	mov	r3, r0
 8001672:	613b      	str	r3, [r7, #16]
	*buf = indicator;
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	79fa      	ldrb	r2, [r7, #7]
 8001678:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, cmd->str, buf_size - 1);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1c58      	adds	r0, r3, #1
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	3b01      	subs	r3, #1
 8001686:	461a      	mov	r2, r3
 8001688:	f008 f9f9 	bl	8009a7e <memcpy>

	HAL_UART_Transmit(uart, buf, buf_size, HAL_MAX_DELAY);
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	b29a      	uxth	r2, r3
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	6939      	ldr	r1, [r7, #16]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f006 f8d0 	bl	800783c <HAL_UART_Transmit>
	free(buf);
 800169c:	6938      	ldr	r0, [r7, #16]
 800169e:	f007 f8db 	bl	8008858 <free>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <commands_process>:

void commands_process(UART_HandleTypeDef *uart, uint8_t *buf, uint8_t size) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	4613      	mov	r3, r2
 80016b8:	71fb      	strb	r3, [r7, #7]
	Command *next = get_new_cmd();
 80016ba:	f7ff ffa9 	bl	8001610 <get_new_cmd>
 80016be:	61f8      	str	r0, [r7, #28]

	uint8_t c = *buf, *temp = buf;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	76fb      	strb	r3, [r7, #27]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	617b      	str	r3, [r7, #20]

	//first byte: command flag
	switch (c) {
 80016ca:	7efb      	ldrb	r3, [r7, #27]
 80016cc:	3b53      	subs	r3, #83	; 0x53
 80016ce:	2b24      	cmp	r3, #36	; 0x24
 80016d0:	f200 80d1 	bhi.w	8001876 <commands_process+0x1ca>
 80016d4:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <commands_process+0x30>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	08001771 	.word	0x08001771
 80016e0:	08001779 	.word	0x08001779
 80016e4:	08001877 	.word	0x08001877
 80016e8:	08001877 	.word	0x08001877
 80016ec:	08001787 	.word	0x08001787
 80016f0:	08001877 	.word	0x08001877
 80016f4:	08001877 	.word	0x08001877
 80016f8:	08001877 	.word	0x08001877
 80016fc:	08001877 	.word	0x08001877
 8001700:	08001877 	.word	0x08001877
 8001704:	08001877 	.word	0x08001877
 8001708:	08001877 	.word	0x08001877
 800170c:	08001877 	.word	0x08001877
 8001710:	08001877 	.word	0x08001877
 8001714:	08001877 	.word	0x08001877
 8001718:	08001877 	.word	0x08001877
 800171c:	08001877 	.word	0x08001877
 8001720:	08001877 	.word	0x08001877
 8001724:	08001877 	.word	0x08001877
 8001728:	08001877 	.word	0x08001877
 800172c:	08001877 	.word	0x08001877
 8001730:	08001877 	.word	0x08001877
 8001734:	08001877 	.word	0x08001877
 8001738:	08001877 	.word	0x08001877
 800173c:	08001877 	.word	0x08001877
 8001740:	08001877 	.word	0x08001877
 8001744:	08001877 	.word	0x08001877
 8001748:	08001877 	.word	0x08001877
 800174c:	08001877 	.word	0x08001877
 8001750:	08001877 	.word	0x08001877
 8001754:	08001877 	.word	0x08001877
 8001758:	08001877 	.word	0x08001877
 800175c:	08001877 	.word	0x08001877
 8001760:	08001795 	.word	0x08001795
 8001764:	08001877 	.word	0x08001877
 8001768:	08001877 	.word	0x08001877
 800176c:	080017a3 	.word	0x080017a3
		case CMD_FULL_STOP:
			next->dir = 0;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	2200      	movs	r2, #0
 8001774:	715a      	strb	r2, [r3, #5]
			break;
 8001776:	e01b      	b.n	80017b0 <commands_process+0x104>

		case CMD_FORWARD_DIST_TARGET:
			next->dir = 1;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2201      	movs	r2, #1
 800177c:	715a      	strb	r2, [r3, #5]
			next->distType = TARGET;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	2200      	movs	r2, #0
 8001782:	731a      	strb	r2, [r3, #12]
			break;
 8001784:	e014      	b.n	80017b0 <commands_process+0x104>

		case CMD_FORWARD_DIST_WITHIN:
			next->dir = 1;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	2201      	movs	r2, #1
 800178a:	715a      	strb	r2, [r3, #5]
			next->distType = STOP_WITHIN;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2201      	movs	r2, #1
 8001790:	731a      	strb	r2, [r3, #12]
			break;
 8001792:	e00d      	b.n	80017b0 <commands_process+0x104>

		case CMD_BACKWARD_DIST_TARGET:
			next->dir = -1;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	22ff      	movs	r2, #255	; 0xff
 8001798:	715a      	strb	r2, [r3, #5]
			next->distType = TARGET;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	2200      	movs	r2, #0
 800179e:	731a      	strb	r2, [r3, #12]
			break;
 80017a0:	e006      	b.n	80017b0 <commands_process+0x104>

		case CMD_BACKWARD_DIST_WITHIN:
			next->dir = -1;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	22ff      	movs	r2, #255	; 0xff
 80017a6:	715a      	strb	r2, [r3, #5]
			next->distType = STOP_WITHIN;
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2201      	movs	r2, #1
 80017ac:	731a      	strb	r2, [r3, #12]
			break;
 80017ae:	bf00      	nop
		default:
			//invalid command, return.
			return;
	}

	if (c != CMD_FULL_STOP) {
 80017b0:	7efb      	ldrb	r3, [r7, #27]
 80017b2:	2b53      	cmp	r3, #83	; 0x53
 80017b4:	d02b      	beq.n	800180e <commands_process+0x162>
		temp++;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
		next->speed = parse_uint16_t_until(&temp, CMD_SEP, 3);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2203      	movs	r2, #3
 80017c2:	217c      	movs	r1, #124	; 0x7c
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f88b 	bl	80018e0 <parse_uint16_t_until>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	719a      	strb	r2, [r3, #6]
		temp++;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
		next->steeringAngle = parse_float_until(&temp, CMD_SEP, 6);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2206      	movs	r2, #6
 80017de:	217c      	movs	r1, #124	; 0x7c
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 f8bd 	bl	8001960 <parse_float_until>
 80017e6:	eef0 7a40 	vmov.f32	s15, s0
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	edc3 7a02 	vstr	s15, [r3, #8]
		temp++;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3301      	adds	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
		next->dist = parse_float_until(&temp, CMD_END, 6);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	2206      	movs	r2, #6
 80017fc:	210a      	movs	r1, #10
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f8ae 	bl	8001960 <parse_float_until>
 8001804:	eef0 7a40 	vmov.f32	s15, s0
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	//copy command.
	uint8_t str_size = temp - buf + 1;
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	3301      	adds	r3, #1
 8001818:	76bb      	strb	r3, [r7, #26]
	next->str_size = str_size;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	7eba      	ldrb	r2, [r7, #26]
 800181e:	711a      	strb	r2, [r3, #4]
	next->str = (uint8_t *) malloc(str_size * sizeof(uint8_t));
 8001820:	7ebb      	ldrb	r3, [r7, #26]
 8001822:	4618      	mov	r0, r3
 8001824:	f007 f810 	bl	8008848 <malloc>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	601a      	str	r2, [r3, #0]
	memcpy(next->str, buf, str_size);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	7eba      	ldrb	r2, [r7, #26]
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	4618      	mov	r0, r3
 800183a:	f008 f920 	bl	8009a7e <memcpy>

	//acknowledge command.
	commands_ack(uart, next, CMD_RCV);
 800183e:	2272      	movs	r2, #114	; 0x72
 8001840:	69f9      	ldr	r1, [r7, #28]
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff ff05 	bl	8001652 <commands_ack>

	if (cur == NULL) {
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <commands_process+0x1d4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d108      	bne.n	8001862 <commands_process+0x1b6>
		cur = next;
 8001850:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <commands_process+0x1d4>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	6013      	str	r3, [r2, #0]
		return;
 8001856:	e00f      	b.n	8001878 <commands_process+0x1cc>
	}

	while (cur->next != NULL) cur = cur->next;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <commands_process+0x1d4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <commands_process+0x1d4>)
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <commands_process+0x1d4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f5      	bne.n	8001858 <commands_process+0x1ac>
	cur->next = next;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <commands_process+0x1d4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	615a      	str	r2, [r3, #20]
 8001874:	e000      	b.n	8001878 <commands_process+0x1cc>
			return;
 8001876:	bf00      	nop
}
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000204 	.word	0x20000204

08001884 <commands_pop>:


Command *commands_pop() {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
	Command *ret = cur;
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <commands_pop+0x2c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	607b      	str	r3, [r7, #4]
	if (cur != NULL) cur = cur->next;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <commands_pop+0x2c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <commands_pop+0x1e>
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <commands_pop+0x2c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <commands_pop+0x2c>)
 80018a0:	6013      	str	r3, [r2, #0]
	return ret;
 80018a2:	687b      	ldr	r3, [r7, #4]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	20000204 	.word	0x20000204

080018b4 <commands_end>:

void commands_end(UART_HandleTypeDef *uart, Command *cmd) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
	commands_ack(uart, cmd, CMD_FIN);
 80018be:	2266      	movs	r2, #102	; 0x66
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fec5 	bl	8001652 <commands_ack>
	free(cmd->str);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f006 ffc3 	bl	8008858 <free>
	free(cmd);
 80018d2:	6838      	ldr	r0, [r7, #0]
 80018d4:	f006 ffc0 	bl	8008858 <free>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <parse_uint16_t_until>:

	return ret;
}

//get a uint16_t from a string until terminating character.
uint16_t parse_uint16_t_until(uint8_t **buf_ptr, uint8_t until, uint8_t sizeExpected) {
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
 80018ec:	4613      	mov	r3, r2
 80018ee:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, c = **buf_ptr;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	73bb      	strb	r3, [r7, #14]
	uint16_t res = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	81bb      	strh	r3, [r7, #12]

	while (i < sizeExpected && c != until) {
 8001900:	e01d      	b.n	800193e <parse_uint16_t_until+0x5e>
		if (c <= '9' && c >= '0') res = res * 10 + (c - '0');
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	2b39      	cmp	r3, #57	; 0x39
 8001906:	d80e      	bhi.n	8001926 <parse_uint16_t_until+0x46>
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	2b2f      	cmp	r3, #47	; 0x2f
 800190c:	d90b      	bls.n	8001926 <parse_uint16_t_until+0x46>
 800190e:	89bb      	ldrh	r3, [r7, #12]
 8001910:	461a      	mov	r2, r3
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4413      	add	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	7bbb      	ldrb	r3, [r7, #14]
 800191c:	b29b      	uxth	r3, r3
 800191e:	4413      	add	r3, r2
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b30      	subs	r3, #48	; 0x30
 8001924:	81bb      	strh	r3, [r7, #12]

		c = *(++(*buf_ptr)); i++;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	73bb      	strb	r3, [r7, #14]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	3301      	adds	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
	while (i < sizeExpected && c != until) {
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	78bb      	ldrb	r3, [r7, #2]
 8001942:	429a      	cmp	r2, r3
 8001944:	d203      	bcs.n	800194e <parse_uint16_t_until+0x6e>
 8001946:	7bba      	ldrb	r2, [r7, #14]
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	429a      	cmp	r2, r3
 800194c:	d1d9      	bne.n	8001902 <parse_uint16_t_until+0x22>
	}

	return res;
 800194e:	89bb      	ldrh	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	0000      	movs	r0, r0
	...

08001960 <parse_float_until>:

//get a float from a string until terminating character.
float parse_float_until(uint8_t **buf_ptr, uint8_t until, uint8_t sizeExpected) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	70fb      	strb	r3, [r7, #3]
 800196c:	4613      	mov	r3, r2
 800196e:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, c = **buf_ptr, isFrac = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	77fb      	strb	r3, [r7, #31]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	77bb      	strb	r3, [r7, #30]
 800197c:	2300      	movs	r3, #0
 800197e:	777b      	strb	r3, [r7, #29]
	int8_t sign = 1;
 8001980:	2301      	movs	r3, #1
 8001982:	773b      	strb	r3, [r7, #28]
	uint32_t whole = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
	float frac = 0, div = 0.1;
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	4b3c      	ldr	r3, [pc, #240]	; (8001a80 <parse_float_until+0x120>)
 8001990:	613b      	str	r3, [r7, #16]

	while (i < sizeExpected && c != until) {
 8001992:	e051      	b.n	8001a38 <parse_float_until+0xd8>
		if (i == 0 && c == '-') sign *= -1;
 8001994:	7ffb      	ldrb	r3, [r7, #31]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d107      	bne.n	80019aa <parse_float_until+0x4a>
 800199a:	7fbb      	ldrb	r3, [r7, #30]
 800199c:	2b2d      	cmp	r3, #45	; 0x2d
 800199e:	d104      	bne.n	80019aa <parse_float_until+0x4a>
 80019a0:	7f3b      	ldrb	r3, [r7, #28]
 80019a2:	425b      	negs	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	773b      	strb	r3, [r7, #28]
 80019a8:	e03a      	b.n	8001a20 <parse_float_until+0xc0>
		else if (c == '.') isFrac = 1;
 80019aa:	7fbb      	ldrb	r3, [r7, #30]
 80019ac:	2b2e      	cmp	r3, #46	; 0x2e
 80019ae:	d102      	bne.n	80019b6 <parse_float_until+0x56>
 80019b0:	2301      	movs	r3, #1
 80019b2:	777b      	strb	r3, [r7, #29]
 80019b4:	e034      	b.n	8001a20 <parse_float_until+0xc0>
		else if (c <= '9' && c >= '0') {
 80019b6:	7fbb      	ldrb	r3, [r7, #30]
 80019b8:	2b39      	cmp	r3, #57	; 0x39
 80019ba:	d831      	bhi.n	8001a20 <parse_float_until+0xc0>
 80019bc:	7fbb      	ldrb	r3, [r7, #30]
 80019be:	2b2f      	cmp	r3, #47	; 0x2f
 80019c0:	d92e      	bls.n	8001a20 <parse_float_until+0xc0>
			uint8_t d = c - '0';
 80019c2:	7fbb      	ldrb	r3, [r7, #30]
 80019c4:	3b30      	subs	r3, #48	; 0x30
 80019c6:	73fb      	strb	r3, [r7, #15]
			if (isFrac) {
 80019c8:	7f7b      	ldrb	r3, [r7, #29]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01f      	beq.n	8001a0e <parse_float_until+0xae>
				frac += div * d;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	edc7 7a05 	vstr	s15, [r7, #20]
				div *= 0.1;
 80019ec:	6938      	ldr	r0, [r7, #16]
 80019ee:	f7fe fdab 	bl	8000548 <__aeabi_f2d>
 80019f2:	a321      	add	r3, pc, #132	; (adr r3, 8001a78 <parse_float_until+0x118>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fdfe 	bl	80005f8 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f8f0 	bl	8000be8 <__aeabi_d2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	e008      	b.n	8001a20 <parse_float_until+0xc0>
			}
			else whole = whole * 10 + d;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	461a      	mov	r2, r3
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
		}

		c = *(++(*buf_ptr)); i++;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	77bb      	strb	r3, [r7, #30]
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	3301      	adds	r3, #1
 8001a36:	77fb      	strb	r3, [r7, #31]
	while (i < sizeExpected && c != until) {
 8001a38:	7ffa      	ldrb	r2, [r7, #31]
 8001a3a:	78bb      	ldrb	r3, [r7, #2]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d203      	bcs.n	8001a48 <parse_float_until+0xe8>
 8001a40:	7fba      	ldrb	r2, [r7, #30]
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1a5      	bne.n	8001994 <parse_float_until+0x34>
	}

	return (whole + frac) * sign;
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a66:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	f3af 8000 	nop.w
 8001a78:	9999999a 	.word	0x9999999a
 8001a7c:	3fb99999 	.word	0x3fb99999
 8001a80:	3dcccccd 	.word	0x3dcccccd
 8001a84:	00000000 	.word	0x00000000

08001a88 <get_turning_r_steer_cm>:


static float get_turning_r_steer_cm(float steeringAngle) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	ed87 0a01 	vstr	s0, [r7, #4]
	return CHASSIS_CM / sin(steeringAngle * M_PI / 180);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7fe fd58 	bl	8000548 <__aeabi_f2d>
 8001a98:	a319      	add	r3, pc, #100	; (adr r3, 8001b00 <get_turning_r_steer_cm+0x78>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fdab 	bl	80005f8 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <get_turning_r_steer_cm+0x70>)
 8001ab0:	f7fe fecc 	bl	800084c <__aeabi_ddiv>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	ec43 2b17 	vmov	d7, r2, r3
 8001abc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac0:	eef0 0a67 	vmov.f32	s1, s15
 8001ac4:	f00b fb00 	bl	800d0c8 <sin>
 8001ac8:	ec53 2b10 	vmov	r2, r3, d0
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	490a      	ldr	r1, [pc, #40]	; (8001afc <get_turning_r_steer_cm+0x74>)
 8001ad2:	f7fe febb 	bl	800084c <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f883 	bl	8000be8 <__aeabi_d2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	ee07 3a90 	vmov	s15, r3
}
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	40668000 	.word	0x40668000
 8001afc:	402d0000 	.word	0x402d0000
 8001b00:	54442d18 	.word	0x54442d18
 8001b04:	400921fb 	.word	0x400921fb

08001b08 <get_turning_r_back_cm>:
float get_turning_r_back_cm(float steeringAngle) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	ed87 0a01 	vstr	s0, [r7, #4]
	return CHASSIS_CM / tan(steeringAngle * M_PI / 180);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe fd18 	bl	8000548 <__aeabi_f2d>
 8001b18:	a319      	add	r3, pc, #100	; (adr r3, 8001b80 <get_turning_r_back_cm+0x78>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7fe fd6b 	bl	80005f8 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <get_turning_r_back_cm+0x70>)
 8001b30:	f7fe fe8c 	bl	800084c <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	ec43 2b17 	vmov	d7, r2, r3
 8001b3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b40:	eef0 0a67 	vmov.f32	s1, s15
 8001b44:	f00b fb18 	bl	800d178 <tan>
 8001b48:	ec53 2b10 	vmov	r2, r3, d0
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	490a      	ldr	r1, [pc, #40]	; (8001b7c <get_turning_r_back_cm+0x74>)
 8001b52:	f7fe fe7b 	bl	800084c <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7ff f843 	bl	8000be8 <__aeabi_d2f>
 8001b62:	4603      	mov	r3, r0
 8001b64:	ee07 3a90 	vmov	s15, r3
}
 8001b68:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	f3af 8000 	nop.w
 8001b78:	40668000 	.word	0x40668000
 8001b7c:	402d0000 	.word	0x402d0000
 8001b80:	54442d18 	.word	0x54442d18
 8001b84:	400921fb 	.word	0x400921fb

08001b88 <get_turning_r_robot_cm>:
float get_turning_r_robot_cm(float steeringAngle) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	ed87 0a01 	vstr	s0, [r7, #4]
	float r_steer = get_turning_r_steer_cm(steeringAngle);
 8001b92:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b96:	f7ff ff77 	bl	8001a88 <get_turning_r_steer_cm>
 8001b9a:	ed87 0a04 	vstr	s0, [r7, #16]
	float L2 = CHASSIS_CM / 2;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <get_turning_r_robot_cm+0x7c>)
 8001ba0:	60fb      	str	r3, [r7, #12]
	float r = sqrt(r_steer * r_steer + L2 * L2);
 8001ba2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001baa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb6:	ee17 0a90 	vmov	r0, s15
 8001bba:	f7fe fcc5 	bl	8000548 <__aeabi_f2d>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	ec43 2b10 	vmov	d0, r2, r3
 8001bc6:	f00b fa51 	bl	800d06c <sqrt>
 8001bca:	ec53 2b10 	vmov	r2, r3, d0
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7ff f809 	bl	8000be8 <__aeabi_d2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	617b      	str	r3, [r7, #20]
	if (steeringAngle < 0) r = -r;
 8001bda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	d505      	bpl.n	8001bf4 <get_turning_r_robot_cm+0x6c>
 8001be8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bec:	eef1 7a67 	vneg.f32	s15, s15
 8001bf0:	edc7 7a05 	vstr	s15, [r7, #20]
	return r;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	ee07 3a90 	vmov	s15, r3
}
 8001bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40e80000 	.word	0x40e80000

08001c08 <get_w_ms>:

//angular velocity.
float get_w_ms(float speed, float turning_r_robot_cm) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c12:	edc7 0a00 	vstr	s1, [r7]
	return 90.5f * MOTOR_PWM_MAX / MOTOR_PWM_PERIOD * speed / 100 / turning_r_robot_cm *  180 / M_PI / 1000;
 8001c16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c1a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001c88 <get_w_ms+0x80>
 8001c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c22:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001c8c <get_w_ms+0x84>
 8001c26:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c2a:	ed97 7a00 	vldr	s14, [r7]
 8001c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c32:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001c90 <get_w_ms+0x88>
 8001c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3a:	ee17 0a90 	vmov	r0, s15
 8001c3e:	f7fe fc83 	bl	8000548 <__aeabi_f2d>
 8001c42:	a30f      	add	r3, pc, #60	; (adr r3, 8001c80 <get_w_ms+0x78>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fe00 	bl	800084c <__aeabi_ddiv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <get_w_ms+0x8c>)
 8001c5a:	f7fe fdf7 	bl	800084c <__aeabi_ddiv>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f7fe ffbf 	bl	8000be8 <__aeabi_d2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	ee07 3a90 	vmov	s15, r3
}
 8001c70:	eeb0 0a67 	vmov.f32	s0, s15
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	54442d18 	.word	0x54442d18
 8001c84:	400921fb 	.word	0x400921fb
 8001c88:	4296d555 	.word	0x4296d555
 8001c8c:	42c80000 	.word	0x42c80000
 8001c90:	43340000 	.word	0x43340000
 8001c94:	408f4000 	.word	0x408f4000

08001c98 <get_distance_cm>:

float angle_diff(float a1, float a2) {
	return mod_360(a1 - a2);
}

float get_distance_cm(uint16_t pulses) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
	return ((float) pulses) / MOTOR_PPR * 2 * M_PI * WHEEL_R_CM;
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cac:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001d00 <get_distance_cm+0x68>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cb8:	ee17 0a90 	vmov	r0, s15
 8001cbc:	f7fe fc44 	bl	8000548 <__aeabi_f2d>
 8001cc0:	a30d      	add	r3, pc, #52	; (adr r3, 8001cf8 <get_distance_cm+0x60>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fc97 	bl	80005f8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <get_distance_cm+0x6c>)
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe ff80 	bl	8000be8 <__aeabi_d2f>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	ee07 3a90 	vmov	s15, r3
}
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	54442d18 	.word	0x54442d18
 8001cfc:	400921fb 	.word	0x400921fb
 8001d00:	44410000 	.word	0x44410000
 8001d04:	400a0000 	.word	0x400a0000

08001d08 <dist_init>:
#include "dist.h"

static KalmanParams kParams;
static DistState state;

void dist_init() {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	kalman_init(&kParams, 0, DIST_S_ACCEL, DIST_S_MOTOR);
 8001d0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001d10:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001d34 <dist_init+0x2c>
 8001d14:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001d38 <dist_init+0x30>
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <dist_init+0x34>)
 8001d1a:	f000 f8ab 	bl	8001e74 <kalman_init>

	state.dist = 0;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <dist_init+0x38>)
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
	state.v = 0;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <dist_init+0x38>)
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	605a      	str	r2, [r3, #4]
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	3724873e 	.word	0x3724873e
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	20000208 	.word	0x20000208
 8001d40:	20000214 	.word	0x20000214

08001d44 <dist_reset>:

void dist_reset() {
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
	state.dist = 0;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <dist_reset+0x2c>)
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
	state.v = 0;
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <dist_reset+0x2c>)
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
	kParams.last_est = 0;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <dist_reset+0x30>)
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
	kParams.s_est = DIST_S_ACCEL;
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <dist_reset+0x30>)
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <dist_reset+0x34>)
 8001d64:	605a      	str	r2, [r3, #4]
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	20000214 	.word	0x20000214
 8001d74:	20000208 	.word	0x20000208
 8001d78:	3724873e 	.word	0x3724873e

08001d7c <update_state>:

static void update_state(float msElapsed, float accel) {
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d86:	edc7 0a00 	vstr	s1, [r7]
	state.dist += state.v * msElapsed;
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <update_state+0x98>)
 8001d8c:	ed93 7a00 	vldr	s14, [r3]
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <update_state+0x98>)
 8001d92:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <update_state+0x98>)
 8001da4:	edc3 7a00 	vstr	s15, [r3]
	state.v += accel * msElapsed;
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <update_state+0x98>)
 8001daa:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dae:	edd7 6a00 	vldr	s13, [r7]
 8001db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <update_state+0x98>)
 8001dc0:	edc3 7a01 	vstr	s15, [r3, #4]

	//update uncertainties.
	kParams.s_est += msElapsed * msElapsed * state.s_v;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <update_state+0x9c>)
 8001dc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dce:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <update_state+0x98>)
 8001dd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <update_state+0x9c>)
 8001de2:	edc3 7a01 	vstr	s15, [r3, #4]
	state.s_v += msElapsed * msElapsed * DIST_S_ACCEL;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <update_state+0x98>)
 8001de8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001df4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001e1c <update_state+0xa0>
 8001df8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <update_state+0x98>)
 8001e02:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000214 	.word	0x20000214
 8001e18:	20000208 	.word	0x20000208
 8001e1c:	3724873e 	.word	0x3724873e

08001e20 <dist_get_cm>:

float dist_get_cm(float msElapsed, float accel, float motorDist) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e2e:	ed87 1a01 	vstr	s2, [r7, #4]
	//get raw estimate, and update uncertainty.
	update_state(msElapsed, accel);
 8001e32:	edd7 0a02 	vldr	s1, [r7, #8]
 8001e36:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e3a:	f7ff ff9f 	bl	8001d7c <update_state>

	//get improved estimate.
	kalman_update(&kParams, state.dist, motorDist);
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <dist_get_cm+0x4c>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	edd7 0a01 	vldr	s1, [r7, #4]
 8001e48:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4c:	4808      	ldr	r0, [pc, #32]	; (8001e70 <dist_get_cm+0x50>)
 8001e4e:	f000 f82a 	bl	8001ea6 <kalman_update>
	state.dist = kParams.last_est;
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <dist_get_cm+0x50>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <dist_get_cm+0x4c>)
 8001e58:	6013      	str	r3, [r2, #0]

	return state.dist;
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <dist_get_cm+0x4c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	ee07 3a90 	vmov	s15, r3
}
 8001e62:	eeb0 0a67 	vmov.f32	s0, s15
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000214 	.word	0x20000214
 8001e70:	20000208 	.word	0x20000208

08001e74 <kalman_init>:
#include "kalman.h"

void kalman_init(KalmanParams *params, float initial_est, float s_est, float s_mea){
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e80:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e84:	ed87 1a00 	vstr	s2, [r7]
	params->last_est = initial_est;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	601a      	str	r2, [r3, #0]
	params->s_est = s_est;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	605a      	str	r2, [r3, #4]
	params->s_mea = s_mea;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	609a      	str	r2, [r3, #8]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <kalman_update>:

void kalman_update(KalmanParams *params, float est, float mea){
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	ed87 0a02 	vstr	s0, [r7, #8]
 8001eb2:	edc7 0a01 	vstr	s1, [r7, #4]
	//calculate Kalman gain.
	float G = (params->s_est) / (params->s_est + params->s_mea);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ec8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed0:	edc7 7a05 	vstr	s15, [r7, #20]

	//update estimate.
	params->last_est += G * (mea - est);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	ed93 7a00 	vldr	s14, [r3]
 8001eda:	edd7 6a01 	vldr	s13, [r7, #4]
 8001ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ee6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	edc3 7a00 	vstr	s15, [r3]
}
 8001ef8:	bf00      	nop
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <magcal_preload>:
#include "mag_cal.h"

static I2C_HandleTypeDef *hi2c;
static MagCalParams *params;

static void magcal_preload(MagCalParams *params_ptr) {
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	params_ptr->offset_HI[0] = -3.6;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <magcal_preload+0x38>)
 8001f10:	601a      	str	r2, [r3, #0]
	params_ptr->offset_HI[1] = -17.55;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <magcal_preload+0x3c>)
 8001f16:	605a      	str	r2, [r3, #4]

	params_ptr->matrix_SI[0][0] = 1.024;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <magcal_preload+0x40>)
 8001f1c:	609a      	str	r2, [r3, #8]
	params_ptr->matrix_SI[0][1] = -0.0665;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <magcal_preload+0x44>)
 8001f22:	60da      	str	r2, [r3, #12]
	params_ptr->matrix_SI[1][0] = 0.0965;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <magcal_preload+0x48>)
 8001f28:	611a      	str	r2, [r3, #16]
	params_ptr->matrix_SI[1][1] = 1.4856;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <magcal_preload+0x4c>)
 8001f2e:	615a      	str	r2, [r3, #20]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	c0666666 	.word	0xc0666666
 8001f40:	c18c6666 	.word	0xc18c6666
 8001f44:	3f83126f 	.word	0x3f83126f
 8001f48:	bd883127 	.word	0xbd883127
 8001f4c:	3dc5a1cb 	.word	0x3dc5a1cb
 8001f50:	3fbe2824 	.word	0x3fbe2824

08001f54 <magcal_init>:

void magcal_init(I2C_HandleTypeDef *hi2c_ptr, MagCalParams *params_ptr) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
	hi2c = hi2c_ptr;
 8001f5e:	4a06      	ldr	r2, [pc, #24]	; (8001f78 <magcal_init+0x24>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6013      	str	r3, [r2, #0]
	params = params_ptr;
 8001f64:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <magcal_init+0x28>)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6013      	str	r3, [r2, #0]

	magcal_preload(params_ptr);
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f7ff ffca 	bl	8001f04 <magcal_preload>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000220 	.word	0x20000220
 8001f7c:	20000224 	.word	0x20000224

08001f80 <magcal_adjust>:

	OLED_Clear();
	OLED_Refresh_Gram();
}

void magcal_adjust(float magXY[2]) {
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	float x = magXY[0] - params->offset_HI[0], y = magXY[1] - params->offset_HI[1];
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	ed93 7a00 	vldr	s14, [r3]
 8001f8e:	4b22      	ldr	r3, [pc, #136]	; (8002018 <magcal_adjust+0x98>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9a:	edc7 7a03 	vstr	s15, [r7, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <magcal_adjust+0x98>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb2:	edc7 7a02 	vstr	s15, [r7, #8]
	magXY[0] = params->matrix_SI[0][0] * x + params->matrix_SI[0][1] * y;
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <magcal_adjust+0x98>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <magcal_adjust+0x98>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	edd3 6a03 	vldr	s13, [r3, #12]
 8001fce:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	edc3 7a00 	vstr	s15, [r3]
	magXY[1] = params->matrix_SI[1][0] * x + params->matrix_SI[1][1] * y;
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <magcal_adjust+0x98>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fe8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <magcal_adjust+0x98>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ff8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3304      	adds	r3, #4
 8002004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002008:	edc3 7a00 	vstr	s15, [r3]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	20000224 	.word	0x20000224

0800201c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//paced loop.
volatile uint8_t newTick = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	//16MHz / 48000 = 3ms frame.
	newTick = 1;
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000485 	.word	0x20000485

0800203c <HAL_UART_RxCpltCallback>:

//serial in.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &byte_serial, 1);
 8002044:	2201      	movs	r2, #1
 8002046:	4910      	ldr	r1, [pc, #64]	; (8002088 <HAL_UART_RxCpltCallback+0x4c>)
 8002048:	4810      	ldr	r0, [pc, #64]	; (800208c <HAL_UART_RxCpltCallback+0x50>)
 800204a:	f005 fc82 	bl	8007952 <HAL_UART_Receive_IT>
	buf_serial[buf_i++] = byte_serial;
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_UART_RxCpltCallback+0x54>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	b2d1      	uxtb	r1, r2
 8002056:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <HAL_UART_RxCpltCallback+0x54>)
 8002058:	7011      	strb	r1, [r2, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_UART_RxCpltCallback+0x4c>)
 800205e:	7819      	ldrb	r1, [r3, #0]
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_UART_RxCpltCallback+0x58>)
 8002062:	5499      	strb	r1, [r3, r2]

	if (byte_serial == CMD_END) {
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_UART_RxCpltCallback+0x4c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b0a      	cmp	r3, #10
 800206a:	d109      	bne.n	8002080 <HAL_UART_RxCpltCallback+0x44>
		commands_process(&huart3, buf_serial, buf_i);
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_UART_RxCpltCallback+0x54>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <HAL_UART_RxCpltCallback+0x58>)
 8002074:	4805      	ldr	r0, [pc, #20]	; (800208c <HAL_UART_RxCpltCallback+0x50>)
 8002076:	f7ff fb19 	bl	80016ac <commands_process>
		buf_i = 0;
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_UART_RxCpltCallback+0x54>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
	}
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000484 	.word	0x20000484
 800208c:	200003e4 	.word	0x200003e4
 8002090:	2000046c 	.word	0x2000046c
 8002094:	20000470 	.word	0x20000470

08002098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b094      	sub	sp, #80	; 0x50
 800209c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800209e:	f002 f847 	bl	8004130 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020a2:	f000 f98f 	bl	80023c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020a6:	f000 fcab 	bl	8002a00 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80020aa:	f000 fc7f 	bl	80029ac <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80020ae:	f000 f9e7 	bl	8002480 <MX_I2C1_Init>
  MX_TIM8_Init();
 80020b2:	f000 fbcf 	bl	8002854 <MX_TIM8_Init>
  MX_TIM2_Init();
 80020b6:	f000 fab1 	bl	800261c <MX_TIM2_Init>
  MX_TIM3_Init();
 80020ba:	f000 fb03 	bl	80026c4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80020be:	f000 fa0d 	bl	80024dc <MX_TIM1_Init>
  MX_TIM4_Init();
 80020c2:	f000 fb53 	bl	800276c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* ----- Start: Initialize libraries ----- */
  OLED_Init();							//initialize OLED display.
 80020c6:	f001 f963 	bl	8003390 <OLED_Init>
  magcal_init(&hi2c1, &magCalParams);	//initialize magnetometer calibration.
 80020ca:	49ac      	ldr	r1, [pc, #688]	; (800237c <main+0x2e4>)
 80020cc:	48ac      	ldr	r0, [pc, #688]	; (8002380 <main+0x2e8>)
 80020ce:	f7ff ff41 	bl	8001f54 <magcal_init>
  sensors_init(&hi2c1, &sensors); 		//initialize motion sensors.
 80020d2:	49ac      	ldr	r1, [pc, #688]	; (8002384 <main+0x2ec>)
 80020d4:	48aa      	ldr	r0, [pc, #680]	; (8002380 <main+0x2e8>)
 80020d6:	f001 fa73 	bl	80035c0 <sensors_init>
  motor_init(&htim8, &htim2, &htim3); 	//initialize motor PWM and encoders.
 80020da:	4aab      	ldr	r2, [pc, #684]	; (8002388 <main+0x2f0>)
 80020dc:	49ab      	ldr	r1, [pc, #684]	; (800238c <main+0x2f4>)
 80020de:	48ac      	ldr	r0, [pc, #688]	; (8002390 <main+0x2f8>)
 80020e0:	f000 fd26 	bl	8002b30 <motor_init>
  servo_init(&htim1); 					//initialize servo PWM.
 80020e4:	48ab      	ldr	r0, [pc, #684]	; (8002394 <main+0x2fc>)
 80020e6:	f001 fc41 	bl	800396c <servo_init>

  dist_init();							//initialize distance tracking.
 80020ea:	f7ff fe0d 	bl	8001d08 <dist_init>

  /* ----- Start: Car setup ----- */
//  magcal_calc_params();

  //reset car.
  servo_setAngle(0);
 80020ee:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8002398 <main+0x300>
 80020f2:	f001 fc5f 	bl	80039b4 <servo_setAngle>
  motor_setDrive(0, 0);
 80020f6:	2100      	movs	r1, #0
 80020f8:	2000      	movs	r0, #0
 80020fa:	f000 ff59 	bl	8002fb0 <motor_setDrive>

  OLED_ShowString(0, 0, "Press USER when ready...");
 80020fe:	4aa7      	ldr	r2, [pc, #668]	; (800239c <main+0x304>)
 8002100:	2100      	movs	r1, #0
 8002102:	2000      	movs	r0, #0
 8002104:	f001 f912 	bl	800332c <OLED_ShowString>
  OLED_Refresh_Gram();
 8002108:	f000 ffe6 	bl	80030d8 <OLED_Refresh_Gram>
  while (!user_is_pressed());	//wait for user to place car.
 800210c:	bf00      	nop
 800210e:	f001 ffd3 	bl	80040b8 <user_is_pressed>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0fa      	beq.n	800210e <main+0x76>
  OLED_Clear();
 8002118:	f001 f816 	bl	8003148 <OLED_Clear>
  OLED_ShowString(0, 0, "Setting sensors bias...");
 800211c:	4aa0      	ldr	r2, [pc, #640]	; (80023a0 <main+0x308>)
 800211e:	2100      	movs	r1, #0
 8002120:	2000      	movs	r0, #0
 8002122:	f001 f903 	bl	800332c <OLED_ShowString>
  OLED_Refresh_Gram();
 8002126:	f000 ffd7 	bl	80030d8 <OLED_Refresh_Gram>

  sensors_set_bias(500); 		// set initial bias.
 800212a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800212e:	f001 fb67 	bl	8003800 <sensors_set_bias>
  OLED_Clear();
 8002132:	f001 f809 	bl	8003148 <OLED_Clear>
  OLED_ShowString(0, 0, "Active.");
 8002136:	4a9b      	ldr	r2, [pc, #620]	; (80023a4 <main+0x30c>)
 8002138:	2100      	movs	r1, #0
 800213a:	2000      	movs	r0, #0
 800213c:	f001 f8f6 	bl	800332c <OLED_ShowString>
  OLED_Refresh_Gram();
 8002140:	f000 ffca 	bl	80030d8 <OLED_Refresh_Gram>
  /* ----- End: Car setup ----- */

  /* ----- Start: OS Parameters ----- */
  Command *cmd = NULL;					//current command.
 8002144:	2300      	movs	r3, #0
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
  float motorDist = 0, estDist = 0;		//distance estimations.
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
  float distDiff = 0, brakingDist = 0; 	//current distance difference.
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
  float wDiff = 0, wTarget = 0;			//current angular velocity difference and target.
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
  float rBack = 0, rRobot = 0;			//turning radii at the back and centre of robot.
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
  /* ----- End: OS Parameters ----- */

  /* ----- Start: Interrupts ----- */
  HAL_UART_Receive_IT(&huart3, &byte_serial, 1);	//start receiving serial.
 8002178:	2201      	movs	r2, #1
 800217a:	498b      	ldr	r1, [pc, #556]	; (80023a8 <main+0x310>)
 800217c:	488b      	ldr	r0, [pc, #556]	; (80023ac <main+0x314>)
 800217e:	f005 fbe8 	bl	8007952 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim4);					//start paced loop timer.
 8002182:	488b      	ldr	r0, [pc, #556]	; (80023b0 <main+0x318>)
 8002184:	f004 f8d0 	bl	8006328 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* ----- Start: Get next command (if any) ----- */
	if (cmd == NULL) {
 8002188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d15c      	bne.n	8002248 <main+0x1b0>
		cmd = commands_pop();
 800218e:	f7ff fb79 	bl	8001884 <commands_pop>
 8002192:	63f8      	str	r0, [r7, #60]	; 0x3c

		if (cmd != NULL) {
 8002194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d056      	beq.n	8002248 <main+0x1b0>
			dist_reset();
 800219a:	f7ff fdd3 	bl	8001d44 <dist_reset>
			motor_setDrive(cmd->dir, cmd->speed);
 800219e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a0:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80021a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a6:	799b      	ldrb	r3, [r3, #6]
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f000 ff00 	bl	8002fb0 <motor_setDrive>
			if (cmd->dir != 0) {
 80021b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d040      	beq.n	800223c <main+0x1a4>
				brakingDist = MOTOR_BRAKING_DIST_CM * cmd->speed / 100;
 80021ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021bc:	799b      	ldrb	r3, [r3, #6]
 80021be:	4a7d      	ldr	r2, [pc, #500]	; (80023b4 <main+0x31c>)
 80021c0:	fb82 1203 	smull	r1, r2, r2, r3
 80021c4:	1052      	asrs	r2, r2, #1
 80021c6:	17db      	asrs	r3, r3, #31
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

				float steeringAngle = cmd->steeringAngle;
 80021d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
				servo_setAngle(steeringAngle);
 80021dc:	ed97 0a06 	vldr	s0, [r7, #24]
 80021e0:	f001 fbe8 	bl	80039b4 <servo_setAngle>
				if (steeringAngle != 0) {
 80021e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80021e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f0:	d01a      	beq.n	8002228 <main+0x190>
					rBack = get_turning_r_back_cm(steeringAngle);
 80021f2:	ed97 0a06 	vldr	s0, [r7, #24]
 80021f6:	f7ff fc87 	bl	8001b08 <get_turning_r_back_cm>
 80021fa:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
					rRobot = get_turning_r_robot_cm(steeringAngle);
 80021fe:	ed97 0a06 	vldr	s0, [r7, #24]
 8002202:	f7ff fcc1 	bl	8001b88 <get_turning_r_robot_cm>
 8002206:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
					wTarget = get_w_ms(cmd->speed, rRobot);
 800220a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800220c:	799b      	ldrb	r3, [r3, #6]
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002216:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800221a:	eeb0 0a67 	vmov.f32	s0, s15
 800221e:	f7ff fcf3 	bl	8001c08 <get_w_ms>
 8002222:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 8002226:	e00f      	b.n	8002248 <main+0x1b0>
				} else {
					rBack = 0;
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
					rRobot = 0;
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
					wTarget = 0;
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
 800223a:	e005      	b.n	8002248 <main+0x1b0>
				}
			} else {
				commands_end(&huart3, cmd);
 800223c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800223e:	485b      	ldr	r0, [pc, #364]	; (80023ac <main+0x314>)
 8002240:	f7ff fb38 	bl	80018b4 <commands_end>
				cmd = NULL;
 8002244:	2300      	movs	r3, #0
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
	}
	/* ----- End: Get next command (if any) ----- */

	/* ----- Start: Drive PID Control ----- */
	if (cmd != NULL && cmd->dir != 0) {
 8002248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 808b 	beq.w	8002366 <main+0x2ce>
 8002250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002252:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8085 	beq.w	8002366 <main+0x2ce>
		sensors_read_accel();
 800225c:	f001 fa0a 	bl	8003674 <sensors_read_accel>
		sensors_read_gyroZ();
 8002260:	f001 f9e4 	bl	800362c <sensors_read_gyroZ>
		wDiff = (sensors.gyroZ - wTarget) * MS_FRAME;
 8002264:	4b47      	ldr	r3, [pc, #284]	; (8002384 <main+0x2ec>)
 8002266:	ed93 7a00 	vldr	s14, [r3]
 800226a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800226e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002272:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800227a:	edc7 7a07 	vstr	s15, [r7, #28]
//		wDiff = 0;

		motorDist = motor_getDist();
 800227e:	f000 fd01 	bl	8002c84 <motor_getDist>
 8002282:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		estDist = dist_get_cm(MS_FRAME, cmd->dir * sensors.accel[1], motorDist);
 8002286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002288:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002294:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <main+0x2ec>)
 8002296:	edd3 7a02 	vldr	s15, [r3, #8]
 800229a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229e:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80022a2:	eef0 0a67 	vmov.f32	s1, s15
 80022a6:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80022aa:	f7ff fdb9 	bl	8001e20 <dist_get_cm>
 80022ae:	ed87 0a08 	vstr	s0, [r7, #32]
		switch (cmd->distType) {
 80022b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b4:	7b1b      	ldrb	r3, [r3, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <main+0x228>
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d00a      	beq.n	80022d4 <main+0x23c>
 80022be:	e00d      	b.n	80022dc <main+0x244>
			case TARGET:
				distDiff = cmd->dist - estDist;
 80022c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c2:	ed93 7a04 	vldr	s14, [r3, #16]
 80022c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80022ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ce:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				break;
 80022d2:	e006      	b.n	80022e2 <main+0x24a>
			case STOP_WITHIN:
				distDiff = cmd->dist;
 80022d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
 80022da:	e002      	b.n	80022e2 <main+0x24a>
			default:
				distDiff = 10;
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <main+0x320>)
 80022de:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
 80022e0:	bf00      	nop
		}

		motor_pwmCorrection(cmd->dir, wDiff, rBack, rRobot, distDiff, brakingDist); //motor correction.
 80022e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80022e8:	ed97 2a0d 	vldr	s4, [r7, #52]	; 0x34
 80022ec:	edd7 1a0e 	vldr	s3, [r7, #56]	; 0x38
 80022f0:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 80022f4:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80022f8:	ed97 0a07 	vldr	s0, [r7, #28]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fcf9 	bl	8002cf4 <motor_pwmCorrection>

		if (distDiff <= 1) {
 8002302:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800230a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002312:	d828      	bhi.n	8002366 <main+0x2ce>
			//target achieved; move to next command.
			commands_end(&huart3, cmd);
 8002314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002316:	4825      	ldr	r0, [pc, #148]	; (80023ac <main+0x314>)
 8002318:	f7ff facc 	bl	80018b4 <commands_end>
			cmd = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	63fb      	str	r3, [r7, #60]	; 0x3c

			servo_setAngle(0);
 8002320:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002398 <main+0x300>
 8002324:	f001 fb46 	bl	80039b4 <servo_setAngle>
			motor_setDrive(0, 0);
 8002328:	2100      	movs	r1, #0
 800232a:	2000      	movs	r0, #0
 800232c:	f000 fe40 	bl	8002fb0 <motor_setDrive>

			snprintf(buf, 20, "%.3f|%.3f", motorDist, estDist);
 8002330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002332:	f7fe f909 	bl	8000548 <__aeabi_f2d>
 8002336:	4604      	mov	r4, r0
 8002338:	460d      	mov	r5, r1
 800233a:	6a38      	ldr	r0, [r7, #32]
 800233c:	f7fe f904 	bl	8000548 <__aeabi_f2d>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	1d38      	adds	r0, r7, #4
 8002346:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800234a:	e9cd 4500 	strd	r4, r5, [sp]
 800234e:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <main+0x324>)
 8002350:	2114      	movs	r1, #20
 8002352:	f007 fa6d 	bl	8009830 <sniprintf>
			OLED_ShowString(0, 0, buf);
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	461a      	mov	r2, r3
 800235a:	2100      	movs	r1, #0
 800235c:	2000      	movs	r0, #0
 800235e:	f000 ffe5 	bl	800332c <OLED_ShowString>
			OLED_Refresh_Gram();
 8002362:	f000 feb9 	bl	80030d8 <OLED_Refresh_Gram>
		}
	}
	/* ----- End: Drive PID Control ----- */

	/* ----- Start: Paced Loop Control ----- */
	while (!newTick);		//wait for new tick.
 8002366:	bf00      	nop
 8002368:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <main+0x328>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0fa      	beq.n	8002368 <main+0x2d0>
	newTick = 0;			//acknowledge flag.
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <main+0x328>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
	if (cmd == NULL) {
 8002378:	e706      	b.n	8002188 <main+0xf0>
 800237a:	bf00      	nop
 800237c:	20000454 	.word	0x20000454
 8002380:	20000228 	.word	0x20000228
 8002384:	2000042c 	.word	0x2000042c
 8002388:	2000030c 	.word	0x2000030c
 800238c:	200002c4 	.word	0x200002c4
 8002390:	2000039c 	.word	0x2000039c
 8002394:	2000027c 	.word	0x2000027c
 8002398:	00000000 	.word	0x00000000
 800239c:	0800ec70 	.word	0x0800ec70
 80023a0:	0800ec8c 	.word	0x0800ec8c
 80023a4:	0800eca4 	.word	0x0800eca4
 80023a8:	20000484 	.word	0x20000484
 80023ac:	200003e4 	.word	0x200003e4
 80023b0:	20000354 	.word	0x20000354
 80023b4:	66666667 	.word	0x66666667
 80023b8:	41200000 	.word	0x41200000
 80023bc:	0800ecac 	.word	0x0800ecac
 80023c0:	20000485 	.word	0x20000485

080023c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b094      	sub	sp, #80	; 0x50
 80023c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ca:	f107 0320 	add.w	r3, r7, #32
 80023ce:	2230      	movs	r2, #48	; 0x30
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f007 fac3 	bl	800995e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	4b22      	ldr	r3, [pc, #136]	; (8002478 <SystemClock_Config+0xb4>)
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	4a21      	ldr	r2, [pc, #132]	; (8002478 <SystemClock_Config+0xb4>)
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	6413      	str	r3, [r2, #64]	; 0x40
 80023f8:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <SystemClock_Config+0xb4>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002404:	2300      	movs	r3, #0
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	4b1c      	ldr	r3, [pc, #112]	; (800247c <SystemClock_Config+0xb8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <SystemClock_Config+0xb8>)
 800240e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <SystemClock_Config+0xb8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002420:	2302      	movs	r3, #2
 8002422:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002424:	2301      	movs	r3, #1
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002428:	2310      	movs	r3, #16
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800242c:	2300      	movs	r3, #0
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002430:	f107 0320 	add.w	r3, r7, #32
 8002434:	4618      	mov	r0, r3
 8002436:	f003 facf 	bl	80059d8 <HAL_RCC_OscConfig>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002440:	f000 fb70 	bl	8002b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002444:	230f      	movs	r3, #15
 8002446:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f003 fd32 	bl	8005ec8 <HAL_RCC_ClockConfig>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800246a:	f000 fb5b 	bl	8002b24 <Error_Handler>
  }
}
 800246e:	bf00      	nop
 8002470:	3750      	adds	r7, #80	; 0x50
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000

08002480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <MX_I2C1_Init+0x54>)
 8002488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_I2C1_Init+0x50>)
 800248c:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <MX_I2C1_Init+0x58>)
 800248e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_I2C1_Init+0x50>)
 800249e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024be:	f002 fa3f 	bl	8004940 <HAL_I2C_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024c8:	f000 fb2c 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000228 	.word	0x20000228
 80024d4:	40005400 	.word	0x40005400
 80024d8:	00061a80 	.word	0x00061a80

080024dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b096      	sub	sp, #88	; 0x58
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]
 800250a:	615a      	str	r2, [r3, #20]
 800250c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	2220      	movs	r2, #32
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f007 fa22 	bl	800995e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800251a:	4b3e      	ldr	r3, [pc, #248]	; (8002614 <MX_TIM1_Init+0x138>)
 800251c:	4a3e      	ldr	r2, [pc, #248]	; (8002618 <MX_TIM1_Init+0x13c>)
 800251e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8002520:	4b3c      	ldr	r3, [pc, #240]	; (8002614 <MX_TIM1_Init+0x138>)
 8002522:	2204      	movs	r2, #4
 8002524:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002526:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <MX_TIM1_Init+0x138>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 800252c:	4b39      	ldr	r3, [pc, #228]	; (8002614 <MX_TIM1_Init+0x138>)
 800252e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002532:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002534:	4b37      	ldr	r3, [pc, #220]	; (8002614 <MX_TIM1_Init+0x138>)
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800253a:	4b36      	ldr	r3, [pc, #216]	; (8002614 <MX_TIM1_Init+0x138>)
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <MX_TIM1_Init+0x138>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002546:	4833      	ldr	r0, [pc, #204]	; (8002614 <MX_TIM1_Init+0x138>)
 8002548:	f003 fe9e 	bl	8006288 <HAL_TIM_Base_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002552:	f000 fae7 	bl	8002b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800255c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002560:	4619      	mov	r1, r3
 8002562:	482c      	ldr	r0, [pc, #176]	; (8002614 <MX_TIM1_Init+0x138>)
 8002564:	f004 fc2c 	bl	8006dc0 <HAL_TIM_ConfigClockSource>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800256e:	f000 fad9 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002572:	4828      	ldr	r0, [pc, #160]	; (8002614 <MX_TIM1_Init+0x138>)
 8002574:	f003 ffa1 	bl	80064ba <HAL_TIM_PWM_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800257e:	f000 fad1 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800258a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800258e:	4619      	mov	r1, r3
 8002590:	4820      	ldr	r0, [pc, #128]	; (8002614 <MX_TIM1_Init+0x138>)
 8002592:	f005 f821 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800259c:	f000 fac2 	bl	8002b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a0:	2360      	movs	r3, #96	; 0x60
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025ac:	2300      	movs	r3, #0
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c0:	2200      	movs	r2, #0
 80025c2:	4619      	mov	r1, r3
 80025c4:	4813      	ldr	r0, [pc, #76]	; (8002614 <MX_TIM1_Init+0x138>)
 80025c6:	f004 fb39 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80025d0:	f000 faa8 	bl	8002b24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4807      	ldr	r0, [pc, #28]	; (8002614 <MX_TIM1_Init+0x138>)
 80025f8:	f005 f86a 	bl	80076d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002602:	f000 fa8f 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002606:	4803      	ldr	r0, [pc, #12]	; (8002614 <MX_TIM1_Init+0x138>)
 8002608:	f001 fb8e 	bl	8003d28 <HAL_TIM_MspPostInit>

}
 800260c:	bf00      	nop
 800260e:	3758      	adds	r7, #88	; 0x58
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000027c 	.word	0x2000027c
 8002618:	40010000 	.word	0x40010000

0800261c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	; 0x30
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002622:	f107 030c 	add.w	r3, r7, #12
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f007 f997 	bl	800995e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <MX_TIM2_Init+0xa4>)
 800263a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800263e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <MX_TIM2_Init+0xa4>)
 8002642:	2200      	movs	r2, #0
 8002644:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <MX_TIM2_Init+0xa4>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <MX_TIM2_Init+0xa4>)
 800264e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002652:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <MX_TIM2_Init+0xa4>)
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265a:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <MX_TIM2_Init+0xa4>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002660:	2303      	movs	r3, #3
 8002662:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002664:	2302      	movs	r3, #2
 8002666:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002668:	2301      	movs	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002674:	2302      	movs	r3, #2
 8002676:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002678:	2301      	movs	r3, #1
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800267c:	2300      	movs	r3, #0
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	4619      	mov	r1, r3
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <MX_TIM2_Init+0xa4>)
 800268c:	f004 f836 	bl	80066fc <HAL_TIM_Encoder_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002696:	f000 fa45 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4806      	ldr	r0, [pc, #24]	; (80026c0 <MX_TIM2_Init+0xa4>)
 80026a8:	f004 ff96 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80026b2:	f000 fa37 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	3730      	adds	r7, #48	; 0x30
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200002c4 	.word	0x200002c4

080026c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	2224      	movs	r2, #36	; 0x24
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f007 f943 	bl	800995e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <MX_TIM3_Init+0xa0>)
 80026e2:	4a21      	ldr	r2, [pc, #132]	; (8002768 <MX_TIM3_Init+0xa4>)
 80026e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <MX_TIM3_Init+0xa0>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <MX_TIM3_Init+0xa0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026f2:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <MX_TIM3_Init+0xa0>)
 80026f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <MX_TIM3_Init+0xa0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <MX_TIM3_Init+0xa0>)
 8002702:	2200      	movs	r2, #0
 8002704:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002706:	2303      	movs	r3, #3
 8002708:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800270a:	2302      	movs	r3, #2
 800270c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800270e:	2301      	movs	r3, #1
 8002710:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002716:	230a      	movs	r3, #10
 8002718:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800271a:	2302      	movs	r3, #2
 800271c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800271e:	2301      	movs	r3, #1
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002722:	2300      	movs	r3, #0
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002726:	230a      	movs	r3, #10
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	4619      	mov	r1, r3
 8002730:	480c      	ldr	r0, [pc, #48]	; (8002764 <MX_TIM3_Init+0xa0>)
 8002732:	f003 ffe3 	bl	80066fc <HAL_TIM_Encoder_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800273c:	f000 f9f2 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002740:	2300      	movs	r3, #0
 8002742:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	4619      	mov	r1, r3
 800274c:	4805      	ldr	r0, [pc, #20]	; (8002764 <MX_TIM3_Init+0xa0>)
 800274e:	f004 ff43 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002758:	f000 f9e4 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800275c:	bf00      	nop
 800275e:	3730      	adds	r7, #48	; 0x30
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	2000030c 	.word	0x2000030c
 8002768:	40000400 	.word	0x40000400

0800276c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	; 0x38
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002780:	f107 0320 	add.w	r3, r7, #32
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
 8002798:	615a      	str	r2, [r3, #20]
 800279a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <MX_TIM4_Init+0xe0>)
 800279e:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <MX_TIM4_Init+0xe4>)
 80027a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1-1;
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <MX_TIM4_Init+0xe0>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <MX_TIM4_Init+0xe0>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48000-1;
 80027ae:	4b27      	ldr	r3, [pc, #156]	; (800284c <MX_TIM4_Init+0xe0>)
 80027b0:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80027b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b6:	4b25      	ldr	r3, [pc, #148]	; (800284c <MX_TIM4_Init+0xe0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <MX_TIM4_Init+0xe0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027c2:	4822      	ldr	r0, [pc, #136]	; (800284c <MX_TIM4_Init+0xe0>)
 80027c4:	f003 fd60 	bl	8006288 <HAL_TIM_Base_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80027ce:	f000 f9a9 	bl	8002b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027dc:	4619      	mov	r1, r3
 80027de:	481b      	ldr	r0, [pc, #108]	; (800284c <MX_TIM4_Init+0xe0>)
 80027e0:	f004 faee 	bl	8006dc0 <HAL_TIM_ConfigClockSource>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80027ea:	f000 f99b 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80027ee:	4817      	ldr	r0, [pc, #92]	; (800284c <MX_TIM4_Init+0xe0>)
 80027f0:	f003 fe0a 	bl	8006408 <HAL_TIM_OC_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80027fa:	f000 f993 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002806:	f107 0320 	add.w	r3, r7, #32
 800280a:	4619      	mov	r1, r3
 800280c:	480f      	ldr	r0, [pc, #60]	; (800284c <MX_TIM4_Init+0xe0>)
 800280e:	f004 fee3 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002818:	f000 f984 	bl	8002b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800281c:	2300      	movs	r3, #0
 800281e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	2200      	movs	r2, #0
 8002830:	4619      	mov	r1, r3
 8002832:	4806      	ldr	r0, [pc, #24]	; (800284c <MX_TIM4_Init+0xe0>)
 8002834:	f004 f9a6 	bl	8006b84 <HAL_TIM_OC_ConfigChannel>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800283e:	f000 f971 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002842:	bf00      	nop
 8002844:	3738      	adds	r7, #56	; 0x38
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000354 	.word	0x20000354
 8002850:	40000800 	.word	0x40000800

08002854 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b096      	sub	sp, #88	; 0x58
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002868:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	611a      	str	r2, [r3, #16]
 8002882:	615a      	str	r2, [r3, #20]
 8002884:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	2220      	movs	r2, #32
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f007 f866 	bl	800995e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002892:	4b44      	ldr	r3, [pc, #272]	; (80029a4 <MX_TIM8_Init+0x150>)
 8002894:	4a44      	ldr	r2, [pc, #272]	; (80029a8 <MX_TIM8_Init+0x154>)
 8002896:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002898:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <MX_TIM8_Init+0x150>)
 800289a:	2200      	movs	r2, #0
 800289c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <MX_TIM8_Init+0x150>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80028a4:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <MX_TIM8_Init+0x150>)
 80028a6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80028aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ac:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <MX_TIM8_Init+0x150>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80028b2:	4b3c      	ldr	r3, [pc, #240]	; (80029a4 <MX_TIM8_Init+0x150>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b8:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <MX_TIM8_Init+0x150>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80028be:	4839      	ldr	r0, [pc, #228]	; (80029a4 <MX_TIM8_Init+0x150>)
 80028c0:	f003 fce2 	bl	8006288 <HAL_TIM_Base_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80028ca:	f000 f92b 	bl	8002b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80028d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028d8:	4619      	mov	r1, r3
 80028da:	4832      	ldr	r0, [pc, #200]	; (80029a4 <MX_TIM8_Init+0x150>)
 80028dc:	f004 fa70 	bl	8006dc0 <HAL_TIM_ConfigClockSource>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80028e6:	f000 f91d 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80028ea:	482e      	ldr	r0, [pc, #184]	; (80029a4 <MX_TIM8_Init+0x150>)
 80028ec:	f003 fde5 	bl	80064ba <HAL_TIM_PWM_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80028f6:	f000 f915 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002902:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002906:	4619      	mov	r1, r3
 8002908:	4826      	ldr	r0, [pc, #152]	; (80029a4 <MX_TIM8_Init+0x150>)
 800290a:	f004 fe65 	bl	80075d8 <HAL_TIMEx_MasterConfigSynchronization>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002914:	f000 f906 	bl	8002b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002918:	2360      	movs	r3, #96	; 0x60
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002920:	2300      	movs	r3, #0
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	2200      	movs	r2, #0
 800293a:	4619      	mov	r1, r3
 800293c:	4819      	ldr	r0, [pc, #100]	; (80029a4 <MX_TIM8_Init+0x150>)
 800293e:	f004 f97d 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002948:	f000 f8ec 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	2204      	movs	r2, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4813      	ldr	r0, [pc, #76]	; (80029a4 <MX_TIM8_Init+0x150>)
 8002956:	f004 f971 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002960:	f000 f8e0 	bl	8002b24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800297c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	4619      	mov	r1, r3
 8002986:	4807      	ldr	r0, [pc, #28]	; (80029a4 <MX_TIM8_Init+0x150>)
 8002988:	f004 fea2 	bl	80076d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002992:	f000 f8c7 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002996:	4803      	ldr	r0, [pc, #12]	; (80029a4 <MX_TIM8_Init+0x150>)
 8002998:	f001 f9c6 	bl	8003d28 <HAL_TIM_MspPostInit>

}
 800299c:	bf00      	nop
 800299e:	3758      	adds	r7, #88	; 0x58
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	2000039c 	.word	0x2000039c
 80029a8:	40010400 	.word	0x40010400

080029ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <MX_USART3_UART_Init+0x4c>)
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <MX_USART3_UART_Init+0x50>)
 80029b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <MX_USART3_UART_Init+0x4c>)
 80029b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <MX_USART3_UART_Init+0x4c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <MX_USART3_UART_Init+0x4c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <MX_USART3_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <MX_USART3_UART_Init+0x4c>)
 80029d2:	220c      	movs	r2, #12
 80029d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <MX_USART3_UART_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <MX_USART3_UART_Init+0x4c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029e2:	4805      	ldr	r0, [pc, #20]	; (80029f8 <MX_USART3_UART_Init+0x4c>)
 80029e4:	f004 feda 	bl	800779c <HAL_UART_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029ee:	f000 f899 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200003e4 	.word	0x200003e4
 80029fc:	40004800 	.word	0x40004800

08002a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	609a      	str	r2, [r3, #8]
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	4b3e      	ldr	r3, [pc, #248]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a3d      	ldr	r2, [pc, #244]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a20:	f043 0310 	orr.w	r3, r3, #16
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a36      	ldr	r2, [pc, #216]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	4b30      	ldr	r3, [pc, #192]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a58:	f043 0308 	orr.w	r3, r3, #8
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <MX_GPIO_Init+0x114>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin, GPIO_PIN_RESET);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002aa8:	481b      	ldr	r0, [pc, #108]	; (8002b18 <MX_GPIO_Init+0x118>)
 8002aaa:	f001 ff2f 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	213c      	movs	r1, #60	; 0x3c
 8002ab2:	481a      	ldr	r0, [pc, #104]	; (8002b1c <MX_GPIO_Init+0x11c>)
 8002ab4:	f001 ff2a 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET__Pin OLED_DATA_COMMAND__Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin;
 8002ab8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4811      	ldr	r0, [pc, #68]	; (8002b18 <MX_GPIO_Init+0x118>)
 8002ad2:	f001 fd67 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTORA_IN2_Pin MOTORA_IN1_Pin MOTORB_IN1_Pin MOTORB_IN2_Pin */
  GPIO_InitStruct.Pin = MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin;
 8002ad6:	233c      	movs	r3, #60	; 0x3c
 8002ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ada:	2301      	movs	r3, #1
 8002adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 0314 	add.w	r3, r7, #20
 8002aea:	4619      	mov	r1, r3
 8002aec:	480b      	ldr	r0, [pc, #44]	; (8002b1c <MX_GPIO_Init+0x11c>)
 8002aee:	f001 fd59 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8002af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002afc:	2301      	movs	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	4619      	mov	r1, r3
 8002b06:	4806      	ldr	r0, [pc, #24]	; (8002b20 <MX_GPIO_Init+0x120>)
 8002b08:	f001 fd4c 	bl	80045a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b0c:	bf00      	nop
 8002b0e:	3728      	adds	r7, #40	; 0x28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40020c00 	.word	0x40020c00

08002b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b28:	b672      	cpsid	i
}
 8002b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b2c:	e7fe      	b.n	8002b2c <Error_Handler+0x8>
	...

08002b30 <motor_init>:
static PidDef pidDist;
const static float Kp_dist = 0.47;
const static float Ki_dist = 0;
const static float Kd_dist = 0.05;

void motor_init(TIM_HandleTypeDef *pwm, TIM_HandleTypeDef *l_enc, TIM_HandleTypeDef *r_enc) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	//assign timer pointers.
	motor_pwm_tim = pwm;
 8002b3c:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <motor_init+0x84>)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6013      	str	r3, [r2, #0]
	l_enc_tim = l_enc;
 8002b42:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <motor_init+0x88>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	6013      	str	r3, [r2, #0]
	r_enc_tim = r_enc;
 8002b48:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <motor_init+0x8c>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]

	//start Encoders and PWM for L, R motors.
	HAL_TIM_Encoder_Start_IT(l_enc, TIM_CHANNEL_ALL);
 8002b4e:	213c      	movs	r1, #60	; 0x3c
 8002b50:	68b8      	ldr	r0, [r7, #8]
 8002b52:	f003 fe79 	bl	8006848 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(r_enc, TIM_CHANNEL_ALL);
 8002b56:	213c      	movs	r1, #60	; 0x3c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f003 fe75 	bl	8006848 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(pwm, L_CHANNEL);
 8002b5e:	2100      	movs	r1, #0
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f003 fd03 	bl	800656c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm, R_CHANNEL);
 8002b66:	2104      	movs	r1, #4
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f003 fcff 	bl	800656c <HAL_TIM_PWM_Start>

	//initialize PID values.
	pid_init(&pidMatch, Kp_match, Ki_match, Kd_match);
 8002b6e:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 8002b72:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002bc0 <motor_init+0x90>
 8002b76:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002bc4 <motor_init+0x94>
 8002b7a:	eeb0 1a66 	vmov.f32	s2, s13
 8002b7e:	eef0 0a47 	vmov.f32	s1, s14
 8002b82:	eeb0 0a67 	vmov.f32	s0, s15
 8002b86:	4810      	ldr	r0, [pc, #64]	; (8002bc8 <motor_init+0x98>)
 8002b88:	f000 fca0 	bl	80034cc <pid_init>
	pid_init(&pidDist, Kp_dist, Ki_dist, Kd_dist);
 8002b8c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002bcc <motor_init+0x9c>
 8002b90:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002bd0 <motor_init+0xa0>
 8002b94:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002bd4 <motor_init+0xa4>
 8002b98:	eeb0 1a66 	vmov.f32	s2, s13
 8002b9c:	eef0 0a47 	vmov.f32	s1, s14
 8002ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba4:	480c      	ldr	r0, [pc, #48]	; (8002bd8 <motor_init+0xa8>)
 8002ba6:	f000 fc91 	bl	80034cc <pid_init>
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000488 	.word	0x20000488
 8002bb8:	2000048c 	.word	0x2000048c
 8002bbc:	20000490 	.word	0x20000490
 8002bc0:	3cf5c28f 	.word	0x3cf5c28f
 8002bc4:	3ca3d70a 	.word	0x3ca3d70a
 8002bc8:	2000049c 	.word	0x2000049c
 8002bcc:	3ef0a3d7 	.word	0x3ef0a3d7
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	3d4ccccd 	.word	0x3d4ccccd
 8002bd8:	200004b0 	.word	0x200004b0

08002bdc <timer_reset>:

static void timer_reset(TIM_HandleTypeDef *htim) {
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <setPwmLR>:

static void setPwmLR() {
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
	//set L, R channels.
	__HAL_TIM_SetCompare(motor_pwm_tim, L_CHANNEL,
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <setPwmLR+0x40>)
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	f241 7270 	movw	r2, #6000	; 0x1770
 8002c04:	4293      	cmp	r3, r2
 8002c06:	bf28      	it	cs
 8002c08:	4613      	movcs	r3, r2
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <setPwmLR+0x44>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34
		lPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: lPwmVal);
	__HAL_TIM_SetCompare(motor_pwm_tim, R_CHANNEL,
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <setPwmLR+0x48>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f241 7270 	movw	r2, #6000	; 0x1770
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bf28      	it	cs
 8002c20:	4613      	movcs	r3, r2
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <setPwmLR+0x44>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	639a      	str	r2, [r3, #56]	; 0x38
		rPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: rPwmVal);
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000498 	.word	0x20000498
 8002c3c:	20000488 	.word	0x20000488
 8002c40:	2000049a 	.word	0x2000049a

08002c44 <resetPwmParams>:

static void resetPwmParams() {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
	pid_reset(&pidMatch);
 8002c48:	4803      	ldr	r0, [pc, #12]	; (8002c58 <resetPwmParams+0x14>)
 8002c4a:	f000 fc2d 	bl	80034a8 <pid_reset>
	pid_reset(&pidDist);
 8002c4e:	4803      	ldr	r0, [pc, #12]	; (8002c5c <resetPwmParams+0x18>)
 8002c50:	f000 fc2a 	bl	80034a8 <pid_reset>
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	2000049c 	.word	0x2000049c
 8002c5c:	200004b0 	.word	0x200004b0

08002c60 <resetEncoders>:

static void resetEncoders() {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
	timer_reset(l_enc_tim);
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <resetEncoders+0x1c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ffb7 	bl	8002bdc <timer_reset>
	timer_reset(r_enc_tim);
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <resetEncoders+0x20>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ffb2 	bl	8002bdc <timer_reset>
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	2000048c 	.word	0x2000048c
 8002c80:	20000490 	.word	0x20000490

08002c84 <motor_getDist>:

float motor_getDist() {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
	uint32_t lCounter = __HAL_TIM_GET_COUNTER(l_enc_tim),
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <motor_getDist+0x68>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	60bb      	str	r3, [r7, #8]
			rCounter = __HAL_TIM_GET_COUNTER(r_enc_tim);
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <motor_getDist+0x6c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	607b      	str	r3, [r7, #4]
	int16_t lCount = (int16_t) lCounter,
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	81fb      	strh	r3, [r7, #14]
			rCount = (int16_t) rCounter;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	81bb      	strh	r3, [r7, #12]
	if (lCount < 0) lCount = -lCount;
 8002ca6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	da03      	bge.n	8002cb6 <motor_getDist+0x32>
 8002cae:	89fb      	ldrh	r3, [r7, #14]
 8002cb0:	425b      	negs	r3, r3
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	81fb      	strh	r3, [r7, #14]
	if (rCount < 0) rCount = -rCount;
 8002cb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	da03      	bge.n	8002cc6 <motor_getDist+0x42>
 8002cbe:	89bb      	ldrh	r3, [r7, #12]
 8002cc0:	425b      	negs	r3, r3
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	81bb      	strh	r3, [r7, #12]

	uint16_t pulses = ((uint16_t) lCount) + ((uint16_t) rCount);
 8002cc6:	89fa      	ldrh	r2, [r7, #14]
 8002cc8:	89bb      	ldrh	r3, [r7, #12]
 8002cca:	4413      	add	r3, r2
 8002ccc:	807b      	strh	r3, [r7, #2]
	pulses >>= 2;
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	807b      	strh	r3, [r7, #2]

	return get_distance_cm(pulses);
 8002cd4:	887b      	ldrh	r3, [r7, #2]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe ffde 	bl	8001c98 <get_distance_cm>
 8002cdc:	eef0 7a40 	vmov.f32	s15, s0
}
 8002ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	2000048c 	.word	0x2000048c
 8002cf0:	20000490 	.word	0x20000490

08002cf4 <motor_pwmCorrection>:

//PWM at fixed intervals.
void motor_pwmCorrection(int8_t dir, float wDiff, float rBack, float rRobot, float distDiff, float brakingDist) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	ed87 0a04 	vstr	s0, [r7, #16]
 8002d00:	edc7 0a03 	vstr	s1, [r7, #12]
 8002d04:	ed87 1a02 	vstr	s2, [r7, #8]
 8002d08:	edc7 1a01 	vstr	s3, [r7, #4]
 8002d0c:	ed87 2a00 	vstr	s4, [r7]
 8002d10:	75fb      	strb	r3, [r7, #23]
	//adjust speed based on distance to drive.
	if (distDiff < brakingDist) {
 8002d12:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d16:	edd7 7a00 	vldr	s15, [r7]
 8002d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d22:	d51f      	bpl.n	8002d64 <motor_pwmCorrection+0x70>
		pwmValAccel = MOTOR_PWM_MIN + pid_adjust(&pidDist, distDiff) / brakingDist * (pwmValTarget - MOTOR_PWM_MIN);
 8002d24:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d28:	4870      	ldr	r0, [pc, #448]	; (8002eec <motor_pwmCorrection+0x1f8>)
 8002d2a:	f000 fbe9 	bl	8003500 <pid_adjust>
 8002d2e:	eef0 6a40 	vmov.f32	s13, s0
 8002d32:	edd7 7a00 	vldr	s15, [r7]
 8002d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ef0 <motor_pwmCorrection+0x1fc>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	3bfa      	subs	r3, #250	; 0xfa
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002ef4 <motor_pwmCorrection+0x200>
 8002d50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d58:	ee17 3a90 	vmov	r3, s15
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <motor_pwmCorrection+0x204>)
 8002d60:	801a      	strh	r2, [r3, #0]
 8002d62:	e00b      	b.n	8002d7c <motor_pwmCorrection+0x88>
	} else if (pwmValAccel < pwmValTarget) pwmValAccel += MOTOR_PWM_ACCEL;
 8002d64:	4b64      	ldr	r3, [pc, #400]	; (8002ef8 <motor_pwmCorrection+0x204>)
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <motor_pwmCorrection+0x1fc>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d205      	bcs.n	8002d7c <motor_pwmCorrection+0x88>
 8002d70:	4b61      	ldr	r3, [pc, #388]	; (8002ef8 <motor_pwmCorrection+0x204>)
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	330f      	adds	r3, #15
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	4b5f      	ldr	r3, [pc, #380]	; (8002ef8 <motor_pwmCorrection+0x204>)
 8002d7a:	801a      	strh	r2, [r3, #0]
	if (pwmValAccel > pwmValTarget) pwmValAccel = pwmValTarget;
 8002d7c:	4b5e      	ldr	r3, [pc, #376]	; (8002ef8 <motor_pwmCorrection+0x204>)
 8002d7e:	881a      	ldrh	r2, [r3, #0]
 8002d80:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <motor_pwmCorrection+0x1fc>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d903      	bls.n	8002d90 <motor_pwmCorrection+0x9c>
 8002d88:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <motor_pwmCorrection+0x1fc>)
 8002d8a:	881a      	ldrh	r2, [r3, #0]
 8002d8c:	4b5a      	ldr	r3, [pc, #360]	; (8002ef8 <motor_pwmCorrection+0x204>)
 8002d8e:	801a      	strh	r2, [r3, #0]

	float offset = pid_adjust(&pidMatch, wDiff) * pwmValAccel / pwmValTarget;
 8002d90:	ed97 0a04 	vldr	s0, [r7, #16]
 8002d94:	4859      	ldr	r0, [pc, #356]	; (8002efc <motor_pwmCorrection+0x208>)
 8002d96:	f000 fbb3 	bl	8003500 <pid_adjust>
 8002d9a:	eeb0 7a40 	vmov.f32	s14, s0
 8002d9e:	4b56      	ldr	r3, [pc, #344]	; (8002ef8 <motor_pwmCorrection+0x204>)
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	ee07 3a90 	vmov	s15, r3
 8002da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002daa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002dae:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <motor_pwmCorrection+0x1fc>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dbe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//	float offset = 0;
	float lScale = 1, rScale = 1;
 8002dc2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002dcc:	61fb      	str	r3, [r7, #28]

	if (rBack != 0 && rRobot != 0) {
 8002dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dda:	d04d      	beq.n	8002e78 <motor_pwmCorrection+0x184>
 8002ddc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002de0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de8:	d046      	beq.n	8002e78 <motor_pwmCorrection+0x184>
		float B2 = WHEELBASE_CM / 2;
 8002dea:	4b45      	ldr	r3, [pc, #276]	; (8002f00 <motor_pwmCorrection+0x20c>)
 8002dec:	61bb      	str	r3, [r7, #24]

		if (rBack < 0 && rRobot < 0) {
 8002dee:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfa:	d525      	bpl.n	8002e48 <motor_pwmCorrection+0x154>
 8002dfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e08:	d51e      	bpl.n	8002e48 <motor_pwmCorrection+0x154>
			lScale = (-rBack - B2) / -rRobot;
 8002e0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e0e:	eeb1 7a67 	vneg.f32	s14, s15
 8002e12:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1a:	eef1 6a67 	vneg.f32	s13, s15
 8002e1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e26:	edc7 7a08 	vstr	s15, [r7, #32]
			rScale = (-rBack + B2) / -rRobot;
 8002e2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e36:	eef1 6a67 	vneg.f32	s13, s15
 8002e3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e42:	edc7 7a07 	vstr	s15, [r7, #28]
 8002e46:	e017      	b.n	8002e78 <motor_pwmCorrection+0x184>
		} else {
			lScale = (rBack + B2) / rRobot;
 8002e48:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e50:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002e54:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e5c:	edc7 7a08 	vstr	s15, [r7, #32]
			rScale = (rBack - B2) / rRobot;
 8002e60:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e64:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002e6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e74:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}

	if (dir < 0) {
 8002e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da05      	bge.n	8002e8c <motor_pwmCorrection+0x198>
		offset = -offset;
 8002e80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e84:	eef1 7a67 	vneg.f32	s15, s15
 8002e88:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	lPwmVal = pwmValAccel * lScale - offset;
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <motor_pwmCorrection+0x204>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e98:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ea0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eac:	ee17 3a90 	vmov	r3, s15
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <motor_pwmCorrection+0x210>)
 8002eb4:	801a      	strh	r2, [r3, #0]
	rPwmVal = pwmValAccel * rScale + offset;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <motor_pwmCorrection+0x204>)
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed6:	ee17 3a90 	vmov	r3, s15
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <motor_pwmCorrection+0x214>)
 8002ede:	801a      	strh	r2, [r3, #0]

	setPwmLR();
 8002ee0:	f7ff fe8a 	bl	8002bf8 <setPwmLR>
}
 8002ee4:	bf00      	nop
 8002ee6:	3728      	adds	r7, #40	; 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200004b0 	.word	0x200004b0
 8002ef0:	20000496 	.word	0x20000496
 8002ef4:	437a0000 	.word	0x437a0000
 8002ef8:	20000494 	.word	0x20000494
 8002efc:	2000049c 	.word	0x2000049c
 8002f00:	4101999a 	.word	0x4101999a
 8002f04:	20000498 	.word	0x20000498
 8002f08:	2000049a 	.word	0x2000049a

08002f0c <setDriveDir>:

static void setDriveDir(int8_t dir) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
	if (dir > 0) {
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	dd14      	ble.n	8002f48 <setDriveDir+0x3c>
		//forward.
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_SET);
 8002f1e:	2201      	movs	r2, #1
 8002f20:	2108      	movs	r1, #8
 8002f22:	4822      	ldr	r0, [pc, #136]	; (8002fac <setDriveDir+0xa0>)
 8002f24:	f001 fcf2 	bl	800490c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	481f      	ldr	r0, [pc, #124]	; (8002fac <setDriveDir+0xa0>)
 8002f2e:	f001 fced 	bl	800490c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_SET);
 8002f32:	2201      	movs	r2, #1
 8002f34:	2110      	movs	r1, #16
 8002f36:	481d      	ldr	r0, [pc, #116]	; (8002fac <setDriveDir+0xa0>)
 8002f38:	f001 fce8 	bl	800490c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2120      	movs	r1, #32
 8002f40:	481a      	ldr	r0, [pc, #104]	; (8002fac <setDriveDir+0xa0>)
 8002f42:	f001 fce3 	bl	800490c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
	}
}
 8002f46:	e02c      	b.n	8002fa2 <setDriveDir+0x96>
	} else if (dir < 0) {
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	da14      	bge.n	8002f7a <setDriveDir+0x6e>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2108      	movs	r1, #8
 8002f54:	4815      	ldr	r0, [pc, #84]	; (8002fac <setDriveDir+0xa0>)
 8002f56:	f001 fcd9 	bl	800490c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_SET);
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	2104      	movs	r1, #4
 8002f5e:	4813      	ldr	r0, [pc, #76]	; (8002fac <setDriveDir+0xa0>)
 8002f60:	f001 fcd4 	bl	800490c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
 8002f64:	2200      	movs	r2, #0
 8002f66:	2110      	movs	r1, #16
 8002f68:	4810      	ldr	r0, [pc, #64]	; (8002fac <setDriveDir+0xa0>)
 8002f6a:	f001 fccf 	bl	800490c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_SET);
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2120      	movs	r1, #32
 8002f72:	480e      	ldr	r0, [pc, #56]	; (8002fac <setDriveDir+0xa0>)
 8002f74:	f001 fcca 	bl	800490c <HAL_GPIO_WritePin>
}
 8002f78:	e013      	b.n	8002fa2 <setDriveDir+0x96>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2108      	movs	r1, #8
 8002f7e:	480b      	ldr	r0, [pc, #44]	; (8002fac <setDriveDir+0xa0>)
 8002f80:	f001 fcc4 	bl	800490c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
 8002f84:	2200      	movs	r2, #0
 8002f86:	2104      	movs	r1, #4
 8002f88:	4808      	ldr	r0, [pc, #32]	; (8002fac <setDriveDir+0xa0>)
 8002f8a:	f001 fcbf 	bl	800490c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2110      	movs	r1, #16
 8002f92:	4806      	ldr	r0, [pc, #24]	; (8002fac <setDriveDir+0xa0>)
 8002f94:	f001 fcba 	bl	800490c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2120      	movs	r1, #32
 8002f9c:	4803      	ldr	r0, [pc, #12]	; (8002fac <setDriveDir+0xa0>)
 8002f9e:	f001 fcb5 	bl	800490c <HAL_GPIO_WritePin>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40020000 	.word	0x40020000

08002fb0 <motor_setDrive>:

//speed: 0 - 100
void motor_setDrive(int8_t dir, uint8_t speed) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	460a      	mov	r2, r1
 8002fba:	71fb      	strb	r3, [r7, #7]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	71bb      	strb	r3, [r7, #6]
	if (dir == 0) {
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <motor_setDrive+0x20>
		setDriveDir(0);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7ff ff9f 	bl	8002f0c <setDriveDir>
		return;
 8002fce:	e02d      	b.n	800302c <motor_setDrive+0x7c>
	}

	//derive PWM value.
	pwmValTarget = MOTOR_PWM_MAX / 100 * speed;
 8002fd0:	79bb      	ldrb	r3, [r7, #6]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <motor_setDrive+0x84>)
 8002fe0:	801a      	strh	r2, [r3, #0]
	if (pwmValTarget > 0) pwmValTarget--;
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <motor_setDrive+0x84>)
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <motor_setDrive+0x46>
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <motor_setDrive+0x84>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <motor_setDrive+0x84>)
 8002ff4:	801a      	strh	r2, [r3, #0]

	pwmValAccel = speed > 0
 8002ff6:	79bb      	ldrb	r3, [r7, #6]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <motor_setDrive+0x50>
 8002ffc:	22fa      	movs	r2, #250	; 0xfa
 8002ffe:	e000      	b.n	8003002 <motor_setDrive+0x52>
 8003000:	2200      	movs	r2, #0
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <motor_setDrive+0x88>)
 8003004:	801a      	strh	r2, [r3, #0]
		? MOTOR_PWM_MIN
		: 0;
	lPwmVal = rPwmVal = pwmValAccel;
 8003006:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <motor_setDrive+0x88>)
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <motor_setDrive+0x8c>)
 800300c:	801a      	strh	r2, [r3, #0]
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <motor_setDrive+0x8c>)
 8003010:	881a      	ldrh	r2, [r3, #0]
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <motor_setDrive+0x90>)
 8003014:	801a      	strh	r2, [r3, #0]

	//reset.
	resetEncoders();
 8003016:	f7ff fe23 	bl	8002c60 <resetEncoders>
	resetPwmParams();
 800301a:	f7ff fe13 	bl	8002c44 <resetPwmParams>

	setDriveDir(dir);
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ff72 	bl	8002f0c <setDriveDir>
	setPwmLR();
 8003028:	f7ff fde6 	bl	8002bf8 <setPwmLR>
}
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000496 	.word	0x20000496
 8003038:	20000494 	.word	0x20000494
 800303c:	2000049a 	.word	0x2000049a
 8003040:	20000498 	.word	0x20000498

08003044 <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	460a      	mov	r2, r1
 800304e:	71fb      	strb	r3, [r7, #7]
 8003050:	4613      	mov	r3, r2
 8003052:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 8003054:	79bb      	ldrb	r3, [r7, #6]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d106      	bne.n	8003068 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 800305a:	2201      	movs	r2, #1
 800305c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003060:	481c      	ldr	r0, [pc, #112]	; (80030d4 <OLED_WR_Byte+0x90>)
 8003062:	f001 fc53 	bl	800490c <HAL_GPIO_WritePin>
 8003066:	e005      	b.n	8003074 <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 8003068:	2200      	movs	r2, #0
 800306a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800306e:	4819      	ldr	r0, [pc, #100]	; (80030d4 <OLED_WR_Byte+0x90>)
 8003070:	f001 fc4c 	bl	800490c <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e01f      	b.n	80030ba <OLED_WR_Byte+0x76>
	{ // Complete the code below
		OLED_SCLK_Clr();
 800307a:	2200      	movs	r2, #0
 800307c:	2120      	movs	r1, #32
 800307e:	4815      	ldr	r0, [pc, #84]	; (80030d4 <OLED_WR_Byte+0x90>)
 8003080:	f001 fc44 	bl	800490c <HAL_GPIO_WritePin>
		if (dat & (0x80 >> i)) OLED_SDIN_Set();
 8003084:	79fa      	ldrb	r2, [r7, #7]
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	fa41 f303 	asr.w	r3, r1, r3
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <OLED_WR_Byte+0x5c>
 8003094:	2201      	movs	r2, #1
 8003096:	2140      	movs	r1, #64	; 0x40
 8003098:	480e      	ldr	r0, [pc, #56]	; (80030d4 <OLED_WR_Byte+0x90>)
 800309a:	f001 fc37 	bl	800490c <HAL_GPIO_WritePin>
 800309e:	e004      	b.n	80030aa <OLED_WR_Byte+0x66>
		else OLED_SDIN_Clr();
 80030a0:	2200      	movs	r2, #0
 80030a2:	2140      	movs	r1, #64	; 0x40
 80030a4:	480b      	ldr	r0, [pc, #44]	; (80030d4 <OLED_WR_Byte+0x90>)
 80030a6:	f001 fc31 	bl	800490c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80030aa:	2201      	movs	r2, #1
 80030ac:	2120      	movs	r1, #32
 80030ae:	4809      	ldr	r0, [pc, #36]	; (80030d4 <OLED_WR_Byte+0x90>)
 80030b0:	f001 fc2c 	bl	800490c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	3301      	adds	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b07      	cmp	r3, #7
 80030be:	d9dc      	bls.n	800307a <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 80030c0:	2201      	movs	r2, #1
 80030c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030c6:	4803      	ldr	r0, [pc, #12]	; (80030d4 <OLED_WR_Byte+0x90>)
 80030c8:	f001 fc20 	bl	800490c <HAL_GPIO_WritePin>
} 
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000

080030d8 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 80030de:	2300      	movs	r3, #0
 80030e0:	71fb      	strb	r3, [r7, #7]
 80030e2:	e026      	b.n	8003132 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	3b50      	subs	r3, #80	; 0x50
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ffa9 	bl	8003044 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 80030f2:	2100      	movs	r1, #0
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7ff ffa5 	bl	8003044 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 80030fa:	2100      	movs	r1, #0
 80030fc:	2010      	movs	r0, #16
 80030fe:	f7ff ffa1 	bl	8003044 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8003102:	2300      	movs	r3, #0
 8003104:	71bb      	strb	r3, [r7, #6]
 8003106:	e00d      	b.n	8003124 <OLED_Refresh_Gram+0x4c>
 8003108:	79ba      	ldrb	r2, [r7, #6]
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	490d      	ldr	r1, [pc, #52]	; (8003144 <OLED_Refresh_Gram+0x6c>)
 800310e:	00d2      	lsls	r2, r2, #3
 8003110:	440a      	add	r2, r1
 8003112:	4413      	add	r3, r2
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2101      	movs	r1, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff93 	bl	8003044 <OLED_WR_Byte>
 800311e:	79bb      	ldrb	r3, [r7, #6]
 8003120:	3301      	adds	r3, #1
 8003122:	71bb      	strb	r3, [r7, #6]
 8003124:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003128:	2b00      	cmp	r3, #0
 800312a:	daed      	bge.n	8003108 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	3301      	adds	r3, #1
 8003130:	71fb      	strb	r3, [r7, #7]
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	2b07      	cmp	r3, #7
 8003136:	d9d5      	bls.n	80030e4 <OLED_Refresh_Gram+0xc>
	}
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200004c4 	.word	0x200004c4

08003148 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800314e:	2300      	movs	r3, #0
 8003150:	71fb      	strb	r3, [r7, #7]
 8003152:	e014      	b.n	800317e <OLED_Clear+0x36>
 8003154:	2300      	movs	r3, #0
 8003156:	71bb      	strb	r3, [r7, #6]
 8003158:	e00a      	b.n	8003170 <OLED_Clear+0x28>
 800315a:	79ba      	ldrb	r2, [r7, #6]
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	490c      	ldr	r1, [pc, #48]	; (8003190 <OLED_Clear+0x48>)
 8003160:	00d2      	lsls	r2, r2, #3
 8003162:	440a      	add	r2, r1
 8003164:	4413      	add	r3, r2
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	79bb      	ldrb	r3, [r7, #6]
 800316c:	3301      	adds	r3, #1
 800316e:	71bb      	strb	r3, [r7, #6]
 8003170:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003174:	2b00      	cmp	r3, #0
 8003176:	daf0      	bge.n	800315a <OLED_Clear+0x12>
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	3301      	adds	r3, #1
 800317c:	71fb      	strb	r3, [r7, #7]
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b07      	cmp	r3, #7
 8003182:	d9e7      	bls.n	8003154 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003184:	f7ff ffa8 	bl	80030d8 <OLED_Refresh_Gram>
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	200004c4 	.word	0x200004c4

08003194 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
 800319e:	460b      	mov	r3, r1
 80031a0:	71bb      	strb	r3, [r7, #6]
 80031a2:	4613      	mov	r3, r2
 80031a4:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	db41      	blt.n	8003236 <OLED_DrawPoint+0xa2>
 80031b2:	79bb      	ldrb	r3, [r7, #6]
 80031b4:	2b3f      	cmp	r3, #63	; 0x3f
 80031b6:	d83e      	bhi.n	8003236 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80031b8:	79bb      	ldrb	r3, [r7, #6]
 80031ba:	08db      	lsrs	r3, r3, #3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f1c3 0307 	rsb	r3, r3, #7
 80031c2:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80031c4:	79bb      	ldrb	r3, [r7, #6]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80031cc:	7b7b      	ldrb	r3, [r7, #13]
 80031ce:	f1c3 0307 	rsb	r3, r3, #7
 80031d2:	2201      	movs	r2, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80031da:	797b      	ldrb	r3, [r7, #5]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d012      	beq.n	8003206 <OLED_DrawPoint+0x72>
 80031e0:	79fa      	ldrb	r2, [r7, #7]
 80031e2:	7bbb      	ldrb	r3, [r7, #14]
 80031e4:	4917      	ldr	r1, [pc, #92]	; (8003244 <OLED_DrawPoint+0xb0>)
 80031e6:	00d2      	lsls	r2, r2, #3
 80031e8:	440a      	add	r2, r1
 80031ea:	4413      	add	r3, r2
 80031ec:	7818      	ldrb	r0, [r3, #0]
 80031ee:	79fa      	ldrb	r2, [r7, #7]
 80031f0:	7bbb      	ldrb	r3, [r7, #14]
 80031f2:	7bf9      	ldrb	r1, [r7, #15]
 80031f4:	4301      	orrs	r1, r0
 80031f6:	b2c8      	uxtb	r0, r1
 80031f8:	4912      	ldr	r1, [pc, #72]	; (8003244 <OLED_DrawPoint+0xb0>)
 80031fa:	00d2      	lsls	r2, r2, #3
 80031fc:	440a      	add	r2, r1
 80031fe:	4413      	add	r3, r2
 8003200:	4602      	mov	r2, r0
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	e018      	b.n	8003238 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003206:	79fa      	ldrb	r2, [r7, #7]
 8003208:	7bbb      	ldrb	r3, [r7, #14]
 800320a:	490e      	ldr	r1, [pc, #56]	; (8003244 <OLED_DrawPoint+0xb0>)
 800320c:	00d2      	lsls	r2, r2, #3
 800320e:	440a      	add	r2, r1
 8003210:	4413      	add	r3, r2
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b25a      	sxtb	r2, r3
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321a:	43db      	mvns	r3, r3
 800321c:	b25b      	sxtb	r3, r3
 800321e:	4013      	ands	r3, r2
 8003220:	b259      	sxtb	r1, r3
 8003222:	79fa      	ldrb	r2, [r7, #7]
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	b2c8      	uxtb	r0, r1
 8003228:	4906      	ldr	r1, [pc, #24]	; (8003244 <OLED_DrawPoint+0xb0>)
 800322a:	00d2      	lsls	r2, r2, #3
 800322c:	440a      	add	r2, r1
 800322e:	4413      	add	r3, r2
 8003230:	4602      	mov	r2, r0
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e000      	b.n	8003238 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003236:	bf00      	nop
}
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	200004c4 	.word	0x200004c4

08003248 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	4604      	mov	r4, r0
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	4623      	mov	r3, r4
 8003258:	71fb      	strb	r3, [r7, #7]
 800325a:	4603      	mov	r3, r0
 800325c:	71bb      	strb	r3, [r7, #6]
 800325e:	460b      	mov	r3, r1
 8003260:	717b      	strb	r3, [r7, #5]
 8003262:	4613      	mov	r3, r2
 8003264:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8003266:	79bb      	ldrb	r3, [r7, #6]
 8003268:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800326a:	797b      	ldrb	r3, [r7, #5]
 800326c:	3b20      	subs	r3, #32
 800326e:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003270:	2300      	movs	r3, #0
 8003272:	73bb      	strb	r3, [r7, #14]
 8003274:	e04d      	b.n	8003312 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8003276:	793b      	ldrb	r3, [r7, #4]
 8003278:	2b0c      	cmp	r3, #12
 800327a:	d10b      	bne.n	8003294 <OLED_ShowChar+0x4c>
 800327c:	797a      	ldrb	r2, [r7, #5]
 800327e:	7bb9      	ldrb	r1, [r7, #14]
 8003280:	4828      	ldr	r0, [pc, #160]	; (8003324 <OLED_ShowChar+0xdc>)
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4403      	add	r3, r0
 800328c:	440b      	add	r3, r1
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	e007      	b.n	80032a4 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003294:	797a      	ldrb	r2, [r7, #5]
 8003296:	7bbb      	ldrb	r3, [r7, #14]
 8003298:	4923      	ldr	r1, [pc, #140]	; (8003328 <OLED_ShowChar+0xe0>)
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	440a      	add	r2, r1
 800329e:	4413      	add	r3, r2
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	737b      	strb	r3, [r7, #13]
 80032a8:	e02d      	b.n	8003306 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80032aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	da07      	bge.n	80032c2 <OLED_ShowChar+0x7a>
 80032b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032b6:	79b9      	ldrb	r1, [r7, #6]
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff6a 	bl	8003194 <OLED_DrawPoint>
 80032c0:	e00c      	b.n	80032dc <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80032c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bf0c      	ite	eq
 80032ca:	2301      	moveq	r3, #1
 80032cc:	2300      	movne	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	79b9      	ldrb	r1, [r7, #6]
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ff5c 	bl	8003194 <OLED_DrawPoint>
			temp<<=1;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
			y++;
 80032e2:	79bb      	ldrb	r3, [r7, #6]
 80032e4:	3301      	adds	r3, #1
 80032e6:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80032e8:	79ba      	ldrb	r2, [r7, #6]
 80032ea:	7b3b      	ldrb	r3, [r7, #12]
 80032ec:	1ad2      	subs	r2, r2, r3
 80032ee:	793b      	ldrb	r3, [r7, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d105      	bne.n	8003300 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80032f4:	7b3b      	ldrb	r3, [r7, #12]
 80032f6:	71bb      	strb	r3, [r7, #6]
				x++;
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	3301      	adds	r3, #1
 80032fc:	71fb      	strb	r3, [r7, #7]
				break;
 80032fe:	e005      	b.n	800330c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8003300:	7b7b      	ldrb	r3, [r7, #13]
 8003302:	3301      	adds	r3, #1
 8003304:	737b      	strb	r3, [r7, #13]
 8003306:	7b7b      	ldrb	r3, [r7, #13]
 8003308:	2b07      	cmp	r3, #7
 800330a:	d9ce      	bls.n	80032aa <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800330c:	7bbb      	ldrb	r3, [r7, #14]
 800330e:	3301      	adds	r3, #1
 8003310:	73bb      	strb	r3, [r7, #14]
 8003312:	7bba      	ldrb	r2, [r7, #14]
 8003314:	793b      	ldrb	r3, [r7, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d3ad      	bcc.n	8003276 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800331a:	bf00      	nop
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	bd90      	pop	{r4, r7, pc}
 8003324:	0800ecb8 	.word	0x0800ecb8
 8003328:	0800f12c 	.word	0x0800f12c

0800332c <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af02      	add	r7, sp, #8
 8003332:	4603      	mov	r3, r0
 8003334:	603a      	str	r2, [r7, #0]
 8003336:	71fb      	strb	r3, [r7, #7]
 8003338:	460b      	mov	r3, r1
 800333a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800333c:	e01f      	b.n	800337e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	2b7a      	cmp	r3, #122	; 0x7a
 8003342:	d904      	bls.n	800334e <OLED_ShowString+0x22>
 8003344:	2300      	movs	r3, #0
 8003346:	71fb      	strb	r3, [r7, #7]
 8003348:	79bb      	ldrb	r3, [r7, #6]
 800334a:	3310      	adds	r3, #16
 800334c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800334e:	79bb      	ldrb	r3, [r7, #6]
 8003350:	2b3a      	cmp	r3, #58	; 0x3a
 8003352:	d905      	bls.n	8003360 <OLED_ShowString+0x34>
 8003354:	2300      	movs	r3, #0
 8003356:	71fb      	strb	r3, [r7, #7]
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	71bb      	strb	r3, [r7, #6]
 800335c:	f7ff fef4 	bl	8003148 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	79b9      	ldrb	r1, [r7, #6]
 8003366:	79f8      	ldrb	r0, [r7, #7]
 8003368:	2301      	movs	r3, #1
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	230c      	movs	r3, #12
 800336e:	f7ff ff6b 	bl	8003248 <OLED_ShowChar>
        x+=8;
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	3308      	adds	r3, #8
 8003376:	71fb      	strb	r3, [r7, #7]
        p++;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	3301      	adds	r3, #1
 800337c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1db      	bne.n	800333e <OLED_ShowString+0x12>
    }  
}	 
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <OLED_Init>:

void OLED_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003394:	f002 faf8 	bl	8005988 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003398:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <OLED_Init+0x110>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4a40      	ldr	r2, [pc, #256]	; (80034a0 <OLED_Init+0x110>)
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	6713      	str	r3, [r2, #112]	; 0x70
 80033a4:	4b3e      	ldr	r3, [pc, #248]	; (80034a0 <OLED_Init+0x110>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a3d      	ldr	r2, [pc, #244]	; (80034a0 <OLED_Init+0x110>)
 80033aa:	f023 0304 	bic.w	r3, r3, #4
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80033b0:	f002 fafe 	bl	80059b0 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	483a      	ldr	r0, [pc, #232]	; (80034a4 <OLED_Init+0x114>)
 80033ba:	f001 faa7 	bl	800490c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80033be:	2064      	movs	r0, #100	; 0x64
 80033c0:	f000 ff28 	bl	8004214 <HAL_Delay>
	OLED_RST_Set();
 80033c4:	2201      	movs	r2, #1
 80033c6:	2180      	movs	r1, #128	; 0x80
 80033c8:	4836      	ldr	r0, [pc, #216]	; (80034a4 <OLED_Init+0x114>)
 80033ca:	f001 fa9f 	bl	800490c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80033ce:	2100      	movs	r1, #0
 80033d0:	20ae      	movs	r0, #174	; 0xae
 80033d2:	f7ff fe37 	bl	8003044 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80033d6:	2100      	movs	r1, #0
 80033d8:	20d5      	movs	r0, #213	; 0xd5
 80033da:	f7ff fe33 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80033de:	2100      	movs	r1, #0
 80033e0:	2050      	movs	r0, #80	; 0x50
 80033e2:	f7ff fe2f 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80033e6:	2100      	movs	r1, #0
 80033e8:	20a8      	movs	r0, #168	; 0xa8
 80033ea:	f7ff fe2b 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80033ee:	2100      	movs	r1, #0
 80033f0:	203f      	movs	r0, #63	; 0x3f
 80033f2:	f7ff fe27 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80033f6:	2100      	movs	r1, #0
 80033f8:	20d3      	movs	r0, #211	; 0xd3
 80033fa:	f7ff fe23 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80033fe:	2100      	movs	r1, #0
 8003400:	2000      	movs	r0, #0
 8003402:	f7ff fe1f 	bl	8003044 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003406:	2100      	movs	r1, #0
 8003408:	2040      	movs	r0, #64	; 0x40
 800340a:	f7ff fe1b 	bl	8003044 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800340e:	2100      	movs	r1, #0
 8003410:	208d      	movs	r0, #141	; 0x8d
 8003412:	f7ff fe17 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003416:	2100      	movs	r1, #0
 8003418:	2014      	movs	r0, #20
 800341a:	f7ff fe13 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800341e:	2100      	movs	r1, #0
 8003420:	2020      	movs	r0, #32
 8003422:	f7ff fe0f 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003426:	2100      	movs	r1, #0
 8003428:	2002      	movs	r0, #2
 800342a:	f7ff fe0b 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800342e:	2100      	movs	r1, #0
 8003430:	20a1      	movs	r0, #161	; 0xa1
 8003432:	f7ff fe07 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003436:	2100      	movs	r1, #0
 8003438:	20c0      	movs	r0, #192	; 0xc0
 800343a:	f7ff fe03 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800343e:	2100      	movs	r1, #0
 8003440:	20da      	movs	r0, #218	; 0xda
 8003442:	f7ff fdff 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003446:	2100      	movs	r1, #0
 8003448:	2012      	movs	r0, #18
 800344a:	f7ff fdfb 	bl	8003044 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800344e:	2100      	movs	r1, #0
 8003450:	2081      	movs	r0, #129	; 0x81
 8003452:	f7ff fdf7 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8003456:	2100      	movs	r1, #0
 8003458:	20ef      	movs	r0, #239	; 0xef
 800345a:	f7ff fdf3 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800345e:	2100      	movs	r1, #0
 8003460:	20d9      	movs	r0, #217	; 0xd9
 8003462:	f7ff fdef 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003466:	2100      	movs	r1, #0
 8003468:	20f1      	movs	r0, #241	; 0xf1
 800346a:	f7ff fdeb 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800346e:	2100      	movs	r1, #0
 8003470:	20db      	movs	r0, #219	; 0xdb
 8003472:	f7ff fde7 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003476:	2100      	movs	r1, #0
 8003478:	2030      	movs	r0, #48	; 0x30
 800347a:	f7ff fde3 	bl	8003044 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800347e:	2100      	movs	r1, #0
 8003480:	20a4      	movs	r0, #164	; 0xa4
 8003482:	f7ff fddf 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8003486:	2100      	movs	r1, #0
 8003488:	20a6      	movs	r0, #166	; 0xa6
 800348a:	f7ff fddb 	bl	8003044 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800348e:	2100      	movs	r1, #0
 8003490:	20af      	movs	r0, #175	; 0xaf
 8003492:	f7ff fdd7 	bl	8003044 <OLED_WR_Byte>
	OLED_Clear(); 
 8003496:	f7ff fe57 	bl	8003148 <OLED_Clear>
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40021000 	.word	0x40021000

080034a8 <pid_reset>:
#include "pid.h"

void pid_reset(PidDef *def) {
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	def->errorArea = 0;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	605a      	str	r2, [r3, #4]
	def->errorOld = 0;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <pid_init>:

void pid_init(PidDef *def, float Kp, float Ki, float Kd) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80034d8:	edc7 0a01 	vstr	s1, [r7, #4]
 80034dc:	ed87 1a00 	vstr	s2, [r7]
	pid_reset(def);
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff ffe1 	bl	80034a8 <pid_reset>

	def->Kp = Kp;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	609a      	str	r2, [r3, #8]
	def->Ki = Ki;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	60da      	str	r2, [r3, #12]
	def->Kd = Kd;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	611a      	str	r2, [r3, #16]
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <pid_adjust>:

float pid_adjust(PidDef *def, float error) {
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	ed87 0a00 	vstr	s0, [r7]
	def->errorArea += error;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003512:	edd7 7a00 	vldr	s15, [r7]
 8003516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	edc3 7a01 	vstr	s15, [r3, #4]
	float errorRate = (error - def->errorOld);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	edd3 7a00 	vldr	s15, [r3]
 8003526:	ed97 7a00 	vldr	s14, [r7]
 800352a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352e:	edc7 7a03 	vstr	s15, [r7, #12]
	def->errorOld = error;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	601a      	str	r2, [r3, #0]

	return error * def->Kp + def->errorArea * def->Ki + errorRate * def->Kd;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	ed93 7a02 	vldr	s14, [r3, #8]
 800353e:	edd7 7a00 	vldr	s15, [r7]
 8003542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	edd3 6a01 	vldr	s13, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	edd3 6a04 	vldr	s13, [r3, #16]
 8003560:	edd7 7a03 	vldr	s15, [r7, #12]
 8003564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003568:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800356c:	eeb0 0a67 	vmov.f32	s0, s15
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <lpf>:
static const float a_heading = 0.65;
static const float a_mag = 0.9;
static float magOld[2];
static float headingRaw, headingOld;

static float lpf(float a, float old, float new) {
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	ed87 0a03 	vstr	s0, [r7, #12]
 8003584:	edc7 0a02 	vstr	s1, [r7, #8]
 8003588:	ed87 1a01 	vstr	s2, [r7, #4]
	return a * old + (1 - a) * new;
 800358c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003590:	edd7 7a02 	vldr	s15, [r7, #8]
 8003594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800359c:	edd7 7a03 	vldr	s15, [r7, #12]
 80035a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80035a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ac:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80035b0:	eeb0 0a67 	vmov.f32	s0, s15
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <sensors_init>:

static I2C_HandleTypeDef *hi2c1_ptr;
static Sensors *sensors_ptr;

void sensors_init(I2C_HandleTypeDef *i2c_ptr, Sensors *sens_ptr) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	hi2c1_ptr = i2c_ptr;
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <sensors_init+0x60>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6013      	str	r3, [r2, #0]
	sensors_ptr = sens_ptr;
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <sensors_init+0x64>)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6013      	str	r3, [r2, #0]

	ICM20948_init(hi2c1_ptr, ICM_I2C_ADDR, GYRO_SENS, ACCEL_SENS);
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <sensors_init+0x60>)
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	2200      	movs	r2, #0
 80035dc:	2300      	movs	r3, #0
 80035de:	2100      	movs	r1, #0
 80035e0:	f7fd fde6 	bl	80011b0 <ICM20948_init>
	ICM20948_readMagnetometer_XY(hi2c1_ptr, magOld); //pre-load magOld values.
 80035e4:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <sensors_init+0x60>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	490f      	ldr	r1, [pc, #60]	; (8003628 <sensors_init+0x68>)
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fd ffc0 	bl	8001570 <ICM20948_readMagnetometer_XY>

	sens_ptr->gyroZ_bias = 0;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	615a      	str	r2, [r3, #20]
	sens_ptr->accel_bias[0] = sens_ptr->accel_bias[1] = sens_ptr->accel_bias[2] = 0;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	621a      	str	r2, [r3, #32]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6a1a      	ldr	r2, [r3, #32]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	61da      	str	r2, [r3, #28]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	619a      	str	r2, [r3, #24]
	sens_ptr->heading_bias = 0;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200008cc 	.word	0x200008cc
 8003624:	200008d0 	.word	0x200008d0
 8003628:	200008c4 	.word	0x200008c4

0800362c <sensors_read_gyroZ>:


void sensors_read_gyroZ() {
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
	float val;
	ICM20948_readGyroscope_Z(hi2c1_ptr, ICM_I2C_ADDR, GYRO_SENS, &val);
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <sensors_read_gyroZ+0x3c>)
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	1d3b      	adds	r3, r7, #4
 800363a:	2100      	movs	r1, #0
 800363c:	f7fd fe3c 	bl	80012b8 <ICM20948_readGyroscope_Z>
	sensors_ptr->gyroZ = (val - sensors_ptr->gyroZ_bias) / 1000; //convert to ms
 8003640:	ed97 7a01 	vldr	s14, [r7, #4]
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <sensors_read_gyroZ+0x40>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	edd3 7a05 	vldr	s15, [r3, #20]
 800364c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <sensors_read_gyroZ+0x40>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003670 <sensors_read_gyroZ+0x44>
 8003658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800365c:	edc3 7a00 	vstr	s15, [r3]
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	200008cc 	.word	0x200008cc
 800366c:	200008d0 	.word	0x200008d0
 8003670:	447a0000 	.word	0x447a0000

08003674 <sensors_read_accel>:


void sensors_read_accel() {
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
	float accel_new[3];
	ICM20948_readAccelerometer_all(hi2c1_ptr, ICM_I2C_ADDR, ACCEL_SENS, accel_new);
 800367a:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <sensors_read_accel+0x6c>)
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	463b      	mov	r3, r7
 8003682:	2100      	movs	r1, #0
 8003684:	f7fd fe98 	bl	80013b8 <ICM20948_readAccelerometer_all>
	for (int i = 0; i < 3; i++) {
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e01f      	b.n	80036ce <sensors_read_accel+0x5a>
//		sensors_ptr->accel[i] = lpf(
//			a_accel,
//			sensors_ptr->accel[i],
//			accel_new[i] - sensors_ptr->accel_bias[i]
//		) * GRAVITY;
		sensors_ptr->accel[i] = (accel_new[i] - sensors_ptr->accel_bias[i]) * GRAVITY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	3310      	adds	r3, #16
 8003694:	443b      	add	r3, r7
 8003696:	3b10      	subs	r3, #16
 8003698:	ed93 7a00 	vldr	s14, [r3]
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <sensors_read_accel+0x70>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3306      	adds	r3, #6
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <sensors_read_accel+0x70>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80036e8 <sensors_read_accel+0x74>
 80036b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	3304      	adds	r3, #4
 80036c4:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++) {
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3301      	adds	r3, #1
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	dddc      	ble.n	800368e <sensors_read_accel+0x1a>
	}
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200008cc 	.word	0x200008cc
 80036e4:	200008d0 	.word	0x200008d0
 80036e8:	3a8089a8 	.word	0x3a8089a8
 80036ec:	00000000 	.word	0x00000000

080036f0 <read_mag_angle>:

static float read_mag_angle() {
 80036f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
	//Calculate angle from X and Y
	float mag[2];
	ICM20948_readMagnetometer_XY(hi2c1_ptr, mag);
 80036f8:	4b3d      	ldr	r3, [pc, #244]	; (80037f0 <read_mag_angle+0x100>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	1d3a      	adds	r2, r7, #4
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f7fd ff35 	bl	8001570 <ICM20948_readMagnetometer_XY>
	for (uint8_t i = 0; i < 2; i++) {
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
 800370a:	e02d      	b.n	8003768 <read_mag_angle+0x78>
		mag[i] = lpf(a_mag, magOld[i], mag[i]);
 800370c:	eddf 6a39 	vldr	s13, [pc, #228]	; 80037f4 <read_mag_angle+0x104>
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	4a39      	ldr	r2, [pc, #228]	; (80037f8 <read_mag_angle+0x108>)
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	edd3 7a00 	vldr	s15, [r3]
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	3310      	adds	r3, #16
 8003722:	443b      	add	r3, r7
 8003724:	3b0c      	subs	r3, #12
 8003726:	ed93 7a00 	vldr	s14, [r3]
 800372a:	7bfe      	ldrb	r6, [r7, #15]
 800372c:	eeb0 1a47 	vmov.f32	s2, s14
 8003730:	eef0 0a67 	vmov.f32	s1, s15
 8003734:	eeb0 0a66 	vmov.f32	s0, s13
 8003738:	f7ff ff1f 	bl	800357a <lpf>
 800373c:	eef0 7a40 	vmov.f32	s15, s0
 8003740:	00b3      	lsls	r3, r6, #2
 8003742:	3310      	adds	r3, #16
 8003744:	443b      	add	r3, r7
 8003746:	3b0c      	subs	r3, #12
 8003748:	edc3 7a00 	vstr	s15, [r3]
		magOld[i] = mag[i];
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	0092      	lsls	r2, r2, #2
 8003752:	3210      	adds	r2, #16
 8003754:	443a      	add	r2, r7
 8003756:	3a0c      	subs	r2, #12
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	4927      	ldr	r1, [pc, #156]	; (80037f8 <read_mag_angle+0x108>)
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 2; i++) {
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	3301      	adds	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d9ce      	bls.n	800370c <read_mag_angle+0x1c>
	}
	magcal_adjust(mag);
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fc05 	bl	8001f80 <magcal_adjust>
	return -atan2(mag[1], mag[0]) * 180 / M_PI;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fc fee5 	bl	8000548 <__aeabi_f2d>
 800377e:	4680      	mov	r8, r0
 8003780:	4689      	mov	r9, r1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fc fedf 	bl	8000548 <__aeabi_f2d>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	ec43 2b11 	vmov	d1, r2, r3
 8003792:	ec49 8b10 	vmov	d0, r8, r9
 8003796:	f009 fc67 	bl	800d068 <atan2>
 800379a:	ec53 2b10 	vmov	r2, r3, d0
 800379e:	4614      	mov	r4, r2
 80037a0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <read_mag_angle+0x10c>)
 80037aa:	4620      	mov	r0, r4
 80037ac:	4629      	mov	r1, r5
 80037ae:	f7fc ff23 	bl	80005f8 <__aeabi_dmul>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	a30b      	add	r3, pc, #44	; (adr r3, 80037e8 <read_mag_angle+0xf8>)
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	f7fd f844 	bl	800084c <__aeabi_ddiv>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4610      	mov	r0, r2
 80037ca:	4619      	mov	r1, r3
 80037cc:	f7fd fa0c 	bl	8000be8 <__aeabi_d2f>
 80037d0:	4603      	mov	r3, r0
 80037d2:	ee07 3a90 	vmov	s15, r3
}
 80037d6:	eeb0 0a67 	vmov.f32	s0, s15
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037e2:	bf00      	nop
 80037e4:	f3af 8000 	nop.w
 80037e8:	54442d18 	.word	0x54442d18
 80037ec:	400921fb 	.word	0x400921fb
 80037f0:	200008cc 	.word	0x200008cc
 80037f4:	3f666666 	.word	0x3f666666
 80037f8:	200008c4 	.word	0x200008c4
 80037fc:	40668000 	.word	0x40668000

08003800 <sensors_set_bias>:

	if (sensors_ptr->heading < -180) sensors_ptr->heading += 360;
	else if (sensors_ptr->heading > 180) sensors_ptr->heading -= 360;
}

void sensors_set_bias(uint16_t count) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	; 0x30
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t j;
	float gyroZTotal = 0, gyroZ = 0,
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	623b      	str	r3, [r7, #32]
		accelTotal[3] = {0}, accel[3],
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	609a      	str	r2, [r3, #8]
		headingTotal = 0;
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < count; i++) {
 8003828:	2300      	movs	r3, #0
 800382a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800382c:	e04b      	b.n	80038c6 <sensors_set_bias+0xc6>
		ICM20948_readGyroscope_Z(hi2c1_ptr, ICM_I2C_ADDR, GYRO_SENS, &gyroZ); //gyroscope bias
 800382e:	4b4c      	ldr	r3, [pc, #304]	; (8003960 <sensors_set_bias+0x160>)
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	f107 0320 	add.w	r3, r7, #32
 8003838:	2100      	movs	r1, #0
 800383a:	f7fd fd3d 	bl	80012b8 <ICM20948_readGyroscope_Z>
		gyroZTotal += gyroZ;
 800383e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003842:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		ICM20948_readAccelerometer_all(hi2c1_ptr, ICM_I2C_ADDR, ACCEL_SENS, accel); //accelerometer bias
 800384e:	4b44      	ldr	r3, [pc, #272]	; (8003960 <sensors_set_bias+0x160>)
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	f107 0308 	add.w	r3, r7, #8
 8003858:	2100      	movs	r1, #0
 800385a:	f7fd fdad 	bl	80013b8 <ICM20948_readAccelerometer_all>
		for (j = 0; j < 3; j++) accelTotal[j] += accel[j];
 800385e:	2300      	movs	r3, #0
 8003860:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003864:	e01e      	b.n	80038a4 <sensors_set_bias+0xa4>
 8003866:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	3330      	adds	r3, #48	; 0x30
 800386e:	443b      	add	r3, r7
 8003870:	3b1c      	subs	r3, #28
 8003872:	ed93 7a00 	vldr	s14, [r3]
 8003876:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	3330      	adds	r3, #48	; 0x30
 800387e:	443b      	add	r3, r7
 8003880:	3b28      	subs	r3, #40	; 0x28
 8003882:	edd3 7a00 	vldr	s15, [r3]
 8003886:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800388a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	3330      	adds	r3, #48	; 0x30
 8003892:	443b      	add	r3, r7
 8003894:	3b1c      	subs	r3, #28
 8003896:	edc3 7a00 	vstr	s15, [r3]
 800389a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800389e:	3301      	adds	r3, #1
 80038a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80038a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d9dc      	bls.n	8003866 <sensors_set_bias+0x66>

		headingTotal += read_mag_angle(); //heading bias
 80038ac:	f7ff ff20 	bl	80036f0 <read_mag_angle>
 80038b0:	eeb0 7a40 	vmov.f32	s14, s0
 80038b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for (i = 0; i < count; i++) {
 80038c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038c2:	3301      	adds	r3, #1
 80038c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80038c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d3af      	bcc.n	800382e <sensors_set_bias+0x2e>
	}

	sensors_ptr->gyroZ_bias = gyroZTotal / count;
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <sensors_set_bias+0x164>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80038e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e4:	edc3 7a05 	vstr	s15, [r3, #20]

	for (i = 0; i < 3; i++) sensors_ptr->accel_bias[i] = accelTotal[i] / count;
 80038e8:	2300      	movs	r3, #0
 80038ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80038ec:	e018      	b.n	8003920 <sensors_set_bias+0x120>
 80038ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	3330      	adds	r3, #48	; 0x30
 80038f4:	443b      	add	r3, r7
 80038f6:	3b1c      	subs	r3, #28
 80038f8:	edd3 6a00 	vldr	s13, [r3]
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003906:	4b17      	ldr	r3, [pc, #92]	; (8003964 <sensors_set_bias+0x164>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800390c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003910:	3306      	adds	r3, #6
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	edc3 7a00 	vstr	s15, [r3]
 800391a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800391c:	3301      	adds	r3, #1
 800391e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003920:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003922:	2b02      	cmp	r3, #2
 8003924:	d9e3      	bls.n	80038ee <sensors_set_bias+0xee>
	sensors_ptr->accel_bias[2] -= GRAVITY; //normally z accelerometer should read gravity.
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <sensors_set_bias+0x164>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	edd3 7a08 	vldr	s15, [r3, #32]
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <sensors_set_bias+0x164>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003968 <sensors_set_bias+0x168>
 8003936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800393a:	edc3 7a08 	vstr	s15, [r3, #32]

	sensors_ptr->heading_bias = headingTotal / count;
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	ee07 3a90 	vmov	s15, r3
 8003944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <sensors_set_bias+0x164>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003954:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8003958:	bf00      	nop
 800395a:	3730      	adds	r7, #48	; 0x30
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200008cc 	.word	0x200008cc
 8003964:	200008d0 	.word	0x200008d0
 8003968:	3a8089a8 	.word	0x3a8089a8

0800396c <servo_init>:
#include "servo.h"

static TIM_HandleTypeDef *pwm_tim;

void servo_init(TIM_HandleTypeDef *pwm) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	pwm_tim = pwm;
 8003974:	4a05      	ldr	r2, [pc, #20]	; (800398c <servo_init+0x20>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm, SERVO_PWM_CHANNEL);
 800397a:	2100      	movs	r1, #0
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f002 fdf5 	bl	800656c <HAL_TIM_PWM_Start>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200008d4 	.word	0x200008d4

08003990 <setServoVal>:

static void setServoVal(uint32_t val) {
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	pwm_tim->Instance->CCR1 = val;
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <setServoVal+0x20>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	200008d4 	.word	0x200008d4

080039b4 <servo_setAngle>:

void servo_setAngle(float angle) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	ed87 0a01 	vstr	s0, [r7, #4]
	//clamp angle to within width.
	if (angle < -SERVO_WIDTH) angle = -SERVO_WIDTH;
 80039be:	edd7 7a01 	vldr	s15, [r7, #4]
 80039c2:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 80039c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ce:	d502      	bpl.n	80039d6 <servo_setAngle+0x22>
 80039d0:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <servo_setAngle+0xa4>)
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	e00a      	b.n	80039ec <servo_setAngle+0x38>
	else if (angle > SERVO_WIDTH) angle = SERVO_WIDTH;
 80039d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80039da:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80039de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e6:	dd01      	ble.n	80039ec <servo_setAngle+0x38>
 80039e8:	4b1c      	ldr	r3, [pc, #112]	; (8003a5c <servo_setAngle+0xa8>)
 80039ea:	607b      	str	r3, [r7, #4]

	uint32_t val;
	if (angle < 0) {
 80039ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80039f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f8:	d513      	bpl.n	8003a22 <servo_setAngle+0x6e>
		val = SERVO_PULSE_0 + (SERVO_PULSE_0 - SERVO_PULSE_L) * angle / SERVO_WIDTH;
 80039fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80039fe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003a60 <servo_setAngle+0xac>
 8003a02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a06:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a0e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003a64 <servo_setAngle+0xb0>
 8003a12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a1a:	ee17 3a90 	vmov	r3, s15
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e012      	b.n	8003a48 <servo_setAngle+0x94>
	} else {
		val = SERVO_PULSE_0 + (SERVO_PULSE_R - SERVO_PULSE_0) * angle / SERVO_WIDTH;
 8003a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a26:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003a68 <servo_setAngle+0xb4>
 8003a2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a2e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a36:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003a64 <servo_setAngle+0xb0>
 8003a3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a42:	ee17 3a90 	vmov	r3, s15
 8003a46:	60fb      	str	r3, [r7, #12]
	}

	setServoVal(val);
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f7ff ffa1 	bl	8003990 <setServoVal>
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	c1c80000 	.word	0xc1c80000
 8003a5c:	41c80000 	.word	0x41c80000
 8003a60:	449c4000 	.word	0x449c4000
 8003a64:	45979000 	.word	0x45979000
 8003a68:	4512e000 	.word	0x4512e000

08003a6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a80:	6453      	str	r3, [r2, #68]	; 0x44
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	4a08      	ldr	r2, [pc, #32]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800

08003abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <HAL_I2C_MspInit+0x84>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d12c      	bne.n	8003b38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 8003afa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b00:	2312      	movs	r3, #18
 8003b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	4619      	mov	r1, r3
 8003b16:	480c      	ldr	r0, [pc, #48]	; (8003b48 <HAL_I2C_MspInit+0x8c>)
 8003b18:	f000 fd44 	bl	80045a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b38:	bf00      	nop
 8003b3a:	3728      	adds	r7, #40	; 0x28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40005400 	.word	0x40005400
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40020400 	.word	0x40020400

08003b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <HAL_TIM_Base_MspInit+0x98>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d10e      	bne.n	8003b7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	4b21      	ldr	r3, [pc, #132]	; (8003be8 <HAL_TIM_Base_MspInit+0x9c>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	4a20      	ldr	r2, [pc, #128]	; (8003be8 <HAL_TIM_Base_MspInit+0x9c>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_TIM_Base_MspInit+0x9c>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003b7a:	e02e      	b.n	8003bda <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1a      	ldr	r2, [pc, #104]	; (8003bec <HAL_TIM_Base_MspInit+0xa0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d116      	bne.n	8003bb4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <HAL_TIM_Base_MspInit+0x9c>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	4a16      	ldr	r2, [pc, #88]	; (8003be8 <HAL_TIM_Base_MspInit+0x9c>)
 8003b90:	f043 0304 	orr.w	r3, r3, #4
 8003b94:	6413      	str	r3, [r2, #64]	; 0x40
 8003b96:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <HAL_TIM_Base_MspInit+0x9c>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	201e      	movs	r0, #30
 8003ba8:	f000 fc33 	bl	8004412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003bac:	201e      	movs	r0, #30
 8003bae:	f000 fc4c 	bl	800444a <HAL_NVIC_EnableIRQ>
}
 8003bb2:	e012      	b.n	8003bda <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a0d      	ldr	r2, [pc, #52]	; (8003bf0 <HAL_TIM_Base_MspInit+0xa4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d10d      	bne.n	8003bda <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_TIM_Base_MspInit+0x9c>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <HAL_TIM_Base_MspInit+0x9c>)
 8003bc8:	f043 0302 	orr.w	r3, r3, #2
 8003bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_TIM_Base_MspInit+0x9c>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
}
 8003bda:	bf00      	nop
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40010400 	.word	0x40010400

08003bf4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08c      	sub	sp, #48	; 0x30
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d14b      	bne.n	8003cae <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	4a3e      	ldr	r2, [pc, #248]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6413      	str	r3, [r2, #64]	; 0x40
 8003c26:	4b3c      	ldr	r3, [pc, #240]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	4a37      	ldr	r2, [pc, #220]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6313      	str	r3, [r2, #48]	; 0x30
 8003c42:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4a30      	ldr	r2, [pc, #192]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c58:	f043 0302 	orr.w	r3, r3, #2
 8003c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5e:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTORA_CH1_Pin;
 8003c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c70:	2302      	movs	r3, #2
 8003c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH1_GPIO_Port, &GPIO_InitStruct);
 8003c80:	f107 031c 	add.w	r3, r7, #28
 8003c84:	4619      	mov	r1, r3
 8003c86:	4825      	ldr	r0, [pc, #148]	; (8003d1c <HAL_TIM_Encoder_MspInit+0x128>)
 8003c88:	f000 fc8c 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTORA_CH2_Pin;
 8003c8c:	2308      	movs	r3, #8
 8003c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	2302      	movs	r3, #2
 8003c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH2_GPIO_Port, &GPIO_InitStruct);
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	481e      	ldr	r0, [pc, #120]	; (8003d20 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003ca8:	f000 fc7c 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003cac:	e030      	b.n	8003d10 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <HAL_TIM_Encoder_MspInit+0x130>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d12b      	bne.n	8003d10 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cc2:	f043 0302 	orr.w	r3, r3, #2
 8003cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTORB_CH1_Pin|MOTORB_CH2_Pin;
 8003cf0:	23c0      	movs	r3, #192	; 0xc0
 8003cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d00:	2302      	movs	r3, #2
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d04:	f107 031c 	add.w	r3, r7, #28
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4804      	ldr	r0, [pc, #16]	; (8003d1c <HAL_TIM_Encoder_MspInit+0x128>)
 8003d0c:	f000 fc4a 	bl	80045a4 <HAL_GPIO_Init>
}
 8003d10:	bf00      	nop
 8003d12:	3730      	adds	r7, #48	; 0x30
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40020000 	.word	0x40020000
 8003d20:	40020400 	.word	0x40020400
 8003d24:	40000400 	.word	0x40000400

08003d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a24      	ldr	r2, [pc, #144]	; (8003dd8 <HAL_TIM_MspPostInit+0xb0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d11f      	bne.n	8003d8a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <HAL_TIM_MspPostInit+0xb4>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <HAL_TIM_MspPostInit+0xb4>)
 8003d54:	f043 0310 	orr.w	r3, r3, #16
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <HAL_TIM_MspPostInit+0xb4>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8003d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d74:	2300      	movs	r3, #0
 8003d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8003d7c:	f107 0314 	add.w	r3, r7, #20
 8003d80:	4619      	mov	r1, r3
 8003d82:	4817      	ldr	r0, [pc, #92]	; (8003de0 <HAL_TIM_MspPostInit+0xb8>)
 8003d84:	f000 fc0e 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003d88:	e022      	b.n	8003dd0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <HAL_TIM_MspPostInit+0xbc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d11d      	bne.n	8003dd0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <HAL_TIM_MspPostInit+0xb4>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	4a0f      	ldr	r2, [pc, #60]	; (8003ddc <HAL_TIM_MspPostInit+0xb4>)
 8003d9e:	f043 0304 	orr.w	r3, r3, #4
 8003da2:	6313      	str	r3, [r2, #48]	; 0x30
 8003da4:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_TIM_MspPostInit+0xb4>)
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTORA_PWM_Pin|MOTORB_PWM_Pin;
 8003db0:	23c0      	movs	r3, #192	; 0xc0
 8003db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4807      	ldr	r0, [pc, #28]	; (8003de8 <HAL_TIM_MspPostInit+0xc0>)
 8003dcc:	f000 fbea 	bl	80045a4 <HAL_GPIO_Init>
}
 8003dd0:	bf00      	nop
 8003dd2:	3728      	adds	r7, #40	; 0x28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40010400 	.word	0x40010400
 8003de8:	40020800 	.word	0x40020800

08003dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <HAL_UART_MspInit+0x94>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d134      	bne.n	8003e78 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1e:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e34:	f043 0304 	orr.w	r3, r3, #4
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e54:	2303      	movs	r3, #3
 8003e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e58:	2307      	movs	r3, #7
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	4619      	mov	r1, r3
 8003e62:	4809      	ldr	r0, [pc, #36]	; (8003e88 <HAL_UART_MspInit+0x9c>)
 8003e64:	f000 fb9e 	bl	80045a4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	2027      	movs	r0, #39	; 0x27
 8003e6e:	f000 fad0 	bl	8004412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e72:	2027      	movs	r0, #39	; 0x27
 8003e74:	f000 fae9 	bl	800444a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e78:	bf00      	nop
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40004800 	.word	0x40004800
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40020800 	.word	0x40020800

08003e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e90:	e7fe      	b.n	8003e90 <NMI_Handler+0x4>

08003e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e92:	b480      	push	{r7}
 8003e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e96:	e7fe      	b.n	8003e96 <HardFault_Handler+0x4>

08003e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e9c:	e7fe      	b.n	8003e9c <MemManage_Handler+0x4>

08003e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ea2:	e7fe      	b.n	8003ea2 <BusFault_Handler+0x4>

08003ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ea8:	e7fe      	b.n	8003ea8 <UsageFault_Handler+0x4>

08003eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ed8:	f000 f97c 	bl	80041d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003edc:	bf00      	nop
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ee4:	4802      	ldr	r0, [pc, #8]	; (8003ef0 <TIM4_IRQHandler+0x10>)
 8003ee6:	f002 fd5d 	bl	80069a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000354 	.word	0x20000354

08003ef4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ef8:	4802      	ldr	r0, [pc, #8]	; (8003f04 <USART3_IRQHandler+0x10>)
 8003efa:	f003 fd4f 	bl	800799c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200003e4 	.word	0x200003e4

08003f08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return 1;
 8003f0c:	2301      	movs	r3, #1
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <_kill>:

int _kill(int pid, int sig)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f22:	f005 fd7f 	bl	8009a24 <__errno>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2216      	movs	r2, #22
 8003f2a:	601a      	str	r2, [r3, #0]
  return -1;
 8003f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <_exit>:

void _exit (int status)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f40:	f04f 31ff 	mov.w	r1, #4294967295
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ffe7 	bl	8003f18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f4a:	e7fe      	b.n	8003f4a <_exit+0x12>

08003f4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e00a      	b.n	8003f74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f5e:	f3af 8000 	nop.w
 8003f62:	4601      	mov	r1, r0
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	60ba      	str	r2, [r7, #8]
 8003f6a:	b2ca      	uxtb	r2, r1
 8003f6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	3301      	adds	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	dbf0      	blt.n	8003f5e <_read+0x12>
  }

  return len;
 8003f7c:	687b      	ldr	r3, [r7, #4]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b086      	sub	sp, #24
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e009      	b.n	8003fac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	60ba      	str	r2, [r7, #8]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	dbf1      	blt.n	8003f98 <_write+0x12>
  }
  return len;
 8003fb4:	687b      	ldr	r3, [r7, #4]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <_close>:

int _close(int file)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fe6:	605a      	str	r2, [r3, #4]
  return 0;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <_isatty>:

int _isatty(int file)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ffe:	2301      	movs	r3, #1
}
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004030:	4a14      	ldr	r2, [pc, #80]	; (8004084 <_sbrk+0x5c>)
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <_sbrk+0x60>)
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <_sbrk+0x64>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <_sbrk+0x64>)
 8004046:	4a12      	ldr	r2, [pc, #72]	; (8004090 <_sbrk+0x68>)
 8004048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <_sbrk+0x64>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	429a      	cmp	r2, r3
 8004056:	d207      	bcs.n	8004068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004058:	f005 fce4 	bl	8009a24 <__errno>
 800405c:	4603      	mov	r3, r0
 800405e:	220c      	movs	r2, #12
 8004060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004062:	f04f 33ff 	mov.w	r3, #4294967295
 8004066:	e009      	b.n	800407c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <_sbrk+0x64>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <_sbrk+0x64>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	4a05      	ldr	r2, [pc, #20]	; (800408c <_sbrk+0x64>)
 8004078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800407a:	68fb      	ldr	r3, [r7, #12]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20020000 	.word	0x20020000
 8004088:	00000400 	.word	0x00000400
 800408c:	200008d8 	.word	0x200008d8
 8004090:	20000a30 	.word	0x20000a30

08004094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <SystemInit+0x20>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	4a05      	ldr	r2, [pc, #20]	; (80040b4 <SystemInit+0x20>)
 80040a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	e000ed00 	.word	0xe000ed00

080040b8 <user_is_pressed>:
#include "user_input.h"

uint8_t user_is_pressed() {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BTN_USER_GPIO_Port, BTN_USER_Pin) != GPIO_PIN_SET;
 80040bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040c0:	4805      	ldr	r0, [pc, #20]	; (80040d8 <user_is_pressed+0x20>)
 80040c2:	f000 fc0b 	bl	80048dc <HAL_GPIO_ReadPin>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	bf14      	ite	ne
 80040cc:	2301      	movne	r3, #1
 80040ce:	2300      	moveq	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40020c00 	.word	0x40020c00

080040dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80040dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004114 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80040e0:	f7ff ffd8 	bl	8004094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040e4:	480c      	ldr	r0, [pc, #48]	; (8004118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040e6:	490d      	ldr	r1, [pc, #52]	; (800411c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040e8:	4a0d      	ldr	r2, [pc, #52]	; (8004120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040ec:	e002      	b.n	80040f4 <LoopCopyDataInit>

080040ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040f2:	3304      	adds	r3, #4

080040f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040f8:	d3f9      	bcc.n	80040ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040fa:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040fc:	4c0a      	ldr	r4, [pc, #40]	; (8004128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004100:	e001      	b.n	8004106 <LoopFillZerobss>

08004102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004104:	3204      	adds	r2, #4

08004106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004108:	d3fb      	bcc.n	8004102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800410a:	f005 fc91 	bl	8009a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800410e:	f7fd ffc3 	bl	8002098 <main>
  bx  lr    
 8004112:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800411c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004120:	0800fdb8 	.word	0x0800fdb8
  ldr r2, =_sbss
 8004124:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004128:	20000a2c 	.word	0x20000a2c

0800412c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800412c:	e7fe      	b.n	800412c <ADC_IRQHandler>
	...

08004130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <HAL_Init+0x40>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a0d      	ldr	r2, [pc, #52]	; (8004170 <HAL_Init+0x40>)
 800413a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800413e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_Init+0x40>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <HAL_Init+0x40>)
 8004146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800414a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800414c:	4b08      	ldr	r3, [pc, #32]	; (8004170 <HAL_Init+0x40>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a07      	ldr	r2, [pc, #28]	; (8004170 <HAL_Init+0x40>)
 8004152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004158:	2003      	movs	r0, #3
 800415a:	f000 f94f 	bl	80043fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800415e:	200f      	movs	r0, #15
 8004160:	f000 f808 	bl	8004174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004164:	f7ff fc82 	bl	8003a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023c00 	.word	0x40023c00

08004174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_InitTick+0x54>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_InitTick+0x58>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	4619      	mov	r1, r3
 8004186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800418a:	fbb3 f3f1 	udiv	r3, r3, r1
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f967 	bl	8004466 <HAL_SYSTICK_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e00e      	b.n	80041c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b0f      	cmp	r3, #15
 80041a6:	d80a      	bhi.n	80041be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041a8:	2200      	movs	r2, #0
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	f000 f92f 	bl	8004412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041b4:	4a06      	ldr	r2, [pc, #24]	; (80041d0 <HAL_InitTick+0x5c>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e000      	b.n	80041c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20000000 	.word	0x20000000
 80041cc:	20000008 	.word	0x20000008
 80041d0:	20000004 	.word	0x20000004

080041d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_IncTick+0x20>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_IncTick+0x24>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4413      	add	r3, r2
 80041e4:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <HAL_IncTick+0x24>)
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000008 	.word	0x20000008
 80041f8:	200008dc 	.word	0x200008dc

080041fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004200:	4b03      	ldr	r3, [pc, #12]	; (8004210 <HAL_GetTick+0x14>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	200008dc 	.word	0x200008dc

08004214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800421c:	f7ff ffee 	bl	80041fc <HAL_GetTick>
 8004220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d005      	beq.n	800423a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <HAL_Delay+0x44>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800423a:	bf00      	nop
 800423c:	f7ff ffde 	bl	80041fc <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	429a      	cmp	r2, r3
 800424a:	d8f7      	bhi.n	800423c <HAL_Delay+0x28>
  {
  }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000008 	.word	0x20000008

0800425c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <__NVIC_SetPriorityGrouping+0x44>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004278:	4013      	ands	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800428e:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	60d3      	str	r3, [r2, #12]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a8:	4b04      	ldr	r3, [pc, #16]	; (80042bc <__NVIC_GetPriorityGrouping+0x18>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	0a1b      	lsrs	r3, r3, #8
 80042ae:	f003 0307 	and.w	r3, r3, #7
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	db0b      	blt.n	80042ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	f003 021f 	and.w	r2, r3, #31
 80042d8:	4907      	ldr	r1, [pc, #28]	; (80042f8 <__NVIC_EnableIRQ+0x38>)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	2001      	movs	r0, #1
 80042e2:	fa00 f202 	lsl.w	r2, r0, r2
 80042e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	e000e100 	.word	0xe000e100

080042fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	6039      	str	r1, [r7, #0]
 8004306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430c:	2b00      	cmp	r3, #0
 800430e:	db0a      	blt.n	8004326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	490c      	ldr	r1, [pc, #48]	; (8004348 <__NVIC_SetPriority+0x4c>)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	0112      	lsls	r2, r2, #4
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	440b      	add	r3, r1
 8004320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004324:	e00a      	b.n	800433c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4908      	ldr	r1, [pc, #32]	; (800434c <__NVIC_SetPriority+0x50>)
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	3b04      	subs	r3, #4
 8004334:	0112      	lsls	r2, r2, #4
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	440b      	add	r3, r1
 800433a:	761a      	strb	r2, [r3, #24]
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000e100 	.word	0xe000e100
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004350:	b480      	push	{r7}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f1c3 0307 	rsb	r3, r3, #7
 800436a:	2b04      	cmp	r3, #4
 800436c:	bf28      	it	cs
 800436e:	2304      	movcs	r3, #4
 8004370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	3304      	adds	r3, #4
 8004376:	2b06      	cmp	r3, #6
 8004378:	d902      	bls.n	8004380 <NVIC_EncodePriority+0x30>
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3b03      	subs	r3, #3
 800437e:	e000      	b.n	8004382 <NVIC_EncodePriority+0x32>
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004384:	f04f 32ff 	mov.w	r2, #4294967295
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43da      	mvns	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	401a      	ands	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004398:	f04f 31ff 	mov.w	r1, #4294967295
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	fa01 f303 	lsl.w	r3, r1, r3
 80043a2:	43d9      	mvns	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a8:	4313      	orrs	r3, r2
         );
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3724      	adds	r7, #36	; 0x24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c8:	d301      	bcc.n	80043ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00f      	b.n	80043ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ce:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <SysTick_Config+0x40>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043d6:	210f      	movs	r1, #15
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	f7ff ff8e 	bl	80042fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <SysTick_Config+0x40>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e6:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <SysTick_Config+0x40>)
 80043e8:	2207      	movs	r2, #7
 80043ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	e000e010 	.word	0xe000e010

080043fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff ff29 	bl	800425c <__NVIC_SetPriorityGrouping>
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004412:	b580      	push	{r7, lr}
 8004414:	b086      	sub	sp, #24
 8004416:	af00      	add	r7, sp, #0
 8004418:	4603      	mov	r3, r0
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004424:	f7ff ff3e 	bl	80042a4 <__NVIC_GetPriorityGrouping>
 8004428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	6978      	ldr	r0, [r7, #20]
 8004430:	f7ff ff8e 	bl	8004350 <NVIC_EncodePriority>
 8004434:	4602      	mov	r2, r0
 8004436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800443a:	4611      	mov	r1, r2
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff ff5d 	bl	80042fc <__NVIC_SetPriority>
}
 8004442:	bf00      	nop
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	4603      	mov	r3, r0
 8004452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff ff31 	bl	80042c0 <__NVIC_EnableIRQ>
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff ffa2 	bl	80043b8 <SysTick_Config>
 8004474:	4603      	mov	r3, r0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800448c:	f7ff feb6 	bl	80041fc <HAL_GetTick>
 8004490:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d008      	beq.n	80044b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2280      	movs	r2, #128	; 0x80
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e052      	b.n	8004556 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0216 	bic.w	r2, r2, #22
 80044be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d103      	bne.n	80044e0 <HAL_DMA_Abort+0x62>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0208 	bic.w	r2, r2, #8
 80044ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004500:	e013      	b.n	800452a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004502:	f7ff fe7b 	bl	80041fc <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b05      	cmp	r3, #5
 800450e:	d90c      	bls.n	800452a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2203      	movs	r2, #3
 800451a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e015      	b.n	8004556 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e4      	bne.n	8004502 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453c:	223f      	movs	r2, #63	; 0x3f
 800453e:	409a      	lsls	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d004      	beq.n	800457c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2280      	movs	r2, #128	; 0x80
 8004576:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e00c      	b.n	8004596 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2205      	movs	r2, #5
 8004580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	; 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	e16b      	b.n	8004898 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045c0:	2201      	movs	r2, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	429a      	cmp	r2, r3
 80045da:	f040 815a 	bne.w	8004892 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d005      	beq.n	80045f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d130      	bne.n	8004658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	2203      	movs	r2, #3
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4013      	ands	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4313      	orrs	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800462c:	2201      	movs	r2, #1
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4013      	ands	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 0201 	and.w	r2, r3, #1
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b03      	cmp	r3, #3
 8004662:	d017      	beq.n	8004694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	2203      	movs	r2, #3
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d123      	bne.n	80046e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	08da      	lsrs	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3208      	adds	r2, #8
 80046a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	220f      	movs	r2, #15
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	08da      	lsrs	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3208      	adds	r2, #8
 80046e2:	69b9      	ldr	r1, [r7, #24]
 80046e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	2203      	movs	r2, #3
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 0203 	and.w	r2, r3, #3
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80b4 	beq.w	8004892 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	4b60      	ldr	r3, [pc, #384]	; (80048b0 <HAL_GPIO_Init+0x30c>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	4a5f      	ldr	r2, [pc, #380]	; (80048b0 <HAL_GPIO_Init+0x30c>)
 8004734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004738:	6453      	str	r3, [r2, #68]	; 0x44
 800473a:	4b5d      	ldr	r3, [pc, #372]	; (80048b0 <HAL_GPIO_Init+0x30c>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004746:	4a5b      	ldr	r2, [pc, #364]	; (80048b4 <HAL_GPIO_Init+0x310>)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	3302      	adds	r3, #2
 800474e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	220f      	movs	r2, #15
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a52      	ldr	r2, [pc, #328]	; (80048b8 <HAL_GPIO_Init+0x314>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d02b      	beq.n	80047ca <HAL_GPIO_Init+0x226>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a51      	ldr	r2, [pc, #324]	; (80048bc <HAL_GPIO_Init+0x318>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d025      	beq.n	80047c6 <HAL_GPIO_Init+0x222>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a50      	ldr	r2, [pc, #320]	; (80048c0 <HAL_GPIO_Init+0x31c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01f      	beq.n	80047c2 <HAL_GPIO_Init+0x21e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a4f      	ldr	r2, [pc, #316]	; (80048c4 <HAL_GPIO_Init+0x320>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d019      	beq.n	80047be <HAL_GPIO_Init+0x21a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a4e      	ldr	r2, [pc, #312]	; (80048c8 <HAL_GPIO_Init+0x324>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_GPIO_Init+0x216>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a4d      	ldr	r2, [pc, #308]	; (80048cc <HAL_GPIO_Init+0x328>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00d      	beq.n	80047b6 <HAL_GPIO_Init+0x212>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a4c      	ldr	r2, [pc, #304]	; (80048d0 <HAL_GPIO_Init+0x32c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <HAL_GPIO_Init+0x20e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a4b      	ldr	r2, [pc, #300]	; (80048d4 <HAL_GPIO_Init+0x330>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <HAL_GPIO_Init+0x20a>
 80047aa:	2307      	movs	r3, #7
 80047ac:	e00e      	b.n	80047cc <HAL_GPIO_Init+0x228>
 80047ae:	2308      	movs	r3, #8
 80047b0:	e00c      	b.n	80047cc <HAL_GPIO_Init+0x228>
 80047b2:	2306      	movs	r3, #6
 80047b4:	e00a      	b.n	80047cc <HAL_GPIO_Init+0x228>
 80047b6:	2305      	movs	r3, #5
 80047b8:	e008      	b.n	80047cc <HAL_GPIO_Init+0x228>
 80047ba:	2304      	movs	r3, #4
 80047bc:	e006      	b.n	80047cc <HAL_GPIO_Init+0x228>
 80047be:	2303      	movs	r3, #3
 80047c0:	e004      	b.n	80047cc <HAL_GPIO_Init+0x228>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e002      	b.n	80047cc <HAL_GPIO_Init+0x228>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <HAL_GPIO_Init+0x228>
 80047ca:	2300      	movs	r3, #0
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	f002 0203 	and.w	r2, r2, #3
 80047d2:	0092      	lsls	r2, r2, #2
 80047d4:	4093      	lsls	r3, r2
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047dc:	4935      	ldr	r1, [pc, #212]	; (80048b4 <HAL_GPIO_Init+0x310>)
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	3302      	adds	r3, #2
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ea:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <HAL_GPIO_Init+0x334>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	43db      	mvns	r3, r3
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4013      	ands	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800480e:	4a32      	ldr	r2, [pc, #200]	; (80048d8 <HAL_GPIO_Init+0x334>)
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004814:	4b30      	ldr	r3, [pc, #192]	; (80048d8 <HAL_GPIO_Init+0x334>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	43db      	mvns	r3, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4013      	ands	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004838:	4a27      	ldr	r2, [pc, #156]	; (80048d8 <HAL_GPIO_Init+0x334>)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800483e:	4b26      	ldr	r3, [pc, #152]	; (80048d8 <HAL_GPIO_Init+0x334>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004862:	4a1d      	ldr	r2, [pc, #116]	; (80048d8 <HAL_GPIO_Init+0x334>)
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004868:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <HAL_GPIO_Init+0x334>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	43db      	mvns	r3, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4013      	ands	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800488c:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <HAL_GPIO_Init+0x334>)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3301      	adds	r3, #1
 8004896:	61fb      	str	r3, [r7, #28]
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	2b0f      	cmp	r3, #15
 800489c:	f67f ae90 	bls.w	80045c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	3724      	adds	r7, #36	; 0x24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40013800 	.word	0x40013800
 80048b8:	40020000 	.word	0x40020000
 80048bc:	40020400 	.word	0x40020400
 80048c0:	40020800 	.word	0x40020800
 80048c4:	40020c00 	.word	0x40020c00
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40021400 	.word	0x40021400
 80048d0:	40021800 	.word	0x40021800
 80048d4:	40021c00 	.word	0x40021c00
 80048d8:	40013c00 	.word	0x40013c00

080048dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	887b      	ldrh	r3, [r7, #2]
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
 80048f8:	e001      	b.n	80048fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	807b      	strh	r3, [r7, #2]
 8004918:	4613      	mov	r3, r2
 800491a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800491c:	787b      	ldrb	r3, [r7, #1]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004928:	e003      	b.n	8004932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800492a:	887b      	ldrh	r3, [r7, #2]
 800492c:	041a      	lsls	r2, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	619a      	str	r2, [r3, #24]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e12b      	b.n	8004baa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff f8a8 	bl	8003abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2224      	movs	r2, #36	; 0x24
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0201 	bic.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049a4:	f001 fc48 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 80049a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4a81      	ldr	r2, [pc, #516]	; (8004bb4 <HAL_I2C_Init+0x274>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d807      	bhi.n	80049c4 <HAL_I2C_Init+0x84>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a80      	ldr	r2, [pc, #512]	; (8004bb8 <HAL_I2C_Init+0x278>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	bf94      	ite	ls
 80049bc:	2301      	movls	r3, #1
 80049be:	2300      	movhi	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e006      	b.n	80049d2 <HAL_I2C_Init+0x92>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a7d      	ldr	r2, [pc, #500]	; (8004bbc <HAL_I2C_Init+0x27c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	bf94      	ite	ls
 80049cc:	2301      	movls	r3, #1
 80049ce:	2300      	movhi	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0e7      	b.n	8004baa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a78      	ldr	r2, [pc, #480]	; (8004bc0 <HAL_I2C_Init+0x280>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	0c9b      	lsrs	r3, r3, #18
 80049e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a6a      	ldr	r2, [pc, #424]	; (8004bb4 <HAL_I2C_Init+0x274>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d802      	bhi.n	8004a14 <HAL_I2C_Init+0xd4>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	3301      	adds	r3, #1
 8004a12:	e009      	b.n	8004a28 <HAL_I2C_Init+0xe8>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	4a69      	ldr	r2, [pc, #420]	; (8004bc4 <HAL_I2C_Init+0x284>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	3301      	adds	r3, #1
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	495c      	ldr	r1, [pc, #368]	; (8004bb4 <HAL_I2C_Init+0x274>)
 8004a44:	428b      	cmp	r3, r1
 8004a46:	d819      	bhi.n	8004a7c <HAL_I2C_Init+0x13c>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1e59      	subs	r1, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a56:	1c59      	adds	r1, r3, #1
 8004a58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a5c:	400b      	ands	r3, r1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_I2C_Init+0x138>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1e59      	subs	r1, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a70:	3301      	adds	r3, #1
 8004a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a76:	e051      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	e04f      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d111      	bne.n	8004aa8 <HAL_I2C_Init+0x168>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1e58      	subs	r0, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	440b      	add	r3, r1
 8004a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a96:	3301      	adds	r3, #1
 8004a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	e012      	b.n	8004ace <HAL_I2C_Init+0x18e>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1e58      	subs	r0, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6859      	ldr	r1, [r3, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	0099      	lsls	r1, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_I2C_Init+0x196>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e022      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10e      	bne.n	8004afc <HAL_I2C_Init+0x1bc>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1e58      	subs	r0, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6859      	ldr	r1, [r3, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	440b      	add	r3, r1
 8004aec:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af0:	3301      	adds	r3, #1
 8004af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afa:	e00f      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1e58      	subs	r0, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	0099      	lsls	r1, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	6809      	ldr	r1, [r1, #0]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69da      	ldr	r2, [r3, #28]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6911      	ldr	r1, [r2, #16]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68d2      	ldr	r2, [r2, #12]
 8004b56:	4311      	orrs	r1, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	000186a0 	.word	0x000186a0
 8004bb8:	001e847f 	.word	0x001e847f
 8004bbc:	003d08ff 	.word	0x003d08ff
 8004bc0:	431bde83 	.word	0x431bde83
 8004bc4:	10624dd3 	.word	0x10624dd3

08004bc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	817b      	strh	r3, [r7, #10]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	813b      	strh	r3, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004be2:	f7ff fb0b 	bl	80041fc <HAL_GetTick>
 8004be6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	f040 80d9 	bne.w	8004da8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2319      	movs	r3, #25
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	496d      	ldr	r1, [pc, #436]	; (8004db4 <HAL_I2C_Mem_Write+0x1ec>)
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fc8b 	bl	800551c <I2C_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e0cc      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_I2C_Mem_Write+0x56>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e0c5      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d007      	beq.n	8004c44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2221      	movs	r2, #33	; 0x21
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2240      	movs	r2, #64	; 0x40
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a3a      	ldr	r2, [r7, #32]
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a4d      	ldr	r2, [pc, #308]	; (8004db8 <HAL_I2C_Mem_Write+0x1f0>)
 8004c84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c86:	88f8      	ldrh	r0, [r7, #6]
 8004c88:	893a      	ldrh	r2, [r7, #8]
 8004c8a:	8979      	ldrh	r1, [r7, #10]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	4603      	mov	r3, r0
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fac2 	bl	8005220 <I2C_RequestMemoryWrite>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d052      	beq.n	8004d48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e081      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fd50 	bl	8005750 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00d      	beq.n	8004cd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d107      	bne.n	8004cce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ccc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e06b      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	781a      	ldrb	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d11b      	bne.n	8004d48 <HAL_I2C_Mem_Write+0x180>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d017      	beq.n	8004d48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	781a      	ldrb	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1aa      	bne.n	8004ca6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fd43 	bl	80057e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00d      	beq.n	8004d7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d107      	bne.n	8004d78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e016      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	00100002 	.word	0x00100002
 8004db8:	ffff0000 	.word	0xffff0000

08004dbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08c      	sub	sp, #48	; 0x30
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	817b      	strh	r3, [r7, #10]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	813b      	strh	r3, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dd6:	f7ff fa11 	bl	80041fc <HAL_GetTick>
 8004dda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	f040 8214 	bne.w	8005212 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2319      	movs	r3, #25
 8004df0:	2201      	movs	r2, #1
 8004df2:	497b      	ldr	r1, [pc, #492]	; (8004fe0 <HAL_I2C_Mem_Read+0x224>)
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fb91 	bl	800551c <I2C_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
 8004e02:	e207      	b.n	8005214 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2C_Mem_Read+0x56>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e200      	b.n	8005214 <HAL_I2C_Mem_Read+0x458>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d007      	beq.n	8004e38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2222      	movs	r2, #34	; 0x22
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2240      	movs	r2, #64	; 0x40
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a5b      	ldr	r2, [pc, #364]	; (8004fe4 <HAL_I2C_Mem_Read+0x228>)
 8004e78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e7a:	88f8      	ldrh	r0, [r7, #6]
 8004e7c:	893a      	ldrh	r2, [r7, #8]
 8004e7e:	8979      	ldrh	r1, [r7, #10]
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4603      	mov	r3, r0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fa5e 	bl	800534c <I2C_RequestMemoryRead>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e1bc      	b.n	8005214 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d113      	bne.n	8004eca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	623b      	str	r3, [r7, #32]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	623b      	str	r3, [r7, #32]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	623b      	str	r3, [r7, #32]
 8004eb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e190      	b.n	80051ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d11b      	bne.n	8004f0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e170      	b.n	80051ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d11b      	bne.n	8004f4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f32:	2300      	movs	r3, #0
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	e150      	b.n	80051ec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f60:	e144      	b.n	80051ec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	f200 80f1 	bhi.w	800514e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d123      	bne.n	8004fbc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fc79 	bl	8005870 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e145      	b.n	8005214 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fba:	e117      	b.n	80051ec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d14e      	bne.n	8005062 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	2200      	movs	r2, #0
 8004fcc:	4906      	ldr	r1, [pc, #24]	; (8004fe8 <HAL_I2C_Mem_Read+0x22c>)
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 faa4 	bl	800551c <I2C_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d008      	beq.n	8004fec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e11a      	b.n	8005214 <HAL_I2C_Mem_Read+0x458>
 8004fde:	bf00      	nop
 8004fe0:	00100002 	.word	0x00100002
 8004fe4:	ffff0000 	.word	0xffff0000
 8004fe8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005060:	e0c4      	b.n	80051ec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	2200      	movs	r2, #0
 800506a:	496c      	ldr	r1, [pc, #432]	; (800521c <HAL_I2C_Mem_Read+0x460>)
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fa55 	bl	800551c <I2C_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0cb      	b.n	8005214 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	2200      	movs	r2, #0
 80050c6:	4955      	ldr	r1, [pc, #340]	; (800521c <HAL_I2C_Mem_Read+0x460>)
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 fa27 	bl	800551c <I2C_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e09d      	b.n	8005214 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800514c:	e04e      	b.n	80051ec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 fb8c 	bl	8005870 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e058      	b.n	8005214 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d124      	bne.n	80051ec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d107      	bne.n	80051ba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f47f aeb6 	bne.w	8004f62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e000      	b.n	8005214 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005212:	2302      	movs	r3, #2
  }
}
 8005214:	4618      	mov	r0, r3
 8005216:	3728      	adds	r7, #40	; 0x28
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	00010004 	.word	0x00010004

08005220 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	4608      	mov	r0, r1
 800522a:	4611      	mov	r1, r2
 800522c:	461a      	mov	r2, r3
 800522e:	4603      	mov	r3, r0
 8005230:	817b      	strh	r3, [r7, #10]
 8005232:	460b      	mov	r3, r1
 8005234:	813b      	strh	r3, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005248:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	2200      	movs	r2, #0
 8005252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f960 	bl	800551c <I2C_WaitOnFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00d      	beq.n	800527e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005270:	d103      	bne.n	800527a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e05f      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800527e:	897b      	ldrh	r3, [r7, #10]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800528c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	6a3a      	ldr	r2, [r7, #32]
 8005292:	492d      	ldr	r1, [pc, #180]	; (8005348 <I2C_RequestMemoryWrite+0x128>)
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f9bb 	bl	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e04c      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052bc:	6a39      	ldr	r1, [r7, #32]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fa46 	bl	8005750 <I2C_WaitOnTXEFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00d      	beq.n	80052e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d107      	bne.n	80052e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e02b      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d105      	bne.n	80052f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052ec:	893b      	ldrh	r3, [r7, #8]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	611a      	str	r2, [r3, #16]
 80052f6:	e021      	b.n	800533c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052f8:	893b      	ldrh	r3, [r7, #8]
 80052fa:	0a1b      	lsrs	r3, r3, #8
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005308:	6a39      	ldr	r1, [r7, #32]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fa20 	bl	8005750 <I2C_WaitOnTXEFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	2b04      	cmp	r3, #4
 800531c:	d107      	bne.n	800532e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e005      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005332:	893b      	ldrh	r3, [r7, #8]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	00010002 	.word	0x00010002

0800534c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	4608      	mov	r0, r1
 8005356:	4611      	mov	r1, r2
 8005358:	461a      	mov	r2, r3
 800535a:	4603      	mov	r3, r0
 800535c:	817b      	strh	r3, [r7, #10]
 800535e:	460b      	mov	r3, r1
 8005360:	813b      	strh	r3, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005374:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	2200      	movs	r2, #0
 800538e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f8c2 	bl	800551c <I2C_WaitOnFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ac:	d103      	bne.n	80053b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e0aa      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ba:	897b      	ldrh	r3, [r7, #10]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	6a3a      	ldr	r2, [r7, #32]
 80053ce:	4952      	ldr	r1, [pc, #328]	; (8005518 <I2C_RequestMemoryRead+0x1cc>)
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f91d 	bl	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e097      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f8:	6a39      	ldr	r1, [r7, #32]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f9a8 	bl	8005750 <I2C_WaitOnTXEFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00d      	beq.n	8005422 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	2b04      	cmp	r3, #4
 800540c:	d107      	bne.n	800541e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e076      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d105      	bne.n	8005434 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005428:	893b      	ldrh	r3, [r7, #8]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	611a      	str	r2, [r3, #16]
 8005432:	e021      	b.n	8005478 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005434:	893b      	ldrh	r3, [r7, #8]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	b29b      	uxth	r3, r3
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005444:	6a39      	ldr	r1, [r7, #32]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f982 	bl	8005750 <I2C_WaitOnTXEFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	2b04      	cmp	r3, #4
 8005458:	d107      	bne.n	800546a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005468:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e050      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800546e:	893b      	ldrh	r3, [r7, #8]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547a:	6a39      	ldr	r1, [r7, #32]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f967 	bl	8005750 <I2C_WaitOnTXEFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	2b04      	cmp	r3, #4
 800548e:	d107      	bne.n	80054a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e035      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f82b 	bl	800551c <I2C_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00d      	beq.n	80054e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054da:	d103      	bne.n	80054e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e013      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054e8:	897b      	ldrh	r3, [r7, #10]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	6a3a      	ldr	r2, [r7, #32]
 80054fc:	4906      	ldr	r1, [pc, #24]	; (8005518 <I2C_RequestMemoryRead+0x1cc>)
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f886 	bl	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	00010002 	.word	0x00010002

0800551c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	4613      	mov	r3, r2
 800552a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800552c:	e048      	b.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d044      	beq.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005536:	f7fe fe61 	bl	80041fc <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d302      	bcc.n	800554c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d139      	bne.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	0c1b      	lsrs	r3, r3, #16
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10d      	bne.n	8005572 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	43da      	mvns	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4013      	ands	r3, r2
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	bf0c      	ite	eq
 8005568:	2301      	moveq	r3, #1
 800556a:	2300      	movne	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	e00c      	b.n	800558c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	43da      	mvns	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4013      	ands	r3, r2
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	429a      	cmp	r2, r3
 8005590:	d116      	bne.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	f043 0220 	orr.w	r2, r3, #32
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e023      	b.n	8005608 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	0c1b      	lsrs	r3, r3, #16
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d10d      	bne.n	80055e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	43da      	mvns	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	e00c      	b.n	8005600 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	43da      	mvns	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4013      	ands	r3, r2
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf0c      	ite	eq
 80055f8:	2301      	moveq	r3, #1
 80055fa:	2300      	movne	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	429a      	cmp	r2, r3
 8005604:	d093      	beq.n	800552e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800561e:	e071      	b.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562e:	d123      	bne.n	8005678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005648:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	f043 0204 	orr.w	r2, r3, #4
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e067      	b.n	8005748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d041      	beq.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005680:	f7fe fdbc 	bl	80041fc <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	429a      	cmp	r2, r3
 800568e:	d302      	bcc.n	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d136      	bne.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	d10c      	bne.n	80056ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	43da      	mvns	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bf14      	ite	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	2300      	moveq	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	e00b      	b.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	43da      	mvns	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4013      	ands	r3, r2
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bf14      	ite	ne
 80056cc:	2301      	movne	r3, #1
 80056ce:	2300      	moveq	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e021      	b.n	8005748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	0c1b      	lsrs	r3, r3, #16
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d10c      	bne.n	8005728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	43da      	mvns	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4013      	ands	r3, r2
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf14      	ite	ne
 8005720:	2301      	movne	r3, #1
 8005722:	2300      	moveq	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e00b      	b.n	8005740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	43da      	mvns	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	bf14      	ite	ne
 800573a:	2301      	movne	r3, #1
 800573c:	2300      	moveq	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	f47f af6d 	bne.w	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800575c:	e034      	b.n	80057c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f8e3 	bl	800592a <I2C_IsAcknowledgeFailed>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e034      	b.n	80057d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d028      	beq.n	80057c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005776:	f7fe fd41 	bl	80041fc <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d11d      	bne.n	80057c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005796:	2b80      	cmp	r3, #128	; 0x80
 8005798:	d016      	beq.n	80057c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	f043 0220 	orr.w	r2, r3, #32
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e007      	b.n	80057d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d2:	2b80      	cmp	r3, #128	; 0x80
 80057d4:	d1c3      	bne.n	800575e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057ec:	e034      	b.n	8005858 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f89b 	bl	800592a <I2C_IsAcknowledgeFailed>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e034      	b.n	8005868 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d028      	beq.n	8005858 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005806:	f7fe fcf9 	bl	80041fc <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	429a      	cmp	r2, r3
 8005814:	d302      	bcc.n	800581c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d11d      	bne.n	8005858 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b04      	cmp	r3, #4
 8005828:	d016      	beq.n	8005858 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	f043 0220 	orr.w	r2, r3, #32
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e007      	b.n	8005868 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b04      	cmp	r3, #4
 8005864:	d1c3      	bne.n	80057ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800587c:	e049      	b.n	8005912 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b10      	cmp	r3, #16
 800588a:	d119      	bne.n	80058c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0210 	mvn.w	r2, #16
 8005894:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e030      	b.n	8005922 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c0:	f7fe fc9c 	bl	80041fc <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d302      	bcc.n	80058d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d11d      	bne.n	8005912 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d016      	beq.n	8005912 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e007      	b.n	8005922 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b40      	cmp	r3, #64	; 0x40
 800591e:	d1ae      	bne.n	800587e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005940:	d11b      	bne.n	800597a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800594a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	f043 0204 	orr.w	r2, r3, #4
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800598e:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005990:	2201      	movs	r2, #1
 8005992:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_PWR_EnableBkUpAccess+0x24>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800599a:	687b      	ldr	r3, [r7, #4]
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	420e0020 	.word	0x420e0020
 80059ac:	40007000 	.word	0x40007000

080059b0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80059b6:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <HAL_PWR_DisableBkUpAccess+0x20>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80059bc:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <HAL_PWR_DisableBkUpAccess+0x24>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80059c2:	687b      	ldr	r3, [r7, #4]
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	420e0020 	.word	0x420e0020
 80059d4:	40007000 	.word	0x40007000

080059d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e267      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d075      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059f6:	4b88      	ldr	r3, [pc, #544]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d00c      	beq.n	8005a1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a02:	4b85      	ldr	r3, [pc, #532]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d112      	bne.n	8005a34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a0e:	4b82      	ldr	r3, [pc, #520]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a1a:	d10b      	bne.n	8005a34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1c:	4b7e      	ldr	r3, [pc, #504]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d05b      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x108>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d157      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e242      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3c:	d106      	bne.n	8005a4c <HAL_RCC_OscConfig+0x74>
 8005a3e:	4b76      	ldr	r3, [pc, #472]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a75      	ldr	r2, [pc, #468]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	e01d      	b.n	8005a88 <HAL_RCC_OscConfig+0xb0>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x98>
 8005a56:	4b70      	ldr	r3, [pc, #448]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a6f      	ldr	r2, [pc, #444]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4b6d      	ldr	r3, [pc, #436]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a6c      	ldr	r2, [pc, #432]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e00b      	b.n	8005a88 <HAL_RCC_OscConfig+0xb0>
 8005a70:	4b69      	ldr	r3, [pc, #420]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a68      	ldr	r2, [pc, #416]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	4b66      	ldr	r3, [pc, #408]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a65      	ldr	r2, [pc, #404]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d013      	beq.n	8005ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a90:	f7fe fbb4 	bl	80041fc <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a98:	f7fe fbb0 	bl	80041fc <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b64      	cmp	r3, #100	; 0x64
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e207      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aaa:	4b5b      	ldr	r3, [pc, #364]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0f0      	beq.n	8005a98 <HAL_RCC_OscConfig+0xc0>
 8005ab6:	e014      	b.n	8005ae2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab8:	f7fe fba0 	bl	80041fc <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ac0:	f7fe fb9c 	bl	80041fc <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b64      	cmp	r3, #100	; 0x64
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e1f3      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ad2:	4b51      	ldr	r3, [pc, #324]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f0      	bne.n	8005ac0 <HAL_RCC_OscConfig+0xe8>
 8005ade:	e000      	b.n	8005ae2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d063      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aee:	4b4a      	ldr	r3, [pc, #296]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 030c 	and.w	r3, r3, #12
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00b      	beq.n	8005b12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005afa:	4b47      	ldr	r3, [pc, #284]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d11c      	bne.n	8005b40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b06:	4b44      	ldr	r3, [pc, #272]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d116      	bne.n	8005b40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b12:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_RCC_OscConfig+0x152>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d001      	beq.n	8005b2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e1c7      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b2a:	4b3b      	ldr	r3, [pc, #236]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4937      	ldr	r1, [pc, #220]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b3e:	e03a      	b.n	8005bb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d020      	beq.n	8005b8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b48:	4b34      	ldr	r3, [pc, #208]	; (8005c1c <HAL_RCC_OscConfig+0x244>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4e:	f7fe fb55 	bl	80041fc <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b56:	f7fe fb51 	bl	80041fc <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e1a8      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b68:	4b2b      	ldr	r3, [pc, #172]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b74:	4b28      	ldr	r3, [pc, #160]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	4925      	ldr	r1, [pc, #148]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	600b      	str	r3, [r1, #0]
 8005b88:	e015      	b.n	8005bb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b8a:	4b24      	ldr	r3, [pc, #144]	; (8005c1c <HAL_RCC_OscConfig+0x244>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fe fb34 	bl	80041fc <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b98:	f7fe fb30 	bl	80041fc <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e187      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005baa:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d036      	beq.n	8005c30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d016      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bca:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <HAL_RCC_OscConfig+0x248>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd0:	f7fe fb14 	bl	80041fc <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd8:	f7fe fb10 	bl	80041fc <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e167      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bea:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <HAL_RCC_OscConfig+0x240>)
 8005bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x200>
 8005bf6:	e01b      	b.n	8005c30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf8:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <HAL_RCC_OscConfig+0x248>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bfe:	f7fe fafd 	bl	80041fc <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c04:	e00e      	b.n	8005c24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c06:	f7fe faf9 	bl	80041fc <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d907      	bls.n	8005c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e150      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	42470000 	.word	0x42470000
 8005c20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c24:	4b88      	ldr	r3, [pc, #544]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1ea      	bne.n	8005c06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 8097 	beq.w	8005d6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c42:	4b81      	ldr	r3, [pc, #516]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10f      	bne.n	8005c6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	4b7d      	ldr	r3, [pc, #500]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	4a7c      	ldr	r2, [pc, #496]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c5e:	4b7a      	ldr	r3, [pc, #488]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6e:	4b77      	ldr	r3, [pc, #476]	; (8005e4c <HAL_RCC_OscConfig+0x474>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d118      	bne.n	8005cac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c7a:	4b74      	ldr	r3, [pc, #464]	; (8005e4c <HAL_RCC_OscConfig+0x474>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a73      	ldr	r2, [pc, #460]	; (8005e4c <HAL_RCC_OscConfig+0x474>)
 8005c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c86:	f7fe fab9 	bl	80041fc <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8e:	f7fe fab5 	bl	80041fc <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e10c      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca0:	4b6a      	ldr	r3, [pc, #424]	; (8005e4c <HAL_RCC_OscConfig+0x474>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d106      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x2ea>
 8005cb4:	4b64      	ldr	r3, [pc, #400]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	4a63      	ldr	r2, [pc, #396]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005cc0:	e01c      	b.n	8005cfc <HAL_RCC_OscConfig+0x324>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x30c>
 8005cca:	4b5f      	ldr	r3, [pc, #380]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cce:	4a5e      	ldr	r2, [pc, #376]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	f043 0304 	orr.w	r3, r3, #4
 8005cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd6:	4b5c      	ldr	r3, [pc, #368]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	4a5b      	ldr	r2, [pc, #364]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce2:	e00b      	b.n	8005cfc <HAL_RCC_OscConfig+0x324>
 8005ce4:	4b58      	ldr	r3, [pc, #352]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	4a57      	ldr	r2, [pc, #348]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf0:	4b55      	ldr	r3, [pc, #340]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	4a54      	ldr	r2, [pc, #336]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005cf6:	f023 0304 	bic.w	r3, r3, #4
 8005cfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d015      	beq.n	8005d30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d04:	f7fe fa7a 	bl	80041fc <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d0a:	e00a      	b.n	8005d22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d0c:	f7fe fa76 	bl	80041fc <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e0cb      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d22:	4b49      	ldr	r3, [pc, #292]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0ee      	beq.n	8005d0c <HAL_RCC_OscConfig+0x334>
 8005d2e:	e014      	b.n	8005d5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d30:	f7fe fa64 	bl	80041fc <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d36:	e00a      	b.n	8005d4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d38:	f7fe fa60 	bl	80041fc <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0b5      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d4e:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ee      	bne.n	8005d38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d105      	bne.n	8005d6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d60:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	4a38      	ldr	r2, [pc, #224]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80a1 	beq.w	8005eb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d76:	4b34      	ldr	r3, [pc, #208]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 030c 	and.w	r3, r3, #12
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d05c      	beq.n	8005e3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d141      	bne.n	8005e0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8a:	4b31      	ldr	r3, [pc, #196]	; (8005e50 <HAL_RCC_OscConfig+0x478>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d90:	f7fe fa34 	bl	80041fc <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d98:	f7fe fa30 	bl	80041fc <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e087      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005daa:	4b27      	ldr	r3, [pc, #156]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69da      	ldr	r2, [r3, #28]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	019b      	lsls	r3, r3, #6
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	061b      	lsls	r3, r3, #24
 8005dda:	491b      	ldr	r1, [pc, #108]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005de0:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <HAL_RCC_OscConfig+0x478>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de6:	f7fe fa09 	bl	80041fc <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dee:	f7fe fa05 	bl	80041fc <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e05c      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e00:	4b11      	ldr	r3, [pc, #68]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f0      	beq.n	8005dee <HAL_RCC_OscConfig+0x416>
 8005e0c:	e054      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e0e:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <HAL_RCC_OscConfig+0x478>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e14:	f7fe f9f2 	bl	80041fc <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1c:	f7fe f9ee 	bl	80041fc <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e045      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2e:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <HAL_RCC_OscConfig+0x470>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <HAL_RCC_OscConfig+0x444>
 8005e3a:	e03d      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d107      	bne.n	8005e54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e038      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	40007000 	.word	0x40007000
 8005e50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e54:	4b1b      	ldr	r3, [pc, #108]	; (8005ec4 <HAL_RCC_OscConfig+0x4ec>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d028      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d121      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d11a      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e84:	4013      	ands	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d111      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d107      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d001      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40023800 	.word	0x40023800

08005ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0cc      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005edc:	4b68      	ldr	r3, [pc, #416]	; (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d90c      	bls.n	8005f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eea:	4b65      	ldr	r3, [pc, #404]	; (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef2:	4b63      	ldr	r3, [pc, #396]	; (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d001      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e0b8      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d020      	beq.n	8005f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f1c:	4b59      	ldr	r3, [pc, #356]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	4a58      	ldr	r2, [pc, #352]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f34:	4b53      	ldr	r3, [pc, #332]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	4a52      	ldr	r2, [pc, #328]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f40:	4b50      	ldr	r3, [pc, #320]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	494d      	ldr	r1, [pc, #308]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d044      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d107      	bne.n	8005f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f66:	4b47      	ldr	r3, [pc, #284]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d119      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e07f      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d003      	beq.n	8005f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d107      	bne.n	8005f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f86:	4b3f      	ldr	r3, [pc, #252]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e06f      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f96:	4b3b      	ldr	r3, [pc, #236]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e067      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fa6:	4b37      	ldr	r3, [pc, #220]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f023 0203 	bic.w	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	4934      	ldr	r1, [pc, #208]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fb8:	f7fe f920 	bl	80041fc <HAL_GetTick>
 8005fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fbe:	e00a      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc0:	f7fe f91c 	bl	80041fc <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e04f      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd6:	4b2b      	ldr	r3, [pc, #172]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 020c 	and.w	r2, r3, #12
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d1eb      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fe8:	4b25      	ldr	r3, [pc, #148]	; (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d20c      	bcs.n	8006010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff6:	4b22      	ldr	r3, [pc, #136]	; (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffe:	4b20      	ldr	r3, [pc, #128]	; (8006080 <HAL_RCC_ClockConfig+0x1b8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d001      	beq.n	8006010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e032      	b.n	8006076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800601c:	4b19      	ldr	r3, [pc, #100]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	4916      	ldr	r1, [pc, #88]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	4313      	orrs	r3, r2
 800602c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800603a:	4b12      	ldr	r3, [pc, #72]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	490e      	ldr	r1, [pc, #56]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	4313      	orrs	r3, r2
 800604c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800604e:	f000 f821 	bl	8006094 <HAL_RCC_GetSysClockFreq>
 8006052:	4602      	mov	r2, r0
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	091b      	lsrs	r3, r3, #4
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	490a      	ldr	r1, [pc, #40]	; (8006088 <HAL_RCC_ClockConfig+0x1c0>)
 8006060:	5ccb      	ldrb	r3, [r1, r3]
 8006062:	fa22 f303 	lsr.w	r3, r2, r3
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <HAL_RCC_ClockConfig+0x1c4>)
 8006068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800606a:	4b09      	ldr	r3, [pc, #36]	; (8006090 <HAL_RCC_ClockConfig+0x1c8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe f880 	bl	8004174 <HAL_InitTick>

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40023c00 	.word	0x40023c00
 8006084:	40023800 	.word	0x40023800
 8006088:	0800f71c 	.word	0x0800f71c
 800608c:	20000000 	.word	0x20000000
 8006090:	20000004 	.word	0x20000004

08006094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006098:	b090      	sub	sp, #64	; 0x40
 800609a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
 80060a0:	2300      	movs	r3, #0
 80060a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a4:	2300      	movs	r3, #0
 80060a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060ac:	4b59      	ldr	r3, [pc, #356]	; (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 030c 	and.w	r3, r3, #12
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d00d      	beq.n	80060d4 <HAL_RCC_GetSysClockFreq+0x40>
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	f200 80a1 	bhi.w	8006200 <HAL_RCC_GetSysClockFreq+0x16c>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <HAL_RCC_GetSysClockFreq+0x34>
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d003      	beq.n	80060ce <HAL_RCC_GetSysClockFreq+0x3a>
 80060c6:	e09b      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060c8:	4b53      	ldr	r3, [pc, #332]	; (8006218 <HAL_RCC_GetSysClockFreq+0x184>)
 80060ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80060cc:	e09b      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060ce:	4b53      	ldr	r3, [pc, #332]	; (800621c <HAL_RCC_GetSysClockFreq+0x188>)
 80060d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060d2:	e098      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060d4:	4b4f      	ldr	r3, [pc, #316]	; (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060de:	4b4d      	ldr	r3, [pc, #308]	; (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d028      	beq.n	800613c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ea:	4b4a      	ldr	r3, [pc, #296]	; (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	099b      	lsrs	r3, r3, #6
 80060f0:	2200      	movs	r2, #0
 80060f2:	623b      	str	r3, [r7, #32]
 80060f4:	627a      	str	r2, [r7, #36]	; 0x24
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060fc:	2100      	movs	r1, #0
 80060fe:	4b47      	ldr	r3, [pc, #284]	; (800621c <HAL_RCC_GetSysClockFreq+0x188>)
 8006100:	fb03 f201 	mul.w	r2, r3, r1
 8006104:	2300      	movs	r3, #0
 8006106:	fb00 f303 	mul.w	r3, r0, r3
 800610a:	4413      	add	r3, r2
 800610c:	4a43      	ldr	r2, [pc, #268]	; (800621c <HAL_RCC_GetSysClockFreq+0x188>)
 800610e:	fba0 1202 	umull	r1, r2, r0, r2
 8006112:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006114:	460a      	mov	r2, r1
 8006116:	62ba      	str	r2, [r7, #40]	; 0x28
 8006118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800611a:	4413      	add	r3, r2
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	2200      	movs	r2, #0
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	61fa      	str	r2, [r7, #28]
 8006126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800612a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800612e:	f7fa fdab 	bl	8000c88 <__aeabi_uldivmod>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4613      	mov	r3, r2
 8006138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800613a:	e053      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613c:	4b35      	ldr	r3, [pc, #212]	; (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	099b      	lsrs	r3, r3, #6
 8006142:	2200      	movs	r2, #0
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	617a      	str	r2, [r7, #20]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800614e:	f04f 0b00 	mov.w	fp, #0
 8006152:	4652      	mov	r2, sl
 8006154:	465b      	mov	r3, fp
 8006156:	f04f 0000 	mov.w	r0, #0
 800615a:	f04f 0100 	mov.w	r1, #0
 800615e:	0159      	lsls	r1, r3, #5
 8006160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006164:	0150      	lsls	r0, r2, #5
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	ebb2 080a 	subs.w	r8, r2, sl
 800616e:	eb63 090b 	sbc.w	r9, r3, fp
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800617e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006182:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006186:	ebb2 0408 	subs.w	r4, r2, r8
 800618a:	eb63 0509 	sbc.w	r5, r3, r9
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	00eb      	lsls	r3, r5, #3
 8006198:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800619c:	00e2      	lsls	r2, r4, #3
 800619e:	4614      	mov	r4, r2
 80061a0:	461d      	mov	r5, r3
 80061a2:	eb14 030a 	adds.w	r3, r4, sl
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	eb45 030b 	adc.w	r3, r5, fp
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061ba:	4629      	mov	r1, r5
 80061bc:	028b      	lsls	r3, r1, #10
 80061be:	4621      	mov	r1, r4
 80061c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061c4:	4621      	mov	r1, r4
 80061c6:	028a      	lsls	r2, r1, #10
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ce:	2200      	movs	r2, #0
 80061d0:	60bb      	str	r3, [r7, #8]
 80061d2:	60fa      	str	r2, [r7, #12]
 80061d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061d8:	f7fa fd56 	bl	8000c88 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4613      	mov	r3, r2
 80061e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061e4:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <HAL_RCC_GetSysClockFreq+0x180>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	3301      	adds	r3, #1
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80061f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061fe:	e002      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <HAL_RCC_GetSysClockFreq+0x184>)
 8006202:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006208:	4618      	mov	r0, r3
 800620a:	3740      	adds	r7, #64	; 0x40
 800620c:	46bd      	mov	sp, r7
 800620e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006212:	bf00      	nop
 8006214:	40023800 	.word	0x40023800
 8006218:	00f42400 	.word	0x00f42400
 800621c:	017d7840 	.word	0x017d7840

08006220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006224:	4b03      	ldr	r3, [pc, #12]	; (8006234 <HAL_RCC_GetHCLKFreq+0x14>)
 8006226:	681b      	ldr	r3, [r3, #0]
}
 8006228:	4618      	mov	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20000000 	.word	0x20000000

08006238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800623c:	f7ff fff0 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b05      	ldr	r3, [pc, #20]	; (8006258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	0a9b      	lsrs	r3, r3, #10
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4903      	ldr	r1, [pc, #12]	; (800625c <HAL_RCC_GetPCLK1Freq+0x24>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40023800 	.word	0x40023800
 800625c:	0800f72c 	.word	0x0800f72c

08006260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006264:	f7ff ffdc 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8006268:	4602      	mov	r2, r0
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	0b5b      	lsrs	r3, r3, #13
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	4903      	ldr	r1, [pc, #12]	; (8006284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006276:	5ccb      	ldrb	r3, [r1, r3]
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40023800 	.word	0x40023800
 8006284:	0800f72c 	.word	0x0800f72c

08006288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e041      	b.n	800631e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fd fc4c 	bl	8003b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f000 fe6a 	bl	8006fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d001      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e04e      	b.n	80063de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a23      	ldr	r2, [pc, #140]	; (80063ec <HAL_TIM_Base_Start_IT+0xc4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d022      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d01d      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1f      	ldr	r2, [pc, #124]	; (80063f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d018      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1e      	ldr	r2, [pc, #120]	; (80063f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1c      	ldr	r2, [pc, #112]	; (80063f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00e      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1b      	ldr	r2, [pc, #108]	; (80063fc <HAL_TIM_Base_Start_IT+0xd4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d009      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a19      	ldr	r2, [pc, #100]	; (8006400 <HAL_TIM_Base_Start_IT+0xd8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d004      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x80>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a18      	ldr	r2, [pc, #96]	; (8006404 <HAL_TIM_Base_Start_IT+0xdc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d111      	bne.n	80063cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b06      	cmp	r3, #6
 80063b8:	d010      	beq.n	80063dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ca:	e007      	b.n	80063dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40010400 	.word	0x40010400
 8006400:	40014000 	.word	0x40014000
 8006404:	40001800 	.word	0x40001800

08006408 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e041      	b.n	800649e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f839 	bl	80064a6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3304      	adds	r3, #4
 8006444:	4619      	mov	r1, r3
 8006446:	4610      	mov	r0, r2
 8006448:	f000 fdaa 	bl	8006fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e041      	b.n	8006550 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d106      	bne.n	80064e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f839 	bl	8006558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2202      	movs	r2, #2
 80064ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	4610      	mov	r0, r2
 80064fa:	f000 fd51 	bl	8006fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d109      	bne.n	8006590 <HAL_TIM_PWM_Start+0x24>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b01      	cmp	r3, #1
 8006586:	bf14      	ite	ne
 8006588:	2301      	movne	r3, #1
 800658a:	2300      	moveq	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	e022      	b.n	80065d6 <HAL_TIM_PWM_Start+0x6a>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b04      	cmp	r3, #4
 8006594:	d109      	bne.n	80065aa <HAL_TIM_PWM_Start+0x3e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b01      	cmp	r3, #1
 80065a0:	bf14      	ite	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	2300      	moveq	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	e015      	b.n	80065d6 <HAL_TIM_PWM_Start+0x6a>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d109      	bne.n	80065c4 <HAL_TIM_PWM_Start+0x58>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	bf14      	ite	ne
 80065bc:	2301      	movne	r3, #1
 80065be:	2300      	moveq	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	e008      	b.n	80065d6 <HAL_TIM_PWM_Start+0x6a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	bf14      	ite	ne
 80065d0:	2301      	movne	r3, #1
 80065d2:	2300      	moveq	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e07c      	b.n	80066d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d104      	bne.n	80065ee <HAL_TIM_PWM_Start+0x82>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ec:	e013      	b.n	8006616 <HAL_TIM_PWM_Start+0xaa>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d104      	bne.n	80065fe <HAL_TIM_PWM_Start+0x92>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065fc:	e00b      	b.n	8006616 <HAL_TIM_PWM_Start+0xaa>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d104      	bne.n	800660e <HAL_TIM_PWM_Start+0xa2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800660c:	e003      	b.n	8006616 <HAL_TIM_PWM_Start+0xaa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2201      	movs	r2, #1
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 ffb4 	bl	800758c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2d      	ldr	r2, [pc, #180]	; (80066e0 <HAL_TIM_PWM_Start+0x174>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_TIM_PWM_Start+0xcc>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2c      	ldr	r2, [pc, #176]	; (80066e4 <HAL_TIM_PWM_Start+0x178>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d101      	bne.n	800663c <HAL_TIM_PWM_Start+0xd0>
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <HAL_TIM_PWM_Start+0xd2>
 800663c:	2300      	movs	r3, #0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006650:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a22      	ldr	r2, [pc, #136]	; (80066e0 <HAL_TIM_PWM_Start+0x174>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d022      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006664:	d01d      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <HAL_TIM_PWM_Start+0x17c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d018      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1d      	ldr	r2, [pc, #116]	; (80066ec <HAL_TIM_PWM_Start+0x180>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d013      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <HAL_TIM_PWM_Start+0x184>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00e      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a16      	ldr	r2, [pc, #88]	; (80066e4 <HAL_TIM_PWM_Start+0x178>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d009      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <HAL_TIM_PWM_Start+0x188>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d004      	beq.n	80066a2 <HAL_TIM_PWM_Start+0x136>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a16      	ldr	r2, [pc, #88]	; (80066f8 <HAL_TIM_PWM_Start+0x18c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d111      	bne.n	80066c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b06      	cmp	r3, #6
 80066b2:	d010      	beq.n	80066d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c4:	e007      	b.n	80066d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0201 	orr.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40010400 	.word	0x40010400
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40001800 	.word	0x40001800

080066fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e097      	b.n	8006840 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d106      	bne.n	800672a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7fd fa65 	bl	8003bf4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006740:	f023 0307 	bic.w	r3, r3, #7
 8006744:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3304      	adds	r3, #4
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f000 fc25 	bl	8006fa0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	4313      	orrs	r3, r2
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800679c:	f023 030c 	bic.w	r3, r3, #12
 80067a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	4313      	orrs	r3, r2
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	011a      	lsls	r2, r3, #4
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	031b      	lsls	r3, r3, #12
 80067cc:	4313      	orrs	r3, r2
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80067da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80067e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	4313      	orrs	r3, r2
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006858:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006860:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006868:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006870:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d110      	bne.n	800689a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d102      	bne.n	8006884 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800687e:	7b7b      	ldrb	r3, [r7, #13]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d001      	beq.n	8006888 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e089      	b.n	800699c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006898:	e031      	b.n	80068fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b04      	cmp	r3, #4
 800689e:	d110      	bne.n	80068c2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d102      	bne.n	80068ac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068a6:	7b3b      	ldrb	r3, [r7, #12]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d001      	beq.n	80068b0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e075      	b.n	800699c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068c0:	e01d      	b.n	80068fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d108      	bne.n	80068da <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d105      	bne.n	80068da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068ce:	7b7b      	ldrb	r3, [r7, #13]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d102      	bne.n	80068da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068d4:	7b3b      	ldrb	r3, [r7, #12]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d001      	beq.n	80068de <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e05e      	b.n	800699c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2202      	movs	r2, #2
 80068f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <HAL_TIM_Encoder_Start_IT+0xc4>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b04      	cmp	r3, #4
 8006908:	d010      	beq.n	800692c <HAL_TIM_Encoder_Start_IT+0xe4>
 800690a:	e01f      	b.n	800694c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2201      	movs	r2, #1
 8006912:	2100      	movs	r1, #0
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fe39 	bl	800758c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0202 	orr.w	r2, r2, #2
 8006928:	60da      	str	r2, [r3, #12]
      break;
 800692a:	e02e      	b.n	800698a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2201      	movs	r2, #1
 8006932:	2104      	movs	r1, #4
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fe29 	bl	800758c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0204 	orr.w	r2, r2, #4
 8006948:	60da      	str	r2, [r3, #12]
      break;
 800694a:	e01e      	b.n	800698a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2201      	movs	r2, #1
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fe19 	bl	800758c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2201      	movs	r2, #1
 8006960:	2104      	movs	r1, #4
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fe12 	bl	800758c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0202 	orr.w	r2, r2, #2
 8006976:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0204 	orr.w	r2, r2, #4
 8006986:	60da      	str	r2, [r3, #12]
      break;
 8006988:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0201 	orr.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d020      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01b      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0202 	mvn.w	r2, #2
 80069d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fab7 	bl	8006f62 <HAL_TIM_IC_CaptureCallback>
 80069f4:	e005      	b.n	8006a02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 faa9 	bl	8006f4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 faba 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d020      	beq.n	8006a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01b      	beq.n	8006a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0204 	mvn.w	r2, #4
 8006a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa91 	bl	8006f62 <HAL_TIM_IC_CaptureCallback>
 8006a40:	e005      	b.n	8006a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa83 	bl	8006f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fa94 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d020      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01b      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0208 	mvn.w	r2, #8
 8006a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2204      	movs	r2, #4
 8006a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa6b 	bl	8006f62 <HAL_TIM_IC_CaptureCallback>
 8006a8c:	e005      	b.n	8006a9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fa5d 	bl	8006f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fa6e 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d020      	beq.n	8006aec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01b      	beq.n	8006aec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0210 	mvn.w	r2, #16
 8006abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fa45 	bl	8006f62 <HAL_TIM_IC_CaptureCallback>
 8006ad8:	e005      	b.n	8006ae6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fa37 	bl	8006f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fa48 	bl	8006f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00c      	beq.n	8006b10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d007      	beq.n	8006b10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0201 	mvn.w	r2, #1
 8006b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fb fa86 	bl	800201c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00c      	beq.n	8006b34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d007      	beq.n	8006b34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fe2a 	bl	8007788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00c      	beq.n	8006b58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d007      	beq.n	8006b58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa19 	bl	8006f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00c      	beq.n	8006b7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d007      	beq.n	8006b7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0220 	mvn.w	r2, #32
 8006b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fdfc 	bl	8007774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d101      	bne.n	8006ba2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e048      	b.n	8006c34 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b0c      	cmp	r3, #12
 8006bae:	d839      	bhi.n	8006c24 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006bb0:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb6:	bf00      	nop
 8006bb8:	08006bed 	.word	0x08006bed
 8006bbc:	08006c25 	.word	0x08006c25
 8006bc0:	08006c25 	.word	0x08006c25
 8006bc4:	08006c25 	.word	0x08006c25
 8006bc8:	08006bfb 	.word	0x08006bfb
 8006bcc:	08006c25 	.word	0x08006c25
 8006bd0:	08006c25 	.word	0x08006c25
 8006bd4:	08006c25 	.word	0x08006c25
 8006bd8:	08006c09 	.word	0x08006c09
 8006bdc:	08006c25 	.word	0x08006c25
 8006be0:	08006c25 	.word	0x08006c25
 8006be4:	08006c25 	.word	0x08006c25
 8006be8:	08006c17 	.word	0x08006c17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fa80 	bl	80070f8 <TIM_OC1_SetConfig>
      break;
 8006bf8:	e017      	b.n	8006c2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fae9 	bl	80071d8 <TIM_OC2_SetConfig>
      break;
 8006c06:	e010      	b.n	8006c2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68b9      	ldr	r1, [r7, #8]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fb58 	bl	80072c4 <TIM_OC3_SetConfig>
      break;
 8006c14:	e009      	b.n	8006c2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fbc5 	bl	80073ac <TIM_OC4_SetConfig>
      break;
 8006c22:	e002      	b.n	8006c2a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	75fb      	strb	r3, [r7, #23]
      break;
 8006c28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e0ae      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b0c      	cmp	r3, #12
 8006c66:	f200 809f 	bhi.w	8006da8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c6a:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c70:	08006ca5 	.word	0x08006ca5
 8006c74:	08006da9 	.word	0x08006da9
 8006c78:	08006da9 	.word	0x08006da9
 8006c7c:	08006da9 	.word	0x08006da9
 8006c80:	08006ce5 	.word	0x08006ce5
 8006c84:	08006da9 	.word	0x08006da9
 8006c88:	08006da9 	.word	0x08006da9
 8006c8c:	08006da9 	.word	0x08006da9
 8006c90:	08006d27 	.word	0x08006d27
 8006c94:	08006da9 	.word	0x08006da9
 8006c98:	08006da9 	.word	0x08006da9
 8006c9c:	08006da9 	.word	0x08006da9
 8006ca0:	08006d67 	.word	0x08006d67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fa24 	bl	80070f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0208 	orr.w	r2, r2, #8
 8006cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0204 	bic.w	r2, r2, #4
 8006cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6999      	ldr	r1, [r3, #24]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	691a      	ldr	r2, [r3, #16]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	619a      	str	r2, [r3, #24]
      break;
 8006ce2:	e064      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fa74 	bl	80071d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6999      	ldr	r1, [r3, #24]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	021a      	lsls	r2, r3, #8
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	619a      	str	r2, [r3, #24]
      break;
 8006d24:	e043      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fac9 	bl	80072c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69da      	ldr	r2, [r3, #28]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0208 	orr.w	r2, r2, #8
 8006d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0204 	bic.w	r2, r2, #4
 8006d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69d9      	ldr	r1, [r3, #28]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	61da      	str	r2, [r3, #28]
      break;
 8006d64:	e023      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fb1d 	bl	80073ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69da      	ldr	r2, [r3, #28]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69d9      	ldr	r1, [r3, #28]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	021a      	lsls	r2, r3, #8
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	61da      	str	r2, [r3, #28]
      break;
 8006da6:	e002      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
      break;
 8006dac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_TIM_ConfigClockSource+0x1c>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e0b4      	b.n	8006f46 <HAL_TIM_ConfigClockSource+0x186>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e14:	d03e      	beq.n	8006e94 <HAL_TIM_ConfigClockSource+0xd4>
 8006e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1a:	f200 8087 	bhi.w	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e22:	f000 8086 	beq.w	8006f32 <HAL_TIM_ConfigClockSource+0x172>
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2a:	d87f      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e2c:	2b70      	cmp	r3, #112	; 0x70
 8006e2e:	d01a      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0xa6>
 8006e30:	2b70      	cmp	r3, #112	; 0x70
 8006e32:	d87b      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e34:	2b60      	cmp	r3, #96	; 0x60
 8006e36:	d050      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x11a>
 8006e38:	2b60      	cmp	r3, #96	; 0x60
 8006e3a:	d877      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e3c:	2b50      	cmp	r3, #80	; 0x50
 8006e3e:	d03c      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0xfa>
 8006e40:	2b50      	cmp	r3, #80	; 0x50
 8006e42:	d873      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e44:	2b40      	cmp	r3, #64	; 0x40
 8006e46:	d058      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x13a>
 8006e48:	2b40      	cmp	r3, #64	; 0x40
 8006e4a:	d86f      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e4c:	2b30      	cmp	r3, #48	; 0x30
 8006e4e:	d064      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x15a>
 8006e50:	2b30      	cmp	r3, #48	; 0x30
 8006e52:	d86b      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	d060      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x15a>
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d867      	bhi.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d05c      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x15a>
 8006e60:	2b10      	cmp	r3, #16
 8006e62:	d05a      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x15a>
 8006e64:	e062      	b.n	8006f2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e76:	f000 fb69 	bl	800754c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	609a      	str	r2, [r3, #8]
      break;
 8006e92:	e04f      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ea4:	f000 fb52 	bl	800754c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eb6:	609a      	str	r2, [r3, #8]
      break;
 8006eb8:	e03c      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f000 fac6 	bl	8007458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2150      	movs	r1, #80	; 0x50
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fb1f 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006ed8:	e02c      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f000 fae5 	bl	80074b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2160      	movs	r1, #96	; 0x60
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 fb0f 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006ef8:	e01c      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f06:	461a      	mov	r2, r3
 8006f08:	f000 faa6 	bl	8007458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2140      	movs	r1, #64	; 0x40
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 faff 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006f18:	e00c      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4619      	mov	r1, r3
 8006f24:	4610      	mov	r0, r2
 8006f26:	f000 faf6 	bl	8007516 <TIM_ITRx_SetConfig>
      break;
 8006f2a:	e003      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f30:	e000      	b.n	8006f34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
	...

08006fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a46      	ldr	r2, [pc, #280]	; (80070cc <TIM_Base_SetConfig+0x12c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d013      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbe:	d00f      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a43      	ldr	r2, [pc, #268]	; (80070d0 <TIM_Base_SetConfig+0x130>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00b      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a42      	ldr	r2, [pc, #264]	; (80070d4 <TIM_Base_SetConfig+0x134>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d007      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a41      	ldr	r2, [pc, #260]	; (80070d8 <TIM_Base_SetConfig+0x138>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a40      	ldr	r2, [pc, #256]	; (80070dc <TIM_Base_SetConfig+0x13c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d108      	bne.n	8006ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a35      	ldr	r2, [pc, #212]	; (80070cc <TIM_Base_SetConfig+0x12c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d02b      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007000:	d027      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a32      	ldr	r2, [pc, #200]	; (80070d0 <TIM_Base_SetConfig+0x130>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d023      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a31      	ldr	r2, [pc, #196]	; (80070d4 <TIM_Base_SetConfig+0x134>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d01f      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a30      	ldr	r2, [pc, #192]	; (80070d8 <TIM_Base_SetConfig+0x138>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d01b      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a2f      	ldr	r2, [pc, #188]	; (80070dc <TIM_Base_SetConfig+0x13c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d017      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a2e      	ldr	r2, [pc, #184]	; (80070e0 <TIM_Base_SetConfig+0x140>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a2d      	ldr	r2, [pc, #180]	; (80070e4 <TIM_Base_SetConfig+0x144>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00f      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a2c      	ldr	r2, [pc, #176]	; (80070e8 <TIM_Base_SetConfig+0x148>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00b      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a2b      	ldr	r2, [pc, #172]	; (80070ec <TIM_Base_SetConfig+0x14c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d007      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a2a      	ldr	r2, [pc, #168]	; (80070f0 <TIM_Base_SetConfig+0x150>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d003      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a29      	ldr	r2, [pc, #164]	; (80070f4 <TIM_Base_SetConfig+0x154>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d108      	bne.n	8007064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a10      	ldr	r2, [pc, #64]	; (80070cc <TIM_Base_SetConfig+0x12c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_Base_SetConfig+0xf8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a12      	ldr	r2, [pc, #72]	; (80070dc <TIM_Base_SetConfig+0x13c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d103      	bne.n	80070a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	691a      	ldr	r2, [r3, #16]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d105      	bne.n	80070be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f023 0201 	bic.w	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	611a      	str	r2, [r3, #16]
  }
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40000400 	.word	0x40000400
 80070d4:	40000800 	.word	0x40000800
 80070d8:	40000c00 	.word	0x40000c00
 80070dc:	40010400 	.word	0x40010400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40014400 	.word	0x40014400
 80070e8:	40014800 	.word	0x40014800
 80070ec:	40001800 	.word	0x40001800
 80070f0:	40001c00 	.word	0x40001c00
 80070f4:	40002000 	.word	0x40002000

080070f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	f023 0201 	bic.w	r2, r3, #1
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f023 0302 	bic.w	r3, r3, #2
 8007140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a20      	ldr	r2, [pc, #128]	; (80071d0 <TIM_OC1_SetConfig+0xd8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_OC1_SetConfig+0x64>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a1f      	ldr	r2, [pc, #124]	; (80071d4 <TIM_OC1_SetConfig+0xdc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d10c      	bne.n	8007176 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f023 0308 	bic.w	r3, r3, #8
 8007162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f023 0304 	bic.w	r3, r3, #4
 8007174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <TIM_OC1_SetConfig+0xd8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d003      	beq.n	8007186 <TIM_OC1_SetConfig+0x8e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a14      	ldr	r2, [pc, #80]	; (80071d4 <TIM_OC1_SetConfig+0xdc>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d111      	bne.n	80071aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800718c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	621a      	str	r2, [r3, #32]
}
 80071c4:	bf00      	nop
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	40010000 	.word	0x40010000
 80071d4:	40010400 	.word	0x40010400

080071d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	f023 0210 	bic.w	r2, r3, #16
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f023 0320 	bic.w	r3, r3, #32
 8007222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a22      	ldr	r2, [pc, #136]	; (80072bc <TIM_OC2_SetConfig+0xe4>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_OC2_SetConfig+0x68>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a21      	ldr	r2, [pc, #132]	; (80072c0 <TIM_OC2_SetConfig+0xe8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d10d      	bne.n	800725c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a17      	ldr	r2, [pc, #92]	; (80072bc <TIM_OC2_SetConfig+0xe4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <TIM_OC2_SetConfig+0x94>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a16      	ldr	r2, [pc, #88]	; (80072c0 <TIM_OC2_SetConfig+0xe8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d113      	bne.n	8007294 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800727a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40010400 	.word	0x40010400

080072c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0303 	bic.w	r3, r3, #3
 80072fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800730c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a21      	ldr	r2, [pc, #132]	; (80073a4 <TIM_OC3_SetConfig+0xe0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d003      	beq.n	800732a <TIM_OC3_SetConfig+0x66>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a20      	ldr	r2, [pc, #128]	; (80073a8 <TIM_OC3_SetConfig+0xe4>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d10d      	bne.n	8007346 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <TIM_OC3_SetConfig+0xe0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d003      	beq.n	8007356 <TIM_OC3_SetConfig+0x92>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a15      	ldr	r2, [pc, #84]	; (80073a8 <TIM_OC3_SetConfig+0xe4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d113      	bne.n	800737e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800735c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	4313      	orrs	r3, r2
 800737c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	621a      	str	r2, [r3, #32]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	40010000 	.word	0x40010000
 80073a8:	40010400 	.word	0x40010400

080073ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	031b      	lsls	r3, r3, #12
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a12      	ldr	r2, [pc, #72]	; (8007450 <TIM_OC4_SetConfig+0xa4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d003      	beq.n	8007414 <TIM_OC4_SetConfig+0x68>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a11      	ldr	r2, [pc, #68]	; (8007454 <TIM_OC4_SetConfig+0xa8>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d109      	bne.n	8007428 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800741a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	019b      	lsls	r3, r3, #6
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40010000 	.word	0x40010000
 8007454:	40010400 	.word	0x40010400

08007458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f023 0201 	bic.w	r2, r3, #1
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4313      	orrs	r3, r2
 800748c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f023 030a 	bic.w	r3, r3, #10
 8007494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b087      	sub	sp, #28
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	f023 0210 	bic.w	r2, r3, #16
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	031b      	lsls	r3, r3, #12
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	621a      	str	r2, [r3, #32]
}
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4313      	orrs	r3, r2
 8007534:	f043 0307 	orr.w	r3, r3, #7
 8007538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	609a      	str	r2, [r3, #8]
}
 8007540:	bf00      	nop
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	021a      	lsls	r2, r3, #8
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	431a      	orrs	r2, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	4313      	orrs	r3, r2
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	609a      	str	r2, [r3, #8]
}
 8007580:	bf00      	nop
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f003 031f 	and.w	r3, r3, #31
 800759e:	2201      	movs	r2, #1
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6a1a      	ldr	r2, [r3, #32]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	43db      	mvns	r3, r3
 80075ae:	401a      	ands	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a1a      	ldr	r2, [r3, #32]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	fa01 f303 	lsl.w	r3, r1, r3
 80075c4:	431a      	orrs	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	621a      	str	r2, [r3, #32]
}
 80075ca:	bf00      	nop
 80075cc:	371c      	adds	r7, #28
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
	...

080075d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e05a      	b.n	80076a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a21      	ldr	r2, [pc, #132]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d022      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763c:	d01d      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1d      	ldr	r2, [pc, #116]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d018      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1b      	ldr	r2, [pc, #108]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d013      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1a      	ldr	r2, [pc, #104]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00e      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a18      	ldr	r2, [pc, #96]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d009      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d10c      	bne.n	8007694 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	4313      	orrs	r3, r2
 800768a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40010000 	.word	0x40010000
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800
 80076c0:	40000c00 	.word	0x40000c00
 80076c4:	40010400 	.word	0x40010400
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40001800 	.word	0x40001800

080076d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e03d      	b.n	8007768 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e042      	b.n	8007834 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fc fb12 	bl	8003dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2224      	movs	r2, #36	; 0x24
 80077cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fdbd 	bl	8008360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	695a      	ldr	r2, [r3, #20]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007804:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007814:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2220      	movs	r2, #32
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	; 0x28
 8007840:	af02      	add	r7, sp, #8
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	4613      	mov	r3, r2
 800784a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b20      	cmp	r3, #32
 800785a:	d175      	bne.n	8007948 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_UART_Transmit+0x2c>
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e06e      	b.n	800794a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2221      	movs	r2, #33	; 0x21
 8007876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800787a:	f7fc fcbf 	bl	80041fc <HAL_GetTick>
 800787e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	88fa      	ldrh	r2, [r7, #6]
 8007884:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007894:	d108      	bne.n	80078a8 <HAL_UART_Transmit+0x6c>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d104      	bne.n	80078a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	61bb      	str	r3, [r7, #24]
 80078a6:	e003      	b.n	80078b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078b0:	e02e      	b.n	8007910 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2200      	movs	r2, #0
 80078ba:	2180      	movs	r1, #128	; 0x80
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fb1f 	bl	8007f00 <UART_WaitOnFlagUntilTimeout>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d005      	beq.n	80078d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e03a      	b.n	800794a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10b      	bne.n	80078f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	3302      	adds	r3, #2
 80078ee:	61bb      	str	r3, [r7, #24]
 80078f0:	e007      	b.n	8007902 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	3301      	adds	r3, #1
 8007900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1cb      	bne.n	80078b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2200      	movs	r2, #0
 8007922:	2140      	movs	r1, #64	; 0x40
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 faeb 	bl	8007f00 <UART_WaitOnFlagUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2220      	movs	r2, #32
 8007934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e006      	b.n	800794a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2220      	movs	r2, #32
 8007940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	e000      	b.n	800794a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007948:	2302      	movs	r3, #2
  }
}
 800794a:	4618      	mov	r0, r3
 800794c:	3720      	adds	r7, #32
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	4613      	mov	r3, r2
 800795e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b20      	cmp	r3, #32
 800796a:	d112      	bne.n	8007992 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <HAL_UART_Receive_IT+0x26>
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e00b      	b.n	8007994 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	461a      	mov	r2, r3
 8007986:	68b9      	ldr	r1, [r7, #8]
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 fb12 	bl	8007fb2 <UART_Start_Receive_IT>
 800798e:	4603      	mov	r3, r0
 8007990:	e000      	b.n	8007994 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007992:	2302      	movs	r3, #2
  }
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b0ba      	sub	sp, #232	; 0xe8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80079da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10f      	bne.n	8007a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <HAL_UART_IRQHandler+0x66>
 80079ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fbf2 	bl	80081e4 <UART_Receive_IT>
      return;
 8007a00:	e25b      	b.n	8007eba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 80de 	beq.w	8007bc8 <HAL_UART_IRQHandler+0x22c>
 8007a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d106      	bne.n	8007a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80d1 	beq.w	8007bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00b      	beq.n	8007a4a <HAL_UART_IRQHandler+0xae>
 8007a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d005      	beq.n	8007a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a42:	f043 0201 	orr.w	r2, r3, #1
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4e:	f003 0304 	and.w	r3, r3, #4
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00b      	beq.n	8007a6e <HAL_UART_IRQHandler+0xd2>
 8007a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a66:	f043 0202 	orr.w	r2, r3, #2
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00b      	beq.n	8007a92 <HAL_UART_IRQHandler+0xf6>
 8007a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8a:	f043 0204 	orr.w	r2, r3, #4
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d011      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x126>
 8007a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d105      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aba:	f043 0208 	orr.w	r2, r3, #8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 81f2 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d008      	beq.n	8007aea <HAL_UART_IRQHandler+0x14e>
 8007ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fb7d 	bl	80081e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af4:	2b40      	cmp	r3, #64	; 0x40
 8007af6:	bf0c      	ite	eq
 8007af8:	2301      	moveq	r3, #1
 8007afa:	2300      	movne	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b06:	f003 0308 	and.w	r3, r3, #8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d103      	bne.n	8007b16 <HAL_UART_IRQHandler+0x17a>
 8007b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d04f      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fa85 	bl	8008026 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	d141      	bne.n	8007bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3314      	adds	r3, #20
 8007b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3314      	adds	r3, #20
 8007b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1d9      	bne.n	8007b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d013      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	4a7e      	ldr	r2, [pc, #504]	; (8007d7c <HAL_UART_IRQHandler+0x3e0>)
 8007b84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fc fce7 	bl	800455e <HAL_DMA_Abort_IT>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d016      	beq.n	8007bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba4:	e00e      	b.n	8007bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f994 	bl	8007ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bac:	e00a      	b.n	8007bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f990 	bl	8007ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	e006      	b.n	8007bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f98c 	bl	8007ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007bc2:	e175      	b.n	8007eb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc4:	bf00      	nop
    return;
 8007bc6:	e173      	b.n	8007eb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	f040 814f 	bne.w	8007e70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd6:	f003 0310 	and.w	r3, r3, #16
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 8148 	beq.w	8007e70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be4:	f003 0310 	and.w	r3, r3, #16
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 8141 	beq.w	8007e70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60bb      	str	r3, [r7, #8]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60bb      	str	r3, [r7, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	60bb      	str	r3, [r7, #8]
 8007c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0e:	2b40      	cmp	r3, #64	; 0x40
 8007c10:	f040 80b6 	bne.w	8007d80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8145 	beq.w	8007eb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c32:	429a      	cmp	r2, r3
 8007c34:	f080 813e 	bcs.w	8007eb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4a:	f000 8088 	beq.w	8007d5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	330c      	adds	r3, #12
 8007c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	330c      	adds	r3, #12
 8007c76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1d9      	bne.n	8007c4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3314      	adds	r3, #20
 8007ca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cac:	f023 0301 	bic.w	r3, r3, #1
 8007cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3314      	adds	r3, #20
 8007cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e1      	bne.n	8007c9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3314      	adds	r3, #20
 8007cdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3314      	adds	r3, #20
 8007cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e3      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	330c      	adds	r3, #12
 8007d22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d26:	e853 3f00 	ldrex	r3, [r3]
 8007d2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d2e:	f023 0310 	bic.w	r3, r3, #16
 8007d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d40:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e3      	bne.n	8007d1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fc fb90 	bl	800447e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f8b7 	bl	8007ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d7a:	e09b      	b.n	8007eb4 <HAL_UART_IRQHandler+0x518>
 8007d7c:	080080ed 	.word	0x080080ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 808e 	beq.w	8007eb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8089 	beq.w	8007eb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	330c      	adds	r3, #12
 8007dac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	330c      	adds	r3, #12
 8007dc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007dca:	647a      	str	r2, [r7, #68]	; 0x44
 8007dcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e3      	bne.n	8007da6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3314      	adds	r3, #20
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	623b      	str	r3, [r7, #32]
   return(result);
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	f023 0301 	bic.w	r3, r3, #1
 8007df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3314      	adds	r3, #20
 8007dfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e02:	633a      	str	r2, [r7, #48]	; 0x30
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e3      	bne.n	8007dde <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	330c      	adds	r3, #12
 8007e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	e853 3f00 	ldrex	r3, [r3]
 8007e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0310 	bic.w	r3, r3, #16
 8007e3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	330c      	adds	r3, #12
 8007e44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e48:	61fa      	str	r2, [r7, #28]
 8007e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	69b9      	ldr	r1, [r7, #24]
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	617b      	str	r3, [r7, #20]
   return(result);
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e3      	bne.n	8007e24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f83d 	bl	8007ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e6e:	e023      	b.n	8007eb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d009      	beq.n	8007e90 <HAL_UART_IRQHandler+0x4f4>
 8007e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f943 	bl	8008114 <UART_Transmit_IT>
    return;
 8007e8e:	e014      	b.n	8007eba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00e      	beq.n	8007eba <HAL_UART_IRQHandler+0x51e>
 8007e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f983 	bl	80081b4 <UART_EndTransmit_IT>
    return;
 8007eae:	e004      	b.n	8007eba <HAL_UART_IRQHandler+0x51e>
    return;
 8007eb0:	bf00      	nop
 8007eb2:	e002      	b.n	8007eba <HAL_UART_IRQHandler+0x51e>
      return;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <HAL_UART_IRQHandler+0x51e>
      return;
 8007eb8:	bf00      	nop
  }
}
 8007eba:	37e8      	adds	r7, #232	; 0xe8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f10:	e03b      	b.n	8007f8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f18:	d037      	beq.n	8007f8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f1a:	f7fc f96f 	bl	80041fc <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	6a3a      	ldr	r2, [r7, #32]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d302      	bcc.n	8007f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e03a      	b.n	8007faa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d023      	beq.n	8007f8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b80      	cmp	r3, #128	; 0x80
 8007f46:	d020      	beq.n	8007f8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b40      	cmp	r3, #64	; 0x40
 8007f4c:	d01d      	beq.n	8007f8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d116      	bne.n	8007f8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	617b      	str	r3, [r7, #20]
 8007f70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 f857 	bl	8008026 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e00f      	b.n	8007faa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4013      	ands	r3, r2
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	bf0c      	ite	eq
 8007f9a:	2301      	moveq	r3, #1
 8007f9c:	2300      	movne	r3, #0
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d0b4      	beq.n	8007f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	88fa      	ldrh	r2, [r7, #6]
 8007fca:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	88fa      	ldrh	r2, [r7, #6]
 8007fd0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2222      	movs	r2, #34	; 0x22
 8007fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d007      	beq.n	8007ff8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ff6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	695a      	ldr	r2, [r3, #20]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0201 	orr.w	r2, r2, #1
 8008006:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0220 	orr.w	r2, r2, #32
 8008016:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008026:	b480      	push	{r7}
 8008028:	b095      	sub	sp, #84	; 0x54
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	330c      	adds	r3, #12
 8008034:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008044:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	330c      	adds	r3, #12
 800804c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800804e:	643a      	str	r2, [r7, #64]	; 0x40
 8008050:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e5      	bne.n	800802e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3314      	adds	r3, #20
 8008068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	61fb      	str	r3, [r7, #28]
   return(result);
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	f023 0301 	bic.w	r3, r3, #1
 8008078:	64bb      	str	r3, [r7, #72]	; 0x48
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3314      	adds	r3, #20
 8008080:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008082:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008084:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e5      	bne.n	8008062 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809a:	2b01      	cmp	r3, #1
 800809c:	d119      	bne.n	80080d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	330c      	adds	r3, #12
 80080a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f023 0310 	bic.w	r3, r3, #16
 80080b4:	647b      	str	r3, [r7, #68]	; 0x44
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	330c      	adds	r3, #12
 80080bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080be:	61ba      	str	r2, [r7, #24]
 80080c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	6979      	ldr	r1, [r7, #20]
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	613b      	str	r3, [r7, #16]
   return(result);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e5      	bne.n	800809e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80080e0:	bf00      	nop
 80080e2:	3754      	adds	r7, #84	; 0x54
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f7ff fee4 	bl	8007ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b21      	cmp	r3, #33	; 0x21
 8008126:	d13e      	bne.n	80081a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008130:	d114      	bne.n	800815c <UART_Transmit_IT+0x48>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d110      	bne.n	800815c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800814e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1b      	ldr	r3, [r3, #32]
 8008154:	1c9a      	adds	r2, r3, #2
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	621a      	str	r2, [r3, #32]
 800815a:	e008      	b.n	800816e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	1c59      	adds	r1, r3, #1
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6211      	str	r1, [r2, #32]
 8008166:	781a      	ldrb	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008172:	b29b      	uxth	r3, r3
 8008174:	3b01      	subs	r3, #1
 8008176:	b29b      	uxth	r3, r3
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	4619      	mov	r1, r3
 800817c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10f      	bne.n	80081a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008190:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e000      	b.n	80081a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081a6:	2302      	movs	r3, #2
  }
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2220      	movs	r2, #32
 80081d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff fe73 	bl	8007ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08c      	sub	sp, #48	; 0x30
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b22      	cmp	r3, #34	; 0x22
 80081f6:	f040 80ae 	bne.w	8008356 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008202:	d117      	bne.n	8008234 <UART_Receive_IT+0x50>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d113      	bne.n	8008234 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008214:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	b29b      	uxth	r3, r3
 800821e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008222:	b29a      	uxth	r2, r3
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822c:	1c9a      	adds	r2, r3, #2
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	629a      	str	r2, [r3, #40]	; 0x28
 8008232:	e026      	b.n	8008282 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800823a:	2300      	movs	r3, #0
 800823c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008246:	d007      	beq.n	8008258 <UART_Receive_IT+0x74>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <UART_Receive_IT+0x82>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d106      	bne.n	8008266 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	b2da      	uxtb	r2, r3
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008262:	701a      	strb	r2, [r3, #0]
 8008264:	e008      	b.n	8008278 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008272:	b2da      	uxtb	r2, r3
 8008274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008276:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008286:	b29b      	uxth	r3, r3
 8008288:	3b01      	subs	r3, #1
 800828a:	b29b      	uxth	r3, r3
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	4619      	mov	r1, r3
 8008290:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008292:	2b00      	cmp	r3, #0
 8008294:	d15d      	bne.n	8008352 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0220 	bic.w	r2, r2, #32
 80082a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	695a      	ldr	r2, [r3, #20]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0201 	bic.w	r2, r2, #1
 80082c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d135      	bne.n	8008348 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	330c      	adds	r3, #12
 80082e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	613b      	str	r3, [r7, #16]
   return(result);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f023 0310 	bic.w	r3, r3, #16
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	330c      	adds	r3, #12
 8008300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008302:	623a      	str	r2, [r7, #32]
 8008304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	69f9      	ldr	r1, [r7, #28]
 8008308:	6a3a      	ldr	r2, [r7, #32]
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e5      	bne.n	80082e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0310 	and.w	r3, r3, #16
 8008320:	2b10      	cmp	r3, #16
 8008322:	d10a      	bne.n	800833a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff fdd1 	bl	8007ee8 <HAL_UARTEx_RxEventCallback>
 8008346:	e002      	b.n	800834e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7f9 fe77 	bl	800203c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	e002      	b.n	8008358 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	e000      	b.n	8008358 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008356:	2302      	movs	r3, #2
  }
}
 8008358:	4618      	mov	r0, r3
 800835a:	3730      	adds	r7, #48	; 0x30
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008364:	b0c0      	sub	sp, #256	; 0x100
 8008366:	af00      	add	r7, sp, #0
 8008368:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837c:	68d9      	ldr	r1, [r3, #12]
 800837e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	ea40 0301 	orr.w	r3, r0, r1
 8008388:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800838a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	431a      	orrs	r2, r3
 8008398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	431a      	orrs	r2, r3
 80083a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80083ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80083b8:	f021 010c 	bic.w	r1, r1, #12
 80083bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083c6:	430b      	orrs	r3, r1
 80083c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80083d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083da:	6999      	ldr	r1, [r3, #24]
 80083dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	ea40 0301 	orr.w	r3, r0, r1
 80083e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	4b8f      	ldr	r3, [pc, #572]	; (800862c <UART_SetConfig+0x2cc>)
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d005      	beq.n	8008400 <UART_SetConfig+0xa0>
 80083f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	4b8d      	ldr	r3, [pc, #564]	; (8008630 <UART_SetConfig+0x2d0>)
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d104      	bne.n	800840a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008400:	f7fd ff2e 	bl	8006260 <HAL_RCC_GetPCLK2Freq>
 8008404:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008408:	e003      	b.n	8008412 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800840a:	f7fd ff15 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 800840e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800841c:	f040 810c 	bne.w	8008638 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008424:	2200      	movs	r2, #0
 8008426:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800842a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800842e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008432:	4622      	mov	r2, r4
 8008434:	462b      	mov	r3, r5
 8008436:	1891      	adds	r1, r2, r2
 8008438:	65b9      	str	r1, [r7, #88]	; 0x58
 800843a:	415b      	adcs	r3, r3
 800843c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800843e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008442:	4621      	mov	r1, r4
 8008444:	eb12 0801 	adds.w	r8, r2, r1
 8008448:	4629      	mov	r1, r5
 800844a:	eb43 0901 	adc.w	r9, r3, r1
 800844e:	f04f 0200 	mov.w	r2, #0
 8008452:	f04f 0300 	mov.w	r3, #0
 8008456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800845a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800845e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008462:	4690      	mov	r8, r2
 8008464:	4699      	mov	r9, r3
 8008466:	4623      	mov	r3, r4
 8008468:	eb18 0303 	adds.w	r3, r8, r3
 800846c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008470:	462b      	mov	r3, r5
 8008472:	eb49 0303 	adc.w	r3, r9, r3
 8008476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800847a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008486:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800848a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800848e:	460b      	mov	r3, r1
 8008490:	18db      	adds	r3, r3, r3
 8008492:	653b      	str	r3, [r7, #80]	; 0x50
 8008494:	4613      	mov	r3, r2
 8008496:	eb42 0303 	adc.w	r3, r2, r3
 800849a:	657b      	str	r3, [r7, #84]	; 0x54
 800849c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80084a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80084a4:	f7f8 fbf0 	bl	8000c88 <__aeabi_uldivmod>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4b61      	ldr	r3, [pc, #388]	; (8008634 <UART_SetConfig+0x2d4>)
 80084ae:	fba3 2302 	umull	r2, r3, r3, r2
 80084b2:	095b      	lsrs	r3, r3, #5
 80084b4:	011c      	lsls	r4, r3, #4
 80084b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80084c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80084c8:	4642      	mov	r2, r8
 80084ca:	464b      	mov	r3, r9
 80084cc:	1891      	adds	r1, r2, r2
 80084ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80084d0:	415b      	adcs	r3, r3
 80084d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084d8:	4641      	mov	r1, r8
 80084da:	eb12 0a01 	adds.w	sl, r2, r1
 80084de:	4649      	mov	r1, r9
 80084e0:	eb43 0b01 	adc.w	fp, r3, r1
 80084e4:	f04f 0200 	mov.w	r2, #0
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084f8:	4692      	mov	sl, r2
 80084fa:	469b      	mov	fp, r3
 80084fc:	4643      	mov	r3, r8
 80084fe:	eb1a 0303 	adds.w	r3, sl, r3
 8008502:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008506:	464b      	mov	r3, r9
 8008508:	eb4b 0303 	adc.w	r3, fp, r3
 800850c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800851c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008520:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008524:	460b      	mov	r3, r1
 8008526:	18db      	adds	r3, r3, r3
 8008528:	643b      	str	r3, [r7, #64]	; 0x40
 800852a:	4613      	mov	r3, r2
 800852c:	eb42 0303 	adc.w	r3, r2, r3
 8008530:	647b      	str	r3, [r7, #68]	; 0x44
 8008532:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008536:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800853a:	f7f8 fba5 	bl	8000c88 <__aeabi_uldivmod>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	4611      	mov	r1, r2
 8008544:	4b3b      	ldr	r3, [pc, #236]	; (8008634 <UART_SetConfig+0x2d4>)
 8008546:	fba3 2301 	umull	r2, r3, r3, r1
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	2264      	movs	r2, #100	; 0x64
 800854e:	fb02 f303 	mul.w	r3, r2, r3
 8008552:	1acb      	subs	r3, r1, r3
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800855a:	4b36      	ldr	r3, [pc, #216]	; (8008634 <UART_SetConfig+0x2d4>)
 800855c:	fba3 2302 	umull	r2, r3, r3, r2
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008568:	441c      	add	r4, r3
 800856a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800856e:	2200      	movs	r2, #0
 8008570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008574:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008578:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800857c:	4642      	mov	r2, r8
 800857e:	464b      	mov	r3, r9
 8008580:	1891      	adds	r1, r2, r2
 8008582:	63b9      	str	r1, [r7, #56]	; 0x38
 8008584:	415b      	adcs	r3, r3
 8008586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008588:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800858c:	4641      	mov	r1, r8
 800858e:	1851      	adds	r1, r2, r1
 8008590:	6339      	str	r1, [r7, #48]	; 0x30
 8008592:	4649      	mov	r1, r9
 8008594:	414b      	adcs	r3, r1
 8008596:	637b      	str	r3, [r7, #52]	; 0x34
 8008598:	f04f 0200 	mov.w	r2, #0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80085a4:	4659      	mov	r1, fp
 80085a6:	00cb      	lsls	r3, r1, #3
 80085a8:	4651      	mov	r1, sl
 80085aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085ae:	4651      	mov	r1, sl
 80085b0:	00ca      	lsls	r2, r1, #3
 80085b2:	4610      	mov	r0, r2
 80085b4:	4619      	mov	r1, r3
 80085b6:	4603      	mov	r3, r0
 80085b8:	4642      	mov	r2, r8
 80085ba:	189b      	adds	r3, r3, r2
 80085bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085c0:	464b      	mov	r3, r9
 80085c2:	460a      	mov	r2, r1
 80085c4:	eb42 0303 	adc.w	r3, r2, r3
 80085c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80085d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80085dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80085e0:	460b      	mov	r3, r1
 80085e2:	18db      	adds	r3, r3, r3
 80085e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80085e6:	4613      	mov	r3, r2
 80085e8:	eb42 0303 	adc.w	r3, r2, r3
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80085f6:	f7f8 fb47 	bl	8000c88 <__aeabi_uldivmod>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <UART_SetConfig+0x2d4>)
 8008600:	fba3 1302 	umull	r1, r3, r3, r2
 8008604:	095b      	lsrs	r3, r3, #5
 8008606:	2164      	movs	r1, #100	; 0x64
 8008608:	fb01 f303 	mul.w	r3, r1, r3
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	3332      	adds	r3, #50	; 0x32
 8008612:	4a08      	ldr	r2, [pc, #32]	; (8008634 <UART_SetConfig+0x2d4>)
 8008614:	fba2 2303 	umull	r2, r3, r2, r3
 8008618:	095b      	lsrs	r3, r3, #5
 800861a:	f003 0207 	and.w	r2, r3, #7
 800861e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4422      	add	r2, r4
 8008626:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008628:	e106      	b.n	8008838 <UART_SetConfig+0x4d8>
 800862a:	bf00      	nop
 800862c:	40011000 	.word	0x40011000
 8008630:	40011400 	.word	0x40011400
 8008634:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800863c:	2200      	movs	r2, #0
 800863e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008642:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008646:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800864a:	4642      	mov	r2, r8
 800864c:	464b      	mov	r3, r9
 800864e:	1891      	adds	r1, r2, r2
 8008650:	6239      	str	r1, [r7, #32]
 8008652:	415b      	adcs	r3, r3
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
 8008656:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800865a:	4641      	mov	r1, r8
 800865c:	1854      	adds	r4, r2, r1
 800865e:	4649      	mov	r1, r9
 8008660:	eb43 0501 	adc.w	r5, r3, r1
 8008664:	f04f 0200 	mov.w	r2, #0
 8008668:	f04f 0300 	mov.w	r3, #0
 800866c:	00eb      	lsls	r3, r5, #3
 800866e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008672:	00e2      	lsls	r2, r4, #3
 8008674:	4614      	mov	r4, r2
 8008676:	461d      	mov	r5, r3
 8008678:	4643      	mov	r3, r8
 800867a:	18e3      	adds	r3, r4, r3
 800867c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008680:	464b      	mov	r3, r9
 8008682:	eb45 0303 	adc.w	r3, r5, r3
 8008686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800868a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008696:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800869a:	f04f 0200 	mov.w	r2, #0
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80086a6:	4629      	mov	r1, r5
 80086a8:	008b      	lsls	r3, r1, #2
 80086aa:	4621      	mov	r1, r4
 80086ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086b0:	4621      	mov	r1, r4
 80086b2:	008a      	lsls	r2, r1, #2
 80086b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80086b8:	f7f8 fae6 	bl	8000c88 <__aeabi_uldivmod>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4b60      	ldr	r3, [pc, #384]	; (8008844 <UART_SetConfig+0x4e4>)
 80086c2:	fba3 2302 	umull	r2, r3, r3, r2
 80086c6:	095b      	lsrs	r3, r3, #5
 80086c8:	011c      	lsls	r4, r3, #4
 80086ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80086d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80086dc:	4642      	mov	r2, r8
 80086de:	464b      	mov	r3, r9
 80086e0:	1891      	adds	r1, r2, r2
 80086e2:	61b9      	str	r1, [r7, #24]
 80086e4:	415b      	adcs	r3, r3
 80086e6:	61fb      	str	r3, [r7, #28]
 80086e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086ec:	4641      	mov	r1, r8
 80086ee:	1851      	adds	r1, r2, r1
 80086f0:	6139      	str	r1, [r7, #16]
 80086f2:	4649      	mov	r1, r9
 80086f4:	414b      	adcs	r3, r1
 80086f6:	617b      	str	r3, [r7, #20]
 80086f8:	f04f 0200 	mov.w	r2, #0
 80086fc:	f04f 0300 	mov.w	r3, #0
 8008700:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008704:	4659      	mov	r1, fp
 8008706:	00cb      	lsls	r3, r1, #3
 8008708:	4651      	mov	r1, sl
 800870a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800870e:	4651      	mov	r1, sl
 8008710:	00ca      	lsls	r2, r1, #3
 8008712:	4610      	mov	r0, r2
 8008714:	4619      	mov	r1, r3
 8008716:	4603      	mov	r3, r0
 8008718:	4642      	mov	r2, r8
 800871a:	189b      	adds	r3, r3, r2
 800871c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008720:	464b      	mov	r3, r9
 8008722:	460a      	mov	r2, r1
 8008724:	eb42 0303 	adc.w	r3, r2, r3
 8008728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800872c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	67bb      	str	r3, [r7, #120]	; 0x78
 8008736:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008738:	f04f 0200 	mov.w	r2, #0
 800873c:	f04f 0300 	mov.w	r3, #0
 8008740:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008744:	4649      	mov	r1, r9
 8008746:	008b      	lsls	r3, r1, #2
 8008748:	4641      	mov	r1, r8
 800874a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800874e:	4641      	mov	r1, r8
 8008750:	008a      	lsls	r2, r1, #2
 8008752:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008756:	f7f8 fa97 	bl	8000c88 <__aeabi_uldivmod>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	4611      	mov	r1, r2
 8008760:	4b38      	ldr	r3, [pc, #224]	; (8008844 <UART_SetConfig+0x4e4>)
 8008762:	fba3 2301 	umull	r2, r3, r3, r1
 8008766:	095b      	lsrs	r3, r3, #5
 8008768:	2264      	movs	r2, #100	; 0x64
 800876a:	fb02 f303 	mul.w	r3, r2, r3
 800876e:	1acb      	subs	r3, r1, r3
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	3332      	adds	r3, #50	; 0x32
 8008774:	4a33      	ldr	r2, [pc, #204]	; (8008844 <UART_SetConfig+0x4e4>)
 8008776:	fba2 2303 	umull	r2, r3, r2, r3
 800877a:	095b      	lsrs	r3, r3, #5
 800877c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008780:	441c      	add	r4, r3
 8008782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008786:	2200      	movs	r2, #0
 8008788:	673b      	str	r3, [r7, #112]	; 0x70
 800878a:	677a      	str	r2, [r7, #116]	; 0x74
 800878c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008790:	4642      	mov	r2, r8
 8008792:	464b      	mov	r3, r9
 8008794:	1891      	adds	r1, r2, r2
 8008796:	60b9      	str	r1, [r7, #8]
 8008798:	415b      	adcs	r3, r3
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087a0:	4641      	mov	r1, r8
 80087a2:	1851      	adds	r1, r2, r1
 80087a4:	6039      	str	r1, [r7, #0]
 80087a6:	4649      	mov	r1, r9
 80087a8:	414b      	adcs	r3, r1
 80087aa:	607b      	str	r3, [r7, #4]
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	f04f 0300 	mov.w	r3, #0
 80087b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80087b8:	4659      	mov	r1, fp
 80087ba:	00cb      	lsls	r3, r1, #3
 80087bc:	4651      	mov	r1, sl
 80087be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087c2:	4651      	mov	r1, sl
 80087c4:	00ca      	lsls	r2, r1, #3
 80087c6:	4610      	mov	r0, r2
 80087c8:	4619      	mov	r1, r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	4642      	mov	r2, r8
 80087ce:	189b      	adds	r3, r3, r2
 80087d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80087d2:	464b      	mov	r3, r9
 80087d4:	460a      	mov	r2, r1
 80087d6:	eb42 0303 	adc.w	r3, r2, r3
 80087da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	663b      	str	r3, [r7, #96]	; 0x60
 80087e6:	667a      	str	r2, [r7, #100]	; 0x64
 80087e8:	f04f 0200 	mov.w	r2, #0
 80087ec:	f04f 0300 	mov.w	r3, #0
 80087f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80087f4:	4649      	mov	r1, r9
 80087f6:	008b      	lsls	r3, r1, #2
 80087f8:	4641      	mov	r1, r8
 80087fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087fe:	4641      	mov	r1, r8
 8008800:	008a      	lsls	r2, r1, #2
 8008802:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008806:	f7f8 fa3f 	bl	8000c88 <__aeabi_uldivmod>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <UART_SetConfig+0x4e4>)
 8008810:	fba3 1302 	umull	r1, r3, r3, r2
 8008814:	095b      	lsrs	r3, r3, #5
 8008816:	2164      	movs	r1, #100	; 0x64
 8008818:	fb01 f303 	mul.w	r3, r1, r3
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	3332      	adds	r3, #50	; 0x32
 8008822:	4a08      	ldr	r2, [pc, #32]	; (8008844 <UART_SetConfig+0x4e4>)
 8008824:	fba2 2303 	umull	r2, r3, r2, r3
 8008828:	095b      	lsrs	r3, r3, #5
 800882a:	f003 020f 	and.w	r2, r3, #15
 800882e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4422      	add	r2, r4
 8008836:	609a      	str	r2, [r3, #8]
}
 8008838:	bf00      	nop
 800883a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800883e:	46bd      	mov	sp, r7
 8008840:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008844:	51eb851f 	.word	0x51eb851f

08008848 <malloc>:
 8008848:	4b02      	ldr	r3, [pc, #8]	; (8008854 <malloc+0xc>)
 800884a:	4601      	mov	r1, r0
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	f000 b82b 	b.w	80088a8 <_malloc_r>
 8008852:	bf00      	nop
 8008854:	20000064 	.word	0x20000064

08008858 <free>:
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <free+0xc>)
 800885a:	4601      	mov	r1, r0
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	f001 bf9d 	b.w	800a79c <_free_r>
 8008862:	bf00      	nop
 8008864:	20000064 	.word	0x20000064

08008868 <sbrk_aligned>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	4e0e      	ldr	r6, [pc, #56]	; (80088a4 <sbrk_aligned+0x3c>)
 800886c:	460c      	mov	r4, r1
 800886e:	6831      	ldr	r1, [r6, #0]
 8008870:	4605      	mov	r5, r0
 8008872:	b911      	cbnz	r1, 800887a <sbrk_aligned+0x12>
 8008874:	f001 f8b4 	bl	80099e0 <_sbrk_r>
 8008878:	6030      	str	r0, [r6, #0]
 800887a:	4621      	mov	r1, r4
 800887c:	4628      	mov	r0, r5
 800887e:	f001 f8af 	bl	80099e0 <_sbrk_r>
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	d00a      	beq.n	800889c <sbrk_aligned+0x34>
 8008886:	1cc4      	adds	r4, r0, #3
 8008888:	f024 0403 	bic.w	r4, r4, #3
 800888c:	42a0      	cmp	r0, r4
 800888e:	d007      	beq.n	80088a0 <sbrk_aligned+0x38>
 8008890:	1a21      	subs	r1, r4, r0
 8008892:	4628      	mov	r0, r5
 8008894:	f001 f8a4 	bl	80099e0 <_sbrk_r>
 8008898:	3001      	adds	r0, #1
 800889a:	d101      	bne.n	80088a0 <sbrk_aligned+0x38>
 800889c:	f04f 34ff 	mov.w	r4, #4294967295
 80088a0:	4620      	mov	r0, r4
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	200008e4 	.word	0x200008e4

080088a8 <_malloc_r>:
 80088a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ac:	1ccd      	adds	r5, r1, #3
 80088ae:	f025 0503 	bic.w	r5, r5, #3
 80088b2:	3508      	adds	r5, #8
 80088b4:	2d0c      	cmp	r5, #12
 80088b6:	bf38      	it	cc
 80088b8:	250c      	movcc	r5, #12
 80088ba:	2d00      	cmp	r5, #0
 80088bc:	4607      	mov	r7, r0
 80088be:	db01      	blt.n	80088c4 <_malloc_r+0x1c>
 80088c0:	42a9      	cmp	r1, r5
 80088c2:	d905      	bls.n	80088d0 <_malloc_r+0x28>
 80088c4:	230c      	movs	r3, #12
 80088c6:	603b      	str	r3, [r7, #0]
 80088c8:	2600      	movs	r6, #0
 80088ca:	4630      	mov	r0, r6
 80088cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80089a4 <_malloc_r+0xfc>
 80088d4:	f000 f868 	bl	80089a8 <__malloc_lock>
 80088d8:	f8d8 3000 	ldr.w	r3, [r8]
 80088dc:	461c      	mov	r4, r3
 80088de:	bb5c      	cbnz	r4, 8008938 <_malloc_r+0x90>
 80088e0:	4629      	mov	r1, r5
 80088e2:	4638      	mov	r0, r7
 80088e4:	f7ff ffc0 	bl	8008868 <sbrk_aligned>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	4604      	mov	r4, r0
 80088ec:	d155      	bne.n	800899a <_malloc_r+0xf2>
 80088ee:	f8d8 4000 	ldr.w	r4, [r8]
 80088f2:	4626      	mov	r6, r4
 80088f4:	2e00      	cmp	r6, #0
 80088f6:	d145      	bne.n	8008984 <_malloc_r+0xdc>
 80088f8:	2c00      	cmp	r4, #0
 80088fa:	d048      	beq.n	800898e <_malloc_r+0xe6>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	4631      	mov	r1, r6
 8008900:	4638      	mov	r0, r7
 8008902:	eb04 0903 	add.w	r9, r4, r3
 8008906:	f001 f86b 	bl	80099e0 <_sbrk_r>
 800890a:	4581      	cmp	r9, r0
 800890c:	d13f      	bne.n	800898e <_malloc_r+0xe6>
 800890e:	6821      	ldr	r1, [r4, #0]
 8008910:	1a6d      	subs	r5, r5, r1
 8008912:	4629      	mov	r1, r5
 8008914:	4638      	mov	r0, r7
 8008916:	f7ff ffa7 	bl	8008868 <sbrk_aligned>
 800891a:	3001      	adds	r0, #1
 800891c:	d037      	beq.n	800898e <_malloc_r+0xe6>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	442b      	add	r3, r5
 8008922:	6023      	str	r3, [r4, #0]
 8008924:	f8d8 3000 	ldr.w	r3, [r8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d038      	beq.n	800899e <_malloc_r+0xf6>
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	42a2      	cmp	r2, r4
 8008930:	d12b      	bne.n	800898a <_malloc_r+0xe2>
 8008932:	2200      	movs	r2, #0
 8008934:	605a      	str	r2, [r3, #4]
 8008936:	e00f      	b.n	8008958 <_malloc_r+0xb0>
 8008938:	6822      	ldr	r2, [r4, #0]
 800893a:	1b52      	subs	r2, r2, r5
 800893c:	d41f      	bmi.n	800897e <_malloc_r+0xd6>
 800893e:	2a0b      	cmp	r2, #11
 8008940:	d917      	bls.n	8008972 <_malloc_r+0xca>
 8008942:	1961      	adds	r1, r4, r5
 8008944:	42a3      	cmp	r3, r4
 8008946:	6025      	str	r5, [r4, #0]
 8008948:	bf18      	it	ne
 800894a:	6059      	strne	r1, [r3, #4]
 800894c:	6863      	ldr	r3, [r4, #4]
 800894e:	bf08      	it	eq
 8008950:	f8c8 1000 	streq.w	r1, [r8]
 8008954:	5162      	str	r2, [r4, r5]
 8008956:	604b      	str	r3, [r1, #4]
 8008958:	4638      	mov	r0, r7
 800895a:	f104 060b 	add.w	r6, r4, #11
 800895e:	f000 f829 	bl	80089b4 <__malloc_unlock>
 8008962:	f026 0607 	bic.w	r6, r6, #7
 8008966:	1d23      	adds	r3, r4, #4
 8008968:	1af2      	subs	r2, r6, r3
 800896a:	d0ae      	beq.n	80088ca <_malloc_r+0x22>
 800896c:	1b9b      	subs	r3, r3, r6
 800896e:	50a3      	str	r3, [r4, r2]
 8008970:	e7ab      	b.n	80088ca <_malloc_r+0x22>
 8008972:	42a3      	cmp	r3, r4
 8008974:	6862      	ldr	r2, [r4, #4]
 8008976:	d1dd      	bne.n	8008934 <_malloc_r+0x8c>
 8008978:	f8c8 2000 	str.w	r2, [r8]
 800897c:	e7ec      	b.n	8008958 <_malloc_r+0xb0>
 800897e:	4623      	mov	r3, r4
 8008980:	6864      	ldr	r4, [r4, #4]
 8008982:	e7ac      	b.n	80088de <_malloc_r+0x36>
 8008984:	4634      	mov	r4, r6
 8008986:	6876      	ldr	r6, [r6, #4]
 8008988:	e7b4      	b.n	80088f4 <_malloc_r+0x4c>
 800898a:	4613      	mov	r3, r2
 800898c:	e7cc      	b.n	8008928 <_malloc_r+0x80>
 800898e:	230c      	movs	r3, #12
 8008990:	603b      	str	r3, [r7, #0]
 8008992:	4638      	mov	r0, r7
 8008994:	f000 f80e 	bl	80089b4 <__malloc_unlock>
 8008998:	e797      	b.n	80088ca <_malloc_r+0x22>
 800899a:	6025      	str	r5, [r4, #0]
 800899c:	e7dc      	b.n	8008958 <_malloc_r+0xb0>
 800899e:	605b      	str	r3, [r3, #4]
 80089a0:	deff      	udf	#255	; 0xff
 80089a2:	bf00      	nop
 80089a4:	200008e0 	.word	0x200008e0

080089a8 <__malloc_lock>:
 80089a8:	4801      	ldr	r0, [pc, #4]	; (80089b0 <__malloc_lock+0x8>)
 80089aa:	f001 b866 	b.w	8009a7a <__retarget_lock_acquire_recursive>
 80089ae:	bf00      	nop
 80089b0:	20000a28 	.word	0x20000a28

080089b4 <__malloc_unlock>:
 80089b4:	4801      	ldr	r0, [pc, #4]	; (80089bc <__malloc_unlock+0x8>)
 80089b6:	f001 b861 	b.w	8009a7c <__retarget_lock_release_recursive>
 80089ba:	bf00      	nop
 80089bc:	20000a28 	.word	0x20000a28

080089c0 <__cvt>:
 80089c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	ec55 4b10 	vmov	r4, r5, d0
 80089c8:	2d00      	cmp	r5, #0
 80089ca:	460e      	mov	r6, r1
 80089cc:	4619      	mov	r1, r3
 80089ce:	462b      	mov	r3, r5
 80089d0:	bfbb      	ittet	lt
 80089d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80089d6:	461d      	movlt	r5, r3
 80089d8:	2300      	movge	r3, #0
 80089da:	232d      	movlt	r3, #45	; 0x2d
 80089dc:	700b      	strb	r3, [r1, #0]
 80089de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80089e4:	4691      	mov	r9, r2
 80089e6:	f023 0820 	bic.w	r8, r3, #32
 80089ea:	bfbc      	itt	lt
 80089ec:	4622      	movlt	r2, r4
 80089ee:	4614      	movlt	r4, r2
 80089f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089f4:	d005      	beq.n	8008a02 <__cvt+0x42>
 80089f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80089fa:	d100      	bne.n	80089fe <__cvt+0x3e>
 80089fc:	3601      	adds	r6, #1
 80089fe:	2102      	movs	r1, #2
 8008a00:	e000      	b.n	8008a04 <__cvt+0x44>
 8008a02:	2103      	movs	r1, #3
 8008a04:	ab03      	add	r3, sp, #12
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	ab02      	add	r3, sp, #8
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	ec45 4b10 	vmov	d0, r4, r5
 8008a10:	4653      	mov	r3, sl
 8008a12:	4632      	mov	r2, r6
 8008a14:	f001 f8d0 	bl	8009bb8 <_dtoa_r>
 8008a18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	d102      	bne.n	8008a26 <__cvt+0x66>
 8008a20:	f019 0f01 	tst.w	r9, #1
 8008a24:	d022      	beq.n	8008a6c <__cvt+0xac>
 8008a26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a2a:	eb07 0906 	add.w	r9, r7, r6
 8008a2e:	d110      	bne.n	8008a52 <__cvt+0x92>
 8008a30:	783b      	ldrb	r3, [r7, #0]
 8008a32:	2b30      	cmp	r3, #48	; 0x30
 8008a34:	d10a      	bne.n	8008a4c <__cvt+0x8c>
 8008a36:	2200      	movs	r2, #0
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	f7f8 f843 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a42:	b918      	cbnz	r0, 8008a4c <__cvt+0x8c>
 8008a44:	f1c6 0601 	rsb	r6, r6, #1
 8008a48:	f8ca 6000 	str.w	r6, [sl]
 8008a4c:	f8da 3000 	ldr.w	r3, [sl]
 8008a50:	4499      	add	r9, r3
 8008a52:	2200      	movs	r2, #0
 8008a54:	2300      	movs	r3, #0
 8008a56:	4620      	mov	r0, r4
 8008a58:	4629      	mov	r1, r5
 8008a5a:	f7f8 f835 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a5e:	b108      	cbz	r0, 8008a64 <__cvt+0xa4>
 8008a60:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a64:	2230      	movs	r2, #48	; 0x30
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	454b      	cmp	r3, r9
 8008a6a:	d307      	bcc.n	8008a7c <__cvt+0xbc>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a70:	1bdb      	subs	r3, r3, r7
 8008a72:	4638      	mov	r0, r7
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	b004      	add	sp, #16
 8008a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7c:	1c59      	adds	r1, r3, #1
 8008a7e:	9103      	str	r1, [sp, #12]
 8008a80:	701a      	strb	r2, [r3, #0]
 8008a82:	e7f0      	b.n	8008a66 <__cvt+0xa6>

08008a84 <__exponent>:
 8008a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a86:	4603      	mov	r3, r0
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	bfb8      	it	lt
 8008a8c:	4249      	neglt	r1, r1
 8008a8e:	f803 2b02 	strb.w	r2, [r3], #2
 8008a92:	bfb4      	ite	lt
 8008a94:	222d      	movlt	r2, #45	; 0x2d
 8008a96:	222b      	movge	r2, #43	; 0x2b
 8008a98:	2909      	cmp	r1, #9
 8008a9a:	7042      	strb	r2, [r0, #1]
 8008a9c:	dd2a      	ble.n	8008af4 <__exponent+0x70>
 8008a9e:	f10d 0207 	add.w	r2, sp, #7
 8008aa2:	4617      	mov	r7, r2
 8008aa4:	260a      	movs	r6, #10
 8008aa6:	4694      	mov	ip, r2
 8008aa8:	fb91 f5f6 	sdiv	r5, r1, r6
 8008aac:	fb06 1415 	mls	r4, r6, r5, r1
 8008ab0:	3430      	adds	r4, #48	; 0x30
 8008ab2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	2c63      	cmp	r4, #99	; 0x63
 8008aba:	f102 32ff 	add.w	r2, r2, #4294967295
 8008abe:	4629      	mov	r1, r5
 8008ac0:	dcf1      	bgt.n	8008aa6 <__exponent+0x22>
 8008ac2:	3130      	adds	r1, #48	; 0x30
 8008ac4:	f1ac 0402 	sub.w	r4, ip, #2
 8008ac8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008acc:	1c41      	adds	r1, r0, #1
 8008ace:	4622      	mov	r2, r4
 8008ad0:	42ba      	cmp	r2, r7
 8008ad2:	d30a      	bcc.n	8008aea <__exponent+0x66>
 8008ad4:	f10d 0209 	add.w	r2, sp, #9
 8008ad8:	eba2 020c 	sub.w	r2, r2, ip
 8008adc:	42bc      	cmp	r4, r7
 8008ade:	bf88      	it	hi
 8008ae0:	2200      	movhi	r2, #0
 8008ae2:	4413      	add	r3, r2
 8008ae4:	1a18      	subs	r0, r3, r0
 8008ae6:	b003      	add	sp, #12
 8008ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aea:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008aee:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008af2:	e7ed      	b.n	8008ad0 <__exponent+0x4c>
 8008af4:	2330      	movs	r3, #48	; 0x30
 8008af6:	3130      	adds	r1, #48	; 0x30
 8008af8:	7083      	strb	r3, [r0, #2]
 8008afa:	70c1      	strb	r1, [r0, #3]
 8008afc:	1d03      	adds	r3, r0, #4
 8008afe:	e7f1      	b.n	8008ae4 <__exponent+0x60>

08008b00 <_printf_float>:
 8008b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b04:	ed2d 8b02 	vpush	{d8}
 8008b08:	b08d      	sub	sp, #52	; 0x34
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b10:	4616      	mov	r6, r2
 8008b12:	461f      	mov	r7, r3
 8008b14:	4605      	mov	r5, r0
 8008b16:	f000 ff2b 	bl	8009970 <_localeconv_r>
 8008b1a:	f8d0 a000 	ldr.w	sl, [r0]
 8008b1e:	4650      	mov	r0, sl
 8008b20:	f7f7 fba6 	bl	8000270 <strlen>
 8008b24:	2300      	movs	r3, #0
 8008b26:	930a      	str	r3, [sp, #40]	; 0x28
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	9305      	str	r3, [sp, #20]
 8008b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b34:	3307      	adds	r3, #7
 8008b36:	f023 0307 	bic.w	r3, r3, #7
 8008b3a:	f103 0208 	add.w	r2, r3, #8
 8008b3e:	f8c8 2000 	str.w	r2, [r8]
 8008b42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b4a:	9307      	str	r3, [sp, #28]
 8008b4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b50:	ee08 0a10 	vmov	s16, r0
 8008b54:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b5c:	4b9e      	ldr	r3, [pc, #632]	; (8008dd8 <_printf_float+0x2d8>)
 8008b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b62:	f7f7 ffe3 	bl	8000b2c <__aeabi_dcmpun>
 8008b66:	bb88      	cbnz	r0, 8008bcc <_printf_float+0xcc>
 8008b68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b6c:	4b9a      	ldr	r3, [pc, #616]	; (8008dd8 <_printf_float+0x2d8>)
 8008b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b72:	f7f7 ffbd 	bl	8000af0 <__aeabi_dcmple>
 8008b76:	bb48      	cbnz	r0, 8008bcc <_printf_float+0xcc>
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	4649      	mov	r1, r9
 8008b80:	f7f7 ffac 	bl	8000adc <__aeabi_dcmplt>
 8008b84:	b110      	cbz	r0, 8008b8c <_printf_float+0x8c>
 8008b86:	232d      	movs	r3, #45	; 0x2d
 8008b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b8c:	4a93      	ldr	r2, [pc, #588]	; (8008ddc <_printf_float+0x2dc>)
 8008b8e:	4b94      	ldr	r3, [pc, #592]	; (8008de0 <_printf_float+0x2e0>)
 8008b90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008b94:	bf94      	ite	ls
 8008b96:	4690      	movls	r8, r2
 8008b98:	4698      	movhi	r8, r3
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	6123      	str	r3, [r4, #16]
 8008b9e:	9b05      	ldr	r3, [sp, #20]
 8008ba0:	f023 0304 	bic.w	r3, r3, #4
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	f04f 0900 	mov.w	r9, #0
 8008baa:	9700      	str	r7, [sp, #0]
 8008bac:	4633      	mov	r3, r6
 8008bae:	aa0b      	add	r2, sp, #44	; 0x2c
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 f9da 	bl	8008f6c <_printf_common>
 8008bb8:	3001      	adds	r0, #1
 8008bba:	f040 8090 	bne.w	8008cde <_printf_float+0x1de>
 8008bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc2:	b00d      	add	sp, #52	; 0x34
 8008bc4:	ecbd 8b02 	vpop	{d8}
 8008bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bcc:	4642      	mov	r2, r8
 8008bce:	464b      	mov	r3, r9
 8008bd0:	4640      	mov	r0, r8
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	f7f7 ffaa 	bl	8000b2c <__aeabi_dcmpun>
 8008bd8:	b140      	cbz	r0, 8008bec <_printf_float+0xec>
 8008bda:	464b      	mov	r3, r9
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bfbc      	itt	lt
 8008be0:	232d      	movlt	r3, #45	; 0x2d
 8008be2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008be6:	4a7f      	ldr	r2, [pc, #508]	; (8008de4 <_printf_float+0x2e4>)
 8008be8:	4b7f      	ldr	r3, [pc, #508]	; (8008de8 <_printf_float+0x2e8>)
 8008bea:	e7d1      	b.n	8008b90 <_printf_float+0x90>
 8008bec:	6863      	ldr	r3, [r4, #4]
 8008bee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008bf2:	9206      	str	r2, [sp, #24]
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	d13f      	bne.n	8008c78 <_printf_float+0x178>
 8008bf8:	2306      	movs	r3, #6
 8008bfa:	6063      	str	r3, [r4, #4]
 8008bfc:	9b05      	ldr	r3, [sp, #20]
 8008bfe:	6861      	ldr	r1, [r4, #4]
 8008c00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c04:	2300      	movs	r3, #0
 8008c06:	9303      	str	r3, [sp, #12]
 8008c08:	ab0a      	add	r3, sp, #40	; 0x28
 8008c0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c0e:	ab09      	add	r3, sp, #36	; 0x24
 8008c10:	ec49 8b10 	vmov	d0, r8, r9
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	6022      	str	r2, [r4, #0]
 8008c18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f7ff fecf 	bl	80089c0 <__cvt>
 8008c22:	9b06      	ldr	r3, [sp, #24]
 8008c24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c26:	2b47      	cmp	r3, #71	; 0x47
 8008c28:	4680      	mov	r8, r0
 8008c2a:	d108      	bne.n	8008c3e <_printf_float+0x13e>
 8008c2c:	1cc8      	adds	r0, r1, #3
 8008c2e:	db02      	blt.n	8008c36 <_printf_float+0x136>
 8008c30:	6863      	ldr	r3, [r4, #4]
 8008c32:	4299      	cmp	r1, r3
 8008c34:	dd41      	ble.n	8008cba <_printf_float+0x1ba>
 8008c36:	f1ab 0302 	sub.w	r3, fp, #2
 8008c3a:	fa5f fb83 	uxtb.w	fp, r3
 8008c3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c42:	d820      	bhi.n	8008c86 <_printf_float+0x186>
 8008c44:	3901      	subs	r1, #1
 8008c46:	465a      	mov	r2, fp
 8008c48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c4c:	9109      	str	r1, [sp, #36]	; 0x24
 8008c4e:	f7ff ff19 	bl	8008a84 <__exponent>
 8008c52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c54:	1813      	adds	r3, r2, r0
 8008c56:	2a01      	cmp	r2, #1
 8008c58:	4681      	mov	r9, r0
 8008c5a:	6123      	str	r3, [r4, #16]
 8008c5c:	dc02      	bgt.n	8008c64 <_printf_float+0x164>
 8008c5e:	6822      	ldr	r2, [r4, #0]
 8008c60:	07d2      	lsls	r2, r2, #31
 8008c62:	d501      	bpl.n	8008c68 <_printf_float+0x168>
 8008c64:	3301      	adds	r3, #1
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d09c      	beq.n	8008baa <_printf_float+0xaa>
 8008c70:	232d      	movs	r3, #45	; 0x2d
 8008c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c76:	e798      	b.n	8008baa <_printf_float+0xaa>
 8008c78:	9a06      	ldr	r2, [sp, #24]
 8008c7a:	2a47      	cmp	r2, #71	; 0x47
 8008c7c:	d1be      	bne.n	8008bfc <_printf_float+0xfc>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1bc      	bne.n	8008bfc <_printf_float+0xfc>
 8008c82:	2301      	movs	r3, #1
 8008c84:	e7b9      	b.n	8008bfa <_printf_float+0xfa>
 8008c86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c8a:	d118      	bne.n	8008cbe <_printf_float+0x1be>
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	6863      	ldr	r3, [r4, #4]
 8008c90:	dd0b      	ble.n	8008caa <_printf_float+0x1aa>
 8008c92:	6121      	str	r1, [r4, #16]
 8008c94:	b913      	cbnz	r3, 8008c9c <_printf_float+0x19c>
 8008c96:	6822      	ldr	r2, [r4, #0]
 8008c98:	07d0      	lsls	r0, r2, #31
 8008c9a:	d502      	bpl.n	8008ca2 <_printf_float+0x1a2>
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	440b      	add	r3, r1
 8008ca0:	6123      	str	r3, [r4, #16]
 8008ca2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ca4:	f04f 0900 	mov.w	r9, #0
 8008ca8:	e7de      	b.n	8008c68 <_printf_float+0x168>
 8008caa:	b913      	cbnz	r3, 8008cb2 <_printf_float+0x1b2>
 8008cac:	6822      	ldr	r2, [r4, #0]
 8008cae:	07d2      	lsls	r2, r2, #31
 8008cb0:	d501      	bpl.n	8008cb6 <_printf_float+0x1b6>
 8008cb2:	3302      	adds	r3, #2
 8008cb4:	e7f4      	b.n	8008ca0 <_printf_float+0x1a0>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e7f2      	b.n	8008ca0 <_printf_float+0x1a0>
 8008cba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc0:	4299      	cmp	r1, r3
 8008cc2:	db05      	blt.n	8008cd0 <_printf_float+0x1d0>
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	6121      	str	r1, [r4, #16]
 8008cc8:	07d8      	lsls	r0, r3, #31
 8008cca:	d5ea      	bpl.n	8008ca2 <_printf_float+0x1a2>
 8008ccc:	1c4b      	adds	r3, r1, #1
 8008cce:	e7e7      	b.n	8008ca0 <_printf_float+0x1a0>
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	bfd4      	ite	le
 8008cd4:	f1c1 0202 	rsble	r2, r1, #2
 8008cd8:	2201      	movgt	r2, #1
 8008cda:	4413      	add	r3, r2
 8008cdc:	e7e0      	b.n	8008ca0 <_printf_float+0x1a0>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	055a      	lsls	r2, r3, #21
 8008ce2:	d407      	bmi.n	8008cf4 <_printf_float+0x1f4>
 8008ce4:	6923      	ldr	r3, [r4, #16]
 8008ce6:	4642      	mov	r2, r8
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4628      	mov	r0, r5
 8008cec:	47b8      	blx	r7
 8008cee:	3001      	adds	r0, #1
 8008cf0:	d12c      	bne.n	8008d4c <_printf_float+0x24c>
 8008cf2:	e764      	b.n	8008bbe <_printf_float+0xbe>
 8008cf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008cf8:	f240 80e0 	bls.w	8008ebc <_printf_float+0x3bc>
 8008cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d00:	2200      	movs	r2, #0
 8008d02:	2300      	movs	r3, #0
 8008d04:	f7f7 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d034      	beq.n	8008d76 <_printf_float+0x276>
 8008d0c:	4a37      	ldr	r2, [pc, #220]	; (8008dec <_printf_float+0x2ec>)
 8008d0e:	2301      	movs	r3, #1
 8008d10:	4631      	mov	r1, r6
 8008d12:	4628      	mov	r0, r5
 8008d14:	47b8      	blx	r7
 8008d16:	3001      	adds	r0, #1
 8008d18:	f43f af51 	beq.w	8008bbe <_printf_float+0xbe>
 8008d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d20:	429a      	cmp	r2, r3
 8008d22:	db02      	blt.n	8008d2a <_printf_float+0x22a>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	07d8      	lsls	r0, r3, #31
 8008d28:	d510      	bpl.n	8008d4c <_printf_float+0x24c>
 8008d2a:	ee18 3a10 	vmov	r3, s16
 8008d2e:	4652      	mov	r2, sl
 8008d30:	4631      	mov	r1, r6
 8008d32:	4628      	mov	r0, r5
 8008d34:	47b8      	blx	r7
 8008d36:	3001      	adds	r0, #1
 8008d38:	f43f af41 	beq.w	8008bbe <_printf_float+0xbe>
 8008d3c:	f04f 0800 	mov.w	r8, #0
 8008d40:	f104 091a 	add.w	r9, r4, #26
 8008d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d46:	3b01      	subs	r3, #1
 8008d48:	4543      	cmp	r3, r8
 8008d4a:	dc09      	bgt.n	8008d60 <_printf_float+0x260>
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	079b      	lsls	r3, r3, #30
 8008d50:	f100 8107 	bmi.w	8008f62 <_printf_float+0x462>
 8008d54:	68e0      	ldr	r0, [r4, #12]
 8008d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d58:	4298      	cmp	r0, r3
 8008d5a:	bfb8      	it	lt
 8008d5c:	4618      	movlt	r0, r3
 8008d5e:	e730      	b.n	8008bc2 <_printf_float+0xc2>
 8008d60:	2301      	movs	r3, #1
 8008d62:	464a      	mov	r2, r9
 8008d64:	4631      	mov	r1, r6
 8008d66:	4628      	mov	r0, r5
 8008d68:	47b8      	blx	r7
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	f43f af27 	beq.w	8008bbe <_printf_float+0xbe>
 8008d70:	f108 0801 	add.w	r8, r8, #1
 8008d74:	e7e6      	b.n	8008d44 <_printf_float+0x244>
 8008d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	dc39      	bgt.n	8008df0 <_printf_float+0x2f0>
 8008d7c:	4a1b      	ldr	r2, [pc, #108]	; (8008dec <_printf_float+0x2ec>)
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4631      	mov	r1, r6
 8008d82:	4628      	mov	r0, r5
 8008d84:	47b8      	blx	r7
 8008d86:	3001      	adds	r0, #1
 8008d88:	f43f af19 	beq.w	8008bbe <_printf_float+0xbe>
 8008d8c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008d90:	4313      	orrs	r3, r2
 8008d92:	d102      	bne.n	8008d9a <_printf_float+0x29a>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	07d9      	lsls	r1, r3, #31
 8008d98:	d5d8      	bpl.n	8008d4c <_printf_float+0x24c>
 8008d9a:	ee18 3a10 	vmov	r3, s16
 8008d9e:	4652      	mov	r2, sl
 8008da0:	4631      	mov	r1, r6
 8008da2:	4628      	mov	r0, r5
 8008da4:	47b8      	blx	r7
 8008da6:	3001      	adds	r0, #1
 8008da8:	f43f af09 	beq.w	8008bbe <_printf_float+0xbe>
 8008dac:	f04f 0900 	mov.w	r9, #0
 8008db0:	f104 0a1a 	add.w	sl, r4, #26
 8008db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db6:	425b      	negs	r3, r3
 8008db8:	454b      	cmp	r3, r9
 8008dba:	dc01      	bgt.n	8008dc0 <_printf_float+0x2c0>
 8008dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dbe:	e792      	b.n	8008ce6 <_printf_float+0x1e6>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4652      	mov	r2, sl
 8008dc4:	4631      	mov	r1, r6
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	47b8      	blx	r7
 8008dca:	3001      	adds	r0, #1
 8008dcc:	f43f aef7 	beq.w	8008bbe <_printf_float+0xbe>
 8008dd0:	f109 0901 	add.w	r9, r9, #1
 8008dd4:	e7ee      	b.n	8008db4 <_printf_float+0x2b4>
 8008dd6:	bf00      	nop
 8008dd8:	7fefffff 	.word	0x7fefffff
 8008ddc:	0800f734 	.word	0x0800f734
 8008de0:	0800f738 	.word	0x0800f738
 8008de4:	0800f73c 	.word	0x0800f73c
 8008de8:	0800f740 	.word	0x0800f740
 8008dec:	0800f744 	.word	0x0800f744
 8008df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008df4:	429a      	cmp	r2, r3
 8008df6:	bfa8      	it	ge
 8008df8:	461a      	movge	r2, r3
 8008dfa:	2a00      	cmp	r2, #0
 8008dfc:	4691      	mov	r9, r2
 8008dfe:	dc37      	bgt.n	8008e70 <_printf_float+0x370>
 8008e00:	f04f 0b00 	mov.w	fp, #0
 8008e04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e08:	f104 021a 	add.w	r2, r4, #26
 8008e0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e0e:	9305      	str	r3, [sp, #20]
 8008e10:	eba3 0309 	sub.w	r3, r3, r9
 8008e14:	455b      	cmp	r3, fp
 8008e16:	dc33      	bgt.n	8008e80 <_printf_float+0x380>
 8008e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	db3b      	blt.n	8008e98 <_printf_float+0x398>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	07da      	lsls	r2, r3, #31
 8008e24:	d438      	bmi.n	8008e98 <_printf_float+0x398>
 8008e26:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008e2a:	eba2 0903 	sub.w	r9, r2, r3
 8008e2e:	9b05      	ldr	r3, [sp, #20]
 8008e30:	1ad2      	subs	r2, r2, r3
 8008e32:	4591      	cmp	r9, r2
 8008e34:	bfa8      	it	ge
 8008e36:	4691      	movge	r9, r2
 8008e38:	f1b9 0f00 	cmp.w	r9, #0
 8008e3c:	dc35      	bgt.n	8008eaa <_printf_float+0x3aa>
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e46:	f104 0a1a 	add.w	sl, r4, #26
 8008e4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e4e:	1a9b      	subs	r3, r3, r2
 8008e50:	eba3 0309 	sub.w	r3, r3, r9
 8008e54:	4543      	cmp	r3, r8
 8008e56:	f77f af79 	ble.w	8008d4c <_printf_float+0x24c>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	4652      	mov	r2, sl
 8008e5e:	4631      	mov	r1, r6
 8008e60:	4628      	mov	r0, r5
 8008e62:	47b8      	blx	r7
 8008e64:	3001      	adds	r0, #1
 8008e66:	f43f aeaa 	beq.w	8008bbe <_printf_float+0xbe>
 8008e6a:	f108 0801 	add.w	r8, r8, #1
 8008e6e:	e7ec      	b.n	8008e4a <_printf_float+0x34a>
 8008e70:	4613      	mov	r3, r2
 8008e72:	4631      	mov	r1, r6
 8008e74:	4642      	mov	r2, r8
 8008e76:	4628      	mov	r0, r5
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d1c0      	bne.n	8008e00 <_printf_float+0x300>
 8008e7e:	e69e      	b.n	8008bbe <_printf_float+0xbe>
 8008e80:	2301      	movs	r3, #1
 8008e82:	4631      	mov	r1, r6
 8008e84:	4628      	mov	r0, r5
 8008e86:	9205      	str	r2, [sp, #20]
 8008e88:	47b8      	blx	r7
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	f43f ae97 	beq.w	8008bbe <_printf_float+0xbe>
 8008e90:	9a05      	ldr	r2, [sp, #20]
 8008e92:	f10b 0b01 	add.w	fp, fp, #1
 8008e96:	e7b9      	b.n	8008e0c <_printf_float+0x30c>
 8008e98:	ee18 3a10 	vmov	r3, s16
 8008e9c:	4652      	mov	r2, sl
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	47b8      	blx	r7
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d1be      	bne.n	8008e26 <_printf_float+0x326>
 8008ea8:	e689      	b.n	8008bbe <_printf_float+0xbe>
 8008eaa:	9a05      	ldr	r2, [sp, #20]
 8008eac:	464b      	mov	r3, r9
 8008eae:	4442      	add	r2, r8
 8008eb0:	4631      	mov	r1, r6
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	47b8      	blx	r7
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	d1c1      	bne.n	8008e3e <_printf_float+0x33e>
 8008eba:	e680      	b.n	8008bbe <_printf_float+0xbe>
 8008ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ebe:	2a01      	cmp	r2, #1
 8008ec0:	dc01      	bgt.n	8008ec6 <_printf_float+0x3c6>
 8008ec2:	07db      	lsls	r3, r3, #31
 8008ec4:	d53a      	bpl.n	8008f3c <_printf_float+0x43c>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	4642      	mov	r2, r8
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b8      	blx	r7
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	f43f ae74 	beq.w	8008bbe <_printf_float+0xbe>
 8008ed6:	ee18 3a10 	vmov	r3, s16
 8008eda:	4652      	mov	r2, sl
 8008edc:	4631      	mov	r1, r6
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b8      	blx	r7
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	f43f ae6b 	beq.w	8008bbe <_printf_float+0xbe>
 8008ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008eec:	2200      	movs	r2, #0
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008ef4:	f7f7 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ef8:	b9d8      	cbnz	r0, 8008f32 <_printf_float+0x432>
 8008efa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008efe:	f108 0201 	add.w	r2, r8, #1
 8008f02:	4631      	mov	r1, r6
 8008f04:	4628      	mov	r0, r5
 8008f06:	47b8      	blx	r7
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d10e      	bne.n	8008f2a <_printf_float+0x42a>
 8008f0c:	e657      	b.n	8008bbe <_printf_float+0xbe>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4652      	mov	r2, sl
 8008f12:	4631      	mov	r1, r6
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b8      	blx	r7
 8008f18:	3001      	adds	r0, #1
 8008f1a:	f43f ae50 	beq.w	8008bbe <_printf_float+0xbe>
 8008f1e:	f108 0801 	add.w	r8, r8, #1
 8008f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f24:	3b01      	subs	r3, #1
 8008f26:	4543      	cmp	r3, r8
 8008f28:	dcf1      	bgt.n	8008f0e <_printf_float+0x40e>
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f30:	e6da      	b.n	8008ce8 <_printf_float+0x1e8>
 8008f32:	f04f 0800 	mov.w	r8, #0
 8008f36:	f104 0a1a 	add.w	sl, r4, #26
 8008f3a:	e7f2      	b.n	8008f22 <_printf_float+0x422>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	4642      	mov	r2, r8
 8008f40:	e7df      	b.n	8008f02 <_printf_float+0x402>
 8008f42:	2301      	movs	r3, #1
 8008f44:	464a      	mov	r2, r9
 8008f46:	4631      	mov	r1, r6
 8008f48:	4628      	mov	r0, r5
 8008f4a:	47b8      	blx	r7
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	f43f ae36 	beq.w	8008bbe <_printf_float+0xbe>
 8008f52:	f108 0801 	add.w	r8, r8, #1
 8008f56:	68e3      	ldr	r3, [r4, #12]
 8008f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f5a:	1a5b      	subs	r3, r3, r1
 8008f5c:	4543      	cmp	r3, r8
 8008f5e:	dcf0      	bgt.n	8008f42 <_printf_float+0x442>
 8008f60:	e6f8      	b.n	8008d54 <_printf_float+0x254>
 8008f62:	f04f 0800 	mov.w	r8, #0
 8008f66:	f104 0919 	add.w	r9, r4, #25
 8008f6a:	e7f4      	b.n	8008f56 <_printf_float+0x456>

08008f6c <_printf_common>:
 8008f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	4616      	mov	r6, r2
 8008f72:	4699      	mov	r9, r3
 8008f74:	688a      	ldr	r2, [r1, #8]
 8008f76:	690b      	ldr	r3, [r1, #16]
 8008f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	bfb8      	it	lt
 8008f80:	4613      	movlt	r3, r2
 8008f82:	6033      	str	r3, [r6, #0]
 8008f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f88:	4607      	mov	r7, r0
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	b10a      	cbz	r2, 8008f92 <_printf_common+0x26>
 8008f8e:	3301      	adds	r3, #1
 8008f90:	6033      	str	r3, [r6, #0]
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	0699      	lsls	r1, r3, #26
 8008f96:	bf42      	ittt	mi
 8008f98:	6833      	ldrmi	r3, [r6, #0]
 8008f9a:	3302      	addmi	r3, #2
 8008f9c:	6033      	strmi	r3, [r6, #0]
 8008f9e:	6825      	ldr	r5, [r4, #0]
 8008fa0:	f015 0506 	ands.w	r5, r5, #6
 8008fa4:	d106      	bne.n	8008fb4 <_printf_common+0x48>
 8008fa6:	f104 0a19 	add.w	sl, r4, #25
 8008faa:	68e3      	ldr	r3, [r4, #12]
 8008fac:	6832      	ldr	r2, [r6, #0]
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	42ab      	cmp	r3, r5
 8008fb2:	dc26      	bgt.n	8009002 <_printf_common+0x96>
 8008fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fb8:	1e13      	subs	r3, r2, #0
 8008fba:	6822      	ldr	r2, [r4, #0]
 8008fbc:	bf18      	it	ne
 8008fbe:	2301      	movne	r3, #1
 8008fc0:	0692      	lsls	r2, r2, #26
 8008fc2:	d42b      	bmi.n	800901c <_printf_common+0xb0>
 8008fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fc8:	4649      	mov	r1, r9
 8008fca:	4638      	mov	r0, r7
 8008fcc:	47c0      	blx	r8
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d01e      	beq.n	8009010 <_printf_common+0xa4>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	6922      	ldr	r2, [r4, #16]
 8008fd6:	f003 0306 	and.w	r3, r3, #6
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	bf02      	ittt	eq
 8008fde:	68e5      	ldreq	r5, [r4, #12]
 8008fe0:	6833      	ldreq	r3, [r6, #0]
 8008fe2:	1aed      	subeq	r5, r5, r3
 8008fe4:	68a3      	ldr	r3, [r4, #8]
 8008fe6:	bf0c      	ite	eq
 8008fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fec:	2500      	movne	r5, #0
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	bfc4      	itt	gt
 8008ff2:	1a9b      	subgt	r3, r3, r2
 8008ff4:	18ed      	addgt	r5, r5, r3
 8008ff6:	2600      	movs	r6, #0
 8008ff8:	341a      	adds	r4, #26
 8008ffa:	42b5      	cmp	r5, r6
 8008ffc:	d11a      	bne.n	8009034 <_printf_common+0xc8>
 8008ffe:	2000      	movs	r0, #0
 8009000:	e008      	b.n	8009014 <_printf_common+0xa8>
 8009002:	2301      	movs	r3, #1
 8009004:	4652      	mov	r2, sl
 8009006:	4649      	mov	r1, r9
 8009008:	4638      	mov	r0, r7
 800900a:	47c0      	blx	r8
 800900c:	3001      	adds	r0, #1
 800900e:	d103      	bne.n	8009018 <_printf_common+0xac>
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	3501      	adds	r5, #1
 800901a:	e7c6      	b.n	8008faa <_printf_common+0x3e>
 800901c:	18e1      	adds	r1, r4, r3
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	2030      	movs	r0, #48	; 0x30
 8009022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009026:	4422      	add	r2, r4
 8009028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800902c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009030:	3302      	adds	r3, #2
 8009032:	e7c7      	b.n	8008fc4 <_printf_common+0x58>
 8009034:	2301      	movs	r3, #1
 8009036:	4622      	mov	r2, r4
 8009038:	4649      	mov	r1, r9
 800903a:	4638      	mov	r0, r7
 800903c:	47c0      	blx	r8
 800903e:	3001      	adds	r0, #1
 8009040:	d0e6      	beq.n	8009010 <_printf_common+0xa4>
 8009042:	3601      	adds	r6, #1
 8009044:	e7d9      	b.n	8008ffa <_printf_common+0x8e>
	...

08009048 <_printf_i>:
 8009048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800904c:	7e0f      	ldrb	r7, [r1, #24]
 800904e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009050:	2f78      	cmp	r7, #120	; 0x78
 8009052:	4691      	mov	r9, r2
 8009054:	4680      	mov	r8, r0
 8009056:	460c      	mov	r4, r1
 8009058:	469a      	mov	sl, r3
 800905a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800905e:	d807      	bhi.n	8009070 <_printf_i+0x28>
 8009060:	2f62      	cmp	r7, #98	; 0x62
 8009062:	d80a      	bhi.n	800907a <_printf_i+0x32>
 8009064:	2f00      	cmp	r7, #0
 8009066:	f000 80d4 	beq.w	8009212 <_printf_i+0x1ca>
 800906a:	2f58      	cmp	r7, #88	; 0x58
 800906c:	f000 80c0 	beq.w	80091f0 <_printf_i+0x1a8>
 8009070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009078:	e03a      	b.n	80090f0 <_printf_i+0xa8>
 800907a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800907e:	2b15      	cmp	r3, #21
 8009080:	d8f6      	bhi.n	8009070 <_printf_i+0x28>
 8009082:	a101      	add	r1, pc, #4	; (adr r1, 8009088 <_printf_i+0x40>)
 8009084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009088:	080090e1 	.word	0x080090e1
 800908c:	080090f5 	.word	0x080090f5
 8009090:	08009071 	.word	0x08009071
 8009094:	08009071 	.word	0x08009071
 8009098:	08009071 	.word	0x08009071
 800909c:	08009071 	.word	0x08009071
 80090a0:	080090f5 	.word	0x080090f5
 80090a4:	08009071 	.word	0x08009071
 80090a8:	08009071 	.word	0x08009071
 80090ac:	08009071 	.word	0x08009071
 80090b0:	08009071 	.word	0x08009071
 80090b4:	080091f9 	.word	0x080091f9
 80090b8:	08009121 	.word	0x08009121
 80090bc:	080091b3 	.word	0x080091b3
 80090c0:	08009071 	.word	0x08009071
 80090c4:	08009071 	.word	0x08009071
 80090c8:	0800921b 	.word	0x0800921b
 80090cc:	08009071 	.word	0x08009071
 80090d0:	08009121 	.word	0x08009121
 80090d4:	08009071 	.word	0x08009071
 80090d8:	08009071 	.word	0x08009071
 80090dc:	080091bb 	.word	0x080091bb
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	1d1a      	adds	r2, r3, #4
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	602a      	str	r2, [r5, #0]
 80090e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090f0:	2301      	movs	r3, #1
 80090f2:	e09f      	b.n	8009234 <_printf_i+0x1ec>
 80090f4:	6820      	ldr	r0, [r4, #0]
 80090f6:	682b      	ldr	r3, [r5, #0]
 80090f8:	0607      	lsls	r7, r0, #24
 80090fa:	f103 0104 	add.w	r1, r3, #4
 80090fe:	6029      	str	r1, [r5, #0]
 8009100:	d501      	bpl.n	8009106 <_printf_i+0xbe>
 8009102:	681e      	ldr	r6, [r3, #0]
 8009104:	e003      	b.n	800910e <_printf_i+0xc6>
 8009106:	0646      	lsls	r6, r0, #25
 8009108:	d5fb      	bpl.n	8009102 <_printf_i+0xba>
 800910a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800910e:	2e00      	cmp	r6, #0
 8009110:	da03      	bge.n	800911a <_printf_i+0xd2>
 8009112:	232d      	movs	r3, #45	; 0x2d
 8009114:	4276      	negs	r6, r6
 8009116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800911a:	485a      	ldr	r0, [pc, #360]	; (8009284 <_printf_i+0x23c>)
 800911c:	230a      	movs	r3, #10
 800911e:	e012      	b.n	8009146 <_printf_i+0xfe>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	6820      	ldr	r0, [r4, #0]
 8009124:	1d19      	adds	r1, r3, #4
 8009126:	6029      	str	r1, [r5, #0]
 8009128:	0605      	lsls	r5, r0, #24
 800912a:	d501      	bpl.n	8009130 <_printf_i+0xe8>
 800912c:	681e      	ldr	r6, [r3, #0]
 800912e:	e002      	b.n	8009136 <_printf_i+0xee>
 8009130:	0641      	lsls	r1, r0, #25
 8009132:	d5fb      	bpl.n	800912c <_printf_i+0xe4>
 8009134:	881e      	ldrh	r6, [r3, #0]
 8009136:	4853      	ldr	r0, [pc, #332]	; (8009284 <_printf_i+0x23c>)
 8009138:	2f6f      	cmp	r7, #111	; 0x6f
 800913a:	bf0c      	ite	eq
 800913c:	2308      	moveq	r3, #8
 800913e:	230a      	movne	r3, #10
 8009140:	2100      	movs	r1, #0
 8009142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009146:	6865      	ldr	r5, [r4, #4]
 8009148:	60a5      	str	r5, [r4, #8]
 800914a:	2d00      	cmp	r5, #0
 800914c:	bfa2      	ittt	ge
 800914e:	6821      	ldrge	r1, [r4, #0]
 8009150:	f021 0104 	bicge.w	r1, r1, #4
 8009154:	6021      	strge	r1, [r4, #0]
 8009156:	b90e      	cbnz	r6, 800915c <_printf_i+0x114>
 8009158:	2d00      	cmp	r5, #0
 800915a:	d04b      	beq.n	80091f4 <_printf_i+0x1ac>
 800915c:	4615      	mov	r5, r2
 800915e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009162:	fb03 6711 	mls	r7, r3, r1, r6
 8009166:	5dc7      	ldrb	r7, [r0, r7]
 8009168:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800916c:	4637      	mov	r7, r6
 800916e:	42bb      	cmp	r3, r7
 8009170:	460e      	mov	r6, r1
 8009172:	d9f4      	bls.n	800915e <_printf_i+0x116>
 8009174:	2b08      	cmp	r3, #8
 8009176:	d10b      	bne.n	8009190 <_printf_i+0x148>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	07de      	lsls	r6, r3, #31
 800917c:	d508      	bpl.n	8009190 <_printf_i+0x148>
 800917e:	6923      	ldr	r3, [r4, #16]
 8009180:	6861      	ldr	r1, [r4, #4]
 8009182:	4299      	cmp	r1, r3
 8009184:	bfde      	ittt	le
 8009186:	2330      	movle	r3, #48	; 0x30
 8009188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800918c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009190:	1b52      	subs	r2, r2, r5
 8009192:	6122      	str	r2, [r4, #16]
 8009194:	f8cd a000 	str.w	sl, [sp]
 8009198:	464b      	mov	r3, r9
 800919a:	aa03      	add	r2, sp, #12
 800919c:	4621      	mov	r1, r4
 800919e:	4640      	mov	r0, r8
 80091a0:	f7ff fee4 	bl	8008f6c <_printf_common>
 80091a4:	3001      	adds	r0, #1
 80091a6:	d14a      	bne.n	800923e <_printf_i+0x1f6>
 80091a8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ac:	b004      	add	sp, #16
 80091ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	f043 0320 	orr.w	r3, r3, #32
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	4833      	ldr	r0, [pc, #204]	; (8009288 <_printf_i+0x240>)
 80091bc:	2778      	movs	r7, #120	; 0x78
 80091be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	6829      	ldr	r1, [r5, #0]
 80091c6:	061f      	lsls	r7, r3, #24
 80091c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80091cc:	d402      	bmi.n	80091d4 <_printf_i+0x18c>
 80091ce:	065f      	lsls	r7, r3, #25
 80091d0:	bf48      	it	mi
 80091d2:	b2b6      	uxthmi	r6, r6
 80091d4:	07df      	lsls	r7, r3, #31
 80091d6:	bf48      	it	mi
 80091d8:	f043 0320 	orrmi.w	r3, r3, #32
 80091dc:	6029      	str	r1, [r5, #0]
 80091de:	bf48      	it	mi
 80091e0:	6023      	strmi	r3, [r4, #0]
 80091e2:	b91e      	cbnz	r6, 80091ec <_printf_i+0x1a4>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	f023 0320 	bic.w	r3, r3, #32
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	2310      	movs	r3, #16
 80091ee:	e7a7      	b.n	8009140 <_printf_i+0xf8>
 80091f0:	4824      	ldr	r0, [pc, #144]	; (8009284 <_printf_i+0x23c>)
 80091f2:	e7e4      	b.n	80091be <_printf_i+0x176>
 80091f4:	4615      	mov	r5, r2
 80091f6:	e7bd      	b.n	8009174 <_printf_i+0x12c>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	6826      	ldr	r6, [r4, #0]
 80091fc:	6961      	ldr	r1, [r4, #20]
 80091fe:	1d18      	adds	r0, r3, #4
 8009200:	6028      	str	r0, [r5, #0]
 8009202:	0635      	lsls	r5, r6, #24
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	d501      	bpl.n	800920c <_printf_i+0x1c4>
 8009208:	6019      	str	r1, [r3, #0]
 800920a:	e002      	b.n	8009212 <_printf_i+0x1ca>
 800920c:	0670      	lsls	r0, r6, #25
 800920e:	d5fb      	bpl.n	8009208 <_printf_i+0x1c0>
 8009210:	8019      	strh	r1, [r3, #0]
 8009212:	2300      	movs	r3, #0
 8009214:	6123      	str	r3, [r4, #16]
 8009216:	4615      	mov	r5, r2
 8009218:	e7bc      	b.n	8009194 <_printf_i+0x14c>
 800921a:	682b      	ldr	r3, [r5, #0]
 800921c:	1d1a      	adds	r2, r3, #4
 800921e:	602a      	str	r2, [r5, #0]
 8009220:	681d      	ldr	r5, [r3, #0]
 8009222:	6862      	ldr	r2, [r4, #4]
 8009224:	2100      	movs	r1, #0
 8009226:	4628      	mov	r0, r5
 8009228:	f7f6 ffd2 	bl	80001d0 <memchr>
 800922c:	b108      	cbz	r0, 8009232 <_printf_i+0x1ea>
 800922e:	1b40      	subs	r0, r0, r5
 8009230:	6060      	str	r0, [r4, #4]
 8009232:	6863      	ldr	r3, [r4, #4]
 8009234:	6123      	str	r3, [r4, #16]
 8009236:	2300      	movs	r3, #0
 8009238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800923c:	e7aa      	b.n	8009194 <_printf_i+0x14c>
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	462a      	mov	r2, r5
 8009242:	4649      	mov	r1, r9
 8009244:	4640      	mov	r0, r8
 8009246:	47d0      	blx	sl
 8009248:	3001      	adds	r0, #1
 800924a:	d0ad      	beq.n	80091a8 <_printf_i+0x160>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	079b      	lsls	r3, r3, #30
 8009250:	d413      	bmi.n	800927a <_printf_i+0x232>
 8009252:	68e0      	ldr	r0, [r4, #12]
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	4298      	cmp	r0, r3
 8009258:	bfb8      	it	lt
 800925a:	4618      	movlt	r0, r3
 800925c:	e7a6      	b.n	80091ac <_printf_i+0x164>
 800925e:	2301      	movs	r3, #1
 8009260:	4632      	mov	r2, r6
 8009262:	4649      	mov	r1, r9
 8009264:	4640      	mov	r0, r8
 8009266:	47d0      	blx	sl
 8009268:	3001      	adds	r0, #1
 800926a:	d09d      	beq.n	80091a8 <_printf_i+0x160>
 800926c:	3501      	adds	r5, #1
 800926e:	68e3      	ldr	r3, [r4, #12]
 8009270:	9903      	ldr	r1, [sp, #12]
 8009272:	1a5b      	subs	r3, r3, r1
 8009274:	42ab      	cmp	r3, r5
 8009276:	dcf2      	bgt.n	800925e <_printf_i+0x216>
 8009278:	e7eb      	b.n	8009252 <_printf_i+0x20a>
 800927a:	2500      	movs	r5, #0
 800927c:	f104 0619 	add.w	r6, r4, #25
 8009280:	e7f5      	b.n	800926e <_printf_i+0x226>
 8009282:	bf00      	nop
 8009284:	0800f746 	.word	0x0800f746
 8009288:	0800f757 	.word	0x0800f757

0800928c <_scanf_float>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	b087      	sub	sp, #28
 8009292:	4617      	mov	r7, r2
 8009294:	9303      	str	r3, [sp, #12]
 8009296:	688b      	ldr	r3, [r1, #8]
 8009298:	1e5a      	subs	r2, r3, #1
 800929a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800929e:	bf83      	ittte	hi
 80092a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80092a4:	195b      	addhi	r3, r3, r5
 80092a6:	9302      	strhi	r3, [sp, #8]
 80092a8:	2300      	movls	r3, #0
 80092aa:	bf86      	itte	hi
 80092ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80092b0:	608b      	strhi	r3, [r1, #8]
 80092b2:	9302      	strls	r3, [sp, #8]
 80092b4:	680b      	ldr	r3, [r1, #0]
 80092b6:	468b      	mov	fp, r1
 80092b8:	2500      	movs	r5, #0
 80092ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80092be:	f84b 3b1c 	str.w	r3, [fp], #28
 80092c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80092c6:	4680      	mov	r8, r0
 80092c8:	460c      	mov	r4, r1
 80092ca:	465e      	mov	r6, fp
 80092cc:	46aa      	mov	sl, r5
 80092ce:	46a9      	mov	r9, r5
 80092d0:	9501      	str	r5, [sp, #4]
 80092d2:	68a2      	ldr	r2, [r4, #8]
 80092d4:	b152      	cbz	r2, 80092ec <_scanf_float+0x60>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	2b4e      	cmp	r3, #78	; 0x4e
 80092dc:	d864      	bhi.n	80093a8 <_scanf_float+0x11c>
 80092de:	2b40      	cmp	r3, #64	; 0x40
 80092e0:	d83c      	bhi.n	800935c <_scanf_float+0xd0>
 80092e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80092e6:	b2c8      	uxtb	r0, r1
 80092e8:	280e      	cmp	r0, #14
 80092ea:	d93a      	bls.n	8009362 <_scanf_float+0xd6>
 80092ec:	f1b9 0f00 	cmp.w	r9, #0
 80092f0:	d003      	beq.n	80092fa <_scanf_float+0x6e>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092fe:	f1ba 0f01 	cmp.w	sl, #1
 8009302:	f200 8113 	bhi.w	800952c <_scanf_float+0x2a0>
 8009306:	455e      	cmp	r6, fp
 8009308:	f200 8105 	bhi.w	8009516 <_scanf_float+0x28a>
 800930c:	2501      	movs	r5, #1
 800930e:	4628      	mov	r0, r5
 8009310:	b007      	add	sp, #28
 8009312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009316:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800931a:	2a0d      	cmp	r2, #13
 800931c:	d8e6      	bhi.n	80092ec <_scanf_float+0x60>
 800931e:	a101      	add	r1, pc, #4	; (adr r1, 8009324 <_scanf_float+0x98>)
 8009320:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009324:	08009463 	.word	0x08009463
 8009328:	080092ed 	.word	0x080092ed
 800932c:	080092ed 	.word	0x080092ed
 8009330:	080092ed 	.word	0x080092ed
 8009334:	080094c3 	.word	0x080094c3
 8009338:	0800949b 	.word	0x0800949b
 800933c:	080092ed 	.word	0x080092ed
 8009340:	080092ed 	.word	0x080092ed
 8009344:	08009471 	.word	0x08009471
 8009348:	080092ed 	.word	0x080092ed
 800934c:	080092ed 	.word	0x080092ed
 8009350:	080092ed 	.word	0x080092ed
 8009354:	080092ed 	.word	0x080092ed
 8009358:	08009429 	.word	0x08009429
 800935c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009360:	e7db      	b.n	800931a <_scanf_float+0x8e>
 8009362:	290e      	cmp	r1, #14
 8009364:	d8c2      	bhi.n	80092ec <_scanf_float+0x60>
 8009366:	a001      	add	r0, pc, #4	; (adr r0, 800936c <_scanf_float+0xe0>)
 8009368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800936c:	0800941b 	.word	0x0800941b
 8009370:	080092ed 	.word	0x080092ed
 8009374:	0800941b 	.word	0x0800941b
 8009378:	080094af 	.word	0x080094af
 800937c:	080092ed 	.word	0x080092ed
 8009380:	080093c9 	.word	0x080093c9
 8009384:	08009405 	.word	0x08009405
 8009388:	08009405 	.word	0x08009405
 800938c:	08009405 	.word	0x08009405
 8009390:	08009405 	.word	0x08009405
 8009394:	08009405 	.word	0x08009405
 8009398:	08009405 	.word	0x08009405
 800939c:	08009405 	.word	0x08009405
 80093a0:	08009405 	.word	0x08009405
 80093a4:	08009405 	.word	0x08009405
 80093a8:	2b6e      	cmp	r3, #110	; 0x6e
 80093aa:	d809      	bhi.n	80093c0 <_scanf_float+0x134>
 80093ac:	2b60      	cmp	r3, #96	; 0x60
 80093ae:	d8b2      	bhi.n	8009316 <_scanf_float+0x8a>
 80093b0:	2b54      	cmp	r3, #84	; 0x54
 80093b2:	d077      	beq.n	80094a4 <_scanf_float+0x218>
 80093b4:	2b59      	cmp	r3, #89	; 0x59
 80093b6:	d199      	bne.n	80092ec <_scanf_float+0x60>
 80093b8:	2d07      	cmp	r5, #7
 80093ba:	d197      	bne.n	80092ec <_scanf_float+0x60>
 80093bc:	2508      	movs	r5, #8
 80093be:	e029      	b.n	8009414 <_scanf_float+0x188>
 80093c0:	2b74      	cmp	r3, #116	; 0x74
 80093c2:	d06f      	beq.n	80094a4 <_scanf_float+0x218>
 80093c4:	2b79      	cmp	r3, #121	; 0x79
 80093c6:	e7f6      	b.n	80093b6 <_scanf_float+0x12a>
 80093c8:	6821      	ldr	r1, [r4, #0]
 80093ca:	05c8      	lsls	r0, r1, #23
 80093cc:	d51a      	bpl.n	8009404 <_scanf_float+0x178>
 80093ce:	9b02      	ldr	r3, [sp, #8]
 80093d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80093d4:	6021      	str	r1, [r4, #0]
 80093d6:	f109 0901 	add.w	r9, r9, #1
 80093da:	b11b      	cbz	r3, 80093e4 <_scanf_float+0x158>
 80093dc:	3b01      	subs	r3, #1
 80093de:	3201      	adds	r2, #1
 80093e0:	9302      	str	r3, [sp, #8]
 80093e2:	60a2      	str	r2, [r4, #8]
 80093e4:	68a3      	ldr	r3, [r4, #8]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	60a3      	str	r3, [r4, #8]
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	3301      	adds	r3, #1
 80093ee:	6123      	str	r3, [r4, #16]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	607b      	str	r3, [r7, #4]
 80093f8:	f340 8084 	ble.w	8009504 <_scanf_float+0x278>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	3301      	adds	r3, #1
 8009400:	603b      	str	r3, [r7, #0]
 8009402:	e766      	b.n	80092d2 <_scanf_float+0x46>
 8009404:	eb1a 0f05 	cmn.w	sl, r5
 8009408:	f47f af70 	bne.w	80092ec <_scanf_float+0x60>
 800940c:	6822      	ldr	r2, [r4, #0]
 800940e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009412:	6022      	str	r2, [r4, #0]
 8009414:	f806 3b01 	strb.w	r3, [r6], #1
 8009418:	e7e4      	b.n	80093e4 <_scanf_float+0x158>
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	0610      	lsls	r0, r2, #24
 800941e:	f57f af65 	bpl.w	80092ec <_scanf_float+0x60>
 8009422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009426:	e7f4      	b.n	8009412 <_scanf_float+0x186>
 8009428:	f1ba 0f00 	cmp.w	sl, #0
 800942c:	d10e      	bne.n	800944c <_scanf_float+0x1c0>
 800942e:	f1b9 0f00 	cmp.w	r9, #0
 8009432:	d10e      	bne.n	8009452 <_scanf_float+0x1c6>
 8009434:	6822      	ldr	r2, [r4, #0]
 8009436:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800943a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800943e:	d108      	bne.n	8009452 <_scanf_float+0x1c6>
 8009440:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009444:	6022      	str	r2, [r4, #0]
 8009446:	f04f 0a01 	mov.w	sl, #1
 800944a:	e7e3      	b.n	8009414 <_scanf_float+0x188>
 800944c:	f1ba 0f02 	cmp.w	sl, #2
 8009450:	d055      	beq.n	80094fe <_scanf_float+0x272>
 8009452:	2d01      	cmp	r5, #1
 8009454:	d002      	beq.n	800945c <_scanf_float+0x1d0>
 8009456:	2d04      	cmp	r5, #4
 8009458:	f47f af48 	bne.w	80092ec <_scanf_float+0x60>
 800945c:	3501      	adds	r5, #1
 800945e:	b2ed      	uxtb	r5, r5
 8009460:	e7d8      	b.n	8009414 <_scanf_float+0x188>
 8009462:	f1ba 0f01 	cmp.w	sl, #1
 8009466:	f47f af41 	bne.w	80092ec <_scanf_float+0x60>
 800946a:	f04f 0a02 	mov.w	sl, #2
 800946e:	e7d1      	b.n	8009414 <_scanf_float+0x188>
 8009470:	b97d      	cbnz	r5, 8009492 <_scanf_float+0x206>
 8009472:	f1b9 0f00 	cmp.w	r9, #0
 8009476:	f47f af3c 	bne.w	80092f2 <_scanf_float+0x66>
 800947a:	6822      	ldr	r2, [r4, #0]
 800947c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009480:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009484:	f47f af39 	bne.w	80092fa <_scanf_float+0x6e>
 8009488:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800948c:	6022      	str	r2, [r4, #0]
 800948e:	2501      	movs	r5, #1
 8009490:	e7c0      	b.n	8009414 <_scanf_float+0x188>
 8009492:	2d03      	cmp	r5, #3
 8009494:	d0e2      	beq.n	800945c <_scanf_float+0x1d0>
 8009496:	2d05      	cmp	r5, #5
 8009498:	e7de      	b.n	8009458 <_scanf_float+0x1cc>
 800949a:	2d02      	cmp	r5, #2
 800949c:	f47f af26 	bne.w	80092ec <_scanf_float+0x60>
 80094a0:	2503      	movs	r5, #3
 80094a2:	e7b7      	b.n	8009414 <_scanf_float+0x188>
 80094a4:	2d06      	cmp	r5, #6
 80094a6:	f47f af21 	bne.w	80092ec <_scanf_float+0x60>
 80094aa:	2507      	movs	r5, #7
 80094ac:	e7b2      	b.n	8009414 <_scanf_float+0x188>
 80094ae:	6822      	ldr	r2, [r4, #0]
 80094b0:	0591      	lsls	r1, r2, #22
 80094b2:	f57f af1b 	bpl.w	80092ec <_scanf_float+0x60>
 80094b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80094ba:	6022      	str	r2, [r4, #0]
 80094bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80094c0:	e7a8      	b.n	8009414 <_scanf_float+0x188>
 80094c2:	6822      	ldr	r2, [r4, #0]
 80094c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80094c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80094cc:	d006      	beq.n	80094dc <_scanf_float+0x250>
 80094ce:	0550      	lsls	r0, r2, #21
 80094d0:	f57f af0c 	bpl.w	80092ec <_scanf_float+0x60>
 80094d4:	f1b9 0f00 	cmp.w	r9, #0
 80094d8:	f43f af0f 	beq.w	80092fa <_scanf_float+0x6e>
 80094dc:	0591      	lsls	r1, r2, #22
 80094de:	bf58      	it	pl
 80094e0:	9901      	ldrpl	r1, [sp, #4]
 80094e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80094e6:	bf58      	it	pl
 80094e8:	eba9 0101 	subpl.w	r1, r9, r1
 80094ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80094f0:	bf58      	it	pl
 80094f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80094f6:	6022      	str	r2, [r4, #0]
 80094f8:	f04f 0900 	mov.w	r9, #0
 80094fc:	e78a      	b.n	8009414 <_scanf_float+0x188>
 80094fe:	f04f 0a03 	mov.w	sl, #3
 8009502:	e787      	b.n	8009414 <_scanf_float+0x188>
 8009504:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009508:	4639      	mov	r1, r7
 800950a:	4640      	mov	r0, r8
 800950c:	4798      	blx	r3
 800950e:	2800      	cmp	r0, #0
 8009510:	f43f aedf 	beq.w	80092d2 <_scanf_float+0x46>
 8009514:	e6ea      	b.n	80092ec <_scanf_float+0x60>
 8009516:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800951a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800951e:	463a      	mov	r2, r7
 8009520:	4640      	mov	r0, r8
 8009522:	4798      	blx	r3
 8009524:	6923      	ldr	r3, [r4, #16]
 8009526:	3b01      	subs	r3, #1
 8009528:	6123      	str	r3, [r4, #16]
 800952a:	e6ec      	b.n	8009306 <_scanf_float+0x7a>
 800952c:	1e6b      	subs	r3, r5, #1
 800952e:	2b06      	cmp	r3, #6
 8009530:	d825      	bhi.n	800957e <_scanf_float+0x2f2>
 8009532:	2d02      	cmp	r5, #2
 8009534:	d836      	bhi.n	80095a4 <_scanf_float+0x318>
 8009536:	455e      	cmp	r6, fp
 8009538:	f67f aee8 	bls.w	800930c <_scanf_float+0x80>
 800953c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009540:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009544:	463a      	mov	r2, r7
 8009546:	4640      	mov	r0, r8
 8009548:	4798      	blx	r3
 800954a:	6923      	ldr	r3, [r4, #16]
 800954c:	3b01      	subs	r3, #1
 800954e:	6123      	str	r3, [r4, #16]
 8009550:	e7f1      	b.n	8009536 <_scanf_float+0x2aa>
 8009552:	9802      	ldr	r0, [sp, #8]
 8009554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009558:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800955c:	9002      	str	r0, [sp, #8]
 800955e:	463a      	mov	r2, r7
 8009560:	4640      	mov	r0, r8
 8009562:	4798      	blx	r3
 8009564:	6923      	ldr	r3, [r4, #16]
 8009566:	3b01      	subs	r3, #1
 8009568:	6123      	str	r3, [r4, #16]
 800956a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800956e:	fa5f fa8a 	uxtb.w	sl, sl
 8009572:	f1ba 0f02 	cmp.w	sl, #2
 8009576:	d1ec      	bne.n	8009552 <_scanf_float+0x2c6>
 8009578:	3d03      	subs	r5, #3
 800957a:	b2ed      	uxtb	r5, r5
 800957c:	1b76      	subs	r6, r6, r5
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	05da      	lsls	r2, r3, #23
 8009582:	d52f      	bpl.n	80095e4 <_scanf_float+0x358>
 8009584:	055b      	lsls	r3, r3, #21
 8009586:	d510      	bpl.n	80095aa <_scanf_float+0x31e>
 8009588:	455e      	cmp	r6, fp
 800958a:	f67f aebf 	bls.w	800930c <_scanf_float+0x80>
 800958e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009596:	463a      	mov	r2, r7
 8009598:	4640      	mov	r0, r8
 800959a:	4798      	blx	r3
 800959c:	6923      	ldr	r3, [r4, #16]
 800959e:	3b01      	subs	r3, #1
 80095a0:	6123      	str	r3, [r4, #16]
 80095a2:	e7f1      	b.n	8009588 <_scanf_float+0x2fc>
 80095a4:	46aa      	mov	sl, r5
 80095a6:	9602      	str	r6, [sp, #8]
 80095a8:	e7df      	b.n	800956a <_scanf_float+0x2de>
 80095aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80095ae:	6923      	ldr	r3, [r4, #16]
 80095b0:	2965      	cmp	r1, #101	; 0x65
 80095b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80095b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80095ba:	6123      	str	r3, [r4, #16]
 80095bc:	d00c      	beq.n	80095d8 <_scanf_float+0x34c>
 80095be:	2945      	cmp	r1, #69	; 0x45
 80095c0:	d00a      	beq.n	80095d8 <_scanf_float+0x34c>
 80095c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095c6:	463a      	mov	r2, r7
 80095c8:	4640      	mov	r0, r8
 80095ca:	4798      	blx	r3
 80095cc:	6923      	ldr	r3, [r4, #16]
 80095ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	1eb5      	subs	r5, r6, #2
 80095d6:	6123      	str	r3, [r4, #16]
 80095d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095dc:	463a      	mov	r2, r7
 80095de:	4640      	mov	r0, r8
 80095e0:	4798      	blx	r3
 80095e2:	462e      	mov	r6, r5
 80095e4:	6825      	ldr	r5, [r4, #0]
 80095e6:	f015 0510 	ands.w	r5, r5, #16
 80095ea:	d158      	bne.n	800969e <_scanf_float+0x412>
 80095ec:	7035      	strb	r5, [r6, #0]
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80095f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095f8:	d11c      	bne.n	8009634 <_scanf_float+0x3a8>
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	454b      	cmp	r3, r9
 80095fe:	eba3 0209 	sub.w	r2, r3, r9
 8009602:	d124      	bne.n	800964e <_scanf_float+0x3c2>
 8009604:	2200      	movs	r2, #0
 8009606:	4659      	mov	r1, fp
 8009608:	4640      	mov	r0, r8
 800960a:	f002 fbcd 	bl	800bda8 <_strtod_r>
 800960e:	9b03      	ldr	r3, [sp, #12]
 8009610:	6821      	ldr	r1, [r4, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f011 0f02 	tst.w	r1, #2
 8009618:	ec57 6b10 	vmov	r6, r7, d0
 800961c:	f103 0204 	add.w	r2, r3, #4
 8009620:	d020      	beq.n	8009664 <_scanf_float+0x3d8>
 8009622:	9903      	ldr	r1, [sp, #12]
 8009624:	600a      	str	r2, [r1, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	e9c3 6700 	strd	r6, r7, [r3]
 800962c:	68e3      	ldr	r3, [r4, #12]
 800962e:	3301      	adds	r3, #1
 8009630:	60e3      	str	r3, [r4, #12]
 8009632:	e66c      	b.n	800930e <_scanf_float+0x82>
 8009634:	9b04      	ldr	r3, [sp, #16]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0e4      	beq.n	8009604 <_scanf_float+0x378>
 800963a:	9905      	ldr	r1, [sp, #20]
 800963c:	230a      	movs	r3, #10
 800963e:	462a      	mov	r2, r5
 8009640:	3101      	adds	r1, #1
 8009642:	4640      	mov	r0, r8
 8009644:	f002 fc38 	bl	800beb8 <_strtol_r>
 8009648:	9b04      	ldr	r3, [sp, #16]
 800964a:	9e05      	ldr	r6, [sp, #20]
 800964c:	1ac2      	subs	r2, r0, r3
 800964e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009652:	429e      	cmp	r6, r3
 8009654:	bf28      	it	cs
 8009656:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800965a:	4912      	ldr	r1, [pc, #72]	; (80096a4 <_scanf_float+0x418>)
 800965c:	4630      	mov	r0, r6
 800965e:	f000 f91b 	bl	8009898 <siprintf>
 8009662:	e7cf      	b.n	8009604 <_scanf_float+0x378>
 8009664:	f011 0f04 	tst.w	r1, #4
 8009668:	9903      	ldr	r1, [sp, #12]
 800966a:	600a      	str	r2, [r1, #0]
 800966c:	d1db      	bne.n	8009626 <_scanf_float+0x39a>
 800966e:	f8d3 8000 	ldr.w	r8, [r3]
 8009672:	ee10 2a10 	vmov	r2, s0
 8009676:	ee10 0a10 	vmov	r0, s0
 800967a:	463b      	mov	r3, r7
 800967c:	4639      	mov	r1, r7
 800967e:	f7f7 fa55 	bl	8000b2c <__aeabi_dcmpun>
 8009682:	b128      	cbz	r0, 8009690 <_scanf_float+0x404>
 8009684:	4808      	ldr	r0, [pc, #32]	; (80096a8 <_scanf_float+0x41c>)
 8009686:	f000 fa09 	bl	8009a9c <nanf>
 800968a:	ed88 0a00 	vstr	s0, [r8]
 800968e:	e7cd      	b.n	800962c <_scanf_float+0x3a0>
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f7 faa8 	bl	8000be8 <__aeabi_d2f>
 8009698:	f8c8 0000 	str.w	r0, [r8]
 800969c:	e7c6      	b.n	800962c <_scanf_float+0x3a0>
 800969e:	2500      	movs	r5, #0
 80096a0:	e635      	b.n	800930e <_scanf_float+0x82>
 80096a2:	bf00      	nop
 80096a4:	0800f768 	.word	0x0800f768
 80096a8:	0800fafd 	.word	0x0800fafd

080096ac <std>:
 80096ac:	2300      	movs	r3, #0
 80096ae:	b510      	push	{r4, lr}
 80096b0:	4604      	mov	r4, r0
 80096b2:	e9c0 3300 	strd	r3, r3, [r0]
 80096b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096ba:	6083      	str	r3, [r0, #8]
 80096bc:	8181      	strh	r1, [r0, #12]
 80096be:	6643      	str	r3, [r0, #100]	; 0x64
 80096c0:	81c2      	strh	r2, [r0, #14]
 80096c2:	6183      	str	r3, [r0, #24]
 80096c4:	4619      	mov	r1, r3
 80096c6:	2208      	movs	r2, #8
 80096c8:	305c      	adds	r0, #92	; 0x5c
 80096ca:	f000 f948 	bl	800995e <memset>
 80096ce:	4b0d      	ldr	r3, [pc, #52]	; (8009704 <std+0x58>)
 80096d0:	6263      	str	r3, [r4, #36]	; 0x24
 80096d2:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <std+0x5c>)
 80096d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80096d6:	4b0d      	ldr	r3, [pc, #52]	; (800970c <std+0x60>)
 80096d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096da:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <std+0x64>)
 80096dc:	6323      	str	r3, [r4, #48]	; 0x30
 80096de:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <std+0x68>)
 80096e0:	6224      	str	r4, [r4, #32]
 80096e2:	429c      	cmp	r4, r3
 80096e4:	d006      	beq.n	80096f4 <std+0x48>
 80096e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80096ea:	4294      	cmp	r4, r2
 80096ec:	d002      	beq.n	80096f4 <std+0x48>
 80096ee:	33d0      	adds	r3, #208	; 0xd0
 80096f0:	429c      	cmp	r4, r3
 80096f2:	d105      	bne.n	8009700 <std+0x54>
 80096f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096fc:	f000 b9bc 	b.w	8009a78 <__retarget_lock_init_recursive>
 8009700:	bd10      	pop	{r4, pc}
 8009702:	bf00      	nop
 8009704:	080098d9 	.word	0x080098d9
 8009708:	080098fb 	.word	0x080098fb
 800970c:	08009933 	.word	0x08009933
 8009710:	08009957 	.word	0x08009957
 8009714:	200008e8 	.word	0x200008e8

08009718 <stdio_exit_handler>:
 8009718:	4a02      	ldr	r2, [pc, #8]	; (8009724 <stdio_exit_handler+0xc>)
 800971a:	4903      	ldr	r1, [pc, #12]	; (8009728 <stdio_exit_handler+0x10>)
 800971c:	4803      	ldr	r0, [pc, #12]	; (800972c <stdio_exit_handler+0x14>)
 800971e:	f000 b869 	b.w	80097f4 <_fwalk_sglue>
 8009722:	bf00      	nop
 8009724:	2000000c 	.word	0x2000000c
 8009728:	0800c279 	.word	0x0800c279
 800972c:	20000018 	.word	0x20000018

08009730 <cleanup_stdio>:
 8009730:	6841      	ldr	r1, [r0, #4]
 8009732:	4b0c      	ldr	r3, [pc, #48]	; (8009764 <cleanup_stdio+0x34>)
 8009734:	4299      	cmp	r1, r3
 8009736:	b510      	push	{r4, lr}
 8009738:	4604      	mov	r4, r0
 800973a:	d001      	beq.n	8009740 <cleanup_stdio+0x10>
 800973c:	f002 fd9c 	bl	800c278 <_fflush_r>
 8009740:	68a1      	ldr	r1, [r4, #8]
 8009742:	4b09      	ldr	r3, [pc, #36]	; (8009768 <cleanup_stdio+0x38>)
 8009744:	4299      	cmp	r1, r3
 8009746:	d002      	beq.n	800974e <cleanup_stdio+0x1e>
 8009748:	4620      	mov	r0, r4
 800974a:	f002 fd95 	bl	800c278 <_fflush_r>
 800974e:	68e1      	ldr	r1, [r4, #12]
 8009750:	4b06      	ldr	r3, [pc, #24]	; (800976c <cleanup_stdio+0x3c>)
 8009752:	4299      	cmp	r1, r3
 8009754:	d004      	beq.n	8009760 <cleanup_stdio+0x30>
 8009756:	4620      	mov	r0, r4
 8009758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800975c:	f002 bd8c 	b.w	800c278 <_fflush_r>
 8009760:	bd10      	pop	{r4, pc}
 8009762:	bf00      	nop
 8009764:	200008e8 	.word	0x200008e8
 8009768:	20000950 	.word	0x20000950
 800976c:	200009b8 	.word	0x200009b8

08009770 <global_stdio_init.part.0>:
 8009770:	b510      	push	{r4, lr}
 8009772:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <global_stdio_init.part.0+0x30>)
 8009774:	4c0b      	ldr	r4, [pc, #44]	; (80097a4 <global_stdio_init.part.0+0x34>)
 8009776:	4a0c      	ldr	r2, [pc, #48]	; (80097a8 <global_stdio_init.part.0+0x38>)
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	4620      	mov	r0, r4
 800977c:	2200      	movs	r2, #0
 800977e:	2104      	movs	r1, #4
 8009780:	f7ff ff94 	bl	80096ac <std>
 8009784:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009788:	2201      	movs	r2, #1
 800978a:	2109      	movs	r1, #9
 800978c:	f7ff ff8e 	bl	80096ac <std>
 8009790:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009794:	2202      	movs	r2, #2
 8009796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800979a:	2112      	movs	r1, #18
 800979c:	f7ff bf86 	b.w	80096ac <std>
 80097a0:	20000a20 	.word	0x20000a20
 80097a4:	200008e8 	.word	0x200008e8
 80097a8:	08009719 	.word	0x08009719

080097ac <__sfp_lock_acquire>:
 80097ac:	4801      	ldr	r0, [pc, #4]	; (80097b4 <__sfp_lock_acquire+0x8>)
 80097ae:	f000 b964 	b.w	8009a7a <__retarget_lock_acquire_recursive>
 80097b2:	bf00      	nop
 80097b4:	20000a29 	.word	0x20000a29

080097b8 <__sfp_lock_release>:
 80097b8:	4801      	ldr	r0, [pc, #4]	; (80097c0 <__sfp_lock_release+0x8>)
 80097ba:	f000 b95f 	b.w	8009a7c <__retarget_lock_release_recursive>
 80097be:	bf00      	nop
 80097c0:	20000a29 	.word	0x20000a29

080097c4 <__sinit>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	4604      	mov	r4, r0
 80097c8:	f7ff fff0 	bl	80097ac <__sfp_lock_acquire>
 80097cc:	6a23      	ldr	r3, [r4, #32]
 80097ce:	b11b      	cbz	r3, 80097d8 <__sinit+0x14>
 80097d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097d4:	f7ff bff0 	b.w	80097b8 <__sfp_lock_release>
 80097d8:	4b04      	ldr	r3, [pc, #16]	; (80097ec <__sinit+0x28>)
 80097da:	6223      	str	r3, [r4, #32]
 80097dc:	4b04      	ldr	r3, [pc, #16]	; (80097f0 <__sinit+0x2c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1f5      	bne.n	80097d0 <__sinit+0xc>
 80097e4:	f7ff ffc4 	bl	8009770 <global_stdio_init.part.0>
 80097e8:	e7f2      	b.n	80097d0 <__sinit+0xc>
 80097ea:	bf00      	nop
 80097ec:	08009731 	.word	0x08009731
 80097f0:	20000a20 	.word	0x20000a20

080097f4 <_fwalk_sglue>:
 80097f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097f8:	4607      	mov	r7, r0
 80097fa:	4688      	mov	r8, r1
 80097fc:	4614      	mov	r4, r2
 80097fe:	2600      	movs	r6, #0
 8009800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009804:	f1b9 0901 	subs.w	r9, r9, #1
 8009808:	d505      	bpl.n	8009816 <_fwalk_sglue+0x22>
 800980a:	6824      	ldr	r4, [r4, #0]
 800980c:	2c00      	cmp	r4, #0
 800980e:	d1f7      	bne.n	8009800 <_fwalk_sglue+0xc>
 8009810:	4630      	mov	r0, r6
 8009812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009816:	89ab      	ldrh	r3, [r5, #12]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d907      	bls.n	800982c <_fwalk_sglue+0x38>
 800981c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009820:	3301      	adds	r3, #1
 8009822:	d003      	beq.n	800982c <_fwalk_sglue+0x38>
 8009824:	4629      	mov	r1, r5
 8009826:	4638      	mov	r0, r7
 8009828:	47c0      	blx	r8
 800982a:	4306      	orrs	r6, r0
 800982c:	3568      	adds	r5, #104	; 0x68
 800982e:	e7e9      	b.n	8009804 <_fwalk_sglue+0x10>

08009830 <sniprintf>:
 8009830:	b40c      	push	{r2, r3}
 8009832:	b530      	push	{r4, r5, lr}
 8009834:	4b17      	ldr	r3, [pc, #92]	; (8009894 <sniprintf+0x64>)
 8009836:	1e0c      	subs	r4, r1, #0
 8009838:	681d      	ldr	r5, [r3, #0]
 800983a:	b09d      	sub	sp, #116	; 0x74
 800983c:	da08      	bge.n	8009850 <sniprintf+0x20>
 800983e:	238b      	movs	r3, #139	; 0x8b
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	f04f 30ff 	mov.w	r0, #4294967295
 8009846:	b01d      	add	sp, #116	; 0x74
 8009848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800984c:	b002      	add	sp, #8
 800984e:	4770      	bx	lr
 8009850:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009854:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009858:	bf14      	ite	ne
 800985a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800985e:	4623      	moveq	r3, r4
 8009860:	9304      	str	r3, [sp, #16]
 8009862:	9307      	str	r3, [sp, #28]
 8009864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009868:	9002      	str	r0, [sp, #8]
 800986a:	9006      	str	r0, [sp, #24]
 800986c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009870:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009872:	ab21      	add	r3, sp, #132	; 0x84
 8009874:	a902      	add	r1, sp, #8
 8009876:	4628      	mov	r0, r5
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	f002 fb79 	bl	800bf70 <_svfiprintf_r>
 800987e:	1c43      	adds	r3, r0, #1
 8009880:	bfbc      	itt	lt
 8009882:	238b      	movlt	r3, #139	; 0x8b
 8009884:	602b      	strlt	r3, [r5, #0]
 8009886:	2c00      	cmp	r4, #0
 8009888:	d0dd      	beq.n	8009846 <sniprintf+0x16>
 800988a:	9b02      	ldr	r3, [sp, #8]
 800988c:	2200      	movs	r2, #0
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	e7d9      	b.n	8009846 <sniprintf+0x16>
 8009892:	bf00      	nop
 8009894:	20000064 	.word	0x20000064

08009898 <siprintf>:
 8009898:	b40e      	push	{r1, r2, r3}
 800989a:	b500      	push	{lr}
 800989c:	b09c      	sub	sp, #112	; 0x70
 800989e:	ab1d      	add	r3, sp, #116	; 0x74
 80098a0:	9002      	str	r0, [sp, #8]
 80098a2:	9006      	str	r0, [sp, #24]
 80098a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098a8:	4809      	ldr	r0, [pc, #36]	; (80098d0 <siprintf+0x38>)
 80098aa:	9107      	str	r1, [sp, #28]
 80098ac:	9104      	str	r1, [sp, #16]
 80098ae:	4909      	ldr	r1, [pc, #36]	; (80098d4 <siprintf+0x3c>)
 80098b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b4:	9105      	str	r1, [sp, #20]
 80098b6:	6800      	ldr	r0, [r0, #0]
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	a902      	add	r1, sp, #8
 80098bc:	f002 fb58 	bl	800bf70 <_svfiprintf_r>
 80098c0:	9b02      	ldr	r3, [sp, #8]
 80098c2:	2200      	movs	r2, #0
 80098c4:	701a      	strb	r2, [r3, #0]
 80098c6:	b01c      	add	sp, #112	; 0x70
 80098c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098cc:	b003      	add	sp, #12
 80098ce:	4770      	bx	lr
 80098d0:	20000064 	.word	0x20000064
 80098d4:	ffff0208 	.word	0xffff0208

080098d8 <__sread>:
 80098d8:	b510      	push	{r4, lr}
 80098da:	460c      	mov	r4, r1
 80098dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e0:	f000 f86c 	bl	80099bc <_read_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	bfab      	itete	ge
 80098e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ea:	89a3      	ldrhlt	r3, [r4, #12]
 80098ec:	181b      	addge	r3, r3, r0
 80098ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098f2:	bfac      	ite	ge
 80098f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098f6:	81a3      	strhlt	r3, [r4, #12]
 80098f8:	bd10      	pop	{r4, pc}

080098fa <__swrite>:
 80098fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fe:	461f      	mov	r7, r3
 8009900:	898b      	ldrh	r3, [r1, #12]
 8009902:	05db      	lsls	r3, r3, #23
 8009904:	4605      	mov	r5, r0
 8009906:	460c      	mov	r4, r1
 8009908:	4616      	mov	r6, r2
 800990a:	d505      	bpl.n	8009918 <__swrite+0x1e>
 800990c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009910:	2302      	movs	r3, #2
 8009912:	2200      	movs	r2, #0
 8009914:	f000 f840 	bl	8009998 <_lseek_r>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800991e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	4628      	mov	r0, r5
 800992a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992e:	f000 b867 	b.w	8009a00 <_write_r>

08009932 <__sseek>:
 8009932:	b510      	push	{r4, lr}
 8009934:	460c      	mov	r4, r1
 8009936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993a:	f000 f82d 	bl	8009998 <_lseek_r>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	bf15      	itete	ne
 8009944:	6560      	strne	r0, [r4, #84]	; 0x54
 8009946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800994a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800994e:	81a3      	strheq	r3, [r4, #12]
 8009950:	bf18      	it	ne
 8009952:	81a3      	strhne	r3, [r4, #12]
 8009954:	bd10      	pop	{r4, pc}

08009956 <__sclose>:
 8009956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995a:	f000 b80d 	b.w	8009978 <_close_r>

0800995e <memset>:
 800995e:	4402      	add	r2, r0
 8009960:	4603      	mov	r3, r0
 8009962:	4293      	cmp	r3, r2
 8009964:	d100      	bne.n	8009968 <memset+0xa>
 8009966:	4770      	bx	lr
 8009968:	f803 1b01 	strb.w	r1, [r3], #1
 800996c:	e7f9      	b.n	8009962 <memset+0x4>
	...

08009970 <_localeconv_r>:
 8009970:	4800      	ldr	r0, [pc, #0]	; (8009974 <_localeconv_r+0x4>)
 8009972:	4770      	bx	lr
 8009974:	20000158 	.word	0x20000158

08009978 <_close_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4d06      	ldr	r5, [pc, #24]	; (8009994 <_close_r+0x1c>)
 800997c:	2300      	movs	r3, #0
 800997e:	4604      	mov	r4, r0
 8009980:	4608      	mov	r0, r1
 8009982:	602b      	str	r3, [r5, #0]
 8009984:	f7fa fb1b 	bl	8003fbe <_close>
 8009988:	1c43      	adds	r3, r0, #1
 800998a:	d102      	bne.n	8009992 <_close_r+0x1a>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	b103      	cbz	r3, 8009992 <_close_r+0x1a>
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	20000a24 	.word	0x20000a24

08009998 <_lseek_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d07      	ldr	r5, [pc, #28]	; (80099b8 <_lseek_r+0x20>)
 800999c:	4604      	mov	r4, r0
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	2200      	movs	r2, #0
 80099a4:	602a      	str	r2, [r5, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7fa fb30 	bl	800400c <_lseek>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_lseek_r+0x1e>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_lseek_r+0x1e>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	20000a24 	.word	0x20000a24

080099bc <_read_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d07      	ldr	r5, [pc, #28]	; (80099dc <_read_r+0x20>)
 80099c0:	4604      	mov	r4, r0
 80099c2:	4608      	mov	r0, r1
 80099c4:	4611      	mov	r1, r2
 80099c6:	2200      	movs	r2, #0
 80099c8:	602a      	str	r2, [r5, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	f7fa fabe 	bl	8003f4c <_read>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d102      	bne.n	80099da <_read_r+0x1e>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b103      	cbz	r3, 80099da <_read_r+0x1e>
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	20000a24 	.word	0x20000a24

080099e0 <_sbrk_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d06      	ldr	r5, [pc, #24]	; (80099fc <_sbrk_r+0x1c>)
 80099e4:	2300      	movs	r3, #0
 80099e6:	4604      	mov	r4, r0
 80099e8:	4608      	mov	r0, r1
 80099ea:	602b      	str	r3, [r5, #0]
 80099ec:	f7fa fb1c 	bl	8004028 <_sbrk>
 80099f0:	1c43      	adds	r3, r0, #1
 80099f2:	d102      	bne.n	80099fa <_sbrk_r+0x1a>
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	b103      	cbz	r3, 80099fa <_sbrk_r+0x1a>
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	bd38      	pop	{r3, r4, r5, pc}
 80099fc:	20000a24 	.word	0x20000a24

08009a00 <_write_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4d07      	ldr	r5, [pc, #28]	; (8009a20 <_write_r+0x20>)
 8009a04:	4604      	mov	r4, r0
 8009a06:	4608      	mov	r0, r1
 8009a08:	4611      	mov	r1, r2
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	602a      	str	r2, [r5, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f7fa fab9 	bl	8003f86 <_write>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_write_r+0x1e>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_write_r+0x1e>
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	20000a24 	.word	0x20000a24

08009a24 <__errno>:
 8009a24:	4b01      	ldr	r3, [pc, #4]	; (8009a2c <__errno+0x8>)
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	20000064 	.word	0x20000064

08009a30 <__libc_init_array>:
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	4d0d      	ldr	r5, [pc, #52]	; (8009a68 <__libc_init_array+0x38>)
 8009a34:	4c0d      	ldr	r4, [pc, #52]	; (8009a6c <__libc_init_array+0x3c>)
 8009a36:	1b64      	subs	r4, r4, r5
 8009a38:	10a4      	asrs	r4, r4, #2
 8009a3a:	2600      	movs	r6, #0
 8009a3c:	42a6      	cmp	r6, r4
 8009a3e:	d109      	bne.n	8009a54 <__libc_init_array+0x24>
 8009a40:	4d0b      	ldr	r5, [pc, #44]	; (8009a70 <__libc_init_array+0x40>)
 8009a42:	4c0c      	ldr	r4, [pc, #48]	; (8009a74 <__libc_init_array+0x44>)
 8009a44:	f005 f908 	bl	800ec58 <_init>
 8009a48:	1b64      	subs	r4, r4, r5
 8009a4a:	10a4      	asrs	r4, r4, #2
 8009a4c:	2600      	movs	r6, #0
 8009a4e:	42a6      	cmp	r6, r4
 8009a50:	d105      	bne.n	8009a5e <__libc_init_array+0x2e>
 8009a52:	bd70      	pop	{r4, r5, r6, pc}
 8009a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a58:	4798      	blx	r3
 8009a5a:	3601      	adds	r6, #1
 8009a5c:	e7ee      	b.n	8009a3c <__libc_init_array+0xc>
 8009a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a62:	4798      	blx	r3
 8009a64:	3601      	adds	r6, #1
 8009a66:	e7f2      	b.n	8009a4e <__libc_init_array+0x1e>
 8009a68:	0800fdb0 	.word	0x0800fdb0
 8009a6c:	0800fdb0 	.word	0x0800fdb0
 8009a70:	0800fdb0 	.word	0x0800fdb0
 8009a74:	0800fdb4 	.word	0x0800fdb4

08009a78 <__retarget_lock_init_recursive>:
 8009a78:	4770      	bx	lr

08009a7a <__retarget_lock_acquire_recursive>:
 8009a7a:	4770      	bx	lr

08009a7c <__retarget_lock_release_recursive>:
 8009a7c:	4770      	bx	lr

08009a7e <memcpy>:
 8009a7e:	440a      	add	r2, r1
 8009a80:	4291      	cmp	r1, r2
 8009a82:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a86:	d100      	bne.n	8009a8a <memcpy+0xc>
 8009a88:	4770      	bx	lr
 8009a8a:	b510      	push	{r4, lr}
 8009a8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a94:	4291      	cmp	r1, r2
 8009a96:	d1f9      	bne.n	8009a8c <memcpy+0xe>
 8009a98:	bd10      	pop	{r4, pc}
	...

08009a9c <nanf>:
 8009a9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009aa4 <nanf+0x8>
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	7fc00000 	.word	0x7fc00000

08009aa8 <quorem>:
 8009aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	6903      	ldr	r3, [r0, #16]
 8009aae:	690c      	ldr	r4, [r1, #16]
 8009ab0:	42a3      	cmp	r3, r4
 8009ab2:	4607      	mov	r7, r0
 8009ab4:	db7e      	blt.n	8009bb4 <quorem+0x10c>
 8009ab6:	3c01      	subs	r4, #1
 8009ab8:	f101 0814 	add.w	r8, r1, #20
 8009abc:	f100 0514 	add.w	r5, r0, #20
 8009ac0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009aca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ad6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ada:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ade:	d331      	bcc.n	8009b44 <quorem+0x9c>
 8009ae0:	f04f 0e00 	mov.w	lr, #0
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	46ac      	mov	ip, r5
 8009ae8:	46f2      	mov	sl, lr
 8009aea:	f850 2b04 	ldr.w	r2, [r0], #4
 8009aee:	b293      	uxth	r3, r2
 8009af0:	fb06 e303 	mla	r3, r6, r3, lr
 8009af4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009af8:	0c1a      	lsrs	r2, r3, #16
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	ebaa 0303 	sub.w	r3, sl, r3
 8009b00:	f8dc a000 	ldr.w	sl, [ip]
 8009b04:	fa13 f38a 	uxtah	r3, r3, sl
 8009b08:	fb06 220e 	mla	r2, r6, lr, r2
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	9b00      	ldr	r3, [sp, #0]
 8009b10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b14:	b292      	uxth	r2, r2
 8009b16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b1e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b22:	4581      	cmp	r9, r0
 8009b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b28:	f84c 3b04 	str.w	r3, [ip], #4
 8009b2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b30:	d2db      	bcs.n	8009aea <quorem+0x42>
 8009b32:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b36:	b92b      	cbnz	r3, 8009b44 <quorem+0x9c>
 8009b38:	9b01      	ldr	r3, [sp, #4]
 8009b3a:	3b04      	subs	r3, #4
 8009b3c:	429d      	cmp	r5, r3
 8009b3e:	461a      	mov	r2, r3
 8009b40:	d32c      	bcc.n	8009b9c <quorem+0xf4>
 8009b42:	613c      	str	r4, [r7, #16]
 8009b44:	4638      	mov	r0, r7
 8009b46:	f001 f93b 	bl	800adc0 <__mcmp>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	db22      	blt.n	8009b94 <quorem+0xec>
 8009b4e:	3601      	adds	r6, #1
 8009b50:	4629      	mov	r1, r5
 8009b52:	2000      	movs	r0, #0
 8009b54:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b58:	f8d1 c000 	ldr.w	ip, [r1]
 8009b5c:	b293      	uxth	r3, r2
 8009b5e:	1ac3      	subs	r3, r0, r3
 8009b60:	0c12      	lsrs	r2, r2, #16
 8009b62:	fa13 f38c 	uxtah	r3, r3, ip
 8009b66:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009b6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b74:	45c1      	cmp	r9, r8
 8009b76:	f841 3b04 	str.w	r3, [r1], #4
 8009b7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b7e:	d2e9      	bcs.n	8009b54 <quorem+0xac>
 8009b80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b88:	b922      	cbnz	r2, 8009b94 <quorem+0xec>
 8009b8a:	3b04      	subs	r3, #4
 8009b8c:	429d      	cmp	r5, r3
 8009b8e:	461a      	mov	r2, r3
 8009b90:	d30a      	bcc.n	8009ba8 <quorem+0x100>
 8009b92:	613c      	str	r4, [r7, #16]
 8009b94:	4630      	mov	r0, r6
 8009b96:	b003      	add	sp, #12
 8009b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9c:	6812      	ldr	r2, [r2, #0]
 8009b9e:	3b04      	subs	r3, #4
 8009ba0:	2a00      	cmp	r2, #0
 8009ba2:	d1ce      	bne.n	8009b42 <quorem+0x9a>
 8009ba4:	3c01      	subs	r4, #1
 8009ba6:	e7c9      	b.n	8009b3c <quorem+0x94>
 8009ba8:	6812      	ldr	r2, [r2, #0]
 8009baa:	3b04      	subs	r3, #4
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	d1f0      	bne.n	8009b92 <quorem+0xea>
 8009bb0:	3c01      	subs	r4, #1
 8009bb2:	e7eb      	b.n	8009b8c <quorem+0xe4>
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e7ee      	b.n	8009b96 <quorem+0xee>

08009bb8 <_dtoa_r>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	ed2d 8b04 	vpush	{d8-d9}
 8009bc0:	69c5      	ldr	r5, [r0, #28]
 8009bc2:	b093      	sub	sp, #76	; 0x4c
 8009bc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009bc8:	ec57 6b10 	vmov	r6, r7, d0
 8009bcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009bd0:	9107      	str	r1, [sp, #28]
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	920a      	str	r2, [sp, #40]	; 0x28
 8009bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8009bd8:	b975      	cbnz	r5, 8009bf8 <_dtoa_r+0x40>
 8009bda:	2010      	movs	r0, #16
 8009bdc:	f7fe fe34 	bl	8008848 <malloc>
 8009be0:	4602      	mov	r2, r0
 8009be2:	61e0      	str	r0, [r4, #28]
 8009be4:	b920      	cbnz	r0, 8009bf0 <_dtoa_r+0x38>
 8009be6:	4bae      	ldr	r3, [pc, #696]	; (8009ea0 <_dtoa_r+0x2e8>)
 8009be8:	21ef      	movs	r1, #239	; 0xef
 8009bea:	48ae      	ldr	r0, [pc, #696]	; (8009ea4 <_dtoa_r+0x2ec>)
 8009bec:	f002 fba0 	bl	800c330 <__assert_func>
 8009bf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009bf4:	6005      	str	r5, [r0, #0]
 8009bf6:	60c5      	str	r5, [r0, #12]
 8009bf8:	69e3      	ldr	r3, [r4, #28]
 8009bfa:	6819      	ldr	r1, [r3, #0]
 8009bfc:	b151      	cbz	r1, 8009c14 <_dtoa_r+0x5c>
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	604a      	str	r2, [r1, #4]
 8009c02:	2301      	movs	r3, #1
 8009c04:	4093      	lsls	r3, r2
 8009c06:	608b      	str	r3, [r1, #8]
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f000 fe53 	bl	800a8b4 <_Bfree>
 8009c0e:	69e3      	ldr	r3, [r4, #28]
 8009c10:	2200      	movs	r2, #0
 8009c12:	601a      	str	r2, [r3, #0]
 8009c14:	1e3b      	subs	r3, r7, #0
 8009c16:	bfbb      	ittet	lt
 8009c18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009c1c:	9303      	strlt	r3, [sp, #12]
 8009c1e:	2300      	movge	r3, #0
 8009c20:	2201      	movlt	r2, #1
 8009c22:	bfac      	ite	ge
 8009c24:	f8c8 3000 	strge.w	r3, [r8]
 8009c28:	f8c8 2000 	strlt.w	r2, [r8]
 8009c2c:	4b9e      	ldr	r3, [pc, #632]	; (8009ea8 <_dtoa_r+0x2f0>)
 8009c2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009c32:	ea33 0308 	bics.w	r3, r3, r8
 8009c36:	d11b      	bne.n	8009c70 <_dtoa_r+0xb8>
 8009c38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c3e:	6013      	str	r3, [r2, #0]
 8009c40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009c44:	4333      	orrs	r3, r6
 8009c46:	f000 8593 	beq.w	800a770 <_dtoa_r+0xbb8>
 8009c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c4c:	b963      	cbnz	r3, 8009c68 <_dtoa_r+0xb0>
 8009c4e:	4b97      	ldr	r3, [pc, #604]	; (8009eac <_dtoa_r+0x2f4>)
 8009c50:	e027      	b.n	8009ca2 <_dtoa_r+0xea>
 8009c52:	4b97      	ldr	r3, [pc, #604]	; (8009eb0 <_dtoa_r+0x2f8>)
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	3308      	adds	r3, #8
 8009c58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	9800      	ldr	r0, [sp, #0]
 8009c5e:	b013      	add	sp, #76	; 0x4c
 8009c60:	ecbd 8b04 	vpop	{d8-d9}
 8009c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c68:	4b90      	ldr	r3, [pc, #576]	; (8009eac <_dtoa_r+0x2f4>)
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	3303      	adds	r3, #3
 8009c6e:	e7f3      	b.n	8009c58 <_dtoa_r+0xa0>
 8009c70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c74:	2200      	movs	r2, #0
 8009c76:	ec51 0b17 	vmov	r0, r1, d7
 8009c7a:	eeb0 8a47 	vmov.f32	s16, s14
 8009c7e:	eef0 8a67 	vmov.f32	s17, s15
 8009c82:	2300      	movs	r3, #0
 8009c84:	f7f6 ff20 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c88:	4681      	mov	r9, r0
 8009c8a:	b160      	cbz	r0, 8009ca6 <_dtoa_r+0xee>
 8009c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c8e:	2301      	movs	r3, #1
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 8568 	beq.w	800a76a <_dtoa_r+0xbb2>
 8009c9a:	4b86      	ldr	r3, [pc, #536]	; (8009eb4 <_dtoa_r+0x2fc>)
 8009c9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	e7da      	b.n	8009c5c <_dtoa_r+0xa4>
 8009ca6:	aa10      	add	r2, sp, #64	; 0x40
 8009ca8:	a911      	add	r1, sp, #68	; 0x44
 8009caa:	4620      	mov	r0, r4
 8009cac:	eeb0 0a48 	vmov.f32	s0, s16
 8009cb0:	eef0 0a68 	vmov.f32	s1, s17
 8009cb4:	f001 f99a 	bl	800afec <__d2b>
 8009cb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009cbc:	4682      	mov	sl, r0
 8009cbe:	2d00      	cmp	r5, #0
 8009cc0:	d07f      	beq.n	8009dc2 <_dtoa_r+0x20a>
 8009cc2:	ee18 3a90 	vmov	r3, s17
 8009cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009cce:	ec51 0b18 	vmov	r0, r1, d8
 8009cd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009cd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009cda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009cde:	4619      	mov	r1, r3
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4b75      	ldr	r3, [pc, #468]	; (8009eb8 <_dtoa_r+0x300>)
 8009ce4:	f7f6 fad0 	bl	8000288 <__aeabi_dsub>
 8009ce8:	a367      	add	r3, pc, #412	; (adr r3, 8009e88 <_dtoa_r+0x2d0>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 fc83 	bl	80005f8 <__aeabi_dmul>
 8009cf2:	a367      	add	r3, pc, #412	; (adr r3, 8009e90 <_dtoa_r+0x2d8>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	f7f6 fac8 	bl	800028c <__adddf3>
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	4628      	mov	r0, r5
 8009d00:	460f      	mov	r7, r1
 8009d02:	f7f6 fc0f 	bl	8000524 <__aeabi_i2d>
 8009d06:	a364      	add	r3, pc, #400	; (adr r3, 8009e98 <_dtoa_r+0x2e0>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f7f6 fc74 	bl	80005f8 <__aeabi_dmul>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	4630      	mov	r0, r6
 8009d16:	4639      	mov	r1, r7
 8009d18:	f7f6 fab8 	bl	800028c <__adddf3>
 8009d1c:	4606      	mov	r6, r0
 8009d1e:	460f      	mov	r7, r1
 8009d20:	f7f6 ff1a 	bl	8000b58 <__aeabi_d2iz>
 8009d24:	2200      	movs	r2, #0
 8009d26:	4683      	mov	fp, r0
 8009d28:	2300      	movs	r3, #0
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	4639      	mov	r1, r7
 8009d2e:	f7f6 fed5 	bl	8000adc <__aeabi_dcmplt>
 8009d32:	b148      	cbz	r0, 8009d48 <_dtoa_r+0x190>
 8009d34:	4658      	mov	r0, fp
 8009d36:	f7f6 fbf5 	bl	8000524 <__aeabi_i2d>
 8009d3a:	4632      	mov	r2, r6
 8009d3c:	463b      	mov	r3, r7
 8009d3e:	f7f6 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d42:	b908      	cbnz	r0, 8009d48 <_dtoa_r+0x190>
 8009d44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d48:	f1bb 0f16 	cmp.w	fp, #22
 8009d4c:	d857      	bhi.n	8009dfe <_dtoa_r+0x246>
 8009d4e:	4b5b      	ldr	r3, [pc, #364]	; (8009ebc <_dtoa_r+0x304>)
 8009d50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	ec51 0b18 	vmov	r0, r1, d8
 8009d5c:	f7f6 febe 	bl	8000adc <__aeabi_dcmplt>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d04e      	beq.n	8009e02 <_dtoa_r+0x24a>
 8009d64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d68:	2300      	movs	r3, #0
 8009d6a:	930c      	str	r3, [sp, #48]	; 0x30
 8009d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d6e:	1b5b      	subs	r3, r3, r5
 8009d70:	1e5a      	subs	r2, r3, #1
 8009d72:	bf45      	ittet	mi
 8009d74:	f1c3 0301 	rsbmi	r3, r3, #1
 8009d78:	9305      	strmi	r3, [sp, #20]
 8009d7a:	2300      	movpl	r3, #0
 8009d7c:	2300      	movmi	r3, #0
 8009d7e:	9206      	str	r2, [sp, #24]
 8009d80:	bf54      	ite	pl
 8009d82:	9305      	strpl	r3, [sp, #20]
 8009d84:	9306      	strmi	r3, [sp, #24]
 8009d86:	f1bb 0f00 	cmp.w	fp, #0
 8009d8a:	db3c      	blt.n	8009e06 <_dtoa_r+0x24e>
 8009d8c:	9b06      	ldr	r3, [sp, #24]
 8009d8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009d92:	445b      	add	r3, fp
 8009d94:	9306      	str	r3, [sp, #24]
 8009d96:	2300      	movs	r3, #0
 8009d98:	9308      	str	r3, [sp, #32]
 8009d9a:	9b07      	ldr	r3, [sp, #28]
 8009d9c:	2b09      	cmp	r3, #9
 8009d9e:	d868      	bhi.n	8009e72 <_dtoa_r+0x2ba>
 8009da0:	2b05      	cmp	r3, #5
 8009da2:	bfc4      	itt	gt
 8009da4:	3b04      	subgt	r3, #4
 8009da6:	9307      	strgt	r3, [sp, #28]
 8009da8:	9b07      	ldr	r3, [sp, #28]
 8009daa:	f1a3 0302 	sub.w	r3, r3, #2
 8009dae:	bfcc      	ite	gt
 8009db0:	2500      	movgt	r5, #0
 8009db2:	2501      	movle	r5, #1
 8009db4:	2b03      	cmp	r3, #3
 8009db6:	f200 8085 	bhi.w	8009ec4 <_dtoa_r+0x30c>
 8009dba:	e8df f003 	tbb	[pc, r3]
 8009dbe:	3b2e      	.short	0x3b2e
 8009dc0:	5839      	.short	0x5839
 8009dc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009dc6:	441d      	add	r5, r3
 8009dc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009dcc:	2b20      	cmp	r3, #32
 8009dce:	bfc1      	itttt	gt
 8009dd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009dd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8009dd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009ddc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009de0:	bfd6      	itet	le
 8009de2:	f1c3 0320 	rsble	r3, r3, #32
 8009de6:	ea48 0003 	orrgt.w	r0, r8, r3
 8009dea:	fa06 f003 	lslle.w	r0, r6, r3
 8009dee:	f7f6 fb89 	bl	8000504 <__aeabi_ui2d>
 8009df2:	2201      	movs	r2, #1
 8009df4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009df8:	3d01      	subs	r5, #1
 8009dfa:	920e      	str	r2, [sp, #56]	; 0x38
 8009dfc:	e76f      	b.n	8009cde <_dtoa_r+0x126>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e7b3      	b.n	8009d6a <_dtoa_r+0x1b2>
 8009e02:	900c      	str	r0, [sp, #48]	; 0x30
 8009e04:	e7b2      	b.n	8009d6c <_dtoa_r+0x1b4>
 8009e06:	9b05      	ldr	r3, [sp, #20]
 8009e08:	eba3 030b 	sub.w	r3, r3, fp
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	f1cb 0300 	rsb	r3, fp, #0
 8009e12:	9308      	str	r3, [sp, #32]
 8009e14:	2300      	movs	r3, #0
 8009e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e18:	e7bf      	b.n	8009d9a <_dtoa_r+0x1e2>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	dc52      	bgt.n	8009eca <_dtoa_r+0x312>
 8009e24:	2301      	movs	r3, #1
 8009e26:	9301      	str	r3, [sp, #4]
 8009e28:	9304      	str	r3, [sp, #16]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	920a      	str	r2, [sp, #40]	; 0x28
 8009e2e:	e00b      	b.n	8009e48 <_dtoa_r+0x290>
 8009e30:	2301      	movs	r3, #1
 8009e32:	e7f3      	b.n	8009e1c <_dtoa_r+0x264>
 8009e34:	2300      	movs	r3, #0
 8009e36:	9309      	str	r3, [sp, #36]	; 0x24
 8009e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e3a:	445b      	add	r3, fp
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	bfb8      	it	lt
 8009e46:	2301      	movlt	r3, #1
 8009e48:	69e0      	ldr	r0, [r4, #28]
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	2204      	movs	r2, #4
 8009e4e:	f102 0614 	add.w	r6, r2, #20
 8009e52:	429e      	cmp	r6, r3
 8009e54:	d93d      	bls.n	8009ed2 <_dtoa_r+0x31a>
 8009e56:	6041      	str	r1, [r0, #4]
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 fceb 	bl	800a834 <_Balloc>
 8009e5e:	9000      	str	r0, [sp, #0]
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d139      	bne.n	8009ed8 <_dtoa_r+0x320>
 8009e64:	4b16      	ldr	r3, [pc, #88]	; (8009ec0 <_dtoa_r+0x308>)
 8009e66:	4602      	mov	r2, r0
 8009e68:	f240 11af 	movw	r1, #431	; 0x1af
 8009e6c:	e6bd      	b.n	8009bea <_dtoa_r+0x32>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e7e1      	b.n	8009e36 <_dtoa_r+0x27e>
 8009e72:	2501      	movs	r5, #1
 8009e74:	2300      	movs	r3, #0
 8009e76:	9307      	str	r3, [sp, #28]
 8009e78:	9509      	str	r5, [sp, #36]	; 0x24
 8009e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	9304      	str	r3, [sp, #16]
 8009e82:	2200      	movs	r2, #0
 8009e84:	2312      	movs	r3, #18
 8009e86:	e7d1      	b.n	8009e2c <_dtoa_r+0x274>
 8009e88:	636f4361 	.word	0x636f4361
 8009e8c:	3fd287a7 	.word	0x3fd287a7
 8009e90:	8b60c8b3 	.word	0x8b60c8b3
 8009e94:	3fc68a28 	.word	0x3fc68a28
 8009e98:	509f79fb 	.word	0x509f79fb
 8009e9c:	3fd34413 	.word	0x3fd34413
 8009ea0:	0800f77a 	.word	0x0800f77a
 8009ea4:	0800f791 	.word	0x0800f791
 8009ea8:	7ff00000 	.word	0x7ff00000
 8009eac:	0800f776 	.word	0x0800f776
 8009eb0:	0800f76d 	.word	0x0800f76d
 8009eb4:	0800f745 	.word	0x0800f745
 8009eb8:	3ff80000 	.word	0x3ff80000
 8009ebc:	0800f880 	.word	0x0800f880
 8009ec0:	0800f7e9 	.word	0x0800f7e9
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec8:	e7d7      	b.n	8009e7a <_dtoa_r+0x2c2>
 8009eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	9304      	str	r3, [sp, #16]
 8009ed0:	e7ba      	b.n	8009e48 <_dtoa_r+0x290>
 8009ed2:	3101      	adds	r1, #1
 8009ed4:	0052      	lsls	r2, r2, #1
 8009ed6:	e7ba      	b.n	8009e4e <_dtoa_r+0x296>
 8009ed8:	69e3      	ldr	r3, [r4, #28]
 8009eda:	9a00      	ldr	r2, [sp, #0]
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	9b04      	ldr	r3, [sp, #16]
 8009ee0:	2b0e      	cmp	r3, #14
 8009ee2:	f200 80a8 	bhi.w	800a036 <_dtoa_r+0x47e>
 8009ee6:	2d00      	cmp	r5, #0
 8009ee8:	f000 80a5 	beq.w	800a036 <_dtoa_r+0x47e>
 8009eec:	f1bb 0f00 	cmp.w	fp, #0
 8009ef0:	dd38      	ble.n	8009f64 <_dtoa_r+0x3ac>
 8009ef2:	4bc0      	ldr	r3, [pc, #768]	; (800a1f4 <_dtoa_r+0x63c>)
 8009ef4:	f00b 020f 	and.w	r2, fp, #15
 8009ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009efc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009f00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009f04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009f08:	d019      	beq.n	8009f3e <_dtoa_r+0x386>
 8009f0a:	4bbb      	ldr	r3, [pc, #748]	; (800a1f8 <_dtoa_r+0x640>)
 8009f0c:	ec51 0b18 	vmov	r0, r1, d8
 8009f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f14:	f7f6 fc9a 	bl	800084c <__aeabi_ddiv>
 8009f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f1c:	f008 080f 	and.w	r8, r8, #15
 8009f20:	2503      	movs	r5, #3
 8009f22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a1f8 <_dtoa_r+0x640>
 8009f26:	f1b8 0f00 	cmp.w	r8, #0
 8009f2a:	d10a      	bne.n	8009f42 <_dtoa_r+0x38a>
 8009f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f30:	4632      	mov	r2, r6
 8009f32:	463b      	mov	r3, r7
 8009f34:	f7f6 fc8a 	bl	800084c <__aeabi_ddiv>
 8009f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f3c:	e02b      	b.n	8009f96 <_dtoa_r+0x3de>
 8009f3e:	2502      	movs	r5, #2
 8009f40:	e7ef      	b.n	8009f22 <_dtoa_r+0x36a>
 8009f42:	f018 0f01 	tst.w	r8, #1
 8009f46:	d008      	beq.n	8009f5a <_dtoa_r+0x3a2>
 8009f48:	4630      	mov	r0, r6
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009f50:	f7f6 fb52 	bl	80005f8 <__aeabi_dmul>
 8009f54:	3501      	adds	r5, #1
 8009f56:	4606      	mov	r6, r0
 8009f58:	460f      	mov	r7, r1
 8009f5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009f5e:	f109 0908 	add.w	r9, r9, #8
 8009f62:	e7e0      	b.n	8009f26 <_dtoa_r+0x36e>
 8009f64:	f000 809f 	beq.w	800a0a6 <_dtoa_r+0x4ee>
 8009f68:	f1cb 0600 	rsb	r6, fp, #0
 8009f6c:	4ba1      	ldr	r3, [pc, #644]	; (800a1f4 <_dtoa_r+0x63c>)
 8009f6e:	4fa2      	ldr	r7, [pc, #648]	; (800a1f8 <_dtoa_r+0x640>)
 8009f70:	f006 020f 	and.w	r2, r6, #15
 8009f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	ec51 0b18 	vmov	r0, r1, d8
 8009f80:	f7f6 fb3a 	bl	80005f8 <__aeabi_dmul>
 8009f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f88:	1136      	asrs	r6, r6, #4
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	2502      	movs	r5, #2
 8009f8e:	2e00      	cmp	r6, #0
 8009f90:	d17e      	bne.n	800a090 <_dtoa_r+0x4d8>
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1d0      	bne.n	8009f38 <_dtoa_r+0x380>
 8009f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 8084 	beq.w	800a0aa <_dtoa_r+0x4f2>
 8009fa2:	4b96      	ldr	r3, [pc, #600]	; (800a1fc <_dtoa_r+0x644>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	4649      	mov	r1, r9
 8009faa:	f7f6 fd97 	bl	8000adc <__aeabi_dcmplt>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d07b      	beq.n	800a0aa <_dtoa_r+0x4f2>
 8009fb2:	9b04      	ldr	r3, [sp, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d078      	beq.n	800a0aa <_dtoa_r+0x4f2>
 8009fb8:	9b01      	ldr	r3, [sp, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	dd39      	ble.n	800a032 <_dtoa_r+0x47a>
 8009fbe:	4b90      	ldr	r3, [pc, #576]	; (800a200 <_dtoa_r+0x648>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	f7f6 fb17 	bl	80005f8 <__aeabi_dmul>
 8009fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fce:	9e01      	ldr	r6, [sp, #4]
 8009fd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009fd4:	3501      	adds	r5, #1
 8009fd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f7f6 faa2 	bl	8000524 <__aeabi_i2d>
 8009fe0:	4642      	mov	r2, r8
 8009fe2:	464b      	mov	r3, r9
 8009fe4:	f7f6 fb08 	bl	80005f8 <__aeabi_dmul>
 8009fe8:	4b86      	ldr	r3, [pc, #536]	; (800a204 <_dtoa_r+0x64c>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	f7f6 f94e 	bl	800028c <__adddf3>
 8009ff0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ff8:	9303      	str	r3, [sp, #12]
 8009ffa:	2e00      	cmp	r6, #0
 8009ffc:	d158      	bne.n	800a0b0 <_dtoa_r+0x4f8>
 8009ffe:	4b82      	ldr	r3, [pc, #520]	; (800a208 <_dtoa_r+0x650>)
 800a000:	2200      	movs	r2, #0
 800a002:	4640      	mov	r0, r8
 800a004:	4649      	mov	r1, r9
 800a006:	f7f6 f93f 	bl	8000288 <__aeabi_dsub>
 800a00a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a00e:	4680      	mov	r8, r0
 800a010:	4689      	mov	r9, r1
 800a012:	f7f6 fd81 	bl	8000b18 <__aeabi_dcmpgt>
 800a016:	2800      	cmp	r0, #0
 800a018:	f040 8296 	bne.w	800a548 <_dtoa_r+0x990>
 800a01c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a020:	4640      	mov	r0, r8
 800a022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a026:	4649      	mov	r1, r9
 800a028:	f7f6 fd58 	bl	8000adc <__aeabi_dcmplt>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	f040 8289 	bne.w	800a544 <_dtoa_r+0x98c>
 800a032:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f2c0 814e 	blt.w	800a2da <_dtoa_r+0x722>
 800a03e:	f1bb 0f0e 	cmp.w	fp, #14
 800a042:	f300 814a 	bgt.w	800a2da <_dtoa_r+0x722>
 800a046:	4b6b      	ldr	r3, [pc, #428]	; (800a1f4 <_dtoa_r+0x63c>)
 800a048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a04c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a052:	2b00      	cmp	r3, #0
 800a054:	f280 80dc 	bge.w	800a210 <_dtoa_r+0x658>
 800a058:	9b04      	ldr	r3, [sp, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f300 80d8 	bgt.w	800a210 <_dtoa_r+0x658>
 800a060:	f040 826f 	bne.w	800a542 <_dtoa_r+0x98a>
 800a064:	4b68      	ldr	r3, [pc, #416]	; (800a208 <_dtoa_r+0x650>)
 800a066:	2200      	movs	r2, #0
 800a068:	4640      	mov	r0, r8
 800a06a:	4649      	mov	r1, r9
 800a06c:	f7f6 fac4 	bl	80005f8 <__aeabi_dmul>
 800a070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a074:	f7f6 fd46 	bl	8000b04 <__aeabi_dcmpge>
 800a078:	9e04      	ldr	r6, [sp, #16]
 800a07a:	4637      	mov	r7, r6
 800a07c:	2800      	cmp	r0, #0
 800a07e:	f040 8245 	bne.w	800a50c <_dtoa_r+0x954>
 800a082:	9d00      	ldr	r5, [sp, #0]
 800a084:	2331      	movs	r3, #49	; 0x31
 800a086:	f805 3b01 	strb.w	r3, [r5], #1
 800a08a:	f10b 0b01 	add.w	fp, fp, #1
 800a08e:	e241      	b.n	800a514 <_dtoa_r+0x95c>
 800a090:	07f2      	lsls	r2, r6, #31
 800a092:	d505      	bpl.n	800a0a0 <_dtoa_r+0x4e8>
 800a094:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a098:	f7f6 faae 	bl	80005f8 <__aeabi_dmul>
 800a09c:	3501      	adds	r5, #1
 800a09e:	2301      	movs	r3, #1
 800a0a0:	1076      	asrs	r6, r6, #1
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	e773      	b.n	8009f8e <_dtoa_r+0x3d6>
 800a0a6:	2502      	movs	r5, #2
 800a0a8:	e775      	b.n	8009f96 <_dtoa_r+0x3de>
 800a0aa:	9e04      	ldr	r6, [sp, #16]
 800a0ac:	465f      	mov	r7, fp
 800a0ae:	e792      	b.n	8009fd6 <_dtoa_r+0x41e>
 800a0b0:	9900      	ldr	r1, [sp, #0]
 800a0b2:	4b50      	ldr	r3, [pc, #320]	; (800a1f4 <_dtoa_r+0x63c>)
 800a0b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0b8:	4431      	add	r1, r6
 800a0ba:	9102      	str	r1, [sp, #8]
 800a0bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0be:	eeb0 9a47 	vmov.f32	s18, s14
 800a0c2:	eef0 9a67 	vmov.f32	s19, s15
 800a0c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a0ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	d044      	beq.n	800a15c <_dtoa_r+0x5a4>
 800a0d2:	494e      	ldr	r1, [pc, #312]	; (800a20c <_dtoa_r+0x654>)
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	f7f6 fbb9 	bl	800084c <__aeabi_ddiv>
 800a0da:	ec53 2b19 	vmov	r2, r3, d9
 800a0de:	f7f6 f8d3 	bl	8000288 <__aeabi_dsub>
 800a0e2:	9d00      	ldr	r5, [sp, #0]
 800a0e4:	ec41 0b19 	vmov	d9, r0, r1
 800a0e8:	4649      	mov	r1, r9
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	f7f6 fd34 	bl	8000b58 <__aeabi_d2iz>
 800a0f0:	4606      	mov	r6, r0
 800a0f2:	f7f6 fa17 	bl	8000524 <__aeabi_i2d>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	f7f6 f8c3 	bl	8000288 <__aeabi_dsub>
 800a102:	3630      	adds	r6, #48	; 0x30
 800a104:	f805 6b01 	strb.w	r6, [r5], #1
 800a108:	ec53 2b19 	vmov	r2, r3, d9
 800a10c:	4680      	mov	r8, r0
 800a10e:	4689      	mov	r9, r1
 800a110:	f7f6 fce4 	bl	8000adc <__aeabi_dcmplt>
 800a114:	2800      	cmp	r0, #0
 800a116:	d164      	bne.n	800a1e2 <_dtoa_r+0x62a>
 800a118:	4642      	mov	r2, r8
 800a11a:	464b      	mov	r3, r9
 800a11c:	4937      	ldr	r1, [pc, #220]	; (800a1fc <_dtoa_r+0x644>)
 800a11e:	2000      	movs	r0, #0
 800a120:	f7f6 f8b2 	bl	8000288 <__aeabi_dsub>
 800a124:	ec53 2b19 	vmov	r2, r3, d9
 800a128:	f7f6 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	f040 80b6 	bne.w	800a29e <_dtoa_r+0x6e6>
 800a132:	9b02      	ldr	r3, [sp, #8]
 800a134:	429d      	cmp	r5, r3
 800a136:	f43f af7c 	beq.w	800a032 <_dtoa_r+0x47a>
 800a13a:	4b31      	ldr	r3, [pc, #196]	; (800a200 <_dtoa_r+0x648>)
 800a13c:	ec51 0b19 	vmov	r0, r1, d9
 800a140:	2200      	movs	r2, #0
 800a142:	f7f6 fa59 	bl	80005f8 <__aeabi_dmul>
 800a146:	4b2e      	ldr	r3, [pc, #184]	; (800a200 <_dtoa_r+0x648>)
 800a148:	ec41 0b19 	vmov	d9, r0, r1
 800a14c:	2200      	movs	r2, #0
 800a14e:	4640      	mov	r0, r8
 800a150:	4649      	mov	r1, r9
 800a152:	f7f6 fa51 	bl	80005f8 <__aeabi_dmul>
 800a156:	4680      	mov	r8, r0
 800a158:	4689      	mov	r9, r1
 800a15a:	e7c5      	b.n	800a0e8 <_dtoa_r+0x530>
 800a15c:	ec51 0b17 	vmov	r0, r1, d7
 800a160:	f7f6 fa4a 	bl	80005f8 <__aeabi_dmul>
 800a164:	9b02      	ldr	r3, [sp, #8]
 800a166:	9d00      	ldr	r5, [sp, #0]
 800a168:	930f      	str	r3, [sp, #60]	; 0x3c
 800a16a:	ec41 0b19 	vmov	d9, r0, r1
 800a16e:	4649      	mov	r1, r9
 800a170:	4640      	mov	r0, r8
 800a172:	f7f6 fcf1 	bl	8000b58 <__aeabi_d2iz>
 800a176:	4606      	mov	r6, r0
 800a178:	f7f6 f9d4 	bl	8000524 <__aeabi_i2d>
 800a17c:	3630      	adds	r6, #48	; 0x30
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4640      	mov	r0, r8
 800a184:	4649      	mov	r1, r9
 800a186:	f7f6 f87f 	bl	8000288 <__aeabi_dsub>
 800a18a:	f805 6b01 	strb.w	r6, [r5], #1
 800a18e:	9b02      	ldr	r3, [sp, #8]
 800a190:	429d      	cmp	r5, r3
 800a192:	4680      	mov	r8, r0
 800a194:	4689      	mov	r9, r1
 800a196:	f04f 0200 	mov.w	r2, #0
 800a19a:	d124      	bne.n	800a1e6 <_dtoa_r+0x62e>
 800a19c:	4b1b      	ldr	r3, [pc, #108]	; (800a20c <_dtoa_r+0x654>)
 800a19e:	ec51 0b19 	vmov	r0, r1, d9
 800a1a2:	f7f6 f873 	bl	800028c <__adddf3>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	f7f6 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d173      	bne.n	800a29e <_dtoa_r+0x6e6>
 800a1b6:	ec53 2b19 	vmov	r2, r3, d9
 800a1ba:	4914      	ldr	r1, [pc, #80]	; (800a20c <_dtoa_r+0x654>)
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f7f6 f863 	bl	8000288 <__aeabi_dsub>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	f7f6 fc87 	bl	8000adc <__aeabi_dcmplt>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f43f af2f 	beq.w	800a032 <_dtoa_r+0x47a>
 800a1d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a1d6:	1e6b      	subs	r3, r5, #1
 800a1d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1de:	2b30      	cmp	r3, #48	; 0x30
 800a1e0:	d0f8      	beq.n	800a1d4 <_dtoa_r+0x61c>
 800a1e2:	46bb      	mov	fp, r7
 800a1e4:	e04a      	b.n	800a27c <_dtoa_r+0x6c4>
 800a1e6:	4b06      	ldr	r3, [pc, #24]	; (800a200 <_dtoa_r+0x648>)
 800a1e8:	f7f6 fa06 	bl	80005f8 <__aeabi_dmul>
 800a1ec:	4680      	mov	r8, r0
 800a1ee:	4689      	mov	r9, r1
 800a1f0:	e7bd      	b.n	800a16e <_dtoa_r+0x5b6>
 800a1f2:	bf00      	nop
 800a1f4:	0800f880 	.word	0x0800f880
 800a1f8:	0800f858 	.word	0x0800f858
 800a1fc:	3ff00000 	.word	0x3ff00000
 800a200:	40240000 	.word	0x40240000
 800a204:	401c0000 	.word	0x401c0000
 800a208:	40140000 	.word	0x40140000
 800a20c:	3fe00000 	.word	0x3fe00000
 800a210:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a214:	9d00      	ldr	r5, [sp, #0]
 800a216:	4642      	mov	r2, r8
 800a218:	464b      	mov	r3, r9
 800a21a:	4630      	mov	r0, r6
 800a21c:	4639      	mov	r1, r7
 800a21e:	f7f6 fb15 	bl	800084c <__aeabi_ddiv>
 800a222:	f7f6 fc99 	bl	8000b58 <__aeabi_d2iz>
 800a226:	9001      	str	r0, [sp, #4]
 800a228:	f7f6 f97c 	bl	8000524 <__aeabi_i2d>
 800a22c:	4642      	mov	r2, r8
 800a22e:	464b      	mov	r3, r9
 800a230:	f7f6 f9e2 	bl	80005f8 <__aeabi_dmul>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4630      	mov	r0, r6
 800a23a:	4639      	mov	r1, r7
 800a23c:	f7f6 f824 	bl	8000288 <__aeabi_dsub>
 800a240:	9e01      	ldr	r6, [sp, #4]
 800a242:	9f04      	ldr	r7, [sp, #16]
 800a244:	3630      	adds	r6, #48	; 0x30
 800a246:	f805 6b01 	strb.w	r6, [r5], #1
 800a24a:	9e00      	ldr	r6, [sp, #0]
 800a24c:	1bae      	subs	r6, r5, r6
 800a24e:	42b7      	cmp	r7, r6
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	d134      	bne.n	800a2c0 <_dtoa_r+0x708>
 800a256:	f7f6 f819 	bl	800028c <__adddf3>
 800a25a:	4642      	mov	r2, r8
 800a25c:	464b      	mov	r3, r9
 800a25e:	4606      	mov	r6, r0
 800a260:	460f      	mov	r7, r1
 800a262:	f7f6 fc59 	bl	8000b18 <__aeabi_dcmpgt>
 800a266:	b9c8      	cbnz	r0, 800a29c <_dtoa_r+0x6e4>
 800a268:	4642      	mov	r2, r8
 800a26a:	464b      	mov	r3, r9
 800a26c:	4630      	mov	r0, r6
 800a26e:	4639      	mov	r1, r7
 800a270:	f7f6 fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a274:	b110      	cbz	r0, 800a27c <_dtoa_r+0x6c4>
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	07db      	lsls	r3, r3, #31
 800a27a:	d40f      	bmi.n	800a29c <_dtoa_r+0x6e4>
 800a27c:	4651      	mov	r1, sl
 800a27e:	4620      	mov	r0, r4
 800a280:	f000 fb18 	bl	800a8b4 <_Bfree>
 800a284:	2300      	movs	r3, #0
 800a286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a288:	702b      	strb	r3, [r5, #0]
 800a28a:	f10b 0301 	add.w	r3, fp, #1
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a292:	2b00      	cmp	r3, #0
 800a294:	f43f ace2 	beq.w	8009c5c <_dtoa_r+0xa4>
 800a298:	601d      	str	r5, [r3, #0]
 800a29a:	e4df      	b.n	8009c5c <_dtoa_r+0xa4>
 800a29c:	465f      	mov	r7, fp
 800a29e:	462b      	mov	r3, r5
 800a2a0:	461d      	mov	r5, r3
 800a2a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2a6:	2a39      	cmp	r2, #57	; 0x39
 800a2a8:	d106      	bne.n	800a2b8 <_dtoa_r+0x700>
 800a2aa:	9a00      	ldr	r2, [sp, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d1f7      	bne.n	800a2a0 <_dtoa_r+0x6e8>
 800a2b0:	9900      	ldr	r1, [sp, #0]
 800a2b2:	2230      	movs	r2, #48	; 0x30
 800a2b4:	3701      	adds	r7, #1
 800a2b6:	700a      	strb	r2, [r1, #0]
 800a2b8:	781a      	ldrb	r2, [r3, #0]
 800a2ba:	3201      	adds	r2, #1
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	e790      	b.n	800a1e2 <_dtoa_r+0x62a>
 800a2c0:	4ba3      	ldr	r3, [pc, #652]	; (800a550 <_dtoa_r+0x998>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f7f6 f998 	bl	80005f8 <__aeabi_dmul>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	f7f6 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d09e      	beq.n	800a216 <_dtoa_r+0x65e>
 800a2d8:	e7d0      	b.n	800a27c <_dtoa_r+0x6c4>
 800a2da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2dc:	2a00      	cmp	r2, #0
 800a2de:	f000 80ca 	beq.w	800a476 <_dtoa_r+0x8be>
 800a2e2:	9a07      	ldr	r2, [sp, #28]
 800a2e4:	2a01      	cmp	r2, #1
 800a2e6:	f300 80ad 	bgt.w	800a444 <_dtoa_r+0x88c>
 800a2ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2ec:	2a00      	cmp	r2, #0
 800a2ee:	f000 80a5 	beq.w	800a43c <_dtoa_r+0x884>
 800a2f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2f6:	9e08      	ldr	r6, [sp, #32]
 800a2f8:	9d05      	ldr	r5, [sp, #20]
 800a2fa:	9a05      	ldr	r2, [sp, #20]
 800a2fc:	441a      	add	r2, r3
 800a2fe:	9205      	str	r2, [sp, #20]
 800a300:	9a06      	ldr	r2, [sp, #24]
 800a302:	2101      	movs	r1, #1
 800a304:	441a      	add	r2, r3
 800a306:	4620      	mov	r0, r4
 800a308:	9206      	str	r2, [sp, #24]
 800a30a:	f000 fbd3 	bl	800aab4 <__i2b>
 800a30e:	4607      	mov	r7, r0
 800a310:	b165      	cbz	r5, 800a32c <_dtoa_r+0x774>
 800a312:	9b06      	ldr	r3, [sp, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	dd09      	ble.n	800a32c <_dtoa_r+0x774>
 800a318:	42ab      	cmp	r3, r5
 800a31a:	9a05      	ldr	r2, [sp, #20]
 800a31c:	bfa8      	it	ge
 800a31e:	462b      	movge	r3, r5
 800a320:	1ad2      	subs	r2, r2, r3
 800a322:	9205      	str	r2, [sp, #20]
 800a324:	9a06      	ldr	r2, [sp, #24]
 800a326:	1aed      	subs	r5, r5, r3
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	9306      	str	r3, [sp, #24]
 800a32c:	9b08      	ldr	r3, [sp, #32]
 800a32e:	b1f3      	cbz	r3, 800a36e <_dtoa_r+0x7b6>
 800a330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a332:	2b00      	cmp	r3, #0
 800a334:	f000 80a3 	beq.w	800a47e <_dtoa_r+0x8c6>
 800a338:	2e00      	cmp	r6, #0
 800a33a:	dd10      	ble.n	800a35e <_dtoa_r+0x7a6>
 800a33c:	4639      	mov	r1, r7
 800a33e:	4632      	mov	r2, r6
 800a340:	4620      	mov	r0, r4
 800a342:	f000 fc77 	bl	800ac34 <__pow5mult>
 800a346:	4652      	mov	r2, sl
 800a348:	4601      	mov	r1, r0
 800a34a:	4607      	mov	r7, r0
 800a34c:	4620      	mov	r0, r4
 800a34e:	f000 fbc7 	bl	800aae0 <__multiply>
 800a352:	4651      	mov	r1, sl
 800a354:	4680      	mov	r8, r0
 800a356:	4620      	mov	r0, r4
 800a358:	f000 faac 	bl	800a8b4 <_Bfree>
 800a35c:	46c2      	mov	sl, r8
 800a35e:	9b08      	ldr	r3, [sp, #32]
 800a360:	1b9a      	subs	r2, r3, r6
 800a362:	d004      	beq.n	800a36e <_dtoa_r+0x7b6>
 800a364:	4651      	mov	r1, sl
 800a366:	4620      	mov	r0, r4
 800a368:	f000 fc64 	bl	800ac34 <__pow5mult>
 800a36c:	4682      	mov	sl, r0
 800a36e:	2101      	movs	r1, #1
 800a370:	4620      	mov	r0, r4
 800a372:	f000 fb9f 	bl	800aab4 <__i2b>
 800a376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a378:	2b00      	cmp	r3, #0
 800a37a:	4606      	mov	r6, r0
 800a37c:	f340 8081 	ble.w	800a482 <_dtoa_r+0x8ca>
 800a380:	461a      	mov	r2, r3
 800a382:	4601      	mov	r1, r0
 800a384:	4620      	mov	r0, r4
 800a386:	f000 fc55 	bl	800ac34 <__pow5mult>
 800a38a:	9b07      	ldr	r3, [sp, #28]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	4606      	mov	r6, r0
 800a390:	dd7a      	ble.n	800a488 <_dtoa_r+0x8d0>
 800a392:	f04f 0800 	mov.w	r8, #0
 800a396:	6933      	ldr	r3, [r6, #16]
 800a398:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a39c:	6918      	ldr	r0, [r3, #16]
 800a39e:	f000 fb3b 	bl	800aa18 <__hi0bits>
 800a3a2:	f1c0 0020 	rsb	r0, r0, #32
 800a3a6:	9b06      	ldr	r3, [sp, #24]
 800a3a8:	4418      	add	r0, r3
 800a3aa:	f010 001f 	ands.w	r0, r0, #31
 800a3ae:	f000 8094 	beq.w	800a4da <_dtoa_r+0x922>
 800a3b2:	f1c0 0320 	rsb	r3, r0, #32
 800a3b6:	2b04      	cmp	r3, #4
 800a3b8:	f340 8085 	ble.w	800a4c6 <_dtoa_r+0x90e>
 800a3bc:	9b05      	ldr	r3, [sp, #20]
 800a3be:	f1c0 001c 	rsb	r0, r0, #28
 800a3c2:	4403      	add	r3, r0
 800a3c4:	9305      	str	r3, [sp, #20]
 800a3c6:	9b06      	ldr	r3, [sp, #24]
 800a3c8:	4403      	add	r3, r0
 800a3ca:	4405      	add	r5, r0
 800a3cc:	9306      	str	r3, [sp, #24]
 800a3ce:	9b05      	ldr	r3, [sp, #20]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	dd05      	ble.n	800a3e0 <_dtoa_r+0x828>
 800a3d4:	4651      	mov	r1, sl
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f000 fc85 	bl	800ace8 <__lshift>
 800a3de:	4682      	mov	sl, r0
 800a3e0:	9b06      	ldr	r3, [sp, #24]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	dd05      	ble.n	800a3f2 <_dtoa_r+0x83a>
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 fc7c 	bl	800ace8 <__lshift>
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d072      	beq.n	800a4de <_dtoa_r+0x926>
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4650      	mov	r0, sl
 800a3fc:	f000 fce0 	bl	800adc0 <__mcmp>
 800a400:	2800      	cmp	r0, #0
 800a402:	da6c      	bge.n	800a4de <_dtoa_r+0x926>
 800a404:	2300      	movs	r3, #0
 800a406:	4651      	mov	r1, sl
 800a408:	220a      	movs	r2, #10
 800a40a:	4620      	mov	r0, r4
 800a40c:	f000 fa74 	bl	800a8f8 <__multadd>
 800a410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a412:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a416:	4682      	mov	sl, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 81b0 	beq.w	800a77e <_dtoa_r+0xbc6>
 800a41e:	2300      	movs	r3, #0
 800a420:	4639      	mov	r1, r7
 800a422:	220a      	movs	r2, #10
 800a424:	4620      	mov	r0, r4
 800a426:	f000 fa67 	bl	800a8f8 <__multadd>
 800a42a:	9b01      	ldr	r3, [sp, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	4607      	mov	r7, r0
 800a430:	f300 8096 	bgt.w	800a560 <_dtoa_r+0x9a8>
 800a434:	9b07      	ldr	r3, [sp, #28]
 800a436:	2b02      	cmp	r3, #2
 800a438:	dc59      	bgt.n	800a4ee <_dtoa_r+0x936>
 800a43a:	e091      	b.n	800a560 <_dtoa_r+0x9a8>
 800a43c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a43e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a442:	e758      	b.n	800a2f6 <_dtoa_r+0x73e>
 800a444:	9b04      	ldr	r3, [sp, #16]
 800a446:	1e5e      	subs	r6, r3, #1
 800a448:	9b08      	ldr	r3, [sp, #32]
 800a44a:	42b3      	cmp	r3, r6
 800a44c:	bfbf      	itttt	lt
 800a44e:	9b08      	ldrlt	r3, [sp, #32]
 800a450:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a452:	9608      	strlt	r6, [sp, #32]
 800a454:	1af3      	sublt	r3, r6, r3
 800a456:	bfb4      	ite	lt
 800a458:	18d2      	addlt	r2, r2, r3
 800a45a:	1b9e      	subge	r6, r3, r6
 800a45c:	9b04      	ldr	r3, [sp, #16]
 800a45e:	bfbc      	itt	lt
 800a460:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a462:	2600      	movlt	r6, #0
 800a464:	2b00      	cmp	r3, #0
 800a466:	bfb7      	itett	lt
 800a468:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a46c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a470:	1a9d      	sublt	r5, r3, r2
 800a472:	2300      	movlt	r3, #0
 800a474:	e741      	b.n	800a2fa <_dtoa_r+0x742>
 800a476:	9e08      	ldr	r6, [sp, #32]
 800a478:	9d05      	ldr	r5, [sp, #20]
 800a47a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a47c:	e748      	b.n	800a310 <_dtoa_r+0x758>
 800a47e:	9a08      	ldr	r2, [sp, #32]
 800a480:	e770      	b.n	800a364 <_dtoa_r+0x7ac>
 800a482:	9b07      	ldr	r3, [sp, #28]
 800a484:	2b01      	cmp	r3, #1
 800a486:	dc19      	bgt.n	800a4bc <_dtoa_r+0x904>
 800a488:	9b02      	ldr	r3, [sp, #8]
 800a48a:	b9bb      	cbnz	r3, 800a4bc <_dtoa_r+0x904>
 800a48c:	9b03      	ldr	r3, [sp, #12]
 800a48e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a492:	b99b      	cbnz	r3, 800a4bc <_dtoa_r+0x904>
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a49a:	0d1b      	lsrs	r3, r3, #20
 800a49c:	051b      	lsls	r3, r3, #20
 800a49e:	b183      	cbz	r3, 800a4c2 <_dtoa_r+0x90a>
 800a4a0:	9b05      	ldr	r3, [sp, #20]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	9305      	str	r3, [sp, #20]
 800a4a6:	9b06      	ldr	r3, [sp, #24]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	9306      	str	r3, [sp, #24]
 800a4ac:	f04f 0801 	mov.w	r8, #1
 800a4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f47f af6f 	bne.w	800a396 <_dtoa_r+0x7de>
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	e774      	b.n	800a3a6 <_dtoa_r+0x7ee>
 800a4bc:	f04f 0800 	mov.w	r8, #0
 800a4c0:	e7f6      	b.n	800a4b0 <_dtoa_r+0x8f8>
 800a4c2:	4698      	mov	r8, r3
 800a4c4:	e7f4      	b.n	800a4b0 <_dtoa_r+0x8f8>
 800a4c6:	d082      	beq.n	800a3ce <_dtoa_r+0x816>
 800a4c8:	9a05      	ldr	r2, [sp, #20]
 800a4ca:	331c      	adds	r3, #28
 800a4cc:	441a      	add	r2, r3
 800a4ce:	9205      	str	r2, [sp, #20]
 800a4d0:	9a06      	ldr	r2, [sp, #24]
 800a4d2:	441a      	add	r2, r3
 800a4d4:	441d      	add	r5, r3
 800a4d6:	9206      	str	r2, [sp, #24]
 800a4d8:	e779      	b.n	800a3ce <_dtoa_r+0x816>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	e7f4      	b.n	800a4c8 <_dtoa_r+0x910>
 800a4de:	9b04      	ldr	r3, [sp, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dc37      	bgt.n	800a554 <_dtoa_r+0x99c>
 800a4e4:	9b07      	ldr	r3, [sp, #28]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	dd34      	ble.n	800a554 <_dtoa_r+0x99c>
 800a4ea:	9b04      	ldr	r3, [sp, #16]
 800a4ec:	9301      	str	r3, [sp, #4]
 800a4ee:	9b01      	ldr	r3, [sp, #4]
 800a4f0:	b963      	cbnz	r3, 800a50c <_dtoa_r+0x954>
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	2205      	movs	r2, #5
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 f9fe 	bl	800a8f8 <__multadd>
 800a4fc:	4601      	mov	r1, r0
 800a4fe:	4606      	mov	r6, r0
 800a500:	4650      	mov	r0, sl
 800a502:	f000 fc5d 	bl	800adc0 <__mcmp>
 800a506:	2800      	cmp	r0, #0
 800a508:	f73f adbb 	bgt.w	800a082 <_dtoa_r+0x4ca>
 800a50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a50e:	9d00      	ldr	r5, [sp, #0]
 800a510:	ea6f 0b03 	mvn.w	fp, r3
 800a514:	f04f 0800 	mov.w	r8, #0
 800a518:	4631      	mov	r1, r6
 800a51a:	4620      	mov	r0, r4
 800a51c:	f000 f9ca 	bl	800a8b4 <_Bfree>
 800a520:	2f00      	cmp	r7, #0
 800a522:	f43f aeab 	beq.w	800a27c <_dtoa_r+0x6c4>
 800a526:	f1b8 0f00 	cmp.w	r8, #0
 800a52a:	d005      	beq.n	800a538 <_dtoa_r+0x980>
 800a52c:	45b8      	cmp	r8, r7
 800a52e:	d003      	beq.n	800a538 <_dtoa_r+0x980>
 800a530:	4641      	mov	r1, r8
 800a532:	4620      	mov	r0, r4
 800a534:	f000 f9be 	bl	800a8b4 <_Bfree>
 800a538:	4639      	mov	r1, r7
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 f9ba 	bl	800a8b4 <_Bfree>
 800a540:	e69c      	b.n	800a27c <_dtoa_r+0x6c4>
 800a542:	2600      	movs	r6, #0
 800a544:	4637      	mov	r7, r6
 800a546:	e7e1      	b.n	800a50c <_dtoa_r+0x954>
 800a548:	46bb      	mov	fp, r7
 800a54a:	4637      	mov	r7, r6
 800a54c:	e599      	b.n	800a082 <_dtoa_r+0x4ca>
 800a54e:	bf00      	nop
 800a550:	40240000 	.word	0x40240000
 800a554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a556:	2b00      	cmp	r3, #0
 800a558:	f000 80c8 	beq.w	800a6ec <_dtoa_r+0xb34>
 800a55c:	9b04      	ldr	r3, [sp, #16]
 800a55e:	9301      	str	r3, [sp, #4]
 800a560:	2d00      	cmp	r5, #0
 800a562:	dd05      	ble.n	800a570 <_dtoa_r+0x9b8>
 800a564:	4639      	mov	r1, r7
 800a566:	462a      	mov	r2, r5
 800a568:	4620      	mov	r0, r4
 800a56a:	f000 fbbd 	bl	800ace8 <__lshift>
 800a56e:	4607      	mov	r7, r0
 800a570:	f1b8 0f00 	cmp.w	r8, #0
 800a574:	d05b      	beq.n	800a62e <_dtoa_r+0xa76>
 800a576:	6879      	ldr	r1, [r7, #4]
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 f95b 	bl	800a834 <_Balloc>
 800a57e:	4605      	mov	r5, r0
 800a580:	b928      	cbnz	r0, 800a58e <_dtoa_r+0x9d6>
 800a582:	4b83      	ldr	r3, [pc, #524]	; (800a790 <_dtoa_r+0xbd8>)
 800a584:	4602      	mov	r2, r0
 800a586:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a58a:	f7ff bb2e 	b.w	8009bea <_dtoa_r+0x32>
 800a58e:	693a      	ldr	r2, [r7, #16]
 800a590:	3202      	adds	r2, #2
 800a592:	0092      	lsls	r2, r2, #2
 800a594:	f107 010c 	add.w	r1, r7, #12
 800a598:	300c      	adds	r0, #12
 800a59a:	f7ff fa70 	bl	8009a7e <memcpy>
 800a59e:	2201      	movs	r2, #1
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f000 fba0 	bl	800ace8 <__lshift>
 800a5a8:	9b00      	ldr	r3, [sp, #0]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	9304      	str	r3, [sp, #16]
 800a5ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	9308      	str	r3, [sp, #32]
 800a5b6:	9b02      	ldr	r3, [sp, #8]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	46b8      	mov	r8, r7
 800a5be:	9306      	str	r3, [sp, #24]
 800a5c0:	4607      	mov	r7, r0
 800a5c2:	9b04      	ldr	r3, [sp, #16]
 800a5c4:	4631      	mov	r1, r6
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	4650      	mov	r0, sl
 800a5ca:	9301      	str	r3, [sp, #4]
 800a5cc:	f7ff fa6c 	bl	8009aa8 <quorem>
 800a5d0:	4641      	mov	r1, r8
 800a5d2:	9002      	str	r0, [sp, #8]
 800a5d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a5d8:	4650      	mov	r0, sl
 800a5da:	f000 fbf1 	bl	800adc0 <__mcmp>
 800a5de:	463a      	mov	r2, r7
 800a5e0:	9005      	str	r0, [sp, #20]
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fc07 	bl	800adf8 <__mdiff>
 800a5ea:	68c2      	ldr	r2, [r0, #12]
 800a5ec:	4605      	mov	r5, r0
 800a5ee:	bb02      	cbnz	r2, 800a632 <_dtoa_r+0xa7a>
 800a5f0:	4601      	mov	r1, r0
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	f000 fbe4 	bl	800adc0 <__mcmp>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	9209      	str	r2, [sp, #36]	; 0x24
 800a600:	f000 f958 	bl	800a8b4 <_Bfree>
 800a604:	9b07      	ldr	r3, [sp, #28]
 800a606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a608:	9d04      	ldr	r5, [sp, #16]
 800a60a:	ea43 0102 	orr.w	r1, r3, r2
 800a60e:	9b06      	ldr	r3, [sp, #24]
 800a610:	4319      	orrs	r1, r3
 800a612:	d110      	bne.n	800a636 <_dtoa_r+0xa7e>
 800a614:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a618:	d029      	beq.n	800a66e <_dtoa_r+0xab6>
 800a61a:	9b05      	ldr	r3, [sp, #20]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	dd02      	ble.n	800a626 <_dtoa_r+0xa6e>
 800a620:	9b02      	ldr	r3, [sp, #8]
 800a622:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	f883 9000 	strb.w	r9, [r3]
 800a62c:	e774      	b.n	800a518 <_dtoa_r+0x960>
 800a62e:	4638      	mov	r0, r7
 800a630:	e7ba      	b.n	800a5a8 <_dtoa_r+0x9f0>
 800a632:	2201      	movs	r2, #1
 800a634:	e7e1      	b.n	800a5fa <_dtoa_r+0xa42>
 800a636:	9b05      	ldr	r3, [sp, #20]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	db04      	blt.n	800a646 <_dtoa_r+0xa8e>
 800a63c:	9907      	ldr	r1, [sp, #28]
 800a63e:	430b      	orrs	r3, r1
 800a640:	9906      	ldr	r1, [sp, #24]
 800a642:	430b      	orrs	r3, r1
 800a644:	d120      	bne.n	800a688 <_dtoa_r+0xad0>
 800a646:	2a00      	cmp	r2, #0
 800a648:	dded      	ble.n	800a626 <_dtoa_r+0xa6e>
 800a64a:	4651      	mov	r1, sl
 800a64c:	2201      	movs	r2, #1
 800a64e:	4620      	mov	r0, r4
 800a650:	f000 fb4a 	bl	800ace8 <__lshift>
 800a654:	4631      	mov	r1, r6
 800a656:	4682      	mov	sl, r0
 800a658:	f000 fbb2 	bl	800adc0 <__mcmp>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	dc03      	bgt.n	800a668 <_dtoa_r+0xab0>
 800a660:	d1e1      	bne.n	800a626 <_dtoa_r+0xa6e>
 800a662:	f019 0f01 	tst.w	r9, #1
 800a666:	d0de      	beq.n	800a626 <_dtoa_r+0xa6e>
 800a668:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a66c:	d1d8      	bne.n	800a620 <_dtoa_r+0xa68>
 800a66e:	9a01      	ldr	r2, [sp, #4]
 800a670:	2339      	movs	r3, #57	; 0x39
 800a672:	7013      	strb	r3, [r2, #0]
 800a674:	462b      	mov	r3, r5
 800a676:	461d      	mov	r5, r3
 800a678:	3b01      	subs	r3, #1
 800a67a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a67e:	2a39      	cmp	r2, #57	; 0x39
 800a680:	d06c      	beq.n	800a75c <_dtoa_r+0xba4>
 800a682:	3201      	adds	r2, #1
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	e747      	b.n	800a518 <_dtoa_r+0x960>
 800a688:	2a00      	cmp	r2, #0
 800a68a:	dd07      	ble.n	800a69c <_dtoa_r+0xae4>
 800a68c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a690:	d0ed      	beq.n	800a66e <_dtoa_r+0xab6>
 800a692:	9a01      	ldr	r2, [sp, #4]
 800a694:	f109 0301 	add.w	r3, r9, #1
 800a698:	7013      	strb	r3, [r2, #0]
 800a69a:	e73d      	b.n	800a518 <_dtoa_r+0x960>
 800a69c:	9b04      	ldr	r3, [sp, #16]
 800a69e:	9a08      	ldr	r2, [sp, #32]
 800a6a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d043      	beq.n	800a730 <_dtoa_r+0xb78>
 800a6a8:	4651      	mov	r1, sl
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	220a      	movs	r2, #10
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f000 f922 	bl	800a8f8 <__multadd>
 800a6b4:	45b8      	cmp	r8, r7
 800a6b6:	4682      	mov	sl, r0
 800a6b8:	f04f 0300 	mov.w	r3, #0
 800a6bc:	f04f 020a 	mov.w	r2, #10
 800a6c0:	4641      	mov	r1, r8
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	d107      	bne.n	800a6d6 <_dtoa_r+0xb1e>
 800a6c6:	f000 f917 	bl	800a8f8 <__multadd>
 800a6ca:	4680      	mov	r8, r0
 800a6cc:	4607      	mov	r7, r0
 800a6ce:	9b04      	ldr	r3, [sp, #16]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	e775      	b.n	800a5c2 <_dtoa_r+0xa0a>
 800a6d6:	f000 f90f 	bl	800a8f8 <__multadd>
 800a6da:	4639      	mov	r1, r7
 800a6dc:	4680      	mov	r8, r0
 800a6de:	2300      	movs	r3, #0
 800a6e0:	220a      	movs	r2, #10
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f000 f908 	bl	800a8f8 <__multadd>
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	e7f0      	b.n	800a6ce <_dtoa_r+0xb16>
 800a6ec:	9b04      	ldr	r3, [sp, #16]
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	9d00      	ldr	r5, [sp, #0]
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	f7ff f9d7 	bl	8009aa8 <quorem>
 800a6fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a6fe:	9b00      	ldr	r3, [sp, #0]
 800a700:	f805 9b01 	strb.w	r9, [r5], #1
 800a704:	1aea      	subs	r2, r5, r3
 800a706:	9b01      	ldr	r3, [sp, #4]
 800a708:	4293      	cmp	r3, r2
 800a70a:	dd07      	ble.n	800a71c <_dtoa_r+0xb64>
 800a70c:	4651      	mov	r1, sl
 800a70e:	2300      	movs	r3, #0
 800a710:	220a      	movs	r2, #10
 800a712:	4620      	mov	r0, r4
 800a714:	f000 f8f0 	bl	800a8f8 <__multadd>
 800a718:	4682      	mov	sl, r0
 800a71a:	e7ea      	b.n	800a6f2 <_dtoa_r+0xb3a>
 800a71c:	9b01      	ldr	r3, [sp, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bfc8      	it	gt
 800a722:	461d      	movgt	r5, r3
 800a724:	9b00      	ldr	r3, [sp, #0]
 800a726:	bfd8      	it	le
 800a728:	2501      	movle	r5, #1
 800a72a:	441d      	add	r5, r3
 800a72c:	f04f 0800 	mov.w	r8, #0
 800a730:	4651      	mov	r1, sl
 800a732:	2201      	movs	r2, #1
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fad7 	bl	800ace8 <__lshift>
 800a73a:	4631      	mov	r1, r6
 800a73c:	4682      	mov	sl, r0
 800a73e:	f000 fb3f 	bl	800adc0 <__mcmp>
 800a742:	2800      	cmp	r0, #0
 800a744:	dc96      	bgt.n	800a674 <_dtoa_r+0xabc>
 800a746:	d102      	bne.n	800a74e <_dtoa_r+0xb96>
 800a748:	f019 0f01 	tst.w	r9, #1
 800a74c:	d192      	bne.n	800a674 <_dtoa_r+0xabc>
 800a74e:	462b      	mov	r3, r5
 800a750:	461d      	mov	r5, r3
 800a752:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a756:	2a30      	cmp	r2, #48	; 0x30
 800a758:	d0fa      	beq.n	800a750 <_dtoa_r+0xb98>
 800a75a:	e6dd      	b.n	800a518 <_dtoa_r+0x960>
 800a75c:	9a00      	ldr	r2, [sp, #0]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d189      	bne.n	800a676 <_dtoa_r+0xabe>
 800a762:	f10b 0b01 	add.w	fp, fp, #1
 800a766:	2331      	movs	r3, #49	; 0x31
 800a768:	e796      	b.n	800a698 <_dtoa_r+0xae0>
 800a76a:	4b0a      	ldr	r3, [pc, #40]	; (800a794 <_dtoa_r+0xbdc>)
 800a76c:	f7ff ba99 	b.w	8009ca2 <_dtoa_r+0xea>
 800a770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a772:	2b00      	cmp	r3, #0
 800a774:	f47f aa6d 	bne.w	8009c52 <_dtoa_r+0x9a>
 800a778:	4b07      	ldr	r3, [pc, #28]	; (800a798 <_dtoa_r+0xbe0>)
 800a77a:	f7ff ba92 	b.w	8009ca2 <_dtoa_r+0xea>
 800a77e:	9b01      	ldr	r3, [sp, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	dcb5      	bgt.n	800a6f0 <_dtoa_r+0xb38>
 800a784:	9b07      	ldr	r3, [sp, #28]
 800a786:	2b02      	cmp	r3, #2
 800a788:	f73f aeb1 	bgt.w	800a4ee <_dtoa_r+0x936>
 800a78c:	e7b0      	b.n	800a6f0 <_dtoa_r+0xb38>
 800a78e:	bf00      	nop
 800a790:	0800f7e9 	.word	0x0800f7e9
 800a794:	0800f744 	.word	0x0800f744
 800a798:	0800f76d 	.word	0x0800f76d

0800a79c <_free_r>:
 800a79c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a79e:	2900      	cmp	r1, #0
 800a7a0:	d044      	beq.n	800a82c <_free_r+0x90>
 800a7a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a6:	9001      	str	r0, [sp, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f1a1 0404 	sub.w	r4, r1, #4
 800a7ae:	bfb8      	it	lt
 800a7b0:	18e4      	addlt	r4, r4, r3
 800a7b2:	f7fe f8f9 	bl	80089a8 <__malloc_lock>
 800a7b6:	4a1e      	ldr	r2, [pc, #120]	; (800a830 <_free_r+0x94>)
 800a7b8:	9801      	ldr	r0, [sp, #4]
 800a7ba:	6813      	ldr	r3, [r2, #0]
 800a7bc:	b933      	cbnz	r3, 800a7cc <_free_r+0x30>
 800a7be:	6063      	str	r3, [r4, #4]
 800a7c0:	6014      	str	r4, [r2, #0]
 800a7c2:	b003      	add	sp, #12
 800a7c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7c8:	f7fe b8f4 	b.w	80089b4 <__malloc_unlock>
 800a7cc:	42a3      	cmp	r3, r4
 800a7ce:	d908      	bls.n	800a7e2 <_free_r+0x46>
 800a7d0:	6825      	ldr	r5, [r4, #0]
 800a7d2:	1961      	adds	r1, r4, r5
 800a7d4:	428b      	cmp	r3, r1
 800a7d6:	bf01      	itttt	eq
 800a7d8:	6819      	ldreq	r1, [r3, #0]
 800a7da:	685b      	ldreq	r3, [r3, #4]
 800a7dc:	1949      	addeq	r1, r1, r5
 800a7de:	6021      	streq	r1, [r4, #0]
 800a7e0:	e7ed      	b.n	800a7be <_free_r+0x22>
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	b10b      	cbz	r3, 800a7ec <_free_r+0x50>
 800a7e8:	42a3      	cmp	r3, r4
 800a7ea:	d9fa      	bls.n	800a7e2 <_free_r+0x46>
 800a7ec:	6811      	ldr	r1, [r2, #0]
 800a7ee:	1855      	adds	r5, r2, r1
 800a7f0:	42a5      	cmp	r5, r4
 800a7f2:	d10b      	bne.n	800a80c <_free_r+0x70>
 800a7f4:	6824      	ldr	r4, [r4, #0]
 800a7f6:	4421      	add	r1, r4
 800a7f8:	1854      	adds	r4, r2, r1
 800a7fa:	42a3      	cmp	r3, r4
 800a7fc:	6011      	str	r1, [r2, #0]
 800a7fe:	d1e0      	bne.n	800a7c2 <_free_r+0x26>
 800a800:	681c      	ldr	r4, [r3, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	6053      	str	r3, [r2, #4]
 800a806:	440c      	add	r4, r1
 800a808:	6014      	str	r4, [r2, #0]
 800a80a:	e7da      	b.n	800a7c2 <_free_r+0x26>
 800a80c:	d902      	bls.n	800a814 <_free_r+0x78>
 800a80e:	230c      	movs	r3, #12
 800a810:	6003      	str	r3, [r0, #0]
 800a812:	e7d6      	b.n	800a7c2 <_free_r+0x26>
 800a814:	6825      	ldr	r5, [r4, #0]
 800a816:	1961      	adds	r1, r4, r5
 800a818:	428b      	cmp	r3, r1
 800a81a:	bf04      	itt	eq
 800a81c:	6819      	ldreq	r1, [r3, #0]
 800a81e:	685b      	ldreq	r3, [r3, #4]
 800a820:	6063      	str	r3, [r4, #4]
 800a822:	bf04      	itt	eq
 800a824:	1949      	addeq	r1, r1, r5
 800a826:	6021      	streq	r1, [r4, #0]
 800a828:	6054      	str	r4, [r2, #4]
 800a82a:	e7ca      	b.n	800a7c2 <_free_r+0x26>
 800a82c:	b003      	add	sp, #12
 800a82e:	bd30      	pop	{r4, r5, pc}
 800a830:	200008e0 	.word	0x200008e0

0800a834 <_Balloc>:
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	69c6      	ldr	r6, [r0, #28]
 800a838:	4604      	mov	r4, r0
 800a83a:	460d      	mov	r5, r1
 800a83c:	b976      	cbnz	r6, 800a85c <_Balloc+0x28>
 800a83e:	2010      	movs	r0, #16
 800a840:	f7fe f802 	bl	8008848 <malloc>
 800a844:	4602      	mov	r2, r0
 800a846:	61e0      	str	r0, [r4, #28]
 800a848:	b920      	cbnz	r0, 800a854 <_Balloc+0x20>
 800a84a:	4b18      	ldr	r3, [pc, #96]	; (800a8ac <_Balloc+0x78>)
 800a84c:	4818      	ldr	r0, [pc, #96]	; (800a8b0 <_Balloc+0x7c>)
 800a84e:	216b      	movs	r1, #107	; 0x6b
 800a850:	f001 fd6e 	bl	800c330 <__assert_func>
 800a854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a858:	6006      	str	r6, [r0, #0]
 800a85a:	60c6      	str	r6, [r0, #12]
 800a85c:	69e6      	ldr	r6, [r4, #28]
 800a85e:	68f3      	ldr	r3, [r6, #12]
 800a860:	b183      	cbz	r3, 800a884 <_Balloc+0x50>
 800a862:	69e3      	ldr	r3, [r4, #28]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a86a:	b9b8      	cbnz	r0, 800a89c <_Balloc+0x68>
 800a86c:	2101      	movs	r1, #1
 800a86e:	fa01 f605 	lsl.w	r6, r1, r5
 800a872:	1d72      	adds	r2, r6, #5
 800a874:	0092      	lsls	r2, r2, #2
 800a876:	4620      	mov	r0, r4
 800a878:	f001 fd78 	bl	800c36c <_calloc_r>
 800a87c:	b160      	cbz	r0, 800a898 <_Balloc+0x64>
 800a87e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a882:	e00e      	b.n	800a8a2 <_Balloc+0x6e>
 800a884:	2221      	movs	r2, #33	; 0x21
 800a886:	2104      	movs	r1, #4
 800a888:	4620      	mov	r0, r4
 800a88a:	f001 fd6f 	bl	800c36c <_calloc_r>
 800a88e:	69e3      	ldr	r3, [r4, #28]
 800a890:	60f0      	str	r0, [r6, #12]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1e4      	bne.n	800a862 <_Balloc+0x2e>
 800a898:	2000      	movs	r0, #0
 800a89a:	bd70      	pop	{r4, r5, r6, pc}
 800a89c:	6802      	ldr	r2, [r0, #0]
 800a89e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8a8:	e7f7      	b.n	800a89a <_Balloc+0x66>
 800a8aa:	bf00      	nop
 800a8ac:	0800f77a 	.word	0x0800f77a
 800a8b0:	0800f7fa 	.word	0x0800f7fa

0800a8b4 <_Bfree>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	69c6      	ldr	r6, [r0, #28]
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	b976      	cbnz	r6, 800a8dc <_Bfree+0x28>
 800a8be:	2010      	movs	r0, #16
 800a8c0:	f7fd ffc2 	bl	8008848 <malloc>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	61e8      	str	r0, [r5, #28]
 800a8c8:	b920      	cbnz	r0, 800a8d4 <_Bfree+0x20>
 800a8ca:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <_Bfree+0x3c>)
 800a8cc:	4809      	ldr	r0, [pc, #36]	; (800a8f4 <_Bfree+0x40>)
 800a8ce:	218f      	movs	r1, #143	; 0x8f
 800a8d0:	f001 fd2e 	bl	800c330 <__assert_func>
 800a8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8d8:	6006      	str	r6, [r0, #0]
 800a8da:	60c6      	str	r6, [r0, #12]
 800a8dc:	b13c      	cbz	r4, 800a8ee <_Bfree+0x3a>
 800a8de:	69eb      	ldr	r3, [r5, #28]
 800a8e0:	6862      	ldr	r2, [r4, #4]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8e8:	6021      	str	r1, [r4, #0]
 800a8ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}
 800a8f0:	0800f77a 	.word	0x0800f77a
 800a8f4:	0800f7fa 	.word	0x0800f7fa

0800a8f8 <__multadd>:
 800a8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fc:	690d      	ldr	r5, [r1, #16]
 800a8fe:	4607      	mov	r7, r0
 800a900:	460c      	mov	r4, r1
 800a902:	461e      	mov	r6, r3
 800a904:	f101 0c14 	add.w	ip, r1, #20
 800a908:	2000      	movs	r0, #0
 800a90a:	f8dc 3000 	ldr.w	r3, [ip]
 800a90e:	b299      	uxth	r1, r3
 800a910:	fb02 6101 	mla	r1, r2, r1, r6
 800a914:	0c1e      	lsrs	r6, r3, #16
 800a916:	0c0b      	lsrs	r3, r1, #16
 800a918:	fb02 3306 	mla	r3, r2, r6, r3
 800a91c:	b289      	uxth	r1, r1
 800a91e:	3001      	adds	r0, #1
 800a920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a924:	4285      	cmp	r5, r0
 800a926:	f84c 1b04 	str.w	r1, [ip], #4
 800a92a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a92e:	dcec      	bgt.n	800a90a <__multadd+0x12>
 800a930:	b30e      	cbz	r6, 800a976 <__multadd+0x7e>
 800a932:	68a3      	ldr	r3, [r4, #8]
 800a934:	42ab      	cmp	r3, r5
 800a936:	dc19      	bgt.n	800a96c <__multadd+0x74>
 800a938:	6861      	ldr	r1, [r4, #4]
 800a93a:	4638      	mov	r0, r7
 800a93c:	3101      	adds	r1, #1
 800a93e:	f7ff ff79 	bl	800a834 <_Balloc>
 800a942:	4680      	mov	r8, r0
 800a944:	b928      	cbnz	r0, 800a952 <__multadd+0x5a>
 800a946:	4602      	mov	r2, r0
 800a948:	4b0c      	ldr	r3, [pc, #48]	; (800a97c <__multadd+0x84>)
 800a94a:	480d      	ldr	r0, [pc, #52]	; (800a980 <__multadd+0x88>)
 800a94c:	21ba      	movs	r1, #186	; 0xba
 800a94e:	f001 fcef 	bl	800c330 <__assert_func>
 800a952:	6922      	ldr	r2, [r4, #16]
 800a954:	3202      	adds	r2, #2
 800a956:	f104 010c 	add.w	r1, r4, #12
 800a95a:	0092      	lsls	r2, r2, #2
 800a95c:	300c      	adds	r0, #12
 800a95e:	f7ff f88e 	bl	8009a7e <memcpy>
 800a962:	4621      	mov	r1, r4
 800a964:	4638      	mov	r0, r7
 800a966:	f7ff ffa5 	bl	800a8b4 <_Bfree>
 800a96a:	4644      	mov	r4, r8
 800a96c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a970:	3501      	adds	r5, #1
 800a972:	615e      	str	r6, [r3, #20]
 800a974:	6125      	str	r5, [r4, #16]
 800a976:	4620      	mov	r0, r4
 800a978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a97c:	0800f7e9 	.word	0x0800f7e9
 800a980:	0800f7fa 	.word	0x0800f7fa

0800a984 <__s2b>:
 800a984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a988:	460c      	mov	r4, r1
 800a98a:	4615      	mov	r5, r2
 800a98c:	461f      	mov	r7, r3
 800a98e:	2209      	movs	r2, #9
 800a990:	3308      	adds	r3, #8
 800a992:	4606      	mov	r6, r0
 800a994:	fb93 f3f2 	sdiv	r3, r3, r2
 800a998:	2100      	movs	r1, #0
 800a99a:	2201      	movs	r2, #1
 800a99c:	429a      	cmp	r2, r3
 800a99e:	db09      	blt.n	800a9b4 <__s2b+0x30>
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7ff ff47 	bl	800a834 <_Balloc>
 800a9a6:	b940      	cbnz	r0, 800a9ba <__s2b+0x36>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	4b19      	ldr	r3, [pc, #100]	; (800aa10 <__s2b+0x8c>)
 800a9ac:	4819      	ldr	r0, [pc, #100]	; (800aa14 <__s2b+0x90>)
 800a9ae:	21d3      	movs	r1, #211	; 0xd3
 800a9b0:	f001 fcbe 	bl	800c330 <__assert_func>
 800a9b4:	0052      	lsls	r2, r2, #1
 800a9b6:	3101      	adds	r1, #1
 800a9b8:	e7f0      	b.n	800a99c <__s2b+0x18>
 800a9ba:	9b08      	ldr	r3, [sp, #32]
 800a9bc:	6143      	str	r3, [r0, #20]
 800a9be:	2d09      	cmp	r5, #9
 800a9c0:	f04f 0301 	mov.w	r3, #1
 800a9c4:	6103      	str	r3, [r0, #16]
 800a9c6:	dd16      	ble.n	800a9f6 <__s2b+0x72>
 800a9c8:	f104 0909 	add.w	r9, r4, #9
 800a9cc:	46c8      	mov	r8, r9
 800a9ce:	442c      	add	r4, r5
 800a9d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a9d4:	4601      	mov	r1, r0
 800a9d6:	3b30      	subs	r3, #48	; 0x30
 800a9d8:	220a      	movs	r2, #10
 800a9da:	4630      	mov	r0, r6
 800a9dc:	f7ff ff8c 	bl	800a8f8 <__multadd>
 800a9e0:	45a0      	cmp	r8, r4
 800a9e2:	d1f5      	bne.n	800a9d0 <__s2b+0x4c>
 800a9e4:	f1a5 0408 	sub.w	r4, r5, #8
 800a9e8:	444c      	add	r4, r9
 800a9ea:	1b2d      	subs	r5, r5, r4
 800a9ec:	1963      	adds	r3, r4, r5
 800a9ee:	42bb      	cmp	r3, r7
 800a9f0:	db04      	blt.n	800a9fc <__s2b+0x78>
 800a9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9f6:	340a      	adds	r4, #10
 800a9f8:	2509      	movs	r5, #9
 800a9fa:	e7f6      	b.n	800a9ea <__s2b+0x66>
 800a9fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa00:	4601      	mov	r1, r0
 800aa02:	3b30      	subs	r3, #48	; 0x30
 800aa04:	220a      	movs	r2, #10
 800aa06:	4630      	mov	r0, r6
 800aa08:	f7ff ff76 	bl	800a8f8 <__multadd>
 800aa0c:	e7ee      	b.n	800a9ec <__s2b+0x68>
 800aa0e:	bf00      	nop
 800aa10:	0800f7e9 	.word	0x0800f7e9
 800aa14:	0800f7fa 	.word	0x0800f7fa

0800aa18 <__hi0bits>:
 800aa18:	0c03      	lsrs	r3, r0, #16
 800aa1a:	041b      	lsls	r3, r3, #16
 800aa1c:	b9d3      	cbnz	r3, 800aa54 <__hi0bits+0x3c>
 800aa1e:	0400      	lsls	r0, r0, #16
 800aa20:	2310      	movs	r3, #16
 800aa22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aa26:	bf04      	itt	eq
 800aa28:	0200      	lsleq	r0, r0, #8
 800aa2a:	3308      	addeq	r3, #8
 800aa2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa30:	bf04      	itt	eq
 800aa32:	0100      	lsleq	r0, r0, #4
 800aa34:	3304      	addeq	r3, #4
 800aa36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aa3a:	bf04      	itt	eq
 800aa3c:	0080      	lsleq	r0, r0, #2
 800aa3e:	3302      	addeq	r3, #2
 800aa40:	2800      	cmp	r0, #0
 800aa42:	db05      	blt.n	800aa50 <__hi0bits+0x38>
 800aa44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aa48:	f103 0301 	add.w	r3, r3, #1
 800aa4c:	bf08      	it	eq
 800aa4e:	2320      	moveq	r3, #32
 800aa50:	4618      	mov	r0, r3
 800aa52:	4770      	bx	lr
 800aa54:	2300      	movs	r3, #0
 800aa56:	e7e4      	b.n	800aa22 <__hi0bits+0xa>

0800aa58 <__lo0bits>:
 800aa58:	6803      	ldr	r3, [r0, #0]
 800aa5a:	f013 0207 	ands.w	r2, r3, #7
 800aa5e:	d00c      	beq.n	800aa7a <__lo0bits+0x22>
 800aa60:	07d9      	lsls	r1, r3, #31
 800aa62:	d422      	bmi.n	800aaaa <__lo0bits+0x52>
 800aa64:	079a      	lsls	r2, r3, #30
 800aa66:	bf49      	itett	mi
 800aa68:	085b      	lsrmi	r3, r3, #1
 800aa6a:	089b      	lsrpl	r3, r3, #2
 800aa6c:	6003      	strmi	r3, [r0, #0]
 800aa6e:	2201      	movmi	r2, #1
 800aa70:	bf5c      	itt	pl
 800aa72:	6003      	strpl	r3, [r0, #0]
 800aa74:	2202      	movpl	r2, #2
 800aa76:	4610      	mov	r0, r2
 800aa78:	4770      	bx	lr
 800aa7a:	b299      	uxth	r1, r3
 800aa7c:	b909      	cbnz	r1, 800aa82 <__lo0bits+0x2a>
 800aa7e:	0c1b      	lsrs	r3, r3, #16
 800aa80:	2210      	movs	r2, #16
 800aa82:	b2d9      	uxtb	r1, r3
 800aa84:	b909      	cbnz	r1, 800aa8a <__lo0bits+0x32>
 800aa86:	3208      	adds	r2, #8
 800aa88:	0a1b      	lsrs	r3, r3, #8
 800aa8a:	0719      	lsls	r1, r3, #28
 800aa8c:	bf04      	itt	eq
 800aa8e:	091b      	lsreq	r3, r3, #4
 800aa90:	3204      	addeq	r2, #4
 800aa92:	0799      	lsls	r1, r3, #30
 800aa94:	bf04      	itt	eq
 800aa96:	089b      	lsreq	r3, r3, #2
 800aa98:	3202      	addeq	r2, #2
 800aa9a:	07d9      	lsls	r1, r3, #31
 800aa9c:	d403      	bmi.n	800aaa6 <__lo0bits+0x4e>
 800aa9e:	085b      	lsrs	r3, r3, #1
 800aaa0:	f102 0201 	add.w	r2, r2, #1
 800aaa4:	d003      	beq.n	800aaae <__lo0bits+0x56>
 800aaa6:	6003      	str	r3, [r0, #0]
 800aaa8:	e7e5      	b.n	800aa76 <__lo0bits+0x1e>
 800aaaa:	2200      	movs	r2, #0
 800aaac:	e7e3      	b.n	800aa76 <__lo0bits+0x1e>
 800aaae:	2220      	movs	r2, #32
 800aab0:	e7e1      	b.n	800aa76 <__lo0bits+0x1e>
	...

0800aab4 <__i2b>:
 800aab4:	b510      	push	{r4, lr}
 800aab6:	460c      	mov	r4, r1
 800aab8:	2101      	movs	r1, #1
 800aaba:	f7ff febb 	bl	800a834 <_Balloc>
 800aabe:	4602      	mov	r2, r0
 800aac0:	b928      	cbnz	r0, 800aace <__i2b+0x1a>
 800aac2:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <__i2b+0x24>)
 800aac4:	4805      	ldr	r0, [pc, #20]	; (800aadc <__i2b+0x28>)
 800aac6:	f240 1145 	movw	r1, #325	; 0x145
 800aaca:	f001 fc31 	bl	800c330 <__assert_func>
 800aace:	2301      	movs	r3, #1
 800aad0:	6144      	str	r4, [r0, #20]
 800aad2:	6103      	str	r3, [r0, #16]
 800aad4:	bd10      	pop	{r4, pc}
 800aad6:	bf00      	nop
 800aad8:	0800f7e9 	.word	0x0800f7e9
 800aadc:	0800f7fa 	.word	0x0800f7fa

0800aae0 <__multiply>:
 800aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae4:	4691      	mov	r9, r2
 800aae6:	690a      	ldr	r2, [r1, #16]
 800aae8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	bfb8      	it	lt
 800aaf0:	460b      	movlt	r3, r1
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	bfbc      	itt	lt
 800aaf6:	464c      	movlt	r4, r9
 800aaf8:	4699      	movlt	r9, r3
 800aafa:	6927      	ldr	r7, [r4, #16]
 800aafc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab00:	68a3      	ldr	r3, [r4, #8]
 800ab02:	6861      	ldr	r1, [r4, #4]
 800ab04:	eb07 060a 	add.w	r6, r7, sl
 800ab08:	42b3      	cmp	r3, r6
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	bfb8      	it	lt
 800ab0e:	3101      	addlt	r1, #1
 800ab10:	f7ff fe90 	bl	800a834 <_Balloc>
 800ab14:	b930      	cbnz	r0, 800ab24 <__multiply+0x44>
 800ab16:	4602      	mov	r2, r0
 800ab18:	4b44      	ldr	r3, [pc, #272]	; (800ac2c <__multiply+0x14c>)
 800ab1a:	4845      	ldr	r0, [pc, #276]	; (800ac30 <__multiply+0x150>)
 800ab1c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ab20:	f001 fc06 	bl	800c330 <__assert_func>
 800ab24:	f100 0514 	add.w	r5, r0, #20
 800ab28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab2c:	462b      	mov	r3, r5
 800ab2e:	2200      	movs	r2, #0
 800ab30:	4543      	cmp	r3, r8
 800ab32:	d321      	bcc.n	800ab78 <__multiply+0x98>
 800ab34:	f104 0314 	add.w	r3, r4, #20
 800ab38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ab3c:	f109 0314 	add.w	r3, r9, #20
 800ab40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ab44:	9202      	str	r2, [sp, #8]
 800ab46:	1b3a      	subs	r2, r7, r4
 800ab48:	3a15      	subs	r2, #21
 800ab4a:	f022 0203 	bic.w	r2, r2, #3
 800ab4e:	3204      	adds	r2, #4
 800ab50:	f104 0115 	add.w	r1, r4, #21
 800ab54:	428f      	cmp	r7, r1
 800ab56:	bf38      	it	cc
 800ab58:	2204      	movcc	r2, #4
 800ab5a:	9201      	str	r2, [sp, #4]
 800ab5c:	9a02      	ldr	r2, [sp, #8]
 800ab5e:	9303      	str	r3, [sp, #12]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d80c      	bhi.n	800ab7e <__multiply+0x9e>
 800ab64:	2e00      	cmp	r6, #0
 800ab66:	dd03      	ble.n	800ab70 <__multiply+0x90>
 800ab68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d05b      	beq.n	800ac28 <__multiply+0x148>
 800ab70:	6106      	str	r6, [r0, #16]
 800ab72:	b005      	add	sp, #20
 800ab74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab78:	f843 2b04 	str.w	r2, [r3], #4
 800ab7c:	e7d8      	b.n	800ab30 <__multiply+0x50>
 800ab7e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab82:	f1ba 0f00 	cmp.w	sl, #0
 800ab86:	d024      	beq.n	800abd2 <__multiply+0xf2>
 800ab88:	f104 0e14 	add.w	lr, r4, #20
 800ab8c:	46a9      	mov	r9, r5
 800ab8e:	f04f 0c00 	mov.w	ip, #0
 800ab92:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab96:	f8d9 1000 	ldr.w	r1, [r9]
 800ab9a:	fa1f fb82 	uxth.w	fp, r2
 800ab9e:	b289      	uxth	r1, r1
 800aba0:	fb0a 110b 	mla	r1, sl, fp, r1
 800aba4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aba8:	f8d9 2000 	ldr.w	r2, [r9]
 800abac:	4461      	add	r1, ip
 800abae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800abb2:	fb0a c20b 	mla	r2, sl, fp, ip
 800abb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800abba:	b289      	uxth	r1, r1
 800abbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800abc0:	4577      	cmp	r7, lr
 800abc2:	f849 1b04 	str.w	r1, [r9], #4
 800abc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800abca:	d8e2      	bhi.n	800ab92 <__multiply+0xb2>
 800abcc:	9a01      	ldr	r2, [sp, #4]
 800abce:	f845 c002 	str.w	ip, [r5, r2]
 800abd2:	9a03      	ldr	r2, [sp, #12]
 800abd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800abd8:	3304      	adds	r3, #4
 800abda:	f1b9 0f00 	cmp.w	r9, #0
 800abde:	d021      	beq.n	800ac24 <__multiply+0x144>
 800abe0:	6829      	ldr	r1, [r5, #0]
 800abe2:	f104 0c14 	add.w	ip, r4, #20
 800abe6:	46ae      	mov	lr, r5
 800abe8:	f04f 0a00 	mov.w	sl, #0
 800abec:	f8bc b000 	ldrh.w	fp, [ip]
 800abf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800abf4:	fb09 220b 	mla	r2, r9, fp, r2
 800abf8:	4452      	add	r2, sl
 800abfa:	b289      	uxth	r1, r1
 800abfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac00:	f84e 1b04 	str.w	r1, [lr], #4
 800ac04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ac08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac0c:	f8be 1000 	ldrh.w	r1, [lr]
 800ac10:	fb09 110a 	mla	r1, r9, sl, r1
 800ac14:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ac18:	4567      	cmp	r7, ip
 800ac1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac1e:	d8e5      	bhi.n	800abec <__multiply+0x10c>
 800ac20:	9a01      	ldr	r2, [sp, #4]
 800ac22:	50a9      	str	r1, [r5, r2]
 800ac24:	3504      	adds	r5, #4
 800ac26:	e799      	b.n	800ab5c <__multiply+0x7c>
 800ac28:	3e01      	subs	r6, #1
 800ac2a:	e79b      	b.n	800ab64 <__multiply+0x84>
 800ac2c:	0800f7e9 	.word	0x0800f7e9
 800ac30:	0800f7fa 	.word	0x0800f7fa

0800ac34 <__pow5mult>:
 800ac34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac38:	4615      	mov	r5, r2
 800ac3a:	f012 0203 	ands.w	r2, r2, #3
 800ac3e:	4606      	mov	r6, r0
 800ac40:	460f      	mov	r7, r1
 800ac42:	d007      	beq.n	800ac54 <__pow5mult+0x20>
 800ac44:	4c25      	ldr	r4, [pc, #148]	; (800acdc <__pow5mult+0xa8>)
 800ac46:	3a01      	subs	r2, #1
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac4e:	f7ff fe53 	bl	800a8f8 <__multadd>
 800ac52:	4607      	mov	r7, r0
 800ac54:	10ad      	asrs	r5, r5, #2
 800ac56:	d03d      	beq.n	800acd4 <__pow5mult+0xa0>
 800ac58:	69f4      	ldr	r4, [r6, #28]
 800ac5a:	b97c      	cbnz	r4, 800ac7c <__pow5mult+0x48>
 800ac5c:	2010      	movs	r0, #16
 800ac5e:	f7fd fdf3 	bl	8008848 <malloc>
 800ac62:	4602      	mov	r2, r0
 800ac64:	61f0      	str	r0, [r6, #28]
 800ac66:	b928      	cbnz	r0, 800ac74 <__pow5mult+0x40>
 800ac68:	4b1d      	ldr	r3, [pc, #116]	; (800ace0 <__pow5mult+0xac>)
 800ac6a:	481e      	ldr	r0, [pc, #120]	; (800ace4 <__pow5mult+0xb0>)
 800ac6c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ac70:	f001 fb5e 	bl	800c330 <__assert_func>
 800ac74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac78:	6004      	str	r4, [r0, #0]
 800ac7a:	60c4      	str	r4, [r0, #12]
 800ac7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ac80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac84:	b94c      	cbnz	r4, 800ac9a <__pow5mult+0x66>
 800ac86:	f240 2171 	movw	r1, #625	; 0x271
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f7ff ff12 	bl	800aab4 <__i2b>
 800ac90:	2300      	movs	r3, #0
 800ac92:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac96:	4604      	mov	r4, r0
 800ac98:	6003      	str	r3, [r0, #0]
 800ac9a:	f04f 0900 	mov.w	r9, #0
 800ac9e:	07eb      	lsls	r3, r5, #31
 800aca0:	d50a      	bpl.n	800acb8 <__pow5mult+0x84>
 800aca2:	4639      	mov	r1, r7
 800aca4:	4622      	mov	r2, r4
 800aca6:	4630      	mov	r0, r6
 800aca8:	f7ff ff1a 	bl	800aae0 <__multiply>
 800acac:	4639      	mov	r1, r7
 800acae:	4680      	mov	r8, r0
 800acb0:	4630      	mov	r0, r6
 800acb2:	f7ff fdff 	bl	800a8b4 <_Bfree>
 800acb6:	4647      	mov	r7, r8
 800acb8:	106d      	asrs	r5, r5, #1
 800acba:	d00b      	beq.n	800acd4 <__pow5mult+0xa0>
 800acbc:	6820      	ldr	r0, [r4, #0]
 800acbe:	b938      	cbnz	r0, 800acd0 <__pow5mult+0x9c>
 800acc0:	4622      	mov	r2, r4
 800acc2:	4621      	mov	r1, r4
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7ff ff0b 	bl	800aae0 <__multiply>
 800acca:	6020      	str	r0, [r4, #0]
 800accc:	f8c0 9000 	str.w	r9, [r0]
 800acd0:	4604      	mov	r4, r0
 800acd2:	e7e4      	b.n	800ac9e <__pow5mult+0x6a>
 800acd4:	4638      	mov	r0, r7
 800acd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acda:	bf00      	nop
 800acdc:	0800f948 	.word	0x0800f948
 800ace0:	0800f77a 	.word	0x0800f77a
 800ace4:	0800f7fa 	.word	0x0800f7fa

0800ace8 <__lshift>:
 800ace8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acec:	460c      	mov	r4, r1
 800acee:	6849      	ldr	r1, [r1, #4]
 800acf0:	6923      	ldr	r3, [r4, #16]
 800acf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acf6:	68a3      	ldr	r3, [r4, #8]
 800acf8:	4607      	mov	r7, r0
 800acfa:	4691      	mov	r9, r2
 800acfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad00:	f108 0601 	add.w	r6, r8, #1
 800ad04:	42b3      	cmp	r3, r6
 800ad06:	db0b      	blt.n	800ad20 <__lshift+0x38>
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f7ff fd93 	bl	800a834 <_Balloc>
 800ad0e:	4605      	mov	r5, r0
 800ad10:	b948      	cbnz	r0, 800ad26 <__lshift+0x3e>
 800ad12:	4602      	mov	r2, r0
 800ad14:	4b28      	ldr	r3, [pc, #160]	; (800adb8 <__lshift+0xd0>)
 800ad16:	4829      	ldr	r0, [pc, #164]	; (800adbc <__lshift+0xd4>)
 800ad18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ad1c:	f001 fb08 	bl	800c330 <__assert_func>
 800ad20:	3101      	adds	r1, #1
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	e7ee      	b.n	800ad04 <__lshift+0x1c>
 800ad26:	2300      	movs	r3, #0
 800ad28:	f100 0114 	add.w	r1, r0, #20
 800ad2c:	f100 0210 	add.w	r2, r0, #16
 800ad30:	4618      	mov	r0, r3
 800ad32:	4553      	cmp	r3, sl
 800ad34:	db33      	blt.n	800ad9e <__lshift+0xb6>
 800ad36:	6920      	ldr	r0, [r4, #16]
 800ad38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad3c:	f104 0314 	add.w	r3, r4, #20
 800ad40:	f019 091f 	ands.w	r9, r9, #31
 800ad44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad4c:	d02b      	beq.n	800ada6 <__lshift+0xbe>
 800ad4e:	f1c9 0e20 	rsb	lr, r9, #32
 800ad52:	468a      	mov	sl, r1
 800ad54:	2200      	movs	r2, #0
 800ad56:	6818      	ldr	r0, [r3, #0]
 800ad58:	fa00 f009 	lsl.w	r0, r0, r9
 800ad5c:	4310      	orrs	r0, r2
 800ad5e:	f84a 0b04 	str.w	r0, [sl], #4
 800ad62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad66:	459c      	cmp	ip, r3
 800ad68:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad6c:	d8f3      	bhi.n	800ad56 <__lshift+0x6e>
 800ad6e:	ebac 0304 	sub.w	r3, ip, r4
 800ad72:	3b15      	subs	r3, #21
 800ad74:	f023 0303 	bic.w	r3, r3, #3
 800ad78:	3304      	adds	r3, #4
 800ad7a:	f104 0015 	add.w	r0, r4, #21
 800ad7e:	4584      	cmp	ip, r0
 800ad80:	bf38      	it	cc
 800ad82:	2304      	movcc	r3, #4
 800ad84:	50ca      	str	r2, [r1, r3]
 800ad86:	b10a      	cbz	r2, 800ad8c <__lshift+0xa4>
 800ad88:	f108 0602 	add.w	r6, r8, #2
 800ad8c:	3e01      	subs	r6, #1
 800ad8e:	4638      	mov	r0, r7
 800ad90:	612e      	str	r6, [r5, #16]
 800ad92:	4621      	mov	r1, r4
 800ad94:	f7ff fd8e 	bl	800a8b4 <_Bfree>
 800ad98:	4628      	mov	r0, r5
 800ad9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ada2:	3301      	adds	r3, #1
 800ada4:	e7c5      	b.n	800ad32 <__lshift+0x4a>
 800ada6:	3904      	subs	r1, #4
 800ada8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adac:	f841 2f04 	str.w	r2, [r1, #4]!
 800adb0:	459c      	cmp	ip, r3
 800adb2:	d8f9      	bhi.n	800ada8 <__lshift+0xc0>
 800adb4:	e7ea      	b.n	800ad8c <__lshift+0xa4>
 800adb6:	bf00      	nop
 800adb8:	0800f7e9 	.word	0x0800f7e9
 800adbc:	0800f7fa 	.word	0x0800f7fa

0800adc0 <__mcmp>:
 800adc0:	b530      	push	{r4, r5, lr}
 800adc2:	6902      	ldr	r2, [r0, #16]
 800adc4:	690c      	ldr	r4, [r1, #16]
 800adc6:	1b12      	subs	r2, r2, r4
 800adc8:	d10e      	bne.n	800ade8 <__mcmp+0x28>
 800adca:	f100 0314 	add.w	r3, r0, #20
 800adce:	3114      	adds	r1, #20
 800add0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800add4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800add8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800addc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ade0:	42a5      	cmp	r5, r4
 800ade2:	d003      	beq.n	800adec <__mcmp+0x2c>
 800ade4:	d305      	bcc.n	800adf2 <__mcmp+0x32>
 800ade6:	2201      	movs	r2, #1
 800ade8:	4610      	mov	r0, r2
 800adea:	bd30      	pop	{r4, r5, pc}
 800adec:	4283      	cmp	r3, r0
 800adee:	d3f3      	bcc.n	800add8 <__mcmp+0x18>
 800adf0:	e7fa      	b.n	800ade8 <__mcmp+0x28>
 800adf2:	f04f 32ff 	mov.w	r2, #4294967295
 800adf6:	e7f7      	b.n	800ade8 <__mcmp+0x28>

0800adf8 <__mdiff>:
 800adf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	460c      	mov	r4, r1
 800adfe:	4606      	mov	r6, r0
 800ae00:	4611      	mov	r1, r2
 800ae02:	4620      	mov	r0, r4
 800ae04:	4690      	mov	r8, r2
 800ae06:	f7ff ffdb 	bl	800adc0 <__mcmp>
 800ae0a:	1e05      	subs	r5, r0, #0
 800ae0c:	d110      	bne.n	800ae30 <__mdiff+0x38>
 800ae0e:	4629      	mov	r1, r5
 800ae10:	4630      	mov	r0, r6
 800ae12:	f7ff fd0f 	bl	800a834 <_Balloc>
 800ae16:	b930      	cbnz	r0, 800ae26 <__mdiff+0x2e>
 800ae18:	4b3a      	ldr	r3, [pc, #232]	; (800af04 <__mdiff+0x10c>)
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	f240 2137 	movw	r1, #567	; 0x237
 800ae20:	4839      	ldr	r0, [pc, #228]	; (800af08 <__mdiff+0x110>)
 800ae22:	f001 fa85 	bl	800c330 <__assert_func>
 800ae26:	2301      	movs	r3, #1
 800ae28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae30:	bfa4      	itt	ge
 800ae32:	4643      	movge	r3, r8
 800ae34:	46a0      	movge	r8, r4
 800ae36:	4630      	mov	r0, r6
 800ae38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae3c:	bfa6      	itte	ge
 800ae3e:	461c      	movge	r4, r3
 800ae40:	2500      	movge	r5, #0
 800ae42:	2501      	movlt	r5, #1
 800ae44:	f7ff fcf6 	bl	800a834 <_Balloc>
 800ae48:	b920      	cbnz	r0, 800ae54 <__mdiff+0x5c>
 800ae4a:	4b2e      	ldr	r3, [pc, #184]	; (800af04 <__mdiff+0x10c>)
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	f240 2145 	movw	r1, #581	; 0x245
 800ae52:	e7e5      	b.n	800ae20 <__mdiff+0x28>
 800ae54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae58:	6926      	ldr	r6, [r4, #16]
 800ae5a:	60c5      	str	r5, [r0, #12]
 800ae5c:	f104 0914 	add.w	r9, r4, #20
 800ae60:	f108 0514 	add.w	r5, r8, #20
 800ae64:	f100 0e14 	add.w	lr, r0, #20
 800ae68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae70:	f108 0210 	add.w	r2, r8, #16
 800ae74:	46f2      	mov	sl, lr
 800ae76:	2100      	movs	r1, #0
 800ae78:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae80:	fa11 f88b 	uxtah	r8, r1, fp
 800ae84:	b299      	uxth	r1, r3
 800ae86:	0c1b      	lsrs	r3, r3, #16
 800ae88:	eba8 0801 	sub.w	r8, r8, r1
 800ae8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae94:	fa1f f888 	uxth.w	r8, r8
 800ae98:	1419      	asrs	r1, r3, #16
 800ae9a:	454e      	cmp	r6, r9
 800ae9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aea0:	f84a 3b04 	str.w	r3, [sl], #4
 800aea4:	d8e8      	bhi.n	800ae78 <__mdiff+0x80>
 800aea6:	1b33      	subs	r3, r6, r4
 800aea8:	3b15      	subs	r3, #21
 800aeaa:	f023 0303 	bic.w	r3, r3, #3
 800aeae:	3304      	adds	r3, #4
 800aeb0:	3415      	adds	r4, #21
 800aeb2:	42a6      	cmp	r6, r4
 800aeb4:	bf38      	it	cc
 800aeb6:	2304      	movcc	r3, #4
 800aeb8:	441d      	add	r5, r3
 800aeba:	4473      	add	r3, lr
 800aebc:	469e      	mov	lr, r3
 800aebe:	462e      	mov	r6, r5
 800aec0:	4566      	cmp	r6, ip
 800aec2:	d30e      	bcc.n	800aee2 <__mdiff+0xea>
 800aec4:	f10c 0203 	add.w	r2, ip, #3
 800aec8:	1b52      	subs	r2, r2, r5
 800aeca:	f022 0203 	bic.w	r2, r2, #3
 800aece:	3d03      	subs	r5, #3
 800aed0:	45ac      	cmp	ip, r5
 800aed2:	bf38      	it	cc
 800aed4:	2200      	movcc	r2, #0
 800aed6:	4413      	add	r3, r2
 800aed8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aedc:	b17a      	cbz	r2, 800aefe <__mdiff+0x106>
 800aede:	6107      	str	r7, [r0, #16]
 800aee0:	e7a4      	b.n	800ae2c <__mdiff+0x34>
 800aee2:	f856 8b04 	ldr.w	r8, [r6], #4
 800aee6:	fa11 f288 	uxtah	r2, r1, r8
 800aeea:	1414      	asrs	r4, r2, #16
 800aeec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aef0:	b292      	uxth	r2, r2
 800aef2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aef6:	f84e 2b04 	str.w	r2, [lr], #4
 800aefa:	1421      	asrs	r1, r4, #16
 800aefc:	e7e0      	b.n	800aec0 <__mdiff+0xc8>
 800aefe:	3f01      	subs	r7, #1
 800af00:	e7ea      	b.n	800aed8 <__mdiff+0xe0>
 800af02:	bf00      	nop
 800af04:	0800f7e9 	.word	0x0800f7e9
 800af08:	0800f7fa 	.word	0x0800f7fa

0800af0c <__ulp>:
 800af0c:	b082      	sub	sp, #8
 800af0e:	ed8d 0b00 	vstr	d0, [sp]
 800af12:	9a01      	ldr	r2, [sp, #4]
 800af14:	4b0f      	ldr	r3, [pc, #60]	; (800af54 <__ulp+0x48>)
 800af16:	4013      	ands	r3, r2
 800af18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	dc08      	bgt.n	800af32 <__ulp+0x26>
 800af20:	425b      	negs	r3, r3
 800af22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800af26:	ea4f 5223 	mov.w	r2, r3, asr #20
 800af2a:	da04      	bge.n	800af36 <__ulp+0x2a>
 800af2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af30:	4113      	asrs	r3, r2
 800af32:	2200      	movs	r2, #0
 800af34:	e008      	b.n	800af48 <__ulp+0x3c>
 800af36:	f1a2 0314 	sub.w	r3, r2, #20
 800af3a:	2b1e      	cmp	r3, #30
 800af3c:	bfda      	itte	le
 800af3e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800af42:	40da      	lsrle	r2, r3
 800af44:	2201      	movgt	r2, #1
 800af46:	2300      	movs	r3, #0
 800af48:	4619      	mov	r1, r3
 800af4a:	4610      	mov	r0, r2
 800af4c:	ec41 0b10 	vmov	d0, r0, r1
 800af50:	b002      	add	sp, #8
 800af52:	4770      	bx	lr
 800af54:	7ff00000 	.word	0x7ff00000

0800af58 <__b2d>:
 800af58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5c:	6906      	ldr	r6, [r0, #16]
 800af5e:	f100 0814 	add.w	r8, r0, #20
 800af62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800af66:	1f37      	subs	r7, r6, #4
 800af68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af6c:	4610      	mov	r0, r2
 800af6e:	f7ff fd53 	bl	800aa18 <__hi0bits>
 800af72:	f1c0 0320 	rsb	r3, r0, #32
 800af76:	280a      	cmp	r0, #10
 800af78:	600b      	str	r3, [r1, #0]
 800af7a:	491b      	ldr	r1, [pc, #108]	; (800afe8 <__b2d+0x90>)
 800af7c:	dc15      	bgt.n	800afaa <__b2d+0x52>
 800af7e:	f1c0 0c0b 	rsb	ip, r0, #11
 800af82:	fa22 f30c 	lsr.w	r3, r2, ip
 800af86:	45b8      	cmp	r8, r7
 800af88:	ea43 0501 	orr.w	r5, r3, r1
 800af8c:	bf34      	ite	cc
 800af8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af92:	2300      	movcs	r3, #0
 800af94:	3015      	adds	r0, #21
 800af96:	fa02 f000 	lsl.w	r0, r2, r0
 800af9a:	fa23 f30c 	lsr.w	r3, r3, ip
 800af9e:	4303      	orrs	r3, r0
 800afa0:	461c      	mov	r4, r3
 800afa2:	ec45 4b10 	vmov	d0, r4, r5
 800afa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afaa:	45b8      	cmp	r8, r7
 800afac:	bf3a      	itte	cc
 800afae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800afb2:	f1a6 0708 	subcc.w	r7, r6, #8
 800afb6:	2300      	movcs	r3, #0
 800afb8:	380b      	subs	r0, #11
 800afba:	d012      	beq.n	800afe2 <__b2d+0x8a>
 800afbc:	f1c0 0120 	rsb	r1, r0, #32
 800afc0:	fa23 f401 	lsr.w	r4, r3, r1
 800afc4:	4082      	lsls	r2, r0
 800afc6:	4322      	orrs	r2, r4
 800afc8:	4547      	cmp	r7, r8
 800afca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800afce:	bf8c      	ite	hi
 800afd0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800afd4:	2200      	movls	r2, #0
 800afd6:	4083      	lsls	r3, r0
 800afd8:	40ca      	lsrs	r2, r1
 800afda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800afde:	4313      	orrs	r3, r2
 800afe0:	e7de      	b.n	800afa0 <__b2d+0x48>
 800afe2:	ea42 0501 	orr.w	r5, r2, r1
 800afe6:	e7db      	b.n	800afa0 <__b2d+0x48>
 800afe8:	3ff00000 	.word	0x3ff00000

0800afec <__d2b>:
 800afec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aff0:	460f      	mov	r7, r1
 800aff2:	2101      	movs	r1, #1
 800aff4:	ec59 8b10 	vmov	r8, r9, d0
 800aff8:	4616      	mov	r6, r2
 800affa:	f7ff fc1b 	bl	800a834 <_Balloc>
 800affe:	4604      	mov	r4, r0
 800b000:	b930      	cbnz	r0, 800b010 <__d2b+0x24>
 800b002:	4602      	mov	r2, r0
 800b004:	4b24      	ldr	r3, [pc, #144]	; (800b098 <__d2b+0xac>)
 800b006:	4825      	ldr	r0, [pc, #148]	; (800b09c <__d2b+0xb0>)
 800b008:	f240 310f 	movw	r1, #783	; 0x30f
 800b00c:	f001 f990 	bl	800c330 <__assert_func>
 800b010:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b014:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b018:	bb2d      	cbnz	r5, 800b066 <__d2b+0x7a>
 800b01a:	9301      	str	r3, [sp, #4]
 800b01c:	f1b8 0300 	subs.w	r3, r8, #0
 800b020:	d026      	beq.n	800b070 <__d2b+0x84>
 800b022:	4668      	mov	r0, sp
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	f7ff fd17 	bl	800aa58 <__lo0bits>
 800b02a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b02e:	b1e8      	cbz	r0, 800b06c <__d2b+0x80>
 800b030:	f1c0 0320 	rsb	r3, r0, #32
 800b034:	fa02 f303 	lsl.w	r3, r2, r3
 800b038:	430b      	orrs	r3, r1
 800b03a:	40c2      	lsrs	r2, r0
 800b03c:	6163      	str	r3, [r4, #20]
 800b03e:	9201      	str	r2, [sp, #4]
 800b040:	9b01      	ldr	r3, [sp, #4]
 800b042:	61a3      	str	r3, [r4, #24]
 800b044:	2b00      	cmp	r3, #0
 800b046:	bf14      	ite	ne
 800b048:	2202      	movne	r2, #2
 800b04a:	2201      	moveq	r2, #1
 800b04c:	6122      	str	r2, [r4, #16]
 800b04e:	b1bd      	cbz	r5, 800b080 <__d2b+0x94>
 800b050:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b054:	4405      	add	r5, r0
 800b056:	603d      	str	r5, [r7, #0]
 800b058:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b05c:	6030      	str	r0, [r6, #0]
 800b05e:	4620      	mov	r0, r4
 800b060:	b003      	add	sp, #12
 800b062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b06a:	e7d6      	b.n	800b01a <__d2b+0x2e>
 800b06c:	6161      	str	r1, [r4, #20]
 800b06e:	e7e7      	b.n	800b040 <__d2b+0x54>
 800b070:	a801      	add	r0, sp, #4
 800b072:	f7ff fcf1 	bl	800aa58 <__lo0bits>
 800b076:	9b01      	ldr	r3, [sp, #4]
 800b078:	6163      	str	r3, [r4, #20]
 800b07a:	3020      	adds	r0, #32
 800b07c:	2201      	movs	r2, #1
 800b07e:	e7e5      	b.n	800b04c <__d2b+0x60>
 800b080:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b084:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b088:	6038      	str	r0, [r7, #0]
 800b08a:	6918      	ldr	r0, [r3, #16]
 800b08c:	f7ff fcc4 	bl	800aa18 <__hi0bits>
 800b090:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b094:	e7e2      	b.n	800b05c <__d2b+0x70>
 800b096:	bf00      	nop
 800b098:	0800f7e9 	.word	0x0800f7e9
 800b09c:	0800f7fa 	.word	0x0800f7fa

0800b0a0 <__ratio>:
 800b0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	4688      	mov	r8, r1
 800b0a6:	4669      	mov	r1, sp
 800b0a8:	4681      	mov	r9, r0
 800b0aa:	f7ff ff55 	bl	800af58 <__b2d>
 800b0ae:	a901      	add	r1, sp, #4
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	ec55 4b10 	vmov	r4, r5, d0
 800b0b6:	f7ff ff4f 	bl	800af58 <__b2d>
 800b0ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b0c2:	eba3 0c02 	sub.w	ip, r3, r2
 800b0c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b0ca:	1a9b      	subs	r3, r3, r2
 800b0cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b0d0:	ec51 0b10 	vmov	r0, r1, d0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	bfd6      	itet	le
 800b0d8:	460a      	movle	r2, r1
 800b0da:	462a      	movgt	r2, r5
 800b0dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b0e0:	468b      	mov	fp, r1
 800b0e2:	462f      	mov	r7, r5
 800b0e4:	bfd4      	ite	le
 800b0e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b0ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	ee10 2a10 	vmov	r2, s0
 800b0f4:	465b      	mov	r3, fp
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	f7f5 fba8 	bl	800084c <__aeabi_ddiv>
 800b0fc:	ec41 0b10 	vmov	d0, r0, r1
 800b100:	b003      	add	sp, #12
 800b102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b106 <__copybits>:
 800b106:	3901      	subs	r1, #1
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	1149      	asrs	r1, r1, #5
 800b10c:	6914      	ldr	r4, [r2, #16]
 800b10e:	3101      	adds	r1, #1
 800b110:	f102 0314 	add.w	r3, r2, #20
 800b114:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b118:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b11c:	1f05      	subs	r5, r0, #4
 800b11e:	42a3      	cmp	r3, r4
 800b120:	d30c      	bcc.n	800b13c <__copybits+0x36>
 800b122:	1aa3      	subs	r3, r4, r2
 800b124:	3b11      	subs	r3, #17
 800b126:	f023 0303 	bic.w	r3, r3, #3
 800b12a:	3211      	adds	r2, #17
 800b12c:	42a2      	cmp	r2, r4
 800b12e:	bf88      	it	hi
 800b130:	2300      	movhi	r3, #0
 800b132:	4418      	add	r0, r3
 800b134:	2300      	movs	r3, #0
 800b136:	4288      	cmp	r0, r1
 800b138:	d305      	bcc.n	800b146 <__copybits+0x40>
 800b13a:	bd70      	pop	{r4, r5, r6, pc}
 800b13c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b140:	f845 6f04 	str.w	r6, [r5, #4]!
 800b144:	e7eb      	b.n	800b11e <__copybits+0x18>
 800b146:	f840 3b04 	str.w	r3, [r0], #4
 800b14a:	e7f4      	b.n	800b136 <__copybits+0x30>

0800b14c <__any_on>:
 800b14c:	f100 0214 	add.w	r2, r0, #20
 800b150:	6900      	ldr	r0, [r0, #16]
 800b152:	114b      	asrs	r3, r1, #5
 800b154:	4298      	cmp	r0, r3
 800b156:	b510      	push	{r4, lr}
 800b158:	db11      	blt.n	800b17e <__any_on+0x32>
 800b15a:	dd0a      	ble.n	800b172 <__any_on+0x26>
 800b15c:	f011 011f 	ands.w	r1, r1, #31
 800b160:	d007      	beq.n	800b172 <__any_on+0x26>
 800b162:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b166:	fa24 f001 	lsr.w	r0, r4, r1
 800b16a:	fa00 f101 	lsl.w	r1, r0, r1
 800b16e:	428c      	cmp	r4, r1
 800b170:	d10b      	bne.n	800b18a <__any_on+0x3e>
 800b172:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b176:	4293      	cmp	r3, r2
 800b178:	d803      	bhi.n	800b182 <__any_on+0x36>
 800b17a:	2000      	movs	r0, #0
 800b17c:	bd10      	pop	{r4, pc}
 800b17e:	4603      	mov	r3, r0
 800b180:	e7f7      	b.n	800b172 <__any_on+0x26>
 800b182:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b186:	2900      	cmp	r1, #0
 800b188:	d0f5      	beq.n	800b176 <__any_on+0x2a>
 800b18a:	2001      	movs	r0, #1
 800b18c:	e7f6      	b.n	800b17c <__any_on+0x30>

0800b18e <sulp>:
 800b18e:	b570      	push	{r4, r5, r6, lr}
 800b190:	4604      	mov	r4, r0
 800b192:	460d      	mov	r5, r1
 800b194:	ec45 4b10 	vmov	d0, r4, r5
 800b198:	4616      	mov	r6, r2
 800b19a:	f7ff feb7 	bl	800af0c <__ulp>
 800b19e:	ec51 0b10 	vmov	r0, r1, d0
 800b1a2:	b17e      	cbz	r6, 800b1c4 <sulp+0x36>
 800b1a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b1a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	dd09      	ble.n	800b1c4 <sulp+0x36>
 800b1b0:	051b      	lsls	r3, r3, #20
 800b1b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b1b6:	2400      	movs	r4, #0
 800b1b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b1bc:	4622      	mov	r2, r4
 800b1be:	462b      	mov	r3, r5
 800b1c0:	f7f5 fa1a 	bl	80005f8 <__aeabi_dmul>
 800b1c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1c8 <_strtod_l>:
 800b1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	ed2d 8b02 	vpush	{d8}
 800b1d0:	b09b      	sub	sp, #108	; 0x6c
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	9213      	str	r2, [sp, #76]	; 0x4c
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	9216      	str	r2, [sp, #88]	; 0x58
 800b1da:	460d      	mov	r5, r1
 800b1dc:	f04f 0800 	mov.w	r8, #0
 800b1e0:	f04f 0900 	mov.w	r9, #0
 800b1e4:	460a      	mov	r2, r1
 800b1e6:	9215      	str	r2, [sp, #84]	; 0x54
 800b1e8:	7811      	ldrb	r1, [r2, #0]
 800b1ea:	292b      	cmp	r1, #43	; 0x2b
 800b1ec:	d04c      	beq.n	800b288 <_strtod_l+0xc0>
 800b1ee:	d83a      	bhi.n	800b266 <_strtod_l+0x9e>
 800b1f0:	290d      	cmp	r1, #13
 800b1f2:	d834      	bhi.n	800b25e <_strtod_l+0x96>
 800b1f4:	2908      	cmp	r1, #8
 800b1f6:	d834      	bhi.n	800b262 <_strtod_l+0x9a>
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	d03d      	beq.n	800b278 <_strtod_l+0xb0>
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	920a      	str	r2, [sp, #40]	; 0x28
 800b200:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b202:	7832      	ldrb	r2, [r6, #0]
 800b204:	2a30      	cmp	r2, #48	; 0x30
 800b206:	f040 80b4 	bne.w	800b372 <_strtod_l+0x1aa>
 800b20a:	7872      	ldrb	r2, [r6, #1]
 800b20c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b210:	2a58      	cmp	r2, #88	; 0x58
 800b212:	d170      	bne.n	800b2f6 <_strtod_l+0x12e>
 800b214:	9302      	str	r3, [sp, #8]
 800b216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b218:	9301      	str	r3, [sp, #4]
 800b21a:	ab16      	add	r3, sp, #88	; 0x58
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	4a8e      	ldr	r2, [pc, #568]	; (800b458 <_strtod_l+0x290>)
 800b220:	ab17      	add	r3, sp, #92	; 0x5c
 800b222:	a915      	add	r1, sp, #84	; 0x54
 800b224:	4620      	mov	r0, r4
 800b226:	f001 f91f 	bl	800c468 <__gethex>
 800b22a:	f010 070f 	ands.w	r7, r0, #15
 800b22e:	4605      	mov	r5, r0
 800b230:	d005      	beq.n	800b23e <_strtod_l+0x76>
 800b232:	2f06      	cmp	r7, #6
 800b234:	d12a      	bne.n	800b28c <_strtod_l+0xc4>
 800b236:	3601      	adds	r6, #1
 800b238:	2300      	movs	r3, #0
 800b23a:	9615      	str	r6, [sp, #84]	; 0x54
 800b23c:	930a      	str	r3, [sp, #40]	; 0x28
 800b23e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b240:	2b00      	cmp	r3, #0
 800b242:	f040 857f 	bne.w	800bd44 <_strtod_l+0xb7c>
 800b246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b248:	b1db      	cbz	r3, 800b282 <_strtod_l+0xba>
 800b24a:	4642      	mov	r2, r8
 800b24c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b250:	ec43 2b10 	vmov	d0, r2, r3
 800b254:	b01b      	add	sp, #108	; 0x6c
 800b256:	ecbd 8b02 	vpop	{d8}
 800b25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25e:	2920      	cmp	r1, #32
 800b260:	d1cc      	bne.n	800b1fc <_strtod_l+0x34>
 800b262:	3201      	adds	r2, #1
 800b264:	e7bf      	b.n	800b1e6 <_strtod_l+0x1e>
 800b266:	292d      	cmp	r1, #45	; 0x2d
 800b268:	d1c8      	bne.n	800b1fc <_strtod_l+0x34>
 800b26a:	2101      	movs	r1, #1
 800b26c:	910a      	str	r1, [sp, #40]	; 0x28
 800b26e:	1c51      	adds	r1, r2, #1
 800b270:	9115      	str	r1, [sp, #84]	; 0x54
 800b272:	7852      	ldrb	r2, [r2, #1]
 800b274:	2a00      	cmp	r2, #0
 800b276:	d1c3      	bne.n	800b200 <_strtod_l+0x38>
 800b278:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b27a:	9515      	str	r5, [sp, #84]	; 0x54
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f040 855f 	bne.w	800bd40 <_strtod_l+0xb78>
 800b282:	4642      	mov	r2, r8
 800b284:	464b      	mov	r3, r9
 800b286:	e7e3      	b.n	800b250 <_strtod_l+0x88>
 800b288:	2100      	movs	r1, #0
 800b28a:	e7ef      	b.n	800b26c <_strtod_l+0xa4>
 800b28c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b28e:	b13a      	cbz	r2, 800b2a0 <_strtod_l+0xd8>
 800b290:	2135      	movs	r1, #53	; 0x35
 800b292:	a818      	add	r0, sp, #96	; 0x60
 800b294:	f7ff ff37 	bl	800b106 <__copybits>
 800b298:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b29a:	4620      	mov	r0, r4
 800b29c:	f7ff fb0a 	bl	800a8b4 <_Bfree>
 800b2a0:	3f01      	subs	r7, #1
 800b2a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2a4:	2f04      	cmp	r7, #4
 800b2a6:	d806      	bhi.n	800b2b6 <_strtod_l+0xee>
 800b2a8:	e8df f007 	tbb	[pc, r7]
 800b2ac:	201d0314 	.word	0x201d0314
 800b2b0:	14          	.byte	0x14
 800b2b1:	00          	.byte	0x00
 800b2b2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b2b6:	05e9      	lsls	r1, r5, #23
 800b2b8:	bf48      	it	mi
 800b2ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b2be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2c2:	0d1b      	lsrs	r3, r3, #20
 800b2c4:	051b      	lsls	r3, r3, #20
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1b9      	bne.n	800b23e <_strtod_l+0x76>
 800b2ca:	f7fe fbab 	bl	8009a24 <__errno>
 800b2ce:	2322      	movs	r3, #34	; 0x22
 800b2d0:	6003      	str	r3, [r0, #0]
 800b2d2:	e7b4      	b.n	800b23e <_strtod_l+0x76>
 800b2d4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b2d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b2dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b2e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b2e4:	e7e7      	b.n	800b2b6 <_strtod_l+0xee>
 800b2e6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b460 <_strtod_l+0x298>
 800b2ea:	e7e4      	b.n	800b2b6 <_strtod_l+0xee>
 800b2ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b2f0:	f04f 38ff 	mov.w	r8, #4294967295
 800b2f4:	e7df      	b.n	800b2b6 <_strtod_l+0xee>
 800b2f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2f8:	1c5a      	adds	r2, r3, #1
 800b2fa:	9215      	str	r2, [sp, #84]	; 0x54
 800b2fc:	785b      	ldrb	r3, [r3, #1]
 800b2fe:	2b30      	cmp	r3, #48	; 0x30
 800b300:	d0f9      	beq.n	800b2f6 <_strtod_l+0x12e>
 800b302:	2b00      	cmp	r3, #0
 800b304:	d09b      	beq.n	800b23e <_strtod_l+0x76>
 800b306:	2301      	movs	r3, #1
 800b308:	f04f 0a00 	mov.w	sl, #0
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b310:	930b      	str	r3, [sp, #44]	; 0x2c
 800b312:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b316:	46d3      	mov	fp, sl
 800b318:	220a      	movs	r2, #10
 800b31a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b31c:	7806      	ldrb	r6, [r0, #0]
 800b31e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b322:	b2d9      	uxtb	r1, r3
 800b324:	2909      	cmp	r1, #9
 800b326:	d926      	bls.n	800b376 <_strtod_l+0x1ae>
 800b328:	494c      	ldr	r1, [pc, #304]	; (800b45c <_strtod_l+0x294>)
 800b32a:	2201      	movs	r2, #1
 800b32c:	f000 ffe6 	bl	800c2fc <strncmp>
 800b330:	2800      	cmp	r0, #0
 800b332:	d030      	beq.n	800b396 <_strtod_l+0x1ce>
 800b334:	2000      	movs	r0, #0
 800b336:	4632      	mov	r2, r6
 800b338:	9005      	str	r0, [sp, #20]
 800b33a:	465e      	mov	r6, fp
 800b33c:	4603      	mov	r3, r0
 800b33e:	2a65      	cmp	r2, #101	; 0x65
 800b340:	d001      	beq.n	800b346 <_strtod_l+0x17e>
 800b342:	2a45      	cmp	r2, #69	; 0x45
 800b344:	d113      	bne.n	800b36e <_strtod_l+0x1a6>
 800b346:	b91e      	cbnz	r6, 800b350 <_strtod_l+0x188>
 800b348:	9a04      	ldr	r2, [sp, #16]
 800b34a:	4302      	orrs	r2, r0
 800b34c:	d094      	beq.n	800b278 <_strtod_l+0xb0>
 800b34e:	2600      	movs	r6, #0
 800b350:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b352:	1c6a      	adds	r2, r5, #1
 800b354:	9215      	str	r2, [sp, #84]	; 0x54
 800b356:	786a      	ldrb	r2, [r5, #1]
 800b358:	2a2b      	cmp	r2, #43	; 0x2b
 800b35a:	d074      	beq.n	800b446 <_strtod_l+0x27e>
 800b35c:	2a2d      	cmp	r2, #45	; 0x2d
 800b35e:	d078      	beq.n	800b452 <_strtod_l+0x28a>
 800b360:	f04f 0c00 	mov.w	ip, #0
 800b364:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b368:	2909      	cmp	r1, #9
 800b36a:	d97f      	bls.n	800b46c <_strtod_l+0x2a4>
 800b36c:	9515      	str	r5, [sp, #84]	; 0x54
 800b36e:	2700      	movs	r7, #0
 800b370:	e09e      	b.n	800b4b0 <_strtod_l+0x2e8>
 800b372:	2300      	movs	r3, #0
 800b374:	e7c8      	b.n	800b308 <_strtod_l+0x140>
 800b376:	f1bb 0f08 	cmp.w	fp, #8
 800b37a:	bfd8      	it	le
 800b37c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b37e:	f100 0001 	add.w	r0, r0, #1
 800b382:	bfda      	itte	le
 800b384:	fb02 3301 	mlale	r3, r2, r1, r3
 800b388:	9309      	strle	r3, [sp, #36]	; 0x24
 800b38a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b38e:	f10b 0b01 	add.w	fp, fp, #1
 800b392:	9015      	str	r0, [sp, #84]	; 0x54
 800b394:	e7c1      	b.n	800b31a <_strtod_l+0x152>
 800b396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	9215      	str	r2, [sp, #84]	; 0x54
 800b39c:	785a      	ldrb	r2, [r3, #1]
 800b39e:	f1bb 0f00 	cmp.w	fp, #0
 800b3a2:	d037      	beq.n	800b414 <_strtod_l+0x24c>
 800b3a4:	9005      	str	r0, [sp, #20]
 800b3a6:	465e      	mov	r6, fp
 800b3a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b3ac:	2b09      	cmp	r3, #9
 800b3ae:	d912      	bls.n	800b3d6 <_strtod_l+0x20e>
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e7c4      	b.n	800b33e <_strtod_l+0x176>
 800b3b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	9215      	str	r2, [sp, #84]	; 0x54
 800b3ba:	785a      	ldrb	r2, [r3, #1]
 800b3bc:	3001      	adds	r0, #1
 800b3be:	2a30      	cmp	r2, #48	; 0x30
 800b3c0:	d0f8      	beq.n	800b3b4 <_strtod_l+0x1ec>
 800b3c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b3c6:	2b08      	cmp	r3, #8
 800b3c8:	f200 84c1 	bhi.w	800bd4e <_strtod_l+0xb86>
 800b3cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3ce:	9005      	str	r0, [sp, #20]
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	3a30      	subs	r2, #48	; 0x30
 800b3d8:	f100 0301 	add.w	r3, r0, #1
 800b3dc:	d014      	beq.n	800b408 <_strtod_l+0x240>
 800b3de:	9905      	ldr	r1, [sp, #20]
 800b3e0:	4419      	add	r1, r3
 800b3e2:	9105      	str	r1, [sp, #20]
 800b3e4:	4633      	mov	r3, r6
 800b3e6:	eb00 0c06 	add.w	ip, r0, r6
 800b3ea:	210a      	movs	r1, #10
 800b3ec:	4563      	cmp	r3, ip
 800b3ee:	d113      	bne.n	800b418 <_strtod_l+0x250>
 800b3f0:	1833      	adds	r3, r6, r0
 800b3f2:	2b08      	cmp	r3, #8
 800b3f4:	f106 0601 	add.w	r6, r6, #1
 800b3f8:	4406      	add	r6, r0
 800b3fa:	dc1a      	bgt.n	800b432 <_strtod_l+0x26a>
 800b3fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3fe:	230a      	movs	r3, #10
 800b400:	fb03 2301 	mla	r3, r3, r1, r2
 800b404:	9309      	str	r3, [sp, #36]	; 0x24
 800b406:	2300      	movs	r3, #0
 800b408:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b40a:	1c51      	adds	r1, r2, #1
 800b40c:	9115      	str	r1, [sp, #84]	; 0x54
 800b40e:	7852      	ldrb	r2, [r2, #1]
 800b410:	4618      	mov	r0, r3
 800b412:	e7c9      	b.n	800b3a8 <_strtod_l+0x1e0>
 800b414:	4658      	mov	r0, fp
 800b416:	e7d2      	b.n	800b3be <_strtod_l+0x1f6>
 800b418:	2b08      	cmp	r3, #8
 800b41a:	f103 0301 	add.w	r3, r3, #1
 800b41e:	dc03      	bgt.n	800b428 <_strtod_l+0x260>
 800b420:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b422:	434f      	muls	r7, r1
 800b424:	9709      	str	r7, [sp, #36]	; 0x24
 800b426:	e7e1      	b.n	800b3ec <_strtod_l+0x224>
 800b428:	2b10      	cmp	r3, #16
 800b42a:	bfd8      	it	le
 800b42c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b430:	e7dc      	b.n	800b3ec <_strtod_l+0x224>
 800b432:	2e10      	cmp	r6, #16
 800b434:	bfdc      	itt	le
 800b436:	230a      	movle	r3, #10
 800b438:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b43c:	e7e3      	b.n	800b406 <_strtod_l+0x23e>
 800b43e:	2300      	movs	r3, #0
 800b440:	9305      	str	r3, [sp, #20]
 800b442:	2301      	movs	r3, #1
 800b444:	e780      	b.n	800b348 <_strtod_l+0x180>
 800b446:	f04f 0c00 	mov.w	ip, #0
 800b44a:	1caa      	adds	r2, r5, #2
 800b44c:	9215      	str	r2, [sp, #84]	; 0x54
 800b44e:	78aa      	ldrb	r2, [r5, #2]
 800b450:	e788      	b.n	800b364 <_strtod_l+0x19c>
 800b452:	f04f 0c01 	mov.w	ip, #1
 800b456:	e7f8      	b.n	800b44a <_strtod_l+0x282>
 800b458:	0800f958 	.word	0x0800f958
 800b45c:	0800f954 	.word	0x0800f954
 800b460:	7ff00000 	.word	0x7ff00000
 800b464:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b466:	1c51      	adds	r1, r2, #1
 800b468:	9115      	str	r1, [sp, #84]	; 0x54
 800b46a:	7852      	ldrb	r2, [r2, #1]
 800b46c:	2a30      	cmp	r2, #48	; 0x30
 800b46e:	d0f9      	beq.n	800b464 <_strtod_l+0x29c>
 800b470:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b474:	2908      	cmp	r1, #8
 800b476:	f63f af7a 	bhi.w	800b36e <_strtod_l+0x1a6>
 800b47a:	3a30      	subs	r2, #48	; 0x30
 800b47c:	9208      	str	r2, [sp, #32]
 800b47e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b480:	920c      	str	r2, [sp, #48]	; 0x30
 800b482:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b484:	1c57      	adds	r7, r2, #1
 800b486:	9715      	str	r7, [sp, #84]	; 0x54
 800b488:	7852      	ldrb	r2, [r2, #1]
 800b48a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b48e:	f1be 0f09 	cmp.w	lr, #9
 800b492:	d938      	bls.n	800b506 <_strtod_l+0x33e>
 800b494:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b496:	1a7f      	subs	r7, r7, r1
 800b498:	2f08      	cmp	r7, #8
 800b49a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b49e:	dc03      	bgt.n	800b4a8 <_strtod_l+0x2e0>
 800b4a0:	9908      	ldr	r1, [sp, #32]
 800b4a2:	428f      	cmp	r7, r1
 800b4a4:	bfa8      	it	ge
 800b4a6:	460f      	movge	r7, r1
 800b4a8:	f1bc 0f00 	cmp.w	ip, #0
 800b4ac:	d000      	beq.n	800b4b0 <_strtod_l+0x2e8>
 800b4ae:	427f      	negs	r7, r7
 800b4b0:	2e00      	cmp	r6, #0
 800b4b2:	d14f      	bne.n	800b554 <_strtod_l+0x38c>
 800b4b4:	9904      	ldr	r1, [sp, #16]
 800b4b6:	4301      	orrs	r1, r0
 800b4b8:	f47f aec1 	bne.w	800b23e <_strtod_l+0x76>
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f47f aedb 	bne.w	800b278 <_strtod_l+0xb0>
 800b4c2:	2a69      	cmp	r2, #105	; 0x69
 800b4c4:	d029      	beq.n	800b51a <_strtod_l+0x352>
 800b4c6:	dc26      	bgt.n	800b516 <_strtod_l+0x34e>
 800b4c8:	2a49      	cmp	r2, #73	; 0x49
 800b4ca:	d026      	beq.n	800b51a <_strtod_l+0x352>
 800b4cc:	2a4e      	cmp	r2, #78	; 0x4e
 800b4ce:	f47f aed3 	bne.w	800b278 <_strtod_l+0xb0>
 800b4d2:	499b      	ldr	r1, [pc, #620]	; (800b740 <_strtod_l+0x578>)
 800b4d4:	a815      	add	r0, sp, #84	; 0x54
 800b4d6:	f001 fa07 	bl	800c8e8 <__match>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	f43f aecc 	beq.w	800b278 <_strtod_l+0xb0>
 800b4e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b28      	cmp	r3, #40	; 0x28
 800b4e6:	d12f      	bne.n	800b548 <_strtod_l+0x380>
 800b4e8:	4996      	ldr	r1, [pc, #600]	; (800b744 <_strtod_l+0x57c>)
 800b4ea:	aa18      	add	r2, sp, #96	; 0x60
 800b4ec:	a815      	add	r0, sp, #84	; 0x54
 800b4ee:	f001 fa0f 	bl	800c910 <__hexnan>
 800b4f2:	2805      	cmp	r0, #5
 800b4f4:	d128      	bne.n	800b548 <_strtod_l+0x380>
 800b4f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b4f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b4fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b500:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b504:	e69b      	b.n	800b23e <_strtod_l+0x76>
 800b506:	9f08      	ldr	r7, [sp, #32]
 800b508:	210a      	movs	r1, #10
 800b50a:	fb01 2107 	mla	r1, r1, r7, r2
 800b50e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b512:	9208      	str	r2, [sp, #32]
 800b514:	e7b5      	b.n	800b482 <_strtod_l+0x2ba>
 800b516:	2a6e      	cmp	r2, #110	; 0x6e
 800b518:	e7d9      	b.n	800b4ce <_strtod_l+0x306>
 800b51a:	498b      	ldr	r1, [pc, #556]	; (800b748 <_strtod_l+0x580>)
 800b51c:	a815      	add	r0, sp, #84	; 0x54
 800b51e:	f001 f9e3 	bl	800c8e8 <__match>
 800b522:	2800      	cmp	r0, #0
 800b524:	f43f aea8 	beq.w	800b278 <_strtod_l+0xb0>
 800b528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b52a:	4988      	ldr	r1, [pc, #544]	; (800b74c <_strtod_l+0x584>)
 800b52c:	3b01      	subs	r3, #1
 800b52e:	a815      	add	r0, sp, #84	; 0x54
 800b530:	9315      	str	r3, [sp, #84]	; 0x54
 800b532:	f001 f9d9 	bl	800c8e8 <__match>
 800b536:	b910      	cbnz	r0, 800b53e <_strtod_l+0x376>
 800b538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b53a:	3301      	adds	r3, #1
 800b53c:	9315      	str	r3, [sp, #84]	; 0x54
 800b53e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b75c <_strtod_l+0x594>
 800b542:	f04f 0800 	mov.w	r8, #0
 800b546:	e67a      	b.n	800b23e <_strtod_l+0x76>
 800b548:	4881      	ldr	r0, [pc, #516]	; (800b750 <_strtod_l+0x588>)
 800b54a:	f000 fee9 	bl	800c320 <nan>
 800b54e:	ec59 8b10 	vmov	r8, r9, d0
 800b552:	e674      	b.n	800b23e <_strtod_l+0x76>
 800b554:	9b05      	ldr	r3, [sp, #20]
 800b556:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b558:	1afb      	subs	r3, r7, r3
 800b55a:	f1bb 0f00 	cmp.w	fp, #0
 800b55e:	bf08      	it	eq
 800b560:	46b3      	moveq	fp, r6
 800b562:	2e10      	cmp	r6, #16
 800b564:	9308      	str	r3, [sp, #32]
 800b566:	4635      	mov	r5, r6
 800b568:	bfa8      	it	ge
 800b56a:	2510      	movge	r5, #16
 800b56c:	f7f4 ffca 	bl	8000504 <__aeabi_ui2d>
 800b570:	2e09      	cmp	r6, #9
 800b572:	4680      	mov	r8, r0
 800b574:	4689      	mov	r9, r1
 800b576:	dd13      	ble.n	800b5a0 <_strtod_l+0x3d8>
 800b578:	4b76      	ldr	r3, [pc, #472]	; (800b754 <_strtod_l+0x58c>)
 800b57a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b57e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b582:	f7f5 f839 	bl	80005f8 <__aeabi_dmul>
 800b586:	4680      	mov	r8, r0
 800b588:	4650      	mov	r0, sl
 800b58a:	4689      	mov	r9, r1
 800b58c:	f7f4 ffba 	bl	8000504 <__aeabi_ui2d>
 800b590:	4602      	mov	r2, r0
 800b592:	460b      	mov	r3, r1
 800b594:	4640      	mov	r0, r8
 800b596:	4649      	mov	r1, r9
 800b598:	f7f4 fe78 	bl	800028c <__adddf3>
 800b59c:	4680      	mov	r8, r0
 800b59e:	4689      	mov	r9, r1
 800b5a0:	2e0f      	cmp	r6, #15
 800b5a2:	dc38      	bgt.n	800b616 <_strtod_l+0x44e>
 800b5a4:	9b08      	ldr	r3, [sp, #32]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f43f ae49 	beq.w	800b23e <_strtod_l+0x76>
 800b5ac:	dd24      	ble.n	800b5f8 <_strtod_l+0x430>
 800b5ae:	2b16      	cmp	r3, #22
 800b5b0:	dc0b      	bgt.n	800b5ca <_strtod_l+0x402>
 800b5b2:	4968      	ldr	r1, [pc, #416]	; (800b754 <_strtod_l+0x58c>)
 800b5b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b5b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5bc:	4642      	mov	r2, r8
 800b5be:	464b      	mov	r3, r9
 800b5c0:	f7f5 f81a 	bl	80005f8 <__aeabi_dmul>
 800b5c4:	4680      	mov	r8, r0
 800b5c6:	4689      	mov	r9, r1
 800b5c8:	e639      	b.n	800b23e <_strtod_l+0x76>
 800b5ca:	9a08      	ldr	r2, [sp, #32]
 800b5cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	db20      	blt.n	800b616 <_strtod_l+0x44e>
 800b5d4:	4c5f      	ldr	r4, [pc, #380]	; (800b754 <_strtod_l+0x58c>)
 800b5d6:	f1c6 060f 	rsb	r6, r6, #15
 800b5da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b5de:	4642      	mov	r2, r8
 800b5e0:	464b      	mov	r3, r9
 800b5e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5e6:	f7f5 f807 	bl	80005f8 <__aeabi_dmul>
 800b5ea:	9b08      	ldr	r3, [sp, #32]
 800b5ec:	1b9e      	subs	r6, r3, r6
 800b5ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b5f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b5f6:	e7e3      	b.n	800b5c0 <_strtod_l+0x3f8>
 800b5f8:	9b08      	ldr	r3, [sp, #32]
 800b5fa:	3316      	adds	r3, #22
 800b5fc:	db0b      	blt.n	800b616 <_strtod_l+0x44e>
 800b5fe:	9b05      	ldr	r3, [sp, #20]
 800b600:	1bdf      	subs	r7, r3, r7
 800b602:	4b54      	ldr	r3, [pc, #336]	; (800b754 <_strtod_l+0x58c>)
 800b604:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b60c:	4640      	mov	r0, r8
 800b60e:	4649      	mov	r1, r9
 800b610:	f7f5 f91c 	bl	800084c <__aeabi_ddiv>
 800b614:	e7d6      	b.n	800b5c4 <_strtod_l+0x3fc>
 800b616:	9b08      	ldr	r3, [sp, #32]
 800b618:	1b75      	subs	r5, r6, r5
 800b61a:	441d      	add	r5, r3
 800b61c:	2d00      	cmp	r5, #0
 800b61e:	dd70      	ble.n	800b702 <_strtod_l+0x53a>
 800b620:	f015 030f 	ands.w	r3, r5, #15
 800b624:	d00a      	beq.n	800b63c <_strtod_l+0x474>
 800b626:	494b      	ldr	r1, [pc, #300]	; (800b754 <_strtod_l+0x58c>)
 800b628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b62c:	4642      	mov	r2, r8
 800b62e:	464b      	mov	r3, r9
 800b630:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b634:	f7f4 ffe0 	bl	80005f8 <__aeabi_dmul>
 800b638:	4680      	mov	r8, r0
 800b63a:	4689      	mov	r9, r1
 800b63c:	f035 050f 	bics.w	r5, r5, #15
 800b640:	d04d      	beq.n	800b6de <_strtod_l+0x516>
 800b642:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b646:	dd22      	ble.n	800b68e <_strtod_l+0x4c6>
 800b648:	2500      	movs	r5, #0
 800b64a:	46ab      	mov	fp, r5
 800b64c:	9509      	str	r5, [sp, #36]	; 0x24
 800b64e:	9505      	str	r5, [sp, #20]
 800b650:	2322      	movs	r3, #34	; 0x22
 800b652:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b75c <_strtod_l+0x594>
 800b656:	6023      	str	r3, [r4, #0]
 800b658:	f04f 0800 	mov.w	r8, #0
 800b65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f43f aded 	beq.w	800b23e <_strtod_l+0x76>
 800b664:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b666:	4620      	mov	r0, r4
 800b668:	f7ff f924 	bl	800a8b4 <_Bfree>
 800b66c:	9905      	ldr	r1, [sp, #20]
 800b66e:	4620      	mov	r0, r4
 800b670:	f7ff f920 	bl	800a8b4 <_Bfree>
 800b674:	4659      	mov	r1, fp
 800b676:	4620      	mov	r0, r4
 800b678:	f7ff f91c 	bl	800a8b4 <_Bfree>
 800b67c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b67e:	4620      	mov	r0, r4
 800b680:	f7ff f918 	bl	800a8b4 <_Bfree>
 800b684:	4629      	mov	r1, r5
 800b686:	4620      	mov	r0, r4
 800b688:	f7ff f914 	bl	800a8b4 <_Bfree>
 800b68c:	e5d7      	b.n	800b23e <_strtod_l+0x76>
 800b68e:	4b32      	ldr	r3, [pc, #200]	; (800b758 <_strtod_l+0x590>)
 800b690:	9304      	str	r3, [sp, #16]
 800b692:	2300      	movs	r3, #0
 800b694:	112d      	asrs	r5, r5, #4
 800b696:	4640      	mov	r0, r8
 800b698:	4649      	mov	r1, r9
 800b69a:	469a      	mov	sl, r3
 800b69c:	2d01      	cmp	r5, #1
 800b69e:	dc21      	bgt.n	800b6e4 <_strtod_l+0x51c>
 800b6a0:	b10b      	cbz	r3, 800b6a6 <_strtod_l+0x4de>
 800b6a2:	4680      	mov	r8, r0
 800b6a4:	4689      	mov	r9, r1
 800b6a6:	492c      	ldr	r1, [pc, #176]	; (800b758 <_strtod_l+0x590>)
 800b6a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b6ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b6b0:	4642      	mov	r2, r8
 800b6b2:	464b      	mov	r3, r9
 800b6b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6b8:	f7f4 ff9e 	bl	80005f8 <__aeabi_dmul>
 800b6bc:	4b27      	ldr	r3, [pc, #156]	; (800b75c <_strtod_l+0x594>)
 800b6be:	460a      	mov	r2, r1
 800b6c0:	400b      	ands	r3, r1
 800b6c2:	4927      	ldr	r1, [pc, #156]	; (800b760 <_strtod_l+0x598>)
 800b6c4:	428b      	cmp	r3, r1
 800b6c6:	4680      	mov	r8, r0
 800b6c8:	d8be      	bhi.n	800b648 <_strtod_l+0x480>
 800b6ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b6ce:	428b      	cmp	r3, r1
 800b6d0:	bf86      	itte	hi
 800b6d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b764 <_strtod_l+0x59c>
 800b6d6:	f04f 38ff 	movhi.w	r8, #4294967295
 800b6da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b6de:	2300      	movs	r3, #0
 800b6e0:	9304      	str	r3, [sp, #16]
 800b6e2:	e07b      	b.n	800b7dc <_strtod_l+0x614>
 800b6e4:	07ea      	lsls	r2, r5, #31
 800b6e6:	d505      	bpl.n	800b6f4 <_strtod_l+0x52c>
 800b6e8:	9b04      	ldr	r3, [sp, #16]
 800b6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ee:	f7f4 ff83 	bl	80005f8 <__aeabi_dmul>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	9a04      	ldr	r2, [sp, #16]
 800b6f6:	3208      	adds	r2, #8
 800b6f8:	f10a 0a01 	add.w	sl, sl, #1
 800b6fc:	106d      	asrs	r5, r5, #1
 800b6fe:	9204      	str	r2, [sp, #16]
 800b700:	e7cc      	b.n	800b69c <_strtod_l+0x4d4>
 800b702:	d0ec      	beq.n	800b6de <_strtod_l+0x516>
 800b704:	426d      	negs	r5, r5
 800b706:	f015 020f 	ands.w	r2, r5, #15
 800b70a:	d00a      	beq.n	800b722 <_strtod_l+0x55a>
 800b70c:	4b11      	ldr	r3, [pc, #68]	; (800b754 <_strtod_l+0x58c>)
 800b70e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b712:	4640      	mov	r0, r8
 800b714:	4649      	mov	r1, r9
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	f7f5 f897 	bl	800084c <__aeabi_ddiv>
 800b71e:	4680      	mov	r8, r0
 800b720:	4689      	mov	r9, r1
 800b722:	112d      	asrs	r5, r5, #4
 800b724:	d0db      	beq.n	800b6de <_strtod_l+0x516>
 800b726:	2d1f      	cmp	r5, #31
 800b728:	dd1e      	ble.n	800b768 <_strtod_l+0x5a0>
 800b72a:	2500      	movs	r5, #0
 800b72c:	46ab      	mov	fp, r5
 800b72e:	9509      	str	r5, [sp, #36]	; 0x24
 800b730:	9505      	str	r5, [sp, #20]
 800b732:	2322      	movs	r3, #34	; 0x22
 800b734:	f04f 0800 	mov.w	r8, #0
 800b738:	f04f 0900 	mov.w	r9, #0
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	e78d      	b.n	800b65c <_strtod_l+0x494>
 800b740:	0800f741 	.word	0x0800f741
 800b744:	0800f96c 	.word	0x0800f96c
 800b748:	0800f739 	.word	0x0800f739
 800b74c:	0800f770 	.word	0x0800f770
 800b750:	0800fafd 	.word	0x0800fafd
 800b754:	0800f880 	.word	0x0800f880
 800b758:	0800f858 	.word	0x0800f858
 800b75c:	7ff00000 	.word	0x7ff00000
 800b760:	7ca00000 	.word	0x7ca00000
 800b764:	7fefffff 	.word	0x7fefffff
 800b768:	f015 0310 	ands.w	r3, r5, #16
 800b76c:	bf18      	it	ne
 800b76e:	236a      	movne	r3, #106	; 0x6a
 800b770:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800bb14 <_strtod_l+0x94c>
 800b774:	9304      	str	r3, [sp, #16]
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	2300      	movs	r3, #0
 800b77c:	07ea      	lsls	r2, r5, #31
 800b77e:	d504      	bpl.n	800b78a <_strtod_l+0x5c2>
 800b780:	e9da 2300 	ldrd	r2, r3, [sl]
 800b784:	f7f4 ff38 	bl	80005f8 <__aeabi_dmul>
 800b788:	2301      	movs	r3, #1
 800b78a:	106d      	asrs	r5, r5, #1
 800b78c:	f10a 0a08 	add.w	sl, sl, #8
 800b790:	d1f4      	bne.n	800b77c <_strtod_l+0x5b4>
 800b792:	b10b      	cbz	r3, 800b798 <_strtod_l+0x5d0>
 800b794:	4680      	mov	r8, r0
 800b796:	4689      	mov	r9, r1
 800b798:	9b04      	ldr	r3, [sp, #16]
 800b79a:	b1bb      	cbz	r3, 800b7cc <_strtod_l+0x604>
 800b79c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b7a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	dd10      	ble.n	800b7cc <_strtod_l+0x604>
 800b7aa:	2b1f      	cmp	r3, #31
 800b7ac:	f340 811e 	ble.w	800b9ec <_strtod_l+0x824>
 800b7b0:	2b34      	cmp	r3, #52	; 0x34
 800b7b2:	bfde      	ittt	le
 800b7b4:	f04f 33ff 	movle.w	r3, #4294967295
 800b7b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b7bc:	4093      	lslle	r3, r2
 800b7be:	f04f 0800 	mov.w	r8, #0
 800b7c2:	bfcc      	ite	gt
 800b7c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b7c8:	ea03 0901 	andle.w	r9, r3, r1
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	4649      	mov	r1, r9
 800b7d4:	f7f5 f978 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d1a6      	bne.n	800b72a <_strtod_l+0x562>
 800b7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7e2:	4633      	mov	r3, r6
 800b7e4:	465a      	mov	r2, fp
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f7ff f8cc 	bl	800a984 <__s2b>
 800b7ec:	9009      	str	r0, [sp, #36]	; 0x24
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	f43f af2a 	beq.w	800b648 <_strtod_l+0x480>
 800b7f4:	9a08      	ldr	r2, [sp, #32]
 800b7f6:	9b05      	ldr	r3, [sp, #20]
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	eba3 0307 	sub.w	r3, r3, r7
 800b7fe:	bfa8      	it	ge
 800b800:	2300      	movge	r3, #0
 800b802:	930c      	str	r3, [sp, #48]	; 0x30
 800b804:	2500      	movs	r5, #0
 800b806:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b80a:	9312      	str	r3, [sp, #72]	; 0x48
 800b80c:	46ab      	mov	fp, r5
 800b80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b810:	4620      	mov	r0, r4
 800b812:	6859      	ldr	r1, [r3, #4]
 800b814:	f7ff f80e 	bl	800a834 <_Balloc>
 800b818:	9005      	str	r0, [sp, #20]
 800b81a:	2800      	cmp	r0, #0
 800b81c:	f43f af18 	beq.w	800b650 <_strtod_l+0x488>
 800b820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b822:	691a      	ldr	r2, [r3, #16]
 800b824:	3202      	adds	r2, #2
 800b826:	f103 010c 	add.w	r1, r3, #12
 800b82a:	0092      	lsls	r2, r2, #2
 800b82c:	300c      	adds	r0, #12
 800b82e:	f7fe f926 	bl	8009a7e <memcpy>
 800b832:	ec49 8b10 	vmov	d0, r8, r9
 800b836:	aa18      	add	r2, sp, #96	; 0x60
 800b838:	a917      	add	r1, sp, #92	; 0x5c
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7ff fbd6 	bl	800afec <__d2b>
 800b840:	ec49 8b18 	vmov	d8, r8, r9
 800b844:	9016      	str	r0, [sp, #88]	; 0x58
 800b846:	2800      	cmp	r0, #0
 800b848:	f43f af02 	beq.w	800b650 <_strtod_l+0x488>
 800b84c:	2101      	movs	r1, #1
 800b84e:	4620      	mov	r0, r4
 800b850:	f7ff f930 	bl	800aab4 <__i2b>
 800b854:	4683      	mov	fp, r0
 800b856:	2800      	cmp	r0, #0
 800b858:	f43f aefa 	beq.w	800b650 <_strtod_l+0x488>
 800b85c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b85e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b860:	2e00      	cmp	r6, #0
 800b862:	bfab      	itete	ge
 800b864:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b866:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b868:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b86a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b86e:	bfac      	ite	ge
 800b870:	eb06 0a03 	addge.w	sl, r6, r3
 800b874:	1b9f      	sublt	r7, r3, r6
 800b876:	9b04      	ldr	r3, [sp, #16]
 800b878:	1af6      	subs	r6, r6, r3
 800b87a:	4416      	add	r6, r2
 800b87c:	4ba0      	ldr	r3, [pc, #640]	; (800bb00 <_strtod_l+0x938>)
 800b87e:	3e01      	subs	r6, #1
 800b880:	429e      	cmp	r6, r3
 800b882:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b886:	f280 80c4 	bge.w	800ba12 <_strtod_l+0x84a>
 800b88a:	1b9b      	subs	r3, r3, r6
 800b88c:	2b1f      	cmp	r3, #31
 800b88e:	eba2 0203 	sub.w	r2, r2, r3
 800b892:	f04f 0101 	mov.w	r1, #1
 800b896:	f300 80b0 	bgt.w	800b9fa <_strtod_l+0x832>
 800b89a:	fa01 f303 	lsl.w	r3, r1, r3
 800b89e:	930e      	str	r3, [sp, #56]	; 0x38
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	930d      	str	r3, [sp, #52]	; 0x34
 800b8a4:	eb0a 0602 	add.w	r6, sl, r2
 800b8a8:	9b04      	ldr	r3, [sp, #16]
 800b8aa:	45b2      	cmp	sl, r6
 800b8ac:	4417      	add	r7, r2
 800b8ae:	441f      	add	r7, r3
 800b8b0:	4653      	mov	r3, sl
 800b8b2:	bfa8      	it	ge
 800b8b4:	4633      	movge	r3, r6
 800b8b6:	42bb      	cmp	r3, r7
 800b8b8:	bfa8      	it	ge
 800b8ba:	463b      	movge	r3, r7
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	bfc2      	ittt	gt
 800b8c0:	1af6      	subgt	r6, r6, r3
 800b8c2:	1aff      	subgt	r7, r7, r3
 800b8c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	dd17      	ble.n	800b8fe <_strtod_l+0x736>
 800b8ce:	4659      	mov	r1, fp
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f7ff f9ae 	bl	800ac34 <__pow5mult>
 800b8d8:	4683      	mov	fp, r0
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	f43f aeb8 	beq.w	800b650 <_strtod_l+0x488>
 800b8e0:	4601      	mov	r1, r0
 800b8e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f7ff f8fb 	bl	800aae0 <__multiply>
 800b8ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	f43f aeaf 	beq.w	800b650 <_strtod_l+0x488>
 800b8f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f7fe ffdd 	bl	800a8b4 <_Bfree>
 800b8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8fc:	9316      	str	r3, [sp, #88]	; 0x58
 800b8fe:	2e00      	cmp	r6, #0
 800b900:	f300 808c 	bgt.w	800ba1c <_strtod_l+0x854>
 800b904:	9b08      	ldr	r3, [sp, #32]
 800b906:	2b00      	cmp	r3, #0
 800b908:	dd08      	ble.n	800b91c <_strtod_l+0x754>
 800b90a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b90c:	9905      	ldr	r1, [sp, #20]
 800b90e:	4620      	mov	r0, r4
 800b910:	f7ff f990 	bl	800ac34 <__pow5mult>
 800b914:	9005      	str	r0, [sp, #20]
 800b916:	2800      	cmp	r0, #0
 800b918:	f43f ae9a 	beq.w	800b650 <_strtod_l+0x488>
 800b91c:	2f00      	cmp	r7, #0
 800b91e:	dd08      	ble.n	800b932 <_strtod_l+0x76a>
 800b920:	9905      	ldr	r1, [sp, #20]
 800b922:	463a      	mov	r2, r7
 800b924:	4620      	mov	r0, r4
 800b926:	f7ff f9df 	bl	800ace8 <__lshift>
 800b92a:	9005      	str	r0, [sp, #20]
 800b92c:	2800      	cmp	r0, #0
 800b92e:	f43f ae8f 	beq.w	800b650 <_strtod_l+0x488>
 800b932:	f1ba 0f00 	cmp.w	sl, #0
 800b936:	dd08      	ble.n	800b94a <_strtod_l+0x782>
 800b938:	4659      	mov	r1, fp
 800b93a:	4652      	mov	r2, sl
 800b93c:	4620      	mov	r0, r4
 800b93e:	f7ff f9d3 	bl	800ace8 <__lshift>
 800b942:	4683      	mov	fp, r0
 800b944:	2800      	cmp	r0, #0
 800b946:	f43f ae83 	beq.w	800b650 <_strtod_l+0x488>
 800b94a:	9a05      	ldr	r2, [sp, #20]
 800b94c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b94e:	4620      	mov	r0, r4
 800b950:	f7ff fa52 	bl	800adf8 <__mdiff>
 800b954:	4605      	mov	r5, r0
 800b956:	2800      	cmp	r0, #0
 800b958:	f43f ae7a 	beq.w	800b650 <_strtod_l+0x488>
 800b95c:	68c3      	ldr	r3, [r0, #12]
 800b95e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b960:	2300      	movs	r3, #0
 800b962:	60c3      	str	r3, [r0, #12]
 800b964:	4659      	mov	r1, fp
 800b966:	f7ff fa2b 	bl	800adc0 <__mcmp>
 800b96a:	2800      	cmp	r0, #0
 800b96c:	da60      	bge.n	800ba30 <_strtod_l+0x868>
 800b96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b970:	ea53 0308 	orrs.w	r3, r3, r8
 800b974:	f040 8084 	bne.w	800ba80 <_strtod_l+0x8b8>
 800b978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d17f      	bne.n	800ba80 <_strtod_l+0x8b8>
 800b980:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b984:	0d1b      	lsrs	r3, r3, #20
 800b986:	051b      	lsls	r3, r3, #20
 800b988:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b98c:	d978      	bls.n	800ba80 <_strtod_l+0x8b8>
 800b98e:	696b      	ldr	r3, [r5, #20]
 800b990:	b913      	cbnz	r3, 800b998 <_strtod_l+0x7d0>
 800b992:	692b      	ldr	r3, [r5, #16]
 800b994:	2b01      	cmp	r3, #1
 800b996:	dd73      	ble.n	800ba80 <_strtod_l+0x8b8>
 800b998:	4629      	mov	r1, r5
 800b99a:	2201      	movs	r2, #1
 800b99c:	4620      	mov	r0, r4
 800b99e:	f7ff f9a3 	bl	800ace8 <__lshift>
 800b9a2:	4659      	mov	r1, fp
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	f7ff fa0b 	bl	800adc0 <__mcmp>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	dd68      	ble.n	800ba80 <_strtod_l+0x8b8>
 800b9ae:	9904      	ldr	r1, [sp, #16]
 800b9b0:	4a54      	ldr	r2, [pc, #336]	; (800bb04 <_strtod_l+0x93c>)
 800b9b2:	464b      	mov	r3, r9
 800b9b4:	2900      	cmp	r1, #0
 800b9b6:	f000 8084 	beq.w	800bac2 <_strtod_l+0x8fa>
 800b9ba:	ea02 0109 	and.w	r1, r2, r9
 800b9be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b9c2:	dc7e      	bgt.n	800bac2 <_strtod_l+0x8fa>
 800b9c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b9c8:	f77f aeb3 	ble.w	800b732 <_strtod_l+0x56a>
 800b9cc:	4b4e      	ldr	r3, [pc, #312]	; (800bb08 <_strtod_l+0x940>)
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	4649      	mov	r1, r9
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f7f4 fe10 	bl	80005f8 <__aeabi_dmul>
 800b9d8:	4b4a      	ldr	r3, [pc, #296]	; (800bb04 <_strtod_l+0x93c>)
 800b9da:	400b      	ands	r3, r1
 800b9dc:	4680      	mov	r8, r0
 800b9de:	4689      	mov	r9, r1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f47f ae3f 	bne.w	800b664 <_strtod_l+0x49c>
 800b9e6:	2322      	movs	r3, #34	; 0x22
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	e63b      	b.n	800b664 <_strtod_l+0x49c>
 800b9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f4:	ea03 0808 	and.w	r8, r3, r8
 800b9f8:	e6e8      	b.n	800b7cc <_strtod_l+0x604>
 800b9fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b9fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ba02:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ba06:	36e2      	adds	r6, #226	; 0xe2
 800ba08:	fa01 f306 	lsl.w	r3, r1, r6
 800ba0c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ba10:	e748      	b.n	800b8a4 <_strtod_l+0x6dc>
 800ba12:	2100      	movs	r1, #0
 800ba14:	2301      	movs	r3, #1
 800ba16:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ba1a:	e743      	b.n	800b8a4 <_strtod_l+0x6dc>
 800ba1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ba1e:	4632      	mov	r2, r6
 800ba20:	4620      	mov	r0, r4
 800ba22:	f7ff f961 	bl	800ace8 <__lshift>
 800ba26:	9016      	str	r0, [sp, #88]	; 0x58
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	f47f af6b 	bne.w	800b904 <_strtod_l+0x73c>
 800ba2e:	e60f      	b.n	800b650 <_strtod_l+0x488>
 800ba30:	46ca      	mov	sl, r9
 800ba32:	d171      	bne.n	800bb18 <_strtod_l+0x950>
 800ba34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba3a:	b352      	cbz	r2, 800ba92 <_strtod_l+0x8ca>
 800ba3c:	4a33      	ldr	r2, [pc, #204]	; (800bb0c <_strtod_l+0x944>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d12a      	bne.n	800ba98 <_strtod_l+0x8d0>
 800ba42:	9b04      	ldr	r3, [sp, #16]
 800ba44:	4641      	mov	r1, r8
 800ba46:	b1fb      	cbz	r3, 800ba88 <_strtod_l+0x8c0>
 800ba48:	4b2e      	ldr	r3, [pc, #184]	; (800bb04 <_strtod_l+0x93c>)
 800ba4a:	ea09 0303 	and.w	r3, r9, r3
 800ba4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba52:	f04f 32ff 	mov.w	r2, #4294967295
 800ba56:	d81a      	bhi.n	800ba8e <_strtod_l+0x8c6>
 800ba58:	0d1b      	lsrs	r3, r3, #20
 800ba5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba62:	4299      	cmp	r1, r3
 800ba64:	d118      	bne.n	800ba98 <_strtod_l+0x8d0>
 800ba66:	4b2a      	ldr	r3, [pc, #168]	; (800bb10 <_strtod_l+0x948>)
 800ba68:	459a      	cmp	sl, r3
 800ba6a:	d102      	bne.n	800ba72 <_strtod_l+0x8aa>
 800ba6c:	3101      	adds	r1, #1
 800ba6e:	f43f adef 	beq.w	800b650 <_strtod_l+0x488>
 800ba72:	4b24      	ldr	r3, [pc, #144]	; (800bb04 <_strtod_l+0x93c>)
 800ba74:	ea0a 0303 	and.w	r3, sl, r3
 800ba78:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ba7c:	f04f 0800 	mov.w	r8, #0
 800ba80:	9b04      	ldr	r3, [sp, #16]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1a2      	bne.n	800b9cc <_strtod_l+0x804>
 800ba86:	e5ed      	b.n	800b664 <_strtod_l+0x49c>
 800ba88:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8c:	e7e9      	b.n	800ba62 <_strtod_l+0x89a>
 800ba8e:	4613      	mov	r3, r2
 800ba90:	e7e7      	b.n	800ba62 <_strtod_l+0x89a>
 800ba92:	ea53 0308 	orrs.w	r3, r3, r8
 800ba96:	d08a      	beq.n	800b9ae <_strtod_l+0x7e6>
 800ba98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba9a:	b1e3      	cbz	r3, 800bad6 <_strtod_l+0x90e>
 800ba9c:	ea13 0f0a 	tst.w	r3, sl
 800baa0:	d0ee      	beq.n	800ba80 <_strtod_l+0x8b8>
 800baa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa4:	9a04      	ldr	r2, [sp, #16]
 800baa6:	4640      	mov	r0, r8
 800baa8:	4649      	mov	r1, r9
 800baaa:	b1c3      	cbz	r3, 800bade <_strtod_l+0x916>
 800baac:	f7ff fb6f 	bl	800b18e <sulp>
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	ec51 0b18 	vmov	r0, r1, d8
 800bab8:	f7f4 fbe8 	bl	800028c <__adddf3>
 800babc:	4680      	mov	r8, r0
 800babe:	4689      	mov	r9, r1
 800bac0:	e7de      	b.n	800ba80 <_strtod_l+0x8b8>
 800bac2:	4013      	ands	r3, r2
 800bac4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bac8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bacc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bad0:	f04f 38ff 	mov.w	r8, #4294967295
 800bad4:	e7d4      	b.n	800ba80 <_strtod_l+0x8b8>
 800bad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bad8:	ea13 0f08 	tst.w	r3, r8
 800badc:	e7e0      	b.n	800baa0 <_strtod_l+0x8d8>
 800bade:	f7ff fb56 	bl	800b18e <sulp>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	ec51 0b18 	vmov	r0, r1, d8
 800baea:	f7f4 fbcd 	bl	8000288 <__aeabi_dsub>
 800baee:	2200      	movs	r2, #0
 800baf0:	2300      	movs	r3, #0
 800baf2:	4680      	mov	r8, r0
 800baf4:	4689      	mov	r9, r1
 800baf6:	f7f4 ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d0c0      	beq.n	800ba80 <_strtod_l+0x8b8>
 800bafe:	e618      	b.n	800b732 <_strtod_l+0x56a>
 800bb00:	fffffc02 	.word	0xfffffc02
 800bb04:	7ff00000 	.word	0x7ff00000
 800bb08:	39500000 	.word	0x39500000
 800bb0c:	000fffff 	.word	0x000fffff
 800bb10:	7fefffff 	.word	0x7fefffff
 800bb14:	0800f980 	.word	0x0800f980
 800bb18:	4659      	mov	r1, fp
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	f7ff fac0 	bl	800b0a0 <__ratio>
 800bb20:	ec57 6b10 	vmov	r6, r7, d0
 800bb24:	ee10 0a10 	vmov	r0, s0
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb2e:	4639      	mov	r1, r7
 800bb30:	f7f4 ffde 	bl	8000af0 <__aeabi_dcmple>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d071      	beq.n	800bc1c <_strtod_l+0xa54>
 800bb38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d17c      	bne.n	800bc38 <_strtod_l+0xa70>
 800bb3e:	f1b8 0f00 	cmp.w	r8, #0
 800bb42:	d15a      	bne.n	800bbfa <_strtod_l+0xa32>
 800bb44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d15d      	bne.n	800bc08 <_strtod_l+0xa40>
 800bb4c:	4b90      	ldr	r3, [pc, #576]	; (800bd90 <_strtod_l+0xbc8>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	4630      	mov	r0, r6
 800bb52:	4639      	mov	r1, r7
 800bb54:	f7f4 ffc2 	bl	8000adc <__aeabi_dcmplt>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d15c      	bne.n	800bc16 <_strtod_l+0xa4e>
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	4639      	mov	r1, r7
 800bb60:	4b8c      	ldr	r3, [pc, #560]	; (800bd94 <_strtod_l+0xbcc>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	f7f4 fd48 	bl	80005f8 <__aeabi_dmul>
 800bb68:	4606      	mov	r6, r0
 800bb6a:	460f      	mov	r7, r1
 800bb6c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bb70:	9606      	str	r6, [sp, #24]
 800bb72:	9307      	str	r3, [sp, #28]
 800bb74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb78:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bb7c:	4b86      	ldr	r3, [pc, #536]	; (800bd98 <_strtod_l+0xbd0>)
 800bb7e:	ea0a 0303 	and.w	r3, sl, r3
 800bb82:	930d      	str	r3, [sp, #52]	; 0x34
 800bb84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb86:	4b85      	ldr	r3, [pc, #532]	; (800bd9c <_strtod_l+0xbd4>)
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	f040 8090 	bne.w	800bcae <_strtod_l+0xae6>
 800bb8e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bb92:	ec49 8b10 	vmov	d0, r8, r9
 800bb96:	f7ff f9b9 	bl	800af0c <__ulp>
 800bb9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb9e:	ec51 0b10 	vmov	r0, r1, d0
 800bba2:	f7f4 fd29 	bl	80005f8 <__aeabi_dmul>
 800bba6:	4642      	mov	r2, r8
 800bba8:	464b      	mov	r3, r9
 800bbaa:	f7f4 fb6f 	bl	800028c <__adddf3>
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4979      	ldr	r1, [pc, #484]	; (800bd98 <_strtod_l+0xbd0>)
 800bbb2:	4a7b      	ldr	r2, [pc, #492]	; (800bda0 <_strtod_l+0xbd8>)
 800bbb4:	4019      	ands	r1, r3
 800bbb6:	4291      	cmp	r1, r2
 800bbb8:	4680      	mov	r8, r0
 800bbba:	d944      	bls.n	800bc46 <_strtod_l+0xa7e>
 800bbbc:	ee18 2a90 	vmov	r2, s17
 800bbc0:	4b78      	ldr	r3, [pc, #480]	; (800bda4 <_strtod_l+0xbdc>)
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d104      	bne.n	800bbd0 <_strtod_l+0xa08>
 800bbc6:	ee18 3a10 	vmov	r3, s16
 800bbca:	3301      	adds	r3, #1
 800bbcc:	f43f ad40 	beq.w	800b650 <_strtod_l+0x488>
 800bbd0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800bda4 <_strtod_l+0xbdc>
 800bbd4:	f04f 38ff 	mov.w	r8, #4294967295
 800bbd8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f7fe fe6a 	bl	800a8b4 <_Bfree>
 800bbe0:	9905      	ldr	r1, [sp, #20]
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f7fe fe66 	bl	800a8b4 <_Bfree>
 800bbe8:	4659      	mov	r1, fp
 800bbea:	4620      	mov	r0, r4
 800bbec:	f7fe fe62 	bl	800a8b4 <_Bfree>
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f7fe fe5e 	bl	800a8b4 <_Bfree>
 800bbf8:	e609      	b.n	800b80e <_strtod_l+0x646>
 800bbfa:	f1b8 0f01 	cmp.w	r8, #1
 800bbfe:	d103      	bne.n	800bc08 <_strtod_l+0xa40>
 800bc00:	f1b9 0f00 	cmp.w	r9, #0
 800bc04:	f43f ad95 	beq.w	800b732 <_strtod_l+0x56a>
 800bc08:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bd60 <_strtod_l+0xb98>
 800bc0c:	4f60      	ldr	r7, [pc, #384]	; (800bd90 <_strtod_l+0xbc8>)
 800bc0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc12:	2600      	movs	r6, #0
 800bc14:	e7ae      	b.n	800bb74 <_strtod_l+0x9ac>
 800bc16:	4f5f      	ldr	r7, [pc, #380]	; (800bd94 <_strtod_l+0xbcc>)
 800bc18:	2600      	movs	r6, #0
 800bc1a:	e7a7      	b.n	800bb6c <_strtod_l+0x9a4>
 800bc1c:	4b5d      	ldr	r3, [pc, #372]	; (800bd94 <_strtod_l+0xbcc>)
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4639      	mov	r1, r7
 800bc22:	2200      	movs	r2, #0
 800bc24:	f7f4 fce8 	bl	80005f8 <__aeabi_dmul>
 800bc28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	460f      	mov	r7, r1
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d09c      	beq.n	800bb6c <_strtod_l+0x9a4>
 800bc32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bc36:	e79d      	b.n	800bb74 <_strtod_l+0x9ac>
 800bc38:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bd68 <_strtod_l+0xba0>
 800bc3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc40:	ec57 6b17 	vmov	r6, r7, d7
 800bc44:	e796      	b.n	800bb74 <_strtod_l+0x9ac>
 800bc46:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bc4a:	9b04      	ldr	r3, [sp, #16]
 800bc4c:	46ca      	mov	sl, r9
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1c2      	bne.n	800bbd8 <_strtod_l+0xa10>
 800bc52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc58:	0d1b      	lsrs	r3, r3, #20
 800bc5a:	051b      	lsls	r3, r3, #20
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d1bb      	bne.n	800bbd8 <_strtod_l+0xa10>
 800bc60:	4630      	mov	r0, r6
 800bc62:	4639      	mov	r1, r7
 800bc64:	f7f5 f828 	bl	8000cb8 <__aeabi_d2lz>
 800bc68:	f7f4 fc98 	bl	800059c <__aeabi_l2d>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4630      	mov	r0, r6
 800bc72:	4639      	mov	r1, r7
 800bc74:	f7f4 fb08 	bl	8000288 <__aeabi_dsub>
 800bc78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc7e:	ea43 0308 	orr.w	r3, r3, r8
 800bc82:	4313      	orrs	r3, r2
 800bc84:	4606      	mov	r6, r0
 800bc86:	460f      	mov	r7, r1
 800bc88:	d054      	beq.n	800bd34 <_strtod_l+0xb6c>
 800bc8a:	a339      	add	r3, pc, #228	; (adr r3, 800bd70 <_strtod_l+0xba8>)
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	f7f4 ff24 	bl	8000adc <__aeabi_dcmplt>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	f47f ace5 	bne.w	800b664 <_strtod_l+0x49c>
 800bc9a:	a337      	add	r3, pc, #220	; (adr r3, 800bd78 <_strtod_l+0xbb0>)
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	4630      	mov	r0, r6
 800bca2:	4639      	mov	r1, r7
 800bca4:	f7f4 ff38 	bl	8000b18 <__aeabi_dcmpgt>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d095      	beq.n	800bbd8 <_strtod_l+0xa10>
 800bcac:	e4da      	b.n	800b664 <_strtod_l+0x49c>
 800bcae:	9b04      	ldr	r3, [sp, #16]
 800bcb0:	b333      	cbz	r3, 800bd00 <_strtod_l+0xb38>
 800bcb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcb4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bcb8:	d822      	bhi.n	800bd00 <_strtod_l+0xb38>
 800bcba:	a331      	add	r3, pc, #196	; (adr r3, 800bd80 <_strtod_l+0xbb8>)
 800bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	4639      	mov	r1, r7
 800bcc4:	f7f4 ff14 	bl	8000af0 <__aeabi_dcmple>
 800bcc8:	b1a0      	cbz	r0, 800bcf4 <_strtod_l+0xb2c>
 800bcca:	4639      	mov	r1, r7
 800bccc:	4630      	mov	r0, r6
 800bcce:	f7f4 ff6b 	bl	8000ba8 <__aeabi_d2uiz>
 800bcd2:	2801      	cmp	r0, #1
 800bcd4:	bf38      	it	cc
 800bcd6:	2001      	movcc	r0, #1
 800bcd8:	f7f4 fc14 	bl	8000504 <__aeabi_ui2d>
 800bcdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcde:	4606      	mov	r6, r0
 800bce0:	460f      	mov	r7, r1
 800bce2:	bb23      	cbnz	r3, 800bd2e <_strtod_l+0xb66>
 800bce4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bce8:	9010      	str	r0, [sp, #64]	; 0x40
 800bcea:	9311      	str	r3, [sp, #68]	; 0x44
 800bcec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bcf0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bcf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcf8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bcfc:	1a9b      	subs	r3, r3, r2
 800bcfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bd04:	eeb0 0a48 	vmov.f32	s0, s16
 800bd08:	eef0 0a68 	vmov.f32	s1, s17
 800bd0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bd10:	f7ff f8fc 	bl	800af0c <__ulp>
 800bd14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bd18:	ec53 2b10 	vmov	r2, r3, d0
 800bd1c:	f7f4 fc6c 	bl	80005f8 <__aeabi_dmul>
 800bd20:	ec53 2b18 	vmov	r2, r3, d8
 800bd24:	f7f4 fab2 	bl	800028c <__adddf3>
 800bd28:	4680      	mov	r8, r0
 800bd2a:	4689      	mov	r9, r1
 800bd2c:	e78d      	b.n	800bc4a <_strtod_l+0xa82>
 800bd2e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bd32:	e7db      	b.n	800bcec <_strtod_l+0xb24>
 800bd34:	a314      	add	r3, pc, #80	; (adr r3, 800bd88 <_strtod_l+0xbc0>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	f7f4 fecf 	bl	8000adc <__aeabi_dcmplt>
 800bd3e:	e7b3      	b.n	800bca8 <_strtod_l+0xae0>
 800bd40:	2300      	movs	r3, #0
 800bd42:	930a      	str	r3, [sp, #40]	; 0x28
 800bd44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd48:	6013      	str	r3, [r2, #0]
 800bd4a:	f7ff ba7c 	b.w	800b246 <_strtod_l+0x7e>
 800bd4e:	2a65      	cmp	r2, #101	; 0x65
 800bd50:	f43f ab75 	beq.w	800b43e <_strtod_l+0x276>
 800bd54:	2a45      	cmp	r2, #69	; 0x45
 800bd56:	f43f ab72 	beq.w	800b43e <_strtod_l+0x276>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	f7ff bbaa 	b.w	800b4b4 <_strtod_l+0x2ec>
 800bd60:	00000000 	.word	0x00000000
 800bd64:	bff00000 	.word	0xbff00000
 800bd68:	00000000 	.word	0x00000000
 800bd6c:	3ff00000 	.word	0x3ff00000
 800bd70:	94a03595 	.word	0x94a03595
 800bd74:	3fdfffff 	.word	0x3fdfffff
 800bd78:	35afe535 	.word	0x35afe535
 800bd7c:	3fe00000 	.word	0x3fe00000
 800bd80:	ffc00000 	.word	0xffc00000
 800bd84:	41dfffff 	.word	0x41dfffff
 800bd88:	94a03595 	.word	0x94a03595
 800bd8c:	3fcfffff 	.word	0x3fcfffff
 800bd90:	3ff00000 	.word	0x3ff00000
 800bd94:	3fe00000 	.word	0x3fe00000
 800bd98:	7ff00000 	.word	0x7ff00000
 800bd9c:	7fe00000 	.word	0x7fe00000
 800bda0:	7c9fffff 	.word	0x7c9fffff
 800bda4:	7fefffff 	.word	0x7fefffff

0800bda8 <_strtod_r>:
 800bda8:	4b01      	ldr	r3, [pc, #4]	; (800bdb0 <_strtod_r+0x8>)
 800bdaa:	f7ff ba0d 	b.w	800b1c8 <_strtod_l>
 800bdae:	bf00      	nop
 800bdb0:	20000068 	.word	0x20000068

0800bdb4 <_strtol_l.constprop.0>:
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdba:	d001      	beq.n	800bdc0 <_strtol_l.constprop.0+0xc>
 800bdbc:	2b24      	cmp	r3, #36	; 0x24
 800bdbe:	d906      	bls.n	800bdce <_strtol_l.constprop.0+0x1a>
 800bdc0:	f7fd fe30 	bl	8009a24 <__errno>
 800bdc4:	2316      	movs	r3, #22
 800bdc6:	6003      	str	r3, [r0, #0]
 800bdc8:	2000      	movs	r0, #0
 800bdca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800beb4 <_strtol_l.constprop.0+0x100>
 800bdd2:	460d      	mov	r5, r1
 800bdd4:	462e      	mov	r6, r5
 800bdd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bdda:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bdde:	f017 0708 	ands.w	r7, r7, #8
 800bde2:	d1f7      	bne.n	800bdd4 <_strtol_l.constprop.0+0x20>
 800bde4:	2c2d      	cmp	r4, #45	; 0x2d
 800bde6:	d132      	bne.n	800be4e <_strtol_l.constprop.0+0x9a>
 800bde8:	782c      	ldrb	r4, [r5, #0]
 800bdea:	2701      	movs	r7, #1
 800bdec:	1cb5      	adds	r5, r6, #2
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d05b      	beq.n	800beaa <_strtol_l.constprop.0+0xf6>
 800bdf2:	2b10      	cmp	r3, #16
 800bdf4:	d109      	bne.n	800be0a <_strtol_l.constprop.0+0x56>
 800bdf6:	2c30      	cmp	r4, #48	; 0x30
 800bdf8:	d107      	bne.n	800be0a <_strtol_l.constprop.0+0x56>
 800bdfa:	782c      	ldrb	r4, [r5, #0]
 800bdfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800be00:	2c58      	cmp	r4, #88	; 0x58
 800be02:	d14d      	bne.n	800bea0 <_strtol_l.constprop.0+0xec>
 800be04:	786c      	ldrb	r4, [r5, #1]
 800be06:	2310      	movs	r3, #16
 800be08:	3502      	adds	r5, #2
 800be0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800be0e:	f108 38ff 	add.w	r8, r8, #4294967295
 800be12:	f04f 0e00 	mov.w	lr, #0
 800be16:	fbb8 f9f3 	udiv	r9, r8, r3
 800be1a:	4676      	mov	r6, lr
 800be1c:	fb03 8a19 	mls	sl, r3, r9, r8
 800be20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800be24:	f1bc 0f09 	cmp.w	ip, #9
 800be28:	d816      	bhi.n	800be58 <_strtol_l.constprop.0+0xa4>
 800be2a:	4664      	mov	r4, ip
 800be2c:	42a3      	cmp	r3, r4
 800be2e:	dd24      	ble.n	800be7a <_strtol_l.constprop.0+0xc6>
 800be30:	f1be 3fff 	cmp.w	lr, #4294967295
 800be34:	d008      	beq.n	800be48 <_strtol_l.constprop.0+0x94>
 800be36:	45b1      	cmp	r9, r6
 800be38:	d31c      	bcc.n	800be74 <_strtol_l.constprop.0+0xc0>
 800be3a:	d101      	bne.n	800be40 <_strtol_l.constprop.0+0x8c>
 800be3c:	45a2      	cmp	sl, r4
 800be3e:	db19      	blt.n	800be74 <_strtol_l.constprop.0+0xc0>
 800be40:	fb06 4603 	mla	r6, r6, r3, r4
 800be44:	f04f 0e01 	mov.w	lr, #1
 800be48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be4c:	e7e8      	b.n	800be20 <_strtol_l.constprop.0+0x6c>
 800be4e:	2c2b      	cmp	r4, #43	; 0x2b
 800be50:	bf04      	itt	eq
 800be52:	782c      	ldrbeq	r4, [r5, #0]
 800be54:	1cb5      	addeq	r5, r6, #2
 800be56:	e7ca      	b.n	800bdee <_strtol_l.constprop.0+0x3a>
 800be58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800be5c:	f1bc 0f19 	cmp.w	ip, #25
 800be60:	d801      	bhi.n	800be66 <_strtol_l.constprop.0+0xb2>
 800be62:	3c37      	subs	r4, #55	; 0x37
 800be64:	e7e2      	b.n	800be2c <_strtol_l.constprop.0+0x78>
 800be66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800be6a:	f1bc 0f19 	cmp.w	ip, #25
 800be6e:	d804      	bhi.n	800be7a <_strtol_l.constprop.0+0xc6>
 800be70:	3c57      	subs	r4, #87	; 0x57
 800be72:	e7db      	b.n	800be2c <_strtol_l.constprop.0+0x78>
 800be74:	f04f 3eff 	mov.w	lr, #4294967295
 800be78:	e7e6      	b.n	800be48 <_strtol_l.constprop.0+0x94>
 800be7a:	f1be 3fff 	cmp.w	lr, #4294967295
 800be7e:	d105      	bne.n	800be8c <_strtol_l.constprop.0+0xd8>
 800be80:	2322      	movs	r3, #34	; 0x22
 800be82:	6003      	str	r3, [r0, #0]
 800be84:	4646      	mov	r6, r8
 800be86:	b942      	cbnz	r2, 800be9a <_strtol_l.constprop.0+0xe6>
 800be88:	4630      	mov	r0, r6
 800be8a:	e79e      	b.n	800bdca <_strtol_l.constprop.0+0x16>
 800be8c:	b107      	cbz	r7, 800be90 <_strtol_l.constprop.0+0xdc>
 800be8e:	4276      	negs	r6, r6
 800be90:	2a00      	cmp	r2, #0
 800be92:	d0f9      	beq.n	800be88 <_strtol_l.constprop.0+0xd4>
 800be94:	f1be 0f00 	cmp.w	lr, #0
 800be98:	d000      	beq.n	800be9c <_strtol_l.constprop.0+0xe8>
 800be9a:	1e69      	subs	r1, r5, #1
 800be9c:	6011      	str	r1, [r2, #0]
 800be9e:	e7f3      	b.n	800be88 <_strtol_l.constprop.0+0xd4>
 800bea0:	2430      	movs	r4, #48	; 0x30
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1b1      	bne.n	800be0a <_strtol_l.constprop.0+0x56>
 800bea6:	2308      	movs	r3, #8
 800bea8:	e7af      	b.n	800be0a <_strtol_l.constprop.0+0x56>
 800beaa:	2c30      	cmp	r4, #48	; 0x30
 800beac:	d0a5      	beq.n	800bdfa <_strtol_l.constprop.0+0x46>
 800beae:	230a      	movs	r3, #10
 800beb0:	e7ab      	b.n	800be0a <_strtol_l.constprop.0+0x56>
 800beb2:	bf00      	nop
 800beb4:	0800f9a9 	.word	0x0800f9a9

0800beb8 <_strtol_r>:
 800beb8:	f7ff bf7c 	b.w	800bdb4 <_strtol_l.constprop.0>

0800bebc <__ssputs_r>:
 800bebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bec0:	688e      	ldr	r6, [r1, #8]
 800bec2:	461f      	mov	r7, r3
 800bec4:	42be      	cmp	r6, r7
 800bec6:	680b      	ldr	r3, [r1, #0]
 800bec8:	4682      	mov	sl, r0
 800beca:	460c      	mov	r4, r1
 800becc:	4690      	mov	r8, r2
 800bece:	d82c      	bhi.n	800bf2a <__ssputs_r+0x6e>
 800bed0:	898a      	ldrh	r2, [r1, #12]
 800bed2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bed6:	d026      	beq.n	800bf26 <__ssputs_r+0x6a>
 800bed8:	6965      	ldr	r5, [r4, #20]
 800beda:	6909      	ldr	r1, [r1, #16]
 800bedc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bee0:	eba3 0901 	sub.w	r9, r3, r1
 800bee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bee8:	1c7b      	adds	r3, r7, #1
 800beea:	444b      	add	r3, r9
 800beec:	106d      	asrs	r5, r5, #1
 800beee:	429d      	cmp	r5, r3
 800bef0:	bf38      	it	cc
 800bef2:	461d      	movcc	r5, r3
 800bef4:	0553      	lsls	r3, r2, #21
 800bef6:	d527      	bpl.n	800bf48 <__ssputs_r+0x8c>
 800bef8:	4629      	mov	r1, r5
 800befa:	f7fc fcd5 	bl	80088a8 <_malloc_r>
 800befe:	4606      	mov	r6, r0
 800bf00:	b360      	cbz	r0, 800bf5c <__ssputs_r+0xa0>
 800bf02:	6921      	ldr	r1, [r4, #16]
 800bf04:	464a      	mov	r2, r9
 800bf06:	f7fd fdba 	bl	8009a7e <memcpy>
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	6126      	str	r6, [r4, #16]
 800bf18:	6165      	str	r5, [r4, #20]
 800bf1a:	444e      	add	r6, r9
 800bf1c:	eba5 0509 	sub.w	r5, r5, r9
 800bf20:	6026      	str	r6, [r4, #0]
 800bf22:	60a5      	str	r5, [r4, #8]
 800bf24:	463e      	mov	r6, r7
 800bf26:	42be      	cmp	r6, r7
 800bf28:	d900      	bls.n	800bf2c <__ssputs_r+0x70>
 800bf2a:	463e      	mov	r6, r7
 800bf2c:	6820      	ldr	r0, [r4, #0]
 800bf2e:	4632      	mov	r2, r6
 800bf30:	4641      	mov	r1, r8
 800bf32:	f000 f9c9 	bl	800c2c8 <memmove>
 800bf36:	68a3      	ldr	r3, [r4, #8]
 800bf38:	1b9b      	subs	r3, r3, r6
 800bf3a:	60a3      	str	r3, [r4, #8]
 800bf3c:	6823      	ldr	r3, [r4, #0]
 800bf3e:	4433      	add	r3, r6
 800bf40:	6023      	str	r3, [r4, #0]
 800bf42:	2000      	movs	r0, #0
 800bf44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf48:	462a      	mov	r2, r5
 800bf4a:	f000 fd8e 	bl	800ca6a <_realloc_r>
 800bf4e:	4606      	mov	r6, r0
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d1e0      	bne.n	800bf16 <__ssputs_r+0x5a>
 800bf54:	6921      	ldr	r1, [r4, #16]
 800bf56:	4650      	mov	r0, sl
 800bf58:	f7fe fc20 	bl	800a79c <_free_r>
 800bf5c:	230c      	movs	r3, #12
 800bf5e:	f8ca 3000 	str.w	r3, [sl]
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf68:	81a3      	strh	r3, [r4, #12]
 800bf6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6e:	e7e9      	b.n	800bf44 <__ssputs_r+0x88>

0800bf70 <_svfiprintf_r>:
 800bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	4698      	mov	r8, r3
 800bf76:	898b      	ldrh	r3, [r1, #12]
 800bf78:	061b      	lsls	r3, r3, #24
 800bf7a:	b09d      	sub	sp, #116	; 0x74
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	460d      	mov	r5, r1
 800bf80:	4614      	mov	r4, r2
 800bf82:	d50e      	bpl.n	800bfa2 <_svfiprintf_r+0x32>
 800bf84:	690b      	ldr	r3, [r1, #16]
 800bf86:	b963      	cbnz	r3, 800bfa2 <_svfiprintf_r+0x32>
 800bf88:	2140      	movs	r1, #64	; 0x40
 800bf8a:	f7fc fc8d 	bl	80088a8 <_malloc_r>
 800bf8e:	6028      	str	r0, [r5, #0]
 800bf90:	6128      	str	r0, [r5, #16]
 800bf92:	b920      	cbnz	r0, 800bf9e <_svfiprintf_r+0x2e>
 800bf94:	230c      	movs	r3, #12
 800bf96:	603b      	str	r3, [r7, #0]
 800bf98:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9c:	e0d0      	b.n	800c140 <_svfiprintf_r+0x1d0>
 800bf9e:	2340      	movs	r3, #64	; 0x40
 800bfa0:	616b      	str	r3, [r5, #20]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa6:	2320      	movs	r3, #32
 800bfa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfac:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfb0:	2330      	movs	r3, #48	; 0x30
 800bfb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c158 <_svfiprintf_r+0x1e8>
 800bfb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfba:	f04f 0901 	mov.w	r9, #1
 800bfbe:	4623      	mov	r3, r4
 800bfc0:	469a      	mov	sl, r3
 800bfc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfc6:	b10a      	cbz	r2, 800bfcc <_svfiprintf_r+0x5c>
 800bfc8:	2a25      	cmp	r2, #37	; 0x25
 800bfca:	d1f9      	bne.n	800bfc0 <_svfiprintf_r+0x50>
 800bfcc:	ebba 0b04 	subs.w	fp, sl, r4
 800bfd0:	d00b      	beq.n	800bfea <_svfiprintf_r+0x7a>
 800bfd2:	465b      	mov	r3, fp
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	4638      	mov	r0, r7
 800bfda:	f7ff ff6f 	bl	800bebc <__ssputs_r>
 800bfde:	3001      	adds	r0, #1
 800bfe0:	f000 80a9 	beq.w	800c136 <_svfiprintf_r+0x1c6>
 800bfe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfe6:	445a      	add	r2, fp
 800bfe8:	9209      	str	r2, [sp, #36]	; 0x24
 800bfea:	f89a 3000 	ldrb.w	r3, [sl]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f000 80a1 	beq.w	800c136 <_svfiprintf_r+0x1c6>
 800bff4:	2300      	movs	r3, #0
 800bff6:	f04f 32ff 	mov.w	r2, #4294967295
 800bffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bffe:	f10a 0a01 	add.w	sl, sl, #1
 800c002:	9304      	str	r3, [sp, #16]
 800c004:	9307      	str	r3, [sp, #28]
 800c006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c00a:	931a      	str	r3, [sp, #104]	; 0x68
 800c00c:	4654      	mov	r4, sl
 800c00e:	2205      	movs	r2, #5
 800c010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c014:	4850      	ldr	r0, [pc, #320]	; (800c158 <_svfiprintf_r+0x1e8>)
 800c016:	f7f4 f8db 	bl	80001d0 <memchr>
 800c01a:	9a04      	ldr	r2, [sp, #16]
 800c01c:	b9d8      	cbnz	r0, 800c056 <_svfiprintf_r+0xe6>
 800c01e:	06d0      	lsls	r0, r2, #27
 800c020:	bf44      	itt	mi
 800c022:	2320      	movmi	r3, #32
 800c024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c028:	0711      	lsls	r1, r2, #28
 800c02a:	bf44      	itt	mi
 800c02c:	232b      	movmi	r3, #43	; 0x2b
 800c02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c032:	f89a 3000 	ldrb.w	r3, [sl]
 800c036:	2b2a      	cmp	r3, #42	; 0x2a
 800c038:	d015      	beq.n	800c066 <_svfiprintf_r+0xf6>
 800c03a:	9a07      	ldr	r2, [sp, #28]
 800c03c:	4654      	mov	r4, sl
 800c03e:	2000      	movs	r0, #0
 800c040:	f04f 0c0a 	mov.w	ip, #10
 800c044:	4621      	mov	r1, r4
 800c046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c04a:	3b30      	subs	r3, #48	; 0x30
 800c04c:	2b09      	cmp	r3, #9
 800c04e:	d94d      	bls.n	800c0ec <_svfiprintf_r+0x17c>
 800c050:	b1b0      	cbz	r0, 800c080 <_svfiprintf_r+0x110>
 800c052:	9207      	str	r2, [sp, #28]
 800c054:	e014      	b.n	800c080 <_svfiprintf_r+0x110>
 800c056:	eba0 0308 	sub.w	r3, r0, r8
 800c05a:	fa09 f303 	lsl.w	r3, r9, r3
 800c05e:	4313      	orrs	r3, r2
 800c060:	9304      	str	r3, [sp, #16]
 800c062:	46a2      	mov	sl, r4
 800c064:	e7d2      	b.n	800c00c <_svfiprintf_r+0x9c>
 800c066:	9b03      	ldr	r3, [sp, #12]
 800c068:	1d19      	adds	r1, r3, #4
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	9103      	str	r1, [sp, #12]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	bfbb      	ittet	lt
 800c072:	425b      	neglt	r3, r3
 800c074:	f042 0202 	orrlt.w	r2, r2, #2
 800c078:	9307      	strge	r3, [sp, #28]
 800c07a:	9307      	strlt	r3, [sp, #28]
 800c07c:	bfb8      	it	lt
 800c07e:	9204      	strlt	r2, [sp, #16]
 800c080:	7823      	ldrb	r3, [r4, #0]
 800c082:	2b2e      	cmp	r3, #46	; 0x2e
 800c084:	d10c      	bne.n	800c0a0 <_svfiprintf_r+0x130>
 800c086:	7863      	ldrb	r3, [r4, #1]
 800c088:	2b2a      	cmp	r3, #42	; 0x2a
 800c08a:	d134      	bne.n	800c0f6 <_svfiprintf_r+0x186>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	1d1a      	adds	r2, r3, #4
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	9203      	str	r2, [sp, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	bfb8      	it	lt
 800c098:	f04f 33ff 	movlt.w	r3, #4294967295
 800c09c:	3402      	adds	r4, #2
 800c09e:	9305      	str	r3, [sp, #20]
 800c0a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c168 <_svfiprintf_r+0x1f8>
 800c0a4:	7821      	ldrb	r1, [r4, #0]
 800c0a6:	2203      	movs	r2, #3
 800c0a8:	4650      	mov	r0, sl
 800c0aa:	f7f4 f891 	bl	80001d0 <memchr>
 800c0ae:	b138      	cbz	r0, 800c0c0 <_svfiprintf_r+0x150>
 800c0b0:	9b04      	ldr	r3, [sp, #16]
 800c0b2:	eba0 000a 	sub.w	r0, r0, sl
 800c0b6:	2240      	movs	r2, #64	; 0x40
 800c0b8:	4082      	lsls	r2, r0
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	3401      	adds	r4, #1
 800c0be:	9304      	str	r3, [sp, #16]
 800c0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c4:	4825      	ldr	r0, [pc, #148]	; (800c15c <_svfiprintf_r+0x1ec>)
 800c0c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0ca:	2206      	movs	r2, #6
 800c0cc:	f7f4 f880 	bl	80001d0 <memchr>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d038      	beq.n	800c146 <_svfiprintf_r+0x1d6>
 800c0d4:	4b22      	ldr	r3, [pc, #136]	; (800c160 <_svfiprintf_r+0x1f0>)
 800c0d6:	bb1b      	cbnz	r3, 800c120 <_svfiprintf_r+0x1b0>
 800c0d8:	9b03      	ldr	r3, [sp, #12]
 800c0da:	3307      	adds	r3, #7
 800c0dc:	f023 0307 	bic.w	r3, r3, #7
 800c0e0:	3308      	adds	r3, #8
 800c0e2:	9303      	str	r3, [sp, #12]
 800c0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e6:	4433      	add	r3, r6
 800c0e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ea:	e768      	b.n	800bfbe <_svfiprintf_r+0x4e>
 800c0ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0f0:	460c      	mov	r4, r1
 800c0f2:	2001      	movs	r0, #1
 800c0f4:	e7a6      	b.n	800c044 <_svfiprintf_r+0xd4>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	3401      	adds	r4, #1
 800c0fa:	9305      	str	r3, [sp, #20]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	f04f 0c0a 	mov.w	ip, #10
 800c102:	4620      	mov	r0, r4
 800c104:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c108:	3a30      	subs	r2, #48	; 0x30
 800c10a:	2a09      	cmp	r2, #9
 800c10c:	d903      	bls.n	800c116 <_svfiprintf_r+0x1a6>
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d0c6      	beq.n	800c0a0 <_svfiprintf_r+0x130>
 800c112:	9105      	str	r1, [sp, #20]
 800c114:	e7c4      	b.n	800c0a0 <_svfiprintf_r+0x130>
 800c116:	fb0c 2101 	mla	r1, ip, r1, r2
 800c11a:	4604      	mov	r4, r0
 800c11c:	2301      	movs	r3, #1
 800c11e:	e7f0      	b.n	800c102 <_svfiprintf_r+0x192>
 800c120:	ab03      	add	r3, sp, #12
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	462a      	mov	r2, r5
 800c126:	4b0f      	ldr	r3, [pc, #60]	; (800c164 <_svfiprintf_r+0x1f4>)
 800c128:	a904      	add	r1, sp, #16
 800c12a:	4638      	mov	r0, r7
 800c12c:	f7fc fce8 	bl	8008b00 <_printf_float>
 800c130:	1c42      	adds	r2, r0, #1
 800c132:	4606      	mov	r6, r0
 800c134:	d1d6      	bne.n	800c0e4 <_svfiprintf_r+0x174>
 800c136:	89ab      	ldrh	r3, [r5, #12]
 800c138:	065b      	lsls	r3, r3, #25
 800c13a:	f53f af2d 	bmi.w	800bf98 <_svfiprintf_r+0x28>
 800c13e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c140:	b01d      	add	sp, #116	; 0x74
 800c142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c146:	ab03      	add	r3, sp, #12
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	462a      	mov	r2, r5
 800c14c:	4b05      	ldr	r3, [pc, #20]	; (800c164 <_svfiprintf_r+0x1f4>)
 800c14e:	a904      	add	r1, sp, #16
 800c150:	4638      	mov	r0, r7
 800c152:	f7fc ff79 	bl	8009048 <_printf_i>
 800c156:	e7eb      	b.n	800c130 <_svfiprintf_r+0x1c0>
 800c158:	0800faa9 	.word	0x0800faa9
 800c15c:	0800fab3 	.word	0x0800fab3
 800c160:	08008b01 	.word	0x08008b01
 800c164:	0800bebd 	.word	0x0800bebd
 800c168:	0800faaf 	.word	0x0800faaf

0800c16c <__sflush_r>:
 800c16c:	898a      	ldrh	r2, [r1, #12]
 800c16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c172:	4605      	mov	r5, r0
 800c174:	0710      	lsls	r0, r2, #28
 800c176:	460c      	mov	r4, r1
 800c178:	d458      	bmi.n	800c22c <__sflush_r+0xc0>
 800c17a:	684b      	ldr	r3, [r1, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	dc05      	bgt.n	800c18c <__sflush_r+0x20>
 800c180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c182:	2b00      	cmp	r3, #0
 800c184:	dc02      	bgt.n	800c18c <__sflush_r+0x20>
 800c186:	2000      	movs	r0, #0
 800c188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c18c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c18e:	2e00      	cmp	r6, #0
 800c190:	d0f9      	beq.n	800c186 <__sflush_r+0x1a>
 800c192:	2300      	movs	r3, #0
 800c194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c198:	682f      	ldr	r7, [r5, #0]
 800c19a:	6a21      	ldr	r1, [r4, #32]
 800c19c:	602b      	str	r3, [r5, #0]
 800c19e:	d032      	beq.n	800c206 <__sflush_r+0x9a>
 800c1a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1a2:	89a3      	ldrh	r3, [r4, #12]
 800c1a4:	075a      	lsls	r2, r3, #29
 800c1a6:	d505      	bpl.n	800c1b4 <__sflush_r+0x48>
 800c1a8:	6863      	ldr	r3, [r4, #4]
 800c1aa:	1ac0      	subs	r0, r0, r3
 800c1ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1ae:	b10b      	cbz	r3, 800c1b4 <__sflush_r+0x48>
 800c1b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1b2:	1ac0      	subs	r0, r0, r3
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1ba:	6a21      	ldr	r1, [r4, #32]
 800c1bc:	4628      	mov	r0, r5
 800c1be:	47b0      	blx	r6
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	d106      	bne.n	800c1d4 <__sflush_r+0x68>
 800c1c6:	6829      	ldr	r1, [r5, #0]
 800c1c8:	291d      	cmp	r1, #29
 800c1ca:	d82b      	bhi.n	800c224 <__sflush_r+0xb8>
 800c1cc:	4a29      	ldr	r2, [pc, #164]	; (800c274 <__sflush_r+0x108>)
 800c1ce:	410a      	asrs	r2, r1
 800c1d0:	07d6      	lsls	r6, r2, #31
 800c1d2:	d427      	bmi.n	800c224 <__sflush_r+0xb8>
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	6062      	str	r2, [r4, #4]
 800c1d8:	04d9      	lsls	r1, r3, #19
 800c1da:	6922      	ldr	r2, [r4, #16]
 800c1dc:	6022      	str	r2, [r4, #0]
 800c1de:	d504      	bpl.n	800c1ea <__sflush_r+0x7e>
 800c1e0:	1c42      	adds	r2, r0, #1
 800c1e2:	d101      	bne.n	800c1e8 <__sflush_r+0x7c>
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	b903      	cbnz	r3, 800c1ea <__sflush_r+0x7e>
 800c1e8:	6560      	str	r0, [r4, #84]	; 0x54
 800c1ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1ec:	602f      	str	r7, [r5, #0]
 800c1ee:	2900      	cmp	r1, #0
 800c1f0:	d0c9      	beq.n	800c186 <__sflush_r+0x1a>
 800c1f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1f6:	4299      	cmp	r1, r3
 800c1f8:	d002      	beq.n	800c200 <__sflush_r+0x94>
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	f7fe face 	bl	800a79c <_free_r>
 800c200:	2000      	movs	r0, #0
 800c202:	6360      	str	r0, [r4, #52]	; 0x34
 800c204:	e7c0      	b.n	800c188 <__sflush_r+0x1c>
 800c206:	2301      	movs	r3, #1
 800c208:	4628      	mov	r0, r5
 800c20a:	47b0      	blx	r6
 800c20c:	1c41      	adds	r1, r0, #1
 800c20e:	d1c8      	bne.n	800c1a2 <__sflush_r+0x36>
 800c210:	682b      	ldr	r3, [r5, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d0c5      	beq.n	800c1a2 <__sflush_r+0x36>
 800c216:	2b1d      	cmp	r3, #29
 800c218:	d001      	beq.n	800c21e <__sflush_r+0xb2>
 800c21a:	2b16      	cmp	r3, #22
 800c21c:	d101      	bne.n	800c222 <__sflush_r+0xb6>
 800c21e:	602f      	str	r7, [r5, #0]
 800c220:	e7b1      	b.n	800c186 <__sflush_r+0x1a>
 800c222:	89a3      	ldrh	r3, [r4, #12]
 800c224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c228:	81a3      	strh	r3, [r4, #12]
 800c22a:	e7ad      	b.n	800c188 <__sflush_r+0x1c>
 800c22c:	690f      	ldr	r7, [r1, #16]
 800c22e:	2f00      	cmp	r7, #0
 800c230:	d0a9      	beq.n	800c186 <__sflush_r+0x1a>
 800c232:	0793      	lsls	r3, r2, #30
 800c234:	680e      	ldr	r6, [r1, #0]
 800c236:	bf08      	it	eq
 800c238:	694b      	ldreq	r3, [r1, #20]
 800c23a:	600f      	str	r7, [r1, #0]
 800c23c:	bf18      	it	ne
 800c23e:	2300      	movne	r3, #0
 800c240:	eba6 0807 	sub.w	r8, r6, r7
 800c244:	608b      	str	r3, [r1, #8]
 800c246:	f1b8 0f00 	cmp.w	r8, #0
 800c24a:	dd9c      	ble.n	800c186 <__sflush_r+0x1a>
 800c24c:	6a21      	ldr	r1, [r4, #32]
 800c24e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c250:	4643      	mov	r3, r8
 800c252:	463a      	mov	r2, r7
 800c254:	4628      	mov	r0, r5
 800c256:	47b0      	blx	r6
 800c258:	2800      	cmp	r0, #0
 800c25a:	dc06      	bgt.n	800c26a <__sflush_r+0xfe>
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c262:	81a3      	strh	r3, [r4, #12]
 800c264:	f04f 30ff 	mov.w	r0, #4294967295
 800c268:	e78e      	b.n	800c188 <__sflush_r+0x1c>
 800c26a:	4407      	add	r7, r0
 800c26c:	eba8 0800 	sub.w	r8, r8, r0
 800c270:	e7e9      	b.n	800c246 <__sflush_r+0xda>
 800c272:	bf00      	nop
 800c274:	dfbffffe 	.word	0xdfbffffe

0800c278 <_fflush_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	690b      	ldr	r3, [r1, #16]
 800c27c:	4605      	mov	r5, r0
 800c27e:	460c      	mov	r4, r1
 800c280:	b913      	cbnz	r3, 800c288 <_fflush_r+0x10>
 800c282:	2500      	movs	r5, #0
 800c284:	4628      	mov	r0, r5
 800c286:	bd38      	pop	{r3, r4, r5, pc}
 800c288:	b118      	cbz	r0, 800c292 <_fflush_r+0x1a>
 800c28a:	6a03      	ldr	r3, [r0, #32]
 800c28c:	b90b      	cbnz	r3, 800c292 <_fflush_r+0x1a>
 800c28e:	f7fd fa99 	bl	80097c4 <__sinit>
 800c292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d0f3      	beq.n	800c282 <_fflush_r+0xa>
 800c29a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c29c:	07d0      	lsls	r0, r2, #31
 800c29e:	d404      	bmi.n	800c2aa <_fflush_r+0x32>
 800c2a0:	0599      	lsls	r1, r3, #22
 800c2a2:	d402      	bmi.n	800c2aa <_fflush_r+0x32>
 800c2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2a6:	f7fd fbe8 	bl	8009a7a <__retarget_lock_acquire_recursive>
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	f7ff ff5d 	bl	800c16c <__sflush_r>
 800c2b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2b4:	07da      	lsls	r2, r3, #31
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	d4e4      	bmi.n	800c284 <_fflush_r+0xc>
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	059b      	lsls	r3, r3, #22
 800c2be:	d4e1      	bmi.n	800c284 <_fflush_r+0xc>
 800c2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2c2:	f7fd fbdb 	bl	8009a7c <__retarget_lock_release_recursive>
 800c2c6:	e7dd      	b.n	800c284 <_fflush_r+0xc>

0800c2c8 <memmove>:
 800c2c8:	4288      	cmp	r0, r1
 800c2ca:	b510      	push	{r4, lr}
 800c2cc:	eb01 0402 	add.w	r4, r1, r2
 800c2d0:	d902      	bls.n	800c2d8 <memmove+0x10>
 800c2d2:	4284      	cmp	r4, r0
 800c2d4:	4623      	mov	r3, r4
 800c2d6:	d807      	bhi.n	800c2e8 <memmove+0x20>
 800c2d8:	1e43      	subs	r3, r0, #1
 800c2da:	42a1      	cmp	r1, r4
 800c2dc:	d008      	beq.n	800c2f0 <memmove+0x28>
 800c2de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2e6:	e7f8      	b.n	800c2da <memmove+0x12>
 800c2e8:	4402      	add	r2, r0
 800c2ea:	4601      	mov	r1, r0
 800c2ec:	428a      	cmp	r2, r1
 800c2ee:	d100      	bne.n	800c2f2 <memmove+0x2a>
 800c2f0:	bd10      	pop	{r4, pc}
 800c2f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2fa:	e7f7      	b.n	800c2ec <memmove+0x24>

0800c2fc <strncmp>:
 800c2fc:	b510      	push	{r4, lr}
 800c2fe:	b16a      	cbz	r2, 800c31c <strncmp+0x20>
 800c300:	3901      	subs	r1, #1
 800c302:	1884      	adds	r4, r0, r2
 800c304:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c308:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d103      	bne.n	800c318 <strncmp+0x1c>
 800c310:	42a0      	cmp	r0, r4
 800c312:	d001      	beq.n	800c318 <strncmp+0x1c>
 800c314:	2a00      	cmp	r2, #0
 800c316:	d1f5      	bne.n	800c304 <strncmp+0x8>
 800c318:	1ad0      	subs	r0, r2, r3
 800c31a:	bd10      	pop	{r4, pc}
 800c31c:	4610      	mov	r0, r2
 800c31e:	e7fc      	b.n	800c31a <strncmp+0x1e>

0800c320 <nan>:
 800c320:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c328 <nan+0x8>
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	00000000 	.word	0x00000000
 800c32c:	7ff80000 	.word	0x7ff80000

0800c330 <__assert_func>:
 800c330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c332:	4614      	mov	r4, r2
 800c334:	461a      	mov	r2, r3
 800c336:	4b09      	ldr	r3, [pc, #36]	; (800c35c <__assert_func+0x2c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4605      	mov	r5, r0
 800c33c:	68d8      	ldr	r0, [r3, #12]
 800c33e:	b14c      	cbz	r4, 800c354 <__assert_func+0x24>
 800c340:	4b07      	ldr	r3, [pc, #28]	; (800c360 <__assert_func+0x30>)
 800c342:	9100      	str	r1, [sp, #0]
 800c344:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c348:	4906      	ldr	r1, [pc, #24]	; (800c364 <__assert_func+0x34>)
 800c34a:	462b      	mov	r3, r5
 800c34c:	f000 fbca 	bl	800cae4 <fiprintf>
 800c350:	f000 fbda 	bl	800cb08 <abort>
 800c354:	4b04      	ldr	r3, [pc, #16]	; (800c368 <__assert_func+0x38>)
 800c356:	461c      	mov	r4, r3
 800c358:	e7f3      	b.n	800c342 <__assert_func+0x12>
 800c35a:	bf00      	nop
 800c35c:	20000064 	.word	0x20000064
 800c360:	0800fac2 	.word	0x0800fac2
 800c364:	0800facf 	.word	0x0800facf
 800c368:	0800fafd 	.word	0x0800fafd

0800c36c <_calloc_r>:
 800c36c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c36e:	fba1 2402 	umull	r2, r4, r1, r2
 800c372:	b94c      	cbnz	r4, 800c388 <_calloc_r+0x1c>
 800c374:	4611      	mov	r1, r2
 800c376:	9201      	str	r2, [sp, #4]
 800c378:	f7fc fa96 	bl	80088a8 <_malloc_r>
 800c37c:	9a01      	ldr	r2, [sp, #4]
 800c37e:	4605      	mov	r5, r0
 800c380:	b930      	cbnz	r0, 800c390 <_calloc_r+0x24>
 800c382:	4628      	mov	r0, r5
 800c384:	b003      	add	sp, #12
 800c386:	bd30      	pop	{r4, r5, pc}
 800c388:	220c      	movs	r2, #12
 800c38a:	6002      	str	r2, [r0, #0]
 800c38c:	2500      	movs	r5, #0
 800c38e:	e7f8      	b.n	800c382 <_calloc_r+0x16>
 800c390:	4621      	mov	r1, r4
 800c392:	f7fd fae4 	bl	800995e <memset>
 800c396:	e7f4      	b.n	800c382 <_calloc_r+0x16>

0800c398 <rshift>:
 800c398:	6903      	ldr	r3, [r0, #16]
 800c39a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c39e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c3a6:	f100 0414 	add.w	r4, r0, #20
 800c3aa:	dd45      	ble.n	800c438 <rshift+0xa0>
 800c3ac:	f011 011f 	ands.w	r1, r1, #31
 800c3b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c3b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c3b8:	d10c      	bne.n	800c3d4 <rshift+0x3c>
 800c3ba:	f100 0710 	add.w	r7, r0, #16
 800c3be:	4629      	mov	r1, r5
 800c3c0:	42b1      	cmp	r1, r6
 800c3c2:	d334      	bcc.n	800c42e <rshift+0x96>
 800c3c4:	1a9b      	subs	r3, r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	1eea      	subs	r2, r5, #3
 800c3ca:	4296      	cmp	r6, r2
 800c3cc:	bf38      	it	cc
 800c3ce:	2300      	movcc	r3, #0
 800c3d0:	4423      	add	r3, r4
 800c3d2:	e015      	b.n	800c400 <rshift+0x68>
 800c3d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c3d8:	f1c1 0820 	rsb	r8, r1, #32
 800c3dc:	40cf      	lsrs	r7, r1
 800c3de:	f105 0e04 	add.w	lr, r5, #4
 800c3e2:	46a1      	mov	r9, r4
 800c3e4:	4576      	cmp	r6, lr
 800c3e6:	46f4      	mov	ip, lr
 800c3e8:	d815      	bhi.n	800c416 <rshift+0x7e>
 800c3ea:	1a9a      	subs	r2, r3, r2
 800c3ec:	0092      	lsls	r2, r2, #2
 800c3ee:	3a04      	subs	r2, #4
 800c3f0:	3501      	adds	r5, #1
 800c3f2:	42ae      	cmp	r6, r5
 800c3f4:	bf38      	it	cc
 800c3f6:	2200      	movcc	r2, #0
 800c3f8:	18a3      	adds	r3, r4, r2
 800c3fa:	50a7      	str	r7, [r4, r2]
 800c3fc:	b107      	cbz	r7, 800c400 <rshift+0x68>
 800c3fe:	3304      	adds	r3, #4
 800c400:	1b1a      	subs	r2, r3, r4
 800c402:	42a3      	cmp	r3, r4
 800c404:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c408:	bf08      	it	eq
 800c40a:	2300      	moveq	r3, #0
 800c40c:	6102      	str	r2, [r0, #16]
 800c40e:	bf08      	it	eq
 800c410:	6143      	streq	r3, [r0, #20]
 800c412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c416:	f8dc c000 	ldr.w	ip, [ip]
 800c41a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c41e:	ea4c 0707 	orr.w	r7, ip, r7
 800c422:	f849 7b04 	str.w	r7, [r9], #4
 800c426:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c42a:	40cf      	lsrs	r7, r1
 800c42c:	e7da      	b.n	800c3e4 <rshift+0x4c>
 800c42e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c432:	f847 cf04 	str.w	ip, [r7, #4]!
 800c436:	e7c3      	b.n	800c3c0 <rshift+0x28>
 800c438:	4623      	mov	r3, r4
 800c43a:	e7e1      	b.n	800c400 <rshift+0x68>

0800c43c <__hexdig_fun>:
 800c43c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c440:	2b09      	cmp	r3, #9
 800c442:	d802      	bhi.n	800c44a <__hexdig_fun+0xe>
 800c444:	3820      	subs	r0, #32
 800c446:	b2c0      	uxtb	r0, r0
 800c448:	4770      	bx	lr
 800c44a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c44e:	2b05      	cmp	r3, #5
 800c450:	d801      	bhi.n	800c456 <__hexdig_fun+0x1a>
 800c452:	3847      	subs	r0, #71	; 0x47
 800c454:	e7f7      	b.n	800c446 <__hexdig_fun+0xa>
 800c456:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c45a:	2b05      	cmp	r3, #5
 800c45c:	d801      	bhi.n	800c462 <__hexdig_fun+0x26>
 800c45e:	3827      	subs	r0, #39	; 0x27
 800c460:	e7f1      	b.n	800c446 <__hexdig_fun+0xa>
 800c462:	2000      	movs	r0, #0
 800c464:	4770      	bx	lr
	...

0800c468 <__gethex>:
 800c468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46c:	4617      	mov	r7, r2
 800c46e:	680a      	ldr	r2, [r1, #0]
 800c470:	b085      	sub	sp, #20
 800c472:	f102 0b02 	add.w	fp, r2, #2
 800c476:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c47a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c47e:	4681      	mov	r9, r0
 800c480:	468a      	mov	sl, r1
 800c482:	9302      	str	r3, [sp, #8]
 800c484:	32fe      	adds	r2, #254	; 0xfe
 800c486:	eb02 030b 	add.w	r3, r2, fp
 800c48a:	46d8      	mov	r8, fp
 800c48c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c490:	9301      	str	r3, [sp, #4]
 800c492:	2830      	cmp	r0, #48	; 0x30
 800c494:	d0f7      	beq.n	800c486 <__gethex+0x1e>
 800c496:	f7ff ffd1 	bl	800c43c <__hexdig_fun>
 800c49a:	4604      	mov	r4, r0
 800c49c:	2800      	cmp	r0, #0
 800c49e:	d138      	bne.n	800c512 <__gethex+0xaa>
 800c4a0:	49a7      	ldr	r1, [pc, #668]	; (800c740 <__gethex+0x2d8>)
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	f7ff ff29 	bl	800c2fc <strncmp>
 800c4aa:	4606      	mov	r6, r0
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d169      	bne.n	800c584 <__gethex+0x11c>
 800c4b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c4b4:	465d      	mov	r5, fp
 800c4b6:	f7ff ffc1 	bl	800c43c <__hexdig_fun>
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d064      	beq.n	800c588 <__gethex+0x120>
 800c4be:	465a      	mov	r2, fp
 800c4c0:	7810      	ldrb	r0, [r2, #0]
 800c4c2:	2830      	cmp	r0, #48	; 0x30
 800c4c4:	4690      	mov	r8, r2
 800c4c6:	f102 0201 	add.w	r2, r2, #1
 800c4ca:	d0f9      	beq.n	800c4c0 <__gethex+0x58>
 800c4cc:	f7ff ffb6 	bl	800c43c <__hexdig_fun>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	fab0 f480 	clz	r4, r0
 800c4d6:	0964      	lsrs	r4, r4, #5
 800c4d8:	465e      	mov	r6, fp
 800c4da:	9301      	str	r3, [sp, #4]
 800c4dc:	4642      	mov	r2, r8
 800c4de:	4615      	mov	r5, r2
 800c4e0:	3201      	adds	r2, #1
 800c4e2:	7828      	ldrb	r0, [r5, #0]
 800c4e4:	f7ff ffaa 	bl	800c43c <__hexdig_fun>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d1f8      	bne.n	800c4de <__gethex+0x76>
 800c4ec:	4994      	ldr	r1, [pc, #592]	; (800c740 <__gethex+0x2d8>)
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	f7ff ff03 	bl	800c2fc <strncmp>
 800c4f6:	b978      	cbnz	r0, 800c518 <__gethex+0xb0>
 800c4f8:	b946      	cbnz	r6, 800c50c <__gethex+0xa4>
 800c4fa:	1c6e      	adds	r6, r5, #1
 800c4fc:	4632      	mov	r2, r6
 800c4fe:	4615      	mov	r5, r2
 800c500:	3201      	adds	r2, #1
 800c502:	7828      	ldrb	r0, [r5, #0]
 800c504:	f7ff ff9a 	bl	800c43c <__hexdig_fun>
 800c508:	2800      	cmp	r0, #0
 800c50a:	d1f8      	bne.n	800c4fe <__gethex+0x96>
 800c50c:	1b73      	subs	r3, r6, r5
 800c50e:	009e      	lsls	r6, r3, #2
 800c510:	e004      	b.n	800c51c <__gethex+0xb4>
 800c512:	2400      	movs	r4, #0
 800c514:	4626      	mov	r6, r4
 800c516:	e7e1      	b.n	800c4dc <__gethex+0x74>
 800c518:	2e00      	cmp	r6, #0
 800c51a:	d1f7      	bne.n	800c50c <__gethex+0xa4>
 800c51c:	782b      	ldrb	r3, [r5, #0]
 800c51e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c522:	2b50      	cmp	r3, #80	; 0x50
 800c524:	d13d      	bne.n	800c5a2 <__gethex+0x13a>
 800c526:	786b      	ldrb	r3, [r5, #1]
 800c528:	2b2b      	cmp	r3, #43	; 0x2b
 800c52a:	d02f      	beq.n	800c58c <__gethex+0x124>
 800c52c:	2b2d      	cmp	r3, #45	; 0x2d
 800c52e:	d031      	beq.n	800c594 <__gethex+0x12c>
 800c530:	1c69      	adds	r1, r5, #1
 800c532:	f04f 0b00 	mov.w	fp, #0
 800c536:	7808      	ldrb	r0, [r1, #0]
 800c538:	f7ff ff80 	bl	800c43c <__hexdig_fun>
 800c53c:	1e42      	subs	r2, r0, #1
 800c53e:	b2d2      	uxtb	r2, r2
 800c540:	2a18      	cmp	r2, #24
 800c542:	d82e      	bhi.n	800c5a2 <__gethex+0x13a>
 800c544:	f1a0 0210 	sub.w	r2, r0, #16
 800c548:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c54c:	f7ff ff76 	bl	800c43c <__hexdig_fun>
 800c550:	f100 3cff 	add.w	ip, r0, #4294967295
 800c554:	fa5f fc8c 	uxtb.w	ip, ip
 800c558:	f1bc 0f18 	cmp.w	ip, #24
 800c55c:	d91d      	bls.n	800c59a <__gethex+0x132>
 800c55e:	f1bb 0f00 	cmp.w	fp, #0
 800c562:	d000      	beq.n	800c566 <__gethex+0xfe>
 800c564:	4252      	negs	r2, r2
 800c566:	4416      	add	r6, r2
 800c568:	f8ca 1000 	str.w	r1, [sl]
 800c56c:	b1dc      	cbz	r4, 800c5a6 <__gethex+0x13e>
 800c56e:	9b01      	ldr	r3, [sp, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	bf14      	ite	ne
 800c574:	f04f 0800 	movne.w	r8, #0
 800c578:	f04f 0806 	moveq.w	r8, #6
 800c57c:	4640      	mov	r0, r8
 800c57e:	b005      	add	sp, #20
 800c580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c584:	4645      	mov	r5, r8
 800c586:	4626      	mov	r6, r4
 800c588:	2401      	movs	r4, #1
 800c58a:	e7c7      	b.n	800c51c <__gethex+0xb4>
 800c58c:	f04f 0b00 	mov.w	fp, #0
 800c590:	1ca9      	adds	r1, r5, #2
 800c592:	e7d0      	b.n	800c536 <__gethex+0xce>
 800c594:	f04f 0b01 	mov.w	fp, #1
 800c598:	e7fa      	b.n	800c590 <__gethex+0x128>
 800c59a:	230a      	movs	r3, #10
 800c59c:	fb03 0002 	mla	r0, r3, r2, r0
 800c5a0:	e7d0      	b.n	800c544 <__gethex+0xdc>
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	e7e0      	b.n	800c568 <__gethex+0x100>
 800c5a6:	eba5 0308 	sub.w	r3, r5, r8
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	4621      	mov	r1, r4
 800c5ae:	2b07      	cmp	r3, #7
 800c5b0:	dc0a      	bgt.n	800c5c8 <__gethex+0x160>
 800c5b2:	4648      	mov	r0, r9
 800c5b4:	f7fe f93e 	bl	800a834 <_Balloc>
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	b940      	cbnz	r0, 800c5ce <__gethex+0x166>
 800c5bc:	4b61      	ldr	r3, [pc, #388]	; (800c744 <__gethex+0x2dc>)
 800c5be:	4602      	mov	r2, r0
 800c5c0:	21e4      	movs	r1, #228	; 0xe4
 800c5c2:	4861      	ldr	r0, [pc, #388]	; (800c748 <__gethex+0x2e0>)
 800c5c4:	f7ff feb4 	bl	800c330 <__assert_func>
 800c5c8:	3101      	adds	r1, #1
 800c5ca:	105b      	asrs	r3, r3, #1
 800c5cc:	e7ef      	b.n	800c5ae <__gethex+0x146>
 800c5ce:	f100 0a14 	add.w	sl, r0, #20
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	495a      	ldr	r1, [pc, #360]	; (800c740 <__gethex+0x2d8>)
 800c5d6:	f8cd a004 	str.w	sl, [sp, #4]
 800c5da:	469b      	mov	fp, r3
 800c5dc:	45a8      	cmp	r8, r5
 800c5de:	d342      	bcc.n	800c666 <__gethex+0x1fe>
 800c5e0:	9801      	ldr	r0, [sp, #4]
 800c5e2:	f840 bb04 	str.w	fp, [r0], #4
 800c5e6:	eba0 000a 	sub.w	r0, r0, sl
 800c5ea:	1080      	asrs	r0, r0, #2
 800c5ec:	6120      	str	r0, [r4, #16]
 800c5ee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c5f2:	4658      	mov	r0, fp
 800c5f4:	f7fe fa10 	bl	800aa18 <__hi0bits>
 800c5f8:	683d      	ldr	r5, [r7, #0]
 800c5fa:	eba8 0000 	sub.w	r0, r8, r0
 800c5fe:	42a8      	cmp	r0, r5
 800c600:	dd59      	ble.n	800c6b6 <__gethex+0x24e>
 800c602:	eba0 0805 	sub.w	r8, r0, r5
 800c606:	4641      	mov	r1, r8
 800c608:	4620      	mov	r0, r4
 800c60a:	f7fe fd9f 	bl	800b14c <__any_on>
 800c60e:	4683      	mov	fp, r0
 800c610:	b1b8      	cbz	r0, 800c642 <__gethex+0x1da>
 800c612:	f108 33ff 	add.w	r3, r8, #4294967295
 800c616:	1159      	asrs	r1, r3, #5
 800c618:	f003 021f 	and.w	r2, r3, #31
 800c61c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c620:	f04f 0b01 	mov.w	fp, #1
 800c624:	fa0b f202 	lsl.w	r2, fp, r2
 800c628:	420a      	tst	r2, r1
 800c62a:	d00a      	beq.n	800c642 <__gethex+0x1da>
 800c62c:	455b      	cmp	r3, fp
 800c62e:	dd06      	ble.n	800c63e <__gethex+0x1d6>
 800c630:	f1a8 0102 	sub.w	r1, r8, #2
 800c634:	4620      	mov	r0, r4
 800c636:	f7fe fd89 	bl	800b14c <__any_on>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	d138      	bne.n	800c6b0 <__gethex+0x248>
 800c63e:	f04f 0b02 	mov.w	fp, #2
 800c642:	4641      	mov	r1, r8
 800c644:	4620      	mov	r0, r4
 800c646:	f7ff fea7 	bl	800c398 <rshift>
 800c64a:	4446      	add	r6, r8
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	42b3      	cmp	r3, r6
 800c650:	da41      	bge.n	800c6d6 <__gethex+0x26e>
 800c652:	4621      	mov	r1, r4
 800c654:	4648      	mov	r0, r9
 800c656:	f7fe f92d 	bl	800a8b4 <_Bfree>
 800c65a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c65c:	2300      	movs	r3, #0
 800c65e:	6013      	str	r3, [r2, #0]
 800c660:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c664:	e78a      	b.n	800c57c <__gethex+0x114>
 800c666:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c66a:	2a2e      	cmp	r2, #46	; 0x2e
 800c66c:	d014      	beq.n	800c698 <__gethex+0x230>
 800c66e:	2b20      	cmp	r3, #32
 800c670:	d106      	bne.n	800c680 <__gethex+0x218>
 800c672:	9b01      	ldr	r3, [sp, #4]
 800c674:	f843 bb04 	str.w	fp, [r3], #4
 800c678:	f04f 0b00 	mov.w	fp, #0
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	465b      	mov	r3, fp
 800c680:	7828      	ldrb	r0, [r5, #0]
 800c682:	9303      	str	r3, [sp, #12]
 800c684:	f7ff feda 	bl	800c43c <__hexdig_fun>
 800c688:	9b03      	ldr	r3, [sp, #12]
 800c68a:	f000 000f 	and.w	r0, r0, #15
 800c68e:	4098      	lsls	r0, r3
 800c690:	ea4b 0b00 	orr.w	fp, fp, r0
 800c694:	3304      	adds	r3, #4
 800c696:	e7a1      	b.n	800c5dc <__gethex+0x174>
 800c698:	45a8      	cmp	r8, r5
 800c69a:	d8e8      	bhi.n	800c66e <__gethex+0x206>
 800c69c:	2201      	movs	r2, #1
 800c69e:	4628      	mov	r0, r5
 800c6a0:	9303      	str	r3, [sp, #12]
 800c6a2:	f7ff fe2b 	bl	800c2fc <strncmp>
 800c6a6:	4926      	ldr	r1, [pc, #152]	; (800c740 <__gethex+0x2d8>)
 800c6a8:	9b03      	ldr	r3, [sp, #12]
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	d1df      	bne.n	800c66e <__gethex+0x206>
 800c6ae:	e795      	b.n	800c5dc <__gethex+0x174>
 800c6b0:	f04f 0b03 	mov.w	fp, #3
 800c6b4:	e7c5      	b.n	800c642 <__gethex+0x1da>
 800c6b6:	da0b      	bge.n	800c6d0 <__gethex+0x268>
 800c6b8:	eba5 0800 	sub.w	r8, r5, r0
 800c6bc:	4621      	mov	r1, r4
 800c6be:	4642      	mov	r2, r8
 800c6c0:	4648      	mov	r0, r9
 800c6c2:	f7fe fb11 	bl	800ace8 <__lshift>
 800c6c6:	eba6 0608 	sub.w	r6, r6, r8
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	f100 0a14 	add.w	sl, r0, #20
 800c6d0:	f04f 0b00 	mov.w	fp, #0
 800c6d4:	e7ba      	b.n	800c64c <__gethex+0x1e4>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	42b3      	cmp	r3, r6
 800c6da:	dd73      	ble.n	800c7c4 <__gethex+0x35c>
 800c6dc:	1b9e      	subs	r6, r3, r6
 800c6de:	42b5      	cmp	r5, r6
 800c6e0:	dc34      	bgt.n	800c74c <__gethex+0x2e4>
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	d023      	beq.n	800c730 <__gethex+0x2c8>
 800c6e8:	2b03      	cmp	r3, #3
 800c6ea:	d025      	beq.n	800c738 <__gethex+0x2d0>
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d115      	bne.n	800c71c <__gethex+0x2b4>
 800c6f0:	42b5      	cmp	r5, r6
 800c6f2:	d113      	bne.n	800c71c <__gethex+0x2b4>
 800c6f4:	2d01      	cmp	r5, #1
 800c6f6:	d10b      	bne.n	800c710 <__gethex+0x2a8>
 800c6f8:	9a02      	ldr	r2, [sp, #8]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6013      	str	r3, [r2, #0]
 800c6fe:	2301      	movs	r3, #1
 800c700:	6123      	str	r3, [r4, #16]
 800c702:	f8ca 3000 	str.w	r3, [sl]
 800c706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c708:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c70c:	601c      	str	r4, [r3, #0]
 800c70e:	e735      	b.n	800c57c <__gethex+0x114>
 800c710:	1e69      	subs	r1, r5, #1
 800c712:	4620      	mov	r0, r4
 800c714:	f7fe fd1a 	bl	800b14c <__any_on>
 800c718:	2800      	cmp	r0, #0
 800c71a:	d1ed      	bne.n	800c6f8 <__gethex+0x290>
 800c71c:	4621      	mov	r1, r4
 800c71e:	4648      	mov	r0, r9
 800c720:	f7fe f8c8 	bl	800a8b4 <_Bfree>
 800c724:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c726:	2300      	movs	r3, #0
 800c728:	6013      	str	r3, [r2, #0]
 800c72a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c72e:	e725      	b.n	800c57c <__gethex+0x114>
 800c730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1f2      	bne.n	800c71c <__gethex+0x2b4>
 800c736:	e7df      	b.n	800c6f8 <__gethex+0x290>
 800c738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1dc      	bne.n	800c6f8 <__gethex+0x290>
 800c73e:	e7ed      	b.n	800c71c <__gethex+0x2b4>
 800c740:	0800f954 	.word	0x0800f954
 800c744:	0800f7e9 	.word	0x0800f7e9
 800c748:	0800fafe 	.word	0x0800fafe
 800c74c:	f106 38ff 	add.w	r8, r6, #4294967295
 800c750:	f1bb 0f00 	cmp.w	fp, #0
 800c754:	d133      	bne.n	800c7be <__gethex+0x356>
 800c756:	f1b8 0f00 	cmp.w	r8, #0
 800c75a:	d004      	beq.n	800c766 <__gethex+0x2fe>
 800c75c:	4641      	mov	r1, r8
 800c75e:	4620      	mov	r0, r4
 800c760:	f7fe fcf4 	bl	800b14c <__any_on>
 800c764:	4683      	mov	fp, r0
 800c766:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c76a:	2301      	movs	r3, #1
 800c76c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c770:	f008 081f 	and.w	r8, r8, #31
 800c774:	fa03 f308 	lsl.w	r3, r3, r8
 800c778:	4213      	tst	r3, r2
 800c77a:	4631      	mov	r1, r6
 800c77c:	4620      	mov	r0, r4
 800c77e:	bf18      	it	ne
 800c780:	f04b 0b02 	orrne.w	fp, fp, #2
 800c784:	1bad      	subs	r5, r5, r6
 800c786:	f7ff fe07 	bl	800c398 <rshift>
 800c78a:	687e      	ldr	r6, [r7, #4]
 800c78c:	f04f 0802 	mov.w	r8, #2
 800c790:	f1bb 0f00 	cmp.w	fp, #0
 800c794:	d04a      	beq.n	800c82c <__gethex+0x3c4>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d016      	beq.n	800c7ca <__gethex+0x362>
 800c79c:	2b03      	cmp	r3, #3
 800c79e:	d018      	beq.n	800c7d2 <__gethex+0x36a>
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d109      	bne.n	800c7b8 <__gethex+0x350>
 800c7a4:	f01b 0f02 	tst.w	fp, #2
 800c7a8:	d006      	beq.n	800c7b8 <__gethex+0x350>
 800c7aa:	f8da 3000 	ldr.w	r3, [sl]
 800c7ae:	ea4b 0b03 	orr.w	fp, fp, r3
 800c7b2:	f01b 0f01 	tst.w	fp, #1
 800c7b6:	d10f      	bne.n	800c7d8 <__gethex+0x370>
 800c7b8:	f048 0810 	orr.w	r8, r8, #16
 800c7bc:	e036      	b.n	800c82c <__gethex+0x3c4>
 800c7be:	f04f 0b01 	mov.w	fp, #1
 800c7c2:	e7d0      	b.n	800c766 <__gethex+0x2fe>
 800c7c4:	f04f 0801 	mov.w	r8, #1
 800c7c8:	e7e2      	b.n	800c790 <__gethex+0x328>
 800c7ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7cc:	f1c3 0301 	rsb	r3, r3, #1
 800c7d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d0ef      	beq.n	800c7b8 <__gethex+0x350>
 800c7d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c7dc:	f104 0214 	add.w	r2, r4, #20
 800c7e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c7e4:	9301      	str	r3, [sp, #4]
 800c7e6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	4694      	mov	ip, r2
 800c7ee:	f852 1b04 	ldr.w	r1, [r2], #4
 800c7f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c7f6:	d01e      	beq.n	800c836 <__gethex+0x3ce>
 800c7f8:	3101      	adds	r1, #1
 800c7fa:	f8cc 1000 	str.w	r1, [ip]
 800c7fe:	f1b8 0f02 	cmp.w	r8, #2
 800c802:	f104 0214 	add.w	r2, r4, #20
 800c806:	d13d      	bne.n	800c884 <__gethex+0x41c>
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	3b01      	subs	r3, #1
 800c80c:	42ab      	cmp	r3, r5
 800c80e:	d10b      	bne.n	800c828 <__gethex+0x3c0>
 800c810:	1169      	asrs	r1, r5, #5
 800c812:	2301      	movs	r3, #1
 800c814:	f005 051f 	and.w	r5, r5, #31
 800c818:	fa03 f505 	lsl.w	r5, r3, r5
 800c81c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c820:	421d      	tst	r5, r3
 800c822:	bf18      	it	ne
 800c824:	f04f 0801 	movne.w	r8, #1
 800c828:	f048 0820 	orr.w	r8, r8, #32
 800c82c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c82e:	601c      	str	r4, [r3, #0]
 800c830:	9b02      	ldr	r3, [sp, #8]
 800c832:	601e      	str	r6, [r3, #0]
 800c834:	e6a2      	b.n	800c57c <__gethex+0x114>
 800c836:	4290      	cmp	r0, r2
 800c838:	f842 3c04 	str.w	r3, [r2, #-4]
 800c83c:	d8d6      	bhi.n	800c7ec <__gethex+0x384>
 800c83e:	68a2      	ldr	r2, [r4, #8]
 800c840:	4593      	cmp	fp, r2
 800c842:	db17      	blt.n	800c874 <__gethex+0x40c>
 800c844:	6861      	ldr	r1, [r4, #4]
 800c846:	4648      	mov	r0, r9
 800c848:	3101      	adds	r1, #1
 800c84a:	f7fd fff3 	bl	800a834 <_Balloc>
 800c84e:	4682      	mov	sl, r0
 800c850:	b918      	cbnz	r0, 800c85a <__gethex+0x3f2>
 800c852:	4b1b      	ldr	r3, [pc, #108]	; (800c8c0 <__gethex+0x458>)
 800c854:	4602      	mov	r2, r0
 800c856:	2184      	movs	r1, #132	; 0x84
 800c858:	e6b3      	b.n	800c5c2 <__gethex+0x15a>
 800c85a:	6922      	ldr	r2, [r4, #16]
 800c85c:	3202      	adds	r2, #2
 800c85e:	f104 010c 	add.w	r1, r4, #12
 800c862:	0092      	lsls	r2, r2, #2
 800c864:	300c      	adds	r0, #12
 800c866:	f7fd f90a 	bl	8009a7e <memcpy>
 800c86a:	4621      	mov	r1, r4
 800c86c:	4648      	mov	r0, r9
 800c86e:	f7fe f821 	bl	800a8b4 <_Bfree>
 800c872:	4654      	mov	r4, sl
 800c874:	6922      	ldr	r2, [r4, #16]
 800c876:	1c51      	adds	r1, r2, #1
 800c878:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c87c:	6121      	str	r1, [r4, #16]
 800c87e:	2101      	movs	r1, #1
 800c880:	6151      	str	r1, [r2, #20]
 800c882:	e7bc      	b.n	800c7fe <__gethex+0x396>
 800c884:	6921      	ldr	r1, [r4, #16]
 800c886:	4559      	cmp	r1, fp
 800c888:	dd0b      	ble.n	800c8a2 <__gethex+0x43a>
 800c88a:	2101      	movs	r1, #1
 800c88c:	4620      	mov	r0, r4
 800c88e:	f7ff fd83 	bl	800c398 <rshift>
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	3601      	adds	r6, #1
 800c896:	42b3      	cmp	r3, r6
 800c898:	f6ff aedb 	blt.w	800c652 <__gethex+0x1ea>
 800c89c:	f04f 0801 	mov.w	r8, #1
 800c8a0:	e7c2      	b.n	800c828 <__gethex+0x3c0>
 800c8a2:	f015 051f 	ands.w	r5, r5, #31
 800c8a6:	d0f9      	beq.n	800c89c <__gethex+0x434>
 800c8a8:	9b01      	ldr	r3, [sp, #4]
 800c8aa:	441a      	add	r2, r3
 800c8ac:	f1c5 0520 	rsb	r5, r5, #32
 800c8b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c8b4:	f7fe f8b0 	bl	800aa18 <__hi0bits>
 800c8b8:	42a8      	cmp	r0, r5
 800c8ba:	dbe6      	blt.n	800c88a <__gethex+0x422>
 800c8bc:	e7ee      	b.n	800c89c <__gethex+0x434>
 800c8be:	bf00      	nop
 800c8c0:	0800f7e9 	.word	0x0800f7e9

0800c8c4 <L_shift>:
 800c8c4:	f1c2 0208 	rsb	r2, r2, #8
 800c8c8:	0092      	lsls	r2, r2, #2
 800c8ca:	b570      	push	{r4, r5, r6, lr}
 800c8cc:	f1c2 0620 	rsb	r6, r2, #32
 800c8d0:	6843      	ldr	r3, [r0, #4]
 800c8d2:	6804      	ldr	r4, [r0, #0]
 800c8d4:	fa03 f506 	lsl.w	r5, r3, r6
 800c8d8:	432c      	orrs	r4, r5
 800c8da:	40d3      	lsrs	r3, r2
 800c8dc:	6004      	str	r4, [r0, #0]
 800c8de:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8e2:	4288      	cmp	r0, r1
 800c8e4:	d3f4      	bcc.n	800c8d0 <L_shift+0xc>
 800c8e6:	bd70      	pop	{r4, r5, r6, pc}

0800c8e8 <__match>:
 800c8e8:	b530      	push	{r4, r5, lr}
 800c8ea:	6803      	ldr	r3, [r0, #0]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8f2:	b914      	cbnz	r4, 800c8fa <__match+0x12>
 800c8f4:	6003      	str	r3, [r0, #0]
 800c8f6:	2001      	movs	r0, #1
 800c8f8:	bd30      	pop	{r4, r5, pc}
 800c8fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c902:	2d19      	cmp	r5, #25
 800c904:	bf98      	it	ls
 800c906:	3220      	addls	r2, #32
 800c908:	42a2      	cmp	r2, r4
 800c90a:	d0f0      	beq.n	800c8ee <__match+0x6>
 800c90c:	2000      	movs	r0, #0
 800c90e:	e7f3      	b.n	800c8f8 <__match+0x10>

0800c910 <__hexnan>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	680b      	ldr	r3, [r1, #0]
 800c916:	6801      	ldr	r1, [r0, #0]
 800c918:	115e      	asrs	r6, r3, #5
 800c91a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c91e:	f013 031f 	ands.w	r3, r3, #31
 800c922:	b087      	sub	sp, #28
 800c924:	bf18      	it	ne
 800c926:	3604      	addne	r6, #4
 800c928:	2500      	movs	r5, #0
 800c92a:	1f37      	subs	r7, r6, #4
 800c92c:	4682      	mov	sl, r0
 800c92e:	4690      	mov	r8, r2
 800c930:	9301      	str	r3, [sp, #4]
 800c932:	f846 5c04 	str.w	r5, [r6, #-4]
 800c936:	46b9      	mov	r9, r7
 800c938:	463c      	mov	r4, r7
 800c93a:	9502      	str	r5, [sp, #8]
 800c93c:	46ab      	mov	fp, r5
 800c93e:	784a      	ldrb	r2, [r1, #1]
 800c940:	1c4b      	adds	r3, r1, #1
 800c942:	9303      	str	r3, [sp, #12]
 800c944:	b342      	cbz	r2, 800c998 <__hexnan+0x88>
 800c946:	4610      	mov	r0, r2
 800c948:	9105      	str	r1, [sp, #20]
 800c94a:	9204      	str	r2, [sp, #16]
 800c94c:	f7ff fd76 	bl	800c43c <__hexdig_fun>
 800c950:	2800      	cmp	r0, #0
 800c952:	d14f      	bne.n	800c9f4 <__hexnan+0xe4>
 800c954:	9a04      	ldr	r2, [sp, #16]
 800c956:	9905      	ldr	r1, [sp, #20]
 800c958:	2a20      	cmp	r2, #32
 800c95a:	d818      	bhi.n	800c98e <__hexnan+0x7e>
 800c95c:	9b02      	ldr	r3, [sp, #8]
 800c95e:	459b      	cmp	fp, r3
 800c960:	dd13      	ble.n	800c98a <__hexnan+0x7a>
 800c962:	454c      	cmp	r4, r9
 800c964:	d206      	bcs.n	800c974 <__hexnan+0x64>
 800c966:	2d07      	cmp	r5, #7
 800c968:	dc04      	bgt.n	800c974 <__hexnan+0x64>
 800c96a:	462a      	mov	r2, r5
 800c96c:	4649      	mov	r1, r9
 800c96e:	4620      	mov	r0, r4
 800c970:	f7ff ffa8 	bl	800c8c4 <L_shift>
 800c974:	4544      	cmp	r4, r8
 800c976:	d950      	bls.n	800ca1a <__hexnan+0x10a>
 800c978:	2300      	movs	r3, #0
 800c97a:	f1a4 0904 	sub.w	r9, r4, #4
 800c97e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c982:	f8cd b008 	str.w	fp, [sp, #8]
 800c986:	464c      	mov	r4, r9
 800c988:	461d      	mov	r5, r3
 800c98a:	9903      	ldr	r1, [sp, #12]
 800c98c:	e7d7      	b.n	800c93e <__hexnan+0x2e>
 800c98e:	2a29      	cmp	r2, #41	; 0x29
 800c990:	d155      	bne.n	800ca3e <__hexnan+0x12e>
 800c992:	3102      	adds	r1, #2
 800c994:	f8ca 1000 	str.w	r1, [sl]
 800c998:	f1bb 0f00 	cmp.w	fp, #0
 800c99c:	d04f      	beq.n	800ca3e <__hexnan+0x12e>
 800c99e:	454c      	cmp	r4, r9
 800c9a0:	d206      	bcs.n	800c9b0 <__hexnan+0xa0>
 800c9a2:	2d07      	cmp	r5, #7
 800c9a4:	dc04      	bgt.n	800c9b0 <__hexnan+0xa0>
 800c9a6:	462a      	mov	r2, r5
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	f7ff ff8a 	bl	800c8c4 <L_shift>
 800c9b0:	4544      	cmp	r4, r8
 800c9b2:	d934      	bls.n	800ca1e <__hexnan+0x10e>
 800c9b4:	f1a8 0204 	sub.w	r2, r8, #4
 800c9b8:	4623      	mov	r3, r4
 800c9ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800c9be:	f842 1f04 	str.w	r1, [r2, #4]!
 800c9c2:	429f      	cmp	r7, r3
 800c9c4:	d2f9      	bcs.n	800c9ba <__hexnan+0xaa>
 800c9c6:	1b3b      	subs	r3, r7, r4
 800c9c8:	f023 0303 	bic.w	r3, r3, #3
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	3e03      	subs	r6, #3
 800c9d0:	3401      	adds	r4, #1
 800c9d2:	42a6      	cmp	r6, r4
 800c9d4:	bf38      	it	cc
 800c9d6:	2304      	movcc	r3, #4
 800c9d8:	4443      	add	r3, r8
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f843 2b04 	str.w	r2, [r3], #4
 800c9e0:	429f      	cmp	r7, r3
 800c9e2:	d2fb      	bcs.n	800c9dc <__hexnan+0xcc>
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	b91b      	cbnz	r3, 800c9f0 <__hexnan+0xe0>
 800c9e8:	4547      	cmp	r7, r8
 800c9ea:	d126      	bne.n	800ca3a <__hexnan+0x12a>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	603b      	str	r3, [r7, #0]
 800c9f0:	2005      	movs	r0, #5
 800c9f2:	e025      	b.n	800ca40 <__hexnan+0x130>
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	2d08      	cmp	r5, #8
 800c9f8:	f10b 0b01 	add.w	fp, fp, #1
 800c9fc:	dd06      	ble.n	800ca0c <__hexnan+0xfc>
 800c9fe:	4544      	cmp	r4, r8
 800ca00:	d9c3      	bls.n	800c98a <__hexnan+0x7a>
 800ca02:	2300      	movs	r3, #0
 800ca04:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca08:	2501      	movs	r5, #1
 800ca0a:	3c04      	subs	r4, #4
 800ca0c:	6822      	ldr	r2, [r4, #0]
 800ca0e:	f000 000f 	and.w	r0, r0, #15
 800ca12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca16:	6020      	str	r0, [r4, #0]
 800ca18:	e7b7      	b.n	800c98a <__hexnan+0x7a>
 800ca1a:	2508      	movs	r5, #8
 800ca1c:	e7b5      	b.n	800c98a <__hexnan+0x7a>
 800ca1e:	9b01      	ldr	r3, [sp, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d0df      	beq.n	800c9e4 <__hexnan+0xd4>
 800ca24:	f1c3 0320 	rsb	r3, r3, #32
 800ca28:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2c:	40da      	lsrs	r2, r3
 800ca2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca32:	4013      	ands	r3, r2
 800ca34:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca38:	e7d4      	b.n	800c9e4 <__hexnan+0xd4>
 800ca3a:	3f04      	subs	r7, #4
 800ca3c:	e7d2      	b.n	800c9e4 <__hexnan+0xd4>
 800ca3e:	2004      	movs	r0, #4
 800ca40:	b007      	add	sp, #28
 800ca42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca46 <__ascii_mbtowc>:
 800ca46:	b082      	sub	sp, #8
 800ca48:	b901      	cbnz	r1, 800ca4c <__ascii_mbtowc+0x6>
 800ca4a:	a901      	add	r1, sp, #4
 800ca4c:	b142      	cbz	r2, 800ca60 <__ascii_mbtowc+0x1a>
 800ca4e:	b14b      	cbz	r3, 800ca64 <__ascii_mbtowc+0x1e>
 800ca50:	7813      	ldrb	r3, [r2, #0]
 800ca52:	600b      	str	r3, [r1, #0]
 800ca54:	7812      	ldrb	r2, [r2, #0]
 800ca56:	1e10      	subs	r0, r2, #0
 800ca58:	bf18      	it	ne
 800ca5a:	2001      	movne	r0, #1
 800ca5c:	b002      	add	sp, #8
 800ca5e:	4770      	bx	lr
 800ca60:	4610      	mov	r0, r2
 800ca62:	e7fb      	b.n	800ca5c <__ascii_mbtowc+0x16>
 800ca64:	f06f 0001 	mvn.w	r0, #1
 800ca68:	e7f8      	b.n	800ca5c <__ascii_mbtowc+0x16>

0800ca6a <_realloc_r>:
 800ca6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6e:	4680      	mov	r8, r0
 800ca70:	4614      	mov	r4, r2
 800ca72:	460e      	mov	r6, r1
 800ca74:	b921      	cbnz	r1, 800ca80 <_realloc_r+0x16>
 800ca76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	f7fb bf14 	b.w	80088a8 <_malloc_r>
 800ca80:	b92a      	cbnz	r2, 800ca8e <_realloc_r+0x24>
 800ca82:	f7fd fe8b 	bl	800a79c <_free_r>
 800ca86:	4625      	mov	r5, r4
 800ca88:	4628      	mov	r0, r5
 800ca8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca8e:	f000 f842 	bl	800cb16 <_malloc_usable_size_r>
 800ca92:	4284      	cmp	r4, r0
 800ca94:	4607      	mov	r7, r0
 800ca96:	d802      	bhi.n	800ca9e <_realloc_r+0x34>
 800ca98:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca9c:	d812      	bhi.n	800cac4 <_realloc_r+0x5a>
 800ca9e:	4621      	mov	r1, r4
 800caa0:	4640      	mov	r0, r8
 800caa2:	f7fb ff01 	bl	80088a8 <_malloc_r>
 800caa6:	4605      	mov	r5, r0
 800caa8:	2800      	cmp	r0, #0
 800caaa:	d0ed      	beq.n	800ca88 <_realloc_r+0x1e>
 800caac:	42bc      	cmp	r4, r7
 800caae:	4622      	mov	r2, r4
 800cab0:	4631      	mov	r1, r6
 800cab2:	bf28      	it	cs
 800cab4:	463a      	movcs	r2, r7
 800cab6:	f7fc ffe2 	bl	8009a7e <memcpy>
 800caba:	4631      	mov	r1, r6
 800cabc:	4640      	mov	r0, r8
 800cabe:	f7fd fe6d 	bl	800a79c <_free_r>
 800cac2:	e7e1      	b.n	800ca88 <_realloc_r+0x1e>
 800cac4:	4635      	mov	r5, r6
 800cac6:	e7df      	b.n	800ca88 <_realloc_r+0x1e>

0800cac8 <__ascii_wctomb>:
 800cac8:	b149      	cbz	r1, 800cade <__ascii_wctomb+0x16>
 800caca:	2aff      	cmp	r2, #255	; 0xff
 800cacc:	bf85      	ittet	hi
 800cace:	238a      	movhi	r3, #138	; 0x8a
 800cad0:	6003      	strhi	r3, [r0, #0]
 800cad2:	700a      	strbls	r2, [r1, #0]
 800cad4:	f04f 30ff 	movhi.w	r0, #4294967295
 800cad8:	bf98      	it	ls
 800cada:	2001      	movls	r0, #1
 800cadc:	4770      	bx	lr
 800cade:	4608      	mov	r0, r1
 800cae0:	4770      	bx	lr
	...

0800cae4 <fiprintf>:
 800cae4:	b40e      	push	{r1, r2, r3}
 800cae6:	b503      	push	{r0, r1, lr}
 800cae8:	4601      	mov	r1, r0
 800caea:	ab03      	add	r3, sp, #12
 800caec:	4805      	ldr	r0, [pc, #20]	; (800cb04 <fiprintf+0x20>)
 800caee:	f853 2b04 	ldr.w	r2, [r3], #4
 800caf2:	6800      	ldr	r0, [r0, #0]
 800caf4:	9301      	str	r3, [sp, #4]
 800caf6:	f000 f83f 	bl	800cb78 <_vfiprintf_r>
 800cafa:	b002      	add	sp, #8
 800cafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb00:	b003      	add	sp, #12
 800cb02:	4770      	bx	lr
 800cb04:	20000064 	.word	0x20000064

0800cb08 <abort>:
 800cb08:	b508      	push	{r3, lr}
 800cb0a:	2006      	movs	r0, #6
 800cb0c:	f000 fa0c 	bl	800cf28 <raise>
 800cb10:	2001      	movs	r0, #1
 800cb12:	f7f7 fa11 	bl	8003f38 <_exit>

0800cb16 <_malloc_usable_size_r>:
 800cb16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb1a:	1f18      	subs	r0, r3, #4
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	bfbc      	itt	lt
 800cb20:	580b      	ldrlt	r3, [r1, r0]
 800cb22:	18c0      	addlt	r0, r0, r3
 800cb24:	4770      	bx	lr

0800cb26 <__sfputc_r>:
 800cb26:	6893      	ldr	r3, [r2, #8]
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	b410      	push	{r4}
 800cb2e:	6093      	str	r3, [r2, #8]
 800cb30:	da08      	bge.n	800cb44 <__sfputc_r+0x1e>
 800cb32:	6994      	ldr	r4, [r2, #24]
 800cb34:	42a3      	cmp	r3, r4
 800cb36:	db01      	blt.n	800cb3c <__sfputc_r+0x16>
 800cb38:	290a      	cmp	r1, #10
 800cb3a:	d103      	bne.n	800cb44 <__sfputc_r+0x1e>
 800cb3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb40:	f000 b934 	b.w	800cdac <__swbuf_r>
 800cb44:	6813      	ldr	r3, [r2, #0]
 800cb46:	1c58      	adds	r0, r3, #1
 800cb48:	6010      	str	r0, [r2, #0]
 800cb4a:	7019      	strb	r1, [r3, #0]
 800cb4c:	4608      	mov	r0, r1
 800cb4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <__sfputs_r>:
 800cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb56:	4606      	mov	r6, r0
 800cb58:	460f      	mov	r7, r1
 800cb5a:	4614      	mov	r4, r2
 800cb5c:	18d5      	adds	r5, r2, r3
 800cb5e:	42ac      	cmp	r4, r5
 800cb60:	d101      	bne.n	800cb66 <__sfputs_r+0x12>
 800cb62:	2000      	movs	r0, #0
 800cb64:	e007      	b.n	800cb76 <__sfputs_r+0x22>
 800cb66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb6a:	463a      	mov	r2, r7
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f7ff ffda 	bl	800cb26 <__sfputc_r>
 800cb72:	1c43      	adds	r3, r0, #1
 800cb74:	d1f3      	bne.n	800cb5e <__sfputs_r+0xa>
 800cb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb78 <_vfiprintf_r>:
 800cb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7c:	460d      	mov	r5, r1
 800cb7e:	b09d      	sub	sp, #116	; 0x74
 800cb80:	4614      	mov	r4, r2
 800cb82:	4698      	mov	r8, r3
 800cb84:	4606      	mov	r6, r0
 800cb86:	b118      	cbz	r0, 800cb90 <_vfiprintf_r+0x18>
 800cb88:	6a03      	ldr	r3, [r0, #32]
 800cb8a:	b90b      	cbnz	r3, 800cb90 <_vfiprintf_r+0x18>
 800cb8c:	f7fc fe1a 	bl	80097c4 <__sinit>
 800cb90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb92:	07d9      	lsls	r1, r3, #31
 800cb94:	d405      	bmi.n	800cba2 <_vfiprintf_r+0x2a>
 800cb96:	89ab      	ldrh	r3, [r5, #12]
 800cb98:	059a      	lsls	r2, r3, #22
 800cb9a:	d402      	bmi.n	800cba2 <_vfiprintf_r+0x2a>
 800cb9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb9e:	f7fc ff6c 	bl	8009a7a <__retarget_lock_acquire_recursive>
 800cba2:	89ab      	ldrh	r3, [r5, #12]
 800cba4:	071b      	lsls	r3, r3, #28
 800cba6:	d501      	bpl.n	800cbac <_vfiprintf_r+0x34>
 800cba8:	692b      	ldr	r3, [r5, #16]
 800cbaa:	b99b      	cbnz	r3, 800cbd4 <_vfiprintf_r+0x5c>
 800cbac:	4629      	mov	r1, r5
 800cbae:	4630      	mov	r0, r6
 800cbb0:	f000 f93a 	bl	800ce28 <__swsetup_r>
 800cbb4:	b170      	cbz	r0, 800cbd4 <_vfiprintf_r+0x5c>
 800cbb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbb8:	07dc      	lsls	r4, r3, #31
 800cbba:	d504      	bpl.n	800cbc6 <_vfiprintf_r+0x4e>
 800cbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc0:	b01d      	add	sp, #116	; 0x74
 800cbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc6:	89ab      	ldrh	r3, [r5, #12]
 800cbc8:	0598      	lsls	r0, r3, #22
 800cbca:	d4f7      	bmi.n	800cbbc <_vfiprintf_r+0x44>
 800cbcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbce:	f7fc ff55 	bl	8009a7c <__retarget_lock_release_recursive>
 800cbd2:	e7f3      	b.n	800cbbc <_vfiprintf_r+0x44>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	9309      	str	r3, [sp, #36]	; 0x24
 800cbd8:	2320      	movs	r3, #32
 800cbda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbde:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbe2:	2330      	movs	r3, #48	; 0x30
 800cbe4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cd98 <_vfiprintf_r+0x220>
 800cbe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbec:	f04f 0901 	mov.w	r9, #1
 800cbf0:	4623      	mov	r3, r4
 800cbf2:	469a      	mov	sl, r3
 800cbf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbf8:	b10a      	cbz	r2, 800cbfe <_vfiprintf_r+0x86>
 800cbfa:	2a25      	cmp	r2, #37	; 0x25
 800cbfc:	d1f9      	bne.n	800cbf2 <_vfiprintf_r+0x7a>
 800cbfe:	ebba 0b04 	subs.w	fp, sl, r4
 800cc02:	d00b      	beq.n	800cc1c <_vfiprintf_r+0xa4>
 800cc04:	465b      	mov	r3, fp
 800cc06:	4622      	mov	r2, r4
 800cc08:	4629      	mov	r1, r5
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	f7ff ffa2 	bl	800cb54 <__sfputs_r>
 800cc10:	3001      	adds	r0, #1
 800cc12:	f000 80a9 	beq.w	800cd68 <_vfiprintf_r+0x1f0>
 800cc16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc18:	445a      	add	r2, fp
 800cc1a:	9209      	str	r2, [sp, #36]	; 0x24
 800cc1c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f000 80a1 	beq.w	800cd68 <_vfiprintf_r+0x1f0>
 800cc26:	2300      	movs	r3, #0
 800cc28:	f04f 32ff 	mov.w	r2, #4294967295
 800cc2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc30:	f10a 0a01 	add.w	sl, sl, #1
 800cc34:	9304      	str	r3, [sp, #16]
 800cc36:	9307      	str	r3, [sp, #28]
 800cc38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc3c:	931a      	str	r3, [sp, #104]	; 0x68
 800cc3e:	4654      	mov	r4, sl
 800cc40:	2205      	movs	r2, #5
 800cc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc46:	4854      	ldr	r0, [pc, #336]	; (800cd98 <_vfiprintf_r+0x220>)
 800cc48:	f7f3 fac2 	bl	80001d0 <memchr>
 800cc4c:	9a04      	ldr	r2, [sp, #16]
 800cc4e:	b9d8      	cbnz	r0, 800cc88 <_vfiprintf_r+0x110>
 800cc50:	06d1      	lsls	r1, r2, #27
 800cc52:	bf44      	itt	mi
 800cc54:	2320      	movmi	r3, #32
 800cc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc5a:	0713      	lsls	r3, r2, #28
 800cc5c:	bf44      	itt	mi
 800cc5e:	232b      	movmi	r3, #43	; 0x2b
 800cc60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc64:	f89a 3000 	ldrb.w	r3, [sl]
 800cc68:	2b2a      	cmp	r3, #42	; 0x2a
 800cc6a:	d015      	beq.n	800cc98 <_vfiprintf_r+0x120>
 800cc6c:	9a07      	ldr	r2, [sp, #28]
 800cc6e:	4654      	mov	r4, sl
 800cc70:	2000      	movs	r0, #0
 800cc72:	f04f 0c0a 	mov.w	ip, #10
 800cc76:	4621      	mov	r1, r4
 800cc78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc7c:	3b30      	subs	r3, #48	; 0x30
 800cc7e:	2b09      	cmp	r3, #9
 800cc80:	d94d      	bls.n	800cd1e <_vfiprintf_r+0x1a6>
 800cc82:	b1b0      	cbz	r0, 800ccb2 <_vfiprintf_r+0x13a>
 800cc84:	9207      	str	r2, [sp, #28]
 800cc86:	e014      	b.n	800ccb2 <_vfiprintf_r+0x13a>
 800cc88:	eba0 0308 	sub.w	r3, r0, r8
 800cc8c:	fa09 f303 	lsl.w	r3, r9, r3
 800cc90:	4313      	orrs	r3, r2
 800cc92:	9304      	str	r3, [sp, #16]
 800cc94:	46a2      	mov	sl, r4
 800cc96:	e7d2      	b.n	800cc3e <_vfiprintf_r+0xc6>
 800cc98:	9b03      	ldr	r3, [sp, #12]
 800cc9a:	1d19      	adds	r1, r3, #4
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	9103      	str	r1, [sp, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	bfbb      	ittet	lt
 800cca4:	425b      	neglt	r3, r3
 800cca6:	f042 0202 	orrlt.w	r2, r2, #2
 800ccaa:	9307      	strge	r3, [sp, #28]
 800ccac:	9307      	strlt	r3, [sp, #28]
 800ccae:	bfb8      	it	lt
 800ccb0:	9204      	strlt	r2, [sp, #16]
 800ccb2:	7823      	ldrb	r3, [r4, #0]
 800ccb4:	2b2e      	cmp	r3, #46	; 0x2e
 800ccb6:	d10c      	bne.n	800ccd2 <_vfiprintf_r+0x15a>
 800ccb8:	7863      	ldrb	r3, [r4, #1]
 800ccba:	2b2a      	cmp	r3, #42	; 0x2a
 800ccbc:	d134      	bne.n	800cd28 <_vfiprintf_r+0x1b0>
 800ccbe:	9b03      	ldr	r3, [sp, #12]
 800ccc0:	1d1a      	adds	r2, r3, #4
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	9203      	str	r2, [sp, #12]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	bfb8      	it	lt
 800ccca:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccce:	3402      	adds	r4, #2
 800ccd0:	9305      	str	r3, [sp, #20]
 800ccd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cda8 <_vfiprintf_r+0x230>
 800ccd6:	7821      	ldrb	r1, [r4, #0]
 800ccd8:	2203      	movs	r2, #3
 800ccda:	4650      	mov	r0, sl
 800ccdc:	f7f3 fa78 	bl	80001d0 <memchr>
 800cce0:	b138      	cbz	r0, 800ccf2 <_vfiprintf_r+0x17a>
 800cce2:	9b04      	ldr	r3, [sp, #16]
 800cce4:	eba0 000a 	sub.w	r0, r0, sl
 800cce8:	2240      	movs	r2, #64	; 0x40
 800ccea:	4082      	lsls	r2, r0
 800ccec:	4313      	orrs	r3, r2
 800ccee:	3401      	adds	r4, #1
 800ccf0:	9304      	str	r3, [sp, #16]
 800ccf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccf6:	4829      	ldr	r0, [pc, #164]	; (800cd9c <_vfiprintf_r+0x224>)
 800ccf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccfc:	2206      	movs	r2, #6
 800ccfe:	f7f3 fa67 	bl	80001d0 <memchr>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d03f      	beq.n	800cd86 <_vfiprintf_r+0x20e>
 800cd06:	4b26      	ldr	r3, [pc, #152]	; (800cda0 <_vfiprintf_r+0x228>)
 800cd08:	bb1b      	cbnz	r3, 800cd52 <_vfiprintf_r+0x1da>
 800cd0a:	9b03      	ldr	r3, [sp, #12]
 800cd0c:	3307      	adds	r3, #7
 800cd0e:	f023 0307 	bic.w	r3, r3, #7
 800cd12:	3308      	adds	r3, #8
 800cd14:	9303      	str	r3, [sp, #12]
 800cd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd18:	443b      	add	r3, r7
 800cd1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd1c:	e768      	b.n	800cbf0 <_vfiprintf_r+0x78>
 800cd1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd22:	460c      	mov	r4, r1
 800cd24:	2001      	movs	r0, #1
 800cd26:	e7a6      	b.n	800cc76 <_vfiprintf_r+0xfe>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	3401      	adds	r4, #1
 800cd2c:	9305      	str	r3, [sp, #20]
 800cd2e:	4619      	mov	r1, r3
 800cd30:	f04f 0c0a 	mov.w	ip, #10
 800cd34:	4620      	mov	r0, r4
 800cd36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd3a:	3a30      	subs	r2, #48	; 0x30
 800cd3c:	2a09      	cmp	r2, #9
 800cd3e:	d903      	bls.n	800cd48 <_vfiprintf_r+0x1d0>
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d0c6      	beq.n	800ccd2 <_vfiprintf_r+0x15a>
 800cd44:	9105      	str	r1, [sp, #20]
 800cd46:	e7c4      	b.n	800ccd2 <_vfiprintf_r+0x15a>
 800cd48:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e7f0      	b.n	800cd34 <_vfiprintf_r+0x1bc>
 800cd52:	ab03      	add	r3, sp, #12
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	462a      	mov	r2, r5
 800cd58:	4b12      	ldr	r3, [pc, #72]	; (800cda4 <_vfiprintf_r+0x22c>)
 800cd5a:	a904      	add	r1, sp, #16
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f7fb fecf 	bl	8008b00 <_printf_float>
 800cd62:	4607      	mov	r7, r0
 800cd64:	1c78      	adds	r0, r7, #1
 800cd66:	d1d6      	bne.n	800cd16 <_vfiprintf_r+0x19e>
 800cd68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd6a:	07d9      	lsls	r1, r3, #31
 800cd6c:	d405      	bmi.n	800cd7a <_vfiprintf_r+0x202>
 800cd6e:	89ab      	ldrh	r3, [r5, #12]
 800cd70:	059a      	lsls	r2, r3, #22
 800cd72:	d402      	bmi.n	800cd7a <_vfiprintf_r+0x202>
 800cd74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd76:	f7fc fe81 	bl	8009a7c <__retarget_lock_release_recursive>
 800cd7a:	89ab      	ldrh	r3, [r5, #12]
 800cd7c:	065b      	lsls	r3, r3, #25
 800cd7e:	f53f af1d 	bmi.w	800cbbc <_vfiprintf_r+0x44>
 800cd82:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd84:	e71c      	b.n	800cbc0 <_vfiprintf_r+0x48>
 800cd86:	ab03      	add	r3, sp, #12
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	462a      	mov	r2, r5
 800cd8c:	4b05      	ldr	r3, [pc, #20]	; (800cda4 <_vfiprintf_r+0x22c>)
 800cd8e:	a904      	add	r1, sp, #16
 800cd90:	4630      	mov	r0, r6
 800cd92:	f7fc f959 	bl	8009048 <_printf_i>
 800cd96:	e7e4      	b.n	800cd62 <_vfiprintf_r+0x1ea>
 800cd98:	0800faa9 	.word	0x0800faa9
 800cd9c:	0800fab3 	.word	0x0800fab3
 800cda0:	08008b01 	.word	0x08008b01
 800cda4:	0800cb55 	.word	0x0800cb55
 800cda8:	0800faaf 	.word	0x0800faaf

0800cdac <__swbuf_r>:
 800cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdae:	460e      	mov	r6, r1
 800cdb0:	4614      	mov	r4, r2
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	b118      	cbz	r0, 800cdbe <__swbuf_r+0x12>
 800cdb6:	6a03      	ldr	r3, [r0, #32]
 800cdb8:	b90b      	cbnz	r3, 800cdbe <__swbuf_r+0x12>
 800cdba:	f7fc fd03 	bl	80097c4 <__sinit>
 800cdbe:	69a3      	ldr	r3, [r4, #24]
 800cdc0:	60a3      	str	r3, [r4, #8]
 800cdc2:	89a3      	ldrh	r3, [r4, #12]
 800cdc4:	071a      	lsls	r2, r3, #28
 800cdc6:	d525      	bpl.n	800ce14 <__swbuf_r+0x68>
 800cdc8:	6923      	ldr	r3, [r4, #16]
 800cdca:	b31b      	cbz	r3, 800ce14 <__swbuf_r+0x68>
 800cdcc:	6823      	ldr	r3, [r4, #0]
 800cdce:	6922      	ldr	r2, [r4, #16]
 800cdd0:	1a98      	subs	r0, r3, r2
 800cdd2:	6963      	ldr	r3, [r4, #20]
 800cdd4:	b2f6      	uxtb	r6, r6
 800cdd6:	4283      	cmp	r3, r0
 800cdd8:	4637      	mov	r7, r6
 800cdda:	dc04      	bgt.n	800cde6 <__swbuf_r+0x3a>
 800cddc:	4621      	mov	r1, r4
 800cdde:	4628      	mov	r0, r5
 800cde0:	f7ff fa4a 	bl	800c278 <_fflush_r>
 800cde4:	b9e0      	cbnz	r0, 800ce20 <__swbuf_r+0x74>
 800cde6:	68a3      	ldr	r3, [r4, #8]
 800cde8:	3b01      	subs	r3, #1
 800cdea:	60a3      	str	r3, [r4, #8]
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	6022      	str	r2, [r4, #0]
 800cdf2:	701e      	strb	r6, [r3, #0]
 800cdf4:	6962      	ldr	r2, [r4, #20]
 800cdf6:	1c43      	adds	r3, r0, #1
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d004      	beq.n	800ce06 <__swbuf_r+0x5a>
 800cdfc:	89a3      	ldrh	r3, [r4, #12]
 800cdfe:	07db      	lsls	r3, r3, #31
 800ce00:	d506      	bpl.n	800ce10 <__swbuf_r+0x64>
 800ce02:	2e0a      	cmp	r6, #10
 800ce04:	d104      	bne.n	800ce10 <__swbuf_r+0x64>
 800ce06:	4621      	mov	r1, r4
 800ce08:	4628      	mov	r0, r5
 800ce0a:	f7ff fa35 	bl	800c278 <_fflush_r>
 800ce0e:	b938      	cbnz	r0, 800ce20 <__swbuf_r+0x74>
 800ce10:	4638      	mov	r0, r7
 800ce12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce14:	4621      	mov	r1, r4
 800ce16:	4628      	mov	r0, r5
 800ce18:	f000 f806 	bl	800ce28 <__swsetup_r>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d0d5      	beq.n	800cdcc <__swbuf_r+0x20>
 800ce20:	f04f 37ff 	mov.w	r7, #4294967295
 800ce24:	e7f4      	b.n	800ce10 <__swbuf_r+0x64>
	...

0800ce28 <__swsetup_r>:
 800ce28:	b538      	push	{r3, r4, r5, lr}
 800ce2a:	4b2a      	ldr	r3, [pc, #168]	; (800ced4 <__swsetup_r+0xac>)
 800ce2c:	4605      	mov	r5, r0
 800ce2e:	6818      	ldr	r0, [r3, #0]
 800ce30:	460c      	mov	r4, r1
 800ce32:	b118      	cbz	r0, 800ce3c <__swsetup_r+0x14>
 800ce34:	6a03      	ldr	r3, [r0, #32]
 800ce36:	b90b      	cbnz	r3, 800ce3c <__swsetup_r+0x14>
 800ce38:	f7fc fcc4 	bl	80097c4 <__sinit>
 800ce3c:	89a3      	ldrh	r3, [r4, #12]
 800ce3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce42:	0718      	lsls	r0, r3, #28
 800ce44:	d422      	bmi.n	800ce8c <__swsetup_r+0x64>
 800ce46:	06d9      	lsls	r1, r3, #27
 800ce48:	d407      	bmi.n	800ce5a <__swsetup_r+0x32>
 800ce4a:	2309      	movs	r3, #9
 800ce4c:	602b      	str	r3, [r5, #0]
 800ce4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce52:	81a3      	strh	r3, [r4, #12]
 800ce54:	f04f 30ff 	mov.w	r0, #4294967295
 800ce58:	e034      	b.n	800cec4 <__swsetup_r+0x9c>
 800ce5a:	0758      	lsls	r0, r3, #29
 800ce5c:	d512      	bpl.n	800ce84 <__swsetup_r+0x5c>
 800ce5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce60:	b141      	cbz	r1, 800ce74 <__swsetup_r+0x4c>
 800ce62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce66:	4299      	cmp	r1, r3
 800ce68:	d002      	beq.n	800ce70 <__swsetup_r+0x48>
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	f7fd fc96 	bl	800a79c <_free_r>
 800ce70:	2300      	movs	r3, #0
 800ce72:	6363      	str	r3, [r4, #52]	; 0x34
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce7a:	81a3      	strh	r3, [r4, #12]
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	6063      	str	r3, [r4, #4]
 800ce80:	6923      	ldr	r3, [r4, #16]
 800ce82:	6023      	str	r3, [r4, #0]
 800ce84:	89a3      	ldrh	r3, [r4, #12]
 800ce86:	f043 0308 	orr.w	r3, r3, #8
 800ce8a:	81a3      	strh	r3, [r4, #12]
 800ce8c:	6923      	ldr	r3, [r4, #16]
 800ce8e:	b94b      	cbnz	r3, 800cea4 <__swsetup_r+0x7c>
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce9a:	d003      	beq.n	800cea4 <__swsetup_r+0x7c>
 800ce9c:	4621      	mov	r1, r4
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f000 f884 	bl	800cfac <__smakebuf_r>
 800cea4:	89a0      	ldrh	r0, [r4, #12]
 800cea6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ceaa:	f010 0301 	ands.w	r3, r0, #1
 800ceae:	d00a      	beq.n	800cec6 <__swsetup_r+0x9e>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	60a3      	str	r3, [r4, #8]
 800ceb4:	6963      	ldr	r3, [r4, #20]
 800ceb6:	425b      	negs	r3, r3
 800ceb8:	61a3      	str	r3, [r4, #24]
 800ceba:	6923      	ldr	r3, [r4, #16]
 800cebc:	b943      	cbnz	r3, 800ced0 <__swsetup_r+0xa8>
 800cebe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cec2:	d1c4      	bne.n	800ce4e <__swsetup_r+0x26>
 800cec4:	bd38      	pop	{r3, r4, r5, pc}
 800cec6:	0781      	lsls	r1, r0, #30
 800cec8:	bf58      	it	pl
 800ceca:	6963      	ldrpl	r3, [r4, #20]
 800cecc:	60a3      	str	r3, [r4, #8]
 800cece:	e7f4      	b.n	800ceba <__swsetup_r+0x92>
 800ced0:	2000      	movs	r0, #0
 800ced2:	e7f7      	b.n	800cec4 <__swsetup_r+0x9c>
 800ced4:	20000064 	.word	0x20000064

0800ced8 <_raise_r>:
 800ced8:	291f      	cmp	r1, #31
 800ceda:	b538      	push	{r3, r4, r5, lr}
 800cedc:	4604      	mov	r4, r0
 800cede:	460d      	mov	r5, r1
 800cee0:	d904      	bls.n	800ceec <_raise_r+0x14>
 800cee2:	2316      	movs	r3, #22
 800cee4:	6003      	str	r3, [r0, #0]
 800cee6:	f04f 30ff 	mov.w	r0, #4294967295
 800ceea:	bd38      	pop	{r3, r4, r5, pc}
 800ceec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ceee:	b112      	cbz	r2, 800cef6 <_raise_r+0x1e>
 800cef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cef4:	b94b      	cbnz	r3, 800cf0a <_raise_r+0x32>
 800cef6:	4620      	mov	r0, r4
 800cef8:	f000 f830 	bl	800cf5c <_getpid_r>
 800cefc:	462a      	mov	r2, r5
 800cefe:	4601      	mov	r1, r0
 800cf00:	4620      	mov	r0, r4
 800cf02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf06:	f000 b817 	b.w	800cf38 <_kill_r>
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d00a      	beq.n	800cf24 <_raise_r+0x4c>
 800cf0e:	1c59      	adds	r1, r3, #1
 800cf10:	d103      	bne.n	800cf1a <_raise_r+0x42>
 800cf12:	2316      	movs	r3, #22
 800cf14:	6003      	str	r3, [r0, #0]
 800cf16:	2001      	movs	r0, #1
 800cf18:	e7e7      	b.n	800ceea <_raise_r+0x12>
 800cf1a:	2400      	movs	r4, #0
 800cf1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf20:	4628      	mov	r0, r5
 800cf22:	4798      	blx	r3
 800cf24:	2000      	movs	r0, #0
 800cf26:	e7e0      	b.n	800ceea <_raise_r+0x12>

0800cf28 <raise>:
 800cf28:	4b02      	ldr	r3, [pc, #8]	; (800cf34 <raise+0xc>)
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	6818      	ldr	r0, [r3, #0]
 800cf2e:	f7ff bfd3 	b.w	800ced8 <_raise_r>
 800cf32:	bf00      	nop
 800cf34:	20000064 	.word	0x20000064

0800cf38 <_kill_r>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4d07      	ldr	r5, [pc, #28]	; (800cf58 <_kill_r+0x20>)
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	4604      	mov	r4, r0
 800cf40:	4608      	mov	r0, r1
 800cf42:	4611      	mov	r1, r2
 800cf44:	602b      	str	r3, [r5, #0]
 800cf46:	f7f6 ffe7 	bl	8003f18 <_kill>
 800cf4a:	1c43      	adds	r3, r0, #1
 800cf4c:	d102      	bne.n	800cf54 <_kill_r+0x1c>
 800cf4e:	682b      	ldr	r3, [r5, #0]
 800cf50:	b103      	cbz	r3, 800cf54 <_kill_r+0x1c>
 800cf52:	6023      	str	r3, [r4, #0]
 800cf54:	bd38      	pop	{r3, r4, r5, pc}
 800cf56:	bf00      	nop
 800cf58:	20000a24 	.word	0x20000a24

0800cf5c <_getpid_r>:
 800cf5c:	f7f6 bfd4 	b.w	8003f08 <_getpid>

0800cf60 <__swhatbuf_r>:
 800cf60:	b570      	push	{r4, r5, r6, lr}
 800cf62:	460c      	mov	r4, r1
 800cf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf68:	2900      	cmp	r1, #0
 800cf6a:	b096      	sub	sp, #88	; 0x58
 800cf6c:	4615      	mov	r5, r2
 800cf6e:	461e      	mov	r6, r3
 800cf70:	da0d      	bge.n	800cf8e <__swhatbuf_r+0x2e>
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cf78:	f04f 0100 	mov.w	r1, #0
 800cf7c:	bf0c      	ite	eq
 800cf7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cf82:	2340      	movne	r3, #64	; 0x40
 800cf84:	2000      	movs	r0, #0
 800cf86:	6031      	str	r1, [r6, #0]
 800cf88:	602b      	str	r3, [r5, #0]
 800cf8a:	b016      	add	sp, #88	; 0x58
 800cf8c:	bd70      	pop	{r4, r5, r6, pc}
 800cf8e:	466a      	mov	r2, sp
 800cf90:	f000 f848 	bl	800d024 <_fstat_r>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	dbec      	blt.n	800cf72 <__swhatbuf_r+0x12>
 800cf98:	9901      	ldr	r1, [sp, #4]
 800cf9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cf9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cfa2:	4259      	negs	r1, r3
 800cfa4:	4159      	adcs	r1, r3
 800cfa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfaa:	e7eb      	b.n	800cf84 <__swhatbuf_r+0x24>

0800cfac <__smakebuf_r>:
 800cfac:	898b      	ldrh	r3, [r1, #12]
 800cfae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfb0:	079d      	lsls	r5, r3, #30
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	d507      	bpl.n	800cfc8 <__smakebuf_r+0x1c>
 800cfb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	6123      	str	r3, [r4, #16]
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	6163      	str	r3, [r4, #20]
 800cfc4:	b002      	add	sp, #8
 800cfc6:	bd70      	pop	{r4, r5, r6, pc}
 800cfc8:	ab01      	add	r3, sp, #4
 800cfca:	466a      	mov	r2, sp
 800cfcc:	f7ff ffc8 	bl	800cf60 <__swhatbuf_r>
 800cfd0:	9900      	ldr	r1, [sp, #0]
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	f7fb fc67 	bl	80088a8 <_malloc_r>
 800cfda:	b948      	cbnz	r0, 800cff0 <__smakebuf_r+0x44>
 800cfdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfe0:	059a      	lsls	r2, r3, #22
 800cfe2:	d4ef      	bmi.n	800cfc4 <__smakebuf_r+0x18>
 800cfe4:	f023 0303 	bic.w	r3, r3, #3
 800cfe8:	f043 0302 	orr.w	r3, r3, #2
 800cfec:	81a3      	strh	r3, [r4, #12]
 800cfee:	e7e3      	b.n	800cfb8 <__smakebuf_r+0xc>
 800cff0:	89a3      	ldrh	r3, [r4, #12]
 800cff2:	6020      	str	r0, [r4, #0]
 800cff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cff8:	81a3      	strh	r3, [r4, #12]
 800cffa:	9b00      	ldr	r3, [sp, #0]
 800cffc:	6163      	str	r3, [r4, #20]
 800cffe:	9b01      	ldr	r3, [sp, #4]
 800d000:	6120      	str	r0, [r4, #16]
 800d002:	b15b      	cbz	r3, 800d01c <__smakebuf_r+0x70>
 800d004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d008:	4630      	mov	r0, r6
 800d00a:	f000 f81d 	bl	800d048 <_isatty_r>
 800d00e:	b128      	cbz	r0, 800d01c <__smakebuf_r+0x70>
 800d010:	89a3      	ldrh	r3, [r4, #12]
 800d012:	f023 0303 	bic.w	r3, r3, #3
 800d016:	f043 0301 	orr.w	r3, r3, #1
 800d01a:	81a3      	strh	r3, [r4, #12]
 800d01c:	89a3      	ldrh	r3, [r4, #12]
 800d01e:	431d      	orrs	r5, r3
 800d020:	81a5      	strh	r5, [r4, #12]
 800d022:	e7cf      	b.n	800cfc4 <__smakebuf_r+0x18>

0800d024 <_fstat_r>:
 800d024:	b538      	push	{r3, r4, r5, lr}
 800d026:	4d07      	ldr	r5, [pc, #28]	; (800d044 <_fstat_r+0x20>)
 800d028:	2300      	movs	r3, #0
 800d02a:	4604      	mov	r4, r0
 800d02c:	4608      	mov	r0, r1
 800d02e:	4611      	mov	r1, r2
 800d030:	602b      	str	r3, [r5, #0]
 800d032:	f7f6 ffd0 	bl	8003fd6 <_fstat>
 800d036:	1c43      	adds	r3, r0, #1
 800d038:	d102      	bne.n	800d040 <_fstat_r+0x1c>
 800d03a:	682b      	ldr	r3, [r5, #0]
 800d03c:	b103      	cbz	r3, 800d040 <_fstat_r+0x1c>
 800d03e:	6023      	str	r3, [r4, #0]
 800d040:	bd38      	pop	{r3, r4, r5, pc}
 800d042:	bf00      	nop
 800d044:	20000a24 	.word	0x20000a24

0800d048 <_isatty_r>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	4d06      	ldr	r5, [pc, #24]	; (800d064 <_isatty_r+0x1c>)
 800d04c:	2300      	movs	r3, #0
 800d04e:	4604      	mov	r4, r0
 800d050:	4608      	mov	r0, r1
 800d052:	602b      	str	r3, [r5, #0]
 800d054:	f7f6 ffcf 	bl	8003ff6 <_isatty>
 800d058:	1c43      	adds	r3, r0, #1
 800d05a:	d102      	bne.n	800d062 <_isatty_r+0x1a>
 800d05c:	682b      	ldr	r3, [r5, #0]
 800d05e:	b103      	cbz	r3, 800d062 <_isatty_r+0x1a>
 800d060:	6023      	str	r3, [r4, #0]
 800d062:	bd38      	pop	{r3, r4, r5, pc}
 800d064:	20000a24 	.word	0x20000a24

0800d068 <atan2>:
 800d068:	f000 bd2a 	b.w	800dac0 <__ieee754_atan2>

0800d06c <sqrt>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	ed2d 8b02 	vpush	{d8}
 800d072:	ec55 4b10 	vmov	r4, r5, d0
 800d076:	f000 f8b3 	bl	800d1e0 <__ieee754_sqrt>
 800d07a:	4622      	mov	r2, r4
 800d07c:	462b      	mov	r3, r5
 800d07e:	4620      	mov	r0, r4
 800d080:	4629      	mov	r1, r5
 800d082:	eeb0 8a40 	vmov.f32	s16, s0
 800d086:	eef0 8a60 	vmov.f32	s17, s1
 800d08a:	f7f3 fd4f 	bl	8000b2c <__aeabi_dcmpun>
 800d08e:	b990      	cbnz	r0, 800d0b6 <sqrt+0x4a>
 800d090:	2200      	movs	r2, #0
 800d092:	2300      	movs	r3, #0
 800d094:	4620      	mov	r0, r4
 800d096:	4629      	mov	r1, r5
 800d098:	f7f3 fd20 	bl	8000adc <__aeabi_dcmplt>
 800d09c:	b158      	cbz	r0, 800d0b6 <sqrt+0x4a>
 800d09e:	f7fc fcc1 	bl	8009a24 <__errno>
 800d0a2:	2321      	movs	r3, #33	; 0x21
 800d0a4:	6003      	str	r3, [r0, #0]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	f7f3 fbcd 	bl	800084c <__aeabi_ddiv>
 800d0b2:	ec41 0b18 	vmov	d8, r0, r1
 800d0b6:	eeb0 0a48 	vmov.f32	s0, s16
 800d0ba:	eef0 0a68 	vmov.f32	s1, s17
 800d0be:	ecbd 8b02 	vpop	{d8}
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	0000      	movs	r0, r0
	...

0800d0c8 <sin>:
 800d0c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0ca:	ec53 2b10 	vmov	r2, r3, d0
 800d0ce:	4828      	ldr	r0, [pc, #160]	; (800d170 <sin+0xa8>)
 800d0d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d0d4:	4281      	cmp	r1, r0
 800d0d6:	dc07      	bgt.n	800d0e8 <sin+0x20>
 800d0d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d168 <sin+0xa0>
 800d0dc:	2000      	movs	r0, #0
 800d0de:	b005      	add	sp, #20
 800d0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e4:	f000 ba20 	b.w	800d528 <__kernel_sin>
 800d0e8:	4822      	ldr	r0, [pc, #136]	; (800d174 <sin+0xac>)
 800d0ea:	4281      	cmp	r1, r0
 800d0ec:	dd09      	ble.n	800d102 <sin+0x3a>
 800d0ee:	ee10 0a10 	vmov	r0, s0
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	f7f3 f8c8 	bl	8000288 <__aeabi_dsub>
 800d0f8:	ec41 0b10 	vmov	d0, r0, r1
 800d0fc:	b005      	add	sp, #20
 800d0fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800d102:	4668      	mov	r0, sp
 800d104:	f000 fda4 	bl	800dc50 <__ieee754_rem_pio2>
 800d108:	f000 0003 	and.w	r0, r0, #3
 800d10c:	2801      	cmp	r0, #1
 800d10e:	d00c      	beq.n	800d12a <sin+0x62>
 800d110:	2802      	cmp	r0, #2
 800d112:	d011      	beq.n	800d138 <sin+0x70>
 800d114:	b9f0      	cbnz	r0, 800d154 <sin+0x8c>
 800d116:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d11a:	ed9d 0b00 	vldr	d0, [sp]
 800d11e:	2001      	movs	r0, #1
 800d120:	f000 fa02 	bl	800d528 <__kernel_sin>
 800d124:	ec51 0b10 	vmov	r0, r1, d0
 800d128:	e7e6      	b.n	800d0f8 <sin+0x30>
 800d12a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d12e:	ed9d 0b00 	vldr	d0, [sp]
 800d132:	f000 f931 	bl	800d398 <__kernel_cos>
 800d136:	e7f5      	b.n	800d124 <sin+0x5c>
 800d138:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d13c:	ed9d 0b00 	vldr	d0, [sp]
 800d140:	2001      	movs	r0, #1
 800d142:	f000 f9f1 	bl	800d528 <__kernel_sin>
 800d146:	ec53 2b10 	vmov	r2, r3, d0
 800d14a:	ee10 0a10 	vmov	r0, s0
 800d14e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d152:	e7d1      	b.n	800d0f8 <sin+0x30>
 800d154:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d158:	ed9d 0b00 	vldr	d0, [sp]
 800d15c:	f000 f91c 	bl	800d398 <__kernel_cos>
 800d160:	e7f1      	b.n	800d146 <sin+0x7e>
 800d162:	bf00      	nop
 800d164:	f3af 8000 	nop.w
	...
 800d170:	3fe921fb 	.word	0x3fe921fb
 800d174:	7fefffff 	.word	0x7fefffff

0800d178 <tan>:
 800d178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d17a:	ec53 2b10 	vmov	r2, r3, d0
 800d17e:	4816      	ldr	r0, [pc, #88]	; (800d1d8 <tan+0x60>)
 800d180:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d184:	4281      	cmp	r1, r0
 800d186:	dc07      	bgt.n	800d198 <tan+0x20>
 800d188:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800d1d0 <tan+0x58>
 800d18c:	2001      	movs	r0, #1
 800d18e:	b005      	add	sp, #20
 800d190:	f85d eb04 	ldr.w	lr, [sp], #4
 800d194:	f000 ba88 	b.w	800d6a8 <__kernel_tan>
 800d198:	4810      	ldr	r0, [pc, #64]	; (800d1dc <tan+0x64>)
 800d19a:	4281      	cmp	r1, r0
 800d19c:	dd09      	ble.n	800d1b2 <tan+0x3a>
 800d19e:	ee10 0a10 	vmov	r0, s0
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	f7f3 f870 	bl	8000288 <__aeabi_dsub>
 800d1a8:	ec41 0b10 	vmov	d0, r0, r1
 800d1ac:	b005      	add	sp, #20
 800d1ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1b2:	4668      	mov	r0, sp
 800d1b4:	f000 fd4c 	bl	800dc50 <__ieee754_rem_pio2>
 800d1b8:	0040      	lsls	r0, r0, #1
 800d1ba:	f000 0002 	and.w	r0, r0, #2
 800d1be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1c2:	ed9d 0b00 	vldr	d0, [sp]
 800d1c6:	f1c0 0001 	rsb	r0, r0, #1
 800d1ca:	f000 fa6d 	bl	800d6a8 <__kernel_tan>
 800d1ce:	e7ed      	b.n	800d1ac <tan+0x34>
	...
 800d1d8:	3fe921fb 	.word	0x3fe921fb
 800d1dc:	7fefffff 	.word	0x7fefffff

0800d1e0 <__ieee754_sqrt>:
 800d1e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e4:	ec55 4b10 	vmov	r4, r5, d0
 800d1e8:	4e67      	ldr	r6, [pc, #412]	; (800d388 <__ieee754_sqrt+0x1a8>)
 800d1ea:	43ae      	bics	r6, r5
 800d1ec:	ee10 0a10 	vmov	r0, s0
 800d1f0:	ee10 2a10 	vmov	r2, s0
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	462b      	mov	r3, r5
 800d1f8:	d10d      	bne.n	800d216 <__ieee754_sqrt+0x36>
 800d1fa:	f7f3 f9fd 	bl	80005f8 <__aeabi_dmul>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	4620      	mov	r0, r4
 800d204:	4629      	mov	r1, r5
 800d206:	f7f3 f841 	bl	800028c <__adddf3>
 800d20a:	4604      	mov	r4, r0
 800d20c:	460d      	mov	r5, r1
 800d20e:	ec45 4b10 	vmov	d0, r4, r5
 800d212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d216:	2d00      	cmp	r5, #0
 800d218:	dc0b      	bgt.n	800d232 <__ieee754_sqrt+0x52>
 800d21a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d21e:	4326      	orrs	r6, r4
 800d220:	d0f5      	beq.n	800d20e <__ieee754_sqrt+0x2e>
 800d222:	b135      	cbz	r5, 800d232 <__ieee754_sqrt+0x52>
 800d224:	f7f3 f830 	bl	8000288 <__aeabi_dsub>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	f7f3 fb0e 	bl	800084c <__aeabi_ddiv>
 800d230:	e7eb      	b.n	800d20a <__ieee754_sqrt+0x2a>
 800d232:	1509      	asrs	r1, r1, #20
 800d234:	f000 808d 	beq.w	800d352 <__ieee754_sqrt+0x172>
 800d238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d23c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d244:	07c9      	lsls	r1, r1, #31
 800d246:	bf5c      	itt	pl
 800d248:	005b      	lslpl	r3, r3, #1
 800d24a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d24e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d252:	bf58      	it	pl
 800d254:	0052      	lslpl	r2, r2, #1
 800d256:	2500      	movs	r5, #0
 800d258:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d25c:	1076      	asrs	r6, r6, #1
 800d25e:	0052      	lsls	r2, r2, #1
 800d260:	f04f 0e16 	mov.w	lr, #22
 800d264:	46ac      	mov	ip, r5
 800d266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d26a:	eb0c 0001 	add.w	r0, ip, r1
 800d26e:	4298      	cmp	r0, r3
 800d270:	bfde      	ittt	le
 800d272:	1a1b      	suble	r3, r3, r0
 800d274:	eb00 0c01 	addle.w	ip, r0, r1
 800d278:	186d      	addle	r5, r5, r1
 800d27a:	005b      	lsls	r3, r3, #1
 800d27c:	f1be 0e01 	subs.w	lr, lr, #1
 800d280:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d284:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d288:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d28c:	d1ed      	bne.n	800d26a <__ieee754_sqrt+0x8a>
 800d28e:	4674      	mov	r4, lr
 800d290:	2720      	movs	r7, #32
 800d292:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d296:	4563      	cmp	r3, ip
 800d298:	eb01 000e 	add.w	r0, r1, lr
 800d29c:	dc02      	bgt.n	800d2a4 <__ieee754_sqrt+0xc4>
 800d29e:	d113      	bne.n	800d2c8 <__ieee754_sqrt+0xe8>
 800d2a0:	4290      	cmp	r0, r2
 800d2a2:	d811      	bhi.n	800d2c8 <__ieee754_sqrt+0xe8>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	eb00 0e01 	add.w	lr, r0, r1
 800d2aa:	da57      	bge.n	800d35c <__ieee754_sqrt+0x17c>
 800d2ac:	f1be 0f00 	cmp.w	lr, #0
 800d2b0:	db54      	blt.n	800d35c <__ieee754_sqrt+0x17c>
 800d2b2:	f10c 0801 	add.w	r8, ip, #1
 800d2b6:	eba3 030c 	sub.w	r3, r3, ip
 800d2ba:	4290      	cmp	r0, r2
 800d2bc:	bf88      	it	hi
 800d2be:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d2c2:	1a12      	subs	r2, r2, r0
 800d2c4:	440c      	add	r4, r1
 800d2c6:	46c4      	mov	ip, r8
 800d2c8:	005b      	lsls	r3, r3, #1
 800d2ca:	3f01      	subs	r7, #1
 800d2cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d2d0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d2d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d2d8:	d1dd      	bne.n	800d296 <__ieee754_sqrt+0xb6>
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	d01b      	beq.n	800d316 <__ieee754_sqrt+0x136>
 800d2de:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d38c <__ieee754_sqrt+0x1ac>
 800d2e2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d390 <__ieee754_sqrt+0x1b0>
 800d2e6:	e9da 0100 	ldrd	r0, r1, [sl]
 800d2ea:	e9db 2300 	ldrd	r2, r3, [fp]
 800d2ee:	f7f2 ffcb 	bl	8000288 <__aeabi_dsub>
 800d2f2:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	4640      	mov	r0, r8
 800d2fc:	4649      	mov	r1, r9
 800d2fe:	f7f3 fbf7 	bl	8000af0 <__aeabi_dcmple>
 800d302:	b140      	cbz	r0, 800d316 <__ieee754_sqrt+0x136>
 800d304:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d308:	e9da 0100 	ldrd	r0, r1, [sl]
 800d30c:	e9db 2300 	ldrd	r2, r3, [fp]
 800d310:	d126      	bne.n	800d360 <__ieee754_sqrt+0x180>
 800d312:	3501      	adds	r5, #1
 800d314:	463c      	mov	r4, r7
 800d316:	106a      	asrs	r2, r5, #1
 800d318:	0863      	lsrs	r3, r4, #1
 800d31a:	07e9      	lsls	r1, r5, #31
 800d31c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d320:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d324:	bf48      	it	mi
 800d326:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d32a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d32e:	461c      	mov	r4, r3
 800d330:	e76d      	b.n	800d20e <__ieee754_sqrt+0x2e>
 800d332:	0ad3      	lsrs	r3, r2, #11
 800d334:	3815      	subs	r0, #21
 800d336:	0552      	lsls	r2, r2, #21
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d0fa      	beq.n	800d332 <__ieee754_sqrt+0x152>
 800d33c:	02dc      	lsls	r4, r3, #11
 800d33e:	d50a      	bpl.n	800d356 <__ieee754_sqrt+0x176>
 800d340:	f1c1 0420 	rsb	r4, r1, #32
 800d344:	fa22 f404 	lsr.w	r4, r2, r4
 800d348:	1e4d      	subs	r5, r1, #1
 800d34a:	408a      	lsls	r2, r1
 800d34c:	4323      	orrs	r3, r4
 800d34e:	1b41      	subs	r1, r0, r5
 800d350:	e772      	b.n	800d238 <__ieee754_sqrt+0x58>
 800d352:	4608      	mov	r0, r1
 800d354:	e7f0      	b.n	800d338 <__ieee754_sqrt+0x158>
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	3101      	adds	r1, #1
 800d35a:	e7ef      	b.n	800d33c <__ieee754_sqrt+0x15c>
 800d35c:	46e0      	mov	r8, ip
 800d35e:	e7aa      	b.n	800d2b6 <__ieee754_sqrt+0xd6>
 800d360:	f7f2 ff94 	bl	800028c <__adddf3>
 800d364:	e9da 8900 	ldrd	r8, r9, [sl]
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	4640      	mov	r0, r8
 800d36e:	4649      	mov	r1, r9
 800d370:	f7f3 fbb4 	bl	8000adc <__aeabi_dcmplt>
 800d374:	b120      	cbz	r0, 800d380 <__ieee754_sqrt+0x1a0>
 800d376:	1ca0      	adds	r0, r4, #2
 800d378:	bf08      	it	eq
 800d37a:	3501      	addeq	r5, #1
 800d37c:	3402      	adds	r4, #2
 800d37e:	e7ca      	b.n	800d316 <__ieee754_sqrt+0x136>
 800d380:	3401      	adds	r4, #1
 800d382:	f024 0401 	bic.w	r4, r4, #1
 800d386:	e7c6      	b.n	800d316 <__ieee754_sqrt+0x136>
 800d388:	7ff00000 	.word	0x7ff00000
 800d38c:	200001d8 	.word	0x200001d8
 800d390:	200001e0 	.word	0x200001e0
 800d394:	00000000 	.word	0x00000000

0800d398 <__kernel_cos>:
 800d398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	ec57 6b10 	vmov	r6, r7, d0
 800d3a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d3a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d3a8:	ed8d 1b00 	vstr	d1, [sp]
 800d3ac:	da07      	bge.n	800d3be <__kernel_cos+0x26>
 800d3ae:	ee10 0a10 	vmov	r0, s0
 800d3b2:	4639      	mov	r1, r7
 800d3b4:	f7f3 fbd0 	bl	8000b58 <__aeabi_d2iz>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	f000 8088 	beq.w	800d4ce <__kernel_cos+0x136>
 800d3be:	4632      	mov	r2, r6
 800d3c0:	463b      	mov	r3, r7
 800d3c2:	4630      	mov	r0, r6
 800d3c4:	4639      	mov	r1, r7
 800d3c6:	f7f3 f917 	bl	80005f8 <__aeabi_dmul>
 800d3ca:	4b51      	ldr	r3, [pc, #324]	; (800d510 <__kernel_cos+0x178>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	460d      	mov	r5, r1
 800d3d2:	f7f3 f911 	bl	80005f8 <__aeabi_dmul>
 800d3d6:	a340      	add	r3, pc, #256	; (adr r3, 800d4d8 <__kernel_cos+0x140>)
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	4682      	mov	sl, r0
 800d3de:	468b      	mov	fp, r1
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	f7f3 f908 	bl	80005f8 <__aeabi_dmul>
 800d3e8:	a33d      	add	r3, pc, #244	; (adr r3, 800d4e0 <__kernel_cos+0x148>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f2 ff4d 	bl	800028c <__adddf3>
 800d3f2:	4622      	mov	r2, r4
 800d3f4:	462b      	mov	r3, r5
 800d3f6:	f7f3 f8ff 	bl	80005f8 <__aeabi_dmul>
 800d3fa:	a33b      	add	r3, pc, #236	; (adr r3, 800d4e8 <__kernel_cos+0x150>)
 800d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d400:	f7f2 ff42 	bl	8000288 <__aeabi_dsub>
 800d404:	4622      	mov	r2, r4
 800d406:	462b      	mov	r3, r5
 800d408:	f7f3 f8f6 	bl	80005f8 <__aeabi_dmul>
 800d40c:	a338      	add	r3, pc, #224	; (adr r3, 800d4f0 <__kernel_cos+0x158>)
 800d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d412:	f7f2 ff3b 	bl	800028c <__adddf3>
 800d416:	4622      	mov	r2, r4
 800d418:	462b      	mov	r3, r5
 800d41a:	f7f3 f8ed 	bl	80005f8 <__aeabi_dmul>
 800d41e:	a336      	add	r3, pc, #216	; (adr r3, 800d4f8 <__kernel_cos+0x160>)
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	f7f2 ff30 	bl	8000288 <__aeabi_dsub>
 800d428:	4622      	mov	r2, r4
 800d42a:	462b      	mov	r3, r5
 800d42c:	f7f3 f8e4 	bl	80005f8 <__aeabi_dmul>
 800d430:	a333      	add	r3, pc, #204	; (adr r3, 800d500 <__kernel_cos+0x168>)
 800d432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d436:	f7f2 ff29 	bl	800028c <__adddf3>
 800d43a:	4622      	mov	r2, r4
 800d43c:	462b      	mov	r3, r5
 800d43e:	f7f3 f8db 	bl	80005f8 <__aeabi_dmul>
 800d442:	4622      	mov	r2, r4
 800d444:	462b      	mov	r3, r5
 800d446:	f7f3 f8d7 	bl	80005f8 <__aeabi_dmul>
 800d44a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d44e:	4604      	mov	r4, r0
 800d450:	460d      	mov	r5, r1
 800d452:	4630      	mov	r0, r6
 800d454:	4639      	mov	r1, r7
 800d456:	f7f3 f8cf 	bl	80005f8 <__aeabi_dmul>
 800d45a:	460b      	mov	r3, r1
 800d45c:	4602      	mov	r2, r0
 800d45e:	4629      	mov	r1, r5
 800d460:	4620      	mov	r0, r4
 800d462:	f7f2 ff11 	bl	8000288 <__aeabi_dsub>
 800d466:	4b2b      	ldr	r3, [pc, #172]	; (800d514 <__kernel_cos+0x17c>)
 800d468:	4598      	cmp	r8, r3
 800d46a:	4606      	mov	r6, r0
 800d46c:	460f      	mov	r7, r1
 800d46e:	dc10      	bgt.n	800d492 <__kernel_cos+0xfa>
 800d470:	4602      	mov	r2, r0
 800d472:	460b      	mov	r3, r1
 800d474:	4650      	mov	r0, sl
 800d476:	4659      	mov	r1, fp
 800d478:	f7f2 ff06 	bl	8000288 <__aeabi_dsub>
 800d47c:	460b      	mov	r3, r1
 800d47e:	4926      	ldr	r1, [pc, #152]	; (800d518 <__kernel_cos+0x180>)
 800d480:	4602      	mov	r2, r0
 800d482:	2000      	movs	r0, #0
 800d484:	f7f2 ff00 	bl	8000288 <__aeabi_dsub>
 800d488:	ec41 0b10 	vmov	d0, r0, r1
 800d48c:	b003      	add	sp, #12
 800d48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d492:	4b22      	ldr	r3, [pc, #136]	; (800d51c <__kernel_cos+0x184>)
 800d494:	4920      	ldr	r1, [pc, #128]	; (800d518 <__kernel_cos+0x180>)
 800d496:	4598      	cmp	r8, r3
 800d498:	bfcc      	ite	gt
 800d49a:	4d21      	ldrgt	r5, [pc, #132]	; (800d520 <__kernel_cos+0x188>)
 800d49c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d4a0:	2400      	movs	r4, #0
 800d4a2:	4622      	mov	r2, r4
 800d4a4:	462b      	mov	r3, r5
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	f7f2 feee 	bl	8000288 <__aeabi_dsub>
 800d4ac:	4622      	mov	r2, r4
 800d4ae:	4680      	mov	r8, r0
 800d4b0:	4689      	mov	r9, r1
 800d4b2:	462b      	mov	r3, r5
 800d4b4:	4650      	mov	r0, sl
 800d4b6:	4659      	mov	r1, fp
 800d4b8:	f7f2 fee6 	bl	8000288 <__aeabi_dsub>
 800d4bc:	4632      	mov	r2, r6
 800d4be:	463b      	mov	r3, r7
 800d4c0:	f7f2 fee2 	bl	8000288 <__aeabi_dsub>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	4640      	mov	r0, r8
 800d4ca:	4649      	mov	r1, r9
 800d4cc:	e7da      	b.n	800d484 <__kernel_cos+0xec>
 800d4ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d508 <__kernel_cos+0x170>
 800d4d2:	e7db      	b.n	800d48c <__kernel_cos+0xf4>
 800d4d4:	f3af 8000 	nop.w
 800d4d8:	be8838d4 	.word	0xbe8838d4
 800d4dc:	bda8fae9 	.word	0xbda8fae9
 800d4e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d4e4:	3e21ee9e 	.word	0x3e21ee9e
 800d4e8:	809c52ad 	.word	0x809c52ad
 800d4ec:	3e927e4f 	.word	0x3e927e4f
 800d4f0:	19cb1590 	.word	0x19cb1590
 800d4f4:	3efa01a0 	.word	0x3efa01a0
 800d4f8:	16c15177 	.word	0x16c15177
 800d4fc:	3f56c16c 	.word	0x3f56c16c
 800d500:	5555554c 	.word	0x5555554c
 800d504:	3fa55555 	.word	0x3fa55555
 800d508:	00000000 	.word	0x00000000
 800d50c:	3ff00000 	.word	0x3ff00000
 800d510:	3fe00000 	.word	0x3fe00000
 800d514:	3fd33332 	.word	0x3fd33332
 800d518:	3ff00000 	.word	0x3ff00000
 800d51c:	3fe90000 	.word	0x3fe90000
 800d520:	3fd20000 	.word	0x3fd20000
 800d524:	00000000 	.word	0x00000000

0800d528 <__kernel_sin>:
 800d528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d52c:	ed2d 8b04 	vpush	{d8-d9}
 800d530:	eeb0 8a41 	vmov.f32	s16, s2
 800d534:	eef0 8a61 	vmov.f32	s17, s3
 800d538:	ec55 4b10 	vmov	r4, r5, d0
 800d53c:	b083      	sub	sp, #12
 800d53e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d542:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d546:	9001      	str	r0, [sp, #4]
 800d548:	da06      	bge.n	800d558 <__kernel_sin+0x30>
 800d54a:	ee10 0a10 	vmov	r0, s0
 800d54e:	4629      	mov	r1, r5
 800d550:	f7f3 fb02 	bl	8000b58 <__aeabi_d2iz>
 800d554:	2800      	cmp	r0, #0
 800d556:	d051      	beq.n	800d5fc <__kernel_sin+0xd4>
 800d558:	4622      	mov	r2, r4
 800d55a:	462b      	mov	r3, r5
 800d55c:	4620      	mov	r0, r4
 800d55e:	4629      	mov	r1, r5
 800d560:	f7f3 f84a 	bl	80005f8 <__aeabi_dmul>
 800d564:	4682      	mov	sl, r0
 800d566:	468b      	mov	fp, r1
 800d568:	4602      	mov	r2, r0
 800d56a:	460b      	mov	r3, r1
 800d56c:	4620      	mov	r0, r4
 800d56e:	4629      	mov	r1, r5
 800d570:	f7f3 f842 	bl	80005f8 <__aeabi_dmul>
 800d574:	a341      	add	r3, pc, #260	; (adr r3, 800d67c <__kernel_sin+0x154>)
 800d576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57a:	4680      	mov	r8, r0
 800d57c:	4689      	mov	r9, r1
 800d57e:	4650      	mov	r0, sl
 800d580:	4659      	mov	r1, fp
 800d582:	f7f3 f839 	bl	80005f8 <__aeabi_dmul>
 800d586:	a33f      	add	r3, pc, #252	; (adr r3, 800d684 <__kernel_sin+0x15c>)
 800d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58c:	f7f2 fe7c 	bl	8000288 <__aeabi_dsub>
 800d590:	4652      	mov	r2, sl
 800d592:	465b      	mov	r3, fp
 800d594:	f7f3 f830 	bl	80005f8 <__aeabi_dmul>
 800d598:	a33c      	add	r3, pc, #240	; (adr r3, 800d68c <__kernel_sin+0x164>)
 800d59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59e:	f7f2 fe75 	bl	800028c <__adddf3>
 800d5a2:	4652      	mov	r2, sl
 800d5a4:	465b      	mov	r3, fp
 800d5a6:	f7f3 f827 	bl	80005f8 <__aeabi_dmul>
 800d5aa:	a33a      	add	r3, pc, #232	; (adr r3, 800d694 <__kernel_sin+0x16c>)
 800d5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b0:	f7f2 fe6a 	bl	8000288 <__aeabi_dsub>
 800d5b4:	4652      	mov	r2, sl
 800d5b6:	465b      	mov	r3, fp
 800d5b8:	f7f3 f81e 	bl	80005f8 <__aeabi_dmul>
 800d5bc:	a337      	add	r3, pc, #220	; (adr r3, 800d69c <__kernel_sin+0x174>)
 800d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c2:	f7f2 fe63 	bl	800028c <__adddf3>
 800d5c6:	9b01      	ldr	r3, [sp, #4]
 800d5c8:	4606      	mov	r6, r0
 800d5ca:	460f      	mov	r7, r1
 800d5cc:	b9eb      	cbnz	r3, 800d60a <__kernel_sin+0xe2>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	4650      	mov	r0, sl
 800d5d4:	4659      	mov	r1, fp
 800d5d6:	f7f3 f80f 	bl	80005f8 <__aeabi_dmul>
 800d5da:	a325      	add	r3, pc, #148	; (adr r3, 800d670 <__kernel_sin+0x148>)
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	f7f2 fe52 	bl	8000288 <__aeabi_dsub>
 800d5e4:	4642      	mov	r2, r8
 800d5e6:	464b      	mov	r3, r9
 800d5e8:	f7f3 f806 	bl	80005f8 <__aeabi_dmul>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	4629      	mov	r1, r5
 800d5f4:	f7f2 fe4a 	bl	800028c <__adddf3>
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	ec45 4b10 	vmov	d0, r4, r5
 800d600:	b003      	add	sp, #12
 800d602:	ecbd 8b04 	vpop	{d8-d9}
 800d606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d60a:	4b1b      	ldr	r3, [pc, #108]	; (800d678 <__kernel_sin+0x150>)
 800d60c:	ec51 0b18 	vmov	r0, r1, d8
 800d610:	2200      	movs	r2, #0
 800d612:	f7f2 fff1 	bl	80005f8 <__aeabi_dmul>
 800d616:	4632      	mov	r2, r6
 800d618:	ec41 0b19 	vmov	d9, r0, r1
 800d61c:	463b      	mov	r3, r7
 800d61e:	4640      	mov	r0, r8
 800d620:	4649      	mov	r1, r9
 800d622:	f7f2 ffe9 	bl	80005f8 <__aeabi_dmul>
 800d626:	4602      	mov	r2, r0
 800d628:	460b      	mov	r3, r1
 800d62a:	ec51 0b19 	vmov	r0, r1, d9
 800d62e:	f7f2 fe2b 	bl	8000288 <__aeabi_dsub>
 800d632:	4652      	mov	r2, sl
 800d634:	465b      	mov	r3, fp
 800d636:	f7f2 ffdf 	bl	80005f8 <__aeabi_dmul>
 800d63a:	ec53 2b18 	vmov	r2, r3, d8
 800d63e:	f7f2 fe23 	bl	8000288 <__aeabi_dsub>
 800d642:	a30b      	add	r3, pc, #44	; (adr r3, 800d670 <__kernel_sin+0x148>)
 800d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d648:	4606      	mov	r6, r0
 800d64a:	460f      	mov	r7, r1
 800d64c:	4640      	mov	r0, r8
 800d64e:	4649      	mov	r1, r9
 800d650:	f7f2 ffd2 	bl	80005f8 <__aeabi_dmul>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4630      	mov	r0, r6
 800d65a:	4639      	mov	r1, r7
 800d65c:	f7f2 fe16 	bl	800028c <__adddf3>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	4620      	mov	r0, r4
 800d666:	4629      	mov	r1, r5
 800d668:	f7f2 fe0e 	bl	8000288 <__aeabi_dsub>
 800d66c:	e7c4      	b.n	800d5f8 <__kernel_sin+0xd0>
 800d66e:	bf00      	nop
 800d670:	55555549 	.word	0x55555549
 800d674:	3fc55555 	.word	0x3fc55555
 800d678:	3fe00000 	.word	0x3fe00000
 800d67c:	5acfd57c 	.word	0x5acfd57c
 800d680:	3de5d93a 	.word	0x3de5d93a
 800d684:	8a2b9ceb 	.word	0x8a2b9ceb
 800d688:	3e5ae5e6 	.word	0x3e5ae5e6
 800d68c:	57b1fe7d 	.word	0x57b1fe7d
 800d690:	3ec71de3 	.word	0x3ec71de3
 800d694:	19c161d5 	.word	0x19c161d5
 800d698:	3f2a01a0 	.word	0x3f2a01a0
 800d69c:	1110f8a6 	.word	0x1110f8a6
 800d6a0:	3f811111 	.word	0x3f811111
 800d6a4:	00000000 	.word	0x00000000

0800d6a8 <__kernel_tan>:
 800d6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ac:	ed2d 8b06 	vpush	{d8-d10}
 800d6b0:	ec5b ab10 	vmov	sl, fp, d0
 800d6b4:	4be0      	ldr	r3, [pc, #896]	; (800da38 <__kernel_tan+0x390>)
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800d6bc:	429f      	cmp	r7, r3
 800d6be:	ec59 8b11 	vmov	r8, r9, d1
 800d6c2:	4606      	mov	r6, r0
 800d6c4:	f8cd b000 	str.w	fp, [sp]
 800d6c8:	dc61      	bgt.n	800d78e <__kernel_tan+0xe6>
 800d6ca:	ee10 0a10 	vmov	r0, s0
 800d6ce:	4659      	mov	r1, fp
 800d6d0:	f7f3 fa42 	bl	8000b58 <__aeabi_d2iz>
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	f040 8083 	bne.w	800d7e2 <__kernel_tan+0x13a>
 800d6dc:	1c73      	adds	r3, r6, #1
 800d6de:	4652      	mov	r2, sl
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	433b      	orrs	r3, r7
 800d6e4:	d112      	bne.n	800d70c <__kernel_tan+0x64>
 800d6e6:	ec4b ab10 	vmov	d0, sl, fp
 800d6ea:	f000 fe59 	bl	800e3a0 <fabs>
 800d6ee:	49d3      	ldr	r1, [pc, #844]	; (800da3c <__kernel_tan+0x394>)
 800d6f0:	ec53 2b10 	vmov	r2, r3, d0
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	f7f3 f8a9 	bl	800084c <__aeabi_ddiv>
 800d6fa:	4682      	mov	sl, r0
 800d6fc:	468b      	mov	fp, r1
 800d6fe:	ec4b ab10 	vmov	d0, sl, fp
 800d702:	b003      	add	sp, #12
 800d704:	ecbd 8b06 	vpop	{d8-d10}
 800d708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70c:	2e01      	cmp	r6, #1
 800d70e:	d0f6      	beq.n	800d6fe <__kernel_tan+0x56>
 800d710:	4642      	mov	r2, r8
 800d712:	464b      	mov	r3, r9
 800d714:	4650      	mov	r0, sl
 800d716:	4659      	mov	r1, fp
 800d718:	f7f2 fdb8 	bl	800028c <__adddf3>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	460f      	mov	r7, r1
 800d722:	2000      	movs	r0, #0
 800d724:	49c6      	ldr	r1, [pc, #792]	; (800da40 <__kernel_tan+0x398>)
 800d726:	f7f3 f891 	bl	800084c <__aeabi_ddiv>
 800d72a:	e9cd 0100 	strd	r0, r1, [sp]
 800d72e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d732:	462e      	mov	r6, r5
 800d734:	4652      	mov	r2, sl
 800d736:	462c      	mov	r4, r5
 800d738:	4630      	mov	r0, r6
 800d73a:	461d      	mov	r5, r3
 800d73c:	4639      	mov	r1, r7
 800d73e:	465b      	mov	r3, fp
 800d740:	f7f2 fda2 	bl	8000288 <__aeabi_dsub>
 800d744:	4602      	mov	r2, r0
 800d746:	460b      	mov	r3, r1
 800d748:	4640      	mov	r0, r8
 800d74a:	4649      	mov	r1, r9
 800d74c:	f7f2 fd9c 	bl	8000288 <__aeabi_dsub>
 800d750:	4632      	mov	r2, r6
 800d752:	462b      	mov	r3, r5
 800d754:	f7f2 ff50 	bl	80005f8 <__aeabi_dmul>
 800d758:	4632      	mov	r2, r6
 800d75a:	4680      	mov	r8, r0
 800d75c:	4689      	mov	r9, r1
 800d75e:	462b      	mov	r3, r5
 800d760:	4630      	mov	r0, r6
 800d762:	4639      	mov	r1, r7
 800d764:	f7f2 ff48 	bl	80005f8 <__aeabi_dmul>
 800d768:	4bb4      	ldr	r3, [pc, #720]	; (800da3c <__kernel_tan+0x394>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	f7f2 fd8e 	bl	800028c <__adddf3>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	4640      	mov	r0, r8
 800d776:	4649      	mov	r1, r9
 800d778:	f7f2 fd88 	bl	800028c <__adddf3>
 800d77c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d780:	f7f2 ff3a 	bl	80005f8 <__aeabi_dmul>
 800d784:	4622      	mov	r2, r4
 800d786:	462b      	mov	r3, r5
 800d788:	f7f2 fd80 	bl	800028c <__adddf3>
 800d78c:	e7b5      	b.n	800d6fa <__kernel_tan+0x52>
 800d78e:	4bad      	ldr	r3, [pc, #692]	; (800da44 <__kernel_tan+0x39c>)
 800d790:	429f      	cmp	r7, r3
 800d792:	dd26      	ble.n	800d7e2 <__kernel_tan+0x13a>
 800d794:	9b00      	ldr	r3, [sp, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	da09      	bge.n	800d7ae <__kernel_tan+0x106>
 800d79a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d79e:	469b      	mov	fp, r3
 800d7a0:	ee10 aa10 	vmov	sl, s0
 800d7a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d7a8:	ee11 8a10 	vmov	r8, s2
 800d7ac:	4699      	mov	r9, r3
 800d7ae:	4652      	mov	r2, sl
 800d7b0:	465b      	mov	r3, fp
 800d7b2:	a183      	add	r1, pc, #524	; (adr r1, 800d9c0 <__kernel_tan+0x318>)
 800d7b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7b8:	f7f2 fd66 	bl	8000288 <__aeabi_dsub>
 800d7bc:	4642      	mov	r2, r8
 800d7be:	464b      	mov	r3, r9
 800d7c0:	4604      	mov	r4, r0
 800d7c2:	460d      	mov	r5, r1
 800d7c4:	a180      	add	r1, pc, #512	; (adr r1, 800d9c8 <__kernel_tan+0x320>)
 800d7c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7ca:	f7f2 fd5d 	bl	8000288 <__aeabi_dsub>
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	462b      	mov	r3, r5
 800d7d2:	f7f2 fd5b 	bl	800028c <__adddf3>
 800d7d6:	f04f 0800 	mov.w	r8, #0
 800d7da:	4682      	mov	sl, r0
 800d7dc:	468b      	mov	fp, r1
 800d7de:	f04f 0900 	mov.w	r9, #0
 800d7e2:	4652      	mov	r2, sl
 800d7e4:	465b      	mov	r3, fp
 800d7e6:	4650      	mov	r0, sl
 800d7e8:	4659      	mov	r1, fp
 800d7ea:	f7f2 ff05 	bl	80005f8 <__aeabi_dmul>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	ec43 2b18 	vmov	d8, r2, r3
 800d7f6:	f7f2 feff 	bl	80005f8 <__aeabi_dmul>
 800d7fa:	ec53 2b18 	vmov	r2, r3, d8
 800d7fe:	4604      	mov	r4, r0
 800d800:	460d      	mov	r5, r1
 800d802:	4650      	mov	r0, sl
 800d804:	4659      	mov	r1, fp
 800d806:	f7f2 fef7 	bl	80005f8 <__aeabi_dmul>
 800d80a:	a371      	add	r3, pc, #452	; (adr r3, 800d9d0 <__kernel_tan+0x328>)
 800d80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d810:	ec41 0b19 	vmov	d9, r0, r1
 800d814:	4620      	mov	r0, r4
 800d816:	4629      	mov	r1, r5
 800d818:	f7f2 feee 	bl	80005f8 <__aeabi_dmul>
 800d81c:	a36e      	add	r3, pc, #440	; (adr r3, 800d9d8 <__kernel_tan+0x330>)
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	f7f2 fd33 	bl	800028c <__adddf3>
 800d826:	4622      	mov	r2, r4
 800d828:	462b      	mov	r3, r5
 800d82a:	f7f2 fee5 	bl	80005f8 <__aeabi_dmul>
 800d82e:	a36c      	add	r3, pc, #432	; (adr r3, 800d9e0 <__kernel_tan+0x338>)
 800d830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d834:	f7f2 fd2a 	bl	800028c <__adddf3>
 800d838:	4622      	mov	r2, r4
 800d83a:	462b      	mov	r3, r5
 800d83c:	f7f2 fedc 	bl	80005f8 <__aeabi_dmul>
 800d840:	a369      	add	r3, pc, #420	; (adr r3, 800d9e8 <__kernel_tan+0x340>)
 800d842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d846:	f7f2 fd21 	bl	800028c <__adddf3>
 800d84a:	4622      	mov	r2, r4
 800d84c:	462b      	mov	r3, r5
 800d84e:	f7f2 fed3 	bl	80005f8 <__aeabi_dmul>
 800d852:	a367      	add	r3, pc, #412	; (adr r3, 800d9f0 <__kernel_tan+0x348>)
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	f7f2 fd18 	bl	800028c <__adddf3>
 800d85c:	4622      	mov	r2, r4
 800d85e:	462b      	mov	r3, r5
 800d860:	f7f2 feca 	bl	80005f8 <__aeabi_dmul>
 800d864:	a364      	add	r3, pc, #400	; (adr r3, 800d9f8 <__kernel_tan+0x350>)
 800d866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86a:	f7f2 fd0f 	bl	800028c <__adddf3>
 800d86e:	ec53 2b18 	vmov	r2, r3, d8
 800d872:	f7f2 fec1 	bl	80005f8 <__aeabi_dmul>
 800d876:	a362      	add	r3, pc, #392	; (adr r3, 800da00 <__kernel_tan+0x358>)
 800d878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87c:	ec41 0b1a 	vmov	d10, r0, r1
 800d880:	4620      	mov	r0, r4
 800d882:	4629      	mov	r1, r5
 800d884:	f7f2 feb8 	bl	80005f8 <__aeabi_dmul>
 800d888:	a35f      	add	r3, pc, #380	; (adr r3, 800da08 <__kernel_tan+0x360>)
 800d88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88e:	f7f2 fcfd 	bl	800028c <__adddf3>
 800d892:	4622      	mov	r2, r4
 800d894:	462b      	mov	r3, r5
 800d896:	f7f2 feaf 	bl	80005f8 <__aeabi_dmul>
 800d89a:	a35d      	add	r3, pc, #372	; (adr r3, 800da10 <__kernel_tan+0x368>)
 800d89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a0:	f7f2 fcf4 	bl	800028c <__adddf3>
 800d8a4:	4622      	mov	r2, r4
 800d8a6:	462b      	mov	r3, r5
 800d8a8:	f7f2 fea6 	bl	80005f8 <__aeabi_dmul>
 800d8ac:	a35a      	add	r3, pc, #360	; (adr r3, 800da18 <__kernel_tan+0x370>)
 800d8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b2:	f7f2 fceb 	bl	800028c <__adddf3>
 800d8b6:	4622      	mov	r2, r4
 800d8b8:	462b      	mov	r3, r5
 800d8ba:	f7f2 fe9d 	bl	80005f8 <__aeabi_dmul>
 800d8be:	a358      	add	r3, pc, #352	; (adr r3, 800da20 <__kernel_tan+0x378>)
 800d8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c4:	f7f2 fce2 	bl	800028c <__adddf3>
 800d8c8:	4622      	mov	r2, r4
 800d8ca:	462b      	mov	r3, r5
 800d8cc:	f7f2 fe94 	bl	80005f8 <__aeabi_dmul>
 800d8d0:	a355      	add	r3, pc, #340	; (adr r3, 800da28 <__kernel_tan+0x380>)
 800d8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d6:	f7f2 fcd9 	bl	800028c <__adddf3>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	460b      	mov	r3, r1
 800d8de:	ec51 0b1a 	vmov	r0, r1, d10
 800d8e2:	f7f2 fcd3 	bl	800028c <__adddf3>
 800d8e6:	ec53 2b19 	vmov	r2, r3, d9
 800d8ea:	f7f2 fe85 	bl	80005f8 <__aeabi_dmul>
 800d8ee:	4642      	mov	r2, r8
 800d8f0:	464b      	mov	r3, r9
 800d8f2:	f7f2 fccb 	bl	800028c <__adddf3>
 800d8f6:	ec53 2b18 	vmov	r2, r3, d8
 800d8fa:	f7f2 fe7d 	bl	80005f8 <__aeabi_dmul>
 800d8fe:	4642      	mov	r2, r8
 800d900:	464b      	mov	r3, r9
 800d902:	f7f2 fcc3 	bl	800028c <__adddf3>
 800d906:	a34a      	add	r3, pc, #296	; (adr r3, 800da30 <__kernel_tan+0x388>)
 800d908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90c:	4604      	mov	r4, r0
 800d90e:	460d      	mov	r5, r1
 800d910:	ec51 0b19 	vmov	r0, r1, d9
 800d914:	f7f2 fe70 	bl	80005f8 <__aeabi_dmul>
 800d918:	4622      	mov	r2, r4
 800d91a:	462b      	mov	r3, r5
 800d91c:	f7f2 fcb6 	bl	800028c <__adddf3>
 800d920:	460b      	mov	r3, r1
 800d922:	ec41 0b18 	vmov	d8, r0, r1
 800d926:	4602      	mov	r2, r0
 800d928:	4659      	mov	r1, fp
 800d92a:	4650      	mov	r0, sl
 800d92c:	f7f2 fcae 	bl	800028c <__adddf3>
 800d930:	4b44      	ldr	r3, [pc, #272]	; (800da44 <__kernel_tan+0x39c>)
 800d932:	429f      	cmp	r7, r3
 800d934:	4604      	mov	r4, r0
 800d936:	460d      	mov	r5, r1
 800d938:	f340 8086 	ble.w	800da48 <__kernel_tan+0x3a0>
 800d93c:	4630      	mov	r0, r6
 800d93e:	f7f2 fdf1 	bl	8000524 <__aeabi_i2d>
 800d942:	4622      	mov	r2, r4
 800d944:	4680      	mov	r8, r0
 800d946:	4689      	mov	r9, r1
 800d948:	462b      	mov	r3, r5
 800d94a:	4620      	mov	r0, r4
 800d94c:	4629      	mov	r1, r5
 800d94e:	f7f2 fe53 	bl	80005f8 <__aeabi_dmul>
 800d952:	4642      	mov	r2, r8
 800d954:	4606      	mov	r6, r0
 800d956:	460f      	mov	r7, r1
 800d958:	464b      	mov	r3, r9
 800d95a:	4620      	mov	r0, r4
 800d95c:	4629      	mov	r1, r5
 800d95e:	f7f2 fc95 	bl	800028c <__adddf3>
 800d962:	4602      	mov	r2, r0
 800d964:	460b      	mov	r3, r1
 800d966:	4630      	mov	r0, r6
 800d968:	4639      	mov	r1, r7
 800d96a:	f7f2 ff6f 	bl	800084c <__aeabi_ddiv>
 800d96e:	ec53 2b18 	vmov	r2, r3, d8
 800d972:	f7f2 fc89 	bl	8000288 <__aeabi_dsub>
 800d976:	4602      	mov	r2, r0
 800d978:	460b      	mov	r3, r1
 800d97a:	4650      	mov	r0, sl
 800d97c:	4659      	mov	r1, fp
 800d97e:	f7f2 fc83 	bl	8000288 <__aeabi_dsub>
 800d982:	4602      	mov	r2, r0
 800d984:	460b      	mov	r3, r1
 800d986:	f7f2 fc81 	bl	800028c <__adddf3>
 800d98a:	4602      	mov	r2, r0
 800d98c:	460b      	mov	r3, r1
 800d98e:	4640      	mov	r0, r8
 800d990:	4649      	mov	r1, r9
 800d992:	f7f2 fc79 	bl	8000288 <__aeabi_dsub>
 800d996:	9b00      	ldr	r3, [sp, #0]
 800d998:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800d99c:	f00a 0a02 	and.w	sl, sl, #2
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	f1ca 0001 	rsb	r0, sl, #1
 800d9a6:	460d      	mov	r5, r1
 800d9a8:	f7f2 fdbc 	bl	8000524 <__aeabi_i2d>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	4629      	mov	r1, r5
 800d9b4:	f7f2 fe20 	bl	80005f8 <__aeabi_dmul>
 800d9b8:	e69f      	b.n	800d6fa <__kernel_tan+0x52>
 800d9ba:	bf00      	nop
 800d9bc:	f3af 8000 	nop.w
 800d9c0:	54442d18 	.word	0x54442d18
 800d9c4:	3fe921fb 	.word	0x3fe921fb
 800d9c8:	33145c07 	.word	0x33145c07
 800d9cc:	3c81a626 	.word	0x3c81a626
 800d9d0:	74bf7ad4 	.word	0x74bf7ad4
 800d9d4:	3efb2a70 	.word	0x3efb2a70
 800d9d8:	32f0a7e9 	.word	0x32f0a7e9
 800d9dc:	3f12b80f 	.word	0x3f12b80f
 800d9e0:	1a8d1068 	.word	0x1a8d1068
 800d9e4:	3f3026f7 	.word	0x3f3026f7
 800d9e8:	fee08315 	.word	0xfee08315
 800d9ec:	3f57dbc8 	.word	0x3f57dbc8
 800d9f0:	e96e8493 	.word	0xe96e8493
 800d9f4:	3f8226e3 	.word	0x3f8226e3
 800d9f8:	1bb341fe 	.word	0x1bb341fe
 800d9fc:	3faba1ba 	.word	0x3faba1ba
 800da00:	db605373 	.word	0xdb605373
 800da04:	bef375cb 	.word	0xbef375cb
 800da08:	a03792a6 	.word	0xa03792a6
 800da0c:	3f147e88 	.word	0x3f147e88
 800da10:	f2f26501 	.word	0xf2f26501
 800da14:	3f4344d8 	.word	0x3f4344d8
 800da18:	c9560328 	.word	0xc9560328
 800da1c:	3f6d6d22 	.word	0x3f6d6d22
 800da20:	8406d637 	.word	0x8406d637
 800da24:	3f9664f4 	.word	0x3f9664f4
 800da28:	1110fe7a 	.word	0x1110fe7a
 800da2c:	3fc11111 	.word	0x3fc11111
 800da30:	55555563 	.word	0x55555563
 800da34:	3fd55555 	.word	0x3fd55555
 800da38:	3e2fffff 	.word	0x3e2fffff
 800da3c:	3ff00000 	.word	0x3ff00000
 800da40:	bff00000 	.word	0xbff00000
 800da44:	3fe59427 	.word	0x3fe59427
 800da48:	2e01      	cmp	r6, #1
 800da4a:	d02f      	beq.n	800daac <__kernel_tan+0x404>
 800da4c:	460f      	mov	r7, r1
 800da4e:	4602      	mov	r2, r0
 800da50:	460b      	mov	r3, r1
 800da52:	4689      	mov	r9, r1
 800da54:	2000      	movs	r0, #0
 800da56:	4917      	ldr	r1, [pc, #92]	; (800dab4 <__kernel_tan+0x40c>)
 800da58:	f7f2 fef8 	bl	800084c <__aeabi_ddiv>
 800da5c:	2600      	movs	r6, #0
 800da5e:	e9cd 0100 	strd	r0, r1, [sp]
 800da62:	4652      	mov	r2, sl
 800da64:	465b      	mov	r3, fp
 800da66:	4630      	mov	r0, r6
 800da68:	4639      	mov	r1, r7
 800da6a:	f7f2 fc0d 	bl	8000288 <__aeabi_dsub>
 800da6e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	ec51 0b18 	vmov	r0, r1, d8
 800da7a:	f7f2 fc05 	bl	8000288 <__aeabi_dsub>
 800da7e:	4632      	mov	r2, r6
 800da80:	462b      	mov	r3, r5
 800da82:	f7f2 fdb9 	bl	80005f8 <__aeabi_dmul>
 800da86:	46b0      	mov	r8, r6
 800da88:	460f      	mov	r7, r1
 800da8a:	4642      	mov	r2, r8
 800da8c:	462b      	mov	r3, r5
 800da8e:	4634      	mov	r4, r6
 800da90:	4649      	mov	r1, r9
 800da92:	4606      	mov	r6, r0
 800da94:	4640      	mov	r0, r8
 800da96:	f7f2 fdaf 	bl	80005f8 <__aeabi_dmul>
 800da9a:	4b07      	ldr	r3, [pc, #28]	; (800dab8 <__kernel_tan+0x410>)
 800da9c:	2200      	movs	r2, #0
 800da9e:	f7f2 fbf5 	bl	800028c <__adddf3>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	4630      	mov	r0, r6
 800daa8:	4639      	mov	r1, r7
 800daaa:	e665      	b.n	800d778 <__kernel_tan+0xd0>
 800daac:	4682      	mov	sl, r0
 800daae:	468b      	mov	fp, r1
 800dab0:	e625      	b.n	800d6fe <__kernel_tan+0x56>
 800dab2:	bf00      	nop
 800dab4:	bff00000 	.word	0xbff00000
 800dab8:	3ff00000 	.word	0x3ff00000
 800dabc:	00000000 	.word	0x00000000

0800dac0 <__ieee754_atan2>:
 800dac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dac4:	ec57 6b11 	vmov	r6, r7, d1
 800dac8:	4273      	negs	r3, r6
 800daca:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800dc48 <__ieee754_atan2+0x188>
 800dace:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800dad2:	4333      	orrs	r3, r6
 800dad4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800dad8:	4543      	cmp	r3, r8
 800dada:	ec51 0b10 	vmov	r0, r1, d0
 800dade:	ee11 5a10 	vmov	r5, s2
 800dae2:	d80a      	bhi.n	800dafa <__ieee754_atan2+0x3a>
 800dae4:	4244      	negs	r4, r0
 800dae6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800daea:	4304      	orrs	r4, r0
 800daec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800daf0:	4544      	cmp	r4, r8
 800daf2:	ee10 9a10 	vmov	r9, s0
 800daf6:	468e      	mov	lr, r1
 800daf8:	d907      	bls.n	800db0a <__ieee754_atan2+0x4a>
 800dafa:	4632      	mov	r2, r6
 800dafc:	463b      	mov	r3, r7
 800dafe:	f7f2 fbc5 	bl	800028c <__adddf3>
 800db02:	ec41 0b10 	vmov	d0, r0, r1
 800db06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db0a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800db0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800db12:	4334      	orrs	r4, r6
 800db14:	d103      	bne.n	800db1e <__ieee754_atan2+0x5e>
 800db16:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db1a:	f000 baa1 	b.w	800e060 <atan>
 800db1e:	17bc      	asrs	r4, r7, #30
 800db20:	f004 0402 	and.w	r4, r4, #2
 800db24:	ea53 0909 	orrs.w	r9, r3, r9
 800db28:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800db2c:	d107      	bne.n	800db3e <__ieee754_atan2+0x7e>
 800db2e:	2c02      	cmp	r4, #2
 800db30:	d05f      	beq.n	800dbf2 <__ieee754_atan2+0x132>
 800db32:	2c03      	cmp	r4, #3
 800db34:	d1e5      	bne.n	800db02 <__ieee754_atan2+0x42>
 800db36:	a140      	add	r1, pc, #256	; (adr r1, 800dc38 <__ieee754_atan2+0x178>)
 800db38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db3c:	e7e1      	b.n	800db02 <__ieee754_atan2+0x42>
 800db3e:	4315      	orrs	r5, r2
 800db40:	d106      	bne.n	800db50 <__ieee754_atan2+0x90>
 800db42:	f1be 0f00 	cmp.w	lr, #0
 800db46:	da5f      	bge.n	800dc08 <__ieee754_atan2+0x148>
 800db48:	a13d      	add	r1, pc, #244	; (adr r1, 800dc40 <__ieee754_atan2+0x180>)
 800db4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db4e:	e7d8      	b.n	800db02 <__ieee754_atan2+0x42>
 800db50:	4542      	cmp	r2, r8
 800db52:	d10f      	bne.n	800db74 <__ieee754_atan2+0xb4>
 800db54:	4293      	cmp	r3, r2
 800db56:	f104 34ff 	add.w	r4, r4, #4294967295
 800db5a:	d107      	bne.n	800db6c <__ieee754_atan2+0xac>
 800db5c:	2c02      	cmp	r4, #2
 800db5e:	d84c      	bhi.n	800dbfa <__ieee754_atan2+0x13a>
 800db60:	4b33      	ldr	r3, [pc, #204]	; (800dc30 <__ieee754_atan2+0x170>)
 800db62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db6a:	e7ca      	b.n	800db02 <__ieee754_atan2+0x42>
 800db6c:	2c02      	cmp	r4, #2
 800db6e:	d848      	bhi.n	800dc02 <__ieee754_atan2+0x142>
 800db70:	4b30      	ldr	r3, [pc, #192]	; (800dc34 <__ieee754_atan2+0x174>)
 800db72:	e7f6      	b.n	800db62 <__ieee754_atan2+0xa2>
 800db74:	4543      	cmp	r3, r8
 800db76:	d0e4      	beq.n	800db42 <__ieee754_atan2+0x82>
 800db78:	1a9b      	subs	r3, r3, r2
 800db7a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800db7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800db82:	da1e      	bge.n	800dbc2 <__ieee754_atan2+0x102>
 800db84:	2f00      	cmp	r7, #0
 800db86:	da01      	bge.n	800db8c <__ieee754_atan2+0xcc>
 800db88:	323c      	adds	r2, #60	; 0x3c
 800db8a:	db1e      	blt.n	800dbca <__ieee754_atan2+0x10a>
 800db8c:	4632      	mov	r2, r6
 800db8e:	463b      	mov	r3, r7
 800db90:	f7f2 fe5c 	bl	800084c <__aeabi_ddiv>
 800db94:	ec41 0b10 	vmov	d0, r0, r1
 800db98:	f000 fc02 	bl	800e3a0 <fabs>
 800db9c:	f000 fa60 	bl	800e060 <atan>
 800dba0:	ec51 0b10 	vmov	r0, r1, d0
 800dba4:	2c01      	cmp	r4, #1
 800dba6:	d013      	beq.n	800dbd0 <__ieee754_atan2+0x110>
 800dba8:	2c02      	cmp	r4, #2
 800dbaa:	d015      	beq.n	800dbd8 <__ieee754_atan2+0x118>
 800dbac:	2c00      	cmp	r4, #0
 800dbae:	d0a8      	beq.n	800db02 <__ieee754_atan2+0x42>
 800dbb0:	a317      	add	r3, pc, #92	; (adr r3, 800dc10 <__ieee754_atan2+0x150>)
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7f2 fb67 	bl	8000288 <__aeabi_dsub>
 800dbba:	a317      	add	r3, pc, #92	; (adr r3, 800dc18 <__ieee754_atan2+0x158>)
 800dbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc0:	e014      	b.n	800dbec <__ieee754_atan2+0x12c>
 800dbc2:	a117      	add	r1, pc, #92	; (adr r1, 800dc20 <__ieee754_atan2+0x160>)
 800dbc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbc8:	e7ec      	b.n	800dba4 <__ieee754_atan2+0xe4>
 800dbca:	2000      	movs	r0, #0
 800dbcc:	2100      	movs	r1, #0
 800dbce:	e7e9      	b.n	800dba4 <__ieee754_atan2+0xe4>
 800dbd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	e794      	b.n	800db02 <__ieee754_atan2+0x42>
 800dbd8:	a30d      	add	r3, pc, #52	; (adr r3, 800dc10 <__ieee754_atan2+0x150>)
 800dbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbde:	f7f2 fb53 	bl	8000288 <__aeabi_dsub>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	a10c      	add	r1, pc, #48	; (adr r1, 800dc18 <__ieee754_atan2+0x158>)
 800dbe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbec:	f7f2 fb4c 	bl	8000288 <__aeabi_dsub>
 800dbf0:	e787      	b.n	800db02 <__ieee754_atan2+0x42>
 800dbf2:	a109      	add	r1, pc, #36	; (adr r1, 800dc18 <__ieee754_atan2+0x158>)
 800dbf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbf8:	e783      	b.n	800db02 <__ieee754_atan2+0x42>
 800dbfa:	a10b      	add	r1, pc, #44	; (adr r1, 800dc28 <__ieee754_atan2+0x168>)
 800dbfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc00:	e77f      	b.n	800db02 <__ieee754_atan2+0x42>
 800dc02:	2000      	movs	r0, #0
 800dc04:	2100      	movs	r1, #0
 800dc06:	e77c      	b.n	800db02 <__ieee754_atan2+0x42>
 800dc08:	a105      	add	r1, pc, #20	; (adr r1, 800dc20 <__ieee754_atan2+0x160>)
 800dc0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc0e:	e778      	b.n	800db02 <__ieee754_atan2+0x42>
 800dc10:	33145c07 	.word	0x33145c07
 800dc14:	3ca1a626 	.word	0x3ca1a626
 800dc18:	54442d18 	.word	0x54442d18
 800dc1c:	400921fb 	.word	0x400921fb
 800dc20:	54442d18 	.word	0x54442d18
 800dc24:	3ff921fb 	.word	0x3ff921fb
 800dc28:	54442d18 	.word	0x54442d18
 800dc2c:	3fe921fb 	.word	0x3fe921fb
 800dc30:	0800fb60 	.word	0x0800fb60
 800dc34:	0800fb78 	.word	0x0800fb78
 800dc38:	54442d18 	.word	0x54442d18
 800dc3c:	c00921fb 	.word	0xc00921fb
 800dc40:	54442d18 	.word	0x54442d18
 800dc44:	bff921fb 	.word	0xbff921fb
 800dc48:	7ff00000 	.word	0x7ff00000
 800dc4c:	00000000 	.word	0x00000000

0800dc50 <__ieee754_rem_pio2>:
 800dc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc54:	ed2d 8b02 	vpush	{d8}
 800dc58:	ec55 4b10 	vmov	r4, r5, d0
 800dc5c:	4bca      	ldr	r3, [pc, #808]	; (800df88 <__ieee754_rem_pio2+0x338>)
 800dc5e:	b08b      	sub	sp, #44	; 0x2c
 800dc60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800dc64:	4598      	cmp	r8, r3
 800dc66:	4682      	mov	sl, r0
 800dc68:	9502      	str	r5, [sp, #8]
 800dc6a:	dc08      	bgt.n	800dc7e <__ieee754_rem_pio2+0x2e>
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2300      	movs	r3, #0
 800dc70:	ed80 0b00 	vstr	d0, [r0]
 800dc74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dc78:	f04f 0b00 	mov.w	fp, #0
 800dc7c:	e028      	b.n	800dcd0 <__ieee754_rem_pio2+0x80>
 800dc7e:	4bc3      	ldr	r3, [pc, #780]	; (800df8c <__ieee754_rem_pio2+0x33c>)
 800dc80:	4598      	cmp	r8, r3
 800dc82:	dc78      	bgt.n	800dd76 <__ieee754_rem_pio2+0x126>
 800dc84:	9b02      	ldr	r3, [sp, #8]
 800dc86:	4ec2      	ldr	r6, [pc, #776]	; (800df90 <__ieee754_rem_pio2+0x340>)
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	ee10 0a10 	vmov	r0, s0
 800dc8e:	a3b0      	add	r3, pc, #704	; (adr r3, 800df50 <__ieee754_rem_pio2+0x300>)
 800dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc94:	4629      	mov	r1, r5
 800dc96:	dd39      	ble.n	800dd0c <__ieee754_rem_pio2+0xbc>
 800dc98:	f7f2 faf6 	bl	8000288 <__aeabi_dsub>
 800dc9c:	45b0      	cmp	r8, r6
 800dc9e:	4604      	mov	r4, r0
 800dca0:	460d      	mov	r5, r1
 800dca2:	d01b      	beq.n	800dcdc <__ieee754_rem_pio2+0x8c>
 800dca4:	a3ac      	add	r3, pc, #688	; (adr r3, 800df58 <__ieee754_rem_pio2+0x308>)
 800dca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcaa:	f7f2 faed 	bl	8000288 <__aeabi_dsub>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	e9ca 2300 	strd	r2, r3, [sl]
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	4629      	mov	r1, r5
 800dcba:	f7f2 fae5 	bl	8000288 <__aeabi_dsub>
 800dcbe:	a3a6      	add	r3, pc, #664	; (adr r3, 800df58 <__ieee754_rem_pio2+0x308>)
 800dcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc4:	f7f2 fae0 	bl	8000288 <__aeabi_dsub>
 800dcc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dccc:	f04f 0b01 	mov.w	fp, #1
 800dcd0:	4658      	mov	r0, fp
 800dcd2:	b00b      	add	sp, #44	; 0x2c
 800dcd4:	ecbd 8b02 	vpop	{d8}
 800dcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcdc:	a3a0      	add	r3, pc, #640	; (adr r3, 800df60 <__ieee754_rem_pio2+0x310>)
 800dcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce2:	f7f2 fad1 	bl	8000288 <__aeabi_dsub>
 800dce6:	a3a0      	add	r3, pc, #640	; (adr r3, 800df68 <__ieee754_rem_pio2+0x318>)
 800dce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcec:	4604      	mov	r4, r0
 800dcee:	460d      	mov	r5, r1
 800dcf0:	f7f2 faca 	bl	8000288 <__aeabi_dsub>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	e9ca 2300 	strd	r2, r3, [sl]
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	4629      	mov	r1, r5
 800dd00:	f7f2 fac2 	bl	8000288 <__aeabi_dsub>
 800dd04:	a398      	add	r3, pc, #608	; (adr r3, 800df68 <__ieee754_rem_pio2+0x318>)
 800dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0a:	e7db      	b.n	800dcc4 <__ieee754_rem_pio2+0x74>
 800dd0c:	f7f2 fabe 	bl	800028c <__adddf3>
 800dd10:	45b0      	cmp	r8, r6
 800dd12:	4604      	mov	r4, r0
 800dd14:	460d      	mov	r5, r1
 800dd16:	d016      	beq.n	800dd46 <__ieee754_rem_pio2+0xf6>
 800dd18:	a38f      	add	r3, pc, #572	; (adr r3, 800df58 <__ieee754_rem_pio2+0x308>)
 800dd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1e:	f7f2 fab5 	bl	800028c <__adddf3>
 800dd22:	4602      	mov	r2, r0
 800dd24:	460b      	mov	r3, r1
 800dd26:	e9ca 2300 	strd	r2, r3, [sl]
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	f7f2 faab 	bl	8000288 <__aeabi_dsub>
 800dd32:	a389      	add	r3, pc, #548	; (adr r3, 800df58 <__ieee754_rem_pio2+0x308>)
 800dd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd38:	f7f2 faa8 	bl	800028c <__adddf3>
 800dd3c:	f04f 3bff 	mov.w	fp, #4294967295
 800dd40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd44:	e7c4      	b.n	800dcd0 <__ieee754_rem_pio2+0x80>
 800dd46:	a386      	add	r3, pc, #536	; (adr r3, 800df60 <__ieee754_rem_pio2+0x310>)
 800dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4c:	f7f2 fa9e 	bl	800028c <__adddf3>
 800dd50:	a385      	add	r3, pc, #532	; (adr r3, 800df68 <__ieee754_rem_pio2+0x318>)
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	4604      	mov	r4, r0
 800dd58:	460d      	mov	r5, r1
 800dd5a:	f7f2 fa97 	bl	800028c <__adddf3>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	460b      	mov	r3, r1
 800dd62:	e9ca 2300 	strd	r2, r3, [sl]
 800dd66:	4620      	mov	r0, r4
 800dd68:	4629      	mov	r1, r5
 800dd6a:	f7f2 fa8d 	bl	8000288 <__aeabi_dsub>
 800dd6e:	a37e      	add	r3, pc, #504	; (adr r3, 800df68 <__ieee754_rem_pio2+0x318>)
 800dd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd74:	e7e0      	b.n	800dd38 <__ieee754_rem_pio2+0xe8>
 800dd76:	4b87      	ldr	r3, [pc, #540]	; (800df94 <__ieee754_rem_pio2+0x344>)
 800dd78:	4598      	cmp	r8, r3
 800dd7a:	f300 80d8 	bgt.w	800df2e <__ieee754_rem_pio2+0x2de>
 800dd7e:	f000 fb0f 	bl	800e3a0 <fabs>
 800dd82:	ec55 4b10 	vmov	r4, r5, d0
 800dd86:	ee10 0a10 	vmov	r0, s0
 800dd8a:	a379      	add	r3, pc, #484	; (adr r3, 800df70 <__ieee754_rem_pio2+0x320>)
 800dd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd90:	4629      	mov	r1, r5
 800dd92:	f7f2 fc31 	bl	80005f8 <__aeabi_dmul>
 800dd96:	4b80      	ldr	r3, [pc, #512]	; (800df98 <__ieee754_rem_pio2+0x348>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f7f2 fa77 	bl	800028c <__adddf3>
 800dd9e:	f7f2 fedb 	bl	8000b58 <__aeabi_d2iz>
 800dda2:	4683      	mov	fp, r0
 800dda4:	f7f2 fbbe 	bl	8000524 <__aeabi_i2d>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	ec43 2b18 	vmov	d8, r2, r3
 800ddb0:	a367      	add	r3, pc, #412	; (adr r3, 800df50 <__ieee754_rem_pio2+0x300>)
 800ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb6:	f7f2 fc1f 	bl	80005f8 <__aeabi_dmul>
 800ddba:	4602      	mov	r2, r0
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	f7f2 fa61 	bl	8000288 <__aeabi_dsub>
 800ddc6:	a364      	add	r3, pc, #400	; (adr r3, 800df58 <__ieee754_rem_pio2+0x308>)
 800ddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddcc:	4606      	mov	r6, r0
 800ddce:	460f      	mov	r7, r1
 800ddd0:	ec51 0b18 	vmov	r0, r1, d8
 800ddd4:	f7f2 fc10 	bl	80005f8 <__aeabi_dmul>
 800ddd8:	f1bb 0f1f 	cmp.w	fp, #31
 800dddc:	4604      	mov	r4, r0
 800ddde:	460d      	mov	r5, r1
 800dde0:	dc0d      	bgt.n	800ddfe <__ieee754_rem_pio2+0x1ae>
 800dde2:	4b6e      	ldr	r3, [pc, #440]	; (800df9c <__ieee754_rem_pio2+0x34c>)
 800dde4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddec:	4543      	cmp	r3, r8
 800ddee:	d006      	beq.n	800ddfe <__ieee754_rem_pio2+0x1ae>
 800ddf0:	4622      	mov	r2, r4
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	4639      	mov	r1, r7
 800ddf8:	f7f2 fa46 	bl	8000288 <__aeabi_dsub>
 800ddfc:	e00e      	b.n	800de1c <__ieee754_rem_pio2+0x1cc>
 800ddfe:	462b      	mov	r3, r5
 800de00:	4622      	mov	r2, r4
 800de02:	4630      	mov	r0, r6
 800de04:	4639      	mov	r1, r7
 800de06:	f7f2 fa3f 	bl	8000288 <__aeabi_dsub>
 800de0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800de0e:	9303      	str	r3, [sp, #12]
 800de10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800de14:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800de18:	2b10      	cmp	r3, #16
 800de1a:	dc02      	bgt.n	800de22 <__ieee754_rem_pio2+0x1d2>
 800de1c:	e9ca 0100 	strd	r0, r1, [sl]
 800de20:	e039      	b.n	800de96 <__ieee754_rem_pio2+0x246>
 800de22:	a34f      	add	r3, pc, #316	; (adr r3, 800df60 <__ieee754_rem_pio2+0x310>)
 800de24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de28:	ec51 0b18 	vmov	r0, r1, d8
 800de2c:	f7f2 fbe4 	bl	80005f8 <__aeabi_dmul>
 800de30:	4604      	mov	r4, r0
 800de32:	460d      	mov	r5, r1
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	4630      	mov	r0, r6
 800de3a:	4639      	mov	r1, r7
 800de3c:	f7f2 fa24 	bl	8000288 <__aeabi_dsub>
 800de40:	4602      	mov	r2, r0
 800de42:	460b      	mov	r3, r1
 800de44:	4680      	mov	r8, r0
 800de46:	4689      	mov	r9, r1
 800de48:	4630      	mov	r0, r6
 800de4a:	4639      	mov	r1, r7
 800de4c:	f7f2 fa1c 	bl	8000288 <__aeabi_dsub>
 800de50:	4622      	mov	r2, r4
 800de52:	462b      	mov	r3, r5
 800de54:	f7f2 fa18 	bl	8000288 <__aeabi_dsub>
 800de58:	a343      	add	r3, pc, #268	; (adr r3, 800df68 <__ieee754_rem_pio2+0x318>)
 800de5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5e:	4604      	mov	r4, r0
 800de60:	460d      	mov	r5, r1
 800de62:	ec51 0b18 	vmov	r0, r1, d8
 800de66:	f7f2 fbc7 	bl	80005f8 <__aeabi_dmul>
 800de6a:	4622      	mov	r2, r4
 800de6c:	462b      	mov	r3, r5
 800de6e:	f7f2 fa0b 	bl	8000288 <__aeabi_dsub>
 800de72:	4602      	mov	r2, r0
 800de74:	460b      	mov	r3, r1
 800de76:	4604      	mov	r4, r0
 800de78:	460d      	mov	r5, r1
 800de7a:	4640      	mov	r0, r8
 800de7c:	4649      	mov	r1, r9
 800de7e:	f7f2 fa03 	bl	8000288 <__aeabi_dsub>
 800de82:	9a03      	ldr	r2, [sp, #12]
 800de84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800de88:	1ad3      	subs	r3, r2, r3
 800de8a:	2b31      	cmp	r3, #49	; 0x31
 800de8c:	dc24      	bgt.n	800ded8 <__ieee754_rem_pio2+0x288>
 800de8e:	e9ca 0100 	strd	r0, r1, [sl]
 800de92:	4646      	mov	r6, r8
 800de94:	464f      	mov	r7, r9
 800de96:	e9da 8900 	ldrd	r8, r9, [sl]
 800de9a:	4630      	mov	r0, r6
 800de9c:	4642      	mov	r2, r8
 800de9e:	464b      	mov	r3, r9
 800dea0:	4639      	mov	r1, r7
 800dea2:	f7f2 f9f1 	bl	8000288 <__aeabi_dsub>
 800dea6:	462b      	mov	r3, r5
 800dea8:	4622      	mov	r2, r4
 800deaa:	f7f2 f9ed 	bl	8000288 <__aeabi_dsub>
 800deae:	9b02      	ldr	r3, [sp, #8]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800deb6:	f6bf af0b 	bge.w	800dcd0 <__ieee754_rem_pio2+0x80>
 800deba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800debe:	f8ca 3004 	str.w	r3, [sl, #4]
 800dec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dec6:	f8ca 8000 	str.w	r8, [sl]
 800deca:	f8ca 0008 	str.w	r0, [sl, #8]
 800dece:	f8ca 300c 	str.w	r3, [sl, #12]
 800ded2:	f1cb 0b00 	rsb	fp, fp, #0
 800ded6:	e6fb      	b.n	800dcd0 <__ieee754_rem_pio2+0x80>
 800ded8:	a327      	add	r3, pc, #156	; (adr r3, 800df78 <__ieee754_rem_pio2+0x328>)
 800deda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dede:	ec51 0b18 	vmov	r0, r1, d8
 800dee2:	f7f2 fb89 	bl	80005f8 <__aeabi_dmul>
 800dee6:	4604      	mov	r4, r0
 800dee8:	460d      	mov	r5, r1
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4640      	mov	r0, r8
 800def0:	4649      	mov	r1, r9
 800def2:	f7f2 f9c9 	bl	8000288 <__aeabi_dsub>
 800def6:	4602      	mov	r2, r0
 800def8:	460b      	mov	r3, r1
 800defa:	4606      	mov	r6, r0
 800defc:	460f      	mov	r7, r1
 800defe:	4640      	mov	r0, r8
 800df00:	4649      	mov	r1, r9
 800df02:	f7f2 f9c1 	bl	8000288 <__aeabi_dsub>
 800df06:	4622      	mov	r2, r4
 800df08:	462b      	mov	r3, r5
 800df0a:	f7f2 f9bd 	bl	8000288 <__aeabi_dsub>
 800df0e:	a31c      	add	r3, pc, #112	; (adr r3, 800df80 <__ieee754_rem_pio2+0x330>)
 800df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df14:	4604      	mov	r4, r0
 800df16:	460d      	mov	r5, r1
 800df18:	ec51 0b18 	vmov	r0, r1, d8
 800df1c:	f7f2 fb6c 	bl	80005f8 <__aeabi_dmul>
 800df20:	4622      	mov	r2, r4
 800df22:	462b      	mov	r3, r5
 800df24:	f7f2 f9b0 	bl	8000288 <__aeabi_dsub>
 800df28:	4604      	mov	r4, r0
 800df2a:	460d      	mov	r5, r1
 800df2c:	e760      	b.n	800ddf0 <__ieee754_rem_pio2+0x1a0>
 800df2e:	4b1c      	ldr	r3, [pc, #112]	; (800dfa0 <__ieee754_rem_pio2+0x350>)
 800df30:	4598      	cmp	r8, r3
 800df32:	dd37      	ble.n	800dfa4 <__ieee754_rem_pio2+0x354>
 800df34:	ee10 2a10 	vmov	r2, s0
 800df38:	462b      	mov	r3, r5
 800df3a:	4620      	mov	r0, r4
 800df3c:	4629      	mov	r1, r5
 800df3e:	f7f2 f9a3 	bl	8000288 <__aeabi_dsub>
 800df42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df46:	e9ca 0100 	strd	r0, r1, [sl]
 800df4a:	e695      	b.n	800dc78 <__ieee754_rem_pio2+0x28>
 800df4c:	f3af 8000 	nop.w
 800df50:	54400000 	.word	0x54400000
 800df54:	3ff921fb 	.word	0x3ff921fb
 800df58:	1a626331 	.word	0x1a626331
 800df5c:	3dd0b461 	.word	0x3dd0b461
 800df60:	1a600000 	.word	0x1a600000
 800df64:	3dd0b461 	.word	0x3dd0b461
 800df68:	2e037073 	.word	0x2e037073
 800df6c:	3ba3198a 	.word	0x3ba3198a
 800df70:	6dc9c883 	.word	0x6dc9c883
 800df74:	3fe45f30 	.word	0x3fe45f30
 800df78:	2e000000 	.word	0x2e000000
 800df7c:	3ba3198a 	.word	0x3ba3198a
 800df80:	252049c1 	.word	0x252049c1
 800df84:	397b839a 	.word	0x397b839a
 800df88:	3fe921fb 	.word	0x3fe921fb
 800df8c:	4002d97b 	.word	0x4002d97b
 800df90:	3ff921fb 	.word	0x3ff921fb
 800df94:	413921fb 	.word	0x413921fb
 800df98:	3fe00000 	.word	0x3fe00000
 800df9c:	0800fb90 	.word	0x0800fb90
 800dfa0:	7fefffff 	.word	0x7fefffff
 800dfa4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800dfa8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800dfac:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	460d      	mov	r5, r1
 800dfb4:	f7f2 fdd0 	bl	8000b58 <__aeabi_d2iz>
 800dfb8:	f7f2 fab4 	bl	8000524 <__aeabi_i2d>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dfc8:	f7f2 f95e 	bl	8000288 <__aeabi_dsub>
 800dfcc:	4b21      	ldr	r3, [pc, #132]	; (800e054 <__ieee754_rem_pio2+0x404>)
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f7f2 fb12 	bl	80005f8 <__aeabi_dmul>
 800dfd4:	460d      	mov	r5, r1
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	f7f2 fdbe 	bl	8000b58 <__aeabi_d2iz>
 800dfdc:	f7f2 faa2 	bl	8000524 <__aeabi_i2d>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dfec:	f7f2 f94c 	bl	8000288 <__aeabi_dsub>
 800dff0:	4b18      	ldr	r3, [pc, #96]	; (800e054 <__ieee754_rem_pio2+0x404>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	f7f2 fb00 	bl	80005f8 <__aeabi_dmul>
 800dff8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dffc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e000:	2703      	movs	r7, #3
 800e002:	2400      	movs	r4, #0
 800e004:	2500      	movs	r5, #0
 800e006:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e00a:	4622      	mov	r2, r4
 800e00c:	462b      	mov	r3, r5
 800e00e:	46b9      	mov	r9, r7
 800e010:	3f01      	subs	r7, #1
 800e012:	f7f2 fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 800e016:	2800      	cmp	r0, #0
 800e018:	d1f5      	bne.n	800e006 <__ieee754_rem_pio2+0x3b6>
 800e01a:	4b0f      	ldr	r3, [pc, #60]	; (800e058 <__ieee754_rem_pio2+0x408>)
 800e01c:	9301      	str	r3, [sp, #4]
 800e01e:	2302      	movs	r3, #2
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	4632      	mov	r2, r6
 800e024:	464b      	mov	r3, r9
 800e026:	4651      	mov	r1, sl
 800e028:	a804      	add	r0, sp, #16
 800e02a:	f000 f9c5 	bl	800e3b8 <__kernel_rem_pio2>
 800e02e:	9b02      	ldr	r3, [sp, #8]
 800e030:	2b00      	cmp	r3, #0
 800e032:	4683      	mov	fp, r0
 800e034:	f6bf ae4c 	bge.w	800dcd0 <__ieee754_rem_pio2+0x80>
 800e038:	e9da 2100 	ldrd	r2, r1, [sl]
 800e03c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e040:	e9ca 2300 	strd	r2, r3, [sl]
 800e044:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e048:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e04c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e050:	e73f      	b.n	800ded2 <__ieee754_rem_pio2+0x282>
 800e052:	bf00      	nop
 800e054:	41700000 	.word	0x41700000
 800e058:	0800fc10 	.word	0x0800fc10
 800e05c:	00000000 	.word	0x00000000

0800e060 <atan>:
 800e060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e064:	ec55 4b10 	vmov	r4, r5, d0
 800e068:	4bc3      	ldr	r3, [pc, #780]	; (800e378 <atan+0x318>)
 800e06a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e06e:	429e      	cmp	r6, r3
 800e070:	46ab      	mov	fp, r5
 800e072:	dd18      	ble.n	800e0a6 <atan+0x46>
 800e074:	4bc1      	ldr	r3, [pc, #772]	; (800e37c <atan+0x31c>)
 800e076:	429e      	cmp	r6, r3
 800e078:	dc01      	bgt.n	800e07e <atan+0x1e>
 800e07a:	d109      	bne.n	800e090 <atan+0x30>
 800e07c:	b144      	cbz	r4, 800e090 <atan+0x30>
 800e07e:	4622      	mov	r2, r4
 800e080:	462b      	mov	r3, r5
 800e082:	4620      	mov	r0, r4
 800e084:	4629      	mov	r1, r5
 800e086:	f7f2 f901 	bl	800028c <__adddf3>
 800e08a:	4604      	mov	r4, r0
 800e08c:	460d      	mov	r5, r1
 800e08e:	e006      	b.n	800e09e <atan+0x3e>
 800e090:	f1bb 0f00 	cmp.w	fp, #0
 800e094:	f300 8131 	bgt.w	800e2fa <atan+0x29a>
 800e098:	a59b      	add	r5, pc, #620	; (adr r5, 800e308 <atan+0x2a8>)
 800e09a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e09e:	ec45 4b10 	vmov	d0, r4, r5
 800e0a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a6:	4bb6      	ldr	r3, [pc, #728]	; (800e380 <atan+0x320>)
 800e0a8:	429e      	cmp	r6, r3
 800e0aa:	dc14      	bgt.n	800e0d6 <atan+0x76>
 800e0ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e0b0:	429e      	cmp	r6, r3
 800e0b2:	dc0d      	bgt.n	800e0d0 <atan+0x70>
 800e0b4:	a396      	add	r3, pc, #600	; (adr r3, 800e310 <atan+0x2b0>)
 800e0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ba:	ee10 0a10 	vmov	r0, s0
 800e0be:	4629      	mov	r1, r5
 800e0c0:	f7f2 f8e4 	bl	800028c <__adddf3>
 800e0c4:	4baf      	ldr	r3, [pc, #700]	; (800e384 <atan+0x324>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f7f2 fd26 	bl	8000b18 <__aeabi_dcmpgt>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d1e6      	bne.n	800e09e <atan+0x3e>
 800e0d0:	f04f 3aff 	mov.w	sl, #4294967295
 800e0d4:	e02b      	b.n	800e12e <atan+0xce>
 800e0d6:	f000 f963 	bl	800e3a0 <fabs>
 800e0da:	4bab      	ldr	r3, [pc, #684]	; (800e388 <atan+0x328>)
 800e0dc:	429e      	cmp	r6, r3
 800e0de:	ec55 4b10 	vmov	r4, r5, d0
 800e0e2:	f300 80bf 	bgt.w	800e264 <atan+0x204>
 800e0e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e0ea:	429e      	cmp	r6, r3
 800e0ec:	f300 80a0 	bgt.w	800e230 <atan+0x1d0>
 800e0f0:	ee10 2a10 	vmov	r2, s0
 800e0f4:	ee10 0a10 	vmov	r0, s0
 800e0f8:	462b      	mov	r3, r5
 800e0fa:	4629      	mov	r1, r5
 800e0fc:	f7f2 f8c6 	bl	800028c <__adddf3>
 800e100:	4ba0      	ldr	r3, [pc, #640]	; (800e384 <atan+0x324>)
 800e102:	2200      	movs	r2, #0
 800e104:	f7f2 f8c0 	bl	8000288 <__aeabi_dsub>
 800e108:	2200      	movs	r2, #0
 800e10a:	4606      	mov	r6, r0
 800e10c:	460f      	mov	r7, r1
 800e10e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e112:	4620      	mov	r0, r4
 800e114:	4629      	mov	r1, r5
 800e116:	f7f2 f8b9 	bl	800028c <__adddf3>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	4630      	mov	r0, r6
 800e120:	4639      	mov	r1, r7
 800e122:	f7f2 fb93 	bl	800084c <__aeabi_ddiv>
 800e126:	f04f 0a00 	mov.w	sl, #0
 800e12a:	4604      	mov	r4, r0
 800e12c:	460d      	mov	r5, r1
 800e12e:	4622      	mov	r2, r4
 800e130:	462b      	mov	r3, r5
 800e132:	4620      	mov	r0, r4
 800e134:	4629      	mov	r1, r5
 800e136:	f7f2 fa5f 	bl	80005f8 <__aeabi_dmul>
 800e13a:	4602      	mov	r2, r0
 800e13c:	460b      	mov	r3, r1
 800e13e:	4680      	mov	r8, r0
 800e140:	4689      	mov	r9, r1
 800e142:	f7f2 fa59 	bl	80005f8 <__aeabi_dmul>
 800e146:	a374      	add	r3, pc, #464	; (adr r3, 800e318 <atan+0x2b8>)
 800e148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14c:	4606      	mov	r6, r0
 800e14e:	460f      	mov	r7, r1
 800e150:	f7f2 fa52 	bl	80005f8 <__aeabi_dmul>
 800e154:	a372      	add	r3, pc, #456	; (adr r3, 800e320 <atan+0x2c0>)
 800e156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15a:	f7f2 f897 	bl	800028c <__adddf3>
 800e15e:	4632      	mov	r2, r6
 800e160:	463b      	mov	r3, r7
 800e162:	f7f2 fa49 	bl	80005f8 <__aeabi_dmul>
 800e166:	a370      	add	r3, pc, #448	; (adr r3, 800e328 <atan+0x2c8>)
 800e168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16c:	f7f2 f88e 	bl	800028c <__adddf3>
 800e170:	4632      	mov	r2, r6
 800e172:	463b      	mov	r3, r7
 800e174:	f7f2 fa40 	bl	80005f8 <__aeabi_dmul>
 800e178:	a36d      	add	r3, pc, #436	; (adr r3, 800e330 <atan+0x2d0>)
 800e17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17e:	f7f2 f885 	bl	800028c <__adddf3>
 800e182:	4632      	mov	r2, r6
 800e184:	463b      	mov	r3, r7
 800e186:	f7f2 fa37 	bl	80005f8 <__aeabi_dmul>
 800e18a:	a36b      	add	r3, pc, #428	; (adr r3, 800e338 <atan+0x2d8>)
 800e18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e190:	f7f2 f87c 	bl	800028c <__adddf3>
 800e194:	4632      	mov	r2, r6
 800e196:	463b      	mov	r3, r7
 800e198:	f7f2 fa2e 	bl	80005f8 <__aeabi_dmul>
 800e19c:	a368      	add	r3, pc, #416	; (adr r3, 800e340 <atan+0x2e0>)
 800e19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a2:	f7f2 f873 	bl	800028c <__adddf3>
 800e1a6:	4642      	mov	r2, r8
 800e1a8:	464b      	mov	r3, r9
 800e1aa:	f7f2 fa25 	bl	80005f8 <__aeabi_dmul>
 800e1ae:	a366      	add	r3, pc, #408	; (adr r3, 800e348 <atan+0x2e8>)
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	4680      	mov	r8, r0
 800e1b6:	4689      	mov	r9, r1
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	4639      	mov	r1, r7
 800e1bc:	f7f2 fa1c 	bl	80005f8 <__aeabi_dmul>
 800e1c0:	a363      	add	r3, pc, #396	; (adr r3, 800e350 <atan+0x2f0>)
 800e1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c6:	f7f2 f85f 	bl	8000288 <__aeabi_dsub>
 800e1ca:	4632      	mov	r2, r6
 800e1cc:	463b      	mov	r3, r7
 800e1ce:	f7f2 fa13 	bl	80005f8 <__aeabi_dmul>
 800e1d2:	a361      	add	r3, pc, #388	; (adr r3, 800e358 <atan+0x2f8>)
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	f7f2 f856 	bl	8000288 <__aeabi_dsub>
 800e1dc:	4632      	mov	r2, r6
 800e1de:	463b      	mov	r3, r7
 800e1e0:	f7f2 fa0a 	bl	80005f8 <__aeabi_dmul>
 800e1e4:	a35e      	add	r3, pc, #376	; (adr r3, 800e360 <atan+0x300>)
 800e1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ea:	f7f2 f84d 	bl	8000288 <__aeabi_dsub>
 800e1ee:	4632      	mov	r2, r6
 800e1f0:	463b      	mov	r3, r7
 800e1f2:	f7f2 fa01 	bl	80005f8 <__aeabi_dmul>
 800e1f6:	a35c      	add	r3, pc, #368	; (adr r3, 800e368 <atan+0x308>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	f7f2 f844 	bl	8000288 <__aeabi_dsub>
 800e200:	4632      	mov	r2, r6
 800e202:	463b      	mov	r3, r7
 800e204:	f7f2 f9f8 	bl	80005f8 <__aeabi_dmul>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	4640      	mov	r0, r8
 800e20e:	4649      	mov	r1, r9
 800e210:	f7f2 f83c 	bl	800028c <__adddf3>
 800e214:	4622      	mov	r2, r4
 800e216:	462b      	mov	r3, r5
 800e218:	f7f2 f9ee 	bl	80005f8 <__aeabi_dmul>
 800e21c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e220:	4602      	mov	r2, r0
 800e222:	460b      	mov	r3, r1
 800e224:	d14b      	bne.n	800e2be <atan+0x25e>
 800e226:	4620      	mov	r0, r4
 800e228:	4629      	mov	r1, r5
 800e22a:	f7f2 f82d 	bl	8000288 <__aeabi_dsub>
 800e22e:	e72c      	b.n	800e08a <atan+0x2a>
 800e230:	ee10 0a10 	vmov	r0, s0
 800e234:	4b53      	ldr	r3, [pc, #332]	; (800e384 <atan+0x324>)
 800e236:	2200      	movs	r2, #0
 800e238:	4629      	mov	r1, r5
 800e23a:	f7f2 f825 	bl	8000288 <__aeabi_dsub>
 800e23e:	4b51      	ldr	r3, [pc, #324]	; (800e384 <atan+0x324>)
 800e240:	4606      	mov	r6, r0
 800e242:	460f      	mov	r7, r1
 800e244:	2200      	movs	r2, #0
 800e246:	4620      	mov	r0, r4
 800e248:	4629      	mov	r1, r5
 800e24a:	f7f2 f81f 	bl	800028c <__adddf3>
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	4630      	mov	r0, r6
 800e254:	4639      	mov	r1, r7
 800e256:	f7f2 faf9 	bl	800084c <__aeabi_ddiv>
 800e25a:	f04f 0a01 	mov.w	sl, #1
 800e25e:	4604      	mov	r4, r0
 800e260:	460d      	mov	r5, r1
 800e262:	e764      	b.n	800e12e <atan+0xce>
 800e264:	4b49      	ldr	r3, [pc, #292]	; (800e38c <atan+0x32c>)
 800e266:	429e      	cmp	r6, r3
 800e268:	da1d      	bge.n	800e2a6 <atan+0x246>
 800e26a:	ee10 0a10 	vmov	r0, s0
 800e26e:	4b48      	ldr	r3, [pc, #288]	; (800e390 <atan+0x330>)
 800e270:	2200      	movs	r2, #0
 800e272:	4629      	mov	r1, r5
 800e274:	f7f2 f808 	bl	8000288 <__aeabi_dsub>
 800e278:	4b45      	ldr	r3, [pc, #276]	; (800e390 <atan+0x330>)
 800e27a:	4606      	mov	r6, r0
 800e27c:	460f      	mov	r7, r1
 800e27e:	2200      	movs	r2, #0
 800e280:	4620      	mov	r0, r4
 800e282:	4629      	mov	r1, r5
 800e284:	f7f2 f9b8 	bl	80005f8 <__aeabi_dmul>
 800e288:	4b3e      	ldr	r3, [pc, #248]	; (800e384 <atan+0x324>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	f7f1 fffe 	bl	800028c <__adddf3>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	4630      	mov	r0, r6
 800e296:	4639      	mov	r1, r7
 800e298:	f7f2 fad8 	bl	800084c <__aeabi_ddiv>
 800e29c:	f04f 0a02 	mov.w	sl, #2
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	460d      	mov	r5, r1
 800e2a4:	e743      	b.n	800e12e <atan+0xce>
 800e2a6:	462b      	mov	r3, r5
 800e2a8:	ee10 2a10 	vmov	r2, s0
 800e2ac:	4939      	ldr	r1, [pc, #228]	; (800e394 <atan+0x334>)
 800e2ae:	2000      	movs	r0, #0
 800e2b0:	f7f2 facc 	bl	800084c <__aeabi_ddiv>
 800e2b4:	f04f 0a03 	mov.w	sl, #3
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	460d      	mov	r5, r1
 800e2bc:	e737      	b.n	800e12e <atan+0xce>
 800e2be:	4b36      	ldr	r3, [pc, #216]	; (800e398 <atan+0x338>)
 800e2c0:	4e36      	ldr	r6, [pc, #216]	; (800e39c <atan+0x33c>)
 800e2c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ca:	f7f1 ffdd 	bl	8000288 <__aeabi_dsub>
 800e2ce:	4622      	mov	r2, r4
 800e2d0:	462b      	mov	r3, r5
 800e2d2:	f7f1 ffd9 	bl	8000288 <__aeabi_dsub>
 800e2d6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e2da:	4602      	mov	r2, r0
 800e2dc:	460b      	mov	r3, r1
 800e2de:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e2e2:	f7f1 ffd1 	bl	8000288 <__aeabi_dsub>
 800e2e6:	f1bb 0f00 	cmp.w	fp, #0
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	460d      	mov	r5, r1
 800e2ee:	f6bf aed6 	bge.w	800e09e <atan+0x3e>
 800e2f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2f6:	461d      	mov	r5, r3
 800e2f8:	e6d1      	b.n	800e09e <atan+0x3e>
 800e2fa:	a51d      	add	r5, pc, #116	; (adr r5, 800e370 <atan+0x310>)
 800e2fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e300:	e6cd      	b.n	800e09e <atan+0x3e>
 800e302:	bf00      	nop
 800e304:	f3af 8000 	nop.w
 800e308:	54442d18 	.word	0x54442d18
 800e30c:	bff921fb 	.word	0xbff921fb
 800e310:	8800759c 	.word	0x8800759c
 800e314:	7e37e43c 	.word	0x7e37e43c
 800e318:	e322da11 	.word	0xe322da11
 800e31c:	3f90ad3a 	.word	0x3f90ad3a
 800e320:	24760deb 	.word	0x24760deb
 800e324:	3fa97b4b 	.word	0x3fa97b4b
 800e328:	a0d03d51 	.word	0xa0d03d51
 800e32c:	3fb10d66 	.word	0x3fb10d66
 800e330:	c54c206e 	.word	0xc54c206e
 800e334:	3fb745cd 	.word	0x3fb745cd
 800e338:	920083ff 	.word	0x920083ff
 800e33c:	3fc24924 	.word	0x3fc24924
 800e340:	5555550d 	.word	0x5555550d
 800e344:	3fd55555 	.word	0x3fd55555
 800e348:	2c6a6c2f 	.word	0x2c6a6c2f
 800e34c:	bfa2b444 	.word	0xbfa2b444
 800e350:	52defd9a 	.word	0x52defd9a
 800e354:	3fadde2d 	.word	0x3fadde2d
 800e358:	af749a6d 	.word	0xaf749a6d
 800e35c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e360:	fe231671 	.word	0xfe231671
 800e364:	3fbc71c6 	.word	0x3fbc71c6
 800e368:	9998ebc4 	.word	0x9998ebc4
 800e36c:	3fc99999 	.word	0x3fc99999
 800e370:	54442d18 	.word	0x54442d18
 800e374:	3ff921fb 	.word	0x3ff921fb
 800e378:	440fffff 	.word	0x440fffff
 800e37c:	7ff00000 	.word	0x7ff00000
 800e380:	3fdbffff 	.word	0x3fdbffff
 800e384:	3ff00000 	.word	0x3ff00000
 800e388:	3ff2ffff 	.word	0x3ff2ffff
 800e38c:	40038000 	.word	0x40038000
 800e390:	3ff80000 	.word	0x3ff80000
 800e394:	bff00000 	.word	0xbff00000
 800e398:	0800fd38 	.word	0x0800fd38
 800e39c:	0800fd18 	.word	0x0800fd18

0800e3a0 <fabs>:
 800e3a0:	ec51 0b10 	vmov	r0, r1, d0
 800e3a4:	ee10 2a10 	vmov	r2, s0
 800e3a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e3ac:	ec43 2b10 	vmov	d0, r2, r3
 800e3b0:	4770      	bx	lr
 800e3b2:	0000      	movs	r0, r0
 800e3b4:	0000      	movs	r0, r0
	...

0800e3b8 <__kernel_rem_pio2>:
 800e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3bc:	ed2d 8b02 	vpush	{d8}
 800e3c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e3c4:	f112 0f14 	cmn.w	r2, #20
 800e3c8:	9306      	str	r3, [sp, #24]
 800e3ca:	9104      	str	r1, [sp, #16]
 800e3cc:	4bc2      	ldr	r3, [pc, #776]	; (800e6d8 <__kernel_rem_pio2+0x320>)
 800e3ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e3d0:	9009      	str	r0, [sp, #36]	; 0x24
 800e3d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	9b06      	ldr	r3, [sp, #24]
 800e3da:	f103 33ff 	add.w	r3, r3, #4294967295
 800e3de:	bfa8      	it	ge
 800e3e0:	1ed4      	subge	r4, r2, #3
 800e3e2:	9305      	str	r3, [sp, #20]
 800e3e4:	bfb2      	itee	lt
 800e3e6:	2400      	movlt	r4, #0
 800e3e8:	2318      	movge	r3, #24
 800e3ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800e3ee:	f06f 0317 	mvn.w	r3, #23
 800e3f2:	fb04 3303 	mla	r3, r4, r3, r3
 800e3f6:	eb03 0a02 	add.w	sl, r3, r2
 800e3fa:	9b00      	ldr	r3, [sp, #0]
 800e3fc:	9a05      	ldr	r2, [sp, #20]
 800e3fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e6c8 <__kernel_rem_pio2+0x310>
 800e402:	eb03 0802 	add.w	r8, r3, r2
 800e406:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e408:	1aa7      	subs	r7, r4, r2
 800e40a:	ae20      	add	r6, sp, #128	; 0x80
 800e40c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e410:	2500      	movs	r5, #0
 800e412:	4545      	cmp	r5, r8
 800e414:	dd13      	ble.n	800e43e <__kernel_rem_pio2+0x86>
 800e416:	9b06      	ldr	r3, [sp, #24]
 800e418:	aa20      	add	r2, sp, #128	; 0x80
 800e41a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e41e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e422:	f04f 0800 	mov.w	r8, #0
 800e426:	9b00      	ldr	r3, [sp, #0]
 800e428:	4598      	cmp	r8, r3
 800e42a:	dc31      	bgt.n	800e490 <__kernel_rem_pio2+0xd8>
 800e42c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e6c8 <__kernel_rem_pio2+0x310>
 800e430:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e434:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e438:	462f      	mov	r7, r5
 800e43a:	2600      	movs	r6, #0
 800e43c:	e01b      	b.n	800e476 <__kernel_rem_pio2+0xbe>
 800e43e:	42ef      	cmn	r7, r5
 800e440:	d407      	bmi.n	800e452 <__kernel_rem_pio2+0x9a>
 800e442:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e446:	f7f2 f86d 	bl	8000524 <__aeabi_i2d>
 800e44a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e44e:	3501      	adds	r5, #1
 800e450:	e7df      	b.n	800e412 <__kernel_rem_pio2+0x5a>
 800e452:	ec51 0b18 	vmov	r0, r1, d8
 800e456:	e7f8      	b.n	800e44a <__kernel_rem_pio2+0x92>
 800e458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e45c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e460:	f7f2 f8ca 	bl	80005f8 <__aeabi_dmul>
 800e464:	4602      	mov	r2, r0
 800e466:	460b      	mov	r3, r1
 800e468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e46c:	f7f1 ff0e 	bl	800028c <__adddf3>
 800e470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e474:	3601      	adds	r6, #1
 800e476:	9b05      	ldr	r3, [sp, #20]
 800e478:	429e      	cmp	r6, r3
 800e47a:	f1a7 0708 	sub.w	r7, r7, #8
 800e47e:	ddeb      	ble.n	800e458 <__kernel_rem_pio2+0xa0>
 800e480:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e484:	f108 0801 	add.w	r8, r8, #1
 800e488:	ecab 7b02 	vstmia	fp!, {d7}
 800e48c:	3508      	adds	r5, #8
 800e48e:	e7ca      	b.n	800e426 <__kernel_rem_pio2+0x6e>
 800e490:	9b00      	ldr	r3, [sp, #0]
 800e492:	aa0c      	add	r2, sp, #48	; 0x30
 800e494:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e498:	930b      	str	r3, [sp, #44]	; 0x2c
 800e49a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e49c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e4a0:	9c00      	ldr	r4, [sp, #0]
 800e4a2:	930a      	str	r3, [sp, #40]	; 0x28
 800e4a4:	00e3      	lsls	r3, r4, #3
 800e4a6:	9308      	str	r3, [sp, #32]
 800e4a8:	ab98      	add	r3, sp, #608	; 0x260
 800e4aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e4b2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e4b6:	ab70      	add	r3, sp, #448	; 0x1c0
 800e4b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e4bc:	46c3      	mov	fp, r8
 800e4be:	46a1      	mov	r9, r4
 800e4c0:	f1b9 0f00 	cmp.w	r9, #0
 800e4c4:	f1a5 0508 	sub.w	r5, r5, #8
 800e4c8:	dc77      	bgt.n	800e5ba <__kernel_rem_pio2+0x202>
 800e4ca:	ec47 6b10 	vmov	d0, r6, r7
 800e4ce:	4650      	mov	r0, sl
 800e4d0:	f000 fac2 	bl	800ea58 <scalbn>
 800e4d4:	ec57 6b10 	vmov	r6, r7, d0
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e4de:	ee10 0a10 	vmov	r0, s0
 800e4e2:	4639      	mov	r1, r7
 800e4e4:	f7f2 f888 	bl	80005f8 <__aeabi_dmul>
 800e4e8:	ec41 0b10 	vmov	d0, r0, r1
 800e4ec:	f000 fb34 	bl	800eb58 <floor>
 800e4f0:	4b7a      	ldr	r3, [pc, #488]	; (800e6dc <__kernel_rem_pio2+0x324>)
 800e4f2:	ec51 0b10 	vmov	r0, r1, d0
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f7f2 f87e 	bl	80005f8 <__aeabi_dmul>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	460b      	mov	r3, r1
 800e500:	4630      	mov	r0, r6
 800e502:	4639      	mov	r1, r7
 800e504:	f7f1 fec0 	bl	8000288 <__aeabi_dsub>
 800e508:	460f      	mov	r7, r1
 800e50a:	4606      	mov	r6, r0
 800e50c:	f7f2 fb24 	bl	8000b58 <__aeabi_d2iz>
 800e510:	9002      	str	r0, [sp, #8]
 800e512:	f7f2 f807 	bl	8000524 <__aeabi_i2d>
 800e516:	4602      	mov	r2, r0
 800e518:	460b      	mov	r3, r1
 800e51a:	4630      	mov	r0, r6
 800e51c:	4639      	mov	r1, r7
 800e51e:	f7f1 feb3 	bl	8000288 <__aeabi_dsub>
 800e522:	f1ba 0f00 	cmp.w	sl, #0
 800e526:	4606      	mov	r6, r0
 800e528:	460f      	mov	r7, r1
 800e52a:	dd6d      	ble.n	800e608 <__kernel_rem_pio2+0x250>
 800e52c:	1e61      	subs	r1, r4, #1
 800e52e:	ab0c      	add	r3, sp, #48	; 0x30
 800e530:	9d02      	ldr	r5, [sp, #8]
 800e532:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e536:	f1ca 0018 	rsb	r0, sl, #24
 800e53a:	fa43 f200 	asr.w	r2, r3, r0
 800e53e:	4415      	add	r5, r2
 800e540:	4082      	lsls	r2, r0
 800e542:	1a9b      	subs	r3, r3, r2
 800e544:	aa0c      	add	r2, sp, #48	; 0x30
 800e546:	9502      	str	r5, [sp, #8]
 800e548:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e54c:	f1ca 0217 	rsb	r2, sl, #23
 800e550:	fa43 fb02 	asr.w	fp, r3, r2
 800e554:	f1bb 0f00 	cmp.w	fp, #0
 800e558:	dd65      	ble.n	800e626 <__kernel_rem_pio2+0x26e>
 800e55a:	9b02      	ldr	r3, [sp, #8]
 800e55c:	2200      	movs	r2, #0
 800e55e:	3301      	adds	r3, #1
 800e560:	9302      	str	r3, [sp, #8]
 800e562:	4615      	mov	r5, r2
 800e564:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e568:	4294      	cmp	r4, r2
 800e56a:	f300 809f 	bgt.w	800e6ac <__kernel_rem_pio2+0x2f4>
 800e56e:	f1ba 0f00 	cmp.w	sl, #0
 800e572:	dd07      	ble.n	800e584 <__kernel_rem_pio2+0x1cc>
 800e574:	f1ba 0f01 	cmp.w	sl, #1
 800e578:	f000 80c1 	beq.w	800e6fe <__kernel_rem_pio2+0x346>
 800e57c:	f1ba 0f02 	cmp.w	sl, #2
 800e580:	f000 80c7 	beq.w	800e712 <__kernel_rem_pio2+0x35a>
 800e584:	f1bb 0f02 	cmp.w	fp, #2
 800e588:	d14d      	bne.n	800e626 <__kernel_rem_pio2+0x26e>
 800e58a:	4632      	mov	r2, r6
 800e58c:	463b      	mov	r3, r7
 800e58e:	4954      	ldr	r1, [pc, #336]	; (800e6e0 <__kernel_rem_pio2+0x328>)
 800e590:	2000      	movs	r0, #0
 800e592:	f7f1 fe79 	bl	8000288 <__aeabi_dsub>
 800e596:	4606      	mov	r6, r0
 800e598:	460f      	mov	r7, r1
 800e59a:	2d00      	cmp	r5, #0
 800e59c:	d043      	beq.n	800e626 <__kernel_rem_pio2+0x26e>
 800e59e:	4650      	mov	r0, sl
 800e5a0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e6d0 <__kernel_rem_pio2+0x318>
 800e5a4:	f000 fa58 	bl	800ea58 <scalbn>
 800e5a8:	4630      	mov	r0, r6
 800e5aa:	4639      	mov	r1, r7
 800e5ac:	ec53 2b10 	vmov	r2, r3, d0
 800e5b0:	f7f1 fe6a 	bl	8000288 <__aeabi_dsub>
 800e5b4:	4606      	mov	r6, r0
 800e5b6:	460f      	mov	r7, r1
 800e5b8:	e035      	b.n	800e626 <__kernel_rem_pio2+0x26e>
 800e5ba:	4b4a      	ldr	r3, [pc, #296]	; (800e6e4 <__kernel_rem_pio2+0x32c>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	4630      	mov	r0, r6
 800e5c0:	4639      	mov	r1, r7
 800e5c2:	f7f2 f819 	bl	80005f8 <__aeabi_dmul>
 800e5c6:	f7f2 fac7 	bl	8000b58 <__aeabi_d2iz>
 800e5ca:	f7f1 ffab 	bl	8000524 <__aeabi_i2d>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	ec43 2b18 	vmov	d8, r2, r3
 800e5d6:	4b44      	ldr	r3, [pc, #272]	; (800e6e8 <__kernel_rem_pio2+0x330>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f7f2 f80d 	bl	80005f8 <__aeabi_dmul>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	4639      	mov	r1, r7
 800e5e6:	f7f1 fe4f 	bl	8000288 <__aeabi_dsub>
 800e5ea:	f7f2 fab5 	bl	8000b58 <__aeabi_d2iz>
 800e5ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5f2:	f84b 0b04 	str.w	r0, [fp], #4
 800e5f6:	ec51 0b18 	vmov	r0, r1, d8
 800e5fa:	f7f1 fe47 	bl	800028c <__adddf3>
 800e5fe:	f109 39ff 	add.w	r9, r9, #4294967295
 800e602:	4606      	mov	r6, r0
 800e604:	460f      	mov	r7, r1
 800e606:	e75b      	b.n	800e4c0 <__kernel_rem_pio2+0x108>
 800e608:	d106      	bne.n	800e618 <__kernel_rem_pio2+0x260>
 800e60a:	1e63      	subs	r3, r4, #1
 800e60c:	aa0c      	add	r2, sp, #48	; 0x30
 800e60e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e612:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e616:	e79d      	b.n	800e554 <__kernel_rem_pio2+0x19c>
 800e618:	4b34      	ldr	r3, [pc, #208]	; (800e6ec <__kernel_rem_pio2+0x334>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	f7f2 fa72 	bl	8000b04 <__aeabi_dcmpge>
 800e620:	2800      	cmp	r0, #0
 800e622:	d140      	bne.n	800e6a6 <__kernel_rem_pio2+0x2ee>
 800e624:	4683      	mov	fp, r0
 800e626:	2200      	movs	r2, #0
 800e628:	2300      	movs	r3, #0
 800e62a:	4630      	mov	r0, r6
 800e62c:	4639      	mov	r1, r7
 800e62e:	f7f2 fa4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e632:	2800      	cmp	r0, #0
 800e634:	f000 80c1 	beq.w	800e7ba <__kernel_rem_pio2+0x402>
 800e638:	1e65      	subs	r5, r4, #1
 800e63a:	462b      	mov	r3, r5
 800e63c:	2200      	movs	r2, #0
 800e63e:	9900      	ldr	r1, [sp, #0]
 800e640:	428b      	cmp	r3, r1
 800e642:	da6d      	bge.n	800e720 <__kernel_rem_pio2+0x368>
 800e644:	2a00      	cmp	r2, #0
 800e646:	f000 808a 	beq.w	800e75e <__kernel_rem_pio2+0x3a6>
 800e64a:	ab0c      	add	r3, sp, #48	; 0x30
 800e64c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e650:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e654:	2b00      	cmp	r3, #0
 800e656:	f000 80ae 	beq.w	800e7b6 <__kernel_rem_pio2+0x3fe>
 800e65a:	4650      	mov	r0, sl
 800e65c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e6d0 <__kernel_rem_pio2+0x318>
 800e660:	f000 f9fa 	bl	800ea58 <scalbn>
 800e664:	1c6b      	adds	r3, r5, #1
 800e666:	00da      	lsls	r2, r3, #3
 800e668:	9205      	str	r2, [sp, #20]
 800e66a:	ec57 6b10 	vmov	r6, r7, d0
 800e66e:	aa70      	add	r2, sp, #448	; 0x1c0
 800e670:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e6e4 <__kernel_rem_pio2+0x32c>
 800e674:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e678:	462c      	mov	r4, r5
 800e67a:	f04f 0800 	mov.w	r8, #0
 800e67e:	2c00      	cmp	r4, #0
 800e680:	f280 80d4 	bge.w	800e82c <__kernel_rem_pio2+0x474>
 800e684:	462c      	mov	r4, r5
 800e686:	2c00      	cmp	r4, #0
 800e688:	f2c0 8102 	blt.w	800e890 <__kernel_rem_pio2+0x4d8>
 800e68c:	4b18      	ldr	r3, [pc, #96]	; (800e6f0 <__kernel_rem_pio2+0x338>)
 800e68e:	461e      	mov	r6, r3
 800e690:	ab70      	add	r3, sp, #448	; 0x1c0
 800e692:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e696:	1b2b      	subs	r3, r5, r4
 800e698:	f04f 0900 	mov.w	r9, #0
 800e69c:	f04f 0a00 	mov.w	sl, #0
 800e6a0:	2700      	movs	r7, #0
 800e6a2:	9306      	str	r3, [sp, #24]
 800e6a4:	e0e6      	b.n	800e874 <__kernel_rem_pio2+0x4bc>
 800e6a6:	f04f 0b02 	mov.w	fp, #2
 800e6aa:	e756      	b.n	800e55a <__kernel_rem_pio2+0x1a2>
 800e6ac:	f8d8 3000 	ldr.w	r3, [r8]
 800e6b0:	bb05      	cbnz	r5, 800e6f4 <__kernel_rem_pio2+0x33c>
 800e6b2:	b123      	cbz	r3, 800e6be <__kernel_rem_pio2+0x306>
 800e6b4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e6b8:	f8c8 3000 	str.w	r3, [r8]
 800e6bc:	2301      	movs	r3, #1
 800e6be:	3201      	adds	r2, #1
 800e6c0:	f108 0804 	add.w	r8, r8, #4
 800e6c4:	461d      	mov	r5, r3
 800e6c6:	e74f      	b.n	800e568 <__kernel_rem_pio2+0x1b0>
	...
 800e6d4:	3ff00000 	.word	0x3ff00000
 800e6d8:	0800fd98 	.word	0x0800fd98
 800e6dc:	40200000 	.word	0x40200000
 800e6e0:	3ff00000 	.word	0x3ff00000
 800e6e4:	3e700000 	.word	0x3e700000
 800e6e8:	41700000 	.word	0x41700000
 800e6ec:	3fe00000 	.word	0x3fe00000
 800e6f0:	0800fd58 	.word	0x0800fd58
 800e6f4:	1acb      	subs	r3, r1, r3
 800e6f6:	f8c8 3000 	str.w	r3, [r8]
 800e6fa:	462b      	mov	r3, r5
 800e6fc:	e7df      	b.n	800e6be <__kernel_rem_pio2+0x306>
 800e6fe:	1e62      	subs	r2, r4, #1
 800e700:	ab0c      	add	r3, sp, #48	; 0x30
 800e702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e706:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e70a:	a90c      	add	r1, sp, #48	; 0x30
 800e70c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e710:	e738      	b.n	800e584 <__kernel_rem_pio2+0x1cc>
 800e712:	1e62      	subs	r2, r4, #1
 800e714:	ab0c      	add	r3, sp, #48	; 0x30
 800e716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e71a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e71e:	e7f4      	b.n	800e70a <__kernel_rem_pio2+0x352>
 800e720:	a90c      	add	r1, sp, #48	; 0x30
 800e722:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e726:	3b01      	subs	r3, #1
 800e728:	430a      	orrs	r2, r1
 800e72a:	e788      	b.n	800e63e <__kernel_rem_pio2+0x286>
 800e72c:	3301      	adds	r3, #1
 800e72e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e732:	2900      	cmp	r1, #0
 800e734:	d0fa      	beq.n	800e72c <__kernel_rem_pio2+0x374>
 800e736:	9a08      	ldr	r2, [sp, #32]
 800e738:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e73c:	446a      	add	r2, sp
 800e73e:	3a98      	subs	r2, #152	; 0x98
 800e740:	9208      	str	r2, [sp, #32]
 800e742:	9a06      	ldr	r2, [sp, #24]
 800e744:	a920      	add	r1, sp, #128	; 0x80
 800e746:	18a2      	adds	r2, r4, r2
 800e748:	18e3      	adds	r3, r4, r3
 800e74a:	f104 0801 	add.w	r8, r4, #1
 800e74e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e752:	9302      	str	r3, [sp, #8]
 800e754:	9b02      	ldr	r3, [sp, #8]
 800e756:	4543      	cmp	r3, r8
 800e758:	da04      	bge.n	800e764 <__kernel_rem_pio2+0x3ac>
 800e75a:	461c      	mov	r4, r3
 800e75c:	e6a2      	b.n	800e4a4 <__kernel_rem_pio2+0xec>
 800e75e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e760:	2301      	movs	r3, #1
 800e762:	e7e4      	b.n	800e72e <__kernel_rem_pio2+0x376>
 800e764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e766:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e76a:	f7f1 fedb 	bl	8000524 <__aeabi_i2d>
 800e76e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e774:	46ab      	mov	fp, r5
 800e776:	461c      	mov	r4, r3
 800e778:	f04f 0900 	mov.w	r9, #0
 800e77c:	2600      	movs	r6, #0
 800e77e:	2700      	movs	r7, #0
 800e780:	9b05      	ldr	r3, [sp, #20]
 800e782:	4599      	cmp	r9, r3
 800e784:	dd06      	ble.n	800e794 <__kernel_rem_pio2+0x3dc>
 800e786:	9b08      	ldr	r3, [sp, #32]
 800e788:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e78c:	f108 0801 	add.w	r8, r8, #1
 800e790:	9308      	str	r3, [sp, #32]
 800e792:	e7df      	b.n	800e754 <__kernel_rem_pio2+0x39c>
 800e794:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e798:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e79c:	f7f1 ff2c 	bl	80005f8 <__aeabi_dmul>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	4639      	mov	r1, r7
 800e7a8:	f7f1 fd70 	bl	800028c <__adddf3>
 800e7ac:	f109 0901 	add.w	r9, r9, #1
 800e7b0:	4606      	mov	r6, r0
 800e7b2:	460f      	mov	r7, r1
 800e7b4:	e7e4      	b.n	800e780 <__kernel_rem_pio2+0x3c8>
 800e7b6:	3d01      	subs	r5, #1
 800e7b8:	e747      	b.n	800e64a <__kernel_rem_pio2+0x292>
 800e7ba:	ec47 6b10 	vmov	d0, r6, r7
 800e7be:	f1ca 0000 	rsb	r0, sl, #0
 800e7c2:	f000 f949 	bl	800ea58 <scalbn>
 800e7c6:	ec57 6b10 	vmov	r6, r7, d0
 800e7ca:	4ba0      	ldr	r3, [pc, #640]	; (800ea4c <__kernel_rem_pio2+0x694>)
 800e7cc:	ee10 0a10 	vmov	r0, s0
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f2 f996 	bl	8000b04 <__aeabi_dcmpge>
 800e7d8:	b1f8      	cbz	r0, 800e81a <__kernel_rem_pio2+0x462>
 800e7da:	4b9d      	ldr	r3, [pc, #628]	; (800ea50 <__kernel_rem_pio2+0x698>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	4630      	mov	r0, r6
 800e7e0:	4639      	mov	r1, r7
 800e7e2:	f7f1 ff09 	bl	80005f8 <__aeabi_dmul>
 800e7e6:	f7f2 f9b7 	bl	8000b58 <__aeabi_d2iz>
 800e7ea:	4680      	mov	r8, r0
 800e7ec:	f7f1 fe9a 	bl	8000524 <__aeabi_i2d>
 800e7f0:	4b96      	ldr	r3, [pc, #600]	; (800ea4c <__kernel_rem_pio2+0x694>)
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f7f1 ff00 	bl	80005f8 <__aeabi_dmul>
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	4639      	mov	r1, r7
 800e7fe:	4630      	mov	r0, r6
 800e800:	f7f1 fd42 	bl	8000288 <__aeabi_dsub>
 800e804:	f7f2 f9a8 	bl	8000b58 <__aeabi_d2iz>
 800e808:	1c65      	adds	r5, r4, #1
 800e80a:	ab0c      	add	r3, sp, #48	; 0x30
 800e80c:	f10a 0a18 	add.w	sl, sl, #24
 800e810:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e814:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e818:	e71f      	b.n	800e65a <__kernel_rem_pio2+0x2a2>
 800e81a:	4630      	mov	r0, r6
 800e81c:	4639      	mov	r1, r7
 800e81e:	f7f2 f99b 	bl	8000b58 <__aeabi_d2iz>
 800e822:	ab0c      	add	r3, sp, #48	; 0x30
 800e824:	4625      	mov	r5, r4
 800e826:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e82a:	e716      	b.n	800e65a <__kernel_rem_pio2+0x2a2>
 800e82c:	ab0c      	add	r3, sp, #48	; 0x30
 800e82e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e832:	f7f1 fe77 	bl	8000524 <__aeabi_i2d>
 800e836:	4632      	mov	r2, r6
 800e838:	463b      	mov	r3, r7
 800e83a:	f7f1 fedd 	bl	80005f8 <__aeabi_dmul>
 800e83e:	4642      	mov	r2, r8
 800e840:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e844:	464b      	mov	r3, r9
 800e846:	4630      	mov	r0, r6
 800e848:	4639      	mov	r1, r7
 800e84a:	f7f1 fed5 	bl	80005f8 <__aeabi_dmul>
 800e84e:	3c01      	subs	r4, #1
 800e850:	4606      	mov	r6, r0
 800e852:	460f      	mov	r7, r1
 800e854:	e713      	b.n	800e67e <__kernel_rem_pio2+0x2c6>
 800e856:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e85a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e85e:	f7f1 fecb 	bl	80005f8 <__aeabi_dmul>
 800e862:	4602      	mov	r2, r0
 800e864:	460b      	mov	r3, r1
 800e866:	4648      	mov	r0, r9
 800e868:	4651      	mov	r1, sl
 800e86a:	f7f1 fd0f 	bl	800028c <__adddf3>
 800e86e:	3701      	adds	r7, #1
 800e870:	4681      	mov	r9, r0
 800e872:	468a      	mov	sl, r1
 800e874:	9b00      	ldr	r3, [sp, #0]
 800e876:	429f      	cmp	r7, r3
 800e878:	dc02      	bgt.n	800e880 <__kernel_rem_pio2+0x4c8>
 800e87a:	9b06      	ldr	r3, [sp, #24]
 800e87c:	429f      	cmp	r7, r3
 800e87e:	ddea      	ble.n	800e856 <__kernel_rem_pio2+0x49e>
 800e880:	9a06      	ldr	r2, [sp, #24]
 800e882:	ab48      	add	r3, sp, #288	; 0x120
 800e884:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e888:	e9c6 9a00 	strd	r9, sl, [r6]
 800e88c:	3c01      	subs	r4, #1
 800e88e:	e6fa      	b.n	800e686 <__kernel_rem_pio2+0x2ce>
 800e890:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e892:	2b02      	cmp	r3, #2
 800e894:	dc0b      	bgt.n	800e8ae <__kernel_rem_pio2+0x4f6>
 800e896:	2b00      	cmp	r3, #0
 800e898:	dc39      	bgt.n	800e90e <__kernel_rem_pio2+0x556>
 800e89a:	d05d      	beq.n	800e958 <__kernel_rem_pio2+0x5a0>
 800e89c:	9b02      	ldr	r3, [sp, #8]
 800e89e:	f003 0007 	and.w	r0, r3, #7
 800e8a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e8a6:	ecbd 8b02 	vpop	{d8}
 800e8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e8b0:	2b03      	cmp	r3, #3
 800e8b2:	d1f3      	bne.n	800e89c <__kernel_rem_pio2+0x4e4>
 800e8b4:	9b05      	ldr	r3, [sp, #20]
 800e8b6:	9500      	str	r5, [sp, #0]
 800e8b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e8bc:	eb0d 0403 	add.w	r4, sp, r3
 800e8c0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e8c4:	46a2      	mov	sl, r4
 800e8c6:	9b00      	ldr	r3, [sp, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f1aa 0a08 	sub.w	sl, sl, #8
 800e8ce:	dc69      	bgt.n	800e9a4 <__kernel_rem_pio2+0x5ec>
 800e8d0:	46aa      	mov	sl, r5
 800e8d2:	f1ba 0f01 	cmp.w	sl, #1
 800e8d6:	f1a4 0408 	sub.w	r4, r4, #8
 800e8da:	f300 8083 	bgt.w	800e9e4 <__kernel_rem_pio2+0x62c>
 800e8de:	9c05      	ldr	r4, [sp, #20]
 800e8e0:	ab48      	add	r3, sp, #288	; 0x120
 800e8e2:	441c      	add	r4, r3
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	2d01      	cmp	r5, #1
 800e8ea:	f300 809a 	bgt.w	800ea22 <__kernel_rem_pio2+0x66a>
 800e8ee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e8f2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e8f6:	f1bb 0f00 	cmp.w	fp, #0
 800e8fa:	f040 8098 	bne.w	800ea2e <__kernel_rem_pio2+0x676>
 800e8fe:	9b04      	ldr	r3, [sp, #16]
 800e900:	e9c3 7800 	strd	r7, r8, [r3]
 800e904:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e908:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e90c:	e7c6      	b.n	800e89c <__kernel_rem_pio2+0x4e4>
 800e90e:	9e05      	ldr	r6, [sp, #20]
 800e910:	ab48      	add	r3, sp, #288	; 0x120
 800e912:	441e      	add	r6, r3
 800e914:	462c      	mov	r4, r5
 800e916:	2000      	movs	r0, #0
 800e918:	2100      	movs	r1, #0
 800e91a:	2c00      	cmp	r4, #0
 800e91c:	da33      	bge.n	800e986 <__kernel_rem_pio2+0x5ce>
 800e91e:	f1bb 0f00 	cmp.w	fp, #0
 800e922:	d036      	beq.n	800e992 <__kernel_rem_pio2+0x5da>
 800e924:	4602      	mov	r2, r0
 800e926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e92a:	9c04      	ldr	r4, [sp, #16]
 800e92c:	e9c4 2300 	strd	r2, r3, [r4]
 800e930:	4602      	mov	r2, r0
 800e932:	460b      	mov	r3, r1
 800e934:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e938:	f7f1 fca6 	bl	8000288 <__aeabi_dsub>
 800e93c:	ae4a      	add	r6, sp, #296	; 0x128
 800e93e:	2401      	movs	r4, #1
 800e940:	42a5      	cmp	r5, r4
 800e942:	da29      	bge.n	800e998 <__kernel_rem_pio2+0x5e0>
 800e944:	f1bb 0f00 	cmp.w	fp, #0
 800e948:	d002      	beq.n	800e950 <__kernel_rem_pio2+0x598>
 800e94a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e94e:	4619      	mov	r1, r3
 800e950:	9b04      	ldr	r3, [sp, #16]
 800e952:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e956:	e7a1      	b.n	800e89c <__kernel_rem_pio2+0x4e4>
 800e958:	9c05      	ldr	r4, [sp, #20]
 800e95a:	ab48      	add	r3, sp, #288	; 0x120
 800e95c:	441c      	add	r4, r3
 800e95e:	2000      	movs	r0, #0
 800e960:	2100      	movs	r1, #0
 800e962:	2d00      	cmp	r5, #0
 800e964:	da09      	bge.n	800e97a <__kernel_rem_pio2+0x5c2>
 800e966:	f1bb 0f00 	cmp.w	fp, #0
 800e96a:	d002      	beq.n	800e972 <__kernel_rem_pio2+0x5ba>
 800e96c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e970:	4619      	mov	r1, r3
 800e972:	9b04      	ldr	r3, [sp, #16]
 800e974:	e9c3 0100 	strd	r0, r1, [r3]
 800e978:	e790      	b.n	800e89c <__kernel_rem_pio2+0x4e4>
 800e97a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e97e:	f7f1 fc85 	bl	800028c <__adddf3>
 800e982:	3d01      	subs	r5, #1
 800e984:	e7ed      	b.n	800e962 <__kernel_rem_pio2+0x5aa>
 800e986:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e98a:	f7f1 fc7f 	bl	800028c <__adddf3>
 800e98e:	3c01      	subs	r4, #1
 800e990:	e7c3      	b.n	800e91a <__kernel_rem_pio2+0x562>
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	e7c8      	b.n	800e92a <__kernel_rem_pio2+0x572>
 800e998:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e99c:	f7f1 fc76 	bl	800028c <__adddf3>
 800e9a0:	3401      	adds	r4, #1
 800e9a2:	e7cd      	b.n	800e940 <__kernel_rem_pio2+0x588>
 800e9a4:	e9da 8900 	ldrd	r8, r9, [sl]
 800e9a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e9ac:	9b00      	ldr	r3, [sp, #0]
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	4632      	mov	r2, r6
 800e9b4:	463b      	mov	r3, r7
 800e9b6:	4640      	mov	r0, r8
 800e9b8:	4649      	mov	r1, r9
 800e9ba:	f7f1 fc67 	bl	800028c <__adddf3>
 800e9be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	4640      	mov	r0, r8
 800e9c8:	4649      	mov	r1, r9
 800e9ca:	f7f1 fc5d 	bl	8000288 <__aeabi_dsub>
 800e9ce:	4632      	mov	r2, r6
 800e9d0:	463b      	mov	r3, r7
 800e9d2:	f7f1 fc5b 	bl	800028c <__adddf3>
 800e9d6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e9da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e9de:	ed8a 7b00 	vstr	d7, [sl]
 800e9e2:	e770      	b.n	800e8c6 <__kernel_rem_pio2+0x50e>
 800e9e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e9e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e9ec:	4640      	mov	r0, r8
 800e9ee:	4632      	mov	r2, r6
 800e9f0:	463b      	mov	r3, r7
 800e9f2:	4649      	mov	r1, r9
 800e9f4:	f7f1 fc4a 	bl	800028c <__adddf3>
 800e9f8:	e9cd 0100 	strd	r0, r1, [sp]
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	460b      	mov	r3, r1
 800ea00:	4640      	mov	r0, r8
 800ea02:	4649      	mov	r1, r9
 800ea04:	f7f1 fc40 	bl	8000288 <__aeabi_dsub>
 800ea08:	4632      	mov	r2, r6
 800ea0a:	463b      	mov	r3, r7
 800ea0c:	f7f1 fc3e 	bl	800028c <__adddf3>
 800ea10:	ed9d 7b00 	vldr	d7, [sp]
 800ea14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea18:	ed84 7b00 	vstr	d7, [r4]
 800ea1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea20:	e757      	b.n	800e8d2 <__kernel_rem_pio2+0x51a>
 800ea22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ea26:	f7f1 fc31 	bl	800028c <__adddf3>
 800ea2a:	3d01      	subs	r5, #1
 800ea2c:	e75c      	b.n	800e8e8 <__kernel_rem_pio2+0x530>
 800ea2e:	9b04      	ldr	r3, [sp, #16]
 800ea30:	9a04      	ldr	r2, [sp, #16]
 800ea32:	601f      	str	r7, [r3, #0]
 800ea34:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ea38:	605c      	str	r4, [r3, #4]
 800ea3a:	609d      	str	r5, [r3, #8]
 800ea3c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ea40:	60d3      	str	r3, [r2, #12]
 800ea42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea46:	6110      	str	r0, [r2, #16]
 800ea48:	6153      	str	r3, [r2, #20]
 800ea4a:	e727      	b.n	800e89c <__kernel_rem_pio2+0x4e4>
 800ea4c:	41700000 	.word	0x41700000
 800ea50:	3e700000 	.word	0x3e700000
 800ea54:	00000000 	.word	0x00000000

0800ea58 <scalbn>:
 800ea58:	b570      	push	{r4, r5, r6, lr}
 800ea5a:	ec55 4b10 	vmov	r4, r5, d0
 800ea5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ea62:	4606      	mov	r6, r0
 800ea64:	462b      	mov	r3, r5
 800ea66:	b999      	cbnz	r1, 800ea90 <scalbn+0x38>
 800ea68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ea6c:	4323      	orrs	r3, r4
 800ea6e:	d03f      	beq.n	800eaf0 <scalbn+0x98>
 800ea70:	4b35      	ldr	r3, [pc, #212]	; (800eb48 <scalbn+0xf0>)
 800ea72:	4629      	mov	r1, r5
 800ea74:	ee10 0a10 	vmov	r0, s0
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f7f1 fdbd 	bl	80005f8 <__aeabi_dmul>
 800ea7e:	4b33      	ldr	r3, [pc, #204]	; (800eb4c <scalbn+0xf4>)
 800ea80:	429e      	cmp	r6, r3
 800ea82:	4604      	mov	r4, r0
 800ea84:	460d      	mov	r5, r1
 800ea86:	da10      	bge.n	800eaaa <scalbn+0x52>
 800ea88:	a327      	add	r3, pc, #156	; (adr r3, 800eb28 <scalbn+0xd0>)
 800ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8e:	e01f      	b.n	800ead0 <scalbn+0x78>
 800ea90:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ea94:	4291      	cmp	r1, r2
 800ea96:	d10c      	bne.n	800eab2 <scalbn+0x5a>
 800ea98:	ee10 2a10 	vmov	r2, s0
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	4629      	mov	r1, r5
 800eaa0:	f7f1 fbf4 	bl	800028c <__adddf3>
 800eaa4:	4604      	mov	r4, r0
 800eaa6:	460d      	mov	r5, r1
 800eaa8:	e022      	b.n	800eaf0 <scalbn+0x98>
 800eaaa:	460b      	mov	r3, r1
 800eaac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800eab0:	3936      	subs	r1, #54	; 0x36
 800eab2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800eab6:	4296      	cmp	r6, r2
 800eab8:	dd0d      	ble.n	800ead6 <scalbn+0x7e>
 800eaba:	2d00      	cmp	r5, #0
 800eabc:	a11c      	add	r1, pc, #112	; (adr r1, 800eb30 <scalbn+0xd8>)
 800eabe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eac2:	da02      	bge.n	800eaca <scalbn+0x72>
 800eac4:	a11c      	add	r1, pc, #112	; (adr r1, 800eb38 <scalbn+0xe0>)
 800eac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eaca:	a319      	add	r3, pc, #100	; (adr r3, 800eb30 <scalbn+0xd8>)
 800eacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead0:	f7f1 fd92 	bl	80005f8 <__aeabi_dmul>
 800ead4:	e7e6      	b.n	800eaa4 <scalbn+0x4c>
 800ead6:	1872      	adds	r2, r6, r1
 800ead8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800eadc:	428a      	cmp	r2, r1
 800eade:	dcec      	bgt.n	800eaba <scalbn+0x62>
 800eae0:	2a00      	cmp	r2, #0
 800eae2:	dd08      	ble.n	800eaf6 <scalbn+0x9e>
 800eae4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eae8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eaec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eaf0:	ec45 4b10 	vmov	d0, r4, r5
 800eaf4:	bd70      	pop	{r4, r5, r6, pc}
 800eaf6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800eafa:	da08      	bge.n	800eb0e <scalbn+0xb6>
 800eafc:	2d00      	cmp	r5, #0
 800eafe:	a10a      	add	r1, pc, #40	; (adr r1, 800eb28 <scalbn+0xd0>)
 800eb00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb04:	dac0      	bge.n	800ea88 <scalbn+0x30>
 800eb06:	a10e      	add	r1, pc, #56	; (adr r1, 800eb40 <scalbn+0xe8>)
 800eb08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb0c:	e7bc      	b.n	800ea88 <scalbn+0x30>
 800eb0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eb12:	3236      	adds	r2, #54	; 0x36
 800eb14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	4b0c      	ldr	r3, [pc, #48]	; (800eb50 <scalbn+0xf8>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	e7d5      	b.n	800ead0 <scalbn+0x78>
 800eb24:	f3af 8000 	nop.w
 800eb28:	c2f8f359 	.word	0xc2f8f359
 800eb2c:	01a56e1f 	.word	0x01a56e1f
 800eb30:	8800759c 	.word	0x8800759c
 800eb34:	7e37e43c 	.word	0x7e37e43c
 800eb38:	8800759c 	.word	0x8800759c
 800eb3c:	fe37e43c 	.word	0xfe37e43c
 800eb40:	c2f8f359 	.word	0xc2f8f359
 800eb44:	81a56e1f 	.word	0x81a56e1f
 800eb48:	43500000 	.word	0x43500000
 800eb4c:	ffff3cb0 	.word	0xffff3cb0
 800eb50:	3c900000 	.word	0x3c900000
 800eb54:	00000000 	.word	0x00000000

0800eb58 <floor>:
 800eb58:	ec51 0b10 	vmov	r0, r1, d0
 800eb5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb64:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800eb68:	2e13      	cmp	r6, #19
 800eb6a:	ee10 5a10 	vmov	r5, s0
 800eb6e:	ee10 8a10 	vmov	r8, s0
 800eb72:	460c      	mov	r4, r1
 800eb74:	dc31      	bgt.n	800ebda <floor+0x82>
 800eb76:	2e00      	cmp	r6, #0
 800eb78:	da14      	bge.n	800eba4 <floor+0x4c>
 800eb7a:	a333      	add	r3, pc, #204	; (adr r3, 800ec48 <floor+0xf0>)
 800eb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb80:	f7f1 fb84 	bl	800028c <__adddf3>
 800eb84:	2200      	movs	r2, #0
 800eb86:	2300      	movs	r3, #0
 800eb88:	f7f1 ffc6 	bl	8000b18 <__aeabi_dcmpgt>
 800eb8c:	b138      	cbz	r0, 800eb9e <floor+0x46>
 800eb8e:	2c00      	cmp	r4, #0
 800eb90:	da53      	bge.n	800ec3a <floor+0xe2>
 800eb92:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800eb96:	4325      	orrs	r5, r4
 800eb98:	d052      	beq.n	800ec40 <floor+0xe8>
 800eb9a:	4c2d      	ldr	r4, [pc, #180]	; (800ec50 <floor+0xf8>)
 800eb9c:	2500      	movs	r5, #0
 800eb9e:	4621      	mov	r1, r4
 800eba0:	4628      	mov	r0, r5
 800eba2:	e024      	b.n	800ebee <floor+0x96>
 800eba4:	4f2b      	ldr	r7, [pc, #172]	; (800ec54 <floor+0xfc>)
 800eba6:	4137      	asrs	r7, r6
 800eba8:	ea01 0307 	and.w	r3, r1, r7
 800ebac:	4303      	orrs	r3, r0
 800ebae:	d01e      	beq.n	800ebee <floor+0x96>
 800ebb0:	a325      	add	r3, pc, #148	; (adr r3, 800ec48 <floor+0xf0>)
 800ebb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb6:	f7f1 fb69 	bl	800028c <__adddf3>
 800ebba:	2200      	movs	r2, #0
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	f7f1 ffab 	bl	8000b18 <__aeabi_dcmpgt>
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	d0eb      	beq.n	800eb9e <floor+0x46>
 800ebc6:	2c00      	cmp	r4, #0
 800ebc8:	bfbe      	ittt	lt
 800ebca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ebce:	4133      	asrlt	r3, r6
 800ebd0:	18e4      	addlt	r4, r4, r3
 800ebd2:	ea24 0407 	bic.w	r4, r4, r7
 800ebd6:	2500      	movs	r5, #0
 800ebd8:	e7e1      	b.n	800eb9e <floor+0x46>
 800ebda:	2e33      	cmp	r6, #51	; 0x33
 800ebdc:	dd0b      	ble.n	800ebf6 <floor+0x9e>
 800ebde:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ebe2:	d104      	bne.n	800ebee <floor+0x96>
 800ebe4:	ee10 2a10 	vmov	r2, s0
 800ebe8:	460b      	mov	r3, r1
 800ebea:	f7f1 fb4f 	bl	800028c <__adddf3>
 800ebee:	ec41 0b10 	vmov	d0, r0, r1
 800ebf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ebfa:	f04f 37ff 	mov.w	r7, #4294967295
 800ebfe:	40df      	lsrs	r7, r3
 800ec00:	4238      	tst	r0, r7
 800ec02:	d0f4      	beq.n	800ebee <floor+0x96>
 800ec04:	a310      	add	r3, pc, #64	; (adr r3, 800ec48 <floor+0xf0>)
 800ec06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0a:	f7f1 fb3f 	bl	800028c <__adddf3>
 800ec0e:	2200      	movs	r2, #0
 800ec10:	2300      	movs	r3, #0
 800ec12:	f7f1 ff81 	bl	8000b18 <__aeabi_dcmpgt>
 800ec16:	2800      	cmp	r0, #0
 800ec18:	d0c1      	beq.n	800eb9e <floor+0x46>
 800ec1a:	2c00      	cmp	r4, #0
 800ec1c:	da0a      	bge.n	800ec34 <floor+0xdc>
 800ec1e:	2e14      	cmp	r6, #20
 800ec20:	d101      	bne.n	800ec26 <floor+0xce>
 800ec22:	3401      	adds	r4, #1
 800ec24:	e006      	b.n	800ec34 <floor+0xdc>
 800ec26:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	40b3      	lsls	r3, r6
 800ec2e:	441d      	add	r5, r3
 800ec30:	45a8      	cmp	r8, r5
 800ec32:	d8f6      	bhi.n	800ec22 <floor+0xca>
 800ec34:	ea25 0507 	bic.w	r5, r5, r7
 800ec38:	e7b1      	b.n	800eb9e <floor+0x46>
 800ec3a:	2500      	movs	r5, #0
 800ec3c:	462c      	mov	r4, r5
 800ec3e:	e7ae      	b.n	800eb9e <floor+0x46>
 800ec40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ec44:	e7ab      	b.n	800eb9e <floor+0x46>
 800ec46:	bf00      	nop
 800ec48:	8800759c 	.word	0x8800759c
 800ec4c:	7e37e43c 	.word	0x7e37e43c
 800ec50:	bff00000 	.word	0xbff00000
 800ec54:	000fffff 	.word	0x000fffff

0800ec58 <_init>:
 800ec58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec5a:	bf00      	nop
 800ec5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec5e:	bc08      	pop	{r3}
 800ec60:	469e      	mov	lr, r3
 800ec62:	4770      	bx	lr

0800ec64 <_fini>:
 800ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec66:	bf00      	nop
 800ec68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6a:	bc08      	pop	{r3}
 800ec6c:	469e      	mov	lr, r3
 800ec6e:	4770      	bx	lr
