
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b02c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f50  0800b1c0  0800b1c0  0001b1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c110  0800c110  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c110  0800c110  0001c110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c118  0800c118  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c118  0800c118  0001c118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c11c  0800c11c  0001c11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000790  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000964  20000964  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   000126cd  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a2d  00000000  00000000  00032914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011a8  00000000  00000000  00035348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dd5  00000000  00000000  000364f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000238fd  00000000  00000000  000372c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001596f  00000000  00000000  0005abc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d297e  00000000  00000000  00070531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000060ac  00000000  00000000  00142eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00148f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1a4 	.word	0x0800b1a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800b1a4 	.word	0x0800b1a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_ICM20948_SelectUserBank>:
#define ICM20948_RESET 0x80
#define ICM20948_DISABLE_SENSORS 0x00
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	b2db      	uxtb	r3, r3
 800100a:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <_ICM20948_SelectUserBank+0x26>
 8001012:	2368      	movs	r3, #104	; 0x68
 8001014:	e000      	b.n	8001018 <_ICM20948_SelectUserBank+0x28>
 8001016:	2369      	movs	r3, #105	; 0x69
 8001018:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800101a:	7dbb      	ldrb	r3, [r7, #22]
 800101c:	b29b      	uxth	r3, r3
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b299      	uxth	r1, r3
 8001022:	230a      	movs	r3, #10
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2301      	movs	r3, #1
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 0315 	add.w	r3, r7, #21
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	227f      	movs	r2, #127	; 0x7f
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f002 faab 	bl	8003590 <HAL_I2C_Mem_Write>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4603      	mov	r3, r0
 8001058:	70fb      	strb	r3, [r7, #3]
 800105a:	460b      	mov	r3, r1
 800105c:	70bb      	strb	r3, [r7, #2]
 800105e:	4613      	mov	r3, r2
 8001060:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <_ICM20948_WriteByte+0x28>
 800106c:	2368      	movs	r3, #104	; 0x68
 800106e:	e000      	b.n	8001072 <_ICM20948_WriteByte+0x2a>
 8001070:	2369      	movs	r3, #105	; 0x69
 8001072:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	b29b      	uxth	r3, r3
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b299      	uxth	r1, r3
 800107c:	78bb      	ldrb	r3, [r7, #2]
 800107e:	b29a      	uxth	r2, r3
 8001080:	230a      	movs	r3, #10
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1c7b      	adds	r3, r7, #1
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f002 fa7e 	bl	8003590 <HAL_I2C_Mem_Write>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b088      	sub	sp, #32
 80010a6:	af04      	add	r7, sp, #16
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	70fb      	strb	r3, [r7, #3]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70bb      	strb	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <_ICM20948_BrustRead+0x28>
 80010c6:	2368      	movs	r3, #104	; 0x68
 80010c8:	e000      	b.n	80010cc <_ICM20948_BrustRead+0x2a>
 80010ca:	2369      	movs	r3, #105	; 0x69
 80010cc:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b299      	uxth	r1, r3
 80010d6:	78bb      	ldrb	r3, [r7, #2]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	230a      	movs	r3, #10
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	883b      	ldrh	r3, [r7, #0]
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f002 fb4b 	bl	8003784 <HAL_I2C_Mem_Read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	b29a      	uxth	r2, r3
 8001114:	230a      	movs	r3, #10
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	1cbb      	adds	r3, r7, #2
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2118      	movs	r1, #24
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f002 fa33 	bl	8003590 <HAL_I2C_Mem_Write>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_AK09916_ReadByte>:

HAL_StatusTypeDef _AK09916_ReadByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t *readData) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af04      	add	r7, sp, #16
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	460b      	mov	r3, r1
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	b29a      	uxth	r2, r3
 800114e:	230a      	movs	r3, #10
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	2118      	movs	r1, #24
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f002 fb10 	bl	8003784 <HAL_I2C_Mem_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001168:	7dfb      	ldrb	r3, [r7, #23]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_AK09916_BrustRead>:

HAL_StatusTypeDef _AK09916_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b08a      	sub	sp, #40	; 0x28
 8001176:	af04      	add	r7, sp, #16
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	72fb      	strb	r3, [r7, #11]
 8001180:	4613      	mov	r3, r2
 8001182:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	b29a      	uxth	r2, r3
 800118c:	230a      	movs	r3, #10
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	893b      	ldrh	r3, [r7, #8]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2118      	movs	r1, #24
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f002 faf1 	bl	8003784 <HAL_I2C_Mem_Read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	70fb      	strb	r3, [r7, #3]
 80011c2:	460b      	mov	r3, r1
 80011c4:	70bb      	strb	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff0b 	bl	8000ff0 <_ICM20948_SelectUserBank>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 80011de:	78f9      	ldrb	r1, [r7, #3]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	2206      	movs	r2, #6
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff2f 	bl	8001048 <_ICM20948_WriteByte>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 80011ee:	20c8      	movs	r0, #200	; 0xc8
 80011f0:	f001 fd9e 	bl	8002d30 <HAL_Delay>

	status = _ICM20948_WriteByte(
 80011f4:	78f9      	ldrb	r1, [r7, #3]
 80011f6:	2301      	movs	r3, #1
 80011f8:	2206      	movs	r2, #6
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff24 	bl	8001048 <_ICM20948_WriteByte>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8001204:	78f9      	ldrb	r1, [r7, #3]
 8001206:	2300      	movs	r3, #0
 8001208:	2207      	movs	r2, #7
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff1c 	bl	8001048 <_ICM20948_WriteByte>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2202      	movs	r2, #2
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fee8 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			4 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800122e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8001230:	b2db      	uxtb	r3, r3
 8001232:	78f9      	ldrb	r1, [r7, #3]
 8001234:	2201      	movs	r2, #1
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff06 	bl	8001048 <_ICM20948_WriteByte>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8001240:	78f9      	ldrb	r1, [r7, #3]
 8001242:	2304      	movs	r3, #4
 8001244:	2200      	movs	r2, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fefe 	bl	8001048 <_ICM20948_WriteByte>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			4 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	b25b      	sxtb	r3, r3
 8001256:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800125a:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800125c:	b2db      	uxtb	r3, r3
 800125e:	78f9      	ldrb	r1, [r7, #3]
 8001260:	2214      	movs	r2, #20
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fef0 	bl	8001048 <_ICM20948_WriteByte>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 800126c:	78f9      	ldrb	r1, [r7, #3]
 800126e:	2304      	movs	r3, #4
 8001270:	2211      	movs	r2, #17
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fee8 	bl	8001048 <_ICM20948_WriteByte>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff feb4 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800128c:	78f9      	ldrb	r1, [r7, #3]
 800128e:	2302      	movs	r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fed8 	bl	8001048 <_ICM20948_WriteByte>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 800129c:	2208      	movs	r2, #8
 800129e:	2131      	movs	r1, #49	; 0x31
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff2b 	bl	80010fc <_AK09916_WriteByte>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <movingAvg>:
// moving average trackers.
int16_t gyroZ_a[5];
int16_t accel_a[3][5];
int16_t mag_a[2][5];

float movingAvg(int16_t src, int16_t dst[5]) {
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	6039      	str	r1, [r7, #0]
 80012bc:	80fb      	strh	r3, [r7, #6]
	int32_t total = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 4; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	e019      	b.n	80012fc <movingAvg+0x4a>
		total += dst[i+1];
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	3301      	adds	r3, #1
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
		dst[i] = dst[i+1];
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3301      	adds	r3, #1
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	441a      	add	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	440b      	add	r3, r1
 80012f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012f4:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	3301      	adds	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	dde2      	ble.n	80012c8 <movingAvg+0x16>
	}

	total += dst[4];
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	3308      	adds	r3, #8
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
	dst[4] = src;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	3308      	adds	r3, #8
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	801a      	strh	r2, [r3, #0]

	return ((float) total) / 5;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001328:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800132c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <ICM20948_readAccelerometer_all>:
			break;
	}

}

void ICM20948_readAccelerometer_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, float readings[3]) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	; 0x30
 8001344:	af02      	add	r7, sp, #8
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	72fb      	strb	r3, [r7, #11]
 800134e:	4613      	mov	r3, r2
 8001350:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 8001352:	7af9      	ldrb	r1, [r7, #11]
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2306      	movs	r3, #6
 800135c:	222d      	movs	r2, #45	; 0x2d
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7ff fe9f 	bl	80010a2 <_ICM20948_BrustRead>


	float rD[3];
	rD[X] = movingAvg(readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE], accel_a[X]);
 8001364:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21a      	sxth	r2, r3
 800136c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21b      	sxth	r3, r3
 8001376:	495a      	ldr	r1, [pc, #360]	; (80014e0 <ICM20948_readAccelerometer_all+0x1a0>)
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff9a 	bl	80012b2 <movingAvg>
 800137e:	eef0 7a40 	vmov.f32	s15, s0
 8001382:	edc7 7a05 	vstr	s15, [r7, #20]
	rD[Y] = movingAvg(readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE], accel_a[Y]);
 8001386:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	4952      	ldr	r1, [pc, #328]	; (80014e4 <ICM20948_readAccelerometer_all+0x1a4>)
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff89 	bl	80012b2 <movingAvg>
 80013a0:	eef0 7a40 	vmov.f32	s15, s0
 80013a4:	edc7 7a06 	vstr	s15, [r7, #24]
	rD[Z] = movingAvg(readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE], accel_a[Z]);
 80013a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	494b      	ldr	r1, [pc, #300]	; (80014e8 <ICM20948_readAccelerometer_all+0x1a8>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff78 	bl	80012b2 <movingAvg>
 80013c2:	eef0 7a40 	vmov.f32	s15, s0
 80013c6:	edc7 7a07 	vstr	s15, [r7, #28]


	switch (selectAccelSensitivity) {
 80013ca:	7abb      	ldrb	r3, [r7, #10]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	f200 8083 	bhi.w	80014d8 <ICM20948_readAccelerometer_all+0x198>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <ICM20948_readAccelerometer_all+0x98>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	08001425 	.word	0x08001425
 80013e0:	08001461 	.word	0x08001461
 80013e4:	0800149d 	.word	0x0800149d
		case ACCEL_FULL_SCALE_2G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 80013e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ec:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80014ec <ICM20948_readAccelerometer_all+0x1ac>
 80013f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 80013fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3304      	adds	r3, #4
 8001402:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80014ec <ICM20948_readAccelerometer_all+0x1ac>
 8001406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140a:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800140e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3308      	adds	r3, #8
 8001416:	eddf 6a35 	vldr	s13, [pc, #212]	; 80014ec <ICM20948_readAccelerometer_all+0x1ac>
 800141a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001422:	e059      	b.n	80014d8 <ICM20948_readAccelerometer_all+0x198>
		case ACCEL_FULL_SCALE_4G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8001424:	ed97 7a05 	vldr	s14, [r7, #20]
 8001428:	eddf 6a31 	vldr	s13, [pc, #196]	; 80014f0 <ICM20948_readAccelerometer_all+0x1b0>
 800142c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8001436:	ed97 7a06 	vldr	s14, [r7, #24]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3304      	adds	r3, #4
 800143e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80014f0 <ICM20948_readAccelerometer_all+0x1b0>
 8001442:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001446:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 800144a:	ed97 7a07 	vldr	s14, [r7, #28]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3308      	adds	r3, #8
 8001452:	eddf 6a27 	vldr	s13, [pc, #156]	; 80014f0 <ICM20948_readAccelerometer_all+0x1b0>
 8001456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800145e:	e03b      	b.n	80014d8 <ICM20948_readAccelerometer_all+0x198>
		case ACCEL_FULL_SCALE_8G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8001460:	ed97 7a05 	vldr	s14, [r7, #20]
 8001464:	eddf 6a23 	vldr	s13, [pc, #140]	; 80014f4 <ICM20948_readAccelerometer_all+0x1b4>
 8001468:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8001472:	ed97 7a06 	vldr	s14, [r7, #24]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80014f4 <ICM20948_readAccelerometer_all+0x1b4>
 800147e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001482:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8001486:	ed97 7a07 	vldr	s14, [r7, #28]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3308      	adds	r3, #8
 800148e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80014f4 <ICM20948_readAccelerometer_all+0x1b4>
 8001492:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001496:	edc3 7a00 	vstr	s15, [r3]
			break;
 800149a:	e01d      	b.n	80014d8 <ICM20948_readAccelerometer_all+0x198>
		case ACCEL_FULL_SCALE_16G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800149c:	ed97 7a05 	vldr	s14, [r7, #20]
 80014a0:	eddf 6a15 	vldr	s13, [pc, #84]	; 80014f8 <ICM20948_readAccelerometer_all+0x1b8>
 80014a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 80014ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3304      	adds	r3, #4
 80014b6:	eddf 6a10 	vldr	s13, [pc, #64]	; 80014f8 <ICM20948_readAccelerometer_all+0x1b8>
 80014ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014be:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 80014c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3308      	adds	r3, #8
 80014ca:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80014f8 <ICM20948_readAccelerometer_all+0x1b8>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014d6:	bf00      	nop
	}
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200001f0 	.word	0x200001f0
 80014e4:	200001fa 	.word	0x200001fa
 80014e8:	20000204 	.word	0x20000204
 80014ec:	46800000 	.word	0x46800000
 80014f0:	46000000 	.word	0x46000000
 80014f4:	45800000 	.word	0x45800000
 80014f8:	45000000 	.word	0x45000000
 80014fc:	00000000 	.word	0x00000000

08001500 <ICM20948_readMagnetometer_XY>:

void ICM20948_readMagnetometer_XY(I2C_HandleTypeDef * hi2c, float magXY[2]) {
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	uint8_t readData[4];
	_AK09916_BrustRead(hi2c, AK09916__XOUT_L__REGISTER, 4, readData);
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2204      	movs	r2, #4
 8001510:	2111      	movs	r1, #17
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fe2d 	bl	8001172 <_AK09916_BrustRead>

	//read status register to mark end of data read.
	uint8_t st2;
	_AK09916_ReadByte(hi2c, AK09916__ST2__REGISTER, &st2);
 8001518:	f107 030f 	add.w	r3, r7, #15
 800151c:	461a      	mov	r2, r3
 800151e:	2118      	movs	r1, #24
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fe09 	bl	8001138 <_AK09916_ReadByte>

	for (int i = 0; i < 2; i++) magXY[i] = movingAvg(readData[1+2*i]<<8|readData[2*i], mag_a[i]) * MAG_SENSITIVITY_SCALE_FACTOR;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e034      	b.n	8001596 <ICM20948_readMagnetometer_XY+0x96>
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	3301      	adds	r3, #1
 8001532:	3318      	adds	r3, #24
 8001534:	443b      	add	r3, r7
 8001536:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	3318      	adds	r3, #24
 8001544:	443b      	add	r3, r7
 8001546:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b218      	sxth	r0, r3
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <ICM20948_readMagnetometer_XY+0xb0>)
 800155c:	4413      	add	r3, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fea7 	bl	80012b2 <movingAvg>
 8001564:	ee10 3a10 	vmov	r3, s0
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ffed 	bl	8000548 <__aeabi_f2d>
 800156e:	a30e      	add	r3, pc, #56	; (adr r3, 80015a8 <ICM20948_readMagnetometer_XY+0xa8>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f840 	bl	80005f8 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	18d4      	adds	r4, r2, r3
 8001588:	f7ff fb2e 	bl	8000be8 <__aeabi_d2f>
 800158c:	4603      	mov	r3, r0
 800158e:	6023      	str	r3, [r4, #0]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b01      	cmp	r3, #1
 800159a:	ddc7      	ble.n	800152c <ICM20948_readMagnetometer_XY+0x2c>
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd90      	pop	{r4, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	33333333 	.word	0x33333333
 80015ac:	3fc33333 	.word	0x3fc33333
 80015b0:	20000210 	.word	0x20000210

080015b4 <write_motors>:
	OLED_ShowString(0, 0, oled_buf);

	write_arr(0, 30, 'A', accel);
}

void write_motors(uint16_t lAngle, uint16_t rAngle, uint16_t lPwmVal, uint16_t rPwmVal, int32_t offset) {
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	4604      	mov	r4, r0
 80015bc:	4608      	mov	r0, r1
 80015be:	4611      	mov	r1, r2
 80015c0:	461a      	mov	r2, r3
 80015c2:	4623      	mov	r3, r4
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	4603      	mov	r3, r0
 80015c8:	80bb      	strh	r3, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]
 80015ce:	4613      	mov	r3, r2
 80015d0:	803b      	strh	r3, [r7, #0]
	snprintf(oled_buf, 25, "%5i", lAngle - rAngle);
 80015d2:	88fa      	ldrh	r2, [r7, #6]
 80015d4:	88bb      	ldrh	r3, [r7, #4]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <write_motors+0x78>)
 80015da:	2119      	movs	r1, #25
 80015dc:	4814      	ldr	r0, [pc, #80]	; (8001630 <write_motors+0x7c>)
 80015de:	f005 fe97 	bl	8007310 <sniprintf>
	OLED_ShowString(0, 0, oled_buf);
 80015e2:	4a13      	ldr	r2, [pc, #76]	; (8001630 <write_motors+0x7c>)
 80015e4:	2100      	movs	r1, #0
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 ff74 	bl	80024d4 <OLED_ShowString>
	snprintf(oled_buf, 25, "%5i|%5i", lPwmVal, rPwmVal);
 80015ec:	887a      	ldrh	r2, [r7, #2]
 80015ee:	883b      	ldrh	r3, [r7, #0]
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4613      	mov	r3, r2
 80015f4:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <write_motors+0x80>)
 80015f6:	2119      	movs	r1, #25
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <write_motors+0x7c>)
 80015fa:	f005 fe89 	bl	8007310 <sniprintf>
	OLED_ShowString(0, 20, oled_buf);
 80015fe:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <write_motors+0x7c>)
 8001600:	2114      	movs	r1, #20
 8001602:	2000      	movs	r0, #0
 8001604:	f000 ff66 	bl	80024d4 <OLED_ShowString>
	snprintf(oled_buf, 25, "%10d", offset);
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <write_motors+0x84>)
 800160c:	2119      	movs	r1, #25
 800160e:	4808      	ldr	r0, [pc, #32]	; (8001630 <write_motors+0x7c>)
 8001610:	f005 fe7e 	bl	8007310 <sniprintf>
	OLED_ShowString(0, 40, oled_buf);
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <write_motors+0x7c>)
 8001616:	2128      	movs	r1, #40	; 0x28
 8001618:	2000      	movs	r0, #0
 800161a:	f000 ff5b 	bl	80024d4 <OLED_ShowString>
	OLED_Refresh_Gram();
 800161e:	f000 fe2f 	bl	8002280 <OLED_Refresh_Gram>
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bd90      	pop	{r4, r7, pc}
 800162a:	bf00      	nop
 800162c:	0800b1e4 	.word	0x0800b1e4
 8001630:	20000224 	.word	0x20000224
 8001634:	0800b1e8 	.word	0x0800b1e8
 8001638:	0800b1f0 	.word	0x0800b1f0

0800163c <display_init>:

void display_init() {
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	OLED_Init();
 8001640:	f000 ff7a 	bl	8002538 <OLED_Init>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Capture callback for motor encoders.
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	triggerPwmCorrection();
 8001650:	f000 fca4 	bl	8001f9c <triggerPwmCorrection>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b08b      	sub	sp, #44	; 0x2c
 8001660:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001662:	f001 faf3 	bl	8002c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001666:	f000 f845 	bl	80016f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166a:	f000 fa4d 	bl	8001b08 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800166e:	f000 fa21 	bl	8001ab4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001672:	f000 f89d 	bl	80017b0 <MX_I2C1_Init>
  MX_TIM8_Init();
 8001676:	f000 f971 	bl	800195c <MX_TIM8_Init>
  MX_TIM2_Init();
 800167a:	f000 f8c7 	bl	800180c <MX_TIM2_Init>
  MX_TIM3_Init();
 800167e:	f000 f919 	bl	80018b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  display_init(); //initialize display.
 8001682:	f7ff ffdb 	bl	800163c <display_init>
  motion_init(&hi2c1); //initialize motion sensors.
 8001686:	4817      	ldr	r0, [pc, #92]	; (80016e4 <main+0x88>)
 8001688:	f000 faba 	bl	8001c00 <motion_init>
  motor_init(&htim8, &htim2, &htim3); //initialize motor PWM and encoders.
 800168c:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <main+0x8c>)
 800168e:	4917      	ldr	r1, [pc, #92]	; (80016ec <main+0x90>)
 8001690:	4817      	ldr	r0, [pc, #92]	; (80016f0 <main+0x94>)
 8001692:	f000 fcdb 	bl	800204c <motor_init>

  //set initial bias.
  init_bias();
 8001696:	f000 fb0b 	bl	8001cb0 <init_bias>

  uint8_t i = 1, ticks = 0;
 800169a:	2301      	movs	r3, #1
 800169c:	77fb      	strb	r3, [r7, #31]
 800169e:	2300      	movs	r3, #0
 80016a0:	77bb      	strb	r3, [r7, #30]

  setDriveDir(i);
 80016a2:	7ffb      	ldrb	r3, [r7, #31]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fcfb 	bl	80020a0 <setDriveDir>
  setDriveSpeed(40);
 80016aa:	2028      	movs	r0, #40	; 0x28
 80016ac:	f000 fd40 	bl	8002130 <setDriveSpeed>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	getMotorVals(&lAngle, &rAngle, &lPwmVal, &rPwmVal, &offset);
 80016b0:	f107 0408 	add.w	r4, r7, #8
 80016b4:	f107 020a 	add.w	r2, r7, #10
 80016b8:	f107 010c 	add.w	r1, r7, #12
 80016bc:	f107 000e 	add.w	r0, r7, #14
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4623      	mov	r3, r4
 80016c6:	f000 fd61 	bl	800218c <getMotorVals>
	write_motors(lAngle, rAngle, lPwmVal, rPwmVal, offset);
 80016ca:	89f8      	ldrh	r0, [r7, #14]
 80016cc:	89b9      	ldrh	r1, [r7, #12]
 80016ce:	897a      	ldrh	r2, [r7, #10]
 80016d0:	893c      	ldrh	r4, [r7, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	4623      	mov	r3, r4
 80016d8:	f7ff ff6c 	bl	80015b4 <write_motors>
	HAL_Delay(10);
 80016dc:	200a      	movs	r0, #10
 80016de:	f001 fb27 	bl	8002d30 <HAL_Delay>
	getMotorVals(&lAngle, &rAngle, &lPwmVal, &rPwmVal, &offset);
 80016e2:	e7e5      	b.n	80016b0 <main+0x54>
 80016e4:	20000240 	.word	0x20000240
 80016e8:	200002dc 	.word	0x200002dc
 80016ec:	20000294 	.word	0x20000294
 80016f0:	20000324 	.word	0x20000324

080016f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b094      	sub	sp, #80	; 0x50
 80016f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	2230      	movs	r2, #48	; 0x30
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f005 fe9b 	bl	800743e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <SystemClock_Config+0xb4>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <SystemClock_Config+0xb4>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6413      	str	r3, [r2, #64]	; 0x40
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <SystemClock_Config+0xb4>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <SystemClock_Config+0xb8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <SystemClock_Config+0xb8>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <SystemClock_Config+0xb8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001754:	2301      	movs	r3, #1
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001758:	2310      	movs	r3, #16
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800175c:	2300      	movs	r3, #0
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fe1b 	bl	80043a0 <HAL_RCC_OscConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001770:	f000 fa40 	bl	8001bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001774:	230f      	movs	r3, #15
 8001776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f003 f87e 	bl	8004890 <HAL_RCC_ClockConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800179a:	f000 fa2b 	bl	8001bf4 <Error_Handler>
  }
}
 800179e:	bf00      	nop
 80017a0:	3750      	adds	r7, #80	; 0x50
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000

080017b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_I2C1_Init+0x50>)
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <MX_I2C1_Init+0x54>)
 80017b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_I2C1_Init+0x50>)
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <MX_I2C1_Init+0x58>)
 80017be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_I2C1_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_I2C1_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_I2C1_Init+0x50>)
 80017ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <MX_I2C1_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_I2C1_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ec:	4804      	ldr	r0, [pc, #16]	; (8001800 <MX_I2C1_Init+0x50>)
 80017ee:	f001 fd8b 	bl	8003308 <HAL_I2C_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017f8:	f000 f9fc 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000240 	.word	0x20000240
 8001804:	40005400 	.word	0x40005400
 8001808:	000186a0 	.word	0x000186a0

0800180c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	2224      	movs	r2, #36	; 0x24
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f005 fe0f 	bl	800743e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <MX_TIM2_Init+0xa4>)
 800182a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <MX_TIM2_Init+0xa4>)
 8001832:	2200      	movs	r2, #0
 8001834:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_TIM2_Init+0xa4>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_TIM2_Init+0xa4>)
 800183e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001842:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_TIM2_Init+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_TIM2_Init+0xa4>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001850:	2303      	movs	r3, #3
 8001852:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001854:	2302      	movs	r3, #2
 8001856:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001858:	2301      	movs	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001860:	230a      	movs	r3, #10
 8001862:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001864:	2302      	movs	r3, #2
 8001866:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001868:	2301      	movs	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001870:	230a      	movs	r3, #10
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4619      	mov	r1, r3
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <MX_TIM2_Init+0xa4>)
 800187c:	f003 fb58 	bl	8004f30 <HAL_TIM_Encoder_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001886:	f000 f9b5 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <MX_TIM2_Init+0xa4>)
 8001898:	f004 fa5c 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80018a2:	f000 f9a7 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	3730      	adds	r7, #48	; 0x30
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000294 	.word	0x20000294

080018b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	2224      	movs	r2, #36	; 0x24
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 fdbb 	bl	800743e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <MX_TIM3_Init+0xa0>)
 80018d2:	4a21      	ldr	r2, [pc, #132]	; (8001958 <MX_TIM3_Init+0xa4>)
 80018d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <MX_TIM3_Init+0xa0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <MX_TIM3_Init+0xa0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018e2:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <MX_TIM3_Init+0xa0>)
 80018e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_TIM3_Init+0xa0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_TIM3_Init+0xa0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018f6:	2303      	movs	r3, #3
 80018f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80018fa:	2302      	movs	r3, #2
 80018fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018fe:	2301      	movs	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001906:	230a      	movs	r3, #10
 8001908:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800190a:	2302      	movs	r3, #2
 800190c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800190e:	2301      	movs	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001916:	230a      	movs	r3, #10
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <MX_TIM3_Init+0xa0>)
 8001922:	f003 fb05 	bl	8004f30 <HAL_TIM_Encoder_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800192c:	f000 f962 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_TIM3_Init+0xa0>)
 800193e:	f004 fa09 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001948:	f000 f954 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3730      	adds	r7, #48	; 0x30
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200002dc 	.word	0x200002dc
 8001958:	40000400 	.word	0x40000400

0800195c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b096      	sub	sp, #88	; 0x58
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2220      	movs	r2, #32
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f005 fd52 	bl	800743e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800199a:	4b44      	ldr	r3, [pc, #272]	; (8001aac <MX_TIM8_Init+0x150>)
 800199c:	4a44      	ldr	r2, [pc, #272]	; (8001ab0 <MX_TIM8_Init+0x154>)
 800199e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019a0:	4b42      	ldr	r3, [pc, #264]	; (8001aac <MX_TIM8_Init+0x150>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <MX_TIM8_Init+0x150>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80019ac:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <MX_TIM8_Init+0x150>)
 80019ae:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80019b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b4:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <MX_TIM8_Init+0x150>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019ba:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <MX_TIM8_Init+0x150>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c0:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <MX_TIM8_Init+0x150>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019c6:	4839      	ldr	r0, [pc, #228]	; (8001aac <MX_TIM8_Init+0x150>)
 80019c8:	f003 f942 	bl	8004c50 <HAL_TIM_Base_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80019d2:	f000 f90f 	bl	8001bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019e0:	4619      	mov	r1, r3
 80019e2:	4832      	ldr	r0, [pc, #200]	; (8001aac <MX_TIM8_Init+0x150>)
 80019e4:	f003 fdaa 	bl	800553c <HAL_TIM_ConfigClockSource>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80019ee:	f000 f901 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80019f2:	482e      	ldr	r0, [pc, #184]	; (8001aac <MX_TIM8_Init+0x150>)
 80019f4:	f003 f97b 	bl	8004cee <HAL_TIM_PWM_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80019fe:	f000 f8f9 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4826      	ldr	r0, [pc, #152]	; (8001aac <MX_TIM8_Init+0x150>)
 8001a12:	f004 f99f 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a1c:	f000 f8ea 	bl	8001bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a20:	2360      	movs	r3, #96	; 0x60
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a40:	2200      	movs	r2, #0
 8001a42:	4619      	mov	r1, r3
 8001a44:	4819      	ldr	r0, [pc, #100]	; (8001aac <MX_TIM8_Init+0x150>)
 8001a46:	f003 fcb7 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001a50:	f000 f8d0 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a58:	2204      	movs	r2, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4813      	ldr	r0, [pc, #76]	; (8001aac <MX_TIM8_Init+0x150>)
 8001a5e:	f003 fcab 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001a68:	f000 f8c4 	bl	8001bf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <MX_TIM8_Init+0x150>)
 8001a90:	f004 f9dc 	bl	8005e4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001a9a:	f000 f8ab 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <MX_TIM8_Init+0x150>)
 8001aa0:	f000 ff12 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 8001aa4:	bf00      	nop
 8001aa6:	3758      	adds	r7, #88	; 0x58
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000324 	.word	0x20000324
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART3_UART_Init+0x4c>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <MX_USART3_UART_Init+0x50>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_USART3_UART_Init+0x4c>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART3_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART3_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART3_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART3_UART_Init+0x4c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART3_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART3_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART3_UART_Init+0x4c>)
 8001aec:	f004 fa14 	bl	8005f18 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001af6:	f000 f87d 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000036c 	.word	0x2000036c
 8001b04:	40004800 	.word	0x40004800

08001b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b28:	f043 0310 	orr.w	r3, r3, #16
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a22      	ldr	r2, [pc, #136]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <MX_GPIO_Init+0xe0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001b94:	4815      	ldr	r0, [pc, #84]	; (8001bec <MX_GPIO_Init+0xe4>)
 8001b96:	f001 fb9d 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	213c      	movs	r1, #60	; 0x3c
 8001b9e:	4814      	ldr	r0, [pc, #80]	; (8001bf0 <MX_GPIO_Init+0xe8>)
 8001ba0:	f001 fb98 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET__Pin OLED_DATA_COMMAND__Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin;
 8001ba4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <MX_GPIO_Init+0xe4>)
 8001bbe:	f001 f9ed 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTORA_IN2_Pin MOTORA_IN1_Pin MOTORB_IN1_Pin MOTORB_IN2_Pin */
  GPIO_InitStruct.Pin = MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin;
 8001bc2:	233c      	movs	r3, #60	; 0x3c
 8001bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_GPIO_Init+0xe8>)
 8001bda:	f001 f9df 	bl	8002f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	; 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40020000 	.word	0x40020000

08001bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf8:	b672      	cpsid	i
}
 8001bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <Error_Handler+0x8>
	...

08001c00 <motion_init>:

//bias.
float accel_bias[3];
volatile float heading_bias;

void motion_init(I2C_HandleTypeDef *i2c_ptr) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	hi2c1_ptr = i2c_ptr;
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <motion_init+0x24>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
	ICM20948_init(hi2c1_ptr, I2C_ADDR, GYRO_SENS, ACCEL_SENS);
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <motion_init+0x24>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2203      	movs	r2, #3
 8001c14:	2300      	movs	r3, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	f7ff faca 	bl	80011b0 <ICM20948_init>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200003b4 	.word	0x200003b4

08001c28 <read_mag>:
void read_accel(float accel[3]) {
	ICM20948_readAccelerometer_all(hi2c1_ptr, I2C_ADDR, ACCEL_SENS, accel);
	for (int i = 0; i < 3; i++) accel[i] -= accel_bias[i];
}

float read_mag() {
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
	//Calculate angle from X and Y
	float xy[2];
	ICM20948_readMagnetometer_XY(hi2c1_ptr, xy);
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <read_mag+0x80>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	463a      	mov	r2, r7
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fc62 	bl	8001500 <ICM20948_readMagnetometer_XY>
	return atan2(xy[1], xy[0]) * 180 / M_PI;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc82 	bl	8000548 <__aeabi_f2d>
 8001c44:	4604      	mov	r4, r0
 8001c46:	460d      	mov	r5, r1
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fc7c 	bl	8000548 <__aeabi_f2d>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	ec43 2b11 	vmov	d1, r2, r3
 8001c58:	ec45 4b10 	vmov	d0, r4, r5
 8001c5c:	f009 f82c 	bl	800acb8 <atan2>
 8001c60:	ec51 0b10 	vmov	r0, r1, d0
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <read_mag+0x84>)
 8001c6a:	f7fe fcc5 	bl	80005f8 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	a30a      	add	r3, pc, #40	; (adr r3, 8001ca0 <read_mag+0x78>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe fde6 	bl	800084c <__aeabi_ddiv>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7fe ffae 	bl	8000be8 <__aeabi_d2f>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	ee07 3a90 	vmov	s15, r3
}
 8001c92:	eeb0 0a67 	vmov.f32	s0, s15
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	54442d18 	.word	0x54442d18
 8001ca4:	400921fb 	.word	0x400921fb
 8001ca8:	200003b4 	.word	0x200003b4
 8001cac:	40668000 	.word	0x40668000

08001cb0 <init_bias>:
void read_heading(float *heading) {
	*heading = read_mag() - heading_bias;
	if (*heading < 0) *heading += 360;
}

void init_bias() {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 500; i++) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	e010      	b.n	8001cde <init_bias+0x2e>
		ICM20948_readAccelerometer_all(hi2c1_ptr, I2C_ADDR, ACCEL_SENS, accel_bias); //accelerometer bias
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <init_bias+0x40>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <init_bias+0x44>)
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	f7ff fb3b 	bl	8001340 <ICM20948_readAccelerometer_all>
		heading_bias = read_mag(); //heading bias
 8001cca:	f7ff ffad 	bl	8001c28 <read_mag>
 8001cce:	eef0 7a40 	vmov.f32	s15, s0
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <init_bias+0x48>)
 8001cd4:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 500; i++) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ce4:	dbea      	blt.n	8001cbc <init_bias+0xc>
	}
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200003b4 	.word	0x200003b4
 8001cf4:	200003b8 	.word	0x200003b8
 8001cf8:	200003c4 	.word	0x200003c4

08001cfc <timer_reset>:
int32_t millisOld, millisNow, dt; // to calculate I and D for PID control
const float Kp = 1;
const float Kd = 0;
const float Ki = 0;

void timer_reset(TIM_HandleTypeDef *htim) {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <setPwmLR>:

void setPwmLR() {
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	//set L, R channels.
	__HAL_TIM_SetCompare(pwm_tim, L_CHANNEL, lPwmVal > PWM_MAX ? PWM_MAX
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <setPwmLR+0x60>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	f241 7270 	movw	r2, #6000	; 0x1770
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d807      	bhi.n	8001d38 <setPwmLR+0x20>
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <setPwmLR+0x60>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	2be1      	cmp	r3, #225	; 0xe1
 8001d2e:	bf38      	it	cc
 8001d30:	23e1      	movcc	r3, #225	; 0xe1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	e001      	b.n	8001d3c <setPwmLR+0x24>
 8001d38:	f241 7270 	movw	r2, #6000	; 0x1770
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <setPwmLR+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	635a      	str	r2, [r3, #52]	; 0x34
		: lPwmVal < PWM_MIN ? PWM_MIN
		: lPwmVal);
	__HAL_TIM_SetCompare(pwm_tim, R_CHANNEL, rPwmVal > PWM_MAX ? PWM_MAX
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <setPwmLR+0x68>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	f241 7270 	movw	r2, #6000	; 0x1770
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d807      	bhi.n	8001d60 <setPwmLR+0x48>
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <setPwmLR+0x68>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	2be1      	cmp	r3, #225	; 0xe1
 8001d56:	bf38      	it	cc
 8001d58:	23e1      	movcc	r3, #225	; 0xe1
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	e001      	b.n	8001d64 <setPwmLR+0x4c>
 8001d60:	f241 7270 	movw	r2, #6000	; 0x1770
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <setPwmLR+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	639a      	str	r2, [r3, #56]	; 0x38
			: rPwmVal < PWM_MIN ? PWM_MIN
			: rPwmVal);
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	200003e6 	.word	0x200003e6
 8001d7c:	200003c8 	.word	0x200003c8
 8001d80:	200003e8 	.word	0x200003e8

08001d84 <resetPwmParams>:

void resetPwmParams() {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	millisOld = HAL_GetTick();
 8001d88:	f000 ffc6 	bl	8002d18 <HAL_GetTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <resetPwmParams+0x24>)
 8001d92:	601a      	str	r2, [r3, #0]
	error_old = 0;
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <resetPwmParams+0x28>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
	offset = 0;
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <resetPwmParams+0x2c>)
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000404 	.word	0x20000404
 8001dac:	200003f8 	.word	0x200003f8
 8001db0:	200003ec 	.word	0x200003ec

08001db4 <pwmCorrection>:

void pwmCorrection() {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	//time storage.
	millisNow = HAL_GetTick();
 8001db8:	f000 ffae 	bl	8002d18 <HAL_GetTick>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b64      	ldr	r3, [pc, #400]	; (8001f54 <pwmCorrection+0x1a0>)
 8001dc2:	601a      	str	r2, [r3, #0]
	dt = millisNow - millisOld;
 8001dc4:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <pwmCorrection+0x1a0>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <pwmCorrection+0x1a4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	4a63      	ldr	r2, [pc, #396]	; (8001f5c <pwmCorrection+0x1a8>)
 8001dd0:	6013      	str	r3, [r2, #0]
	millisOld = millisNow;
 8001dd2:	4b60      	ldr	r3, [pc, #384]	; (8001f54 <pwmCorrection+0x1a0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a60      	ldr	r2, [pc, #384]	; (8001f58 <pwmCorrection+0x1a4>)
 8001dd8:	6013      	str	r3, [r2, #0]

	//error calculation.
	error = (lAngle - rAngle) / 260;
 8001dda:	4b61      	ldr	r3, [pc, #388]	; (8001f60 <pwmCorrection+0x1ac>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b60      	ldr	r3, [pc, #384]	; (8001f64 <pwmCorrection+0x1b0>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	4a60      	ldr	r2, [pc, #384]	; (8001f68 <pwmCorrection+0x1b4>)
 8001de8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dec:	11d2      	asrs	r2, r2, #7
 8001dee:	17db      	asrs	r3, r3, #31
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfa:	4b5c      	ldr	r3, [pc, #368]	; (8001f6c <pwmCorrection+0x1b8>)
 8001dfc:	edc3 7a00 	vstr	s15, [r3]
	error_area = error_area + dt * error;
 8001e00:	4b5b      	ldr	r3, [pc, #364]	; (8001f70 <pwmCorrection+0x1bc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0c:	4b53      	ldr	r3, [pc, #332]	; (8001f5c <pwmCorrection+0x1a8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e18:	4b54      	ldr	r3, [pc, #336]	; (8001f6c <pwmCorrection+0x1b8>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2a:	ee17 2a90 	vmov	r2, s15
 8001e2e:	4b50      	ldr	r3, [pc, #320]	; (8001f70 <pwmCorrection+0x1bc>)
 8001e30:	601a      	str	r2, [r3, #0]
	error_change = error - error_old; // change in error
 8001e32:	4b4e      	ldr	r3, [pc, #312]	; (8001f6c <pwmCorrection+0x1b8>)
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	4b4e      	ldr	r3, [pc, #312]	; (8001f74 <pwmCorrection+0x1c0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4c:	ee17 2a90 	vmov	r2, s15
 8001e50:	4b49      	ldr	r3, [pc, #292]	; (8001f78 <pwmCorrection+0x1c4>)
 8001e52:	601a      	str	r2, [r3, #0]
	error_old = error; //store the error for next round
 8001e54:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <pwmCorrection+0x1b8>)
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5e:	ee17 2a90 	vmov	r2, s15
 8001e62:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <pwmCorrection+0x1c0>)
 8001e64:	601a      	str	r2, [r3, #0]
	error_rate = error_change/dt; // for Kd
 8001e66:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <pwmCorrection+0x1c4>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <pwmCorrection+0x1a8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7a:	4b40      	ldr	r3, [pc, #256]	; (8001f7c <pwmCorrection+0x1c8>)
 8001e7c:	edc3 7a00 	vstr	s15, [r3]

	offset += (error*Kp + error_area*Ki + error_rate*Kd); //final offset.
 8001e80:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <pwmCorrection+0x1b8>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e8e:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <pwmCorrection+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001f80 <pwmCorrection+0x1cc>
 8001e9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea6:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <pwmCorrection+0x1c8>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001f80 <pwmCorrection+0x1cc>
 8001eb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb8:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <pwmCorrection+0x1d0>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <pwmCorrection+0x1d0>)
 8001ec4:	edc3 7a00 	vstr	s15, [r3]

	lPwmVal = pwmValTarget - offset/2;
 8001ec8:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <pwmCorrection+0x1d4>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <pwmCorrection+0x1d0>)
 8001ed6:	edd3 6a00 	vldr	s13, [r3]
 8001eda:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ede:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eea:	ee17 3a90 	vmov	r3, s15
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <pwmCorrection+0x1d8>)
 8001ef2:	801a      	strh	r2, [r3, #0]
	rPwmVal = pwmValTarget + offset/2;
 8001ef4:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <pwmCorrection+0x1d4>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f00:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <pwmCorrection+0x1d0>)
 8001f02:	edd3 6a00 	vldr	s13, [r3]
 8001f06:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f0a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f16:	ee17 3a90 	vmov	r3, s15
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <pwmCorrection+0x1dc>)
 8001f1e:	801a      	strh	r2, [r3, #0]

	if (lAngle > ANGLE_REFRESH && rAngle > ANGLE_REFRESH) {
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <pwmCorrection+0x1ac>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d90f      	bls.n	8001f4c <pwmCorrection+0x198>
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <pwmCorrection+0x1b0>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d909      	bls.n	8001f4c <pwmCorrection+0x198>
		timer_reset(l_enc_tim);
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <pwmCorrection+0x1e0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fedd 	bl	8001cfc <timer_reset>
		timer_reset(r_enc_tim);
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <pwmCorrection+0x1e4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fed8 	bl	8001cfc <timer_reset>
	}

	setPwmLR();
 8001f4c:	f7ff fee4 	bl	8001d18 <setPwmLR>
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000408 	.word	0x20000408
 8001f58:	20000404 	.word	0x20000404
 8001f5c:	2000040c 	.word	0x2000040c
 8001f60:	200003e0 	.word	0x200003e0
 8001f64:	200003e2 	.word	0x200003e2
 8001f68:	7e07e07f 	.word	0x7e07e07f
 8001f6c:	200003f0 	.word	0x200003f0
 8001f70:	200003f4 	.word	0x200003f4
 8001f74:	200003f8 	.word	0x200003f8
 8001f78:	200003fc 	.word	0x200003fc
 8001f7c:	20000400 	.word	0x20000400
 8001f80:	00000000 	.word	0x00000000
 8001f84:	200003ec 	.word	0x200003ec
 8001f88:	200003e4 	.word	0x200003e4
 8001f8c:	200003e6 	.word	0x200003e6
 8001f90:	200003e8 	.word	0x200003e8
 8001f94:	200003cc 	.word	0x200003cc
 8001f98:	200003d0 	.word	0x200003d0

08001f9c <triggerPwmCorrection>:

//to pass into HAL_TIM_IC_CaptureCallback for PWM at fixed intervals.
void triggerPwmCorrection() {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	lCounter = __HAL_TIM_GET_COUNTER(l_enc_tim);
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <triggerPwmCorrection+0x90>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	4a21      	ldr	r2, [pc, #132]	; (8002030 <triggerPwmCorrection+0x94>)
 8001faa:	6013      	str	r3, [r2, #0]
	lCount = (int16_t) lCounter;
 8001fac:	4b20      	ldr	r3, [pc, #128]	; (8002030 <triggerPwmCorrection+0x94>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b21a      	sxth	r2, r3
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <triggerPwmCorrection+0x98>)
 8001fb4:	801a      	strh	r2, [r3, #0]
	lAngle = lCount < 0 ? -(lCount >> 1) : lCount >> 1;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <triggerPwmCorrection+0x98>)
 8001fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	da08      	bge.n	8001fd2 <triggerPwmCorrection+0x36>
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <triggerPwmCorrection+0x98>)
 8001fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc6:	105b      	asrs	r3, r3, #1
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	425b      	negs	r3, r3
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	e005      	b.n	8001fde <triggerPwmCorrection+0x42>
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <triggerPwmCorrection+0x98>)
 8001fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd8:	105b      	asrs	r3, r3, #1
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4a16      	ldr	r2, [pc, #88]	; (8002038 <triggerPwmCorrection+0x9c>)
 8001fe0:	8013      	strh	r3, [r2, #0]

	rCounter = __HAL_TIM_GET_COUNTER(r_enc_tim);
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <triggerPwmCorrection+0xa0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	4a15      	ldr	r2, [pc, #84]	; (8002040 <triggerPwmCorrection+0xa4>)
 8001fec:	6013      	str	r3, [r2, #0]
	rCount = (int16_t) rCounter;
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <triggerPwmCorrection+0xa4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <triggerPwmCorrection+0xa8>)
 8001ff6:	801a      	strh	r2, [r3, #0]
	rAngle = rCount < 0 ? -(rCount >> 1) : rCount >> 1;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <triggerPwmCorrection+0xa8>)
 8001ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da08      	bge.n	8002014 <triggerPwmCorrection+0x78>
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <triggerPwmCorrection+0xa8>)
 8002004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002008:	105b      	asrs	r3, r3, #1
 800200a:	b21b      	sxth	r3, r3
 800200c:	b29b      	uxth	r3, r3
 800200e:	425b      	negs	r3, r3
 8002010:	b29b      	uxth	r3, r3
 8002012:	e005      	b.n	8002020 <triggerPwmCorrection+0x84>
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <triggerPwmCorrection+0xa8>)
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	105b      	asrs	r3, r3, #1
 800201c:	b21b      	sxth	r3, r3
 800201e:	b29b      	uxth	r3, r3
 8002020:	4a09      	ldr	r2, [pc, #36]	; (8002048 <triggerPwmCorrection+0xac>)
 8002022:	8013      	strh	r3, [r2, #0]

	pwmCorrection();
 8002024:	f7ff fec6 	bl	8001db4 <pwmCorrection>
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200003cc 	.word	0x200003cc
 8002030:	200003d4 	.word	0x200003d4
 8002034:	200003dc 	.word	0x200003dc
 8002038:	200003e0 	.word	0x200003e0
 800203c:	200003d0 	.word	0x200003d0
 8002040:	200003d8 	.word	0x200003d8
 8002044:	200003de 	.word	0x200003de
 8002048:	200003e2 	.word	0x200003e2

0800204c <motor_init>:

void motor_init(TIM_HandleTypeDef *pwm, TIM_HandleTypeDef *l_enc, TIM_HandleTypeDef *r_enc) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	//assign timer pointers.
	pwm_tim = pwm;
 8002058:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <motor_init+0x48>)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6013      	str	r3, [r2, #0]
	l_enc_tim = l_enc;
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <motor_init+0x4c>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	6013      	str	r3, [r2, #0]
	r_enc_tim = r_enc;
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <motor_init+0x50>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]

	//start Encoders and PWM for L, R motors.
	HAL_TIM_Encoder_Start_IT(l_enc, TIM_CHANNEL_ALL);
 800206a:	213c      	movs	r1, #60	; 0x3c
 800206c:	68b8      	ldr	r0, [r7, #8]
 800206e:	f003 f805 	bl	800507c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(r_enc, TIM_CHANNEL_ALL);
 8002072:	213c      	movs	r1, #60	; 0x3c
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f003 f801 	bl	800507c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(pwm, L_CHANNEL);
 800207a:	2100      	movs	r1, #0
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f002 fe8f 	bl	8004da0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm, R_CHANNEL);
 8002082:	2104      	movs	r1, #4
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f002 fe8b 	bl	8004da0 <HAL_TIM_PWM_Start>
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200003c8 	.word	0x200003c8
 8002098:	200003cc 	.word	0x200003cc
 800209c:	200003d0 	.word	0x200003d0

080020a0 <setDriveDir>:

void setDriveDir(uint8_t isForward) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
	//reset counters.
	timer_reset(l_enc_tim);
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <setDriveDir+0x84>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fe24 	bl	8001cfc <timer_reset>
	timer_reset(r_enc_tim);
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <setDriveDir+0x88>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fe1f 	bl	8001cfc <timer_reset>

	resetPwmParams();
 80020be:	f7ff fe61 	bl	8001d84 <resetPwmParams>

	if (isForward) {
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d014      	beq.n	80020f2 <setDriveDir+0x52>
		SET_LIN1();
 80020c8:	2201      	movs	r2, #1
 80020ca:	2108      	movs	r1, #8
 80020cc:	4817      	ldr	r0, [pc, #92]	; (800212c <setDriveDir+0x8c>)
 80020ce:	f001 f901 	bl	80032d4 <HAL_GPIO_WritePin>
		RESET_LIN2();
 80020d2:	2200      	movs	r2, #0
 80020d4:	2104      	movs	r1, #4
 80020d6:	4815      	ldr	r0, [pc, #84]	; (800212c <setDriveDir+0x8c>)
 80020d8:	f001 f8fc 	bl	80032d4 <HAL_GPIO_WritePin>
		SET_RIN1();
 80020dc:	2201      	movs	r2, #1
 80020de:	2110      	movs	r1, #16
 80020e0:	4812      	ldr	r0, [pc, #72]	; (800212c <setDriveDir+0x8c>)
 80020e2:	f001 f8f7 	bl	80032d4 <HAL_GPIO_WritePin>
		RESET_RIN2();
 80020e6:	2200      	movs	r2, #0
 80020e8:	2120      	movs	r1, #32
 80020ea:	4810      	ldr	r0, [pc, #64]	; (800212c <setDriveDir+0x8c>)
 80020ec:	f001 f8f2 	bl	80032d4 <HAL_GPIO_WritePin>
		RESET_LIN1();
		SET_LIN2();
		RESET_RIN1();
		SET_RIN2();
	}
}
 80020f0:	e013      	b.n	800211a <setDriveDir+0x7a>
		RESET_LIN1();
 80020f2:	2200      	movs	r2, #0
 80020f4:	2108      	movs	r1, #8
 80020f6:	480d      	ldr	r0, [pc, #52]	; (800212c <setDriveDir+0x8c>)
 80020f8:	f001 f8ec 	bl	80032d4 <HAL_GPIO_WritePin>
		SET_LIN2();
 80020fc:	2201      	movs	r2, #1
 80020fe:	2104      	movs	r1, #4
 8002100:	480a      	ldr	r0, [pc, #40]	; (800212c <setDriveDir+0x8c>)
 8002102:	f001 f8e7 	bl	80032d4 <HAL_GPIO_WritePin>
		RESET_RIN1();
 8002106:	2200      	movs	r2, #0
 8002108:	2110      	movs	r1, #16
 800210a:	4808      	ldr	r0, [pc, #32]	; (800212c <setDriveDir+0x8c>)
 800210c:	f001 f8e2 	bl	80032d4 <HAL_GPIO_WritePin>
		SET_RIN2();
 8002110:	2201      	movs	r2, #1
 8002112:	2120      	movs	r1, #32
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <setDriveDir+0x8c>)
 8002116:	f001 f8dd 	bl	80032d4 <HAL_GPIO_WritePin>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200003cc 	.word	0x200003cc
 8002128:	200003d0 	.word	0x200003d0
 800212c:	40020000 	.word	0x40020000

08002130 <setDriveSpeed>:

//speed: 0 - 100
void setDriveSpeed(uint8_t speed) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
	//derive PWM value.
	pwmValTarget = PWM_MAX / 100 * speed;
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	b29b      	uxth	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <setDriveSpeed+0x50>)
 800214a:	801a      	strh	r2, [r3, #0]
	if (pwmValTarget > 0) pwmValTarget--;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <setDriveSpeed+0x50>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <setDriveSpeed+0x30>
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <setDriveSpeed+0x50>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <setDriveSpeed+0x50>)
 800215e:	801a      	strh	r2, [r3, #0]

	lPwmVal = rPwmVal = pwmValTarget;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <setDriveSpeed+0x50>)
 8002162:	881a      	ldrh	r2, [r3, #0]
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <setDriveSpeed+0x54>)
 8002166:	801a      	strh	r2, [r3, #0]
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <setDriveSpeed+0x54>)
 800216a:	881a      	ldrh	r2, [r3, #0]
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <setDriveSpeed+0x58>)
 800216e:	801a      	strh	r2, [r3, #0]
	resetPwmParams();
 8002170:	f7ff fe08 	bl	8001d84 <resetPwmParams>
	setPwmLR();
 8002174:	f7ff fdd0 	bl	8001d18 <setPwmLR>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200003e4 	.word	0x200003e4
 8002184:	200003e8 	.word	0x200003e8
 8002188:	200003e6 	.word	0x200003e6

0800218c <getMotorVals>:

void getMotorVals(uint16_t *lAnglePtr, uint16_t *rAnglePtr, uint16_t *lPwmValPtr, uint16_t *rPwmValPtr, int32_t *offsetPtr) {
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
	*lAnglePtr = lAngle;
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <getMotorVals+0x4c>)
 800219c:	881a      	ldrh	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	801a      	strh	r2, [r3, #0]
	*rAnglePtr = rAngle;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <getMotorVals+0x50>)
 80021a4:	881a      	ldrh	r2, [r3, #0]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	801a      	strh	r2, [r3, #0]
	*lPwmValPtr = lPwmVal;
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <getMotorVals+0x54>)
 80021ac:	881a      	ldrh	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	801a      	strh	r2, [r3, #0]
	*rPwmValPtr = rPwmVal;
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <getMotorVals+0x58>)
 80021b4:	881a      	ldrh	r2, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	801a      	strh	r2, [r3, #0]
	*offsetPtr = offset;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <getMotorVals+0x5c>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c4:	ee17 2a90 	vmov	r2, s15
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	601a      	str	r2, [r3, #0]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	200003e0 	.word	0x200003e0
 80021dc:	200003e2 	.word	0x200003e2
 80021e0:	200003e6 	.word	0x200003e6
 80021e4:	200003e8 	.word	0x200003e8
 80021e8:	200003ec 	.word	0x200003ec

080021ec <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	460a      	mov	r2, r1
 80021f6:	71fb      	strb	r3, [r7, #7]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 80021fc:	79bb      	ldrb	r3, [r7, #6]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d106      	bne.n	8002210 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 8002202:	2201      	movs	r2, #1
 8002204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002208:	481c      	ldr	r0, [pc, #112]	; (800227c <OLED_WR_Byte+0x90>)
 800220a:	f001 f863 	bl	80032d4 <HAL_GPIO_WritePin>
 800220e:	e005      	b.n	800221c <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 8002210:	2200      	movs	r2, #0
 8002212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002216:	4819      	ldr	r0, [pc, #100]	; (800227c <OLED_WR_Byte+0x90>)
 8002218:	f001 f85c 	bl	80032d4 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e01f      	b.n	8002262 <OLED_WR_Byte+0x76>
	{ // Complete the code below
		OLED_SCLK_Clr();
 8002222:	2200      	movs	r2, #0
 8002224:	2120      	movs	r1, #32
 8002226:	4815      	ldr	r0, [pc, #84]	; (800227c <OLED_WR_Byte+0x90>)
 8002228:	f001 f854 	bl	80032d4 <HAL_GPIO_WritePin>
		if (dat & (0x80 >> i)) OLED_SDIN_Set();
 800222c:	79fa      	ldrb	r2, [r7, #7]
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	fa41 f303 	asr.w	r3, r1, r3
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <OLED_WR_Byte+0x5c>
 800223c:	2201      	movs	r2, #1
 800223e:	2140      	movs	r1, #64	; 0x40
 8002240:	480e      	ldr	r0, [pc, #56]	; (800227c <OLED_WR_Byte+0x90>)
 8002242:	f001 f847 	bl	80032d4 <HAL_GPIO_WritePin>
 8002246:	e004      	b.n	8002252 <OLED_WR_Byte+0x66>
		else OLED_SDIN_Clr();
 8002248:	2200      	movs	r2, #0
 800224a:	2140      	movs	r1, #64	; 0x40
 800224c:	480b      	ldr	r0, [pc, #44]	; (800227c <OLED_WR_Byte+0x90>)
 800224e:	f001 f841 	bl	80032d4 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8002252:	2201      	movs	r2, #1
 8002254:	2120      	movs	r1, #32
 8002256:	4809      	ldr	r0, [pc, #36]	; (800227c <OLED_WR_Byte+0x90>)
 8002258:	f001 f83c 	bl	80032d4 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	3301      	adds	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b07      	cmp	r3, #7
 8002266:	d9dc      	bls.n	8002222 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 8002268:	2201      	movs	r2, #1
 800226a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800226e:	4803      	ldr	r0, [pc, #12]	; (800227c <OLED_WR_Byte+0x90>)
 8002270:	f001 f830 	bl	80032d4 <HAL_GPIO_WritePin>
} 
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000

08002280 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8002286:	2300      	movs	r3, #0
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	e026      	b.n	80022da <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	3b50      	subs	r3, #80	; 0x50
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ffa9 	bl	80021ec <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 800229a:	2100      	movs	r1, #0
 800229c:	2000      	movs	r0, #0
 800229e:	f7ff ffa5 	bl	80021ec <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 80022a2:	2100      	movs	r1, #0
 80022a4:	2010      	movs	r0, #16
 80022a6:	f7ff ffa1 	bl	80021ec <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 80022aa:	2300      	movs	r3, #0
 80022ac:	71bb      	strb	r3, [r7, #6]
 80022ae:	e00d      	b.n	80022cc <OLED_Refresh_Gram+0x4c>
 80022b0:	79ba      	ldrb	r2, [r7, #6]
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	490d      	ldr	r1, [pc, #52]	; (80022ec <OLED_Refresh_Gram+0x6c>)
 80022b6:	00d2      	lsls	r2, r2, #3
 80022b8:	440a      	add	r2, r1
 80022ba:	4413      	add	r3, r2
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff93 	bl	80021ec <OLED_WR_Byte>
 80022c6:	79bb      	ldrb	r3, [r7, #6]
 80022c8:	3301      	adds	r3, #1
 80022ca:	71bb      	strb	r3, [r7, #6]
 80022cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	daed      	bge.n	80022b0 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	3301      	adds	r3, #1
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	2b07      	cmp	r3, #7
 80022de:	d9d5      	bls.n	800228c <OLED_Refresh_Gram+0xc>
	}
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000410 	.word	0x20000410

080022f0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80022f6:	2300      	movs	r3, #0
 80022f8:	71fb      	strb	r3, [r7, #7]
 80022fa:	e014      	b.n	8002326 <OLED_Clear+0x36>
 80022fc:	2300      	movs	r3, #0
 80022fe:	71bb      	strb	r3, [r7, #6]
 8002300:	e00a      	b.n	8002318 <OLED_Clear+0x28>
 8002302:	79ba      	ldrb	r2, [r7, #6]
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	490c      	ldr	r1, [pc, #48]	; (8002338 <OLED_Clear+0x48>)
 8002308:	00d2      	lsls	r2, r2, #3
 800230a:	440a      	add	r2, r1
 800230c:	4413      	add	r3, r2
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	3301      	adds	r3, #1
 8002316:	71bb      	strb	r3, [r7, #6]
 8002318:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800231c:	2b00      	cmp	r3, #0
 800231e:	daf0      	bge.n	8002302 <OLED_Clear+0x12>
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	3301      	adds	r3, #1
 8002324:	71fb      	strb	r3, [r7, #7]
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b07      	cmp	r3, #7
 800232a:	d9e7      	bls.n	80022fc <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800232c:	f7ff ffa8 	bl	8002280 <OLED_Refresh_Gram>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000410 	.word	0x20000410

0800233c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	460b      	mov	r3, r1
 8002348:	71bb      	strb	r3, [r7, #6]
 800234a:	4613      	mov	r3, r2
 800234c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db41      	blt.n	80023de <OLED_DrawPoint+0xa2>
 800235a:	79bb      	ldrb	r3, [r7, #6]
 800235c:	2b3f      	cmp	r3, #63	; 0x3f
 800235e:	d83e      	bhi.n	80023de <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	08db      	lsrs	r3, r3, #3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800236c:	79bb      	ldrb	r3, [r7, #6]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8002374:	7b7b      	ldrb	r3, [r7, #13]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2201      	movs	r2, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8002382:	797b      	ldrb	r3, [r7, #5]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d012      	beq.n	80023ae <OLED_DrawPoint+0x72>
 8002388:	79fa      	ldrb	r2, [r7, #7]
 800238a:	7bbb      	ldrb	r3, [r7, #14]
 800238c:	4917      	ldr	r1, [pc, #92]	; (80023ec <OLED_DrawPoint+0xb0>)
 800238e:	00d2      	lsls	r2, r2, #3
 8002390:	440a      	add	r2, r1
 8002392:	4413      	add	r3, r2
 8002394:	7818      	ldrb	r0, [r3, #0]
 8002396:	79fa      	ldrb	r2, [r7, #7]
 8002398:	7bbb      	ldrb	r3, [r7, #14]
 800239a:	7bf9      	ldrb	r1, [r7, #15]
 800239c:	4301      	orrs	r1, r0
 800239e:	b2c8      	uxtb	r0, r1
 80023a0:	4912      	ldr	r1, [pc, #72]	; (80023ec <OLED_DrawPoint+0xb0>)
 80023a2:	00d2      	lsls	r2, r2, #3
 80023a4:	440a      	add	r2, r1
 80023a6:	4413      	add	r3, r2
 80023a8:	4602      	mov	r2, r0
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e018      	b.n	80023e0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80023ae:	79fa      	ldrb	r2, [r7, #7]
 80023b0:	7bbb      	ldrb	r3, [r7, #14]
 80023b2:	490e      	ldr	r1, [pc, #56]	; (80023ec <OLED_DrawPoint+0xb0>)
 80023b4:	00d2      	lsls	r2, r2, #3
 80023b6:	440a      	add	r2, r1
 80023b8:	4413      	add	r3, r2
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b25a      	sxtb	r2, r3
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	b25b      	sxtb	r3, r3
 80023c6:	4013      	ands	r3, r2
 80023c8:	b259      	sxtb	r1, r3
 80023ca:	79fa      	ldrb	r2, [r7, #7]
 80023cc:	7bbb      	ldrb	r3, [r7, #14]
 80023ce:	b2c8      	uxtb	r0, r1
 80023d0:	4906      	ldr	r1, [pc, #24]	; (80023ec <OLED_DrawPoint+0xb0>)
 80023d2:	00d2      	lsls	r2, r2, #3
 80023d4:	440a      	add	r2, r1
 80023d6:	4413      	add	r3, r2
 80023d8:	4602      	mov	r2, r0
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e000      	b.n	80023e0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80023de:	bf00      	nop
}
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000410 	.word	0x20000410

080023f0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4604      	mov	r4, r0
 80023f8:	4608      	mov	r0, r1
 80023fa:	4611      	mov	r1, r2
 80023fc:	461a      	mov	r2, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	71fb      	strb	r3, [r7, #7]
 8002402:	4603      	mov	r3, r0
 8002404:	71bb      	strb	r3, [r7, #6]
 8002406:	460b      	mov	r3, r1
 8002408:	717b      	strb	r3, [r7, #5]
 800240a:	4613      	mov	r3, r2
 800240c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800240e:	79bb      	ldrb	r3, [r7, #6]
 8002410:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8002412:	797b      	ldrb	r3, [r7, #5]
 8002414:	3b20      	subs	r3, #32
 8002416:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8002418:	2300      	movs	r3, #0
 800241a:	73bb      	strb	r3, [r7, #14]
 800241c:	e04d      	b.n	80024ba <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800241e:	793b      	ldrb	r3, [r7, #4]
 8002420:	2b0c      	cmp	r3, #12
 8002422:	d10b      	bne.n	800243c <OLED_ShowChar+0x4c>
 8002424:	797a      	ldrb	r2, [r7, #5]
 8002426:	7bb9      	ldrb	r1, [r7, #14]
 8002428:	4828      	ldr	r0, [pc, #160]	; (80024cc <OLED_ShowChar+0xdc>)
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4403      	add	r3, r0
 8002434:	440b      	add	r3, r1
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	73fb      	strb	r3, [r7, #15]
 800243a:	e007      	b.n	800244c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800243c:	797a      	ldrb	r2, [r7, #5]
 800243e:	7bbb      	ldrb	r3, [r7, #14]
 8002440:	4923      	ldr	r1, [pc, #140]	; (80024d0 <OLED_ShowChar+0xe0>)
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	440a      	add	r2, r1
 8002446:	4413      	add	r3, r2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800244c:	2300      	movs	r3, #0
 800244e:	737b      	strb	r3, [r7, #13]
 8002450:	e02d      	b.n	80024ae <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	2b00      	cmp	r3, #0
 8002458:	da07      	bge.n	800246a <OLED_ShowChar+0x7a>
 800245a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800245e:	79b9      	ldrb	r1, [r7, #6]
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff6a 	bl	800233c <OLED_DrawPoint>
 8002468:	e00c      	b.n	8002484 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800246a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	79b9      	ldrb	r1, [r7, #6]
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ff5c 	bl	800233c <OLED_DrawPoint>
			temp<<=1;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
			y++;
 800248a:	79bb      	ldrb	r3, [r7, #6]
 800248c:	3301      	adds	r3, #1
 800248e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8002490:	79ba      	ldrb	r2, [r7, #6]
 8002492:	7b3b      	ldrb	r3, [r7, #12]
 8002494:	1ad2      	subs	r2, r2, r3
 8002496:	793b      	ldrb	r3, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d105      	bne.n	80024a8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800249c:	7b3b      	ldrb	r3, [r7, #12]
 800249e:	71bb      	strb	r3, [r7, #6]
				x++;
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	3301      	adds	r3, #1
 80024a4:	71fb      	strb	r3, [r7, #7]
				break;
 80024a6:	e005      	b.n	80024b4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80024a8:	7b7b      	ldrb	r3, [r7, #13]
 80024aa:	3301      	adds	r3, #1
 80024ac:	737b      	strb	r3, [r7, #13]
 80024ae:	7b7b      	ldrb	r3, [r7, #13]
 80024b0:	2b07      	cmp	r3, #7
 80024b2:	d9ce      	bls.n	8002452 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80024b4:	7bbb      	ldrb	r3, [r7, #14]
 80024b6:	3301      	adds	r3, #1
 80024b8:	73bb      	strb	r3, [r7, #14]
 80024ba:	7bba      	ldrb	r2, [r7, #14]
 80024bc:	793b      	ldrb	r3, [r7, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3ad      	bcc.n	800241e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80024c2:	bf00      	nop
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}
 80024cc:	0800b1f8 	.word	0x0800b1f8
 80024d0:	0800b66c 	.word	0x0800b66c

080024d4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af02      	add	r7, sp, #8
 80024da:	4603      	mov	r3, r0
 80024dc:	603a      	str	r2, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
 80024e0:	460b      	mov	r3, r1
 80024e2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80024e4:	e01f      	b.n	8002526 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	2b7a      	cmp	r3, #122	; 0x7a
 80024ea:	d904      	bls.n	80024f6 <OLED_ShowString+0x22>
 80024ec:	2300      	movs	r3, #0
 80024ee:	71fb      	strb	r3, [r7, #7]
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	3310      	adds	r3, #16
 80024f4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80024f6:	79bb      	ldrb	r3, [r7, #6]
 80024f8:	2b3a      	cmp	r3, #58	; 0x3a
 80024fa:	d905      	bls.n	8002508 <OLED_ShowString+0x34>
 80024fc:	2300      	movs	r3, #0
 80024fe:	71fb      	strb	r3, [r7, #7]
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	71bb      	strb	r3, [r7, #6]
 8002504:	f7ff fef4 	bl	80022f0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	79b9      	ldrb	r1, [r7, #6]
 800250e:	79f8      	ldrb	r0, [r7, #7]
 8002510:	2301      	movs	r3, #1
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	230c      	movs	r3, #12
 8002516:	f7ff ff6b 	bl	80023f0 <OLED_ShowChar>
        x+=8;
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	3308      	adds	r3, #8
 800251e:	71fb      	strb	r3, [r7, #7]
        p++;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1db      	bne.n	80024e6 <OLED_ShowString+0x12>
    }  
}	 
 800252e:	bf00      	nop
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <OLED_Init>:

void OLED_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800253c:	f001 ff08 	bl	8004350 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8002540:	4b41      	ldr	r3, [pc, #260]	; (8002648 <OLED_Init+0x110>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	4a40      	ldr	r2, [pc, #256]	; (8002648 <OLED_Init+0x110>)
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	6713      	str	r3, [r2, #112]	; 0x70
 800254c:	4b3e      	ldr	r3, [pc, #248]	; (8002648 <OLED_Init+0x110>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a3d      	ldr	r2, [pc, #244]	; (8002648 <OLED_Init+0x110>)
 8002552:	f023 0304 	bic.w	r3, r3, #4
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8002558:	f001 ff0e 	bl	8004378 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800255c:	2200      	movs	r2, #0
 800255e:	2180      	movs	r1, #128	; 0x80
 8002560:	483a      	ldr	r0, [pc, #232]	; (800264c <OLED_Init+0x114>)
 8002562:	f000 feb7 	bl	80032d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002566:	2064      	movs	r0, #100	; 0x64
 8002568:	f000 fbe2 	bl	8002d30 <HAL_Delay>
	OLED_RST_Set();
 800256c:	2201      	movs	r2, #1
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	4836      	ldr	r0, [pc, #216]	; (800264c <OLED_Init+0x114>)
 8002572:	f000 feaf 	bl	80032d4 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8002576:	2100      	movs	r1, #0
 8002578:	20ae      	movs	r0, #174	; 0xae
 800257a:	f7ff fe37 	bl	80021ec <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800257e:	2100      	movs	r1, #0
 8002580:	20d5      	movs	r0, #213	; 0xd5
 8002582:	f7ff fe33 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8002586:	2100      	movs	r1, #0
 8002588:	2050      	movs	r0, #80	; 0x50
 800258a:	f7ff fe2f 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800258e:	2100      	movs	r1, #0
 8002590:	20a8      	movs	r0, #168	; 0xa8
 8002592:	f7ff fe2b 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8002596:	2100      	movs	r1, #0
 8002598:	203f      	movs	r0, #63	; 0x3f
 800259a:	f7ff fe27 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800259e:	2100      	movs	r1, #0
 80025a0:	20d3      	movs	r0, #211	; 0xd3
 80025a2:	f7ff fe23 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80025a6:	2100      	movs	r1, #0
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff fe1f 	bl	80021ec <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80025ae:	2100      	movs	r1, #0
 80025b0:	2040      	movs	r0, #64	; 0x40
 80025b2:	f7ff fe1b 	bl	80021ec <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80025b6:	2100      	movs	r1, #0
 80025b8:	208d      	movs	r0, #141	; 0x8d
 80025ba:	f7ff fe17 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80025be:	2100      	movs	r1, #0
 80025c0:	2014      	movs	r0, #20
 80025c2:	f7ff fe13 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80025c6:	2100      	movs	r1, #0
 80025c8:	2020      	movs	r0, #32
 80025ca:	f7ff fe0f 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80025ce:	2100      	movs	r1, #0
 80025d0:	2002      	movs	r0, #2
 80025d2:	f7ff fe0b 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80025d6:	2100      	movs	r1, #0
 80025d8:	20a1      	movs	r0, #161	; 0xa1
 80025da:	f7ff fe07 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80025de:	2100      	movs	r1, #0
 80025e0:	20c0      	movs	r0, #192	; 0xc0
 80025e2:	f7ff fe03 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80025e6:	2100      	movs	r1, #0
 80025e8:	20da      	movs	r0, #218	; 0xda
 80025ea:	f7ff fdff 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80025ee:	2100      	movs	r1, #0
 80025f0:	2012      	movs	r0, #18
 80025f2:	f7ff fdfb 	bl	80021ec <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80025f6:	2100      	movs	r1, #0
 80025f8:	2081      	movs	r0, #129	; 0x81
 80025fa:	f7ff fdf7 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80025fe:	2100      	movs	r1, #0
 8002600:	20ef      	movs	r0, #239	; 0xef
 8002602:	f7ff fdf3 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8002606:	2100      	movs	r1, #0
 8002608:	20d9      	movs	r0, #217	; 0xd9
 800260a:	f7ff fdef 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800260e:	2100      	movs	r1, #0
 8002610:	20f1      	movs	r0, #241	; 0xf1
 8002612:	f7ff fdeb 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8002616:	2100      	movs	r1, #0
 8002618:	20db      	movs	r0, #219	; 0xdb
 800261a:	f7ff fde7 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800261e:	2100      	movs	r1, #0
 8002620:	2030      	movs	r0, #48	; 0x30
 8002622:	f7ff fde3 	bl	80021ec <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8002626:	2100      	movs	r1, #0
 8002628:	20a4      	movs	r0, #164	; 0xa4
 800262a:	f7ff fddf 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800262e:	2100      	movs	r1, #0
 8002630:	20a6      	movs	r0, #166	; 0xa6
 8002632:	f7ff fddb 	bl	80021ec <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8002636:	2100      	movs	r1, #0
 8002638:	20af      	movs	r0, #175	; 0xaf
 800263a:	f7ff fdd7 	bl	80021ec <OLED_WR_Byte>
	OLED_Clear(); 
 800263e:	f7ff fe57 	bl	80022f0 <OLED_Clear>
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	40021000 	.word	0x40021000

08002650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_MspInit+0x4c>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a0f      	ldr	r2, [pc, #60]	; (800269c <HAL_MspInit+0x4c>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_MspInit+0x4c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_MspInit+0x4c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_MspInit+0x4c>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_MspInit+0x4c>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_I2C_MspInit+0x84>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d12c      	bne.n	800271c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_I2C_MspInit+0x88>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_I2C_MspInit+0x88>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_I2C_MspInit+0x88>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 80026de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e4:	2312      	movs	r3, #18
 80026e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ec:	2303      	movs	r3, #3
 80026ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026f0:	2304      	movs	r3, #4
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	480c      	ldr	r0, [pc, #48]	; (800272c <HAL_I2C_MspInit+0x8c>)
 80026fc:	f000 fc4e 	bl	8002f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_I2C_MspInit+0x88>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_I2C_MspInit+0x88>)
 800270a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800270e:	6413      	str	r3, [r2, #64]	; 0x40
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_I2C_MspInit+0x88>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40005400 	.word	0x40005400
 8002728:	40023800 	.word	0x40023800
 800272c:	40020400 	.word	0x40020400

08002730 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 031c 	add.w	r3, r7, #28
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002750:	d153      	bne.n	80027fa <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a46      	ldr	r2, [pc, #280]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b44      	ldr	r3, [pc, #272]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	4b40      	ldr	r3, [pc, #256]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a3f      	ldr	r2, [pc, #252]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	4b39      	ldr	r3, [pc, #228]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a38      	ldr	r2, [pc, #224]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b36      	ldr	r3, [pc, #216]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTORA_CH1_Pin;
 80027a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027b8:	2301      	movs	r3, #1
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH1_GPIO_Port, &GPIO_InitStruct);
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	482d      	ldr	r0, [pc, #180]	; (8002878 <HAL_TIM_Encoder_MspInit+0x148>)
 80027c4:	f000 fbea 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTORA_CH2_Pin;
 80027c8:	2308      	movs	r3, #8
 80027ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027d8:	2301      	movs	r3, #1
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH2_GPIO_Port, &GPIO_InitStruct);
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	4619      	mov	r1, r3
 80027e2:	4826      	ldr	r0, [pc, #152]	; (800287c <HAL_TIM_Encoder_MspInit+0x14c>)
 80027e4:	f000 fbda 	bl	8002f9c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2100      	movs	r1, #0
 80027ec:	201c      	movs	r0, #28
 80027ee:	f000 fb9e 	bl	8002f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027f2:	201c      	movs	r0, #28
 80027f4:	f000 fbb7 	bl	8002f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027f8:	e038      	b.n	800286c <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM3)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a20      	ldr	r2, [pc, #128]	; (8002880 <HAL_TIM_Encoder_MspInit+0x150>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d133      	bne.n	800286c <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	6413      	str	r3, [r2, #64]	; 0x40
 8002814:	4b17      	ldr	r3, [pc, #92]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	4a12      	ldr	r2, [pc, #72]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6313      	str	r3, [r2, #48]	; 0x30
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_TIM_Encoder_MspInit+0x144>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTORB_CH1_Pin|MOTORB_CH2_Pin;
 800283c:	23c0      	movs	r3, #192	; 0xc0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800284c:	2302      	movs	r3, #2
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	4808      	ldr	r0, [pc, #32]	; (8002878 <HAL_TIM_Encoder_MspInit+0x148>)
 8002858:	f000 fba0 	bl	8002f9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	201d      	movs	r0, #29
 8002862:	f000 fb64 	bl	8002f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002866:	201d      	movs	r0, #29
 8002868:	f000 fb7d 	bl	8002f66 <HAL_NVIC_EnableIRQ>
}
 800286c:	bf00      	nop
 800286e:	3730      	adds	r7, #48	; 0x30
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800
 8002878:	40020000 	.word	0x40020000
 800287c:	40020400 	.word	0x40020400
 8002880:	40000400 	.word	0x40000400

08002884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <HAL_TIM_Base_MspInit+0x3c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10d      	bne.n	80028b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_TIM_Base_MspInit+0x40>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_TIM_Base_MspInit+0x40>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	6453      	str	r3, [r2, #68]	; 0x44
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_TIM_Base_MspInit+0x40>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40010400 	.word	0x40010400
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a12      	ldr	r2, [pc, #72]	; (8002930 <HAL_TIM_MspPostInit+0x68>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d11d      	bne.n	8002926 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_TIM_MspPostInit+0x6c>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a10      	ldr	r2, [pc, #64]	; (8002934 <HAL_TIM_MspPostInit+0x6c>)
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_TIM_MspPostInit+0x6c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = MOTORA_PWM_Pin|MOTORB_PWM_Pin;
 8002906:	23c0      	movs	r3, #192	; 0xc0
 8002908:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002916:	2303      	movs	r3, #3
 8002918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291a:	f107 030c 	add.w	r3, r7, #12
 800291e:	4619      	mov	r1, r3
 8002920:	4805      	ldr	r0, [pc, #20]	; (8002938 <HAL_TIM_MspPostInit+0x70>)
 8002922:	f000 fb3b 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002926:	bf00      	nop
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40010400 	.word	0x40010400
 8002934:	40023800 	.word	0x40023800
 8002938:	40020800 	.word	0x40020800

0800293c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_UART_MspInit+0x84>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d12c      	bne.n	80029b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_UART_MspInit+0x88>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_UART_MspInit+0x88>)
 8002968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_UART_MspInit+0x88>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <HAL_UART_MspInit+0x88>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a10      	ldr	r2, [pc, #64]	; (80029c4 <HAL_UART_MspInit+0x88>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <HAL_UART_MspInit+0x88>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002996:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029a8:	2307      	movs	r3, #7
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	4805      	ldr	r0, [pc, #20]	; (80029c8 <HAL_UART_MspInit+0x8c>)
 80029b4:	f000 faf2 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	; 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40004800 	.word	0x40004800
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020800 	.word	0x40020800

080029cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029d0:	e7fe      	b.n	80029d0 <NMI_Handler+0x4>

080029d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	e7fe      	b.n	80029dc <MemManage_Handler+0x4>

080029de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e2:	e7fe      	b.n	80029e2 <BusFault_Handler+0x4>

080029e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <UsageFault_Handler+0x4>

080029ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a18:	f000 f96a 	bl	8002cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <TIM2_IRQHandler+0x10>)
 8002a26:	f002 fbd7 	bl	80051d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000294 	.word	0x20000294

08002a34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <TIM3_IRQHandler+0x10>)
 8002a3a:	f002 fbcd 	bl	80051d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200002dc 	.word	0x200002dc

08002a48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return 1;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <_kill>:

int _kill(int pid, int sig)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a62:	f004 fd3f 	bl	80074e4 <__errno>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2216      	movs	r2, #22
 8002a6a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <_exit>:

void _exit (int status)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a80:	f04f 31ff 	mov.w	r1, #4294967295
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ffe7 	bl	8002a58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a8a:	e7fe      	b.n	8002a8a <_exit+0x12>

08002a8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	e00a      	b.n	8002ab4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a9e:	f3af 8000 	nop.w
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	60ba      	str	r2, [r7, #8]
 8002aaa:	b2ca      	uxtb	r2, r1
 8002aac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dbf0      	blt.n	8002a9e <_read+0x12>
  }

  return len;
 8002abc:	687b      	ldr	r3, [r7, #4]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e009      	b.n	8002aec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	60ba      	str	r2, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dbf1      	blt.n	8002ad8 <_write+0x12>
  }
  return len;
 8002af4:	687b      	ldr	r3, [r7, #4]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_close>:

int _close(int file)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b26:	605a      	str	r2, [r3, #4]
  return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <_isatty>:

int _isatty(int file)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <_sbrk+0x5c>)
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <_sbrk+0x60>)
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <_sbrk+0x64>)
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <_sbrk+0x68>)
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <_sbrk+0x64>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d207      	bcs.n	8002ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b98:	f004 fca4 	bl	80074e4 <__errno>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba6:	e009      	b.n	8002bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <_sbrk+0x64>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <_sbrk+0x64>)
 8002bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20020000 	.word	0x20020000
 8002bc8:	00000400 	.word	0x00000400
 8002bcc:	20000810 	.word	0x20000810
 8002bd0:	20000968 	.word	0x20000968

08002bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <SystemInit+0x20>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <SystemInit+0x20>)
 8002be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bfc:	f7ff ffea 	bl	8002bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c00:	480c      	ldr	r0, [pc, #48]	; (8002c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c02:	490d      	ldr	r1, [pc, #52]	; (8002c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c04:	4a0d      	ldr	r2, [pc, #52]	; (8002c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c08:	e002      	b.n	8002c10 <LoopCopyDataInit>

08002c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0e:	3304      	adds	r3, #4

08002c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c14:	d3f9      	bcc.n	8002c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c18:	4c0a      	ldr	r4, [pc, #40]	; (8002c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c1c:	e001      	b.n	8002c22 <LoopFillZerobss>

08002c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c20:	3204      	adds	r2, #4

08002c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c24:	d3fb      	bcc.n	8002c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c26:	f004 fc63 	bl	80074f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2a:	f7fe fd17 	bl	800165c <main>
  bx  lr    
 8002c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002c3c:	0800c120 	.word	0x0800c120
  ldr r2, =_sbss
 8002c40:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002c44:	20000964 	.word	0x20000964

08002c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC_IRQHandler>
	...

08002c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <HAL_Init+0x40>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <HAL_Init+0x40>)
 8002c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <HAL_Init+0x40>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f000 f94f 	bl	8002f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c7a:	200f      	movs	r0, #15
 8002c7c:	f000 f808 	bl	8002c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c80:	f7ff fce6 	bl	8002650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023c00 	.word	0x40023c00

08002c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <HAL_InitTick+0x54>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_InitTick+0x58>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f967 	bl	8002f82 <HAL_SYSTICK_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00e      	b.n	8002cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b0f      	cmp	r3, #15
 8002cc2:	d80a      	bhi.n	8002cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f000 f92f 	bl	8002f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cd0:	4a06      	ldr	r2, [pc, #24]	; (8002cec <HAL_InitTick+0x5c>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000000 	.word	0x20000000
 8002ce8:	20000008 	.word	0x20000008
 8002cec:	20000004 	.word	0x20000004

08002cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_IncTick+0x20>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_IncTick+0x24>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_IncTick+0x24>)
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000008 	.word	0x20000008
 8002d14:	20000814 	.word	0x20000814

08002d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_GetTick+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000814 	.word	0x20000814

08002d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff ffee 	bl	8002d18 <HAL_GetTick>
 8002d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d005      	beq.n	8002d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_Delay+0x44>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d56:	bf00      	nop
 8002d58:	f7ff ffde 	bl	8002d18 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d8f7      	bhi.n	8002d58 <HAL_Delay+0x28>
  {
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000008 	.word	0x20000008

08002d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d94:	4013      	ands	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002daa:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	60d3      	str	r3, [r2, #12]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	f003 0307 	and.w	r3, r3, #7
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	db0b      	blt.n	8002e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	f003 021f 	and.w	r2, r3, #31
 8002df4:	4907      	ldr	r1, [pc, #28]	; (8002e14 <__NVIC_EnableIRQ+0x38>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000e100 	.word	0xe000e100

08002e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	6039      	str	r1, [r7, #0]
 8002e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	db0a      	blt.n	8002e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	490c      	ldr	r1, [pc, #48]	; (8002e64 <__NVIC_SetPriority+0x4c>)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e40:	e00a      	b.n	8002e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4908      	ldr	r1, [pc, #32]	; (8002e68 <__NVIC_SetPriority+0x50>)
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	3b04      	subs	r3, #4
 8002e50:	0112      	lsls	r2, r2, #4
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	440b      	add	r3, r1
 8002e56:	761a      	strb	r2, [r3, #24]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000e100 	.word	0xe000e100
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	; 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f1c3 0307 	rsb	r3, r3, #7
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	bf28      	it	cs
 8002e8a:	2304      	movcs	r3, #4
 8002e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3304      	adds	r3, #4
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d902      	bls.n	8002e9c <NVIC_EncodePriority+0x30>
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3b03      	subs	r3, #3
 8002e9a:	e000      	b.n	8002e9e <NVIC_EncodePriority+0x32>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	401a      	ands	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	43d9      	mvns	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	4313      	orrs	r3, r2
         );
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3724      	adds	r7, #36	; 0x24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee4:	d301      	bcc.n	8002eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00f      	b.n	8002f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eea:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <SysTick_Config+0x40>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ef2:	210f      	movs	r1, #15
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	f7ff ff8e 	bl	8002e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <SysTick_Config+0x40>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f02:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <SysTick_Config+0x40>)
 8002f04:	2207      	movs	r2, #7
 8002f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	e000e010 	.word	0xe000e010

08002f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ff29 	bl	8002d78 <__NVIC_SetPriorityGrouping>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f40:	f7ff ff3e 	bl	8002dc0 <__NVIC_GetPriorityGrouping>
 8002f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	6978      	ldr	r0, [r7, #20]
 8002f4c:	f7ff ff8e 	bl	8002e6c <NVIC_EncodePriority>
 8002f50:	4602      	mov	r2, r0
 8002f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff5d 	bl	8002e18 <__NVIC_SetPriority>
}
 8002f5e:	bf00      	nop
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff31 	bl	8002ddc <__NVIC_EnableIRQ>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff ffa2 	bl	8002ed4 <SysTick_Config>
 8002f90:	4603      	mov	r3, r0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	e16b      	b.n	8003290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fb8:	2201      	movs	r2, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	f040 815a 	bne.w	800328a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d005      	beq.n	8002fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d130      	bne.n	8003050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003024:	2201      	movs	r2, #1
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 0201 	and.w	r2, r3, #1
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b03      	cmp	r3, #3
 800305a:	d017      	beq.n	800308c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	2203      	movs	r2, #3
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d123      	bne.n	80030e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	08da      	lsrs	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3208      	adds	r2, #8
 80030a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	220f      	movs	r2, #15
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	08da      	lsrs	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3208      	adds	r2, #8
 80030da:	69b9      	ldr	r1, [r7, #24]
 80030dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	2203      	movs	r2, #3
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0203 	and.w	r2, r3, #3
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80b4 	beq.w	800328a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	4b60      	ldr	r3, [pc, #384]	; (80032a8 <HAL_GPIO_Init+0x30c>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a5f      	ldr	r2, [pc, #380]	; (80032a8 <HAL_GPIO_Init+0x30c>)
 800312c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b5d      	ldr	r3, [pc, #372]	; (80032a8 <HAL_GPIO_Init+0x30c>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800313e:	4a5b      	ldr	r2, [pc, #364]	; (80032ac <HAL_GPIO_Init+0x310>)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3302      	adds	r3, #2
 8003146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <HAL_GPIO_Init+0x314>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d02b      	beq.n	80031c2 <HAL_GPIO_Init+0x226>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <HAL_GPIO_Init+0x318>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d025      	beq.n	80031be <HAL_GPIO_Init+0x222>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a50      	ldr	r2, [pc, #320]	; (80032b8 <HAL_GPIO_Init+0x31c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01f      	beq.n	80031ba <HAL_GPIO_Init+0x21e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4f      	ldr	r2, [pc, #316]	; (80032bc <HAL_GPIO_Init+0x320>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d019      	beq.n	80031b6 <HAL_GPIO_Init+0x21a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a4e      	ldr	r2, [pc, #312]	; (80032c0 <HAL_GPIO_Init+0x324>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_GPIO_Init+0x216>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4d      	ldr	r2, [pc, #308]	; (80032c4 <HAL_GPIO_Init+0x328>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00d      	beq.n	80031ae <HAL_GPIO_Init+0x212>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a4c      	ldr	r2, [pc, #304]	; (80032c8 <HAL_GPIO_Init+0x32c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d007      	beq.n	80031aa <HAL_GPIO_Init+0x20e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4b      	ldr	r2, [pc, #300]	; (80032cc <HAL_GPIO_Init+0x330>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d101      	bne.n	80031a6 <HAL_GPIO_Init+0x20a>
 80031a2:	2307      	movs	r3, #7
 80031a4:	e00e      	b.n	80031c4 <HAL_GPIO_Init+0x228>
 80031a6:	2308      	movs	r3, #8
 80031a8:	e00c      	b.n	80031c4 <HAL_GPIO_Init+0x228>
 80031aa:	2306      	movs	r3, #6
 80031ac:	e00a      	b.n	80031c4 <HAL_GPIO_Init+0x228>
 80031ae:	2305      	movs	r3, #5
 80031b0:	e008      	b.n	80031c4 <HAL_GPIO_Init+0x228>
 80031b2:	2304      	movs	r3, #4
 80031b4:	e006      	b.n	80031c4 <HAL_GPIO_Init+0x228>
 80031b6:	2303      	movs	r3, #3
 80031b8:	e004      	b.n	80031c4 <HAL_GPIO_Init+0x228>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e002      	b.n	80031c4 <HAL_GPIO_Init+0x228>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_GPIO_Init+0x228>
 80031c2:	2300      	movs	r3, #0
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	f002 0203 	and.w	r2, r2, #3
 80031ca:	0092      	lsls	r2, r2, #2
 80031cc:	4093      	lsls	r3, r2
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031d4:	4935      	ldr	r1, [pc, #212]	; (80032ac <HAL_GPIO_Init+0x310>)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	089b      	lsrs	r3, r3, #2
 80031da:	3302      	adds	r3, #2
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_GPIO_Init+0x334>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4013      	ands	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003206:	4a32      	ldr	r2, [pc, #200]	; (80032d0 <HAL_GPIO_Init+0x334>)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800320c:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <HAL_GPIO_Init+0x334>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <HAL_GPIO_Init+0x334>)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003236:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <HAL_GPIO_Init+0x334>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800325a:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <HAL_GPIO_Init+0x334>)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_GPIO_Init+0x334>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003284:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <HAL_GPIO_Init+0x334>)
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3301      	adds	r3, #1
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b0f      	cmp	r3, #15
 8003294:	f67f ae90 	bls.w	8002fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	3724      	adds	r7, #36	; 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40013800 	.word	0x40013800
 80032b0:	40020000 	.word	0x40020000
 80032b4:	40020400 	.word	0x40020400
 80032b8:	40020800 	.word	0x40020800
 80032bc:	40020c00 	.word	0x40020c00
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40021400 	.word	0x40021400
 80032c8:	40021800 	.word	0x40021800
 80032cc:	40021c00 	.word	0x40021c00
 80032d0:	40013c00 	.word	0x40013c00

080032d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
 80032e0:	4613      	mov	r3, r2
 80032e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e4:	787b      	ldrb	r3, [r7, #1]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ea:	887a      	ldrh	r2, [r7, #2]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032f0:	e003      	b.n	80032fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032f2:	887b      	ldrh	r3, [r7, #2]
 80032f4:	041a      	lsls	r2, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	619a      	str	r2, [r3, #24]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e12b      	b.n	8003572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff f9b6 	bl	80026a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800336a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800336c:	f001 fc48 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 8003370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a81      	ldr	r2, [pc, #516]	; (800357c <HAL_I2C_Init+0x274>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d807      	bhi.n	800338c <HAL_I2C_Init+0x84>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a80      	ldr	r2, [pc, #512]	; (8003580 <HAL_I2C_Init+0x278>)
 8003380:	4293      	cmp	r3, r2
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e006      	b.n	800339a <HAL_I2C_Init+0x92>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a7d      	ldr	r2, [pc, #500]	; (8003584 <HAL_I2C_Init+0x27c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0e7      	b.n	8003572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a78      	ldr	r2, [pc, #480]	; (8003588 <HAL_I2C_Init+0x280>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0c9b      	lsrs	r3, r3, #18
 80033ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a6a      	ldr	r2, [pc, #424]	; (800357c <HAL_I2C_Init+0x274>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d802      	bhi.n	80033dc <HAL_I2C_Init+0xd4>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3301      	adds	r3, #1
 80033da:	e009      	b.n	80033f0 <HAL_I2C_Init+0xe8>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	4a69      	ldr	r2, [pc, #420]	; (800358c <HAL_I2C_Init+0x284>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	3301      	adds	r3, #1
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	495c      	ldr	r1, [pc, #368]	; (800357c <HAL_I2C_Init+0x274>)
 800340c:	428b      	cmp	r3, r1
 800340e:	d819      	bhi.n	8003444 <HAL_I2C_Init+0x13c>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e59      	subs	r1, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fbb1 f3f3 	udiv	r3, r1, r3
 800341e:	1c59      	adds	r1, r3, #1
 8003420:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003424:	400b      	ands	r3, r1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_I2C_Init+0x138>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e59      	subs	r1, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fbb1 f3f3 	udiv	r3, r1, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343e:	e051      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 8003440:	2304      	movs	r3, #4
 8003442:	e04f      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d111      	bne.n	8003470 <HAL_I2C_Init+0x168>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e58      	subs	r0, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e012      	b.n	8003496 <HAL_I2C_Init+0x18e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	0099      	lsls	r1, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Init+0x196>
 800349a:	2301      	movs	r3, #1
 800349c:	e022      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10e      	bne.n	80034c4 <HAL_I2C_Init+0x1bc>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1e58      	subs	r0, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	440b      	add	r3, r1
 80034b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c2:	e00f      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1e58      	subs	r0, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	0099      	lsls	r1, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	6809      	ldr	r1, [r1, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6911      	ldr	r1, [r2, #16]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68d2      	ldr	r2, [r2, #12]
 800351e:	4311      	orrs	r1, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	430b      	orrs	r3, r1
 8003526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	000186a0 	.word	0x000186a0
 8003580:	001e847f 	.word	0x001e847f
 8003584:	003d08ff 	.word	0x003d08ff
 8003588:	431bde83 	.word	0x431bde83
 800358c:	10624dd3 	.word	0x10624dd3

08003590 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	4608      	mov	r0, r1
 800359a:	4611      	mov	r1, r2
 800359c:	461a      	mov	r2, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	817b      	strh	r3, [r7, #10]
 80035a2:	460b      	mov	r3, r1
 80035a4:	813b      	strh	r3, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035aa:	f7ff fbb5 	bl	8002d18 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	f040 80d9 	bne.w	8003770 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2319      	movs	r3, #25
 80035c4:	2201      	movs	r2, #1
 80035c6:	496d      	ldr	r1, [pc, #436]	; (800377c <HAL_I2C_Mem_Write+0x1ec>)
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fc8b 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
 80035d6:	e0cc      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_I2C_Mem_Write+0x56>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e0c5      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d007      	beq.n	800360c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2221      	movs	r2, #33	; 0x21
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800363c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a4d      	ldr	r2, [pc, #308]	; (8003780 <HAL_I2C_Mem_Write+0x1f0>)
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800364e:	88f8      	ldrh	r0, [r7, #6]
 8003650:	893a      	ldrh	r2, [r7, #8]
 8003652:	8979      	ldrh	r1, [r7, #10]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	4603      	mov	r3, r0
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fac2 	bl	8003be8 <I2C_RequestMemoryWrite>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d052      	beq.n	8003710 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e081      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fd50 	bl	8004118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00d      	beq.n	800369a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2b04      	cmp	r3, #4
 8003684:	d107      	bne.n	8003696 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003694:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e06b      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d11b      	bne.n	8003710 <HAL_I2C_Mem_Write+0x180>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d017      	beq.n	8003710 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1aa      	bne.n	800366e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fd43 	bl	80041a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	2b04      	cmp	r3, #4
 800372e:	d107      	bne.n	8003740 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e016      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	00100002 	.word	0x00100002
 8003780:	ffff0000 	.word	0xffff0000

08003784 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	; 0x30
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	4608      	mov	r0, r1
 800378e:	4611      	mov	r1, r2
 8003790:	461a      	mov	r2, r3
 8003792:	4603      	mov	r3, r0
 8003794:	817b      	strh	r3, [r7, #10]
 8003796:	460b      	mov	r3, r1
 8003798:	813b      	strh	r3, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800379e:	f7ff fabb 	bl	8002d18 <HAL_GetTick>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	f040 8214 	bne.w	8003bda <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	2319      	movs	r3, #25
 80037b8:	2201      	movs	r2, #1
 80037ba:	497b      	ldr	r1, [pc, #492]	; (80039a8 <HAL_I2C_Mem_Read+0x224>)
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fb91 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
 80037ca:	e207      	b.n	8003bdc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_I2C_Mem_Read+0x56>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e200      	b.n	8003bdc <HAL_I2C_Mem_Read+0x458>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d007      	beq.n	8003800 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800380e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2222      	movs	r2, #34	; 0x22
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2240      	movs	r2, #64	; 0x40
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a5b      	ldr	r2, [pc, #364]	; (80039ac <HAL_I2C_Mem_Read+0x228>)
 8003840:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003842:	88f8      	ldrh	r0, [r7, #6]
 8003844:	893a      	ldrh	r2, [r7, #8]
 8003846:	8979      	ldrh	r1, [r7, #10]
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4603      	mov	r3, r0
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fa5e 	bl	8003d14 <I2C_RequestMemoryRead>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e1bc      	b.n	8003bdc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	2b00      	cmp	r3, #0
 8003868:	d113      	bne.n	8003892 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386a:	2300      	movs	r3, #0
 800386c:	623b      	str	r3, [r7, #32]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	623b      	str	r3, [r7, #32]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	623b      	str	r3, [r7, #32]
 800387e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e190      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	2b01      	cmp	r3, #1
 8003898:	d11b      	bne.n	80038d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e170      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d11b      	bne.n	8003912 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	e150      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003928:	e144      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	2b03      	cmp	r3, #3
 8003930:	f200 80f1 	bhi.w	8003b16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	2b01      	cmp	r3, #1
 800393a:	d123      	bne.n	8003984 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fc79 	bl	8004238 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e145      	b.n	8003bdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003982:	e117      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	2b02      	cmp	r3, #2
 800398a:	d14e      	bne.n	8003a2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	2200      	movs	r2, #0
 8003994:	4906      	ldr	r1, [pc, #24]	; (80039b0 <HAL_I2C_Mem_Read+0x22c>)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 faa4 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e11a      	b.n	8003bdc <HAL_I2C_Mem_Read+0x458>
 80039a6:	bf00      	nop
 80039a8:	00100002 	.word	0x00100002
 80039ac:	ffff0000 	.word	0xffff0000
 80039b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a28:	e0c4      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	2200      	movs	r2, #0
 8003a32:	496c      	ldr	r1, [pc, #432]	; (8003be4 <HAL_I2C_Mem_Read+0x460>)
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fa55 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0cb      	b.n	8003bdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	4955      	ldr	r1, [pc, #340]	; (8003be4 <HAL_I2C_Mem_Read+0x460>)
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fa27 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e09d      	b.n	8003bdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b14:	e04e      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fb8c 	bl	8004238 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e058      	b.n	8003bdc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d124      	bne.n	8003bb4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d107      	bne.n	8003b82 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b80:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f47f aeb6 	bne.w	800392a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	00010004 	.word	0x00010004

08003be8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	813b      	strh	r3, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f960 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c38:	d103      	bne.n	8003c42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e05f      	b.n	8003d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c46:	897b      	ldrh	r3, [r7, #10]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	6a3a      	ldr	r2, [r7, #32]
 8003c5a:	492d      	ldr	r1, [pc, #180]	; (8003d10 <I2C_RequestMemoryWrite+0x128>)
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f9bb 	bl	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e04c      	b.n	8003d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c84:	6a39      	ldr	r1, [r7, #32]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fa46 	bl	8004118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d107      	bne.n	8003caa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e02b      	b.n	8003d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb4:	893b      	ldrh	r3, [r7, #8]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	611a      	str	r2, [r3, #16]
 8003cbe:	e021      	b.n	8003d04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cc0:	893b      	ldrh	r3, [r7, #8]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	6a39      	ldr	r1, [r7, #32]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fa20 	bl	8004118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d107      	bne.n	8003cf6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e005      	b.n	8003d06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cfa:	893b      	ldrh	r3, [r7, #8]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	00010002 	.word	0x00010002

08003d14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	461a      	mov	r2, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	817b      	strh	r3, [r7, #10]
 8003d26:	460b      	mov	r3, r1
 8003d28:	813b      	strh	r3, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f8c2 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00d      	beq.n	8003d82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d74:	d103      	bne.n	8003d7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e0aa      	b.n	8003ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d82:	897b      	ldrh	r3, [r7, #10]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	6a3a      	ldr	r2, [r7, #32]
 8003d96:	4952      	ldr	r1, [pc, #328]	; (8003ee0 <I2C_RequestMemoryRead+0x1cc>)
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f91d 	bl	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e097      	b.n	8003ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc0:	6a39      	ldr	r1, [r7, #32]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f9a8 	bl	8004118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00d      	beq.n	8003dea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d107      	bne.n	8003de6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e076      	b.n	8003ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df0:	893b      	ldrh	r3, [r7, #8]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	611a      	str	r2, [r3, #16]
 8003dfa:	e021      	b.n	8003e40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dfc:	893b      	ldrh	r3, [r7, #8]
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0c:	6a39      	ldr	r1, [r7, #32]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f982 	bl	8004118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00d      	beq.n	8003e36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d107      	bne.n	8003e32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e050      	b.n	8003ed8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e36:	893b      	ldrh	r3, [r7, #8]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e42:	6a39      	ldr	r1, [r7, #32]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f967 	bl	8004118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d107      	bne.n	8003e68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e035      	b.n	8003ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f82b 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea2:	d103      	bne.n	8003eac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e013      	b.n	8003ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003eb0:	897b      	ldrh	r3, [r7, #10]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	6a3a      	ldr	r2, [r7, #32]
 8003ec4:	4906      	ldr	r1, [pc, #24]	; (8003ee0 <I2C_RequestMemoryRead+0x1cc>)
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f886 	bl	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	00010002 	.word	0x00010002

08003ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef4:	e048      	b.n	8003f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d044      	beq.n	8003f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efe:	f7fe ff0b 	bl	8002d18 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d302      	bcc.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d139      	bne.n	8003f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	0c1b      	lsrs	r3, r3, #16
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d10d      	bne.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	43da      	mvns	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	e00c      	b.n	8003f54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	43da      	mvns	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4013      	ands	r3, r2
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d116      	bne.n	8003f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e023      	b.n	8003fd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	0c1b      	lsrs	r3, r3, #16
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d10d      	bne.n	8003fae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	e00c      	b.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	43da      	mvns	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d093      	beq.n	8003ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fe6:	e071      	b.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff6:	d123      	bne.n	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004006:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e067      	b.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d041      	beq.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004048:	f7fe fe66 	bl	8002d18 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	d302      	bcc.n	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d136      	bne.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d10c      	bne.n	8004082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	43da      	mvns	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4013      	ands	r3, r2
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	e00b      	b.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	43da      	mvns	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4013      	ands	r3, r2
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f043 0220 	orr.w	r2, r3, #32
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e021      	b.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	0c1b      	lsrs	r3, r3, #16
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d10c      	bne.n	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	43da      	mvns	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4013      	ands	r3, r2
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e00b      	b.n	8004108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	43da      	mvns	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4013      	ands	r3, r2
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bf14      	ite	ne
 8004102:	2301      	movne	r3, #1
 8004104:	2300      	moveq	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	f47f af6d 	bne.w	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004124:	e034      	b.n	8004190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f8e3 	bl	80042f2 <I2C_IsAcknowledgeFailed>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e034      	b.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d028      	beq.n	8004190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7fe fdeb 	bl	8002d18 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d11d      	bne.n	8004190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d016      	beq.n	8004190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f043 0220 	orr.w	r2, r3, #32
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e007      	b.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	d1c3      	bne.n	8004126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041b4:	e034      	b.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f89b 	bl	80042f2 <I2C_IsAcknowledgeFailed>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e034      	b.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d028      	beq.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7fe fda3 	bl	8002d18 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d11d      	bne.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d016      	beq.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e007      	b.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b04      	cmp	r3, #4
 800422c:	d1c3      	bne.n	80041b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004244:	e049      	b.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b10      	cmp	r3, #16
 8004252:	d119      	bne.n	8004288 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0210 	mvn.w	r2, #16
 800425c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e030      	b.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004288:	f7fe fd46 	bl	8002d18 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d11d      	bne.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a8:	2b40      	cmp	r3, #64	; 0x40
 80042aa:	d016      	beq.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f043 0220 	orr.w	r2, r3, #32
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e007      	b.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d1ae      	bne.n	8004246 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004308:	d11b      	bne.n	8004342 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004312:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f043 0204 	orr.w	r2, r3, #4
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_PWR_EnableBkUpAccess+0x20>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_PWR_EnableBkUpAccess+0x24>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004362:	687b      	ldr	r3, [r7, #4]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	420e0020 	.word	0x420e0020
 8004374:	40007000 	.word	0x40007000

08004378 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800437e:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_PWR_DisableBkUpAccess+0x24>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800438a:	687b      	ldr	r3, [r7, #4]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	420e0020 	.word	0x420e0020
 800439c:	40007000 	.word	0x40007000

080043a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e267      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d075      	beq.n	80044aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043be:	4b88      	ldr	r3, [pc, #544]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d00c      	beq.n	80043e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ca:	4b85      	ldr	r3, [pc, #532]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d112      	bne.n	80043fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d6:	4b82      	ldr	r3, [pc, #520]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e2:	d10b      	bne.n	80043fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e4:	4b7e      	ldr	r3, [pc, #504]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d05b      	beq.n	80044a8 <HAL_RCC_OscConfig+0x108>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d157      	bne.n	80044a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e242      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004404:	d106      	bne.n	8004414 <HAL_RCC_OscConfig+0x74>
 8004406:	4b76      	ldr	r3, [pc, #472]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a75      	ldr	r2, [pc, #468]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e01d      	b.n	8004450 <HAL_RCC_OscConfig+0xb0>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0x98>
 800441e:	4b70      	ldr	r3, [pc, #448]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a6f      	ldr	r2, [pc, #444]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 8004424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b6d      	ldr	r3, [pc, #436]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a6c      	ldr	r2, [pc, #432]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e00b      	b.n	8004450 <HAL_RCC_OscConfig+0xb0>
 8004438:	4b69      	ldr	r3, [pc, #420]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a68      	ldr	r2, [pc, #416]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 800443e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b66      	ldr	r3, [pc, #408]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a65      	ldr	r2, [pc, #404]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 800444a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fe fc5e 	bl	8002d18 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004460:	f7fe fc5a 	bl	8002d18 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e207      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	4b5b      	ldr	r3, [pc, #364]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0xc0>
 800447e:	e014      	b.n	80044aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fe fc4a 	bl	8002d18 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004488:	f7fe fc46 	bl	8002d18 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	; 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1f3      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449a:	4b51      	ldr	r3, [pc, #324]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0xe8>
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d063      	beq.n	800457e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044b6:	4b4a      	ldr	r3, [pc, #296]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c2:	4b47      	ldr	r3, [pc, #284]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d11c      	bne.n	8004508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ce:	4b44      	ldr	r3, [pc, #272]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d116      	bne.n	8004508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044da:	4b41      	ldr	r3, [pc, #260]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_RCC_OscConfig+0x152>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d001      	beq.n	80044f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e1c7      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f2:	4b3b      	ldr	r3, [pc, #236]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4937      	ldr	r1, [pc, #220]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	e03a      	b.n	800457e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d020      	beq.n	8004552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004510:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004516:	f7fe fbff 	bl	8002d18 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451e:	f7fe fbfb 	bl	8002d18 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e1a8      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004530:	4b2b      	ldr	r3, [pc, #172]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453c:	4b28      	ldr	r3, [pc, #160]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4925      	ldr	r1, [pc, #148]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 800454c:	4313      	orrs	r3, r2
 800454e:	600b      	str	r3, [r1, #0]
 8004550:	e015      	b.n	800457e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004552:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <HAL_RCC_OscConfig+0x244>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fe fbde 	bl	8002d18 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004560:	f7fe fbda 	bl	8002d18 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e187      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004572:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d036      	beq.n	80045f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d016      	beq.n	80045c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <HAL_RCC_OscConfig+0x248>)
 8004594:	2201      	movs	r2, #1
 8004596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7fe fbbe 	bl	8002d18 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a0:	f7fe fbba 	bl	8002d18 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e167      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b2:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <HAL_RCC_OscConfig+0x240>)
 80045b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x200>
 80045be:	e01b      	b.n	80045f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_OscConfig+0x248>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c6:	f7fe fba7 	bl	8002d18 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045cc:	e00e      	b.n	80045ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ce:	f7fe fba3 	bl	8002d18 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d907      	bls.n	80045ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e150      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
 80045e0:	40023800 	.word	0x40023800
 80045e4:	42470000 	.word	0x42470000
 80045e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ec:	4b88      	ldr	r3, [pc, #544]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 80045ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ea      	bne.n	80045ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8097 	beq.w	8004734 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004606:	2300      	movs	r3, #0
 8004608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800460a:	4b81      	ldr	r3, [pc, #516]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	4b7d      	ldr	r3, [pc, #500]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	4a7c      	ldr	r2, [pc, #496]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 8004620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004624:	6413      	str	r3, [r2, #64]	; 0x40
 8004626:	4b7a      	ldr	r3, [pc, #488]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004632:	2301      	movs	r3, #1
 8004634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004636:	4b77      	ldr	r3, [pc, #476]	; (8004814 <HAL_RCC_OscConfig+0x474>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d118      	bne.n	8004674 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004642:	4b74      	ldr	r3, [pc, #464]	; (8004814 <HAL_RCC_OscConfig+0x474>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a73      	ldr	r2, [pc, #460]	; (8004814 <HAL_RCC_OscConfig+0x474>)
 8004648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800464e:	f7fe fb63 	bl	8002d18 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004656:	f7fe fb5f 	bl	8002d18 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e10c      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004668:	4b6a      	ldr	r3, [pc, #424]	; (8004814 <HAL_RCC_OscConfig+0x474>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d106      	bne.n	800468a <HAL_RCC_OscConfig+0x2ea>
 800467c:	4b64      	ldr	r3, [pc, #400]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	4a63      	ldr	r2, [pc, #396]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6713      	str	r3, [r2, #112]	; 0x70
 8004688:	e01c      	b.n	80046c4 <HAL_RCC_OscConfig+0x324>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b05      	cmp	r3, #5
 8004690:	d10c      	bne.n	80046ac <HAL_RCC_OscConfig+0x30c>
 8004692:	4b5f      	ldr	r3, [pc, #380]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4a5e      	ldr	r2, [pc, #376]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 8004698:	f043 0304 	orr.w	r3, r3, #4
 800469c:	6713      	str	r3, [r2, #112]	; 0x70
 800469e:	4b5c      	ldr	r3, [pc, #368]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	4a5b      	ldr	r2, [pc, #364]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	6713      	str	r3, [r2, #112]	; 0x70
 80046aa:	e00b      	b.n	80046c4 <HAL_RCC_OscConfig+0x324>
 80046ac:	4b58      	ldr	r3, [pc, #352]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4a57      	ldr	r2, [pc, #348]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
 80046b8:	4b55      	ldr	r3, [pc, #340]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	4a54      	ldr	r2, [pc, #336]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 80046be:	f023 0304 	bic.w	r3, r3, #4
 80046c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d015      	beq.n	80046f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fe fb24 	bl	8002d18 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fe fb20 	bl	8002d18 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0cb      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ea:	4b49      	ldr	r3, [pc, #292]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0ee      	beq.n	80046d4 <HAL_RCC_OscConfig+0x334>
 80046f6:	e014      	b.n	8004722 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f8:	f7fe fb0e 	bl	8002d18 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004700:	f7fe fb0a 	bl	8002d18 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	; 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e0b5      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004716:	4b3e      	ldr	r3, [pc, #248]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1ee      	bne.n	8004700 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d105      	bne.n	8004734 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004728:	4b39      	ldr	r3, [pc, #228]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	4a38      	ldr	r2, [pc, #224]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 800472e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004732:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80a1 	beq.w	8004880 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800473e:	4b34      	ldr	r3, [pc, #208]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
 8004746:	2b08      	cmp	r3, #8
 8004748:	d05c      	beq.n	8004804 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d141      	bne.n	80047d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004752:	4b31      	ldr	r3, [pc, #196]	; (8004818 <HAL_RCC_OscConfig+0x478>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fe fade 	bl	8002d18 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004760:	f7fe fada 	bl	8002d18 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e087      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004772:	4b27      	ldr	r3, [pc, #156]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	019b      	lsls	r3, r3, #6
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	3b01      	subs	r3, #1
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	491b      	ldr	r1, [pc, #108]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a8:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_RCC_OscConfig+0x478>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fe fab3 	bl	8002d18 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fe faaf 	bl	8002d18 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e05c      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x416>
 80047d4:	e054      	b.n	8004880 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_RCC_OscConfig+0x478>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047dc:	f7fe fa9c 	bl	8002d18 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e4:	f7fe fa98 	bl	8002d18 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e045      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_RCC_OscConfig+0x470>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x444>
 8004802:	e03d      	b.n	8004880 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e038      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
 8004810:	40023800 	.word	0x40023800
 8004814:	40007000 	.word	0x40007000
 8004818:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800481c:	4b1b      	ldr	r3, [pc, #108]	; (800488c <HAL_RCC_OscConfig+0x4ec>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d028      	beq.n	800487c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d121      	bne.n	800487c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	429a      	cmp	r2, r3
 8004844:	d11a      	bne.n	800487c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800484c:	4013      	ands	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004852:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004854:	4293      	cmp	r3, r2
 8004856:	d111      	bne.n	800487c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	3b01      	subs	r3, #1
 8004866:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d107      	bne.n	800487c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800

08004890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0cc      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a4:	4b68      	ldr	r3, [pc, #416]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d90c      	bls.n	80048cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b65      	ldr	r3, [pc, #404]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	4b63      	ldr	r3, [pc, #396]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0b8      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d020      	beq.n	800491a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e4:	4b59      	ldr	r3, [pc, #356]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4a58      	ldr	r2, [pc, #352]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048fc:	4b53      	ldr	r3, [pc, #332]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	4a52      	ldr	r2, [pc, #328]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004908:	4b50      	ldr	r3, [pc, #320]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	494d      	ldr	r1, [pc, #308]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d044      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d107      	bne.n	800493e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d119      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e07f      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d003      	beq.n	800494e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494a:	2b03      	cmp	r3, #3
 800494c:	d107      	bne.n	800495e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494e:	4b3f      	ldr	r3, [pc, #252]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e06f      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495e:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e067      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496e:	4b37      	ldr	r3, [pc, #220]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f023 0203 	bic.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	4934      	ldr	r1, [pc, #208]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	4313      	orrs	r3, r2
 800497e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004980:	f7fe f9ca 	bl	8002d18 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	e00a      	b.n	800499e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004988:	f7fe f9c6 	bl	8002d18 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	; 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e04f      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	4b2b      	ldr	r3, [pc, #172]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 020c 	and.w	r2, r3, #12
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d1eb      	bne.n	8004988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b0:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d20c      	bcs.n	80049d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049be:	4b22      	ldr	r3, [pc, #136]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c6:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e032      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e4:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4916      	ldr	r1, [pc, #88]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a02:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	490e      	ldr	r1, [pc, #56]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a16:	f000 f821 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	490a      	ldr	r1, [pc, #40]	; (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 8004a28:	5ccb      	ldrb	r3, [r1, r3]
 8004a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2e:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a32:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <HAL_RCC_ClockConfig+0x1c8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe f92a 	bl	8002c90 <HAL_InitTick>

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40023c00 	.word	0x40023c00
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	0800bc5c 	.word	0x0800bc5c
 8004a54:	20000000 	.word	0x20000000
 8004a58:	20000004 	.word	0x20000004

08004a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a60:	b090      	sub	sp, #64	; 0x40
 8004a62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	637b      	str	r3, [r7, #52]	; 0x34
 8004a68:	2300      	movs	r3, #0
 8004a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a74:	4b59      	ldr	r3, [pc, #356]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d00d      	beq.n	8004a9c <HAL_RCC_GetSysClockFreq+0x40>
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	f200 80a1 	bhi.w	8004bc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0x34>
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d003      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a8e:	e09b      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a90:	4b53      	ldr	r3, [pc, #332]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a92:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a94:	e09b      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a96:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a9a:	e098      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a9c:	4b4f      	ldr	r3, [pc, #316]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa6:	4b4d      	ldr	r3, [pc, #308]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d028      	beq.n	8004b04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab2:	4b4a      	ldr	r3, [pc, #296]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	099b      	lsrs	r3, r3, #6
 8004ab8:	2200      	movs	r2, #0
 8004aba:	623b      	str	r3, [r7, #32]
 8004abc:	627a      	str	r2, [r7, #36]	; 0x24
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ac8:	fb03 f201 	mul.w	r2, r3, r1
 8004acc:	2300      	movs	r3, #0
 8004ace:	fb00 f303 	mul.w	r3, r0, r3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	4a43      	ldr	r2, [pc, #268]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ad6:	fba0 1202 	umull	r1, r2, r0, r2
 8004ada:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004adc:	460a      	mov	r2, r1
 8004ade:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae2:	4413      	add	r3, r2
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae8:	2200      	movs	r2, #0
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	61fa      	str	r2, [r7, #28]
 8004aee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004af6:	f7fc f8c7 	bl	8000c88 <__aeabi_uldivmod>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4613      	mov	r3, r2
 8004b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b02:	e053      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b04:	4b35      	ldr	r3, [pc, #212]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	617a      	str	r2, [r7, #20]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b16:	f04f 0b00 	mov.w	fp, #0
 8004b1a:	4652      	mov	r2, sl
 8004b1c:	465b      	mov	r3, fp
 8004b1e:	f04f 0000 	mov.w	r0, #0
 8004b22:	f04f 0100 	mov.w	r1, #0
 8004b26:	0159      	lsls	r1, r3, #5
 8004b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b2c:	0150      	lsls	r0, r2, #5
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	ebb2 080a 	subs.w	r8, r2, sl
 8004b36:	eb63 090b 	sbc.w	r9, r3, fp
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b4e:	ebb2 0408 	subs.w	r4, r2, r8
 8004b52:	eb63 0509 	sbc.w	r5, r3, r9
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	00eb      	lsls	r3, r5, #3
 8004b60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b64:	00e2      	lsls	r2, r4, #3
 8004b66:	4614      	mov	r4, r2
 8004b68:	461d      	mov	r5, r3
 8004b6a:	eb14 030a 	adds.w	r3, r4, sl
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	eb45 030b 	adc.w	r3, r5, fp
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b82:	4629      	mov	r1, r5
 8004b84:	028b      	lsls	r3, r1, #10
 8004b86:	4621      	mov	r1, r4
 8004b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	028a      	lsls	r2, r1, #10
 8004b90:	4610      	mov	r0, r2
 8004b92:	4619      	mov	r1, r3
 8004b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b96:	2200      	movs	r2, #0
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	60fa      	str	r2, [r7, #12]
 8004b9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba0:	f7fc f872 	bl	8000c88 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4613      	mov	r3, r2
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bc6:	e002      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3740      	adds	r7, #64	; 0x40
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bda:	bf00      	nop
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	00f42400 	.word	0x00f42400
 8004be4:	017d7840 	.word	0x017d7840

08004be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000000 	.word	0x20000000

08004c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c04:	f7ff fff0 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	0a9b      	lsrs	r3, r3, #10
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	4903      	ldr	r1, [pc, #12]	; (8004c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40023800 	.word	0x40023800
 8004c24:	0800bc6c 	.word	0x0800bc6c

08004c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c2c:	f7ff ffdc 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	0b5b      	lsrs	r3, r3, #13
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	4903      	ldr	r1, [pc, #12]	; (8004c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c3e:	5ccb      	ldrb	r3, [r1, r3]
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	0800bc6c 	.word	0x0800bc6c

08004c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e041      	b.n	8004ce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fd fe04 	bl	8002884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f000 fd44 	bl	800571c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e041      	b.n	8004d84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f839 	bl	8004d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	f000 fcf5 	bl	800571c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <HAL_TIM_PWM_Start+0x24>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	e022      	b.n	8004e0a <HAL_TIM_PWM_Start+0x6a>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d109      	bne.n	8004dde <HAL_TIM_PWM_Start+0x3e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	bf14      	ite	ne
 8004dd6:	2301      	movne	r3, #1
 8004dd8:	2300      	moveq	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	e015      	b.n	8004e0a <HAL_TIM_PWM_Start+0x6a>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d109      	bne.n	8004df8 <HAL_TIM_PWM_Start+0x58>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	bf14      	ite	ne
 8004df0:	2301      	movne	r3, #1
 8004df2:	2300      	moveq	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	e008      	b.n	8004e0a <HAL_TIM_PWM_Start+0x6a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	bf14      	ite	ne
 8004e04:	2301      	movne	r3, #1
 8004e06:	2300      	moveq	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e07c      	b.n	8004f0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start+0x82>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e20:	e013      	b.n	8004e4a <HAL_TIM_PWM_Start+0xaa>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Start+0x92>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e30:	e00b      	b.n	8004e4a <HAL_TIM_PWM_Start+0xaa>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d104      	bne.n	8004e42 <HAL_TIM_PWM_Start+0xa2>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e40:	e003      	b.n	8004e4a <HAL_TIM_PWM_Start+0xaa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2202      	movs	r2, #2
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	6839      	ldr	r1, [r7, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 ff58 	bl	8005d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a2d      	ldr	r2, [pc, #180]	; (8004f14 <HAL_TIM_PWM_Start+0x174>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <HAL_TIM_PWM_Start+0xcc>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a2c      	ldr	r2, [pc, #176]	; (8004f18 <HAL_TIM_PWM_Start+0x178>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIM_PWM_Start+0xd0>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_TIM_PWM_Start+0xd2>
 8004e70:	2300      	movs	r3, #0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a22      	ldr	r2, [pc, #136]	; (8004f14 <HAL_TIM_PWM_Start+0x174>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d022      	beq.n	8004ed6 <HAL_TIM_PWM_Start+0x136>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e98:	d01d      	beq.n	8004ed6 <HAL_TIM_PWM_Start+0x136>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <HAL_TIM_PWM_Start+0x17c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d018      	beq.n	8004ed6 <HAL_TIM_PWM_Start+0x136>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <HAL_TIM_PWM_Start+0x180>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <HAL_TIM_PWM_Start+0x136>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <HAL_TIM_PWM_Start+0x184>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00e      	beq.n	8004ed6 <HAL_TIM_PWM_Start+0x136>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <HAL_TIM_PWM_Start+0x178>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d009      	beq.n	8004ed6 <HAL_TIM_PWM_Start+0x136>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <HAL_TIM_PWM_Start+0x188>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_TIM_PWM_Start+0x136>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <HAL_TIM_PWM_Start+0x18c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d111      	bne.n	8004efa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b06      	cmp	r3, #6
 8004ee6:	d010      	beq.n	8004f0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef8:	e007      	b.n	8004f0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40010000 	.word	0x40010000
 8004f18:	40010400 	.word	0x40010400
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40000c00 	.word	0x40000c00
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40001800 	.word	0x40001800

08004f30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e097      	b.n	8005074 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7fd fbe9 	bl	8002730 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f74:	f023 0307 	bic.w	r3, r3, #7
 8004f78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	4619      	mov	r1, r3
 8004f84:	4610      	mov	r0, r2
 8004f86:	f000 fbc9 	bl	800571c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb2:	f023 0303 	bic.w	r3, r3, #3
 8004fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004fd0:	f023 030c 	bic.w	r3, r3, #12
 8004fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	4313      	orrs	r3, r2
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	011a      	lsls	r2, r3, #4
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	031b      	lsls	r3, r3, #12
 8005000:	4313      	orrs	r3, r2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	4313      	orrs	r3, r2
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005094:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800509c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d110      	bne.n	80050ce <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d102      	bne.n	80050b8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050b2:	7b7b      	ldrb	r3, [r7, #13]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d001      	beq.n	80050bc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e089      	b.n	80051d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050cc:	e031      	b.n	8005132 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d110      	bne.n	80050f6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050d4:	7bbb      	ldrb	r3, [r7, #14]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d102      	bne.n	80050e0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050da:	7b3b      	ldrb	r3, [r7, #12]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d001      	beq.n	80050e4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e075      	b.n	80051d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f4:	e01d      	b.n	8005132 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d108      	bne.n	800510e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050fc:	7bbb      	ldrb	r3, [r7, #14]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005102:	7b7b      	ldrb	r3, [r7, #13]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d102      	bne.n	800510e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005108:	7b3b      	ldrb	r3, [r7, #12]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d001      	beq.n	8005112 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e05e      	b.n	80051d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b04      	cmp	r3, #4
 800513c:	d010      	beq.n	8005160 <HAL_TIM_Encoder_Start_IT+0xe4>
 800513e:	e01f      	b.n	8005180 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2201      	movs	r2, #1
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fddd 	bl	8005d08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0202 	orr.w	r2, r2, #2
 800515c:	60da      	str	r2, [r3, #12]
      break;
 800515e:	e02e      	b.n	80051be <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2201      	movs	r2, #1
 8005166:	2104      	movs	r1, #4
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fdcd 	bl	8005d08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0204 	orr.w	r2, r2, #4
 800517c:	60da      	str	r2, [r3, #12]
      break;
 800517e:	e01e      	b.n	80051be <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2201      	movs	r2, #1
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fdbd 	bl	8005d08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2201      	movs	r2, #1
 8005194:	2104      	movs	r1, #4
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fdb6 	bl	8005d08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0202 	orr.w	r2, r2, #2
 80051aa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0204 	orr.w	r2, r2, #4
 80051ba:	60da      	str	r2, [r3, #12]
      break;
 80051bc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d020      	beq.n	800523c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01b      	beq.n	800523c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0202 	mvn.w	r2, #2
 800520c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fc fa10 	bl	8001648 <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fa57 	bl	80056de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fa5e 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d020      	beq.n	8005288 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0204 	mvn.w	r2, #4
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fc f9ea 	bl	8001648 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fa31 	bl	80056de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fa38 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d020      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01b      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0208 	mvn.w	r2, #8
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2204      	movs	r2, #4
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fc f9c4 	bl	8001648 <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa0b 	bl	80056de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fa12 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d020      	beq.n	8005320 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01b      	beq.n	8005320 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0210 	mvn.w	r2, #16
 80052f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2208      	movs	r2, #8
 80052f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fc f99e 	bl	8001648 <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f9e5 	bl	80056de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f9ec 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00c      	beq.n	8005344 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0201 	mvn.w	r2, #1
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f9c3 	bl	80056ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00c      	beq.n	8005368 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fdce 	bl	8005f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00c      	beq.n	800538c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f9bd 	bl	8005706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0220 	mvn.w	r2, #32
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fda0 	bl	8005ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0ae      	b.n	8005534 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b0c      	cmp	r3, #12
 80053e2:	f200 809f 	bhi.w	8005524 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053e6:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005421 	.word	0x08005421
 80053f0:	08005525 	.word	0x08005525
 80053f4:	08005525 	.word	0x08005525
 80053f8:	08005525 	.word	0x08005525
 80053fc:	08005461 	.word	0x08005461
 8005400:	08005525 	.word	0x08005525
 8005404:	08005525 	.word	0x08005525
 8005408:	08005525 	.word	0x08005525
 800540c:	080054a3 	.word	0x080054a3
 8005410:	08005525 	.word	0x08005525
 8005414:	08005525 	.word	0x08005525
 8005418:	08005525 	.word	0x08005525
 800541c:	080054e3 	.word	0x080054e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fa24 	bl	8005874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0208 	orr.w	r2, r2, #8
 800543a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0204 	bic.w	r2, r2, #4
 800544a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6999      	ldr	r1, [r3, #24]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	619a      	str	r2, [r3, #24]
      break;
 800545e:	e064      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fa74 	bl	8005954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800547a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6999      	ldr	r1, [r3, #24]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	021a      	lsls	r2, r3, #8
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	619a      	str	r2, [r3, #24]
      break;
 80054a0:	e043      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fac9 	bl	8005a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0208 	orr.w	r2, r2, #8
 80054bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0204 	bic.w	r2, r2, #4
 80054cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69d9      	ldr	r1, [r3, #28]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	61da      	str	r2, [r3, #28]
      break;
 80054e0:	e023      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fb1d 	bl	8005b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69d9      	ldr	r1, [r3, #28]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	021a      	lsls	r2, r3, #8
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	61da      	str	r2, [r3, #28]
      break;
 8005522:	e002      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	75fb      	strb	r3, [r7, #23]
      break;
 8005528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005532:	7dfb      	ldrb	r3, [r7, #23]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIM_ConfigClockSource+0x1c>
 8005554:	2302      	movs	r3, #2
 8005556:	e0b4      	b.n	80056c2 <HAL_TIM_ConfigClockSource+0x186>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005590:	d03e      	beq.n	8005610 <HAL_TIM_ConfigClockSource+0xd4>
 8005592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005596:	f200 8087 	bhi.w	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	f000 8086 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x172>
 80055a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a6:	d87f      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055a8:	2b70      	cmp	r3, #112	; 0x70
 80055aa:	d01a      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0xa6>
 80055ac:	2b70      	cmp	r3, #112	; 0x70
 80055ae:	d87b      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b60      	cmp	r3, #96	; 0x60
 80055b2:	d050      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x11a>
 80055b4:	2b60      	cmp	r3, #96	; 0x60
 80055b6:	d877      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b50      	cmp	r3, #80	; 0x50
 80055ba:	d03c      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0xfa>
 80055bc:	2b50      	cmp	r3, #80	; 0x50
 80055be:	d873      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d058      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x13a>
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	d86f      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b30      	cmp	r3, #48	; 0x30
 80055ca:	d064      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055cc:	2b30      	cmp	r3, #48	; 0x30
 80055ce:	d86b      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d060      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d867      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d05c      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d05a      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055e0:	e062      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055f2:	f000 fb69 	bl	8005cc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	609a      	str	r2, [r3, #8]
      break;
 800560e:	e04f      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005620:	f000 fb52 	bl	8005cc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005632:	609a      	str	r2, [r3, #8]
      break;
 8005634:	e03c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005642:	461a      	mov	r2, r3
 8005644:	f000 fac6 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2150      	movs	r1, #80	; 0x50
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fb1f 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 8005654:	e02c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005662:	461a      	mov	r2, r3
 8005664:	f000 fae5 	bl	8005c32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2160      	movs	r1, #96	; 0x60
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fb0f 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 8005674:	e01c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005682:	461a      	mov	r2, r3
 8005684:	f000 faa6 	bl	8005bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2140      	movs	r1, #64	; 0x40
 800568e:	4618      	mov	r0, r3
 8005690:	f000 faff 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 8005694:	e00c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f000 faf6 	bl	8005c92 <TIM_ITRx_SetConfig>
      break;
 80056a6:	e003      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
      break;
 80056ac:	e000      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a46      	ldr	r2, [pc, #280]	; (8005848 <TIM_Base_SetConfig+0x12c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573a:	d00f      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a43      	ldr	r2, [pc, #268]	; (800584c <TIM_Base_SetConfig+0x130>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00b      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a42      	ldr	r2, [pc, #264]	; (8005850 <TIM_Base_SetConfig+0x134>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a41      	ldr	r2, [pc, #260]	; (8005854 <TIM_Base_SetConfig+0x138>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a40      	ldr	r2, [pc, #256]	; (8005858 <TIM_Base_SetConfig+0x13c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d108      	bne.n	800576e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a35      	ldr	r2, [pc, #212]	; (8005848 <TIM_Base_SetConfig+0x12c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d02b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577c:	d027      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a32      	ldr	r2, [pc, #200]	; (800584c <TIM_Base_SetConfig+0x130>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d023      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a31      	ldr	r2, [pc, #196]	; (8005850 <TIM_Base_SetConfig+0x134>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01f      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a30      	ldr	r2, [pc, #192]	; (8005854 <TIM_Base_SetConfig+0x138>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2f      	ldr	r2, [pc, #188]	; (8005858 <TIM_Base_SetConfig+0x13c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d017      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2e      	ldr	r2, [pc, #184]	; (800585c <TIM_Base_SetConfig+0x140>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2d      	ldr	r2, [pc, #180]	; (8005860 <TIM_Base_SetConfig+0x144>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00f      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a2c      	ldr	r2, [pc, #176]	; (8005864 <TIM_Base_SetConfig+0x148>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a2b      	ldr	r2, [pc, #172]	; (8005868 <TIM_Base_SetConfig+0x14c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d007      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2a      	ldr	r2, [pc, #168]	; (800586c <TIM_Base_SetConfig+0x150>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a29      	ldr	r2, [pc, #164]	; (8005870 <TIM_Base_SetConfig+0x154>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d108      	bne.n	80057e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a10      	ldr	r2, [pc, #64]	; (8005848 <TIM_Base_SetConfig+0x12c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0xf8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a12      	ldr	r2, [pc, #72]	; (8005858 <TIM_Base_SetConfig+0x13c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d103      	bne.n	800581c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b01      	cmp	r3, #1
 800582c:	d105      	bne.n	800583a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f023 0201 	bic.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	611a      	str	r2, [r3, #16]
  }
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40010400 	.word	0x40010400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800
 8005868:	40001800 	.word	0x40001800
 800586c:	40001c00 	.word	0x40001c00
 8005870:	40002000 	.word	0x40002000

08005874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f023 0201 	bic.w	r2, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 0302 	bic.w	r3, r3, #2
 80058bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a20      	ldr	r2, [pc, #128]	; (800594c <TIM_OC1_SetConfig+0xd8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d003      	beq.n	80058d8 <TIM_OC1_SetConfig+0x64>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1f      	ldr	r2, [pc, #124]	; (8005950 <TIM_OC1_SetConfig+0xdc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d10c      	bne.n	80058f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0308 	bic.w	r3, r3, #8
 80058de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <TIM_OC1_SetConfig+0xd8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_OC1_SetConfig+0x8e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <TIM_OC1_SetConfig+0xdc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d111      	bne.n	8005926 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40010000 	.word	0x40010000
 8005950:	40010400 	.word	0x40010400

08005954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f023 0210 	bic.w	r2, r3, #16
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC2_SetConfig+0x68>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10d      	bne.n	80059d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC2_SetConfig+0x94>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d113      	bne.n	8005a10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <TIM_OC3_SetConfig+0xe0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_OC3_SetConfig+0x66>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <TIM_OC3_SetConfig+0xe4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10d      	bne.n	8005ac2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <TIM_OC3_SetConfig+0xe0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC3_SetConfig+0x92>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <TIM_OC3_SetConfig+0xe4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d113      	bne.n	8005afa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010400 	.word	0x40010400

08005b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	031b      	lsls	r3, r3, #12
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <TIM_OC4_SetConfig+0xa4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC4_SetConfig+0x68>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a11      	ldr	r2, [pc, #68]	; (8005bd0 <TIM_OC4_SetConfig+0xa8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d109      	bne.n	8005ba4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	019b      	lsls	r3, r3, #6
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400

08005bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f023 030a 	bic.w	r3, r3, #10
 8005c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f023 0210 	bic.w	r2, r3, #16
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	031b      	lsls	r3, r3, #12
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f043 0307 	orr.w	r3, r3, #7
 8005cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	609a      	str	r2, [r3, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1a      	ldr	r2, [r3, #32]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e05a      	b.n	8005e22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a21      	ldr	r2, [pc, #132]	; (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d022      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db8:	d01d      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d018      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1b      	ldr	r2, [pc, #108]	; (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1a      	ldr	r2, [pc, #104]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00e      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10c      	bne.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40000400 	.word	0x40000400
 8005e38:	40000800 	.word	0x40000800
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40010400 	.word	0x40010400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40001800 	.word	0x40001800

08005e4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e03d      	b.n	8005ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e042      	b.n	8005fb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fc fcfc 	bl	800293c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2224      	movs	r2, #36	; 0x24
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f82b 	bl	8005fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fbc:	b0c0      	sub	sp, #256	; 0x100
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd4:	68d9      	ldr	r1, [r3, #12]
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	ea40 0301 	orr.w	r3, r0, r1
 8005fe0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006010:	f021 010c 	bic.w	r1, r1, #12
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800601e:	430b      	orrs	r3, r1
 8006020:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006032:	6999      	ldr	r1, [r3, #24]
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	ea40 0301 	orr.w	r3, r0, r1
 800603e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b8f      	ldr	r3, [pc, #572]	; (8006284 <UART_SetConfig+0x2cc>)
 8006048:	429a      	cmp	r2, r3
 800604a:	d005      	beq.n	8006058 <UART_SetConfig+0xa0>
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b8d      	ldr	r3, [pc, #564]	; (8006288 <UART_SetConfig+0x2d0>)
 8006054:	429a      	cmp	r2, r3
 8006056:	d104      	bne.n	8006062 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006058:	f7fe fde6 	bl	8004c28 <HAL_RCC_GetPCLK2Freq>
 800605c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006060:	e003      	b.n	800606a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006062:	f7fe fdcd 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 8006066:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006074:	f040 810c 	bne.w	8006290 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800607c:	2200      	movs	r2, #0
 800607e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006082:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006086:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800608a:	4622      	mov	r2, r4
 800608c:	462b      	mov	r3, r5
 800608e:	1891      	adds	r1, r2, r2
 8006090:	65b9      	str	r1, [r7, #88]	; 0x58
 8006092:	415b      	adcs	r3, r3
 8006094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006096:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800609a:	4621      	mov	r1, r4
 800609c:	eb12 0801 	adds.w	r8, r2, r1
 80060a0:	4629      	mov	r1, r5
 80060a2:	eb43 0901 	adc.w	r9, r3, r1
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ba:	4690      	mov	r8, r2
 80060bc:	4699      	mov	r9, r3
 80060be:	4623      	mov	r3, r4
 80060c0:	eb18 0303 	adds.w	r3, r8, r3
 80060c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060c8:	462b      	mov	r3, r5
 80060ca:	eb49 0303 	adc.w	r3, r9, r3
 80060ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060e6:	460b      	mov	r3, r1
 80060e8:	18db      	adds	r3, r3, r3
 80060ea:	653b      	str	r3, [r7, #80]	; 0x50
 80060ec:	4613      	mov	r3, r2
 80060ee:	eb42 0303 	adc.w	r3, r2, r3
 80060f2:	657b      	str	r3, [r7, #84]	; 0x54
 80060f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060fc:	f7fa fdc4 	bl	8000c88 <__aeabi_uldivmod>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4b61      	ldr	r3, [pc, #388]	; (800628c <UART_SetConfig+0x2d4>)
 8006106:	fba3 2302 	umull	r2, r3, r3, r2
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	011c      	lsls	r4, r3, #4
 800610e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006112:	2200      	movs	r2, #0
 8006114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006118:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800611c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006120:	4642      	mov	r2, r8
 8006122:	464b      	mov	r3, r9
 8006124:	1891      	adds	r1, r2, r2
 8006126:	64b9      	str	r1, [r7, #72]	; 0x48
 8006128:	415b      	adcs	r3, r3
 800612a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800612c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006130:	4641      	mov	r1, r8
 8006132:	eb12 0a01 	adds.w	sl, r2, r1
 8006136:	4649      	mov	r1, r9
 8006138:	eb43 0b01 	adc.w	fp, r3, r1
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006148:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800614c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006150:	4692      	mov	sl, r2
 8006152:	469b      	mov	fp, r3
 8006154:	4643      	mov	r3, r8
 8006156:	eb1a 0303 	adds.w	r3, sl, r3
 800615a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800615e:	464b      	mov	r3, r9
 8006160:	eb4b 0303 	adc.w	r3, fp, r3
 8006164:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006174:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006178:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800617c:	460b      	mov	r3, r1
 800617e:	18db      	adds	r3, r3, r3
 8006180:	643b      	str	r3, [r7, #64]	; 0x40
 8006182:	4613      	mov	r3, r2
 8006184:	eb42 0303 	adc.w	r3, r2, r3
 8006188:	647b      	str	r3, [r7, #68]	; 0x44
 800618a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800618e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006192:	f7fa fd79 	bl	8000c88 <__aeabi_uldivmod>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4611      	mov	r1, r2
 800619c:	4b3b      	ldr	r3, [pc, #236]	; (800628c <UART_SetConfig+0x2d4>)
 800619e:	fba3 2301 	umull	r2, r3, r3, r1
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	2264      	movs	r2, #100	; 0x64
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	1acb      	subs	r3, r1, r3
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061b2:	4b36      	ldr	r3, [pc, #216]	; (800628c <UART_SetConfig+0x2d4>)
 80061b4:	fba3 2302 	umull	r2, r3, r3, r2
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061c0:	441c      	add	r4, r3
 80061c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061d4:	4642      	mov	r2, r8
 80061d6:	464b      	mov	r3, r9
 80061d8:	1891      	adds	r1, r2, r2
 80061da:	63b9      	str	r1, [r7, #56]	; 0x38
 80061dc:	415b      	adcs	r3, r3
 80061de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061e4:	4641      	mov	r1, r8
 80061e6:	1851      	adds	r1, r2, r1
 80061e8:	6339      	str	r1, [r7, #48]	; 0x30
 80061ea:	4649      	mov	r1, r9
 80061ec:	414b      	adcs	r3, r1
 80061ee:	637b      	str	r3, [r7, #52]	; 0x34
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	f04f 0300 	mov.w	r3, #0
 80061f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061fc:	4659      	mov	r1, fp
 80061fe:	00cb      	lsls	r3, r1, #3
 8006200:	4651      	mov	r1, sl
 8006202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006206:	4651      	mov	r1, sl
 8006208:	00ca      	lsls	r2, r1, #3
 800620a:	4610      	mov	r0, r2
 800620c:	4619      	mov	r1, r3
 800620e:	4603      	mov	r3, r0
 8006210:	4642      	mov	r2, r8
 8006212:	189b      	adds	r3, r3, r2
 8006214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006218:	464b      	mov	r3, r9
 800621a:	460a      	mov	r2, r1
 800621c:	eb42 0303 	adc.w	r3, r2, r3
 8006220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006230:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006234:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006238:	460b      	mov	r3, r1
 800623a:	18db      	adds	r3, r3, r3
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
 800623e:	4613      	mov	r3, r2
 8006240:	eb42 0303 	adc.w	r3, r2, r3
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006246:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800624a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800624e:	f7fa fd1b 	bl	8000c88 <__aeabi_uldivmod>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4b0d      	ldr	r3, [pc, #52]	; (800628c <UART_SetConfig+0x2d4>)
 8006258:	fba3 1302 	umull	r1, r3, r3, r2
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	2164      	movs	r1, #100	; 0x64
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	3332      	adds	r3, #50	; 0x32
 800626a:	4a08      	ldr	r2, [pc, #32]	; (800628c <UART_SetConfig+0x2d4>)
 800626c:	fba2 2303 	umull	r2, r3, r2, r3
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	f003 0207 	and.w	r2, r3, #7
 8006276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4422      	add	r2, r4
 800627e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006280:	e106      	b.n	8006490 <UART_SetConfig+0x4d8>
 8006282:	bf00      	nop
 8006284:	40011000 	.word	0x40011000
 8006288:	40011400 	.word	0x40011400
 800628c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006294:	2200      	movs	r2, #0
 8006296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800629a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800629e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062a2:	4642      	mov	r2, r8
 80062a4:	464b      	mov	r3, r9
 80062a6:	1891      	adds	r1, r2, r2
 80062a8:	6239      	str	r1, [r7, #32]
 80062aa:	415b      	adcs	r3, r3
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
 80062ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062b2:	4641      	mov	r1, r8
 80062b4:	1854      	adds	r4, r2, r1
 80062b6:	4649      	mov	r1, r9
 80062b8:	eb43 0501 	adc.w	r5, r3, r1
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	00eb      	lsls	r3, r5, #3
 80062c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ca:	00e2      	lsls	r2, r4, #3
 80062cc:	4614      	mov	r4, r2
 80062ce:	461d      	mov	r5, r3
 80062d0:	4643      	mov	r3, r8
 80062d2:	18e3      	adds	r3, r4, r3
 80062d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062d8:	464b      	mov	r3, r9
 80062da:	eb45 0303 	adc.w	r3, r5, r3
 80062de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062fe:	4629      	mov	r1, r5
 8006300:	008b      	lsls	r3, r1, #2
 8006302:	4621      	mov	r1, r4
 8006304:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006308:	4621      	mov	r1, r4
 800630a:	008a      	lsls	r2, r1, #2
 800630c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006310:	f7fa fcba 	bl	8000c88 <__aeabi_uldivmod>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4b60      	ldr	r3, [pc, #384]	; (800649c <UART_SetConfig+0x4e4>)
 800631a:	fba3 2302 	umull	r2, r3, r3, r2
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	011c      	lsls	r4, r3, #4
 8006322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006326:	2200      	movs	r2, #0
 8006328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800632c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006330:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006334:	4642      	mov	r2, r8
 8006336:	464b      	mov	r3, r9
 8006338:	1891      	adds	r1, r2, r2
 800633a:	61b9      	str	r1, [r7, #24]
 800633c:	415b      	adcs	r3, r3
 800633e:	61fb      	str	r3, [r7, #28]
 8006340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006344:	4641      	mov	r1, r8
 8006346:	1851      	adds	r1, r2, r1
 8006348:	6139      	str	r1, [r7, #16]
 800634a:	4649      	mov	r1, r9
 800634c:	414b      	adcs	r3, r1
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800635c:	4659      	mov	r1, fp
 800635e:	00cb      	lsls	r3, r1, #3
 8006360:	4651      	mov	r1, sl
 8006362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006366:	4651      	mov	r1, sl
 8006368:	00ca      	lsls	r2, r1, #3
 800636a:	4610      	mov	r0, r2
 800636c:	4619      	mov	r1, r3
 800636e:	4603      	mov	r3, r0
 8006370:	4642      	mov	r2, r8
 8006372:	189b      	adds	r3, r3, r2
 8006374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006378:	464b      	mov	r3, r9
 800637a:	460a      	mov	r2, r1
 800637c:	eb42 0303 	adc.w	r3, r2, r3
 8006380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	67bb      	str	r3, [r7, #120]	; 0x78
 800638e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800639c:	4649      	mov	r1, r9
 800639e:	008b      	lsls	r3, r1, #2
 80063a0:	4641      	mov	r1, r8
 80063a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063a6:	4641      	mov	r1, r8
 80063a8:	008a      	lsls	r2, r1, #2
 80063aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063ae:	f7fa fc6b 	bl	8000c88 <__aeabi_uldivmod>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4611      	mov	r1, r2
 80063b8:	4b38      	ldr	r3, [pc, #224]	; (800649c <UART_SetConfig+0x4e4>)
 80063ba:	fba3 2301 	umull	r2, r3, r3, r1
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	2264      	movs	r2, #100	; 0x64
 80063c2:	fb02 f303 	mul.w	r3, r2, r3
 80063c6:	1acb      	subs	r3, r1, r3
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	3332      	adds	r3, #50	; 0x32
 80063cc:	4a33      	ldr	r2, [pc, #204]	; (800649c <UART_SetConfig+0x4e4>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063d8:	441c      	add	r4, r3
 80063da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063de:	2200      	movs	r2, #0
 80063e0:	673b      	str	r3, [r7, #112]	; 0x70
 80063e2:	677a      	str	r2, [r7, #116]	; 0x74
 80063e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063e8:	4642      	mov	r2, r8
 80063ea:	464b      	mov	r3, r9
 80063ec:	1891      	adds	r1, r2, r2
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	415b      	adcs	r3, r3
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063f8:	4641      	mov	r1, r8
 80063fa:	1851      	adds	r1, r2, r1
 80063fc:	6039      	str	r1, [r7, #0]
 80063fe:	4649      	mov	r1, r9
 8006400:	414b      	adcs	r3, r1
 8006402:	607b      	str	r3, [r7, #4]
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006410:	4659      	mov	r1, fp
 8006412:	00cb      	lsls	r3, r1, #3
 8006414:	4651      	mov	r1, sl
 8006416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800641a:	4651      	mov	r1, sl
 800641c:	00ca      	lsls	r2, r1, #3
 800641e:	4610      	mov	r0, r2
 8006420:	4619      	mov	r1, r3
 8006422:	4603      	mov	r3, r0
 8006424:	4642      	mov	r2, r8
 8006426:	189b      	adds	r3, r3, r2
 8006428:	66bb      	str	r3, [r7, #104]	; 0x68
 800642a:	464b      	mov	r3, r9
 800642c:	460a      	mov	r2, r1
 800642e:	eb42 0303 	adc.w	r3, r2, r3
 8006432:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	663b      	str	r3, [r7, #96]	; 0x60
 800643e:	667a      	str	r2, [r7, #100]	; 0x64
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800644c:	4649      	mov	r1, r9
 800644e:	008b      	lsls	r3, r1, #2
 8006450:	4641      	mov	r1, r8
 8006452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006456:	4641      	mov	r1, r8
 8006458:	008a      	lsls	r2, r1, #2
 800645a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800645e:	f7fa fc13 	bl	8000c88 <__aeabi_uldivmod>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4b0d      	ldr	r3, [pc, #52]	; (800649c <UART_SetConfig+0x4e4>)
 8006468:	fba3 1302 	umull	r1, r3, r3, r2
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	2164      	movs	r1, #100	; 0x64
 8006470:	fb01 f303 	mul.w	r3, r1, r3
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	3332      	adds	r3, #50	; 0x32
 800647a:	4a08      	ldr	r2, [pc, #32]	; (800649c <UART_SetConfig+0x4e4>)
 800647c:	fba2 2303 	umull	r2, r3, r2, r3
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	f003 020f 	and.w	r2, r3, #15
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4422      	add	r2, r4
 800648e:	609a      	str	r2, [r3, #8]
}
 8006490:	bf00      	nop
 8006492:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006496:	46bd      	mov	sp, r7
 8006498:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800649c:	51eb851f 	.word	0x51eb851f

080064a0 <__cvt>:
 80064a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a4:	ec55 4b10 	vmov	r4, r5, d0
 80064a8:	2d00      	cmp	r5, #0
 80064aa:	460e      	mov	r6, r1
 80064ac:	4619      	mov	r1, r3
 80064ae:	462b      	mov	r3, r5
 80064b0:	bfbb      	ittet	lt
 80064b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064b6:	461d      	movlt	r5, r3
 80064b8:	2300      	movge	r3, #0
 80064ba:	232d      	movlt	r3, #45	; 0x2d
 80064bc:	700b      	strb	r3, [r1, #0]
 80064be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064c4:	4691      	mov	r9, r2
 80064c6:	f023 0820 	bic.w	r8, r3, #32
 80064ca:	bfbc      	itt	lt
 80064cc:	4622      	movlt	r2, r4
 80064ce:	4614      	movlt	r4, r2
 80064d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064d4:	d005      	beq.n	80064e2 <__cvt+0x42>
 80064d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064da:	d100      	bne.n	80064de <__cvt+0x3e>
 80064dc:	3601      	adds	r6, #1
 80064de:	2102      	movs	r1, #2
 80064e0:	e000      	b.n	80064e4 <__cvt+0x44>
 80064e2:	2103      	movs	r1, #3
 80064e4:	ab03      	add	r3, sp, #12
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	ab02      	add	r3, sp, #8
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	ec45 4b10 	vmov	d0, r4, r5
 80064f0:	4653      	mov	r3, sl
 80064f2:	4632      	mov	r2, r6
 80064f4:	f001 f8b4 	bl	8007660 <_dtoa_r>
 80064f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064fc:	4607      	mov	r7, r0
 80064fe:	d102      	bne.n	8006506 <__cvt+0x66>
 8006500:	f019 0f01 	tst.w	r9, #1
 8006504:	d022      	beq.n	800654c <__cvt+0xac>
 8006506:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800650a:	eb07 0906 	add.w	r9, r7, r6
 800650e:	d110      	bne.n	8006532 <__cvt+0x92>
 8006510:	783b      	ldrb	r3, [r7, #0]
 8006512:	2b30      	cmp	r3, #48	; 0x30
 8006514:	d10a      	bne.n	800652c <__cvt+0x8c>
 8006516:	2200      	movs	r2, #0
 8006518:	2300      	movs	r3, #0
 800651a:	4620      	mov	r0, r4
 800651c:	4629      	mov	r1, r5
 800651e:	f7fa fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006522:	b918      	cbnz	r0, 800652c <__cvt+0x8c>
 8006524:	f1c6 0601 	rsb	r6, r6, #1
 8006528:	f8ca 6000 	str.w	r6, [sl]
 800652c:	f8da 3000 	ldr.w	r3, [sl]
 8006530:	4499      	add	r9, r3
 8006532:	2200      	movs	r2, #0
 8006534:	2300      	movs	r3, #0
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	f7fa fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800653e:	b108      	cbz	r0, 8006544 <__cvt+0xa4>
 8006540:	f8cd 900c 	str.w	r9, [sp, #12]
 8006544:	2230      	movs	r2, #48	; 0x30
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	454b      	cmp	r3, r9
 800654a:	d307      	bcc.n	800655c <__cvt+0xbc>
 800654c:	9b03      	ldr	r3, [sp, #12]
 800654e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006550:	1bdb      	subs	r3, r3, r7
 8006552:	4638      	mov	r0, r7
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	b004      	add	sp, #16
 8006558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800655c:	1c59      	adds	r1, r3, #1
 800655e:	9103      	str	r1, [sp, #12]
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	e7f0      	b.n	8006546 <__cvt+0xa6>

08006564 <__exponent>:
 8006564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006566:	4603      	mov	r3, r0
 8006568:	2900      	cmp	r1, #0
 800656a:	bfb8      	it	lt
 800656c:	4249      	neglt	r1, r1
 800656e:	f803 2b02 	strb.w	r2, [r3], #2
 8006572:	bfb4      	ite	lt
 8006574:	222d      	movlt	r2, #45	; 0x2d
 8006576:	222b      	movge	r2, #43	; 0x2b
 8006578:	2909      	cmp	r1, #9
 800657a:	7042      	strb	r2, [r0, #1]
 800657c:	dd2a      	ble.n	80065d4 <__exponent+0x70>
 800657e:	f10d 0207 	add.w	r2, sp, #7
 8006582:	4617      	mov	r7, r2
 8006584:	260a      	movs	r6, #10
 8006586:	4694      	mov	ip, r2
 8006588:	fb91 f5f6 	sdiv	r5, r1, r6
 800658c:	fb06 1415 	mls	r4, r6, r5, r1
 8006590:	3430      	adds	r4, #48	; 0x30
 8006592:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006596:	460c      	mov	r4, r1
 8006598:	2c63      	cmp	r4, #99	; 0x63
 800659a:	f102 32ff 	add.w	r2, r2, #4294967295
 800659e:	4629      	mov	r1, r5
 80065a0:	dcf1      	bgt.n	8006586 <__exponent+0x22>
 80065a2:	3130      	adds	r1, #48	; 0x30
 80065a4:	f1ac 0402 	sub.w	r4, ip, #2
 80065a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80065ac:	1c41      	adds	r1, r0, #1
 80065ae:	4622      	mov	r2, r4
 80065b0:	42ba      	cmp	r2, r7
 80065b2:	d30a      	bcc.n	80065ca <__exponent+0x66>
 80065b4:	f10d 0209 	add.w	r2, sp, #9
 80065b8:	eba2 020c 	sub.w	r2, r2, ip
 80065bc:	42bc      	cmp	r4, r7
 80065be:	bf88      	it	hi
 80065c0:	2200      	movhi	r2, #0
 80065c2:	4413      	add	r3, r2
 80065c4:	1a18      	subs	r0, r3, r0
 80065c6:	b003      	add	sp, #12
 80065c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80065ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80065d2:	e7ed      	b.n	80065b0 <__exponent+0x4c>
 80065d4:	2330      	movs	r3, #48	; 0x30
 80065d6:	3130      	adds	r1, #48	; 0x30
 80065d8:	7083      	strb	r3, [r0, #2]
 80065da:	70c1      	strb	r1, [r0, #3]
 80065dc:	1d03      	adds	r3, r0, #4
 80065de:	e7f1      	b.n	80065c4 <__exponent+0x60>

080065e0 <_printf_float>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	ed2d 8b02 	vpush	{d8}
 80065e8:	b08d      	sub	sp, #52	; 0x34
 80065ea:	460c      	mov	r4, r1
 80065ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065f0:	4616      	mov	r6, r2
 80065f2:	461f      	mov	r7, r3
 80065f4:	4605      	mov	r5, r0
 80065f6:	f000 ff2b 	bl	8007450 <_localeconv_r>
 80065fa:	f8d0 a000 	ldr.w	sl, [r0]
 80065fe:	4650      	mov	r0, sl
 8006600:	f7f9 fe36 	bl	8000270 <strlen>
 8006604:	2300      	movs	r3, #0
 8006606:	930a      	str	r3, [sp, #40]	; 0x28
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	9305      	str	r3, [sp, #20]
 800660c:	f8d8 3000 	ldr.w	r3, [r8]
 8006610:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006614:	3307      	adds	r3, #7
 8006616:	f023 0307 	bic.w	r3, r3, #7
 800661a:	f103 0208 	add.w	r2, r3, #8
 800661e:	f8c8 2000 	str.w	r2, [r8]
 8006622:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006626:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800662a:	9307      	str	r3, [sp, #28]
 800662c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006630:	ee08 0a10 	vmov	s16, r0
 8006634:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800663c:	4b9e      	ldr	r3, [pc, #632]	; (80068b8 <_printf_float+0x2d8>)
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	f7fa fa73 	bl	8000b2c <__aeabi_dcmpun>
 8006646:	bb88      	cbnz	r0, 80066ac <_printf_float+0xcc>
 8006648:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800664c:	4b9a      	ldr	r3, [pc, #616]	; (80068b8 <_printf_float+0x2d8>)
 800664e:	f04f 32ff 	mov.w	r2, #4294967295
 8006652:	f7fa fa4d 	bl	8000af0 <__aeabi_dcmple>
 8006656:	bb48      	cbnz	r0, 80066ac <_printf_float+0xcc>
 8006658:	2200      	movs	r2, #0
 800665a:	2300      	movs	r3, #0
 800665c:	4640      	mov	r0, r8
 800665e:	4649      	mov	r1, r9
 8006660:	f7fa fa3c 	bl	8000adc <__aeabi_dcmplt>
 8006664:	b110      	cbz	r0, 800666c <_printf_float+0x8c>
 8006666:	232d      	movs	r3, #45	; 0x2d
 8006668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800666c:	4a93      	ldr	r2, [pc, #588]	; (80068bc <_printf_float+0x2dc>)
 800666e:	4b94      	ldr	r3, [pc, #592]	; (80068c0 <_printf_float+0x2e0>)
 8006670:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006674:	bf94      	ite	ls
 8006676:	4690      	movls	r8, r2
 8006678:	4698      	movhi	r8, r3
 800667a:	2303      	movs	r3, #3
 800667c:	6123      	str	r3, [r4, #16]
 800667e:	9b05      	ldr	r3, [sp, #20]
 8006680:	f023 0304 	bic.w	r3, r3, #4
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	f04f 0900 	mov.w	r9, #0
 800668a:	9700      	str	r7, [sp, #0]
 800668c:	4633      	mov	r3, r6
 800668e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006690:	4621      	mov	r1, r4
 8006692:	4628      	mov	r0, r5
 8006694:	f000 f9da 	bl	8006a4c <_printf_common>
 8006698:	3001      	adds	r0, #1
 800669a:	f040 8090 	bne.w	80067be <_printf_float+0x1de>
 800669e:	f04f 30ff 	mov.w	r0, #4294967295
 80066a2:	b00d      	add	sp, #52	; 0x34
 80066a4:	ecbd 8b02 	vpop	{d8}
 80066a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ac:	4642      	mov	r2, r8
 80066ae:	464b      	mov	r3, r9
 80066b0:	4640      	mov	r0, r8
 80066b2:	4649      	mov	r1, r9
 80066b4:	f7fa fa3a 	bl	8000b2c <__aeabi_dcmpun>
 80066b8:	b140      	cbz	r0, 80066cc <_printf_float+0xec>
 80066ba:	464b      	mov	r3, r9
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bfbc      	itt	lt
 80066c0:	232d      	movlt	r3, #45	; 0x2d
 80066c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066c6:	4a7f      	ldr	r2, [pc, #508]	; (80068c4 <_printf_float+0x2e4>)
 80066c8:	4b7f      	ldr	r3, [pc, #508]	; (80068c8 <_printf_float+0x2e8>)
 80066ca:	e7d1      	b.n	8006670 <_printf_float+0x90>
 80066cc:	6863      	ldr	r3, [r4, #4]
 80066ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066d2:	9206      	str	r2, [sp, #24]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	d13f      	bne.n	8006758 <_printf_float+0x178>
 80066d8:	2306      	movs	r3, #6
 80066da:	6063      	str	r3, [r4, #4]
 80066dc:	9b05      	ldr	r3, [sp, #20]
 80066de:	6861      	ldr	r1, [r4, #4]
 80066e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066e4:	2300      	movs	r3, #0
 80066e6:	9303      	str	r3, [sp, #12]
 80066e8:	ab0a      	add	r3, sp, #40	; 0x28
 80066ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066ee:	ab09      	add	r3, sp, #36	; 0x24
 80066f0:	ec49 8b10 	vmov	d0, r8, r9
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	6022      	str	r2, [r4, #0]
 80066f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066fc:	4628      	mov	r0, r5
 80066fe:	f7ff fecf 	bl	80064a0 <__cvt>
 8006702:	9b06      	ldr	r3, [sp, #24]
 8006704:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006706:	2b47      	cmp	r3, #71	; 0x47
 8006708:	4680      	mov	r8, r0
 800670a:	d108      	bne.n	800671e <_printf_float+0x13e>
 800670c:	1cc8      	adds	r0, r1, #3
 800670e:	db02      	blt.n	8006716 <_printf_float+0x136>
 8006710:	6863      	ldr	r3, [r4, #4]
 8006712:	4299      	cmp	r1, r3
 8006714:	dd41      	ble.n	800679a <_printf_float+0x1ba>
 8006716:	f1ab 0302 	sub.w	r3, fp, #2
 800671a:	fa5f fb83 	uxtb.w	fp, r3
 800671e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006722:	d820      	bhi.n	8006766 <_printf_float+0x186>
 8006724:	3901      	subs	r1, #1
 8006726:	465a      	mov	r2, fp
 8006728:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800672c:	9109      	str	r1, [sp, #36]	; 0x24
 800672e:	f7ff ff19 	bl	8006564 <__exponent>
 8006732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006734:	1813      	adds	r3, r2, r0
 8006736:	2a01      	cmp	r2, #1
 8006738:	4681      	mov	r9, r0
 800673a:	6123      	str	r3, [r4, #16]
 800673c:	dc02      	bgt.n	8006744 <_printf_float+0x164>
 800673e:	6822      	ldr	r2, [r4, #0]
 8006740:	07d2      	lsls	r2, r2, #31
 8006742:	d501      	bpl.n	8006748 <_printf_float+0x168>
 8006744:	3301      	adds	r3, #1
 8006746:	6123      	str	r3, [r4, #16]
 8006748:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800674c:	2b00      	cmp	r3, #0
 800674e:	d09c      	beq.n	800668a <_printf_float+0xaa>
 8006750:	232d      	movs	r3, #45	; 0x2d
 8006752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006756:	e798      	b.n	800668a <_printf_float+0xaa>
 8006758:	9a06      	ldr	r2, [sp, #24]
 800675a:	2a47      	cmp	r2, #71	; 0x47
 800675c:	d1be      	bne.n	80066dc <_printf_float+0xfc>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1bc      	bne.n	80066dc <_printf_float+0xfc>
 8006762:	2301      	movs	r3, #1
 8006764:	e7b9      	b.n	80066da <_printf_float+0xfa>
 8006766:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800676a:	d118      	bne.n	800679e <_printf_float+0x1be>
 800676c:	2900      	cmp	r1, #0
 800676e:	6863      	ldr	r3, [r4, #4]
 8006770:	dd0b      	ble.n	800678a <_printf_float+0x1aa>
 8006772:	6121      	str	r1, [r4, #16]
 8006774:	b913      	cbnz	r3, 800677c <_printf_float+0x19c>
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	07d0      	lsls	r0, r2, #31
 800677a:	d502      	bpl.n	8006782 <_printf_float+0x1a2>
 800677c:	3301      	adds	r3, #1
 800677e:	440b      	add	r3, r1
 8006780:	6123      	str	r3, [r4, #16]
 8006782:	65a1      	str	r1, [r4, #88]	; 0x58
 8006784:	f04f 0900 	mov.w	r9, #0
 8006788:	e7de      	b.n	8006748 <_printf_float+0x168>
 800678a:	b913      	cbnz	r3, 8006792 <_printf_float+0x1b2>
 800678c:	6822      	ldr	r2, [r4, #0]
 800678e:	07d2      	lsls	r2, r2, #31
 8006790:	d501      	bpl.n	8006796 <_printf_float+0x1b6>
 8006792:	3302      	adds	r3, #2
 8006794:	e7f4      	b.n	8006780 <_printf_float+0x1a0>
 8006796:	2301      	movs	r3, #1
 8006798:	e7f2      	b.n	8006780 <_printf_float+0x1a0>
 800679a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800679e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a0:	4299      	cmp	r1, r3
 80067a2:	db05      	blt.n	80067b0 <_printf_float+0x1d0>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	6121      	str	r1, [r4, #16]
 80067a8:	07d8      	lsls	r0, r3, #31
 80067aa:	d5ea      	bpl.n	8006782 <_printf_float+0x1a2>
 80067ac:	1c4b      	adds	r3, r1, #1
 80067ae:	e7e7      	b.n	8006780 <_printf_float+0x1a0>
 80067b0:	2900      	cmp	r1, #0
 80067b2:	bfd4      	ite	le
 80067b4:	f1c1 0202 	rsble	r2, r1, #2
 80067b8:	2201      	movgt	r2, #1
 80067ba:	4413      	add	r3, r2
 80067bc:	e7e0      	b.n	8006780 <_printf_float+0x1a0>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	055a      	lsls	r2, r3, #21
 80067c2:	d407      	bmi.n	80067d4 <_printf_float+0x1f4>
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	4642      	mov	r2, r8
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	d12c      	bne.n	800682c <_printf_float+0x24c>
 80067d2:	e764      	b.n	800669e <_printf_float+0xbe>
 80067d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067d8:	f240 80e0 	bls.w	800699c <_printf_float+0x3bc>
 80067dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067e0:	2200      	movs	r2, #0
 80067e2:	2300      	movs	r3, #0
 80067e4:	f7fa f970 	bl	8000ac8 <__aeabi_dcmpeq>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d034      	beq.n	8006856 <_printf_float+0x276>
 80067ec:	4a37      	ldr	r2, [pc, #220]	; (80068cc <_printf_float+0x2ec>)
 80067ee:	2301      	movs	r3, #1
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f af51 	beq.w	800669e <_printf_float+0xbe>
 80067fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006800:	429a      	cmp	r2, r3
 8006802:	db02      	blt.n	800680a <_printf_float+0x22a>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	07d8      	lsls	r0, r3, #31
 8006808:	d510      	bpl.n	800682c <_printf_float+0x24c>
 800680a:	ee18 3a10 	vmov	r3, s16
 800680e:	4652      	mov	r2, sl
 8006810:	4631      	mov	r1, r6
 8006812:	4628      	mov	r0, r5
 8006814:	47b8      	blx	r7
 8006816:	3001      	adds	r0, #1
 8006818:	f43f af41 	beq.w	800669e <_printf_float+0xbe>
 800681c:	f04f 0800 	mov.w	r8, #0
 8006820:	f104 091a 	add.w	r9, r4, #26
 8006824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006826:	3b01      	subs	r3, #1
 8006828:	4543      	cmp	r3, r8
 800682a:	dc09      	bgt.n	8006840 <_printf_float+0x260>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	079b      	lsls	r3, r3, #30
 8006830:	f100 8107 	bmi.w	8006a42 <_printf_float+0x462>
 8006834:	68e0      	ldr	r0, [r4, #12]
 8006836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006838:	4298      	cmp	r0, r3
 800683a:	bfb8      	it	lt
 800683c:	4618      	movlt	r0, r3
 800683e:	e730      	b.n	80066a2 <_printf_float+0xc2>
 8006840:	2301      	movs	r3, #1
 8006842:	464a      	mov	r2, r9
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	47b8      	blx	r7
 800684a:	3001      	adds	r0, #1
 800684c:	f43f af27 	beq.w	800669e <_printf_float+0xbe>
 8006850:	f108 0801 	add.w	r8, r8, #1
 8006854:	e7e6      	b.n	8006824 <_printf_float+0x244>
 8006856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	dc39      	bgt.n	80068d0 <_printf_float+0x2f0>
 800685c:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <_printf_float+0x2ec>)
 800685e:	2301      	movs	r3, #1
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f af19 	beq.w	800669e <_printf_float+0xbe>
 800686c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006870:	4313      	orrs	r3, r2
 8006872:	d102      	bne.n	800687a <_printf_float+0x29a>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	07d9      	lsls	r1, r3, #31
 8006878:	d5d8      	bpl.n	800682c <_printf_float+0x24c>
 800687a:	ee18 3a10 	vmov	r3, s16
 800687e:	4652      	mov	r2, sl
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	f43f af09 	beq.w	800669e <_printf_float+0xbe>
 800688c:	f04f 0900 	mov.w	r9, #0
 8006890:	f104 0a1a 	add.w	sl, r4, #26
 8006894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006896:	425b      	negs	r3, r3
 8006898:	454b      	cmp	r3, r9
 800689a:	dc01      	bgt.n	80068a0 <_printf_float+0x2c0>
 800689c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689e:	e792      	b.n	80067c6 <_printf_float+0x1e6>
 80068a0:	2301      	movs	r3, #1
 80068a2:	4652      	mov	r2, sl
 80068a4:	4631      	mov	r1, r6
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	f43f aef7 	beq.w	800669e <_printf_float+0xbe>
 80068b0:	f109 0901 	add.w	r9, r9, #1
 80068b4:	e7ee      	b.n	8006894 <_printf_float+0x2b4>
 80068b6:	bf00      	nop
 80068b8:	7fefffff 	.word	0x7fefffff
 80068bc:	0800bc74 	.word	0x0800bc74
 80068c0:	0800bc78 	.word	0x0800bc78
 80068c4:	0800bc7c 	.word	0x0800bc7c
 80068c8:	0800bc80 	.word	0x0800bc80
 80068cc:	0800bc84 	.word	0x0800bc84
 80068d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068d4:	429a      	cmp	r2, r3
 80068d6:	bfa8      	it	ge
 80068d8:	461a      	movge	r2, r3
 80068da:	2a00      	cmp	r2, #0
 80068dc:	4691      	mov	r9, r2
 80068de:	dc37      	bgt.n	8006950 <_printf_float+0x370>
 80068e0:	f04f 0b00 	mov.w	fp, #0
 80068e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068e8:	f104 021a 	add.w	r2, r4, #26
 80068ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068ee:	9305      	str	r3, [sp, #20]
 80068f0:	eba3 0309 	sub.w	r3, r3, r9
 80068f4:	455b      	cmp	r3, fp
 80068f6:	dc33      	bgt.n	8006960 <_printf_float+0x380>
 80068f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068fc:	429a      	cmp	r2, r3
 80068fe:	db3b      	blt.n	8006978 <_printf_float+0x398>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	07da      	lsls	r2, r3, #31
 8006904:	d438      	bmi.n	8006978 <_printf_float+0x398>
 8006906:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800690a:	eba2 0903 	sub.w	r9, r2, r3
 800690e:	9b05      	ldr	r3, [sp, #20]
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	4591      	cmp	r9, r2
 8006914:	bfa8      	it	ge
 8006916:	4691      	movge	r9, r2
 8006918:	f1b9 0f00 	cmp.w	r9, #0
 800691c:	dc35      	bgt.n	800698a <_printf_float+0x3aa>
 800691e:	f04f 0800 	mov.w	r8, #0
 8006922:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006926:	f104 0a1a 	add.w	sl, r4, #26
 800692a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	eba3 0309 	sub.w	r3, r3, r9
 8006934:	4543      	cmp	r3, r8
 8006936:	f77f af79 	ble.w	800682c <_printf_float+0x24c>
 800693a:	2301      	movs	r3, #1
 800693c:	4652      	mov	r2, sl
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	f43f aeaa 	beq.w	800669e <_printf_float+0xbe>
 800694a:	f108 0801 	add.w	r8, r8, #1
 800694e:	e7ec      	b.n	800692a <_printf_float+0x34a>
 8006950:	4613      	mov	r3, r2
 8006952:	4631      	mov	r1, r6
 8006954:	4642      	mov	r2, r8
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	d1c0      	bne.n	80068e0 <_printf_float+0x300>
 800695e:	e69e      	b.n	800669e <_printf_float+0xbe>
 8006960:	2301      	movs	r3, #1
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	9205      	str	r2, [sp, #20]
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f ae97 	beq.w	800669e <_printf_float+0xbe>
 8006970:	9a05      	ldr	r2, [sp, #20]
 8006972:	f10b 0b01 	add.w	fp, fp, #1
 8006976:	e7b9      	b.n	80068ec <_printf_float+0x30c>
 8006978:	ee18 3a10 	vmov	r3, s16
 800697c:	4652      	mov	r2, sl
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	47b8      	blx	r7
 8006984:	3001      	adds	r0, #1
 8006986:	d1be      	bne.n	8006906 <_printf_float+0x326>
 8006988:	e689      	b.n	800669e <_printf_float+0xbe>
 800698a:	9a05      	ldr	r2, [sp, #20]
 800698c:	464b      	mov	r3, r9
 800698e:	4442      	add	r2, r8
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	47b8      	blx	r7
 8006996:	3001      	adds	r0, #1
 8006998:	d1c1      	bne.n	800691e <_printf_float+0x33e>
 800699a:	e680      	b.n	800669e <_printf_float+0xbe>
 800699c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800699e:	2a01      	cmp	r2, #1
 80069a0:	dc01      	bgt.n	80069a6 <_printf_float+0x3c6>
 80069a2:	07db      	lsls	r3, r3, #31
 80069a4:	d53a      	bpl.n	8006a1c <_printf_float+0x43c>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4642      	mov	r2, r8
 80069aa:	4631      	mov	r1, r6
 80069ac:	4628      	mov	r0, r5
 80069ae:	47b8      	blx	r7
 80069b0:	3001      	adds	r0, #1
 80069b2:	f43f ae74 	beq.w	800669e <_printf_float+0xbe>
 80069b6:	ee18 3a10 	vmov	r3, s16
 80069ba:	4652      	mov	r2, sl
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	f43f ae6b 	beq.w	800669e <_printf_float+0xbe>
 80069c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069cc:	2200      	movs	r2, #0
 80069ce:	2300      	movs	r3, #0
 80069d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80069d4:	f7fa f878 	bl	8000ac8 <__aeabi_dcmpeq>
 80069d8:	b9d8      	cbnz	r0, 8006a12 <_printf_float+0x432>
 80069da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80069de:	f108 0201 	add.w	r2, r8, #1
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	d10e      	bne.n	8006a0a <_printf_float+0x42a>
 80069ec:	e657      	b.n	800669e <_printf_float+0xbe>
 80069ee:	2301      	movs	r3, #1
 80069f0:	4652      	mov	r2, sl
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	f43f ae50 	beq.w	800669e <_printf_float+0xbe>
 80069fe:	f108 0801 	add.w	r8, r8, #1
 8006a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a04:	3b01      	subs	r3, #1
 8006a06:	4543      	cmp	r3, r8
 8006a08:	dcf1      	bgt.n	80069ee <_printf_float+0x40e>
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a10:	e6da      	b.n	80067c8 <_printf_float+0x1e8>
 8006a12:	f04f 0800 	mov.w	r8, #0
 8006a16:	f104 0a1a 	add.w	sl, r4, #26
 8006a1a:	e7f2      	b.n	8006a02 <_printf_float+0x422>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	4642      	mov	r2, r8
 8006a20:	e7df      	b.n	80069e2 <_printf_float+0x402>
 8006a22:	2301      	movs	r3, #1
 8006a24:	464a      	mov	r2, r9
 8006a26:	4631      	mov	r1, r6
 8006a28:	4628      	mov	r0, r5
 8006a2a:	47b8      	blx	r7
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	f43f ae36 	beq.w	800669e <_printf_float+0xbe>
 8006a32:	f108 0801 	add.w	r8, r8, #1
 8006a36:	68e3      	ldr	r3, [r4, #12]
 8006a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a3a:	1a5b      	subs	r3, r3, r1
 8006a3c:	4543      	cmp	r3, r8
 8006a3e:	dcf0      	bgt.n	8006a22 <_printf_float+0x442>
 8006a40:	e6f8      	b.n	8006834 <_printf_float+0x254>
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	f104 0919 	add.w	r9, r4, #25
 8006a4a:	e7f4      	b.n	8006a36 <_printf_float+0x456>

08006a4c <_printf_common>:
 8006a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a50:	4616      	mov	r6, r2
 8006a52:	4699      	mov	r9, r3
 8006a54:	688a      	ldr	r2, [r1, #8]
 8006a56:	690b      	ldr	r3, [r1, #16]
 8006a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	bfb8      	it	lt
 8006a60:	4613      	movlt	r3, r2
 8006a62:	6033      	str	r3, [r6, #0]
 8006a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a68:	4607      	mov	r7, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	b10a      	cbz	r2, 8006a72 <_printf_common+0x26>
 8006a6e:	3301      	adds	r3, #1
 8006a70:	6033      	str	r3, [r6, #0]
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	0699      	lsls	r1, r3, #26
 8006a76:	bf42      	ittt	mi
 8006a78:	6833      	ldrmi	r3, [r6, #0]
 8006a7a:	3302      	addmi	r3, #2
 8006a7c:	6033      	strmi	r3, [r6, #0]
 8006a7e:	6825      	ldr	r5, [r4, #0]
 8006a80:	f015 0506 	ands.w	r5, r5, #6
 8006a84:	d106      	bne.n	8006a94 <_printf_common+0x48>
 8006a86:	f104 0a19 	add.w	sl, r4, #25
 8006a8a:	68e3      	ldr	r3, [r4, #12]
 8006a8c:	6832      	ldr	r2, [r6, #0]
 8006a8e:	1a9b      	subs	r3, r3, r2
 8006a90:	42ab      	cmp	r3, r5
 8006a92:	dc26      	bgt.n	8006ae2 <_printf_common+0x96>
 8006a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a98:	1e13      	subs	r3, r2, #0
 8006a9a:	6822      	ldr	r2, [r4, #0]
 8006a9c:	bf18      	it	ne
 8006a9e:	2301      	movne	r3, #1
 8006aa0:	0692      	lsls	r2, r2, #26
 8006aa2:	d42b      	bmi.n	8006afc <_printf_common+0xb0>
 8006aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	4638      	mov	r0, r7
 8006aac:	47c0      	blx	r8
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d01e      	beq.n	8006af0 <_printf_common+0xa4>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	6922      	ldr	r2, [r4, #16]
 8006ab6:	f003 0306 	and.w	r3, r3, #6
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	bf02      	ittt	eq
 8006abe:	68e5      	ldreq	r5, [r4, #12]
 8006ac0:	6833      	ldreq	r3, [r6, #0]
 8006ac2:	1aed      	subeq	r5, r5, r3
 8006ac4:	68a3      	ldr	r3, [r4, #8]
 8006ac6:	bf0c      	ite	eq
 8006ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006acc:	2500      	movne	r5, #0
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	bfc4      	itt	gt
 8006ad2:	1a9b      	subgt	r3, r3, r2
 8006ad4:	18ed      	addgt	r5, r5, r3
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	341a      	adds	r4, #26
 8006ada:	42b5      	cmp	r5, r6
 8006adc:	d11a      	bne.n	8006b14 <_printf_common+0xc8>
 8006ade:	2000      	movs	r0, #0
 8006ae0:	e008      	b.n	8006af4 <_printf_common+0xa8>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	4652      	mov	r2, sl
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	4638      	mov	r0, r7
 8006aea:	47c0      	blx	r8
 8006aec:	3001      	adds	r0, #1
 8006aee:	d103      	bne.n	8006af8 <_printf_common+0xac>
 8006af0:	f04f 30ff 	mov.w	r0, #4294967295
 8006af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af8:	3501      	adds	r5, #1
 8006afa:	e7c6      	b.n	8006a8a <_printf_common+0x3e>
 8006afc:	18e1      	adds	r1, r4, r3
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	2030      	movs	r0, #48	; 0x30
 8006b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b06:	4422      	add	r2, r4
 8006b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b10:	3302      	adds	r3, #2
 8006b12:	e7c7      	b.n	8006aa4 <_printf_common+0x58>
 8006b14:	2301      	movs	r3, #1
 8006b16:	4622      	mov	r2, r4
 8006b18:	4649      	mov	r1, r9
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	47c0      	blx	r8
 8006b1e:	3001      	adds	r0, #1
 8006b20:	d0e6      	beq.n	8006af0 <_printf_common+0xa4>
 8006b22:	3601      	adds	r6, #1
 8006b24:	e7d9      	b.n	8006ada <_printf_common+0x8e>
	...

08006b28 <_printf_i>:
 8006b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b2c:	7e0f      	ldrb	r7, [r1, #24]
 8006b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b30:	2f78      	cmp	r7, #120	; 0x78
 8006b32:	4691      	mov	r9, r2
 8006b34:	4680      	mov	r8, r0
 8006b36:	460c      	mov	r4, r1
 8006b38:	469a      	mov	sl, r3
 8006b3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b3e:	d807      	bhi.n	8006b50 <_printf_i+0x28>
 8006b40:	2f62      	cmp	r7, #98	; 0x62
 8006b42:	d80a      	bhi.n	8006b5a <_printf_i+0x32>
 8006b44:	2f00      	cmp	r7, #0
 8006b46:	f000 80d4 	beq.w	8006cf2 <_printf_i+0x1ca>
 8006b4a:	2f58      	cmp	r7, #88	; 0x58
 8006b4c:	f000 80c0 	beq.w	8006cd0 <_printf_i+0x1a8>
 8006b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b58:	e03a      	b.n	8006bd0 <_printf_i+0xa8>
 8006b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b5e:	2b15      	cmp	r3, #21
 8006b60:	d8f6      	bhi.n	8006b50 <_printf_i+0x28>
 8006b62:	a101      	add	r1, pc, #4	; (adr r1, 8006b68 <_printf_i+0x40>)
 8006b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b68:	08006bc1 	.word	0x08006bc1
 8006b6c:	08006bd5 	.word	0x08006bd5
 8006b70:	08006b51 	.word	0x08006b51
 8006b74:	08006b51 	.word	0x08006b51
 8006b78:	08006b51 	.word	0x08006b51
 8006b7c:	08006b51 	.word	0x08006b51
 8006b80:	08006bd5 	.word	0x08006bd5
 8006b84:	08006b51 	.word	0x08006b51
 8006b88:	08006b51 	.word	0x08006b51
 8006b8c:	08006b51 	.word	0x08006b51
 8006b90:	08006b51 	.word	0x08006b51
 8006b94:	08006cd9 	.word	0x08006cd9
 8006b98:	08006c01 	.word	0x08006c01
 8006b9c:	08006c93 	.word	0x08006c93
 8006ba0:	08006b51 	.word	0x08006b51
 8006ba4:	08006b51 	.word	0x08006b51
 8006ba8:	08006cfb 	.word	0x08006cfb
 8006bac:	08006b51 	.word	0x08006b51
 8006bb0:	08006c01 	.word	0x08006c01
 8006bb4:	08006b51 	.word	0x08006b51
 8006bb8:	08006b51 	.word	0x08006b51
 8006bbc:	08006c9b 	.word	0x08006c9b
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	1d1a      	adds	r2, r3, #4
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	602a      	str	r2, [r5, #0]
 8006bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e09f      	b.n	8006d14 <_printf_i+0x1ec>
 8006bd4:	6820      	ldr	r0, [r4, #0]
 8006bd6:	682b      	ldr	r3, [r5, #0]
 8006bd8:	0607      	lsls	r7, r0, #24
 8006bda:	f103 0104 	add.w	r1, r3, #4
 8006bde:	6029      	str	r1, [r5, #0]
 8006be0:	d501      	bpl.n	8006be6 <_printf_i+0xbe>
 8006be2:	681e      	ldr	r6, [r3, #0]
 8006be4:	e003      	b.n	8006bee <_printf_i+0xc6>
 8006be6:	0646      	lsls	r6, r0, #25
 8006be8:	d5fb      	bpl.n	8006be2 <_printf_i+0xba>
 8006bea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	da03      	bge.n	8006bfa <_printf_i+0xd2>
 8006bf2:	232d      	movs	r3, #45	; 0x2d
 8006bf4:	4276      	negs	r6, r6
 8006bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bfa:	485a      	ldr	r0, [pc, #360]	; (8006d64 <_printf_i+0x23c>)
 8006bfc:	230a      	movs	r3, #10
 8006bfe:	e012      	b.n	8006c26 <_printf_i+0xfe>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	6820      	ldr	r0, [r4, #0]
 8006c04:	1d19      	adds	r1, r3, #4
 8006c06:	6029      	str	r1, [r5, #0]
 8006c08:	0605      	lsls	r5, r0, #24
 8006c0a:	d501      	bpl.n	8006c10 <_printf_i+0xe8>
 8006c0c:	681e      	ldr	r6, [r3, #0]
 8006c0e:	e002      	b.n	8006c16 <_printf_i+0xee>
 8006c10:	0641      	lsls	r1, r0, #25
 8006c12:	d5fb      	bpl.n	8006c0c <_printf_i+0xe4>
 8006c14:	881e      	ldrh	r6, [r3, #0]
 8006c16:	4853      	ldr	r0, [pc, #332]	; (8006d64 <_printf_i+0x23c>)
 8006c18:	2f6f      	cmp	r7, #111	; 0x6f
 8006c1a:	bf0c      	ite	eq
 8006c1c:	2308      	moveq	r3, #8
 8006c1e:	230a      	movne	r3, #10
 8006c20:	2100      	movs	r1, #0
 8006c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c26:	6865      	ldr	r5, [r4, #4]
 8006c28:	60a5      	str	r5, [r4, #8]
 8006c2a:	2d00      	cmp	r5, #0
 8006c2c:	bfa2      	ittt	ge
 8006c2e:	6821      	ldrge	r1, [r4, #0]
 8006c30:	f021 0104 	bicge.w	r1, r1, #4
 8006c34:	6021      	strge	r1, [r4, #0]
 8006c36:	b90e      	cbnz	r6, 8006c3c <_printf_i+0x114>
 8006c38:	2d00      	cmp	r5, #0
 8006c3a:	d04b      	beq.n	8006cd4 <_printf_i+0x1ac>
 8006c3c:	4615      	mov	r5, r2
 8006c3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c42:	fb03 6711 	mls	r7, r3, r1, r6
 8006c46:	5dc7      	ldrb	r7, [r0, r7]
 8006c48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c4c:	4637      	mov	r7, r6
 8006c4e:	42bb      	cmp	r3, r7
 8006c50:	460e      	mov	r6, r1
 8006c52:	d9f4      	bls.n	8006c3e <_printf_i+0x116>
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d10b      	bne.n	8006c70 <_printf_i+0x148>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	07de      	lsls	r6, r3, #31
 8006c5c:	d508      	bpl.n	8006c70 <_printf_i+0x148>
 8006c5e:	6923      	ldr	r3, [r4, #16]
 8006c60:	6861      	ldr	r1, [r4, #4]
 8006c62:	4299      	cmp	r1, r3
 8006c64:	bfde      	ittt	le
 8006c66:	2330      	movle	r3, #48	; 0x30
 8006c68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c70:	1b52      	subs	r2, r2, r5
 8006c72:	6122      	str	r2, [r4, #16]
 8006c74:	f8cd a000 	str.w	sl, [sp]
 8006c78:	464b      	mov	r3, r9
 8006c7a:	aa03      	add	r2, sp, #12
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4640      	mov	r0, r8
 8006c80:	f7ff fee4 	bl	8006a4c <_printf_common>
 8006c84:	3001      	adds	r0, #1
 8006c86:	d14a      	bne.n	8006d1e <_printf_i+0x1f6>
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	b004      	add	sp, #16
 8006c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	f043 0320 	orr.w	r3, r3, #32
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	4833      	ldr	r0, [pc, #204]	; (8006d68 <_printf_i+0x240>)
 8006c9c:	2778      	movs	r7, #120	; 0x78
 8006c9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	6829      	ldr	r1, [r5, #0]
 8006ca6:	061f      	lsls	r7, r3, #24
 8006ca8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cac:	d402      	bmi.n	8006cb4 <_printf_i+0x18c>
 8006cae:	065f      	lsls	r7, r3, #25
 8006cb0:	bf48      	it	mi
 8006cb2:	b2b6      	uxthmi	r6, r6
 8006cb4:	07df      	lsls	r7, r3, #31
 8006cb6:	bf48      	it	mi
 8006cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8006cbc:	6029      	str	r1, [r5, #0]
 8006cbe:	bf48      	it	mi
 8006cc0:	6023      	strmi	r3, [r4, #0]
 8006cc2:	b91e      	cbnz	r6, 8006ccc <_printf_i+0x1a4>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	f023 0320 	bic.w	r3, r3, #32
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	2310      	movs	r3, #16
 8006cce:	e7a7      	b.n	8006c20 <_printf_i+0xf8>
 8006cd0:	4824      	ldr	r0, [pc, #144]	; (8006d64 <_printf_i+0x23c>)
 8006cd2:	e7e4      	b.n	8006c9e <_printf_i+0x176>
 8006cd4:	4615      	mov	r5, r2
 8006cd6:	e7bd      	b.n	8006c54 <_printf_i+0x12c>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	6826      	ldr	r6, [r4, #0]
 8006cdc:	6961      	ldr	r1, [r4, #20]
 8006cde:	1d18      	adds	r0, r3, #4
 8006ce0:	6028      	str	r0, [r5, #0]
 8006ce2:	0635      	lsls	r5, r6, #24
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	d501      	bpl.n	8006cec <_printf_i+0x1c4>
 8006ce8:	6019      	str	r1, [r3, #0]
 8006cea:	e002      	b.n	8006cf2 <_printf_i+0x1ca>
 8006cec:	0670      	lsls	r0, r6, #25
 8006cee:	d5fb      	bpl.n	8006ce8 <_printf_i+0x1c0>
 8006cf0:	8019      	strh	r1, [r3, #0]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	4615      	mov	r5, r2
 8006cf8:	e7bc      	b.n	8006c74 <_printf_i+0x14c>
 8006cfa:	682b      	ldr	r3, [r5, #0]
 8006cfc:	1d1a      	adds	r2, r3, #4
 8006cfe:	602a      	str	r2, [r5, #0]
 8006d00:	681d      	ldr	r5, [r3, #0]
 8006d02:	6862      	ldr	r2, [r4, #4]
 8006d04:	2100      	movs	r1, #0
 8006d06:	4628      	mov	r0, r5
 8006d08:	f7f9 fa62 	bl	80001d0 <memchr>
 8006d0c:	b108      	cbz	r0, 8006d12 <_printf_i+0x1ea>
 8006d0e:	1b40      	subs	r0, r0, r5
 8006d10:	6060      	str	r0, [r4, #4]
 8006d12:	6863      	ldr	r3, [r4, #4]
 8006d14:	6123      	str	r3, [r4, #16]
 8006d16:	2300      	movs	r3, #0
 8006d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d1c:	e7aa      	b.n	8006c74 <_printf_i+0x14c>
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	462a      	mov	r2, r5
 8006d22:	4649      	mov	r1, r9
 8006d24:	4640      	mov	r0, r8
 8006d26:	47d0      	blx	sl
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d0ad      	beq.n	8006c88 <_printf_i+0x160>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	079b      	lsls	r3, r3, #30
 8006d30:	d413      	bmi.n	8006d5a <_printf_i+0x232>
 8006d32:	68e0      	ldr	r0, [r4, #12]
 8006d34:	9b03      	ldr	r3, [sp, #12]
 8006d36:	4298      	cmp	r0, r3
 8006d38:	bfb8      	it	lt
 8006d3a:	4618      	movlt	r0, r3
 8006d3c:	e7a6      	b.n	8006c8c <_printf_i+0x164>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4632      	mov	r2, r6
 8006d42:	4649      	mov	r1, r9
 8006d44:	4640      	mov	r0, r8
 8006d46:	47d0      	blx	sl
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d09d      	beq.n	8006c88 <_printf_i+0x160>
 8006d4c:	3501      	adds	r5, #1
 8006d4e:	68e3      	ldr	r3, [r4, #12]
 8006d50:	9903      	ldr	r1, [sp, #12]
 8006d52:	1a5b      	subs	r3, r3, r1
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	dcf2      	bgt.n	8006d3e <_printf_i+0x216>
 8006d58:	e7eb      	b.n	8006d32 <_printf_i+0x20a>
 8006d5a:	2500      	movs	r5, #0
 8006d5c:	f104 0619 	add.w	r6, r4, #25
 8006d60:	e7f5      	b.n	8006d4e <_printf_i+0x226>
 8006d62:	bf00      	nop
 8006d64:	0800bc86 	.word	0x0800bc86
 8006d68:	0800bc97 	.word	0x0800bc97

08006d6c <_scanf_float>:
 8006d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d70:	b087      	sub	sp, #28
 8006d72:	4617      	mov	r7, r2
 8006d74:	9303      	str	r3, [sp, #12]
 8006d76:	688b      	ldr	r3, [r1, #8]
 8006d78:	1e5a      	subs	r2, r3, #1
 8006d7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006d7e:	bf83      	ittte	hi
 8006d80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006d84:	195b      	addhi	r3, r3, r5
 8006d86:	9302      	strhi	r3, [sp, #8]
 8006d88:	2300      	movls	r3, #0
 8006d8a:	bf86      	itte	hi
 8006d8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006d90:	608b      	strhi	r3, [r1, #8]
 8006d92:	9302      	strls	r3, [sp, #8]
 8006d94:	680b      	ldr	r3, [r1, #0]
 8006d96:	468b      	mov	fp, r1
 8006d98:	2500      	movs	r5, #0
 8006d9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006d9e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006da2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006da6:	4680      	mov	r8, r0
 8006da8:	460c      	mov	r4, r1
 8006daa:	465e      	mov	r6, fp
 8006dac:	46aa      	mov	sl, r5
 8006dae:	46a9      	mov	r9, r5
 8006db0:	9501      	str	r5, [sp, #4]
 8006db2:	68a2      	ldr	r2, [r4, #8]
 8006db4:	b152      	cbz	r2, 8006dcc <_scanf_float+0x60>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	2b4e      	cmp	r3, #78	; 0x4e
 8006dbc:	d864      	bhi.n	8006e88 <_scanf_float+0x11c>
 8006dbe:	2b40      	cmp	r3, #64	; 0x40
 8006dc0:	d83c      	bhi.n	8006e3c <_scanf_float+0xd0>
 8006dc2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006dc6:	b2c8      	uxtb	r0, r1
 8006dc8:	280e      	cmp	r0, #14
 8006dca:	d93a      	bls.n	8006e42 <_scanf_float+0xd6>
 8006dcc:	f1b9 0f00 	cmp.w	r9, #0
 8006dd0:	d003      	beq.n	8006dda <_scanf_float+0x6e>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dde:	f1ba 0f01 	cmp.w	sl, #1
 8006de2:	f200 8113 	bhi.w	800700c <_scanf_float+0x2a0>
 8006de6:	455e      	cmp	r6, fp
 8006de8:	f200 8105 	bhi.w	8006ff6 <_scanf_float+0x28a>
 8006dec:	2501      	movs	r5, #1
 8006dee:	4628      	mov	r0, r5
 8006df0:	b007      	add	sp, #28
 8006df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006dfa:	2a0d      	cmp	r2, #13
 8006dfc:	d8e6      	bhi.n	8006dcc <_scanf_float+0x60>
 8006dfe:	a101      	add	r1, pc, #4	; (adr r1, 8006e04 <_scanf_float+0x98>)
 8006e00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e04:	08006f43 	.word	0x08006f43
 8006e08:	08006dcd 	.word	0x08006dcd
 8006e0c:	08006dcd 	.word	0x08006dcd
 8006e10:	08006dcd 	.word	0x08006dcd
 8006e14:	08006fa3 	.word	0x08006fa3
 8006e18:	08006f7b 	.word	0x08006f7b
 8006e1c:	08006dcd 	.word	0x08006dcd
 8006e20:	08006dcd 	.word	0x08006dcd
 8006e24:	08006f51 	.word	0x08006f51
 8006e28:	08006dcd 	.word	0x08006dcd
 8006e2c:	08006dcd 	.word	0x08006dcd
 8006e30:	08006dcd 	.word	0x08006dcd
 8006e34:	08006dcd 	.word	0x08006dcd
 8006e38:	08006f09 	.word	0x08006f09
 8006e3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006e40:	e7db      	b.n	8006dfa <_scanf_float+0x8e>
 8006e42:	290e      	cmp	r1, #14
 8006e44:	d8c2      	bhi.n	8006dcc <_scanf_float+0x60>
 8006e46:	a001      	add	r0, pc, #4	; (adr r0, 8006e4c <_scanf_float+0xe0>)
 8006e48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006e4c:	08006efb 	.word	0x08006efb
 8006e50:	08006dcd 	.word	0x08006dcd
 8006e54:	08006efb 	.word	0x08006efb
 8006e58:	08006f8f 	.word	0x08006f8f
 8006e5c:	08006dcd 	.word	0x08006dcd
 8006e60:	08006ea9 	.word	0x08006ea9
 8006e64:	08006ee5 	.word	0x08006ee5
 8006e68:	08006ee5 	.word	0x08006ee5
 8006e6c:	08006ee5 	.word	0x08006ee5
 8006e70:	08006ee5 	.word	0x08006ee5
 8006e74:	08006ee5 	.word	0x08006ee5
 8006e78:	08006ee5 	.word	0x08006ee5
 8006e7c:	08006ee5 	.word	0x08006ee5
 8006e80:	08006ee5 	.word	0x08006ee5
 8006e84:	08006ee5 	.word	0x08006ee5
 8006e88:	2b6e      	cmp	r3, #110	; 0x6e
 8006e8a:	d809      	bhi.n	8006ea0 <_scanf_float+0x134>
 8006e8c:	2b60      	cmp	r3, #96	; 0x60
 8006e8e:	d8b2      	bhi.n	8006df6 <_scanf_float+0x8a>
 8006e90:	2b54      	cmp	r3, #84	; 0x54
 8006e92:	d077      	beq.n	8006f84 <_scanf_float+0x218>
 8006e94:	2b59      	cmp	r3, #89	; 0x59
 8006e96:	d199      	bne.n	8006dcc <_scanf_float+0x60>
 8006e98:	2d07      	cmp	r5, #7
 8006e9a:	d197      	bne.n	8006dcc <_scanf_float+0x60>
 8006e9c:	2508      	movs	r5, #8
 8006e9e:	e029      	b.n	8006ef4 <_scanf_float+0x188>
 8006ea0:	2b74      	cmp	r3, #116	; 0x74
 8006ea2:	d06f      	beq.n	8006f84 <_scanf_float+0x218>
 8006ea4:	2b79      	cmp	r3, #121	; 0x79
 8006ea6:	e7f6      	b.n	8006e96 <_scanf_float+0x12a>
 8006ea8:	6821      	ldr	r1, [r4, #0]
 8006eaa:	05c8      	lsls	r0, r1, #23
 8006eac:	d51a      	bpl.n	8006ee4 <_scanf_float+0x178>
 8006eae:	9b02      	ldr	r3, [sp, #8]
 8006eb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006eb4:	6021      	str	r1, [r4, #0]
 8006eb6:	f109 0901 	add.w	r9, r9, #1
 8006eba:	b11b      	cbz	r3, 8006ec4 <_scanf_float+0x158>
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	3201      	adds	r2, #1
 8006ec0:	9302      	str	r3, [sp, #8]
 8006ec2:	60a2      	str	r2, [r4, #8]
 8006ec4:	68a3      	ldr	r3, [r4, #8]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	60a3      	str	r3, [r4, #8]
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	6123      	str	r3, [r4, #16]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	607b      	str	r3, [r7, #4]
 8006ed8:	f340 8084 	ble.w	8006fe4 <_scanf_float+0x278>
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	603b      	str	r3, [r7, #0]
 8006ee2:	e766      	b.n	8006db2 <_scanf_float+0x46>
 8006ee4:	eb1a 0f05 	cmn.w	sl, r5
 8006ee8:	f47f af70 	bne.w	8006dcc <_scanf_float+0x60>
 8006eec:	6822      	ldr	r2, [r4, #0]
 8006eee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006ef2:	6022      	str	r2, [r4, #0]
 8006ef4:	f806 3b01 	strb.w	r3, [r6], #1
 8006ef8:	e7e4      	b.n	8006ec4 <_scanf_float+0x158>
 8006efa:	6822      	ldr	r2, [r4, #0]
 8006efc:	0610      	lsls	r0, r2, #24
 8006efe:	f57f af65 	bpl.w	8006dcc <_scanf_float+0x60>
 8006f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f06:	e7f4      	b.n	8006ef2 <_scanf_float+0x186>
 8006f08:	f1ba 0f00 	cmp.w	sl, #0
 8006f0c:	d10e      	bne.n	8006f2c <_scanf_float+0x1c0>
 8006f0e:	f1b9 0f00 	cmp.w	r9, #0
 8006f12:	d10e      	bne.n	8006f32 <_scanf_float+0x1c6>
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f1e:	d108      	bne.n	8006f32 <_scanf_float+0x1c6>
 8006f20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f24:	6022      	str	r2, [r4, #0]
 8006f26:	f04f 0a01 	mov.w	sl, #1
 8006f2a:	e7e3      	b.n	8006ef4 <_scanf_float+0x188>
 8006f2c:	f1ba 0f02 	cmp.w	sl, #2
 8006f30:	d055      	beq.n	8006fde <_scanf_float+0x272>
 8006f32:	2d01      	cmp	r5, #1
 8006f34:	d002      	beq.n	8006f3c <_scanf_float+0x1d0>
 8006f36:	2d04      	cmp	r5, #4
 8006f38:	f47f af48 	bne.w	8006dcc <_scanf_float+0x60>
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	b2ed      	uxtb	r5, r5
 8006f40:	e7d8      	b.n	8006ef4 <_scanf_float+0x188>
 8006f42:	f1ba 0f01 	cmp.w	sl, #1
 8006f46:	f47f af41 	bne.w	8006dcc <_scanf_float+0x60>
 8006f4a:	f04f 0a02 	mov.w	sl, #2
 8006f4e:	e7d1      	b.n	8006ef4 <_scanf_float+0x188>
 8006f50:	b97d      	cbnz	r5, 8006f72 <_scanf_float+0x206>
 8006f52:	f1b9 0f00 	cmp.w	r9, #0
 8006f56:	f47f af3c 	bne.w	8006dd2 <_scanf_float+0x66>
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f64:	f47f af39 	bne.w	8006dda <_scanf_float+0x6e>
 8006f68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f6c:	6022      	str	r2, [r4, #0]
 8006f6e:	2501      	movs	r5, #1
 8006f70:	e7c0      	b.n	8006ef4 <_scanf_float+0x188>
 8006f72:	2d03      	cmp	r5, #3
 8006f74:	d0e2      	beq.n	8006f3c <_scanf_float+0x1d0>
 8006f76:	2d05      	cmp	r5, #5
 8006f78:	e7de      	b.n	8006f38 <_scanf_float+0x1cc>
 8006f7a:	2d02      	cmp	r5, #2
 8006f7c:	f47f af26 	bne.w	8006dcc <_scanf_float+0x60>
 8006f80:	2503      	movs	r5, #3
 8006f82:	e7b7      	b.n	8006ef4 <_scanf_float+0x188>
 8006f84:	2d06      	cmp	r5, #6
 8006f86:	f47f af21 	bne.w	8006dcc <_scanf_float+0x60>
 8006f8a:	2507      	movs	r5, #7
 8006f8c:	e7b2      	b.n	8006ef4 <_scanf_float+0x188>
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	0591      	lsls	r1, r2, #22
 8006f92:	f57f af1b 	bpl.w	8006dcc <_scanf_float+0x60>
 8006f96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006f9a:	6022      	str	r2, [r4, #0]
 8006f9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fa0:	e7a8      	b.n	8006ef4 <_scanf_float+0x188>
 8006fa2:	6822      	ldr	r2, [r4, #0]
 8006fa4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006fa8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006fac:	d006      	beq.n	8006fbc <_scanf_float+0x250>
 8006fae:	0550      	lsls	r0, r2, #21
 8006fb0:	f57f af0c 	bpl.w	8006dcc <_scanf_float+0x60>
 8006fb4:	f1b9 0f00 	cmp.w	r9, #0
 8006fb8:	f43f af0f 	beq.w	8006dda <_scanf_float+0x6e>
 8006fbc:	0591      	lsls	r1, r2, #22
 8006fbe:	bf58      	it	pl
 8006fc0:	9901      	ldrpl	r1, [sp, #4]
 8006fc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fc6:	bf58      	it	pl
 8006fc8:	eba9 0101 	subpl.w	r1, r9, r1
 8006fcc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006fd0:	bf58      	it	pl
 8006fd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006fd6:	6022      	str	r2, [r4, #0]
 8006fd8:	f04f 0900 	mov.w	r9, #0
 8006fdc:	e78a      	b.n	8006ef4 <_scanf_float+0x188>
 8006fde:	f04f 0a03 	mov.w	sl, #3
 8006fe2:	e787      	b.n	8006ef4 <_scanf_float+0x188>
 8006fe4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006fe8:	4639      	mov	r1, r7
 8006fea:	4640      	mov	r0, r8
 8006fec:	4798      	blx	r3
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f43f aedf 	beq.w	8006db2 <_scanf_float+0x46>
 8006ff4:	e6ea      	b.n	8006dcc <_scanf_float+0x60>
 8006ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ffa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ffe:	463a      	mov	r2, r7
 8007000:	4640      	mov	r0, r8
 8007002:	4798      	blx	r3
 8007004:	6923      	ldr	r3, [r4, #16]
 8007006:	3b01      	subs	r3, #1
 8007008:	6123      	str	r3, [r4, #16]
 800700a:	e6ec      	b.n	8006de6 <_scanf_float+0x7a>
 800700c:	1e6b      	subs	r3, r5, #1
 800700e:	2b06      	cmp	r3, #6
 8007010:	d825      	bhi.n	800705e <_scanf_float+0x2f2>
 8007012:	2d02      	cmp	r5, #2
 8007014:	d836      	bhi.n	8007084 <_scanf_float+0x318>
 8007016:	455e      	cmp	r6, fp
 8007018:	f67f aee8 	bls.w	8006dec <_scanf_float+0x80>
 800701c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007020:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007024:	463a      	mov	r2, r7
 8007026:	4640      	mov	r0, r8
 8007028:	4798      	blx	r3
 800702a:	6923      	ldr	r3, [r4, #16]
 800702c:	3b01      	subs	r3, #1
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	e7f1      	b.n	8007016 <_scanf_float+0x2aa>
 8007032:	9802      	ldr	r0, [sp, #8]
 8007034:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007038:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800703c:	9002      	str	r0, [sp, #8]
 800703e:	463a      	mov	r2, r7
 8007040:	4640      	mov	r0, r8
 8007042:	4798      	blx	r3
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	3b01      	subs	r3, #1
 8007048:	6123      	str	r3, [r4, #16]
 800704a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800704e:	fa5f fa8a 	uxtb.w	sl, sl
 8007052:	f1ba 0f02 	cmp.w	sl, #2
 8007056:	d1ec      	bne.n	8007032 <_scanf_float+0x2c6>
 8007058:	3d03      	subs	r5, #3
 800705a:	b2ed      	uxtb	r5, r5
 800705c:	1b76      	subs	r6, r6, r5
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	05da      	lsls	r2, r3, #23
 8007062:	d52f      	bpl.n	80070c4 <_scanf_float+0x358>
 8007064:	055b      	lsls	r3, r3, #21
 8007066:	d510      	bpl.n	800708a <_scanf_float+0x31e>
 8007068:	455e      	cmp	r6, fp
 800706a:	f67f aebf 	bls.w	8006dec <_scanf_float+0x80>
 800706e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007072:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007076:	463a      	mov	r2, r7
 8007078:	4640      	mov	r0, r8
 800707a:	4798      	blx	r3
 800707c:	6923      	ldr	r3, [r4, #16]
 800707e:	3b01      	subs	r3, #1
 8007080:	6123      	str	r3, [r4, #16]
 8007082:	e7f1      	b.n	8007068 <_scanf_float+0x2fc>
 8007084:	46aa      	mov	sl, r5
 8007086:	9602      	str	r6, [sp, #8]
 8007088:	e7df      	b.n	800704a <_scanf_float+0x2de>
 800708a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800708e:	6923      	ldr	r3, [r4, #16]
 8007090:	2965      	cmp	r1, #101	; 0x65
 8007092:	f103 33ff 	add.w	r3, r3, #4294967295
 8007096:	f106 35ff 	add.w	r5, r6, #4294967295
 800709a:	6123      	str	r3, [r4, #16]
 800709c:	d00c      	beq.n	80070b8 <_scanf_float+0x34c>
 800709e:	2945      	cmp	r1, #69	; 0x45
 80070a0:	d00a      	beq.n	80070b8 <_scanf_float+0x34c>
 80070a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070a6:	463a      	mov	r2, r7
 80070a8:	4640      	mov	r0, r8
 80070aa:	4798      	blx	r3
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	1eb5      	subs	r5, r6, #2
 80070b6:	6123      	str	r3, [r4, #16]
 80070b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070bc:	463a      	mov	r2, r7
 80070be:	4640      	mov	r0, r8
 80070c0:	4798      	blx	r3
 80070c2:	462e      	mov	r6, r5
 80070c4:	6825      	ldr	r5, [r4, #0]
 80070c6:	f015 0510 	ands.w	r5, r5, #16
 80070ca:	d158      	bne.n	800717e <_scanf_float+0x412>
 80070cc:	7035      	strb	r5, [r6, #0]
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d8:	d11c      	bne.n	8007114 <_scanf_float+0x3a8>
 80070da:	9b01      	ldr	r3, [sp, #4]
 80070dc:	454b      	cmp	r3, r9
 80070de:	eba3 0209 	sub.w	r2, r3, r9
 80070e2:	d124      	bne.n	800712e <_scanf_float+0x3c2>
 80070e4:	2200      	movs	r2, #0
 80070e6:	4659      	mov	r1, fp
 80070e8:	4640      	mov	r0, r8
 80070ea:	f002 fc65 	bl	80099b8 <_strtod_r>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	6821      	ldr	r1, [r4, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f011 0f02 	tst.w	r1, #2
 80070f8:	ec57 6b10 	vmov	r6, r7, d0
 80070fc:	f103 0204 	add.w	r2, r3, #4
 8007100:	d020      	beq.n	8007144 <_scanf_float+0x3d8>
 8007102:	9903      	ldr	r1, [sp, #12]
 8007104:	600a      	str	r2, [r1, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	e9c3 6700 	strd	r6, r7, [r3]
 800710c:	68e3      	ldr	r3, [r4, #12]
 800710e:	3301      	adds	r3, #1
 8007110:	60e3      	str	r3, [r4, #12]
 8007112:	e66c      	b.n	8006dee <_scanf_float+0x82>
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0e4      	beq.n	80070e4 <_scanf_float+0x378>
 800711a:	9905      	ldr	r1, [sp, #20]
 800711c:	230a      	movs	r3, #10
 800711e:	462a      	mov	r2, r5
 8007120:	3101      	adds	r1, #1
 8007122:	4640      	mov	r0, r8
 8007124:	f002 fcd0 	bl	8009ac8 <_strtol_r>
 8007128:	9b04      	ldr	r3, [sp, #16]
 800712a:	9e05      	ldr	r6, [sp, #20]
 800712c:	1ac2      	subs	r2, r0, r3
 800712e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007132:	429e      	cmp	r6, r3
 8007134:	bf28      	it	cs
 8007136:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800713a:	4912      	ldr	r1, [pc, #72]	; (8007184 <_scanf_float+0x418>)
 800713c:	4630      	mov	r0, r6
 800713e:	f000 f91b 	bl	8007378 <siprintf>
 8007142:	e7cf      	b.n	80070e4 <_scanf_float+0x378>
 8007144:	f011 0f04 	tst.w	r1, #4
 8007148:	9903      	ldr	r1, [sp, #12]
 800714a:	600a      	str	r2, [r1, #0]
 800714c:	d1db      	bne.n	8007106 <_scanf_float+0x39a>
 800714e:	f8d3 8000 	ldr.w	r8, [r3]
 8007152:	ee10 2a10 	vmov	r2, s0
 8007156:	ee10 0a10 	vmov	r0, s0
 800715a:	463b      	mov	r3, r7
 800715c:	4639      	mov	r1, r7
 800715e:	f7f9 fce5 	bl	8000b2c <__aeabi_dcmpun>
 8007162:	b128      	cbz	r0, 8007170 <_scanf_float+0x404>
 8007164:	4808      	ldr	r0, [pc, #32]	; (8007188 <_scanf_float+0x41c>)
 8007166:	f000 f9eb 	bl	8007540 <nanf>
 800716a:	ed88 0a00 	vstr	s0, [r8]
 800716e:	e7cd      	b.n	800710c <_scanf_float+0x3a0>
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fd38 	bl	8000be8 <__aeabi_d2f>
 8007178:	f8c8 0000 	str.w	r0, [r8]
 800717c:	e7c6      	b.n	800710c <_scanf_float+0x3a0>
 800717e:	2500      	movs	r5, #0
 8007180:	e635      	b.n	8006dee <_scanf_float+0x82>
 8007182:	bf00      	nop
 8007184:	0800bca8 	.word	0x0800bca8
 8007188:	0800c03d 	.word	0x0800c03d

0800718c <std>:
 800718c:	2300      	movs	r3, #0
 800718e:	b510      	push	{r4, lr}
 8007190:	4604      	mov	r4, r0
 8007192:	e9c0 3300 	strd	r3, r3, [r0]
 8007196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800719a:	6083      	str	r3, [r0, #8]
 800719c:	8181      	strh	r1, [r0, #12]
 800719e:	6643      	str	r3, [r0, #100]	; 0x64
 80071a0:	81c2      	strh	r2, [r0, #14]
 80071a2:	6183      	str	r3, [r0, #24]
 80071a4:	4619      	mov	r1, r3
 80071a6:	2208      	movs	r2, #8
 80071a8:	305c      	adds	r0, #92	; 0x5c
 80071aa:	f000 f948 	bl	800743e <memset>
 80071ae:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <std+0x58>)
 80071b0:	6263      	str	r3, [r4, #36]	; 0x24
 80071b2:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <std+0x5c>)
 80071b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80071b6:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <std+0x60>)
 80071b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071ba:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <std+0x64>)
 80071bc:	6323      	str	r3, [r4, #48]	; 0x30
 80071be:	4b0d      	ldr	r3, [pc, #52]	; (80071f4 <std+0x68>)
 80071c0:	6224      	str	r4, [r4, #32]
 80071c2:	429c      	cmp	r4, r3
 80071c4:	d006      	beq.n	80071d4 <std+0x48>
 80071c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80071ca:	4294      	cmp	r4, r2
 80071cc:	d002      	beq.n	80071d4 <std+0x48>
 80071ce:	33d0      	adds	r3, #208	; 0xd0
 80071d0:	429c      	cmp	r4, r3
 80071d2:	d105      	bne.n	80071e0 <std+0x54>
 80071d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071dc:	f000 b9ac 	b.w	8007538 <__retarget_lock_init_recursive>
 80071e0:	bd10      	pop	{r4, pc}
 80071e2:	bf00      	nop
 80071e4:	080073b9 	.word	0x080073b9
 80071e8:	080073db 	.word	0x080073db
 80071ec:	08007413 	.word	0x08007413
 80071f0:	08007437 	.word	0x08007437
 80071f4:	20000818 	.word	0x20000818

080071f8 <stdio_exit_handler>:
 80071f8:	4a02      	ldr	r2, [pc, #8]	; (8007204 <stdio_exit_handler+0xc>)
 80071fa:	4903      	ldr	r1, [pc, #12]	; (8007208 <stdio_exit_handler+0x10>)
 80071fc:	4803      	ldr	r0, [pc, #12]	; (800720c <stdio_exit_handler+0x14>)
 80071fe:	f000 b869 	b.w	80072d4 <_fwalk_sglue>
 8007202:	bf00      	nop
 8007204:	2000000c 	.word	0x2000000c
 8007208:	08009e89 	.word	0x08009e89
 800720c:	20000018 	.word	0x20000018

08007210 <cleanup_stdio>:
 8007210:	6841      	ldr	r1, [r0, #4]
 8007212:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <cleanup_stdio+0x34>)
 8007214:	4299      	cmp	r1, r3
 8007216:	b510      	push	{r4, lr}
 8007218:	4604      	mov	r4, r0
 800721a:	d001      	beq.n	8007220 <cleanup_stdio+0x10>
 800721c:	f002 fe34 	bl	8009e88 <_fflush_r>
 8007220:	68a1      	ldr	r1, [r4, #8]
 8007222:	4b09      	ldr	r3, [pc, #36]	; (8007248 <cleanup_stdio+0x38>)
 8007224:	4299      	cmp	r1, r3
 8007226:	d002      	beq.n	800722e <cleanup_stdio+0x1e>
 8007228:	4620      	mov	r0, r4
 800722a:	f002 fe2d 	bl	8009e88 <_fflush_r>
 800722e:	68e1      	ldr	r1, [r4, #12]
 8007230:	4b06      	ldr	r3, [pc, #24]	; (800724c <cleanup_stdio+0x3c>)
 8007232:	4299      	cmp	r1, r3
 8007234:	d004      	beq.n	8007240 <cleanup_stdio+0x30>
 8007236:	4620      	mov	r0, r4
 8007238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800723c:	f002 be24 	b.w	8009e88 <_fflush_r>
 8007240:	bd10      	pop	{r4, pc}
 8007242:	bf00      	nop
 8007244:	20000818 	.word	0x20000818
 8007248:	20000880 	.word	0x20000880
 800724c:	200008e8 	.word	0x200008e8

08007250 <global_stdio_init.part.0>:
 8007250:	b510      	push	{r4, lr}
 8007252:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <global_stdio_init.part.0+0x30>)
 8007254:	4c0b      	ldr	r4, [pc, #44]	; (8007284 <global_stdio_init.part.0+0x34>)
 8007256:	4a0c      	ldr	r2, [pc, #48]	; (8007288 <global_stdio_init.part.0+0x38>)
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	4620      	mov	r0, r4
 800725c:	2200      	movs	r2, #0
 800725e:	2104      	movs	r1, #4
 8007260:	f7ff ff94 	bl	800718c <std>
 8007264:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007268:	2201      	movs	r2, #1
 800726a:	2109      	movs	r1, #9
 800726c:	f7ff ff8e 	bl	800718c <std>
 8007270:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007274:	2202      	movs	r2, #2
 8007276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800727a:	2112      	movs	r1, #18
 800727c:	f7ff bf86 	b.w	800718c <std>
 8007280:	20000950 	.word	0x20000950
 8007284:	20000818 	.word	0x20000818
 8007288:	080071f9 	.word	0x080071f9

0800728c <__sfp_lock_acquire>:
 800728c:	4801      	ldr	r0, [pc, #4]	; (8007294 <__sfp_lock_acquire+0x8>)
 800728e:	f000 b954 	b.w	800753a <__retarget_lock_acquire_recursive>
 8007292:	bf00      	nop
 8007294:	20000959 	.word	0x20000959

08007298 <__sfp_lock_release>:
 8007298:	4801      	ldr	r0, [pc, #4]	; (80072a0 <__sfp_lock_release+0x8>)
 800729a:	f000 b94f 	b.w	800753c <__retarget_lock_release_recursive>
 800729e:	bf00      	nop
 80072a0:	20000959 	.word	0x20000959

080072a4 <__sinit>:
 80072a4:	b510      	push	{r4, lr}
 80072a6:	4604      	mov	r4, r0
 80072a8:	f7ff fff0 	bl	800728c <__sfp_lock_acquire>
 80072ac:	6a23      	ldr	r3, [r4, #32]
 80072ae:	b11b      	cbz	r3, 80072b8 <__sinit+0x14>
 80072b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b4:	f7ff bff0 	b.w	8007298 <__sfp_lock_release>
 80072b8:	4b04      	ldr	r3, [pc, #16]	; (80072cc <__sinit+0x28>)
 80072ba:	6223      	str	r3, [r4, #32]
 80072bc:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <__sinit+0x2c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f5      	bne.n	80072b0 <__sinit+0xc>
 80072c4:	f7ff ffc4 	bl	8007250 <global_stdio_init.part.0>
 80072c8:	e7f2      	b.n	80072b0 <__sinit+0xc>
 80072ca:	bf00      	nop
 80072cc:	08007211 	.word	0x08007211
 80072d0:	20000950 	.word	0x20000950

080072d4 <_fwalk_sglue>:
 80072d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d8:	4607      	mov	r7, r0
 80072da:	4688      	mov	r8, r1
 80072dc:	4614      	mov	r4, r2
 80072de:	2600      	movs	r6, #0
 80072e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072e4:	f1b9 0901 	subs.w	r9, r9, #1
 80072e8:	d505      	bpl.n	80072f6 <_fwalk_sglue+0x22>
 80072ea:	6824      	ldr	r4, [r4, #0]
 80072ec:	2c00      	cmp	r4, #0
 80072ee:	d1f7      	bne.n	80072e0 <_fwalk_sglue+0xc>
 80072f0:	4630      	mov	r0, r6
 80072f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f6:	89ab      	ldrh	r3, [r5, #12]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d907      	bls.n	800730c <_fwalk_sglue+0x38>
 80072fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007300:	3301      	adds	r3, #1
 8007302:	d003      	beq.n	800730c <_fwalk_sglue+0x38>
 8007304:	4629      	mov	r1, r5
 8007306:	4638      	mov	r0, r7
 8007308:	47c0      	blx	r8
 800730a:	4306      	orrs	r6, r0
 800730c:	3568      	adds	r5, #104	; 0x68
 800730e:	e7e9      	b.n	80072e4 <_fwalk_sglue+0x10>

08007310 <sniprintf>:
 8007310:	b40c      	push	{r2, r3}
 8007312:	b530      	push	{r4, r5, lr}
 8007314:	4b17      	ldr	r3, [pc, #92]	; (8007374 <sniprintf+0x64>)
 8007316:	1e0c      	subs	r4, r1, #0
 8007318:	681d      	ldr	r5, [r3, #0]
 800731a:	b09d      	sub	sp, #116	; 0x74
 800731c:	da08      	bge.n	8007330 <sniprintf+0x20>
 800731e:	238b      	movs	r3, #139	; 0x8b
 8007320:	602b      	str	r3, [r5, #0]
 8007322:	f04f 30ff 	mov.w	r0, #4294967295
 8007326:	b01d      	add	sp, #116	; 0x74
 8007328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800732c:	b002      	add	sp, #8
 800732e:	4770      	bx	lr
 8007330:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007334:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007338:	bf14      	ite	ne
 800733a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800733e:	4623      	moveq	r3, r4
 8007340:	9304      	str	r3, [sp, #16]
 8007342:	9307      	str	r3, [sp, #28]
 8007344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007348:	9002      	str	r0, [sp, #8]
 800734a:	9006      	str	r0, [sp, #24]
 800734c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007350:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007352:	ab21      	add	r3, sp, #132	; 0x84
 8007354:	a902      	add	r1, sp, #8
 8007356:	4628      	mov	r0, r5
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	f002 fc11 	bl	8009b80 <_svfiprintf_r>
 800735e:	1c43      	adds	r3, r0, #1
 8007360:	bfbc      	itt	lt
 8007362:	238b      	movlt	r3, #139	; 0x8b
 8007364:	602b      	strlt	r3, [r5, #0]
 8007366:	2c00      	cmp	r4, #0
 8007368:	d0dd      	beq.n	8007326 <sniprintf+0x16>
 800736a:	9b02      	ldr	r3, [sp, #8]
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	e7d9      	b.n	8007326 <sniprintf+0x16>
 8007372:	bf00      	nop
 8007374:	20000064 	.word	0x20000064

08007378 <siprintf>:
 8007378:	b40e      	push	{r1, r2, r3}
 800737a:	b500      	push	{lr}
 800737c:	b09c      	sub	sp, #112	; 0x70
 800737e:	ab1d      	add	r3, sp, #116	; 0x74
 8007380:	9002      	str	r0, [sp, #8]
 8007382:	9006      	str	r0, [sp, #24]
 8007384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007388:	4809      	ldr	r0, [pc, #36]	; (80073b0 <siprintf+0x38>)
 800738a:	9107      	str	r1, [sp, #28]
 800738c:	9104      	str	r1, [sp, #16]
 800738e:	4909      	ldr	r1, [pc, #36]	; (80073b4 <siprintf+0x3c>)
 8007390:	f853 2b04 	ldr.w	r2, [r3], #4
 8007394:	9105      	str	r1, [sp, #20]
 8007396:	6800      	ldr	r0, [r0, #0]
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	a902      	add	r1, sp, #8
 800739c:	f002 fbf0 	bl	8009b80 <_svfiprintf_r>
 80073a0:	9b02      	ldr	r3, [sp, #8]
 80073a2:	2200      	movs	r2, #0
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	b01c      	add	sp, #112	; 0x70
 80073a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073ac:	b003      	add	sp, #12
 80073ae:	4770      	bx	lr
 80073b0:	20000064 	.word	0x20000064
 80073b4:	ffff0208 	.word	0xffff0208

080073b8 <__sread>:
 80073b8:	b510      	push	{r4, lr}
 80073ba:	460c      	mov	r4, r1
 80073bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c0:	f000 f86c 	bl	800749c <_read_r>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	bfab      	itete	ge
 80073c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ca:	89a3      	ldrhlt	r3, [r4, #12]
 80073cc:	181b      	addge	r3, r3, r0
 80073ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073d2:	bfac      	ite	ge
 80073d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80073d6:	81a3      	strhlt	r3, [r4, #12]
 80073d8:	bd10      	pop	{r4, pc}

080073da <__swrite>:
 80073da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073de:	461f      	mov	r7, r3
 80073e0:	898b      	ldrh	r3, [r1, #12]
 80073e2:	05db      	lsls	r3, r3, #23
 80073e4:	4605      	mov	r5, r0
 80073e6:	460c      	mov	r4, r1
 80073e8:	4616      	mov	r6, r2
 80073ea:	d505      	bpl.n	80073f8 <__swrite+0x1e>
 80073ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f0:	2302      	movs	r3, #2
 80073f2:	2200      	movs	r2, #0
 80073f4:	f000 f840 	bl	8007478 <_lseek_r>
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007402:	81a3      	strh	r3, [r4, #12]
 8007404:	4632      	mov	r2, r6
 8007406:	463b      	mov	r3, r7
 8007408:	4628      	mov	r0, r5
 800740a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800740e:	f000 b857 	b.w	80074c0 <_write_r>

08007412 <__sseek>:
 8007412:	b510      	push	{r4, lr}
 8007414:	460c      	mov	r4, r1
 8007416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741a:	f000 f82d 	bl	8007478 <_lseek_r>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	89a3      	ldrh	r3, [r4, #12]
 8007422:	bf15      	itete	ne
 8007424:	6560      	strne	r0, [r4, #84]	; 0x54
 8007426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800742a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800742e:	81a3      	strheq	r3, [r4, #12]
 8007430:	bf18      	it	ne
 8007432:	81a3      	strhne	r3, [r4, #12]
 8007434:	bd10      	pop	{r4, pc}

08007436 <__sclose>:
 8007436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743a:	f000 b80d 	b.w	8007458 <_close_r>

0800743e <memset>:
 800743e:	4402      	add	r2, r0
 8007440:	4603      	mov	r3, r0
 8007442:	4293      	cmp	r3, r2
 8007444:	d100      	bne.n	8007448 <memset+0xa>
 8007446:	4770      	bx	lr
 8007448:	f803 1b01 	strb.w	r1, [r3], #1
 800744c:	e7f9      	b.n	8007442 <memset+0x4>
	...

08007450 <_localeconv_r>:
 8007450:	4800      	ldr	r0, [pc, #0]	; (8007454 <_localeconv_r+0x4>)
 8007452:	4770      	bx	lr
 8007454:	20000158 	.word	0x20000158

08007458 <_close_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d06      	ldr	r5, [pc, #24]	; (8007474 <_close_r+0x1c>)
 800745c:	2300      	movs	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7fb fb4b 	bl	8002afe <_close>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_close_r+0x1a>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_close_r+0x1a>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20000954 	.word	0x20000954

08007478 <_lseek_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	4d07      	ldr	r5, [pc, #28]	; (8007498 <_lseek_r+0x20>)
 800747c:	4604      	mov	r4, r0
 800747e:	4608      	mov	r0, r1
 8007480:	4611      	mov	r1, r2
 8007482:	2200      	movs	r2, #0
 8007484:	602a      	str	r2, [r5, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	f7fb fb60 	bl	8002b4c <_lseek>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_lseek_r+0x1e>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_lseek_r+0x1e>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	20000954 	.word	0x20000954

0800749c <_read_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4d07      	ldr	r5, [pc, #28]	; (80074bc <_read_r+0x20>)
 80074a0:	4604      	mov	r4, r0
 80074a2:	4608      	mov	r0, r1
 80074a4:	4611      	mov	r1, r2
 80074a6:	2200      	movs	r2, #0
 80074a8:	602a      	str	r2, [r5, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f7fb faee 	bl	8002a8c <_read>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d102      	bne.n	80074ba <_read_r+0x1e>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	b103      	cbz	r3, 80074ba <_read_r+0x1e>
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	20000954 	.word	0x20000954

080074c0 <_write_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4d07      	ldr	r5, [pc, #28]	; (80074e0 <_write_r+0x20>)
 80074c4:	4604      	mov	r4, r0
 80074c6:	4608      	mov	r0, r1
 80074c8:	4611      	mov	r1, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f7fb faf9 	bl	8002ac6 <_write>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_write_r+0x1e>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_write_r+0x1e>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	20000954 	.word	0x20000954

080074e4 <__errno>:
 80074e4:	4b01      	ldr	r3, [pc, #4]	; (80074ec <__errno+0x8>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	20000064 	.word	0x20000064

080074f0 <__libc_init_array>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	4d0d      	ldr	r5, [pc, #52]	; (8007528 <__libc_init_array+0x38>)
 80074f4:	4c0d      	ldr	r4, [pc, #52]	; (800752c <__libc_init_array+0x3c>)
 80074f6:	1b64      	subs	r4, r4, r5
 80074f8:	10a4      	asrs	r4, r4, #2
 80074fa:	2600      	movs	r6, #0
 80074fc:	42a6      	cmp	r6, r4
 80074fe:	d109      	bne.n	8007514 <__libc_init_array+0x24>
 8007500:	4d0b      	ldr	r5, [pc, #44]	; (8007530 <__libc_init_array+0x40>)
 8007502:	4c0c      	ldr	r4, [pc, #48]	; (8007534 <__libc_init_array+0x44>)
 8007504:	f003 fe4e 	bl	800b1a4 <_init>
 8007508:	1b64      	subs	r4, r4, r5
 800750a:	10a4      	asrs	r4, r4, #2
 800750c:	2600      	movs	r6, #0
 800750e:	42a6      	cmp	r6, r4
 8007510:	d105      	bne.n	800751e <__libc_init_array+0x2e>
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	f855 3b04 	ldr.w	r3, [r5], #4
 8007518:	4798      	blx	r3
 800751a:	3601      	adds	r6, #1
 800751c:	e7ee      	b.n	80074fc <__libc_init_array+0xc>
 800751e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007522:	4798      	blx	r3
 8007524:	3601      	adds	r6, #1
 8007526:	e7f2      	b.n	800750e <__libc_init_array+0x1e>
 8007528:	0800c118 	.word	0x0800c118
 800752c:	0800c118 	.word	0x0800c118
 8007530:	0800c118 	.word	0x0800c118
 8007534:	0800c11c 	.word	0x0800c11c

08007538 <__retarget_lock_init_recursive>:
 8007538:	4770      	bx	lr

0800753a <__retarget_lock_acquire_recursive>:
 800753a:	4770      	bx	lr

0800753c <__retarget_lock_release_recursive>:
 800753c:	4770      	bx	lr
	...

08007540 <nanf>:
 8007540:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007548 <nanf+0x8>
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	7fc00000 	.word	0x7fc00000

0800754c <quorem>:
 800754c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	6903      	ldr	r3, [r0, #16]
 8007552:	690c      	ldr	r4, [r1, #16]
 8007554:	42a3      	cmp	r3, r4
 8007556:	4607      	mov	r7, r0
 8007558:	db7e      	blt.n	8007658 <quorem+0x10c>
 800755a:	3c01      	subs	r4, #1
 800755c:	f101 0814 	add.w	r8, r1, #20
 8007560:	f100 0514 	add.w	r5, r0, #20
 8007564:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800756e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007572:	3301      	adds	r3, #1
 8007574:	429a      	cmp	r2, r3
 8007576:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800757a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800757e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007582:	d331      	bcc.n	80075e8 <quorem+0x9c>
 8007584:	f04f 0e00 	mov.w	lr, #0
 8007588:	4640      	mov	r0, r8
 800758a:	46ac      	mov	ip, r5
 800758c:	46f2      	mov	sl, lr
 800758e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007592:	b293      	uxth	r3, r2
 8007594:	fb06 e303 	mla	r3, r6, r3, lr
 8007598:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800759c:	0c1a      	lsrs	r2, r3, #16
 800759e:	b29b      	uxth	r3, r3
 80075a0:	ebaa 0303 	sub.w	r3, sl, r3
 80075a4:	f8dc a000 	ldr.w	sl, [ip]
 80075a8:	fa13 f38a 	uxtah	r3, r3, sl
 80075ac:	fb06 220e 	mla	r2, r6, lr, r2
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	9b00      	ldr	r3, [sp, #0]
 80075b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075b8:	b292      	uxth	r2, r2
 80075ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075c2:	f8bd 3000 	ldrh.w	r3, [sp]
 80075c6:	4581      	cmp	r9, r0
 80075c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075cc:	f84c 3b04 	str.w	r3, [ip], #4
 80075d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075d4:	d2db      	bcs.n	800758e <quorem+0x42>
 80075d6:	f855 300b 	ldr.w	r3, [r5, fp]
 80075da:	b92b      	cbnz	r3, 80075e8 <quorem+0x9c>
 80075dc:	9b01      	ldr	r3, [sp, #4]
 80075de:	3b04      	subs	r3, #4
 80075e0:	429d      	cmp	r5, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	d32c      	bcc.n	8007640 <quorem+0xf4>
 80075e6:	613c      	str	r4, [r7, #16]
 80075e8:	4638      	mov	r0, r7
 80075ea:	f001 f9f1 	bl	80089d0 <__mcmp>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	db22      	blt.n	8007638 <quorem+0xec>
 80075f2:	3601      	adds	r6, #1
 80075f4:	4629      	mov	r1, r5
 80075f6:	2000      	movs	r0, #0
 80075f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80075fc:	f8d1 c000 	ldr.w	ip, [r1]
 8007600:	b293      	uxth	r3, r2
 8007602:	1ac3      	subs	r3, r0, r3
 8007604:	0c12      	lsrs	r2, r2, #16
 8007606:	fa13 f38c 	uxtah	r3, r3, ip
 800760a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800760e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007612:	b29b      	uxth	r3, r3
 8007614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007618:	45c1      	cmp	r9, r8
 800761a:	f841 3b04 	str.w	r3, [r1], #4
 800761e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007622:	d2e9      	bcs.n	80075f8 <quorem+0xac>
 8007624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800762c:	b922      	cbnz	r2, 8007638 <quorem+0xec>
 800762e:	3b04      	subs	r3, #4
 8007630:	429d      	cmp	r5, r3
 8007632:	461a      	mov	r2, r3
 8007634:	d30a      	bcc.n	800764c <quorem+0x100>
 8007636:	613c      	str	r4, [r7, #16]
 8007638:	4630      	mov	r0, r6
 800763a:	b003      	add	sp, #12
 800763c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007640:	6812      	ldr	r2, [r2, #0]
 8007642:	3b04      	subs	r3, #4
 8007644:	2a00      	cmp	r2, #0
 8007646:	d1ce      	bne.n	80075e6 <quorem+0x9a>
 8007648:	3c01      	subs	r4, #1
 800764a:	e7c9      	b.n	80075e0 <quorem+0x94>
 800764c:	6812      	ldr	r2, [r2, #0]
 800764e:	3b04      	subs	r3, #4
 8007650:	2a00      	cmp	r2, #0
 8007652:	d1f0      	bne.n	8007636 <quorem+0xea>
 8007654:	3c01      	subs	r4, #1
 8007656:	e7eb      	b.n	8007630 <quorem+0xe4>
 8007658:	2000      	movs	r0, #0
 800765a:	e7ee      	b.n	800763a <quorem+0xee>
 800765c:	0000      	movs	r0, r0
	...

08007660 <_dtoa_r>:
 8007660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	ed2d 8b04 	vpush	{d8-d9}
 8007668:	69c5      	ldr	r5, [r0, #28]
 800766a:	b093      	sub	sp, #76	; 0x4c
 800766c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007670:	ec57 6b10 	vmov	r6, r7, d0
 8007674:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007678:	9107      	str	r1, [sp, #28]
 800767a:	4604      	mov	r4, r0
 800767c:	920a      	str	r2, [sp, #40]	; 0x28
 800767e:	930d      	str	r3, [sp, #52]	; 0x34
 8007680:	b975      	cbnz	r5, 80076a0 <_dtoa_r+0x40>
 8007682:	2010      	movs	r0, #16
 8007684:	f000 fe2a 	bl	80082dc <malloc>
 8007688:	4602      	mov	r2, r0
 800768a:	61e0      	str	r0, [r4, #28]
 800768c:	b920      	cbnz	r0, 8007698 <_dtoa_r+0x38>
 800768e:	4bae      	ldr	r3, [pc, #696]	; (8007948 <_dtoa_r+0x2e8>)
 8007690:	21ef      	movs	r1, #239	; 0xef
 8007692:	48ae      	ldr	r0, [pc, #696]	; (800794c <_dtoa_r+0x2ec>)
 8007694:	f002 fc74 	bl	8009f80 <__assert_func>
 8007698:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800769c:	6005      	str	r5, [r0, #0]
 800769e:	60c5      	str	r5, [r0, #12]
 80076a0:	69e3      	ldr	r3, [r4, #28]
 80076a2:	6819      	ldr	r1, [r3, #0]
 80076a4:	b151      	cbz	r1, 80076bc <_dtoa_r+0x5c>
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	604a      	str	r2, [r1, #4]
 80076aa:	2301      	movs	r3, #1
 80076ac:	4093      	lsls	r3, r2
 80076ae:	608b      	str	r3, [r1, #8]
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 ff07 	bl	80084c4 <_Bfree>
 80076b6:	69e3      	ldr	r3, [r4, #28]
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]
 80076bc:	1e3b      	subs	r3, r7, #0
 80076be:	bfbb      	ittet	lt
 80076c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076c4:	9303      	strlt	r3, [sp, #12]
 80076c6:	2300      	movge	r3, #0
 80076c8:	2201      	movlt	r2, #1
 80076ca:	bfac      	ite	ge
 80076cc:	f8c8 3000 	strge.w	r3, [r8]
 80076d0:	f8c8 2000 	strlt.w	r2, [r8]
 80076d4:	4b9e      	ldr	r3, [pc, #632]	; (8007950 <_dtoa_r+0x2f0>)
 80076d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80076da:	ea33 0308 	bics.w	r3, r3, r8
 80076de:	d11b      	bne.n	8007718 <_dtoa_r+0xb8>
 80076e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80076ec:	4333      	orrs	r3, r6
 80076ee:	f000 8593 	beq.w	8008218 <_dtoa_r+0xbb8>
 80076f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076f4:	b963      	cbnz	r3, 8007710 <_dtoa_r+0xb0>
 80076f6:	4b97      	ldr	r3, [pc, #604]	; (8007954 <_dtoa_r+0x2f4>)
 80076f8:	e027      	b.n	800774a <_dtoa_r+0xea>
 80076fa:	4b97      	ldr	r3, [pc, #604]	; (8007958 <_dtoa_r+0x2f8>)
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007702:	6013      	str	r3, [r2, #0]
 8007704:	9800      	ldr	r0, [sp, #0]
 8007706:	b013      	add	sp, #76	; 0x4c
 8007708:	ecbd 8b04 	vpop	{d8-d9}
 800770c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007710:	4b90      	ldr	r3, [pc, #576]	; (8007954 <_dtoa_r+0x2f4>)
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	3303      	adds	r3, #3
 8007716:	e7f3      	b.n	8007700 <_dtoa_r+0xa0>
 8007718:	ed9d 7b02 	vldr	d7, [sp, #8]
 800771c:	2200      	movs	r2, #0
 800771e:	ec51 0b17 	vmov	r0, r1, d7
 8007722:	eeb0 8a47 	vmov.f32	s16, s14
 8007726:	eef0 8a67 	vmov.f32	s17, s15
 800772a:	2300      	movs	r3, #0
 800772c:	f7f9 f9cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007730:	4681      	mov	r9, r0
 8007732:	b160      	cbz	r0, 800774e <_dtoa_r+0xee>
 8007734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007736:	2301      	movs	r3, #1
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8568 	beq.w	8008212 <_dtoa_r+0xbb2>
 8007742:	4b86      	ldr	r3, [pc, #536]	; (800795c <_dtoa_r+0x2fc>)
 8007744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	3b01      	subs	r3, #1
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	e7da      	b.n	8007704 <_dtoa_r+0xa4>
 800774e:	aa10      	add	r2, sp, #64	; 0x40
 8007750:	a911      	add	r1, sp, #68	; 0x44
 8007752:	4620      	mov	r0, r4
 8007754:	eeb0 0a48 	vmov.f32	s0, s16
 8007758:	eef0 0a68 	vmov.f32	s1, s17
 800775c:	f001 fa4e 	bl	8008bfc <__d2b>
 8007760:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007764:	4682      	mov	sl, r0
 8007766:	2d00      	cmp	r5, #0
 8007768:	d07f      	beq.n	800786a <_dtoa_r+0x20a>
 800776a:	ee18 3a90 	vmov	r3, s17
 800776e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007772:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007776:	ec51 0b18 	vmov	r0, r1, d8
 800777a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800777e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007782:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007786:	4619      	mov	r1, r3
 8007788:	2200      	movs	r2, #0
 800778a:	4b75      	ldr	r3, [pc, #468]	; (8007960 <_dtoa_r+0x300>)
 800778c:	f7f8 fd7c 	bl	8000288 <__aeabi_dsub>
 8007790:	a367      	add	r3, pc, #412	; (adr r3, 8007930 <_dtoa_r+0x2d0>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	f7f8 ff2f 	bl	80005f8 <__aeabi_dmul>
 800779a:	a367      	add	r3, pc, #412	; (adr r3, 8007938 <_dtoa_r+0x2d8>)
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	f7f8 fd74 	bl	800028c <__adddf3>
 80077a4:	4606      	mov	r6, r0
 80077a6:	4628      	mov	r0, r5
 80077a8:	460f      	mov	r7, r1
 80077aa:	f7f8 febb 	bl	8000524 <__aeabi_i2d>
 80077ae:	a364      	add	r3, pc, #400	; (adr r3, 8007940 <_dtoa_r+0x2e0>)
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	f7f8 ff20 	bl	80005f8 <__aeabi_dmul>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4630      	mov	r0, r6
 80077be:	4639      	mov	r1, r7
 80077c0:	f7f8 fd64 	bl	800028c <__adddf3>
 80077c4:	4606      	mov	r6, r0
 80077c6:	460f      	mov	r7, r1
 80077c8:	f7f9 f9c6 	bl	8000b58 <__aeabi_d2iz>
 80077cc:	2200      	movs	r2, #0
 80077ce:	4683      	mov	fp, r0
 80077d0:	2300      	movs	r3, #0
 80077d2:	4630      	mov	r0, r6
 80077d4:	4639      	mov	r1, r7
 80077d6:	f7f9 f981 	bl	8000adc <__aeabi_dcmplt>
 80077da:	b148      	cbz	r0, 80077f0 <_dtoa_r+0x190>
 80077dc:	4658      	mov	r0, fp
 80077de:	f7f8 fea1 	bl	8000524 <__aeabi_i2d>
 80077e2:	4632      	mov	r2, r6
 80077e4:	463b      	mov	r3, r7
 80077e6:	f7f9 f96f 	bl	8000ac8 <__aeabi_dcmpeq>
 80077ea:	b908      	cbnz	r0, 80077f0 <_dtoa_r+0x190>
 80077ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077f0:	f1bb 0f16 	cmp.w	fp, #22
 80077f4:	d857      	bhi.n	80078a6 <_dtoa_r+0x246>
 80077f6:	4b5b      	ldr	r3, [pc, #364]	; (8007964 <_dtoa_r+0x304>)
 80077f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	ec51 0b18 	vmov	r0, r1, d8
 8007804:	f7f9 f96a 	bl	8000adc <__aeabi_dcmplt>
 8007808:	2800      	cmp	r0, #0
 800780a:	d04e      	beq.n	80078aa <_dtoa_r+0x24a>
 800780c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007810:	2300      	movs	r3, #0
 8007812:	930c      	str	r3, [sp, #48]	; 0x30
 8007814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007816:	1b5b      	subs	r3, r3, r5
 8007818:	1e5a      	subs	r2, r3, #1
 800781a:	bf45      	ittet	mi
 800781c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007820:	9305      	strmi	r3, [sp, #20]
 8007822:	2300      	movpl	r3, #0
 8007824:	2300      	movmi	r3, #0
 8007826:	9206      	str	r2, [sp, #24]
 8007828:	bf54      	ite	pl
 800782a:	9305      	strpl	r3, [sp, #20]
 800782c:	9306      	strmi	r3, [sp, #24]
 800782e:	f1bb 0f00 	cmp.w	fp, #0
 8007832:	db3c      	blt.n	80078ae <_dtoa_r+0x24e>
 8007834:	9b06      	ldr	r3, [sp, #24]
 8007836:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800783a:	445b      	add	r3, fp
 800783c:	9306      	str	r3, [sp, #24]
 800783e:	2300      	movs	r3, #0
 8007840:	9308      	str	r3, [sp, #32]
 8007842:	9b07      	ldr	r3, [sp, #28]
 8007844:	2b09      	cmp	r3, #9
 8007846:	d868      	bhi.n	800791a <_dtoa_r+0x2ba>
 8007848:	2b05      	cmp	r3, #5
 800784a:	bfc4      	itt	gt
 800784c:	3b04      	subgt	r3, #4
 800784e:	9307      	strgt	r3, [sp, #28]
 8007850:	9b07      	ldr	r3, [sp, #28]
 8007852:	f1a3 0302 	sub.w	r3, r3, #2
 8007856:	bfcc      	ite	gt
 8007858:	2500      	movgt	r5, #0
 800785a:	2501      	movle	r5, #1
 800785c:	2b03      	cmp	r3, #3
 800785e:	f200 8085 	bhi.w	800796c <_dtoa_r+0x30c>
 8007862:	e8df f003 	tbb	[pc, r3]
 8007866:	3b2e      	.short	0x3b2e
 8007868:	5839      	.short	0x5839
 800786a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800786e:	441d      	add	r5, r3
 8007870:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007874:	2b20      	cmp	r3, #32
 8007876:	bfc1      	itttt	gt
 8007878:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800787c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007880:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007884:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007888:	bfd6      	itet	le
 800788a:	f1c3 0320 	rsble	r3, r3, #32
 800788e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007892:	fa06 f003 	lslle.w	r0, r6, r3
 8007896:	f7f8 fe35 	bl	8000504 <__aeabi_ui2d>
 800789a:	2201      	movs	r2, #1
 800789c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80078a0:	3d01      	subs	r5, #1
 80078a2:	920e      	str	r2, [sp, #56]	; 0x38
 80078a4:	e76f      	b.n	8007786 <_dtoa_r+0x126>
 80078a6:	2301      	movs	r3, #1
 80078a8:	e7b3      	b.n	8007812 <_dtoa_r+0x1b2>
 80078aa:	900c      	str	r0, [sp, #48]	; 0x30
 80078ac:	e7b2      	b.n	8007814 <_dtoa_r+0x1b4>
 80078ae:	9b05      	ldr	r3, [sp, #20]
 80078b0:	eba3 030b 	sub.w	r3, r3, fp
 80078b4:	9305      	str	r3, [sp, #20]
 80078b6:	f1cb 0300 	rsb	r3, fp, #0
 80078ba:	9308      	str	r3, [sp, #32]
 80078bc:	2300      	movs	r3, #0
 80078be:	930b      	str	r3, [sp, #44]	; 0x2c
 80078c0:	e7bf      	b.n	8007842 <_dtoa_r+0x1e2>
 80078c2:	2300      	movs	r3, #0
 80078c4:	9309      	str	r3, [sp, #36]	; 0x24
 80078c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	dc52      	bgt.n	8007972 <_dtoa_r+0x312>
 80078cc:	2301      	movs	r3, #1
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	461a      	mov	r2, r3
 80078d4:	920a      	str	r2, [sp, #40]	; 0x28
 80078d6:	e00b      	b.n	80078f0 <_dtoa_r+0x290>
 80078d8:	2301      	movs	r3, #1
 80078da:	e7f3      	b.n	80078c4 <_dtoa_r+0x264>
 80078dc:	2300      	movs	r3, #0
 80078de:	9309      	str	r3, [sp, #36]	; 0x24
 80078e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e2:	445b      	add	r3, fp
 80078e4:	9301      	str	r3, [sp, #4]
 80078e6:	3301      	adds	r3, #1
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	bfb8      	it	lt
 80078ee:	2301      	movlt	r3, #1
 80078f0:	69e0      	ldr	r0, [r4, #28]
 80078f2:	2100      	movs	r1, #0
 80078f4:	2204      	movs	r2, #4
 80078f6:	f102 0614 	add.w	r6, r2, #20
 80078fa:	429e      	cmp	r6, r3
 80078fc:	d93d      	bls.n	800797a <_dtoa_r+0x31a>
 80078fe:	6041      	str	r1, [r0, #4]
 8007900:	4620      	mov	r0, r4
 8007902:	f000 fd9f 	bl	8008444 <_Balloc>
 8007906:	9000      	str	r0, [sp, #0]
 8007908:	2800      	cmp	r0, #0
 800790a:	d139      	bne.n	8007980 <_dtoa_r+0x320>
 800790c:	4b16      	ldr	r3, [pc, #88]	; (8007968 <_dtoa_r+0x308>)
 800790e:	4602      	mov	r2, r0
 8007910:	f240 11af 	movw	r1, #431	; 0x1af
 8007914:	e6bd      	b.n	8007692 <_dtoa_r+0x32>
 8007916:	2301      	movs	r3, #1
 8007918:	e7e1      	b.n	80078de <_dtoa_r+0x27e>
 800791a:	2501      	movs	r5, #1
 800791c:	2300      	movs	r3, #0
 800791e:	9307      	str	r3, [sp, #28]
 8007920:	9509      	str	r5, [sp, #36]	; 0x24
 8007922:	f04f 33ff 	mov.w	r3, #4294967295
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	9304      	str	r3, [sp, #16]
 800792a:	2200      	movs	r2, #0
 800792c:	2312      	movs	r3, #18
 800792e:	e7d1      	b.n	80078d4 <_dtoa_r+0x274>
 8007930:	636f4361 	.word	0x636f4361
 8007934:	3fd287a7 	.word	0x3fd287a7
 8007938:	8b60c8b3 	.word	0x8b60c8b3
 800793c:	3fc68a28 	.word	0x3fc68a28
 8007940:	509f79fb 	.word	0x509f79fb
 8007944:	3fd34413 	.word	0x3fd34413
 8007948:	0800bcba 	.word	0x0800bcba
 800794c:	0800bcd1 	.word	0x0800bcd1
 8007950:	7ff00000 	.word	0x7ff00000
 8007954:	0800bcb6 	.word	0x0800bcb6
 8007958:	0800bcad 	.word	0x0800bcad
 800795c:	0800bc85 	.word	0x0800bc85
 8007960:	3ff80000 	.word	0x3ff80000
 8007964:	0800bdc0 	.word	0x0800bdc0
 8007968:	0800bd29 	.word	0x0800bd29
 800796c:	2301      	movs	r3, #1
 800796e:	9309      	str	r3, [sp, #36]	; 0x24
 8007970:	e7d7      	b.n	8007922 <_dtoa_r+0x2c2>
 8007972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	9304      	str	r3, [sp, #16]
 8007978:	e7ba      	b.n	80078f0 <_dtoa_r+0x290>
 800797a:	3101      	adds	r1, #1
 800797c:	0052      	lsls	r2, r2, #1
 800797e:	e7ba      	b.n	80078f6 <_dtoa_r+0x296>
 8007980:	69e3      	ldr	r3, [r4, #28]
 8007982:	9a00      	ldr	r2, [sp, #0]
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	9b04      	ldr	r3, [sp, #16]
 8007988:	2b0e      	cmp	r3, #14
 800798a:	f200 80a8 	bhi.w	8007ade <_dtoa_r+0x47e>
 800798e:	2d00      	cmp	r5, #0
 8007990:	f000 80a5 	beq.w	8007ade <_dtoa_r+0x47e>
 8007994:	f1bb 0f00 	cmp.w	fp, #0
 8007998:	dd38      	ble.n	8007a0c <_dtoa_r+0x3ac>
 800799a:	4bc0      	ldr	r3, [pc, #768]	; (8007c9c <_dtoa_r+0x63c>)
 800799c:	f00b 020f 	and.w	r2, fp, #15
 80079a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80079a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80079ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80079b0:	d019      	beq.n	80079e6 <_dtoa_r+0x386>
 80079b2:	4bbb      	ldr	r3, [pc, #748]	; (8007ca0 <_dtoa_r+0x640>)
 80079b4:	ec51 0b18 	vmov	r0, r1, d8
 80079b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079bc:	f7f8 ff46 	bl	800084c <__aeabi_ddiv>
 80079c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079c4:	f008 080f 	and.w	r8, r8, #15
 80079c8:	2503      	movs	r5, #3
 80079ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007ca0 <_dtoa_r+0x640>
 80079ce:	f1b8 0f00 	cmp.w	r8, #0
 80079d2:	d10a      	bne.n	80079ea <_dtoa_r+0x38a>
 80079d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079d8:	4632      	mov	r2, r6
 80079da:	463b      	mov	r3, r7
 80079dc:	f7f8 ff36 	bl	800084c <__aeabi_ddiv>
 80079e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079e4:	e02b      	b.n	8007a3e <_dtoa_r+0x3de>
 80079e6:	2502      	movs	r5, #2
 80079e8:	e7ef      	b.n	80079ca <_dtoa_r+0x36a>
 80079ea:	f018 0f01 	tst.w	r8, #1
 80079ee:	d008      	beq.n	8007a02 <_dtoa_r+0x3a2>
 80079f0:	4630      	mov	r0, r6
 80079f2:	4639      	mov	r1, r7
 80079f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80079f8:	f7f8 fdfe 	bl	80005f8 <__aeabi_dmul>
 80079fc:	3501      	adds	r5, #1
 80079fe:	4606      	mov	r6, r0
 8007a00:	460f      	mov	r7, r1
 8007a02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a06:	f109 0908 	add.w	r9, r9, #8
 8007a0a:	e7e0      	b.n	80079ce <_dtoa_r+0x36e>
 8007a0c:	f000 809f 	beq.w	8007b4e <_dtoa_r+0x4ee>
 8007a10:	f1cb 0600 	rsb	r6, fp, #0
 8007a14:	4ba1      	ldr	r3, [pc, #644]	; (8007c9c <_dtoa_r+0x63c>)
 8007a16:	4fa2      	ldr	r7, [pc, #648]	; (8007ca0 <_dtoa_r+0x640>)
 8007a18:	f006 020f 	and.w	r2, r6, #15
 8007a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	ec51 0b18 	vmov	r0, r1, d8
 8007a28:	f7f8 fde6 	bl	80005f8 <__aeabi_dmul>
 8007a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a30:	1136      	asrs	r6, r6, #4
 8007a32:	2300      	movs	r3, #0
 8007a34:	2502      	movs	r5, #2
 8007a36:	2e00      	cmp	r6, #0
 8007a38:	d17e      	bne.n	8007b38 <_dtoa_r+0x4d8>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1d0      	bne.n	80079e0 <_dtoa_r+0x380>
 8007a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 8084 	beq.w	8007b52 <_dtoa_r+0x4f2>
 8007a4a:	4b96      	ldr	r3, [pc, #600]	; (8007ca4 <_dtoa_r+0x644>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	4640      	mov	r0, r8
 8007a50:	4649      	mov	r1, r9
 8007a52:	f7f9 f843 	bl	8000adc <__aeabi_dcmplt>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d07b      	beq.n	8007b52 <_dtoa_r+0x4f2>
 8007a5a:	9b04      	ldr	r3, [sp, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d078      	beq.n	8007b52 <_dtoa_r+0x4f2>
 8007a60:	9b01      	ldr	r3, [sp, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	dd39      	ble.n	8007ada <_dtoa_r+0x47a>
 8007a66:	4b90      	ldr	r3, [pc, #576]	; (8007ca8 <_dtoa_r+0x648>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	f7f8 fdc3 	bl	80005f8 <__aeabi_dmul>
 8007a72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a76:	9e01      	ldr	r6, [sp, #4]
 8007a78:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007a7c:	3501      	adds	r5, #1
 8007a7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a82:	4628      	mov	r0, r5
 8007a84:	f7f8 fd4e 	bl	8000524 <__aeabi_i2d>
 8007a88:	4642      	mov	r2, r8
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	f7f8 fdb4 	bl	80005f8 <__aeabi_dmul>
 8007a90:	4b86      	ldr	r3, [pc, #536]	; (8007cac <_dtoa_r+0x64c>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	f7f8 fbfa 	bl	800028c <__adddf3>
 8007a98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aa0:	9303      	str	r3, [sp, #12]
 8007aa2:	2e00      	cmp	r6, #0
 8007aa4:	d158      	bne.n	8007b58 <_dtoa_r+0x4f8>
 8007aa6:	4b82      	ldr	r3, [pc, #520]	; (8007cb0 <_dtoa_r+0x650>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4640      	mov	r0, r8
 8007aac:	4649      	mov	r1, r9
 8007aae:	f7f8 fbeb 	bl	8000288 <__aeabi_dsub>
 8007ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ab6:	4680      	mov	r8, r0
 8007ab8:	4689      	mov	r9, r1
 8007aba:	f7f9 f82d 	bl	8000b18 <__aeabi_dcmpgt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	f040 8296 	bne.w	8007ff0 <_dtoa_r+0x990>
 8007ac4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007ac8:	4640      	mov	r0, r8
 8007aca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ace:	4649      	mov	r1, r9
 8007ad0:	f7f9 f804 	bl	8000adc <__aeabi_dcmplt>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f040 8289 	bne.w	8007fec <_dtoa_r+0x98c>
 8007ada:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f2c0 814e 	blt.w	8007d82 <_dtoa_r+0x722>
 8007ae6:	f1bb 0f0e 	cmp.w	fp, #14
 8007aea:	f300 814a 	bgt.w	8007d82 <_dtoa_r+0x722>
 8007aee:	4b6b      	ldr	r3, [pc, #428]	; (8007c9c <_dtoa_r+0x63c>)
 8007af0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007af4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f280 80dc 	bge.w	8007cb8 <_dtoa_r+0x658>
 8007b00:	9b04      	ldr	r3, [sp, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f300 80d8 	bgt.w	8007cb8 <_dtoa_r+0x658>
 8007b08:	f040 826f 	bne.w	8007fea <_dtoa_r+0x98a>
 8007b0c:	4b68      	ldr	r3, [pc, #416]	; (8007cb0 <_dtoa_r+0x650>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	4640      	mov	r0, r8
 8007b12:	4649      	mov	r1, r9
 8007b14:	f7f8 fd70 	bl	80005f8 <__aeabi_dmul>
 8007b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b1c:	f7f8 fff2 	bl	8000b04 <__aeabi_dcmpge>
 8007b20:	9e04      	ldr	r6, [sp, #16]
 8007b22:	4637      	mov	r7, r6
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f040 8245 	bne.w	8007fb4 <_dtoa_r+0x954>
 8007b2a:	9d00      	ldr	r5, [sp, #0]
 8007b2c:	2331      	movs	r3, #49	; 0x31
 8007b2e:	f805 3b01 	strb.w	r3, [r5], #1
 8007b32:	f10b 0b01 	add.w	fp, fp, #1
 8007b36:	e241      	b.n	8007fbc <_dtoa_r+0x95c>
 8007b38:	07f2      	lsls	r2, r6, #31
 8007b3a:	d505      	bpl.n	8007b48 <_dtoa_r+0x4e8>
 8007b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b40:	f7f8 fd5a 	bl	80005f8 <__aeabi_dmul>
 8007b44:	3501      	adds	r5, #1
 8007b46:	2301      	movs	r3, #1
 8007b48:	1076      	asrs	r6, r6, #1
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	e773      	b.n	8007a36 <_dtoa_r+0x3d6>
 8007b4e:	2502      	movs	r5, #2
 8007b50:	e775      	b.n	8007a3e <_dtoa_r+0x3de>
 8007b52:	9e04      	ldr	r6, [sp, #16]
 8007b54:	465f      	mov	r7, fp
 8007b56:	e792      	b.n	8007a7e <_dtoa_r+0x41e>
 8007b58:	9900      	ldr	r1, [sp, #0]
 8007b5a:	4b50      	ldr	r3, [pc, #320]	; (8007c9c <_dtoa_r+0x63c>)
 8007b5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b60:	4431      	add	r1, r6
 8007b62:	9102      	str	r1, [sp, #8]
 8007b64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b66:	eeb0 9a47 	vmov.f32	s18, s14
 8007b6a:	eef0 9a67 	vmov.f32	s19, s15
 8007b6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b76:	2900      	cmp	r1, #0
 8007b78:	d044      	beq.n	8007c04 <_dtoa_r+0x5a4>
 8007b7a:	494e      	ldr	r1, [pc, #312]	; (8007cb4 <_dtoa_r+0x654>)
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	f7f8 fe65 	bl	800084c <__aeabi_ddiv>
 8007b82:	ec53 2b19 	vmov	r2, r3, d9
 8007b86:	f7f8 fb7f 	bl	8000288 <__aeabi_dsub>
 8007b8a:	9d00      	ldr	r5, [sp, #0]
 8007b8c:	ec41 0b19 	vmov	d9, r0, r1
 8007b90:	4649      	mov	r1, r9
 8007b92:	4640      	mov	r0, r8
 8007b94:	f7f8 ffe0 	bl	8000b58 <__aeabi_d2iz>
 8007b98:	4606      	mov	r6, r0
 8007b9a:	f7f8 fcc3 	bl	8000524 <__aeabi_i2d>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	f7f8 fb6f 	bl	8000288 <__aeabi_dsub>
 8007baa:	3630      	adds	r6, #48	; 0x30
 8007bac:	f805 6b01 	strb.w	r6, [r5], #1
 8007bb0:	ec53 2b19 	vmov	r2, r3, d9
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	4689      	mov	r9, r1
 8007bb8:	f7f8 ff90 	bl	8000adc <__aeabi_dcmplt>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d164      	bne.n	8007c8a <_dtoa_r+0x62a>
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	4937      	ldr	r1, [pc, #220]	; (8007ca4 <_dtoa_r+0x644>)
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	f7f8 fb5e 	bl	8000288 <__aeabi_dsub>
 8007bcc:	ec53 2b19 	vmov	r2, r3, d9
 8007bd0:	f7f8 ff84 	bl	8000adc <__aeabi_dcmplt>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	f040 80b6 	bne.w	8007d46 <_dtoa_r+0x6e6>
 8007bda:	9b02      	ldr	r3, [sp, #8]
 8007bdc:	429d      	cmp	r5, r3
 8007bde:	f43f af7c 	beq.w	8007ada <_dtoa_r+0x47a>
 8007be2:	4b31      	ldr	r3, [pc, #196]	; (8007ca8 <_dtoa_r+0x648>)
 8007be4:	ec51 0b19 	vmov	r0, r1, d9
 8007be8:	2200      	movs	r2, #0
 8007bea:	f7f8 fd05 	bl	80005f8 <__aeabi_dmul>
 8007bee:	4b2e      	ldr	r3, [pc, #184]	; (8007ca8 <_dtoa_r+0x648>)
 8007bf0:	ec41 0b19 	vmov	d9, r0, r1
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	f7f8 fcfd 	bl	80005f8 <__aeabi_dmul>
 8007bfe:	4680      	mov	r8, r0
 8007c00:	4689      	mov	r9, r1
 8007c02:	e7c5      	b.n	8007b90 <_dtoa_r+0x530>
 8007c04:	ec51 0b17 	vmov	r0, r1, d7
 8007c08:	f7f8 fcf6 	bl	80005f8 <__aeabi_dmul>
 8007c0c:	9b02      	ldr	r3, [sp, #8]
 8007c0e:	9d00      	ldr	r5, [sp, #0]
 8007c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c12:	ec41 0b19 	vmov	d9, r0, r1
 8007c16:	4649      	mov	r1, r9
 8007c18:	4640      	mov	r0, r8
 8007c1a:	f7f8 ff9d 	bl	8000b58 <__aeabi_d2iz>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	f7f8 fc80 	bl	8000524 <__aeabi_i2d>
 8007c24:	3630      	adds	r6, #48	; 0x30
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	f7f8 fb2b 	bl	8000288 <__aeabi_dsub>
 8007c32:	f805 6b01 	strb.w	r6, [r5], #1
 8007c36:	9b02      	ldr	r3, [sp, #8]
 8007c38:	429d      	cmp	r5, r3
 8007c3a:	4680      	mov	r8, r0
 8007c3c:	4689      	mov	r9, r1
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	d124      	bne.n	8007c8e <_dtoa_r+0x62e>
 8007c44:	4b1b      	ldr	r3, [pc, #108]	; (8007cb4 <_dtoa_r+0x654>)
 8007c46:	ec51 0b19 	vmov	r0, r1, d9
 8007c4a:	f7f8 fb1f 	bl	800028c <__adddf3>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4640      	mov	r0, r8
 8007c54:	4649      	mov	r1, r9
 8007c56:	f7f8 ff5f 	bl	8000b18 <__aeabi_dcmpgt>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d173      	bne.n	8007d46 <_dtoa_r+0x6e6>
 8007c5e:	ec53 2b19 	vmov	r2, r3, d9
 8007c62:	4914      	ldr	r1, [pc, #80]	; (8007cb4 <_dtoa_r+0x654>)
 8007c64:	2000      	movs	r0, #0
 8007c66:	f7f8 fb0f 	bl	8000288 <__aeabi_dsub>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4640      	mov	r0, r8
 8007c70:	4649      	mov	r1, r9
 8007c72:	f7f8 ff33 	bl	8000adc <__aeabi_dcmplt>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	f43f af2f 	beq.w	8007ada <_dtoa_r+0x47a>
 8007c7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c7e:	1e6b      	subs	r3, r5, #1
 8007c80:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c86:	2b30      	cmp	r3, #48	; 0x30
 8007c88:	d0f8      	beq.n	8007c7c <_dtoa_r+0x61c>
 8007c8a:	46bb      	mov	fp, r7
 8007c8c:	e04a      	b.n	8007d24 <_dtoa_r+0x6c4>
 8007c8e:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <_dtoa_r+0x648>)
 8007c90:	f7f8 fcb2 	bl	80005f8 <__aeabi_dmul>
 8007c94:	4680      	mov	r8, r0
 8007c96:	4689      	mov	r9, r1
 8007c98:	e7bd      	b.n	8007c16 <_dtoa_r+0x5b6>
 8007c9a:	bf00      	nop
 8007c9c:	0800bdc0 	.word	0x0800bdc0
 8007ca0:	0800bd98 	.word	0x0800bd98
 8007ca4:	3ff00000 	.word	0x3ff00000
 8007ca8:	40240000 	.word	0x40240000
 8007cac:	401c0000 	.word	0x401c0000
 8007cb0:	40140000 	.word	0x40140000
 8007cb4:	3fe00000 	.word	0x3fe00000
 8007cb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007cbc:	9d00      	ldr	r5, [sp, #0]
 8007cbe:	4642      	mov	r2, r8
 8007cc0:	464b      	mov	r3, r9
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	f7f8 fdc1 	bl	800084c <__aeabi_ddiv>
 8007cca:	f7f8 ff45 	bl	8000b58 <__aeabi_d2iz>
 8007cce:	9001      	str	r0, [sp, #4]
 8007cd0:	f7f8 fc28 	bl	8000524 <__aeabi_i2d>
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	f7f8 fc8e 	bl	80005f8 <__aeabi_dmul>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	f7f8 fad0 	bl	8000288 <__aeabi_dsub>
 8007ce8:	9e01      	ldr	r6, [sp, #4]
 8007cea:	9f04      	ldr	r7, [sp, #16]
 8007cec:	3630      	adds	r6, #48	; 0x30
 8007cee:	f805 6b01 	strb.w	r6, [r5], #1
 8007cf2:	9e00      	ldr	r6, [sp, #0]
 8007cf4:	1bae      	subs	r6, r5, r6
 8007cf6:	42b7      	cmp	r7, r6
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	d134      	bne.n	8007d68 <_dtoa_r+0x708>
 8007cfe:	f7f8 fac5 	bl	800028c <__adddf3>
 8007d02:	4642      	mov	r2, r8
 8007d04:	464b      	mov	r3, r9
 8007d06:	4606      	mov	r6, r0
 8007d08:	460f      	mov	r7, r1
 8007d0a:	f7f8 ff05 	bl	8000b18 <__aeabi_dcmpgt>
 8007d0e:	b9c8      	cbnz	r0, 8007d44 <_dtoa_r+0x6e4>
 8007d10:	4642      	mov	r2, r8
 8007d12:	464b      	mov	r3, r9
 8007d14:	4630      	mov	r0, r6
 8007d16:	4639      	mov	r1, r7
 8007d18:	f7f8 fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d1c:	b110      	cbz	r0, 8007d24 <_dtoa_r+0x6c4>
 8007d1e:	9b01      	ldr	r3, [sp, #4]
 8007d20:	07db      	lsls	r3, r3, #31
 8007d22:	d40f      	bmi.n	8007d44 <_dtoa_r+0x6e4>
 8007d24:	4651      	mov	r1, sl
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 fbcc 	bl	80084c4 <_Bfree>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d30:	702b      	strb	r3, [r5, #0]
 8007d32:	f10b 0301 	add.w	r3, fp, #1
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f43f ace2 	beq.w	8007704 <_dtoa_r+0xa4>
 8007d40:	601d      	str	r5, [r3, #0]
 8007d42:	e4df      	b.n	8007704 <_dtoa_r+0xa4>
 8007d44:	465f      	mov	r7, fp
 8007d46:	462b      	mov	r3, r5
 8007d48:	461d      	mov	r5, r3
 8007d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d4e:	2a39      	cmp	r2, #57	; 0x39
 8007d50:	d106      	bne.n	8007d60 <_dtoa_r+0x700>
 8007d52:	9a00      	ldr	r2, [sp, #0]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d1f7      	bne.n	8007d48 <_dtoa_r+0x6e8>
 8007d58:	9900      	ldr	r1, [sp, #0]
 8007d5a:	2230      	movs	r2, #48	; 0x30
 8007d5c:	3701      	adds	r7, #1
 8007d5e:	700a      	strb	r2, [r1, #0]
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	3201      	adds	r2, #1
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	e790      	b.n	8007c8a <_dtoa_r+0x62a>
 8007d68:	4ba3      	ldr	r3, [pc, #652]	; (8007ff8 <_dtoa_r+0x998>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f7f8 fc44 	bl	80005f8 <__aeabi_dmul>
 8007d70:	2200      	movs	r2, #0
 8007d72:	2300      	movs	r3, #0
 8007d74:	4606      	mov	r6, r0
 8007d76:	460f      	mov	r7, r1
 8007d78:	f7f8 fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d09e      	beq.n	8007cbe <_dtoa_r+0x65e>
 8007d80:	e7d0      	b.n	8007d24 <_dtoa_r+0x6c4>
 8007d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d84:	2a00      	cmp	r2, #0
 8007d86:	f000 80ca 	beq.w	8007f1e <_dtoa_r+0x8be>
 8007d8a:	9a07      	ldr	r2, [sp, #28]
 8007d8c:	2a01      	cmp	r2, #1
 8007d8e:	f300 80ad 	bgt.w	8007eec <_dtoa_r+0x88c>
 8007d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d94:	2a00      	cmp	r2, #0
 8007d96:	f000 80a5 	beq.w	8007ee4 <_dtoa_r+0x884>
 8007d9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d9e:	9e08      	ldr	r6, [sp, #32]
 8007da0:	9d05      	ldr	r5, [sp, #20]
 8007da2:	9a05      	ldr	r2, [sp, #20]
 8007da4:	441a      	add	r2, r3
 8007da6:	9205      	str	r2, [sp, #20]
 8007da8:	9a06      	ldr	r2, [sp, #24]
 8007daa:	2101      	movs	r1, #1
 8007dac:	441a      	add	r2, r3
 8007dae:	4620      	mov	r0, r4
 8007db0:	9206      	str	r2, [sp, #24]
 8007db2:	f000 fc87 	bl	80086c4 <__i2b>
 8007db6:	4607      	mov	r7, r0
 8007db8:	b165      	cbz	r5, 8007dd4 <_dtoa_r+0x774>
 8007dba:	9b06      	ldr	r3, [sp, #24]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dd09      	ble.n	8007dd4 <_dtoa_r+0x774>
 8007dc0:	42ab      	cmp	r3, r5
 8007dc2:	9a05      	ldr	r2, [sp, #20]
 8007dc4:	bfa8      	it	ge
 8007dc6:	462b      	movge	r3, r5
 8007dc8:	1ad2      	subs	r2, r2, r3
 8007dca:	9205      	str	r2, [sp, #20]
 8007dcc:	9a06      	ldr	r2, [sp, #24]
 8007dce:	1aed      	subs	r5, r5, r3
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	9306      	str	r3, [sp, #24]
 8007dd4:	9b08      	ldr	r3, [sp, #32]
 8007dd6:	b1f3      	cbz	r3, 8007e16 <_dtoa_r+0x7b6>
 8007dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 80a3 	beq.w	8007f26 <_dtoa_r+0x8c6>
 8007de0:	2e00      	cmp	r6, #0
 8007de2:	dd10      	ble.n	8007e06 <_dtoa_r+0x7a6>
 8007de4:	4639      	mov	r1, r7
 8007de6:	4632      	mov	r2, r6
 8007de8:	4620      	mov	r0, r4
 8007dea:	f000 fd2b 	bl	8008844 <__pow5mult>
 8007dee:	4652      	mov	r2, sl
 8007df0:	4601      	mov	r1, r0
 8007df2:	4607      	mov	r7, r0
 8007df4:	4620      	mov	r0, r4
 8007df6:	f000 fc7b 	bl	80086f0 <__multiply>
 8007dfa:	4651      	mov	r1, sl
 8007dfc:	4680      	mov	r8, r0
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fb60 	bl	80084c4 <_Bfree>
 8007e04:	46c2      	mov	sl, r8
 8007e06:	9b08      	ldr	r3, [sp, #32]
 8007e08:	1b9a      	subs	r2, r3, r6
 8007e0a:	d004      	beq.n	8007e16 <_dtoa_r+0x7b6>
 8007e0c:	4651      	mov	r1, sl
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 fd18 	bl	8008844 <__pow5mult>
 8007e14:	4682      	mov	sl, r0
 8007e16:	2101      	movs	r1, #1
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 fc53 	bl	80086c4 <__i2b>
 8007e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	4606      	mov	r6, r0
 8007e24:	f340 8081 	ble.w	8007f2a <_dtoa_r+0x8ca>
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f000 fd09 	bl	8008844 <__pow5mult>
 8007e32:	9b07      	ldr	r3, [sp, #28]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	4606      	mov	r6, r0
 8007e38:	dd7a      	ble.n	8007f30 <_dtoa_r+0x8d0>
 8007e3a:	f04f 0800 	mov.w	r8, #0
 8007e3e:	6933      	ldr	r3, [r6, #16]
 8007e40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e44:	6918      	ldr	r0, [r3, #16]
 8007e46:	f000 fbef 	bl	8008628 <__hi0bits>
 8007e4a:	f1c0 0020 	rsb	r0, r0, #32
 8007e4e:	9b06      	ldr	r3, [sp, #24]
 8007e50:	4418      	add	r0, r3
 8007e52:	f010 001f 	ands.w	r0, r0, #31
 8007e56:	f000 8094 	beq.w	8007f82 <_dtoa_r+0x922>
 8007e5a:	f1c0 0320 	rsb	r3, r0, #32
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	f340 8085 	ble.w	8007f6e <_dtoa_r+0x90e>
 8007e64:	9b05      	ldr	r3, [sp, #20]
 8007e66:	f1c0 001c 	rsb	r0, r0, #28
 8007e6a:	4403      	add	r3, r0
 8007e6c:	9305      	str	r3, [sp, #20]
 8007e6e:	9b06      	ldr	r3, [sp, #24]
 8007e70:	4403      	add	r3, r0
 8007e72:	4405      	add	r5, r0
 8007e74:	9306      	str	r3, [sp, #24]
 8007e76:	9b05      	ldr	r3, [sp, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	dd05      	ble.n	8007e88 <_dtoa_r+0x828>
 8007e7c:	4651      	mov	r1, sl
 8007e7e:	461a      	mov	r2, r3
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 fd39 	bl	80088f8 <__lshift>
 8007e86:	4682      	mov	sl, r0
 8007e88:	9b06      	ldr	r3, [sp, #24]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	dd05      	ble.n	8007e9a <_dtoa_r+0x83a>
 8007e8e:	4631      	mov	r1, r6
 8007e90:	461a      	mov	r2, r3
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 fd30 	bl	80088f8 <__lshift>
 8007e98:	4606      	mov	r6, r0
 8007e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d072      	beq.n	8007f86 <_dtoa_r+0x926>
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	f000 fd94 	bl	80089d0 <__mcmp>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	da6c      	bge.n	8007f86 <_dtoa_r+0x926>
 8007eac:	2300      	movs	r3, #0
 8007eae:	4651      	mov	r1, sl
 8007eb0:	220a      	movs	r2, #10
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 fb28 	bl	8008508 <__multadd>
 8007eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ebe:	4682      	mov	sl, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 81b0 	beq.w	8008226 <_dtoa_r+0xbc6>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	4639      	mov	r1, r7
 8007eca:	220a      	movs	r2, #10
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 fb1b 	bl	8008508 <__multadd>
 8007ed2:	9b01      	ldr	r3, [sp, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	4607      	mov	r7, r0
 8007ed8:	f300 8096 	bgt.w	8008008 <_dtoa_r+0x9a8>
 8007edc:	9b07      	ldr	r3, [sp, #28]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	dc59      	bgt.n	8007f96 <_dtoa_r+0x936>
 8007ee2:	e091      	b.n	8008008 <_dtoa_r+0x9a8>
 8007ee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ee6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007eea:	e758      	b.n	8007d9e <_dtoa_r+0x73e>
 8007eec:	9b04      	ldr	r3, [sp, #16]
 8007eee:	1e5e      	subs	r6, r3, #1
 8007ef0:	9b08      	ldr	r3, [sp, #32]
 8007ef2:	42b3      	cmp	r3, r6
 8007ef4:	bfbf      	itttt	lt
 8007ef6:	9b08      	ldrlt	r3, [sp, #32]
 8007ef8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007efa:	9608      	strlt	r6, [sp, #32]
 8007efc:	1af3      	sublt	r3, r6, r3
 8007efe:	bfb4      	ite	lt
 8007f00:	18d2      	addlt	r2, r2, r3
 8007f02:	1b9e      	subge	r6, r3, r6
 8007f04:	9b04      	ldr	r3, [sp, #16]
 8007f06:	bfbc      	itt	lt
 8007f08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007f0a:	2600      	movlt	r6, #0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bfb7      	itett	lt
 8007f10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007f14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007f18:	1a9d      	sublt	r5, r3, r2
 8007f1a:	2300      	movlt	r3, #0
 8007f1c:	e741      	b.n	8007da2 <_dtoa_r+0x742>
 8007f1e:	9e08      	ldr	r6, [sp, #32]
 8007f20:	9d05      	ldr	r5, [sp, #20]
 8007f22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f24:	e748      	b.n	8007db8 <_dtoa_r+0x758>
 8007f26:	9a08      	ldr	r2, [sp, #32]
 8007f28:	e770      	b.n	8007e0c <_dtoa_r+0x7ac>
 8007f2a:	9b07      	ldr	r3, [sp, #28]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	dc19      	bgt.n	8007f64 <_dtoa_r+0x904>
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	b9bb      	cbnz	r3, 8007f64 <_dtoa_r+0x904>
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f3a:	b99b      	cbnz	r3, 8007f64 <_dtoa_r+0x904>
 8007f3c:	9b03      	ldr	r3, [sp, #12]
 8007f3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f42:	0d1b      	lsrs	r3, r3, #20
 8007f44:	051b      	lsls	r3, r3, #20
 8007f46:	b183      	cbz	r3, 8007f6a <_dtoa_r+0x90a>
 8007f48:	9b05      	ldr	r3, [sp, #20]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	9305      	str	r3, [sp, #20]
 8007f4e:	9b06      	ldr	r3, [sp, #24]
 8007f50:	3301      	adds	r3, #1
 8007f52:	9306      	str	r3, [sp, #24]
 8007f54:	f04f 0801 	mov.w	r8, #1
 8007f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f47f af6f 	bne.w	8007e3e <_dtoa_r+0x7de>
 8007f60:	2001      	movs	r0, #1
 8007f62:	e774      	b.n	8007e4e <_dtoa_r+0x7ee>
 8007f64:	f04f 0800 	mov.w	r8, #0
 8007f68:	e7f6      	b.n	8007f58 <_dtoa_r+0x8f8>
 8007f6a:	4698      	mov	r8, r3
 8007f6c:	e7f4      	b.n	8007f58 <_dtoa_r+0x8f8>
 8007f6e:	d082      	beq.n	8007e76 <_dtoa_r+0x816>
 8007f70:	9a05      	ldr	r2, [sp, #20]
 8007f72:	331c      	adds	r3, #28
 8007f74:	441a      	add	r2, r3
 8007f76:	9205      	str	r2, [sp, #20]
 8007f78:	9a06      	ldr	r2, [sp, #24]
 8007f7a:	441a      	add	r2, r3
 8007f7c:	441d      	add	r5, r3
 8007f7e:	9206      	str	r2, [sp, #24]
 8007f80:	e779      	b.n	8007e76 <_dtoa_r+0x816>
 8007f82:	4603      	mov	r3, r0
 8007f84:	e7f4      	b.n	8007f70 <_dtoa_r+0x910>
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	dc37      	bgt.n	8007ffc <_dtoa_r+0x99c>
 8007f8c:	9b07      	ldr	r3, [sp, #28]
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	dd34      	ble.n	8007ffc <_dtoa_r+0x99c>
 8007f92:	9b04      	ldr	r3, [sp, #16]
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	9b01      	ldr	r3, [sp, #4]
 8007f98:	b963      	cbnz	r3, 8007fb4 <_dtoa_r+0x954>
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	2205      	movs	r2, #5
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 fab2 	bl	8008508 <__multadd>
 8007fa4:	4601      	mov	r1, r0
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	4650      	mov	r0, sl
 8007faa:	f000 fd11 	bl	80089d0 <__mcmp>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f73f adbb 	bgt.w	8007b2a <_dtoa_r+0x4ca>
 8007fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb6:	9d00      	ldr	r5, [sp, #0]
 8007fb8:	ea6f 0b03 	mvn.w	fp, r3
 8007fbc:	f04f 0800 	mov.w	r8, #0
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 fa7e 	bl	80084c4 <_Bfree>
 8007fc8:	2f00      	cmp	r7, #0
 8007fca:	f43f aeab 	beq.w	8007d24 <_dtoa_r+0x6c4>
 8007fce:	f1b8 0f00 	cmp.w	r8, #0
 8007fd2:	d005      	beq.n	8007fe0 <_dtoa_r+0x980>
 8007fd4:	45b8      	cmp	r8, r7
 8007fd6:	d003      	beq.n	8007fe0 <_dtoa_r+0x980>
 8007fd8:	4641      	mov	r1, r8
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f000 fa72 	bl	80084c4 <_Bfree>
 8007fe0:	4639      	mov	r1, r7
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f000 fa6e 	bl	80084c4 <_Bfree>
 8007fe8:	e69c      	b.n	8007d24 <_dtoa_r+0x6c4>
 8007fea:	2600      	movs	r6, #0
 8007fec:	4637      	mov	r7, r6
 8007fee:	e7e1      	b.n	8007fb4 <_dtoa_r+0x954>
 8007ff0:	46bb      	mov	fp, r7
 8007ff2:	4637      	mov	r7, r6
 8007ff4:	e599      	b.n	8007b2a <_dtoa_r+0x4ca>
 8007ff6:	bf00      	nop
 8007ff8:	40240000 	.word	0x40240000
 8007ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 80c8 	beq.w	8008194 <_dtoa_r+0xb34>
 8008004:	9b04      	ldr	r3, [sp, #16]
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	2d00      	cmp	r5, #0
 800800a:	dd05      	ble.n	8008018 <_dtoa_r+0x9b8>
 800800c:	4639      	mov	r1, r7
 800800e:	462a      	mov	r2, r5
 8008010:	4620      	mov	r0, r4
 8008012:	f000 fc71 	bl	80088f8 <__lshift>
 8008016:	4607      	mov	r7, r0
 8008018:	f1b8 0f00 	cmp.w	r8, #0
 800801c:	d05b      	beq.n	80080d6 <_dtoa_r+0xa76>
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	4620      	mov	r0, r4
 8008022:	f000 fa0f 	bl	8008444 <_Balloc>
 8008026:	4605      	mov	r5, r0
 8008028:	b928      	cbnz	r0, 8008036 <_dtoa_r+0x9d6>
 800802a:	4b83      	ldr	r3, [pc, #524]	; (8008238 <_dtoa_r+0xbd8>)
 800802c:	4602      	mov	r2, r0
 800802e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008032:	f7ff bb2e 	b.w	8007692 <_dtoa_r+0x32>
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	3202      	adds	r2, #2
 800803a:	0092      	lsls	r2, r2, #2
 800803c:	f107 010c 	add.w	r1, r7, #12
 8008040:	300c      	adds	r0, #12
 8008042:	f001 ff85 	bl	8009f50 <memcpy>
 8008046:	2201      	movs	r2, #1
 8008048:	4629      	mov	r1, r5
 800804a:	4620      	mov	r0, r4
 800804c:	f000 fc54 	bl	80088f8 <__lshift>
 8008050:	9b00      	ldr	r3, [sp, #0]
 8008052:	3301      	adds	r3, #1
 8008054:	9304      	str	r3, [sp, #16]
 8008056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800805a:	4413      	add	r3, r2
 800805c:	9308      	str	r3, [sp, #32]
 800805e:	9b02      	ldr	r3, [sp, #8]
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	46b8      	mov	r8, r7
 8008066:	9306      	str	r3, [sp, #24]
 8008068:	4607      	mov	r7, r0
 800806a:	9b04      	ldr	r3, [sp, #16]
 800806c:	4631      	mov	r1, r6
 800806e:	3b01      	subs	r3, #1
 8008070:	4650      	mov	r0, sl
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	f7ff fa6a 	bl	800754c <quorem>
 8008078:	4641      	mov	r1, r8
 800807a:	9002      	str	r0, [sp, #8]
 800807c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008080:	4650      	mov	r0, sl
 8008082:	f000 fca5 	bl	80089d0 <__mcmp>
 8008086:	463a      	mov	r2, r7
 8008088:	9005      	str	r0, [sp, #20]
 800808a:	4631      	mov	r1, r6
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fcbb 	bl	8008a08 <__mdiff>
 8008092:	68c2      	ldr	r2, [r0, #12]
 8008094:	4605      	mov	r5, r0
 8008096:	bb02      	cbnz	r2, 80080da <_dtoa_r+0xa7a>
 8008098:	4601      	mov	r1, r0
 800809a:	4650      	mov	r0, sl
 800809c:	f000 fc98 	bl	80089d0 <__mcmp>
 80080a0:	4602      	mov	r2, r0
 80080a2:	4629      	mov	r1, r5
 80080a4:	4620      	mov	r0, r4
 80080a6:	9209      	str	r2, [sp, #36]	; 0x24
 80080a8:	f000 fa0c 	bl	80084c4 <_Bfree>
 80080ac:	9b07      	ldr	r3, [sp, #28]
 80080ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080b0:	9d04      	ldr	r5, [sp, #16]
 80080b2:	ea43 0102 	orr.w	r1, r3, r2
 80080b6:	9b06      	ldr	r3, [sp, #24]
 80080b8:	4319      	orrs	r1, r3
 80080ba:	d110      	bne.n	80080de <_dtoa_r+0xa7e>
 80080bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080c0:	d029      	beq.n	8008116 <_dtoa_r+0xab6>
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dd02      	ble.n	80080ce <_dtoa_r+0xa6e>
 80080c8:	9b02      	ldr	r3, [sp, #8]
 80080ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80080ce:	9b01      	ldr	r3, [sp, #4]
 80080d0:	f883 9000 	strb.w	r9, [r3]
 80080d4:	e774      	b.n	8007fc0 <_dtoa_r+0x960>
 80080d6:	4638      	mov	r0, r7
 80080d8:	e7ba      	b.n	8008050 <_dtoa_r+0x9f0>
 80080da:	2201      	movs	r2, #1
 80080dc:	e7e1      	b.n	80080a2 <_dtoa_r+0xa42>
 80080de:	9b05      	ldr	r3, [sp, #20]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	db04      	blt.n	80080ee <_dtoa_r+0xa8e>
 80080e4:	9907      	ldr	r1, [sp, #28]
 80080e6:	430b      	orrs	r3, r1
 80080e8:	9906      	ldr	r1, [sp, #24]
 80080ea:	430b      	orrs	r3, r1
 80080ec:	d120      	bne.n	8008130 <_dtoa_r+0xad0>
 80080ee:	2a00      	cmp	r2, #0
 80080f0:	dded      	ble.n	80080ce <_dtoa_r+0xa6e>
 80080f2:	4651      	mov	r1, sl
 80080f4:	2201      	movs	r2, #1
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 fbfe 	bl	80088f8 <__lshift>
 80080fc:	4631      	mov	r1, r6
 80080fe:	4682      	mov	sl, r0
 8008100:	f000 fc66 	bl	80089d0 <__mcmp>
 8008104:	2800      	cmp	r0, #0
 8008106:	dc03      	bgt.n	8008110 <_dtoa_r+0xab0>
 8008108:	d1e1      	bne.n	80080ce <_dtoa_r+0xa6e>
 800810a:	f019 0f01 	tst.w	r9, #1
 800810e:	d0de      	beq.n	80080ce <_dtoa_r+0xa6e>
 8008110:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008114:	d1d8      	bne.n	80080c8 <_dtoa_r+0xa68>
 8008116:	9a01      	ldr	r2, [sp, #4]
 8008118:	2339      	movs	r3, #57	; 0x39
 800811a:	7013      	strb	r3, [r2, #0]
 800811c:	462b      	mov	r3, r5
 800811e:	461d      	mov	r5, r3
 8008120:	3b01      	subs	r3, #1
 8008122:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008126:	2a39      	cmp	r2, #57	; 0x39
 8008128:	d06c      	beq.n	8008204 <_dtoa_r+0xba4>
 800812a:	3201      	adds	r2, #1
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e747      	b.n	8007fc0 <_dtoa_r+0x960>
 8008130:	2a00      	cmp	r2, #0
 8008132:	dd07      	ble.n	8008144 <_dtoa_r+0xae4>
 8008134:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008138:	d0ed      	beq.n	8008116 <_dtoa_r+0xab6>
 800813a:	9a01      	ldr	r2, [sp, #4]
 800813c:	f109 0301 	add.w	r3, r9, #1
 8008140:	7013      	strb	r3, [r2, #0]
 8008142:	e73d      	b.n	8007fc0 <_dtoa_r+0x960>
 8008144:	9b04      	ldr	r3, [sp, #16]
 8008146:	9a08      	ldr	r2, [sp, #32]
 8008148:	f803 9c01 	strb.w	r9, [r3, #-1]
 800814c:	4293      	cmp	r3, r2
 800814e:	d043      	beq.n	80081d8 <_dtoa_r+0xb78>
 8008150:	4651      	mov	r1, sl
 8008152:	2300      	movs	r3, #0
 8008154:	220a      	movs	r2, #10
 8008156:	4620      	mov	r0, r4
 8008158:	f000 f9d6 	bl	8008508 <__multadd>
 800815c:	45b8      	cmp	r8, r7
 800815e:	4682      	mov	sl, r0
 8008160:	f04f 0300 	mov.w	r3, #0
 8008164:	f04f 020a 	mov.w	r2, #10
 8008168:	4641      	mov	r1, r8
 800816a:	4620      	mov	r0, r4
 800816c:	d107      	bne.n	800817e <_dtoa_r+0xb1e>
 800816e:	f000 f9cb 	bl	8008508 <__multadd>
 8008172:	4680      	mov	r8, r0
 8008174:	4607      	mov	r7, r0
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	3301      	adds	r3, #1
 800817a:	9304      	str	r3, [sp, #16]
 800817c:	e775      	b.n	800806a <_dtoa_r+0xa0a>
 800817e:	f000 f9c3 	bl	8008508 <__multadd>
 8008182:	4639      	mov	r1, r7
 8008184:	4680      	mov	r8, r0
 8008186:	2300      	movs	r3, #0
 8008188:	220a      	movs	r2, #10
 800818a:	4620      	mov	r0, r4
 800818c:	f000 f9bc 	bl	8008508 <__multadd>
 8008190:	4607      	mov	r7, r0
 8008192:	e7f0      	b.n	8008176 <_dtoa_r+0xb16>
 8008194:	9b04      	ldr	r3, [sp, #16]
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	9d00      	ldr	r5, [sp, #0]
 800819a:	4631      	mov	r1, r6
 800819c:	4650      	mov	r0, sl
 800819e:	f7ff f9d5 	bl	800754c <quorem>
 80081a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80081a6:	9b00      	ldr	r3, [sp, #0]
 80081a8:	f805 9b01 	strb.w	r9, [r5], #1
 80081ac:	1aea      	subs	r2, r5, r3
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	4293      	cmp	r3, r2
 80081b2:	dd07      	ble.n	80081c4 <_dtoa_r+0xb64>
 80081b4:	4651      	mov	r1, sl
 80081b6:	2300      	movs	r3, #0
 80081b8:	220a      	movs	r2, #10
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 f9a4 	bl	8008508 <__multadd>
 80081c0:	4682      	mov	sl, r0
 80081c2:	e7ea      	b.n	800819a <_dtoa_r+0xb3a>
 80081c4:	9b01      	ldr	r3, [sp, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfc8      	it	gt
 80081ca:	461d      	movgt	r5, r3
 80081cc:	9b00      	ldr	r3, [sp, #0]
 80081ce:	bfd8      	it	le
 80081d0:	2501      	movle	r5, #1
 80081d2:	441d      	add	r5, r3
 80081d4:	f04f 0800 	mov.w	r8, #0
 80081d8:	4651      	mov	r1, sl
 80081da:	2201      	movs	r2, #1
 80081dc:	4620      	mov	r0, r4
 80081de:	f000 fb8b 	bl	80088f8 <__lshift>
 80081e2:	4631      	mov	r1, r6
 80081e4:	4682      	mov	sl, r0
 80081e6:	f000 fbf3 	bl	80089d0 <__mcmp>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	dc96      	bgt.n	800811c <_dtoa_r+0xabc>
 80081ee:	d102      	bne.n	80081f6 <_dtoa_r+0xb96>
 80081f0:	f019 0f01 	tst.w	r9, #1
 80081f4:	d192      	bne.n	800811c <_dtoa_r+0xabc>
 80081f6:	462b      	mov	r3, r5
 80081f8:	461d      	mov	r5, r3
 80081fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081fe:	2a30      	cmp	r2, #48	; 0x30
 8008200:	d0fa      	beq.n	80081f8 <_dtoa_r+0xb98>
 8008202:	e6dd      	b.n	8007fc0 <_dtoa_r+0x960>
 8008204:	9a00      	ldr	r2, [sp, #0]
 8008206:	429a      	cmp	r2, r3
 8008208:	d189      	bne.n	800811e <_dtoa_r+0xabe>
 800820a:	f10b 0b01 	add.w	fp, fp, #1
 800820e:	2331      	movs	r3, #49	; 0x31
 8008210:	e796      	b.n	8008140 <_dtoa_r+0xae0>
 8008212:	4b0a      	ldr	r3, [pc, #40]	; (800823c <_dtoa_r+0xbdc>)
 8008214:	f7ff ba99 	b.w	800774a <_dtoa_r+0xea>
 8008218:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800821a:	2b00      	cmp	r3, #0
 800821c:	f47f aa6d 	bne.w	80076fa <_dtoa_r+0x9a>
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <_dtoa_r+0xbe0>)
 8008222:	f7ff ba92 	b.w	800774a <_dtoa_r+0xea>
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	dcb5      	bgt.n	8008198 <_dtoa_r+0xb38>
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	2b02      	cmp	r3, #2
 8008230:	f73f aeb1 	bgt.w	8007f96 <_dtoa_r+0x936>
 8008234:	e7b0      	b.n	8008198 <_dtoa_r+0xb38>
 8008236:	bf00      	nop
 8008238:	0800bd29 	.word	0x0800bd29
 800823c:	0800bc84 	.word	0x0800bc84
 8008240:	0800bcad 	.word	0x0800bcad

08008244 <_free_r>:
 8008244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008246:	2900      	cmp	r1, #0
 8008248:	d044      	beq.n	80082d4 <_free_r+0x90>
 800824a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800824e:	9001      	str	r0, [sp, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f1a1 0404 	sub.w	r4, r1, #4
 8008256:	bfb8      	it	lt
 8008258:	18e4      	addlt	r4, r4, r3
 800825a:	f000 f8e7 	bl	800842c <__malloc_lock>
 800825e:	4a1e      	ldr	r2, [pc, #120]	; (80082d8 <_free_r+0x94>)
 8008260:	9801      	ldr	r0, [sp, #4]
 8008262:	6813      	ldr	r3, [r2, #0]
 8008264:	b933      	cbnz	r3, 8008274 <_free_r+0x30>
 8008266:	6063      	str	r3, [r4, #4]
 8008268:	6014      	str	r4, [r2, #0]
 800826a:	b003      	add	sp, #12
 800826c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008270:	f000 b8e2 	b.w	8008438 <__malloc_unlock>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d908      	bls.n	800828a <_free_r+0x46>
 8008278:	6825      	ldr	r5, [r4, #0]
 800827a:	1961      	adds	r1, r4, r5
 800827c:	428b      	cmp	r3, r1
 800827e:	bf01      	itttt	eq
 8008280:	6819      	ldreq	r1, [r3, #0]
 8008282:	685b      	ldreq	r3, [r3, #4]
 8008284:	1949      	addeq	r1, r1, r5
 8008286:	6021      	streq	r1, [r4, #0]
 8008288:	e7ed      	b.n	8008266 <_free_r+0x22>
 800828a:	461a      	mov	r2, r3
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	b10b      	cbz	r3, 8008294 <_free_r+0x50>
 8008290:	42a3      	cmp	r3, r4
 8008292:	d9fa      	bls.n	800828a <_free_r+0x46>
 8008294:	6811      	ldr	r1, [r2, #0]
 8008296:	1855      	adds	r5, r2, r1
 8008298:	42a5      	cmp	r5, r4
 800829a:	d10b      	bne.n	80082b4 <_free_r+0x70>
 800829c:	6824      	ldr	r4, [r4, #0]
 800829e:	4421      	add	r1, r4
 80082a0:	1854      	adds	r4, r2, r1
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	6011      	str	r1, [r2, #0]
 80082a6:	d1e0      	bne.n	800826a <_free_r+0x26>
 80082a8:	681c      	ldr	r4, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	6053      	str	r3, [r2, #4]
 80082ae:	440c      	add	r4, r1
 80082b0:	6014      	str	r4, [r2, #0]
 80082b2:	e7da      	b.n	800826a <_free_r+0x26>
 80082b4:	d902      	bls.n	80082bc <_free_r+0x78>
 80082b6:	230c      	movs	r3, #12
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	e7d6      	b.n	800826a <_free_r+0x26>
 80082bc:	6825      	ldr	r5, [r4, #0]
 80082be:	1961      	adds	r1, r4, r5
 80082c0:	428b      	cmp	r3, r1
 80082c2:	bf04      	itt	eq
 80082c4:	6819      	ldreq	r1, [r3, #0]
 80082c6:	685b      	ldreq	r3, [r3, #4]
 80082c8:	6063      	str	r3, [r4, #4]
 80082ca:	bf04      	itt	eq
 80082cc:	1949      	addeq	r1, r1, r5
 80082ce:	6021      	streq	r1, [r4, #0]
 80082d0:	6054      	str	r4, [r2, #4]
 80082d2:	e7ca      	b.n	800826a <_free_r+0x26>
 80082d4:	b003      	add	sp, #12
 80082d6:	bd30      	pop	{r4, r5, pc}
 80082d8:	2000095c 	.word	0x2000095c

080082dc <malloc>:
 80082dc:	4b02      	ldr	r3, [pc, #8]	; (80082e8 <malloc+0xc>)
 80082de:	4601      	mov	r1, r0
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	f000 b823 	b.w	800832c <_malloc_r>
 80082e6:	bf00      	nop
 80082e8:	20000064 	.word	0x20000064

080082ec <sbrk_aligned>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	4e0e      	ldr	r6, [pc, #56]	; (8008328 <sbrk_aligned+0x3c>)
 80082f0:	460c      	mov	r4, r1
 80082f2:	6831      	ldr	r1, [r6, #0]
 80082f4:	4605      	mov	r5, r0
 80082f6:	b911      	cbnz	r1, 80082fe <sbrk_aligned+0x12>
 80082f8:	f001 fe1a 	bl	8009f30 <_sbrk_r>
 80082fc:	6030      	str	r0, [r6, #0]
 80082fe:	4621      	mov	r1, r4
 8008300:	4628      	mov	r0, r5
 8008302:	f001 fe15 	bl	8009f30 <_sbrk_r>
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	d00a      	beq.n	8008320 <sbrk_aligned+0x34>
 800830a:	1cc4      	adds	r4, r0, #3
 800830c:	f024 0403 	bic.w	r4, r4, #3
 8008310:	42a0      	cmp	r0, r4
 8008312:	d007      	beq.n	8008324 <sbrk_aligned+0x38>
 8008314:	1a21      	subs	r1, r4, r0
 8008316:	4628      	mov	r0, r5
 8008318:	f001 fe0a 	bl	8009f30 <_sbrk_r>
 800831c:	3001      	adds	r0, #1
 800831e:	d101      	bne.n	8008324 <sbrk_aligned+0x38>
 8008320:	f04f 34ff 	mov.w	r4, #4294967295
 8008324:	4620      	mov	r0, r4
 8008326:	bd70      	pop	{r4, r5, r6, pc}
 8008328:	20000960 	.word	0x20000960

0800832c <_malloc_r>:
 800832c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008330:	1ccd      	adds	r5, r1, #3
 8008332:	f025 0503 	bic.w	r5, r5, #3
 8008336:	3508      	adds	r5, #8
 8008338:	2d0c      	cmp	r5, #12
 800833a:	bf38      	it	cc
 800833c:	250c      	movcc	r5, #12
 800833e:	2d00      	cmp	r5, #0
 8008340:	4607      	mov	r7, r0
 8008342:	db01      	blt.n	8008348 <_malloc_r+0x1c>
 8008344:	42a9      	cmp	r1, r5
 8008346:	d905      	bls.n	8008354 <_malloc_r+0x28>
 8008348:	230c      	movs	r3, #12
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	2600      	movs	r6, #0
 800834e:	4630      	mov	r0, r6
 8008350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008354:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008428 <_malloc_r+0xfc>
 8008358:	f000 f868 	bl	800842c <__malloc_lock>
 800835c:	f8d8 3000 	ldr.w	r3, [r8]
 8008360:	461c      	mov	r4, r3
 8008362:	bb5c      	cbnz	r4, 80083bc <_malloc_r+0x90>
 8008364:	4629      	mov	r1, r5
 8008366:	4638      	mov	r0, r7
 8008368:	f7ff ffc0 	bl	80082ec <sbrk_aligned>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	4604      	mov	r4, r0
 8008370:	d155      	bne.n	800841e <_malloc_r+0xf2>
 8008372:	f8d8 4000 	ldr.w	r4, [r8]
 8008376:	4626      	mov	r6, r4
 8008378:	2e00      	cmp	r6, #0
 800837a:	d145      	bne.n	8008408 <_malloc_r+0xdc>
 800837c:	2c00      	cmp	r4, #0
 800837e:	d048      	beq.n	8008412 <_malloc_r+0xe6>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	4631      	mov	r1, r6
 8008384:	4638      	mov	r0, r7
 8008386:	eb04 0903 	add.w	r9, r4, r3
 800838a:	f001 fdd1 	bl	8009f30 <_sbrk_r>
 800838e:	4581      	cmp	r9, r0
 8008390:	d13f      	bne.n	8008412 <_malloc_r+0xe6>
 8008392:	6821      	ldr	r1, [r4, #0]
 8008394:	1a6d      	subs	r5, r5, r1
 8008396:	4629      	mov	r1, r5
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff ffa7 	bl	80082ec <sbrk_aligned>
 800839e:	3001      	adds	r0, #1
 80083a0:	d037      	beq.n	8008412 <_malloc_r+0xe6>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	442b      	add	r3, r5
 80083a6:	6023      	str	r3, [r4, #0]
 80083a8:	f8d8 3000 	ldr.w	r3, [r8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d038      	beq.n	8008422 <_malloc_r+0xf6>
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	42a2      	cmp	r2, r4
 80083b4:	d12b      	bne.n	800840e <_malloc_r+0xe2>
 80083b6:	2200      	movs	r2, #0
 80083b8:	605a      	str	r2, [r3, #4]
 80083ba:	e00f      	b.n	80083dc <_malloc_r+0xb0>
 80083bc:	6822      	ldr	r2, [r4, #0]
 80083be:	1b52      	subs	r2, r2, r5
 80083c0:	d41f      	bmi.n	8008402 <_malloc_r+0xd6>
 80083c2:	2a0b      	cmp	r2, #11
 80083c4:	d917      	bls.n	80083f6 <_malloc_r+0xca>
 80083c6:	1961      	adds	r1, r4, r5
 80083c8:	42a3      	cmp	r3, r4
 80083ca:	6025      	str	r5, [r4, #0]
 80083cc:	bf18      	it	ne
 80083ce:	6059      	strne	r1, [r3, #4]
 80083d0:	6863      	ldr	r3, [r4, #4]
 80083d2:	bf08      	it	eq
 80083d4:	f8c8 1000 	streq.w	r1, [r8]
 80083d8:	5162      	str	r2, [r4, r5]
 80083da:	604b      	str	r3, [r1, #4]
 80083dc:	4638      	mov	r0, r7
 80083de:	f104 060b 	add.w	r6, r4, #11
 80083e2:	f000 f829 	bl	8008438 <__malloc_unlock>
 80083e6:	f026 0607 	bic.w	r6, r6, #7
 80083ea:	1d23      	adds	r3, r4, #4
 80083ec:	1af2      	subs	r2, r6, r3
 80083ee:	d0ae      	beq.n	800834e <_malloc_r+0x22>
 80083f0:	1b9b      	subs	r3, r3, r6
 80083f2:	50a3      	str	r3, [r4, r2]
 80083f4:	e7ab      	b.n	800834e <_malloc_r+0x22>
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	6862      	ldr	r2, [r4, #4]
 80083fa:	d1dd      	bne.n	80083b8 <_malloc_r+0x8c>
 80083fc:	f8c8 2000 	str.w	r2, [r8]
 8008400:	e7ec      	b.n	80083dc <_malloc_r+0xb0>
 8008402:	4623      	mov	r3, r4
 8008404:	6864      	ldr	r4, [r4, #4]
 8008406:	e7ac      	b.n	8008362 <_malloc_r+0x36>
 8008408:	4634      	mov	r4, r6
 800840a:	6876      	ldr	r6, [r6, #4]
 800840c:	e7b4      	b.n	8008378 <_malloc_r+0x4c>
 800840e:	4613      	mov	r3, r2
 8008410:	e7cc      	b.n	80083ac <_malloc_r+0x80>
 8008412:	230c      	movs	r3, #12
 8008414:	603b      	str	r3, [r7, #0]
 8008416:	4638      	mov	r0, r7
 8008418:	f000 f80e 	bl	8008438 <__malloc_unlock>
 800841c:	e797      	b.n	800834e <_malloc_r+0x22>
 800841e:	6025      	str	r5, [r4, #0]
 8008420:	e7dc      	b.n	80083dc <_malloc_r+0xb0>
 8008422:	605b      	str	r3, [r3, #4]
 8008424:	deff      	udf	#255	; 0xff
 8008426:	bf00      	nop
 8008428:	2000095c 	.word	0x2000095c

0800842c <__malloc_lock>:
 800842c:	4801      	ldr	r0, [pc, #4]	; (8008434 <__malloc_lock+0x8>)
 800842e:	f7ff b884 	b.w	800753a <__retarget_lock_acquire_recursive>
 8008432:	bf00      	nop
 8008434:	20000958 	.word	0x20000958

08008438 <__malloc_unlock>:
 8008438:	4801      	ldr	r0, [pc, #4]	; (8008440 <__malloc_unlock+0x8>)
 800843a:	f7ff b87f 	b.w	800753c <__retarget_lock_release_recursive>
 800843e:	bf00      	nop
 8008440:	20000958 	.word	0x20000958

08008444 <_Balloc>:
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	69c6      	ldr	r6, [r0, #28]
 8008448:	4604      	mov	r4, r0
 800844a:	460d      	mov	r5, r1
 800844c:	b976      	cbnz	r6, 800846c <_Balloc+0x28>
 800844e:	2010      	movs	r0, #16
 8008450:	f7ff ff44 	bl	80082dc <malloc>
 8008454:	4602      	mov	r2, r0
 8008456:	61e0      	str	r0, [r4, #28]
 8008458:	b920      	cbnz	r0, 8008464 <_Balloc+0x20>
 800845a:	4b18      	ldr	r3, [pc, #96]	; (80084bc <_Balloc+0x78>)
 800845c:	4818      	ldr	r0, [pc, #96]	; (80084c0 <_Balloc+0x7c>)
 800845e:	216b      	movs	r1, #107	; 0x6b
 8008460:	f001 fd8e 	bl	8009f80 <__assert_func>
 8008464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008468:	6006      	str	r6, [r0, #0]
 800846a:	60c6      	str	r6, [r0, #12]
 800846c:	69e6      	ldr	r6, [r4, #28]
 800846e:	68f3      	ldr	r3, [r6, #12]
 8008470:	b183      	cbz	r3, 8008494 <_Balloc+0x50>
 8008472:	69e3      	ldr	r3, [r4, #28]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800847a:	b9b8      	cbnz	r0, 80084ac <_Balloc+0x68>
 800847c:	2101      	movs	r1, #1
 800847e:	fa01 f605 	lsl.w	r6, r1, r5
 8008482:	1d72      	adds	r2, r6, #5
 8008484:	0092      	lsls	r2, r2, #2
 8008486:	4620      	mov	r0, r4
 8008488:	f001 fd98 	bl	8009fbc <_calloc_r>
 800848c:	b160      	cbz	r0, 80084a8 <_Balloc+0x64>
 800848e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008492:	e00e      	b.n	80084b2 <_Balloc+0x6e>
 8008494:	2221      	movs	r2, #33	; 0x21
 8008496:	2104      	movs	r1, #4
 8008498:	4620      	mov	r0, r4
 800849a:	f001 fd8f 	bl	8009fbc <_calloc_r>
 800849e:	69e3      	ldr	r3, [r4, #28]
 80084a0:	60f0      	str	r0, [r6, #12]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e4      	bne.n	8008472 <_Balloc+0x2e>
 80084a8:	2000      	movs	r0, #0
 80084aa:	bd70      	pop	{r4, r5, r6, pc}
 80084ac:	6802      	ldr	r2, [r0, #0]
 80084ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084b2:	2300      	movs	r3, #0
 80084b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084b8:	e7f7      	b.n	80084aa <_Balloc+0x66>
 80084ba:	bf00      	nop
 80084bc:	0800bcba 	.word	0x0800bcba
 80084c0:	0800bd3a 	.word	0x0800bd3a

080084c4 <_Bfree>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	69c6      	ldr	r6, [r0, #28]
 80084c8:	4605      	mov	r5, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	b976      	cbnz	r6, 80084ec <_Bfree+0x28>
 80084ce:	2010      	movs	r0, #16
 80084d0:	f7ff ff04 	bl	80082dc <malloc>
 80084d4:	4602      	mov	r2, r0
 80084d6:	61e8      	str	r0, [r5, #28]
 80084d8:	b920      	cbnz	r0, 80084e4 <_Bfree+0x20>
 80084da:	4b09      	ldr	r3, [pc, #36]	; (8008500 <_Bfree+0x3c>)
 80084dc:	4809      	ldr	r0, [pc, #36]	; (8008504 <_Bfree+0x40>)
 80084de:	218f      	movs	r1, #143	; 0x8f
 80084e0:	f001 fd4e 	bl	8009f80 <__assert_func>
 80084e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084e8:	6006      	str	r6, [r0, #0]
 80084ea:	60c6      	str	r6, [r0, #12]
 80084ec:	b13c      	cbz	r4, 80084fe <_Bfree+0x3a>
 80084ee:	69eb      	ldr	r3, [r5, #28]
 80084f0:	6862      	ldr	r2, [r4, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084f8:	6021      	str	r1, [r4, #0]
 80084fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	0800bcba 	.word	0x0800bcba
 8008504:	0800bd3a 	.word	0x0800bd3a

08008508 <__multadd>:
 8008508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850c:	690d      	ldr	r5, [r1, #16]
 800850e:	4607      	mov	r7, r0
 8008510:	460c      	mov	r4, r1
 8008512:	461e      	mov	r6, r3
 8008514:	f101 0c14 	add.w	ip, r1, #20
 8008518:	2000      	movs	r0, #0
 800851a:	f8dc 3000 	ldr.w	r3, [ip]
 800851e:	b299      	uxth	r1, r3
 8008520:	fb02 6101 	mla	r1, r2, r1, r6
 8008524:	0c1e      	lsrs	r6, r3, #16
 8008526:	0c0b      	lsrs	r3, r1, #16
 8008528:	fb02 3306 	mla	r3, r2, r6, r3
 800852c:	b289      	uxth	r1, r1
 800852e:	3001      	adds	r0, #1
 8008530:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008534:	4285      	cmp	r5, r0
 8008536:	f84c 1b04 	str.w	r1, [ip], #4
 800853a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800853e:	dcec      	bgt.n	800851a <__multadd+0x12>
 8008540:	b30e      	cbz	r6, 8008586 <__multadd+0x7e>
 8008542:	68a3      	ldr	r3, [r4, #8]
 8008544:	42ab      	cmp	r3, r5
 8008546:	dc19      	bgt.n	800857c <__multadd+0x74>
 8008548:	6861      	ldr	r1, [r4, #4]
 800854a:	4638      	mov	r0, r7
 800854c:	3101      	adds	r1, #1
 800854e:	f7ff ff79 	bl	8008444 <_Balloc>
 8008552:	4680      	mov	r8, r0
 8008554:	b928      	cbnz	r0, 8008562 <__multadd+0x5a>
 8008556:	4602      	mov	r2, r0
 8008558:	4b0c      	ldr	r3, [pc, #48]	; (800858c <__multadd+0x84>)
 800855a:	480d      	ldr	r0, [pc, #52]	; (8008590 <__multadd+0x88>)
 800855c:	21ba      	movs	r1, #186	; 0xba
 800855e:	f001 fd0f 	bl	8009f80 <__assert_func>
 8008562:	6922      	ldr	r2, [r4, #16]
 8008564:	3202      	adds	r2, #2
 8008566:	f104 010c 	add.w	r1, r4, #12
 800856a:	0092      	lsls	r2, r2, #2
 800856c:	300c      	adds	r0, #12
 800856e:	f001 fcef 	bl	8009f50 <memcpy>
 8008572:	4621      	mov	r1, r4
 8008574:	4638      	mov	r0, r7
 8008576:	f7ff ffa5 	bl	80084c4 <_Bfree>
 800857a:	4644      	mov	r4, r8
 800857c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008580:	3501      	adds	r5, #1
 8008582:	615e      	str	r6, [r3, #20]
 8008584:	6125      	str	r5, [r4, #16]
 8008586:	4620      	mov	r0, r4
 8008588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800858c:	0800bd29 	.word	0x0800bd29
 8008590:	0800bd3a 	.word	0x0800bd3a

08008594 <__s2b>:
 8008594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008598:	460c      	mov	r4, r1
 800859a:	4615      	mov	r5, r2
 800859c:	461f      	mov	r7, r3
 800859e:	2209      	movs	r2, #9
 80085a0:	3308      	adds	r3, #8
 80085a2:	4606      	mov	r6, r0
 80085a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80085a8:	2100      	movs	r1, #0
 80085aa:	2201      	movs	r2, #1
 80085ac:	429a      	cmp	r2, r3
 80085ae:	db09      	blt.n	80085c4 <__s2b+0x30>
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7ff ff47 	bl	8008444 <_Balloc>
 80085b6:	b940      	cbnz	r0, 80085ca <__s2b+0x36>
 80085b8:	4602      	mov	r2, r0
 80085ba:	4b19      	ldr	r3, [pc, #100]	; (8008620 <__s2b+0x8c>)
 80085bc:	4819      	ldr	r0, [pc, #100]	; (8008624 <__s2b+0x90>)
 80085be:	21d3      	movs	r1, #211	; 0xd3
 80085c0:	f001 fcde 	bl	8009f80 <__assert_func>
 80085c4:	0052      	lsls	r2, r2, #1
 80085c6:	3101      	adds	r1, #1
 80085c8:	e7f0      	b.n	80085ac <__s2b+0x18>
 80085ca:	9b08      	ldr	r3, [sp, #32]
 80085cc:	6143      	str	r3, [r0, #20]
 80085ce:	2d09      	cmp	r5, #9
 80085d0:	f04f 0301 	mov.w	r3, #1
 80085d4:	6103      	str	r3, [r0, #16]
 80085d6:	dd16      	ble.n	8008606 <__s2b+0x72>
 80085d8:	f104 0909 	add.w	r9, r4, #9
 80085dc:	46c8      	mov	r8, r9
 80085de:	442c      	add	r4, r5
 80085e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085e4:	4601      	mov	r1, r0
 80085e6:	3b30      	subs	r3, #48	; 0x30
 80085e8:	220a      	movs	r2, #10
 80085ea:	4630      	mov	r0, r6
 80085ec:	f7ff ff8c 	bl	8008508 <__multadd>
 80085f0:	45a0      	cmp	r8, r4
 80085f2:	d1f5      	bne.n	80085e0 <__s2b+0x4c>
 80085f4:	f1a5 0408 	sub.w	r4, r5, #8
 80085f8:	444c      	add	r4, r9
 80085fa:	1b2d      	subs	r5, r5, r4
 80085fc:	1963      	adds	r3, r4, r5
 80085fe:	42bb      	cmp	r3, r7
 8008600:	db04      	blt.n	800860c <__s2b+0x78>
 8008602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008606:	340a      	adds	r4, #10
 8008608:	2509      	movs	r5, #9
 800860a:	e7f6      	b.n	80085fa <__s2b+0x66>
 800860c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008610:	4601      	mov	r1, r0
 8008612:	3b30      	subs	r3, #48	; 0x30
 8008614:	220a      	movs	r2, #10
 8008616:	4630      	mov	r0, r6
 8008618:	f7ff ff76 	bl	8008508 <__multadd>
 800861c:	e7ee      	b.n	80085fc <__s2b+0x68>
 800861e:	bf00      	nop
 8008620:	0800bd29 	.word	0x0800bd29
 8008624:	0800bd3a 	.word	0x0800bd3a

08008628 <__hi0bits>:
 8008628:	0c03      	lsrs	r3, r0, #16
 800862a:	041b      	lsls	r3, r3, #16
 800862c:	b9d3      	cbnz	r3, 8008664 <__hi0bits+0x3c>
 800862e:	0400      	lsls	r0, r0, #16
 8008630:	2310      	movs	r3, #16
 8008632:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008636:	bf04      	itt	eq
 8008638:	0200      	lsleq	r0, r0, #8
 800863a:	3308      	addeq	r3, #8
 800863c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008640:	bf04      	itt	eq
 8008642:	0100      	lsleq	r0, r0, #4
 8008644:	3304      	addeq	r3, #4
 8008646:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800864a:	bf04      	itt	eq
 800864c:	0080      	lsleq	r0, r0, #2
 800864e:	3302      	addeq	r3, #2
 8008650:	2800      	cmp	r0, #0
 8008652:	db05      	blt.n	8008660 <__hi0bits+0x38>
 8008654:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008658:	f103 0301 	add.w	r3, r3, #1
 800865c:	bf08      	it	eq
 800865e:	2320      	moveq	r3, #32
 8008660:	4618      	mov	r0, r3
 8008662:	4770      	bx	lr
 8008664:	2300      	movs	r3, #0
 8008666:	e7e4      	b.n	8008632 <__hi0bits+0xa>

08008668 <__lo0bits>:
 8008668:	6803      	ldr	r3, [r0, #0]
 800866a:	f013 0207 	ands.w	r2, r3, #7
 800866e:	d00c      	beq.n	800868a <__lo0bits+0x22>
 8008670:	07d9      	lsls	r1, r3, #31
 8008672:	d422      	bmi.n	80086ba <__lo0bits+0x52>
 8008674:	079a      	lsls	r2, r3, #30
 8008676:	bf49      	itett	mi
 8008678:	085b      	lsrmi	r3, r3, #1
 800867a:	089b      	lsrpl	r3, r3, #2
 800867c:	6003      	strmi	r3, [r0, #0]
 800867e:	2201      	movmi	r2, #1
 8008680:	bf5c      	itt	pl
 8008682:	6003      	strpl	r3, [r0, #0]
 8008684:	2202      	movpl	r2, #2
 8008686:	4610      	mov	r0, r2
 8008688:	4770      	bx	lr
 800868a:	b299      	uxth	r1, r3
 800868c:	b909      	cbnz	r1, 8008692 <__lo0bits+0x2a>
 800868e:	0c1b      	lsrs	r3, r3, #16
 8008690:	2210      	movs	r2, #16
 8008692:	b2d9      	uxtb	r1, r3
 8008694:	b909      	cbnz	r1, 800869a <__lo0bits+0x32>
 8008696:	3208      	adds	r2, #8
 8008698:	0a1b      	lsrs	r3, r3, #8
 800869a:	0719      	lsls	r1, r3, #28
 800869c:	bf04      	itt	eq
 800869e:	091b      	lsreq	r3, r3, #4
 80086a0:	3204      	addeq	r2, #4
 80086a2:	0799      	lsls	r1, r3, #30
 80086a4:	bf04      	itt	eq
 80086a6:	089b      	lsreq	r3, r3, #2
 80086a8:	3202      	addeq	r2, #2
 80086aa:	07d9      	lsls	r1, r3, #31
 80086ac:	d403      	bmi.n	80086b6 <__lo0bits+0x4e>
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	f102 0201 	add.w	r2, r2, #1
 80086b4:	d003      	beq.n	80086be <__lo0bits+0x56>
 80086b6:	6003      	str	r3, [r0, #0]
 80086b8:	e7e5      	b.n	8008686 <__lo0bits+0x1e>
 80086ba:	2200      	movs	r2, #0
 80086bc:	e7e3      	b.n	8008686 <__lo0bits+0x1e>
 80086be:	2220      	movs	r2, #32
 80086c0:	e7e1      	b.n	8008686 <__lo0bits+0x1e>
	...

080086c4 <__i2b>:
 80086c4:	b510      	push	{r4, lr}
 80086c6:	460c      	mov	r4, r1
 80086c8:	2101      	movs	r1, #1
 80086ca:	f7ff febb 	bl	8008444 <_Balloc>
 80086ce:	4602      	mov	r2, r0
 80086d0:	b928      	cbnz	r0, 80086de <__i2b+0x1a>
 80086d2:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <__i2b+0x24>)
 80086d4:	4805      	ldr	r0, [pc, #20]	; (80086ec <__i2b+0x28>)
 80086d6:	f240 1145 	movw	r1, #325	; 0x145
 80086da:	f001 fc51 	bl	8009f80 <__assert_func>
 80086de:	2301      	movs	r3, #1
 80086e0:	6144      	str	r4, [r0, #20]
 80086e2:	6103      	str	r3, [r0, #16]
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	bf00      	nop
 80086e8:	0800bd29 	.word	0x0800bd29
 80086ec:	0800bd3a 	.word	0x0800bd3a

080086f0 <__multiply>:
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	4691      	mov	r9, r2
 80086f6:	690a      	ldr	r2, [r1, #16]
 80086f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	bfb8      	it	lt
 8008700:	460b      	movlt	r3, r1
 8008702:	460c      	mov	r4, r1
 8008704:	bfbc      	itt	lt
 8008706:	464c      	movlt	r4, r9
 8008708:	4699      	movlt	r9, r3
 800870a:	6927      	ldr	r7, [r4, #16]
 800870c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008710:	68a3      	ldr	r3, [r4, #8]
 8008712:	6861      	ldr	r1, [r4, #4]
 8008714:	eb07 060a 	add.w	r6, r7, sl
 8008718:	42b3      	cmp	r3, r6
 800871a:	b085      	sub	sp, #20
 800871c:	bfb8      	it	lt
 800871e:	3101      	addlt	r1, #1
 8008720:	f7ff fe90 	bl	8008444 <_Balloc>
 8008724:	b930      	cbnz	r0, 8008734 <__multiply+0x44>
 8008726:	4602      	mov	r2, r0
 8008728:	4b44      	ldr	r3, [pc, #272]	; (800883c <__multiply+0x14c>)
 800872a:	4845      	ldr	r0, [pc, #276]	; (8008840 <__multiply+0x150>)
 800872c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008730:	f001 fc26 	bl	8009f80 <__assert_func>
 8008734:	f100 0514 	add.w	r5, r0, #20
 8008738:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800873c:	462b      	mov	r3, r5
 800873e:	2200      	movs	r2, #0
 8008740:	4543      	cmp	r3, r8
 8008742:	d321      	bcc.n	8008788 <__multiply+0x98>
 8008744:	f104 0314 	add.w	r3, r4, #20
 8008748:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800874c:	f109 0314 	add.w	r3, r9, #20
 8008750:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008754:	9202      	str	r2, [sp, #8]
 8008756:	1b3a      	subs	r2, r7, r4
 8008758:	3a15      	subs	r2, #21
 800875a:	f022 0203 	bic.w	r2, r2, #3
 800875e:	3204      	adds	r2, #4
 8008760:	f104 0115 	add.w	r1, r4, #21
 8008764:	428f      	cmp	r7, r1
 8008766:	bf38      	it	cc
 8008768:	2204      	movcc	r2, #4
 800876a:	9201      	str	r2, [sp, #4]
 800876c:	9a02      	ldr	r2, [sp, #8]
 800876e:	9303      	str	r3, [sp, #12]
 8008770:	429a      	cmp	r2, r3
 8008772:	d80c      	bhi.n	800878e <__multiply+0x9e>
 8008774:	2e00      	cmp	r6, #0
 8008776:	dd03      	ble.n	8008780 <__multiply+0x90>
 8008778:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800877c:	2b00      	cmp	r3, #0
 800877e:	d05b      	beq.n	8008838 <__multiply+0x148>
 8008780:	6106      	str	r6, [r0, #16]
 8008782:	b005      	add	sp, #20
 8008784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008788:	f843 2b04 	str.w	r2, [r3], #4
 800878c:	e7d8      	b.n	8008740 <__multiply+0x50>
 800878e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008792:	f1ba 0f00 	cmp.w	sl, #0
 8008796:	d024      	beq.n	80087e2 <__multiply+0xf2>
 8008798:	f104 0e14 	add.w	lr, r4, #20
 800879c:	46a9      	mov	r9, r5
 800879e:	f04f 0c00 	mov.w	ip, #0
 80087a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087a6:	f8d9 1000 	ldr.w	r1, [r9]
 80087aa:	fa1f fb82 	uxth.w	fp, r2
 80087ae:	b289      	uxth	r1, r1
 80087b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80087b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087b8:	f8d9 2000 	ldr.w	r2, [r9]
 80087bc:	4461      	add	r1, ip
 80087be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80087c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087ca:	b289      	uxth	r1, r1
 80087cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087d0:	4577      	cmp	r7, lr
 80087d2:	f849 1b04 	str.w	r1, [r9], #4
 80087d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087da:	d8e2      	bhi.n	80087a2 <__multiply+0xb2>
 80087dc:	9a01      	ldr	r2, [sp, #4]
 80087de:	f845 c002 	str.w	ip, [r5, r2]
 80087e2:	9a03      	ldr	r2, [sp, #12]
 80087e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087e8:	3304      	adds	r3, #4
 80087ea:	f1b9 0f00 	cmp.w	r9, #0
 80087ee:	d021      	beq.n	8008834 <__multiply+0x144>
 80087f0:	6829      	ldr	r1, [r5, #0]
 80087f2:	f104 0c14 	add.w	ip, r4, #20
 80087f6:	46ae      	mov	lr, r5
 80087f8:	f04f 0a00 	mov.w	sl, #0
 80087fc:	f8bc b000 	ldrh.w	fp, [ip]
 8008800:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008804:	fb09 220b 	mla	r2, r9, fp, r2
 8008808:	4452      	add	r2, sl
 800880a:	b289      	uxth	r1, r1
 800880c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008810:	f84e 1b04 	str.w	r1, [lr], #4
 8008814:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008818:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800881c:	f8be 1000 	ldrh.w	r1, [lr]
 8008820:	fb09 110a 	mla	r1, r9, sl, r1
 8008824:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008828:	4567      	cmp	r7, ip
 800882a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800882e:	d8e5      	bhi.n	80087fc <__multiply+0x10c>
 8008830:	9a01      	ldr	r2, [sp, #4]
 8008832:	50a9      	str	r1, [r5, r2]
 8008834:	3504      	adds	r5, #4
 8008836:	e799      	b.n	800876c <__multiply+0x7c>
 8008838:	3e01      	subs	r6, #1
 800883a:	e79b      	b.n	8008774 <__multiply+0x84>
 800883c:	0800bd29 	.word	0x0800bd29
 8008840:	0800bd3a 	.word	0x0800bd3a

08008844 <__pow5mult>:
 8008844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008848:	4615      	mov	r5, r2
 800884a:	f012 0203 	ands.w	r2, r2, #3
 800884e:	4606      	mov	r6, r0
 8008850:	460f      	mov	r7, r1
 8008852:	d007      	beq.n	8008864 <__pow5mult+0x20>
 8008854:	4c25      	ldr	r4, [pc, #148]	; (80088ec <__pow5mult+0xa8>)
 8008856:	3a01      	subs	r2, #1
 8008858:	2300      	movs	r3, #0
 800885a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800885e:	f7ff fe53 	bl	8008508 <__multadd>
 8008862:	4607      	mov	r7, r0
 8008864:	10ad      	asrs	r5, r5, #2
 8008866:	d03d      	beq.n	80088e4 <__pow5mult+0xa0>
 8008868:	69f4      	ldr	r4, [r6, #28]
 800886a:	b97c      	cbnz	r4, 800888c <__pow5mult+0x48>
 800886c:	2010      	movs	r0, #16
 800886e:	f7ff fd35 	bl	80082dc <malloc>
 8008872:	4602      	mov	r2, r0
 8008874:	61f0      	str	r0, [r6, #28]
 8008876:	b928      	cbnz	r0, 8008884 <__pow5mult+0x40>
 8008878:	4b1d      	ldr	r3, [pc, #116]	; (80088f0 <__pow5mult+0xac>)
 800887a:	481e      	ldr	r0, [pc, #120]	; (80088f4 <__pow5mult+0xb0>)
 800887c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008880:	f001 fb7e 	bl	8009f80 <__assert_func>
 8008884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008888:	6004      	str	r4, [r0, #0]
 800888a:	60c4      	str	r4, [r0, #12]
 800888c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008894:	b94c      	cbnz	r4, 80088aa <__pow5mult+0x66>
 8008896:	f240 2171 	movw	r1, #625	; 0x271
 800889a:	4630      	mov	r0, r6
 800889c:	f7ff ff12 	bl	80086c4 <__i2b>
 80088a0:	2300      	movs	r3, #0
 80088a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80088a6:	4604      	mov	r4, r0
 80088a8:	6003      	str	r3, [r0, #0]
 80088aa:	f04f 0900 	mov.w	r9, #0
 80088ae:	07eb      	lsls	r3, r5, #31
 80088b0:	d50a      	bpl.n	80088c8 <__pow5mult+0x84>
 80088b2:	4639      	mov	r1, r7
 80088b4:	4622      	mov	r2, r4
 80088b6:	4630      	mov	r0, r6
 80088b8:	f7ff ff1a 	bl	80086f0 <__multiply>
 80088bc:	4639      	mov	r1, r7
 80088be:	4680      	mov	r8, r0
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7ff fdff 	bl	80084c4 <_Bfree>
 80088c6:	4647      	mov	r7, r8
 80088c8:	106d      	asrs	r5, r5, #1
 80088ca:	d00b      	beq.n	80088e4 <__pow5mult+0xa0>
 80088cc:	6820      	ldr	r0, [r4, #0]
 80088ce:	b938      	cbnz	r0, 80088e0 <__pow5mult+0x9c>
 80088d0:	4622      	mov	r2, r4
 80088d2:	4621      	mov	r1, r4
 80088d4:	4630      	mov	r0, r6
 80088d6:	f7ff ff0b 	bl	80086f0 <__multiply>
 80088da:	6020      	str	r0, [r4, #0]
 80088dc:	f8c0 9000 	str.w	r9, [r0]
 80088e0:	4604      	mov	r4, r0
 80088e2:	e7e4      	b.n	80088ae <__pow5mult+0x6a>
 80088e4:	4638      	mov	r0, r7
 80088e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ea:	bf00      	nop
 80088ec:	0800be88 	.word	0x0800be88
 80088f0:	0800bcba 	.word	0x0800bcba
 80088f4:	0800bd3a 	.word	0x0800bd3a

080088f8 <__lshift>:
 80088f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	460c      	mov	r4, r1
 80088fe:	6849      	ldr	r1, [r1, #4]
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008906:	68a3      	ldr	r3, [r4, #8]
 8008908:	4607      	mov	r7, r0
 800890a:	4691      	mov	r9, r2
 800890c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008910:	f108 0601 	add.w	r6, r8, #1
 8008914:	42b3      	cmp	r3, r6
 8008916:	db0b      	blt.n	8008930 <__lshift+0x38>
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff fd93 	bl	8008444 <_Balloc>
 800891e:	4605      	mov	r5, r0
 8008920:	b948      	cbnz	r0, 8008936 <__lshift+0x3e>
 8008922:	4602      	mov	r2, r0
 8008924:	4b28      	ldr	r3, [pc, #160]	; (80089c8 <__lshift+0xd0>)
 8008926:	4829      	ldr	r0, [pc, #164]	; (80089cc <__lshift+0xd4>)
 8008928:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800892c:	f001 fb28 	bl	8009f80 <__assert_func>
 8008930:	3101      	adds	r1, #1
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	e7ee      	b.n	8008914 <__lshift+0x1c>
 8008936:	2300      	movs	r3, #0
 8008938:	f100 0114 	add.w	r1, r0, #20
 800893c:	f100 0210 	add.w	r2, r0, #16
 8008940:	4618      	mov	r0, r3
 8008942:	4553      	cmp	r3, sl
 8008944:	db33      	blt.n	80089ae <__lshift+0xb6>
 8008946:	6920      	ldr	r0, [r4, #16]
 8008948:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800894c:	f104 0314 	add.w	r3, r4, #20
 8008950:	f019 091f 	ands.w	r9, r9, #31
 8008954:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008958:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800895c:	d02b      	beq.n	80089b6 <__lshift+0xbe>
 800895e:	f1c9 0e20 	rsb	lr, r9, #32
 8008962:	468a      	mov	sl, r1
 8008964:	2200      	movs	r2, #0
 8008966:	6818      	ldr	r0, [r3, #0]
 8008968:	fa00 f009 	lsl.w	r0, r0, r9
 800896c:	4310      	orrs	r0, r2
 800896e:	f84a 0b04 	str.w	r0, [sl], #4
 8008972:	f853 2b04 	ldr.w	r2, [r3], #4
 8008976:	459c      	cmp	ip, r3
 8008978:	fa22 f20e 	lsr.w	r2, r2, lr
 800897c:	d8f3      	bhi.n	8008966 <__lshift+0x6e>
 800897e:	ebac 0304 	sub.w	r3, ip, r4
 8008982:	3b15      	subs	r3, #21
 8008984:	f023 0303 	bic.w	r3, r3, #3
 8008988:	3304      	adds	r3, #4
 800898a:	f104 0015 	add.w	r0, r4, #21
 800898e:	4584      	cmp	ip, r0
 8008990:	bf38      	it	cc
 8008992:	2304      	movcc	r3, #4
 8008994:	50ca      	str	r2, [r1, r3]
 8008996:	b10a      	cbz	r2, 800899c <__lshift+0xa4>
 8008998:	f108 0602 	add.w	r6, r8, #2
 800899c:	3e01      	subs	r6, #1
 800899e:	4638      	mov	r0, r7
 80089a0:	612e      	str	r6, [r5, #16]
 80089a2:	4621      	mov	r1, r4
 80089a4:	f7ff fd8e 	bl	80084c4 <_Bfree>
 80089a8:	4628      	mov	r0, r5
 80089aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80089b2:	3301      	adds	r3, #1
 80089b4:	e7c5      	b.n	8008942 <__lshift+0x4a>
 80089b6:	3904      	subs	r1, #4
 80089b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80089c0:	459c      	cmp	ip, r3
 80089c2:	d8f9      	bhi.n	80089b8 <__lshift+0xc0>
 80089c4:	e7ea      	b.n	800899c <__lshift+0xa4>
 80089c6:	bf00      	nop
 80089c8:	0800bd29 	.word	0x0800bd29
 80089cc:	0800bd3a 	.word	0x0800bd3a

080089d0 <__mcmp>:
 80089d0:	b530      	push	{r4, r5, lr}
 80089d2:	6902      	ldr	r2, [r0, #16]
 80089d4:	690c      	ldr	r4, [r1, #16]
 80089d6:	1b12      	subs	r2, r2, r4
 80089d8:	d10e      	bne.n	80089f8 <__mcmp+0x28>
 80089da:	f100 0314 	add.w	r3, r0, #20
 80089de:	3114      	adds	r1, #20
 80089e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089f0:	42a5      	cmp	r5, r4
 80089f2:	d003      	beq.n	80089fc <__mcmp+0x2c>
 80089f4:	d305      	bcc.n	8008a02 <__mcmp+0x32>
 80089f6:	2201      	movs	r2, #1
 80089f8:	4610      	mov	r0, r2
 80089fa:	bd30      	pop	{r4, r5, pc}
 80089fc:	4283      	cmp	r3, r0
 80089fe:	d3f3      	bcc.n	80089e8 <__mcmp+0x18>
 8008a00:	e7fa      	b.n	80089f8 <__mcmp+0x28>
 8008a02:	f04f 32ff 	mov.w	r2, #4294967295
 8008a06:	e7f7      	b.n	80089f8 <__mcmp+0x28>

08008a08 <__mdiff>:
 8008a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	4606      	mov	r6, r0
 8008a10:	4611      	mov	r1, r2
 8008a12:	4620      	mov	r0, r4
 8008a14:	4690      	mov	r8, r2
 8008a16:	f7ff ffdb 	bl	80089d0 <__mcmp>
 8008a1a:	1e05      	subs	r5, r0, #0
 8008a1c:	d110      	bne.n	8008a40 <__mdiff+0x38>
 8008a1e:	4629      	mov	r1, r5
 8008a20:	4630      	mov	r0, r6
 8008a22:	f7ff fd0f 	bl	8008444 <_Balloc>
 8008a26:	b930      	cbnz	r0, 8008a36 <__mdiff+0x2e>
 8008a28:	4b3a      	ldr	r3, [pc, #232]	; (8008b14 <__mdiff+0x10c>)
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	f240 2137 	movw	r1, #567	; 0x237
 8008a30:	4839      	ldr	r0, [pc, #228]	; (8008b18 <__mdiff+0x110>)
 8008a32:	f001 faa5 	bl	8009f80 <__assert_func>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a40:	bfa4      	itt	ge
 8008a42:	4643      	movge	r3, r8
 8008a44:	46a0      	movge	r8, r4
 8008a46:	4630      	mov	r0, r6
 8008a48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a4c:	bfa6      	itte	ge
 8008a4e:	461c      	movge	r4, r3
 8008a50:	2500      	movge	r5, #0
 8008a52:	2501      	movlt	r5, #1
 8008a54:	f7ff fcf6 	bl	8008444 <_Balloc>
 8008a58:	b920      	cbnz	r0, 8008a64 <__mdiff+0x5c>
 8008a5a:	4b2e      	ldr	r3, [pc, #184]	; (8008b14 <__mdiff+0x10c>)
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	f240 2145 	movw	r1, #581	; 0x245
 8008a62:	e7e5      	b.n	8008a30 <__mdiff+0x28>
 8008a64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a68:	6926      	ldr	r6, [r4, #16]
 8008a6a:	60c5      	str	r5, [r0, #12]
 8008a6c:	f104 0914 	add.w	r9, r4, #20
 8008a70:	f108 0514 	add.w	r5, r8, #20
 8008a74:	f100 0e14 	add.w	lr, r0, #20
 8008a78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a80:	f108 0210 	add.w	r2, r8, #16
 8008a84:	46f2      	mov	sl, lr
 8008a86:	2100      	movs	r1, #0
 8008a88:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a90:	fa11 f88b 	uxtah	r8, r1, fp
 8008a94:	b299      	uxth	r1, r3
 8008a96:	0c1b      	lsrs	r3, r3, #16
 8008a98:	eba8 0801 	sub.w	r8, r8, r1
 8008a9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008aa0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008aa4:	fa1f f888 	uxth.w	r8, r8
 8008aa8:	1419      	asrs	r1, r3, #16
 8008aaa:	454e      	cmp	r6, r9
 8008aac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ab0:	f84a 3b04 	str.w	r3, [sl], #4
 8008ab4:	d8e8      	bhi.n	8008a88 <__mdiff+0x80>
 8008ab6:	1b33      	subs	r3, r6, r4
 8008ab8:	3b15      	subs	r3, #21
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	3304      	adds	r3, #4
 8008ac0:	3415      	adds	r4, #21
 8008ac2:	42a6      	cmp	r6, r4
 8008ac4:	bf38      	it	cc
 8008ac6:	2304      	movcc	r3, #4
 8008ac8:	441d      	add	r5, r3
 8008aca:	4473      	add	r3, lr
 8008acc:	469e      	mov	lr, r3
 8008ace:	462e      	mov	r6, r5
 8008ad0:	4566      	cmp	r6, ip
 8008ad2:	d30e      	bcc.n	8008af2 <__mdiff+0xea>
 8008ad4:	f10c 0203 	add.w	r2, ip, #3
 8008ad8:	1b52      	subs	r2, r2, r5
 8008ada:	f022 0203 	bic.w	r2, r2, #3
 8008ade:	3d03      	subs	r5, #3
 8008ae0:	45ac      	cmp	ip, r5
 8008ae2:	bf38      	it	cc
 8008ae4:	2200      	movcc	r2, #0
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008aec:	b17a      	cbz	r2, 8008b0e <__mdiff+0x106>
 8008aee:	6107      	str	r7, [r0, #16]
 8008af0:	e7a4      	b.n	8008a3c <__mdiff+0x34>
 8008af2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008af6:	fa11 f288 	uxtah	r2, r1, r8
 8008afa:	1414      	asrs	r4, r2, #16
 8008afc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b00:	b292      	uxth	r2, r2
 8008b02:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b06:	f84e 2b04 	str.w	r2, [lr], #4
 8008b0a:	1421      	asrs	r1, r4, #16
 8008b0c:	e7e0      	b.n	8008ad0 <__mdiff+0xc8>
 8008b0e:	3f01      	subs	r7, #1
 8008b10:	e7ea      	b.n	8008ae8 <__mdiff+0xe0>
 8008b12:	bf00      	nop
 8008b14:	0800bd29 	.word	0x0800bd29
 8008b18:	0800bd3a 	.word	0x0800bd3a

08008b1c <__ulp>:
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	ed8d 0b00 	vstr	d0, [sp]
 8008b22:	9a01      	ldr	r2, [sp, #4]
 8008b24:	4b0f      	ldr	r3, [pc, #60]	; (8008b64 <__ulp+0x48>)
 8008b26:	4013      	ands	r3, r2
 8008b28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	dc08      	bgt.n	8008b42 <__ulp+0x26>
 8008b30:	425b      	negs	r3, r3
 8008b32:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008b36:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008b3a:	da04      	bge.n	8008b46 <__ulp+0x2a>
 8008b3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b40:	4113      	asrs	r3, r2
 8008b42:	2200      	movs	r2, #0
 8008b44:	e008      	b.n	8008b58 <__ulp+0x3c>
 8008b46:	f1a2 0314 	sub.w	r3, r2, #20
 8008b4a:	2b1e      	cmp	r3, #30
 8008b4c:	bfda      	itte	le
 8008b4e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008b52:	40da      	lsrle	r2, r3
 8008b54:	2201      	movgt	r2, #1
 8008b56:	2300      	movs	r3, #0
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	ec41 0b10 	vmov	d0, r0, r1
 8008b60:	b002      	add	sp, #8
 8008b62:	4770      	bx	lr
 8008b64:	7ff00000 	.word	0x7ff00000

08008b68 <__b2d>:
 8008b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6c:	6906      	ldr	r6, [r0, #16]
 8008b6e:	f100 0814 	add.w	r8, r0, #20
 8008b72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008b76:	1f37      	subs	r7, r6, #4
 8008b78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	f7ff fd53 	bl	8008628 <__hi0bits>
 8008b82:	f1c0 0320 	rsb	r3, r0, #32
 8008b86:	280a      	cmp	r0, #10
 8008b88:	600b      	str	r3, [r1, #0]
 8008b8a:	491b      	ldr	r1, [pc, #108]	; (8008bf8 <__b2d+0x90>)
 8008b8c:	dc15      	bgt.n	8008bba <__b2d+0x52>
 8008b8e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008b92:	fa22 f30c 	lsr.w	r3, r2, ip
 8008b96:	45b8      	cmp	r8, r7
 8008b98:	ea43 0501 	orr.w	r5, r3, r1
 8008b9c:	bf34      	ite	cc
 8008b9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ba2:	2300      	movcs	r3, #0
 8008ba4:	3015      	adds	r0, #21
 8008ba6:	fa02 f000 	lsl.w	r0, r2, r0
 8008baa:	fa23 f30c 	lsr.w	r3, r3, ip
 8008bae:	4303      	orrs	r3, r0
 8008bb0:	461c      	mov	r4, r3
 8008bb2:	ec45 4b10 	vmov	d0, r4, r5
 8008bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bba:	45b8      	cmp	r8, r7
 8008bbc:	bf3a      	itte	cc
 8008bbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008bc2:	f1a6 0708 	subcc.w	r7, r6, #8
 8008bc6:	2300      	movcs	r3, #0
 8008bc8:	380b      	subs	r0, #11
 8008bca:	d012      	beq.n	8008bf2 <__b2d+0x8a>
 8008bcc:	f1c0 0120 	rsb	r1, r0, #32
 8008bd0:	fa23 f401 	lsr.w	r4, r3, r1
 8008bd4:	4082      	lsls	r2, r0
 8008bd6:	4322      	orrs	r2, r4
 8008bd8:	4547      	cmp	r7, r8
 8008bda:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008bde:	bf8c      	ite	hi
 8008be0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008be4:	2200      	movls	r2, #0
 8008be6:	4083      	lsls	r3, r0
 8008be8:	40ca      	lsrs	r2, r1
 8008bea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	e7de      	b.n	8008bb0 <__b2d+0x48>
 8008bf2:	ea42 0501 	orr.w	r5, r2, r1
 8008bf6:	e7db      	b.n	8008bb0 <__b2d+0x48>
 8008bf8:	3ff00000 	.word	0x3ff00000

08008bfc <__d2b>:
 8008bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c00:	460f      	mov	r7, r1
 8008c02:	2101      	movs	r1, #1
 8008c04:	ec59 8b10 	vmov	r8, r9, d0
 8008c08:	4616      	mov	r6, r2
 8008c0a:	f7ff fc1b 	bl	8008444 <_Balloc>
 8008c0e:	4604      	mov	r4, r0
 8008c10:	b930      	cbnz	r0, 8008c20 <__d2b+0x24>
 8008c12:	4602      	mov	r2, r0
 8008c14:	4b24      	ldr	r3, [pc, #144]	; (8008ca8 <__d2b+0xac>)
 8008c16:	4825      	ldr	r0, [pc, #148]	; (8008cac <__d2b+0xb0>)
 8008c18:	f240 310f 	movw	r1, #783	; 0x30f
 8008c1c:	f001 f9b0 	bl	8009f80 <__assert_func>
 8008c20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c28:	bb2d      	cbnz	r5, 8008c76 <__d2b+0x7a>
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	f1b8 0300 	subs.w	r3, r8, #0
 8008c30:	d026      	beq.n	8008c80 <__d2b+0x84>
 8008c32:	4668      	mov	r0, sp
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	f7ff fd17 	bl	8008668 <__lo0bits>
 8008c3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c3e:	b1e8      	cbz	r0, 8008c7c <__d2b+0x80>
 8008c40:	f1c0 0320 	rsb	r3, r0, #32
 8008c44:	fa02 f303 	lsl.w	r3, r2, r3
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	40c2      	lsrs	r2, r0
 8008c4c:	6163      	str	r3, [r4, #20]
 8008c4e:	9201      	str	r2, [sp, #4]
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	61a3      	str	r3, [r4, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bf14      	ite	ne
 8008c58:	2202      	movne	r2, #2
 8008c5a:	2201      	moveq	r2, #1
 8008c5c:	6122      	str	r2, [r4, #16]
 8008c5e:	b1bd      	cbz	r5, 8008c90 <__d2b+0x94>
 8008c60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c64:	4405      	add	r5, r0
 8008c66:	603d      	str	r5, [r7, #0]
 8008c68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c6c:	6030      	str	r0, [r6, #0]
 8008c6e:	4620      	mov	r0, r4
 8008c70:	b003      	add	sp, #12
 8008c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c7a:	e7d6      	b.n	8008c2a <__d2b+0x2e>
 8008c7c:	6161      	str	r1, [r4, #20]
 8008c7e:	e7e7      	b.n	8008c50 <__d2b+0x54>
 8008c80:	a801      	add	r0, sp, #4
 8008c82:	f7ff fcf1 	bl	8008668 <__lo0bits>
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	6163      	str	r3, [r4, #20]
 8008c8a:	3020      	adds	r0, #32
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	e7e5      	b.n	8008c5c <__d2b+0x60>
 8008c90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c98:	6038      	str	r0, [r7, #0]
 8008c9a:	6918      	ldr	r0, [r3, #16]
 8008c9c:	f7ff fcc4 	bl	8008628 <__hi0bits>
 8008ca0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ca4:	e7e2      	b.n	8008c6c <__d2b+0x70>
 8008ca6:	bf00      	nop
 8008ca8:	0800bd29 	.word	0x0800bd29
 8008cac:	0800bd3a 	.word	0x0800bd3a

08008cb0 <__ratio>:
 8008cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	4688      	mov	r8, r1
 8008cb6:	4669      	mov	r1, sp
 8008cb8:	4681      	mov	r9, r0
 8008cba:	f7ff ff55 	bl	8008b68 <__b2d>
 8008cbe:	a901      	add	r1, sp, #4
 8008cc0:	4640      	mov	r0, r8
 8008cc2:	ec55 4b10 	vmov	r4, r5, d0
 8008cc6:	f7ff ff4f 	bl	8008b68 <__b2d>
 8008cca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008cd2:	eba3 0c02 	sub.w	ip, r3, r2
 8008cd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008cda:	1a9b      	subs	r3, r3, r2
 8008cdc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ce0:	ec51 0b10 	vmov	r0, r1, d0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bfd6      	itet	le
 8008ce8:	460a      	movle	r2, r1
 8008cea:	462a      	movgt	r2, r5
 8008cec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008cf0:	468b      	mov	fp, r1
 8008cf2:	462f      	mov	r7, r5
 8008cf4:	bfd4      	ite	le
 8008cf6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008cfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008cfe:	4620      	mov	r0, r4
 8008d00:	ee10 2a10 	vmov	r2, s0
 8008d04:	465b      	mov	r3, fp
 8008d06:	4639      	mov	r1, r7
 8008d08:	f7f7 fda0 	bl	800084c <__aeabi_ddiv>
 8008d0c:	ec41 0b10 	vmov	d0, r0, r1
 8008d10:	b003      	add	sp, #12
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d16 <__copybits>:
 8008d16:	3901      	subs	r1, #1
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	1149      	asrs	r1, r1, #5
 8008d1c:	6914      	ldr	r4, [r2, #16]
 8008d1e:	3101      	adds	r1, #1
 8008d20:	f102 0314 	add.w	r3, r2, #20
 8008d24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d2c:	1f05      	subs	r5, r0, #4
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	d30c      	bcc.n	8008d4c <__copybits+0x36>
 8008d32:	1aa3      	subs	r3, r4, r2
 8008d34:	3b11      	subs	r3, #17
 8008d36:	f023 0303 	bic.w	r3, r3, #3
 8008d3a:	3211      	adds	r2, #17
 8008d3c:	42a2      	cmp	r2, r4
 8008d3e:	bf88      	it	hi
 8008d40:	2300      	movhi	r3, #0
 8008d42:	4418      	add	r0, r3
 8008d44:	2300      	movs	r3, #0
 8008d46:	4288      	cmp	r0, r1
 8008d48:	d305      	bcc.n	8008d56 <__copybits+0x40>
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d50:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d54:	e7eb      	b.n	8008d2e <__copybits+0x18>
 8008d56:	f840 3b04 	str.w	r3, [r0], #4
 8008d5a:	e7f4      	b.n	8008d46 <__copybits+0x30>

08008d5c <__any_on>:
 8008d5c:	f100 0214 	add.w	r2, r0, #20
 8008d60:	6900      	ldr	r0, [r0, #16]
 8008d62:	114b      	asrs	r3, r1, #5
 8008d64:	4298      	cmp	r0, r3
 8008d66:	b510      	push	{r4, lr}
 8008d68:	db11      	blt.n	8008d8e <__any_on+0x32>
 8008d6a:	dd0a      	ble.n	8008d82 <__any_on+0x26>
 8008d6c:	f011 011f 	ands.w	r1, r1, #31
 8008d70:	d007      	beq.n	8008d82 <__any_on+0x26>
 8008d72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d76:	fa24 f001 	lsr.w	r0, r4, r1
 8008d7a:	fa00 f101 	lsl.w	r1, r0, r1
 8008d7e:	428c      	cmp	r4, r1
 8008d80:	d10b      	bne.n	8008d9a <__any_on+0x3e>
 8008d82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d803      	bhi.n	8008d92 <__any_on+0x36>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	bd10      	pop	{r4, pc}
 8008d8e:	4603      	mov	r3, r0
 8008d90:	e7f7      	b.n	8008d82 <__any_on+0x26>
 8008d92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d96:	2900      	cmp	r1, #0
 8008d98:	d0f5      	beq.n	8008d86 <__any_on+0x2a>
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	e7f6      	b.n	8008d8c <__any_on+0x30>

08008d9e <sulp>:
 8008d9e:	b570      	push	{r4, r5, r6, lr}
 8008da0:	4604      	mov	r4, r0
 8008da2:	460d      	mov	r5, r1
 8008da4:	ec45 4b10 	vmov	d0, r4, r5
 8008da8:	4616      	mov	r6, r2
 8008daa:	f7ff feb7 	bl	8008b1c <__ulp>
 8008dae:	ec51 0b10 	vmov	r0, r1, d0
 8008db2:	b17e      	cbz	r6, 8008dd4 <sulp+0x36>
 8008db4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008db8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	dd09      	ble.n	8008dd4 <sulp+0x36>
 8008dc0:	051b      	lsls	r3, r3, #20
 8008dc2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008dc6:	2400      	movs	r4, #0
 8008dc8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008dcc:	4622      	mov	r2, r4
 8008dce:	462b      	mov	r3, r5
 8008dd0:	f7f7 fc12 	bl	80005f8 <__aeabi_dmul>
 8008dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008dd8 <_strtod_l>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	ed2d 8b02 	vpush	{d8}
 8008de0:	b09b      	sub	sp, #108	; 0x6c
 8008de2:	4604      	mov	r4, r0
 8008de4:	9213      	str	r2, [sp, #76]	; 0x4c
 8008de6:	2200      	movs	r2, #0
 8008de8:	9216      	str	r2, [sp, #88]	; 0x58
 8008dea:	460d      	mov	r5, r1
 8008dec:	f04f 0800 	mov.w	r8, #0
 8008df0:	f04f 0900 	mov.w	r9, #0
 8008df4:	460a      	mov	r2, r1
 8008df6:	9215      	str	r2, [sp, #84]	; 0x54
 8008df8:	7811      	ldrb	r1, [r2, #0]
 8008dfa:	292b      	cmp	r1, #43	; 0x2b
 8008dfc:	d04c      	beq.n	8008e98 <_strtod_l+0xc0>
 8008dfe:	d83a      	bhi.n	8008e76 <_strtod_l+0x9e>
 8008e00:	290d      	cmp	r1, #13
 8008e02:	d834      	bhi.n	8008e6e <_strtod_l+0x96>
 8008e04:	2908      	cmp	r1, #8
 8008e06:	d834      	bhi.n	8008e72 <_strtod_l+0x9a>
 8008e08:	2900      	cmp	r1, #0
 8008e0a:	d03d      	beq.n	8008e88 <_strtod_l+0xb0>
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	920a      	str	r2, [sp, #40]	; 0x28
 8008e10:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008e12:	7832      	ldrb	r2, [r6, #0]
 8008e14:	2a30      	cmp	r2, #48	; 0x30
 8008e16:	f040 80b4 	bne.w	8008f82 <_strtod_l+0x1aa>
 8008e1a:	7872      	ldrb	r2, [r6, #1]
 8008e1c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008e20:	2a58      	cmp	r2, #88	; 0x58
 8008e22:	d170      	bne.n	8008f06 <_strtod_l+0x12e>
 8008e24:	9302      	str	r3, [sp, #8]
 8008e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	ab16      	add	r3, sp, #88	; 0x58
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	4a8e      	ldr	r2, [pc, #568]	; (8009068 <_strtod_l+0x290>)
 8008e30:	ab17      	add	r3, sp, #92	; 0x5c
 8008e32:	a915      	add	r1, sp, #84	; 0x54
 8008e34:	4620      	mov	r0, r4
 8008e36:	f001 f93f 	bl	800a0b8 <__gethex>
 8008e3a:	f010 070f 	ands.w	r7, r0, #15
 8008e3e:	4605      	mov	r5, r0
 8008e40:	d005      	beq.n	8008e4e <_strtod_l+0x76>
 8008e42:	2f06      	cmp	r7, #6
 8008e44:	d12a      	bne.n	8008e9c <_strtod_l+0xc4>
 8008e46:	3601      	adds	r6, #1
 8008e48:	2300      	movs	r3, #0
 8008e4a:	9615      	str	r6, [sp, #84]	; 0x54
 8008e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8008e4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f040 857f 	bne.w	8009954 <_strtod_l+0xb7c>
 8008e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e58:	b1db      	cbz	r3, 8008e92 <_strtod_l+0xba>
 8008e5a:	4642      	mov	r2, r8
 8008e5c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e60:	ec43 2b10 	vmov	d0, r2, r3
 8008e64:	b01b      	add	sp, #108	; 0x6c
 8008e66:	ecbd 8b02 	vpop	{d8}
 8008e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6e:	2920      	cmp	r1, #32
 8008e70:	d1cc      	bne.n	8008e0c <_strtod_l+0x34>
 8008e72:	3201      	adds	r2, #1
 8008e74:	e7bf      	b.n	8008df6 <_strtod_l+0x1e>
 8008e76:	292d      	cmp	r1, #45	; 0x2d
 8008e78:	d1c8      	bne.n	8008e0c <_strtod_l+0x34>
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	910a      	str	r1, [sp, #40]	; 0x28
 8008e7e:	1c51      	adds	r1, r2, #1
 8008e80:	9115      	str	r1, [sp, #84]	; 0x54
 8008e82:	7852      	ldrb	r2, [r2, #1]
 8008e84:	2a00      	cmp	r2, #0
 8008e86:	d1c3      	bne.n	8008e10 <_strtod_l+0x38>
 8008e88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e8a:	9515      	str	r5, [sp, #84]	; 0x54
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f040 855f 	bne.w	8009950 <_strtod_l+0xb78>
 8008e92:	4642      	mov	r2, r8
 8008e94:	464b      	mov	r3, r9
 8008e96:	e7e3      	b.n	8008e60 <_strtod_l+0x88>
 8008e98:	2100      	movs	r1, #0
 8008e9a:	e7ef      	b.n	8008e7c <_strtod_l+0xa4>
 8008e9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e9e:	b13a      	cbz	r2, 8008eb0 <_strtod_l+0xd8>
 8008ea0:	2135      	movs	r1, #53	; 0x35
 8008ea2:	a818      	add	r0, sp, #96	; 0x60
 8008ea4:	f7ff ff37 	bl	8008d16 <__copybits>
 8008ea8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7ff fb0a 	bl	80084c4 <_Bfree>
 8008eb0:	3f01      	subs	r7, #1
 8008eb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008eb4:	2f04      	cmp	r7, #4
 8008eb6:	d806      	bhi.n	8008ec6 <_strtod_l+0xee>
 8008eb8:	e8df f007 	tbb	[pc, r7]
 8008ebc:	201d0314 	.word	0x201d0314
 8008ec0:	14          	.byte	0x14
 8008ec1:	00          	.byte	0x00
 8008ec2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008ec6:	05e9      	lsls	r1, r5, #23
 8008ec8:	bf48      	it	mi
 8008eca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008ece:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ed2:	0d1b      	lsrs	r3, r3, #20
 8008ed4:	051b      	lsls	r3, r3, #20
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1b9      	bne.n	8008e4e <_strtod_l+0x76>
 8008eda:	f7fe fb03 	bl	80074e4 <__errno>
 8008ede:	2322      	movs	r3, #34	; 0x22
 8008ee0:	6003      	str	r3, [r0, #0]
 8008ee2:	e7b4      	b.n	8008e4e <_strtod_l+0x76>
 8008ee4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008ee8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008eec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ef0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008ef4:	e7e7      	b.n	8008ec6 <_strtod_l+0xee>
 8008ef6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009070 <_strtod_l+0x298>
 8008efa:	e7e4      	b.n	8008ec6 <_strtod_l+0xee>
 8008efc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008f00:	f04f 38ff 	mov.w	r8, #4294967295
 8008f04:	e7df      	b.n	8008ec6 <_strtod_l+0xee>
 8008f06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	9215      	str	r2, [sp, #84]	; 0x54
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b30      	cmp	r3, #48	; 0x30
 8008f10:	d0f9      	beq.n	8008f06 <_strtod_l+0x12e>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d09b      	beq.n	8008e4e <_strtod_l+0x76>
 8008f16:	2301      	movs	r3, #1
 8008f18:	f04f 0a00 	mov.w	sl, #0
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f22:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008f26:	46d3      	mov	fp, sl
 8008f28:	220a      	movs	r2, #10
 8008f2a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008f2c:	7806      	ldrb	r6, [r0, #0]
 8008f2e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008f32:	b2d9      	uxtb	r1, r3
 8008f34:	2909      	cmp	r1, #9
 8008f36:	d926      	bls.n	8008f86 <_strtod_l+0x1ae>
 8008f38:	494c      	ldr	r1, [pc, #304]	; (800906c <_strtod_l+0x294>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f000 ffe6 	bl	8009f0c <strncmp>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d030      	beq.n	8008fa6 <_strtod_l+0x1ce>
 8008f44:	2000      	movs	r0, #0
 8008f46:	4632      	mov	r2, r6
 8008f48:	9005      	str	r0, [sp, #20]
 8008f4a:	465e      	mov	r6, fp
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2a65      	cmp	r2, #101	; 0x65
 8008f50:	d001      	beq.n	8008f56 <_strtod_l+0x17e>
 8008f52:	2a45      	cmp	r2, #69	; 0x45
 8008f54:	d113      	bne.n	8008f7e <_strtod_l+0x1a6>
 8008f56:	b91e      	cbnz	r6, 8008f60 <_strtod_l+0x188>
 8008f58:	9a04      	ldr	r2, [sp, #16]
 8008f5a:	4302      	orrs	r2, r0
 8008f5c:	d094      	beq.n	8008e88 <_strtod_l+0xb0>
 8008f5e:	2600      	movs	r6, #0
 8008f60:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008f62:	1c6a      	adds	r2, r5, #1
 8008f64:	9215      	str	r2, [sp, #84]	; 0x54
 8008f66:	786a      	ldrb	r2, [r5, #1]
 8008f68:	2a2b      	cmp	r2, #43	; 0x2b
 8008f6a:	d074      	beq.n	8009056 <_strtod_l+0x27e>
 8008f6c:	2a2d      	cmp	r2, #45	; 0x2d
 8008f6e:	d078      	beq.n	8009062 <_strtod_l+0x28a>
 8008f70:	f04f 0c00 	mov.w	ip, #0
 8008f74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008f78:	2909      	cmp	r1, #9
 8008f7a:	d97f      	bls.n	800907c <_strtod_l+0x2a4>
 8008f7c:	9515      	str	r5, [sp, #84]	; 0x54
 8008f7e:	2700      	movs	r7, #0
 8008f80:	e09e      	b.n	80090c0 <_strtod_l+0x2e8>
 8008f82:	2300      	movs	r3, #0
 8008f84:	e7c8      	b.n	8008f18 <_strtod_l+0x140>
 8008f86:	f1bb 0f08 	cmp.w	fp, #8
 8008f8a:	bfd8      	it	le
 8008f8c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008f8e:	f100 0001 	add.w	r0, r0, #1
 8008f92:	bfda      	itte	le
 8008f94:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f98:	9309      	strle	r3, [sp, #36]	; 0x24
 8008f9a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008f9e:	f10b 0b01 	add.w	fp, fp, #1
 8008fa2:	9015      	str	r0, [sp, #84]	; 0x54
 8008fa4:	e7c1      	b.n	8008f2a <_strtod_l+0x152>
 8008fa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	9215      	str	r2, [sp, #84]	; 0x54
 8008fac:	785a      	ldrb	r2, [r3, #1]
 8008fae:	f1bb 0f00 	cmp.w	fp, #0
 8008fb2:	d037      	beq.n	8009024 <_strtod_l+0x24c>
 8008fb4:	9005      	str	r0, [sp, #20]
 8008fb6:	465e      	mov	r6, fp
 8008fb8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008fbc:	2b09      	cmp	r3, #9
 8008fbe:	d912      	bls.n	8008fe6 <_strtod_l+0x20e>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e7c4      	b.n	8008f4e <_strtod_l+0x176>
 8008fc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	9215      	str	r2, [sp, #84]	; 0x54
 8008fca:	785a      	ldrb	r2, [r3, #1]
 8008fcc:	3001      	adds	r0, #1
 8008fce:	2a30      	cmp	r2, #48	; 0x30
 8008fd0:	d0f8      	beq.n	8008fc4 <_strtod_l+0x1ec>
 8008fd2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008fd6:	2b08      	cmp	r3, #8
 8008fd8:	f200 84c1 	bhi.w	800995e <_strtod_l+0xb86>
 8008fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fde:	9005      	str	r0, [sp, #20]
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	3a30      	subs	r2, #48	; 0x30
 8008fe8:	f100 0301 	add.w	r3, r0, #1
 8008fec:	d014      	beq.n	8009018 <_strtod_l+0x240>
 8008fee:	9905      	ldr	r1, [sp, #20]
 8008ff0:	4419      	add	r1, r3
 8008ff2:	9105      	str	r1, [sp, #20]
 8008ff4:	4633      	mov	r3, r6
 8008ff6:	eb00 0c06 	add.w	ip, r0, r6
 8008ffa:	210a      	movs	r1, #10
 8008ffc:	4563      	cmp	r3, ip
 8008ffe:	d113      	bne.n	8009028 <_strtod_l+0x250>
 8009000:	1833      	adds	r3, r6, r0
 8009002:	2b08      	cmp	r3, #8
 8009004:	f106 0601 	add.w	r6, r6, #1
 8009008:	4406      	add	r6, r0
 800900a:	dc1a      	bgt.n	8009042 <_strtod_l+0x26a>
 800900c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800900e:	230a      	movs	r3, #10
 8009010:	fb03 2301 	mla	r3, r3, r1, r2
 8009014:	9309      	str	r3, [sp, #36]	; 0x24
 8009016:	2300      	movs	r3, #0
 8009018:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800901a:	1c51      	adds	r1, r2, #1
 800901c:	9115      	str	r1, [sp, #84]	; 0x54
 800901e:	7852      	ldrb	r2, [r2, #1]
 8009020:	4618      	mov	r0, r3
 8009022:	e7c9      	b.n	8008fb8 <_strtod_l+0x1e0>
 8009024:	4658      	mov	r0, fp
 8009026:	e7d2      	b.n	8008fce <_strtod_l+0x1f6>
 8009028:	2b08      	cmp	r3, #8
 800902a:	f103 0301 	add.w	r3, r3, #1
 800902e:	dc03      	bgt.n	8009038 <_strtod_l+0x260>
 8009030:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009032:	434f      	muls	r7, r1
 8009034:	9709      	str	r7, [sp, #36]	; 0x24
 8009036:	e7e1      	b.n	8008ffc <_strtod_l+0x224>
 8009038:	2b10      	cmp	r3, #16
 800903a:	bfd8      	it	le
 800903c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009040:	e7dc      	b.n	8008ffc <_strtod_l+0x224>
 8009042:	2e10      	cmp	r6, #16
 8009044:	bfdc      	itt	le
 8009046:	230a      	movle	r3, #10
 8009048:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800904c:	e7e3      	b.n	8009016 <_strtod_l+0x23e>
 800904e:	2300      	movs	r3, #0
 8009050:	9305      	str	r3, [sp, #20]
 8009052:	2301      	movs	r3, #1
 8009054:	e780      	b.n	8008f58 <_strtod_l+0x180>
 8009056:	f04f 0c00 	mov.w	ip, #0
 800905a:	1caa      	adds	r2, r5, #2
 800905c:	9215      	str	r2, [sp, #84]	; 0x54
 800905e:	78aa      	ldrb	r2, [r5, #2]
 8009060:	e788      	b.n	8008f74 <_strtod_l+0x19c>
 8009062:	f04f 0c01 	mov.w	ip, #1
 8009066:	e7f8      	b.n	800905a <_strtod_l+0x282>
 8009068:	0800be98 	.word	0x0800be98
 800906c:	0800be94 	.word	0x0800be94
 8009070:	7ff00000 	.word	0x7ff00000
 8009074:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009076:	1c51      	adds	r1, r2, #1
 8009078:	9115      	str	r1, [sp, #84]	; 0x54
 800907a:	7852      	ldrb	r2, [r2, #1]
 800907c:	2a30      	cmp	r2, #48	; 0x30
 800907e:	d0f9      	beq.n	8009074 <_strtod_l+0x29c>
 8009080:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009084:	2908      	cmp	r1, #8
 8009086:	f63f af7a 	bhi.w	8008f7e <_strtod_l+0x1a6>
 800908a:	3a30      	subs	r2, #48	; 0x30
 800908c:	9208      	str	r2, [sp, #32]
 800908e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009090:	920c      	str	r2, [sp, #48]	; 0x30
 8009092:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009094:	1c57      	adds	r7, r2, #1
 8009096:	9715      	str	r7, [sp, #84]	; 0x54
 8009098:	7852      	ldrb	r2, [r2, #1]
 800909a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800909e:	f1be 0f09 	cmp.w	lr, #9
 80090a2:	d938      	bls.n	8009116 <_strtod_l+0x33e>
 80090a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090a6:	1a7f      	subs	r7, r7, r1
 80090a8:	2f08      	cmp	r7, #8
 80090aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80090ae:	dc03      	bgt.n	80090b8 <_strtod_l+0x2e0>
 80090b0:	9908      	ldr	r1, [sp, #32]
 80090b2:	428f      	cmp	r7, r1
 80090b4:	bfa8      	it	ge
 80090b6:	460f      	movge	r7, r1
 80090b8:	f1bc 0f00 	cmp.w	ip, #0
 80090bc:	d000      	beq.n	80090c0 <_strtod_l+0x2e8>
 80090be:	427f      	negs	r7, r7
 80090c0:	2e00      	cmp	r6, #0
 80090c2:	d14f      	bne.n	8009164 <_strtod_l+0x38c>
 80090c4:	9904      	ldr	r1, [sp, #16]
 80090c6:	4301      	orrs	r1, r0
 80090c8:	f47f aec1 	bne.w	8008e4e <_strtod_l+0x76>
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f47f aedb 	bne.w	8008e88 <_strtod_l+0xb0>
 80090d2:	2a69      	cmp	r2, #105	; 0x69
 80090d4:	d029      	beq.n	800912a <_strtod_l+0x352>
 80090d6:	dc26      	bgt.n	8009126 <_strtod_l+0x34e>
 80090d8:	2a49      	cmp	r2, #73	; 0x49
 80090da:	d026      	beq.n	800912a <_strtod_l+0x352>
 80090dc:	2a4e      	cmp	r2, #78	; 0x4e
 80090de:	f47f aed3 	bne.w	8008e88 <_strtod_l+0xb0>
 80090e2:	499b      	ldr	r1, [pc, #620]	; (8009350 <_strtod_l+0x578>)
 80090e4:	a815      	add	r0, sp, #84	; 0x54
 80090e6:	f001 fa27 	bl	800a538 <__match>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f43f aecc 	beq.w	8008e88 <_strtod_l+0xb0>
 80090f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b28      	cmp	r3, #40	; 0x28
 80090f6:	d12f      	bne.n	8009158 <_strtod_l+0x380>
 80090f8:	4996      	ldr	r1, [pc, #600]	; (8009354 <_strtod_l+0x57c>)
 80090fa:	aa18      	add	r2, sp, #96	; 0x60
 80090fc:	a815      	add	r0, sp, #84	; 0x54
 80090fe:	f001 fa2f 	bl	800a560 <__hexnan>
 8009102:	2805      	cmp	r0, #5
 8009104:	d128      	bne.n	8009158 <_strtod_l+0x380>
 8009106:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009108:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800910c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009110:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009114:	e69b      	b.n	8008e4e <_strtod_l+0x76>
 8009116:	9f08      	ldr	r7, [sp, #32]
 8009118:	210a      	movs	r1, #10
 800911a:	fb01 2107 	mla	r1, r1, r7, r2
 800911e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009122:	9208      	str	r2, [sp, #32]
 8009124:	e7b5      	b.n	8009092 <_strtod_l+0x2ba>
 8009126:	2a6e      	cmp	r2, #110	; 0x6e
 8009128:	e7d9      	b.n	80090de <_strtod_l+0x306>
 800912a:	498b      	ldr	r1, [pc, #556]	; (8009358 <_strtod_l+0x580>)
 800912c:	a815      	add	r0, sp, #84	; 0x54
 800912e:	f001 fa03 	bl	800a538 <__match>
 8009132:	2800      	cmp	r0, #0
 8009134:	f43f aea8 	beq.w	8008e88 <_strtod_l+0xb0>
 8009138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800913a:	4988      	ldr	r1, [pc, #544]	; (800935c <_strtod_l+0x584>)
 800913c:	3b01      	subs	r3, #1
 800913e:	a815      	add	r0, sp, #84	; 0x54
 8009140:	9315      	str	r3, [sp, #84]	; 0x54
 8009142:	f001 f9f9 	bl	800a538 <__match>
 8009146:	b910      	cbnz	r0, 800914e <_strtod_l+0x376>
 8009148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800914a:	3301      	adds	r3, #1
 800914c:	9315      	str	r3, [sp, #84]	; 0x54
 800914e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800936c <_strtod_l+0x594>
 8009152:	f04f 0800 	mov.w	r8, #0
 8009156:	e67a      	b.n	8008e4e <_strtod_l+0x76>
 8009158:	4881      	ldr	r0, [pc, #516]	; (8009360 <_strtod_l+0x588>)
 800915a:	f000 ff09 	bl	8009f70 <nan>
 800915e:	ec59 8b10 	vmov	r8, r9, d0
 8009162:	e674      	b.n	8008e4e <_strtod_l+0x76>
 8009164:	9b05      	ldr	r3, [sp, #20]
 8009166:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009168:	1afb      	subs	r3, r7, r3
 800916a:	f1bb 0f00 	cmp.w	fp, #0
 800916e:	bf08      	it	eq
 8009170:	46b3      	moveq	fp, r6
 8009172:	2e10      	cmp	r6, #16
 8009174:	9308      	str	r3, [sp, #32]
 8009176:	4635      	mov	r5, r6
 8009178:	bfa8      	it	ge
 800917a:	2510      	movge	r5, #16
 800917c:	f7f7 f9c2 	bl	8000504 <__aeabi_ui2d>
 8009180:	2e09      	cmp	r6, #9
 8009182:	4680      	mov	r8, r0
 8009184:	4689      	mov	r9, r1
 8009186:	dd13      	ble.n	80091b0 <_strtod_l+0x3d8>
 8009188:	4b76      	ldr	r3, [pc, #472]	; (8009364 <_strtod_l+0x58c>)
 800918a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800918e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009192:	f7f7 fa31 	bl	80005f8 <__aeabi_dmul>
 8009196:	4680      	mov	r8, r0
 8009198:	4650      	mov	r0, sl
 800919a:	4689      	mov	r9, r1
 800919c:	f7f7 f9b2 	bl	8000504 <__aeabi_ui2d>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 f870 	bl	800028c <__adddf3>
 80091ac:	4680      	mov	r8, r0
 80091ae:	4689      	mov	r9, r1
 80091b0:	2e0f      	cmp	r6, #15
 80091b2:	dc38      	bgt.n	8009226 <_strtod_l+0x44e>
 80091b4:	9b08      	ldr	r3, [sp, #32]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f43f ae49 	beq.w	8008e4e <_strtod_l+0x76>
 80091bc:	dd24      	ble.n	8009208 <_strtod_l+0x430>
 80091be:	2b16      	cmp	r3, #22
 80091c0:	dc0b      	bgt.n	80091da <_strtod_l+0x402>
 80091c2:	4968      	ldr	r1, [pc, #416]	; (8009364 <_strtod_l+0x58c>)
 80091c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091cc:	4642      	mov	r2, r8
 80091ce:	464b      	mov	r3, r9
 80091d0:	f7f7 fa12 	bl	80005f8 <__aeabi_dmul>
 80091d4:	4680      	mov	r8, r0
 80091d6:	4689      	mov	r9, r1
 80091d8:	e639      	b.n	8008e4e <_strtod_l+0x76>
 80091da:	9a08      	ldr	r2, [sp, #32]
 80091dc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80091e0:	4293      	cmp	r3, r2
 80091e2:	db20      	blt.n	8009226 <_strtod_l+0x44e>
 80091e4:	4c5f      	ldr	r4, [pc, #380]	; (8009364 <_strtod_l+0x58c>)
 80091e6:	f1c6 060f 	rsb	r6, r6, #15
 80091ea:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80091ee:	4642      	mov	r2, r8
 80091f0:	464b      	mov	r3, r9
 80091f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091f6:	f7f7 f9ff 	bl	80005f8 <__aeabi_dmul>
 80091fa:	9b08      	ldr	r3, [sp, #32]
 80091fc:	1b9e      	subs	r6, r3, r6
 80091fe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009202:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009206:	e7e3      	b.n	80091d0 <_strtod_l+0x3f8>
 8009208:	9b08      	ldr	r3, [sp, #32]
 800920a:	3316      	adds	r3, #22
 800920c:	db0b      	blt.n	8009226 <_strtod_l+0x44e>
 800920e:	9b05      	ldr	r3, [sp, #20]
 8009210:	1bdf      	subs	r7, r3, r7
 8009212:	4b54      	ldr	r3, [pc, #336]	; (8009364 <_strtod_l+0x58c>)
 8009214:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800921c:	4640      	mov	r0, r8
 800921e:	4649      	mov	r1, r9
 8009220:	f7f7 fb14 	bl	800084c <__aeabi_ddiv>
 8009224:	e7d6      	b.n	80091d4 <_strtod_l+0x3fc>
 8009226:	9b08      	ldr	r3, [sp, #32]
 8009228:	1b75      	subs	r5, r6, r5
 800922a:	441d      	add	r5, r3
 800922c:	2d00      	cmp	r5, #0
 800922e:	dd70      	ble.n	8009312 <_strtod_l+0x53a>
 8009230:	f015 030f 	ands.w	r3, r5, #15
 8009234:	d00a      	beq.n	800924c <_strtod_l+0x474>
 8009236:	494b      	ldr	r1, [pc, #300]	; (8009364 <_strtod_l+0x58c>)
 8009238:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800923c:	4642      	mov	r2, r8
 800923e:	464b      	mov	r3, r9
 8009240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009244:	f7f7 f9d8 	bl	80005f8 <__aeabi_dmul>
 8009248:	4680      	mov	r8, r0
 800924a:	4689      	mov	r9, r1
 800924c:	f035 050f 	bics.w	r5, r5, #15
 8009250:	d04d      	beq.n	80092ee <_strtod_l+0x516>
 8009252:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009256:	dd22      	ble.n	800929e <_strtod_l+0x4c6>
 8009258:	2500      	movs	r5, #0
 800925a:	46ab      	mov	fp, r5
 800925c:	9509      	str	r5, [sp, #36]	; 0x24
 800925e:	9505      	str	r5, [sp, #20]
 8009260:	2322      	movs	r3, #34	; 0x22
 8009262:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800936c <_strtod_l+0x594>
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	f04f 0800 	mov.w	r8, #0
 800926c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926e:	2b00      	cmp	r3, #0
 8009270:	f43f aded 	beq.w	8008e4e <_strtod_l+0x76>
 8009274:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009276:	4620      	mov	r0, r4
 8009278:	f7ff f924 	bl	80084c4 <_Bfree>
 800927c:	9905      	ldr	r1, [sp, #20]
 800927e:	4620      	mov	r0, r4
 8009280:	f7ff f920 	bl	80084c4 <_Bfree>
 8009284:	4659      	mov	r1, fp
 8009286:	4620      	mov	r0, r4
 8009288:	f7ff f91c 	bl	80084c4 <_Bfree>
 800928c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800928e:	4620      	mov	r0, r4
 8009290:	f7ff f918 	bl	80084c4 <_Bfree>
 8009294:	4629      	mov	r1, r5
 8009296:	4620      	mov	r0, r4
 8009298:	f7ff f914 	bl	80084c4 <_Bfree>
 800929c:	e5d7      	b.n	8008e4e <_strtod_l+0x76>
 800929e:	4b32      	ldr	r3, [pc, #200]	; (8009368 <_strtod_l+0x590>)
 80092a0:	9304      	str	r3, [sp, #16]
 80092a2:	2300      	movs	r3, #0
 80092a4:	112d      	asrs	r5, r5, #4
 80092a6:	4640      	mov	r0, r8
 80092a8:	4649      	mov	r1, r9
 80092aa:	469a      	mov	sl, r3
 80092ac:	2d01      	cmp	r5, #1
 80092ae:	dc21      	bgt.n	80092f4 <_strtod_l+0x51c>
 80092b0:	b10b      	cbz	r3, 80092b6 <_strtod_l+0x4de>
 80092b2:	4680      	mov	r8, r0
 80092b4:	4689      	mov	r9, r1
 80092b6:	492c      	ldr	r1, [pc, #176]	; (8009368 <_strtod_l+0x590>)
 80092b8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80092bc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80092c0:	4642      	mov	r2, r8
 80092c2:	464b      	mov	r3, r9
 80092c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c8:	f7f7 f996 	bl	80005f8 <__aeabi_dmul>
 80092cc:	4b27      	ldr	r3, [pc, #156]	; (800936c <_strtod_l+0x594>)
 80092ce:	460a      	mov	r2, r1
 80092d0:	400b      	ands	r3, r1
 80092d2:	4927      	ldr	r1, [pc, #156]	; (8009370 <_strtod_l+0x598>)
 80092d4:	428b      	cmp	r3, r1
 80092d6:	4680      	mov	r8, r0
 80092d8:	d8be      	bhi.n	8009258 <_strtod_l+0x480>
 80092da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80092de:	428b      	cmp	r3, r1
 80092e0:	bf86      	itte	hi
 80092e2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009374 <_strtod_l+0x59c>
 80092e6:	f04f 38ff 	movhi.w	r8, #4294967295
 80092ea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80092ee:	2300      	movs	r3, #0
 80092f0:	9304      	str	r3, [sp, #16]
 80092f2:	e07b      	b.n	80093ec <_strtod_l+0x614>
 80092f4:	07ea      	lsls	r2, r5, #31
 80092f6:	d505      	bpl.n	8009304 <_strtod_l+0x52c>
 80092f8:	9b04      	ldr	r3, [sp, #16]
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	f7f7 f97b 	bl	80005f8 <__aeabi_dmul>
 8009302:	2301      	movs	r3, #1
 8009304:	9a04      	ldr	r2, [sp, #16]
 8009306:	3208      	adds	r2, #8
 8009308:	f10a 0a01 	add.w	sl, sl, #1
 800930c:	106d      	asrs	r5, r5, #1
 800930e:	9204      	str	r2, [sp, #16]
 8009310:	e7cc      	b.n	80092ac <_strtod_l+0x4d4>
 8009312:	d0ec      	beq.n	80092ee <_strtod_l+0x516>
 8009314:	426d      	negs	r5, r5
 8009316:	f015 020f 	ands.w	r2, r5, #15
 800931a:	d00a      	beq.n	8009332 <_strtod_l+0x55a>
 800931c:	4b11      	ldr	r3, [pc, #68]	; (8009364 <_strtod_l+0x58c>)
 800931e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009322:	4640      	mov	r0, r8
 8009324:	4649      	mov	r1, r9
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f7 fa8f 	bl	800084c <__aeabi_ddiv>
 800932e:	4680      	mov	r8, r0
 8009330:	4689      	mov	r9, r1
 8009332:	112d      	asrs	r5, r5, #4
 8009334:	d0db      	beq.n	80092ee <_strtod_l+0x516>
 8009336:	2d1f      	cmp	r5, #31
 8009338:	dd1e      	ble.n	8009378 <_strtod_l+0x5a0>
 800933a:	2500      	movs	r5, #0
 800933c:	46ab      	mov	fp, r5
 800933e:	9509      	str	r5, [sp, #36]	; 0x24
 8009340:	9505      	str	r5, [sp, #20]
 8009342:	2322      	movs	r3, #34	; 0x22
 8009344:	f04f 0800 	mov.w	r8, #0
 8009348:	f04f 0900 	mov.w	r9, #0
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	e78d      	b.n	800926c <_strtod_l+0x494>
 8009350:	0800bc81 	.word	0x0800bc81
 8009354:	0800beac 	.word	0x0800beac
 8009358:	0800bc79 	.word	0x0800bc79
 800935c:	0800bcb0 	.word	0x0800bcb0
 8009360:	0800c03d 	.word	0x0800c03d
 8009364:	0800bdc0 	.word	0x0800bdc0
 8009368:	0800bd98 	.word	0x0800bd98
 800936c:	7ff00000 	.word	0x7ff00000
 8009370:	7ca00000 	.word	0x7ca00000
 8009374:	7fefffff 	.word	0x7fefffff
 8009378:	f015 0310 	ands.w	r3, r5, #16
 800937c:	bf18      	it	ne
 800937e:	236a      	movne	r3, #106	; 0x6a
 8009380:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009724 <_strtod_l+0x94c>
 8009384:	9304      	str	r3, [sp, #16]
 8009386:	4640      	mov	r0, r8
 8009388:	4649      	mov	r1, r9
 800938a:	2300      	movs	r3, #0
 800938c:	07ea      	lsls	r2, r5, #31
 800938e:	d504      	bpl.n	800939a <_strtod_l+0x5c2>
 8009390:	e9da 2300 	ldrd	r2, r3, [sl]
 8009394:	f7f7 f930 	bl	80005f8 <__aeabi_dmul>
 8009398:	2301      	movs	r3, #1
 800939a:	106d      	asrs	r5, r5, #1
 800939c:	f10a 0a08 	add.w	sl, sl, #8
 80093a0:	d1f4      	bne.n	800938c <_strtod_l+0x5b4>
 80093a2:	b10b      	cbz	r3, 80093a8 <_strtod_l+0x5d0>
 80093a4:	4680      	mov	r8, r0
 80093a6:	4689      	mov	r9, r1
 80093a8:	9b04      	ldr	r3, [sp, #16]
 80093aa:	b1bb      	cbz	r3, 80093dc <_strtod_l+0x604>
 80093ac:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80093b0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	4649      	mov	r1, r9
 80093b8:	dd10      	ble.n	80093dc <_strtod_l+0x604>
 80093ba:	2b1f      	cmp	r3, #31
 80093bc:	f340 811e 	ble.w	80095fc <_strtod_l+0x824>
 80093c0:	2b34      	cmp	r3, #52	; 0x34
 80093c2:	bfde      	ittt	le
 80093c4:	f04f 33ff 	movle.w	r3, #4294967295
 80093c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80093cc:	4093      	lslle	r3, r2
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	bfcc      	ite	gt
 80093d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80093d8:	ea03 0901 	andle.w	r9, r3, r1
 80093dc:	2200      	movs	r2, #0
 80093de:	2300      	movs	r3, #0
 80093e0:	4640      	mov	r0, r8
 80093e2:	4649      	mov	r1, r9
 80093e4:	f7f7 fb70 	bl	8000ac8 <__aeabi_dcmpeq>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d1a6      	bne.n	800933a <_strtod_l+0x562>
 80093ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093f2:	4633      	mov	r3, r6
 80093f4:	465a      	mov	r2, fp
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7ff f8cc 	bl	8008594 <__s2b>
 80093fc:	9009      	str	r0, [sp, #36]	; 0x24
 80093fe:	2800      	cmp	r0, #0
 8009400:	f43f af2a 	beq.w	8009258 <_strtod_l+0x480>
 8009404:	9a08      	ldr	r2, [sp, #32]
 8009406:	9b05      	ldr	r3, [sp, #20]
 8009408:	2a00      	cmp	r2, #0
 800940a:	eba3 0307 	sub.w	r3, r3, r7
 800940e:	bfa8      	it	ge
 8009410:	2300      	movge	r3, #0
 8009412:	930c      	str	r3, [sp, #48]	; 0x30
 8009414:	2500      	movs	r5, #0
 8009416:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800941a:	9312      	str	r3, [sp, #72]	; 0x48
 800941c:	46ab      	mov	fp, r5
 800941e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009420:	4620      	mov	r0, r4
 8009422:	6859      	ldr	r1, [r3, #4]
 8009424:	f7ff f80e 	bl	8008444 <_Balloc>
 8009428:	9005      	str	r0, [sp, #20]
 800942a:	2800      	cmp	r0, #0
 800942c:	f43f af18 	beq.w	8009260 <_strtod_l+0x488>
 8009430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	3202      	adds	r2, #2
 8009436:	f103 010c 	add.w	r1, r3, #12
 800943a:	0092      	lsls	r2, r2, #2
 800943c:	300c      	adds	r0, #12
 800943e:	f000 fd87 	bl	8009f50 <memcpy>
 8009442:	ec49 8b10 	vmov	d0, r8, r9
 8009446:	aa18      	add	r2, sp, #96	; 0x60
 8009448:	a917      	add	r1, sp, #92	; 0x5c
 800944a:	4620      	mov	r0, r4
 800944c:	f7ff fbd6 	bl	8008bfc <__d2b>
 8009450:	ec49 8b18 	vmov	d8, r8, r9
 8009454:	9016      	str	r0, [sp, #88]	; 0x58
 8009456:	2800      	cmp	r0, #0
 8009458:	f43f af02 	beq.w	8009260 <_strtod_l+0x488>
 800945c:	2101      	movs	r1, #1
 800945e:	4620      	mov	r0, r4
 8009460:	f7ff f930 	bl	80086c4 <__i2b>
 8009464:	4683      	mov	fp, r0
 8009466:	2800      	cmp	r0, #0
 8009468:	f43f aefa 	beq.w	8009260 <_strtod_l+0x488>
 800946c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800946e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009470:	2e00      	cmp	r6, #0
 8009472:	bfab      	itete	ge
 8009474:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009476:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009478:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800947a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800947e:	bfac      	ite	ge
 8009480:	eb06 0a03 	addge.w	sl, r6, r3
 8009484:	1b9f      	sublt	r7, r3, r6
 8009486:	9b04      	ldr	r3, [sp, #16]
 8009488:	1af6      	subs	r6, r6, r3
 800948a:	4416      	add	r6, r2
 800948c:	4ba0      	ldr	r3, [pc, #640]	; (8009710 <_strtod_l+0x938>)
 800948e:	3e01      	subs	r6, #1
 8009490:	429e      	cmp	r6, r3
 8009492:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009496:	f280 80c4 	bge.w	8009622 <_strtod_l+0x84a>
 800949a:	1b9b      	subs	r3, r3, r6
 800949c:	2b1f      	cmp	r3, #31
 800949e:	eba2 0203 	sub.w	r2, r2, r3
 80094a2:	f04f 0101 	mov.w	r1, #1
 80094a6:	f300 80b0 	bgt.w	800960a <_strtod_l+0x832>
 80094aa:	fa01 f303 	lsl.w	r3, r1, r3
 80094ae:	930e      	str	r3, [sp, #56]	; 0x38
 80094b0:	2300      	movs	r3, #0
 80094b2:	930d      	str	r3, [sp, #52]	; 0x34
 80094b4:	eb0a 0602 	add.w	r6, sl, r2
 80094b8:	9b04      	ldr	r3, [sp, #16]
 80094ba:	45b2      	cmp	sl, r6
 80094bc:	4417      	add	r7, r2
 80094be:	441f      	add	r7, r3
 80094c0:	4653      	mov	r3, sl
 80094c2:	bfa8      	it	ge
 80094c4:	4633      	movge	r3, r6
 80094c6:	42bb      	cmp	r3, r7
 80094c8:	bfa8      	it	ge
 80094ca:	463b      	movge	r3, r7
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	bfc2      	ittt	gt
 80094d0:	1af6      	subgt	r6, r6, r3
 80094d2:	1aff      	subgt	r7, r7, r3
 80094d4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80094d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094da:	2b00      	cmp	r3, #0
 80094dc:	dd17      	ble.n	800950e <_strtod_l+0x736>
 80094de:	4659      	mov	r1, fp
 80094e0:	461a      	mov	r2, r3
 80094e2:	4620      	mov	r0, r4
 80094e4:	f7ff f9ae 	bl	8008844 <__pow5mult>
 80094e8:	4683      	mov	fp, r0
 80094ea:	2800      	cmp	r0, #0
 80094ec:	f43f aeb8 	beq.w	8009260 <_strtod_l+0x488>
 80094f0:	4601      	mov	r1, r0
 80094f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094f4:	4620      	mov	r0, r4
 80094f6:	f7ff f8fb 	bl	80086f0 <__multiply>
 80094fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80094fc:	2800      	cmp	r0, #0
 80094fe:	f43f aeaf 	beq.w	8009260 <_strtod_l+0x488>
 8009502:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009504:	4620      	mov	r0, r4
 8009506:	f7fe ffdd 	bl	80084c4 <_Bfree>
 800950a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800950c:	9316      	str	r3, [sp, #88]	; 0x58
 800950e:	2e00      	cmp	r6, #0
 8009510:	f300 808c 	bgt.w	800962c <_strtod_l+0x854>
 8009514:	9b08      	ldr	r3, [sp, #32]
 8009516:	2b00      	cmp	r3, #0
 8009518:	dd08      	ble.n	800952c <_strtod_l+0x754>
 800951a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800951c:	9905      	ldr	r1, [sp, #20]
 800951e:	4620      	mov	r0, r4
 8009520:	f7ff f990 	bl	8008844 <__pow5mult>
 8009524:	9005      	str	r0, [sp, #20]
 8009526:	2800      	cmp	r0, #0
 8009528:	f43f ae9a 	beq.w	8009260 <_strtod_l+0x488>
 800952c:	2f00      	cmp	r7, #0
 800952e:	dd08      	ble.n	8009542 <_strtod_l+0x76a>
 8009530:	9905      	ldr	r1, [sp, #20]
 8009532:	463a      	mov	r2, r7
 8009534:	4620      	mov	r0, r4
 8009536:	f7ff f9df 	bl	80088f8 <__lshift>
 800953a:	9005      	str	r0, [sp, #20]
 800953c:	2800      	cmp	r0, #0
 800953e:	f43f ae8f 	beq.w	8009260 <_strtod_l+0x488>
 8009542:	f1ba 0f00 	cmp.w	sl, #0
 8009546:	dd08      	ble.n	800955a <_strtod_l+0x782>
 8009548:	4659      	mov	r1, fp
 800954a:	4652      	mov	r2, sl
 800954c:	4620      	mov	r0, r4
 800954e:	f7ff f9d3 	bl	80088f8 <__lshift>
 8009552:	4683      	mov	fp, r0
 8009554:	2800      	cmp	r0, #0
 8009556:	f43f ae83 	beq.w	8009260 <_strtod_l+0x488>
 800955a:	9a05      	ldr	r2, [sp, #20]
 800955c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800955e:	4620      	mov	r0, r4
 8009560:	f7ff fa52 	bl	8008a08 <__mdiff>
 8009564:	4605      	mov	r5, r0
 8009566:	2800      	cmp	r0, #0
 8009568:	f43f ae7a 	beq.w	8009260 <_strtod_l+0x488>
 800956c:	68c3      	ldr	r3, [r0, #12]
 800956e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009570:	2300      	movs	r3, #0
 8009572:	60c3      	str	r3, [r0, #12]
 8009574:	4659      	mov	r1, fp
 8009576:	f7ff fa2b 	bl	80089d0 <__mcmp>
 800957a:	2800      	cmp	r0, #0
 800957c:	da60      	bge.n	8009640 <_strtod_l+0x868>
 800957e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009580:	ea53 0308 	orrs.w	r3, r3, r8
 8009584:	f040 8084 	bne.w	8009690 <_strtod_l+0x8b8>
 8009588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800958c:	2b00      	cmp	r3, #0
 800958e:	d17f      	bne.n	8009690 <_strtod_l+0x8b8>
 8009590:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009594:	0d1b      	lsrs	r3, r3, #20
 8009596:	051b      	lsls	r3, r3, #20
 8009598:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800959c:	d978      	bls.n	8009690 <_strtod_l+0x8b8>
 800959e:	696b      	ldr	r3, [r5, #20]
 80095a0:	b913      	cbnz	r3, 80095a8 <_strtod_l+0x7d0>
 80095a2:	692b      	ldr	r3, [r5, #16]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	dd73      	ble.n	8009690 <_strtod_l+0x8b8>
 80095a8:	4629      	mov	r1, r5
 80095aa:	2201      	movs	r2, #1
 80095ac:	4620      	mov	r0, r4
 80095ae:	f7ff f9a3 	bl	80088f8 <__lshift>
 80095b2:	4659      	mov	r1, fp
 80095b4:	4605      	mov	r5, r0
 80095b6:	f7ff fa0b 	bl	80089d0 <__mcmp>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	dd68      	ble.n	8009690 <_strtod_l+0x8b8>
 80095be:	9904      	ldr	r1, [sp, #16]
 80095c0:	4a54      	ldr	r2, [pc, #336]	; (8009714 <_strtod_l+0x93c>)
 80095c2:	464b      	mov	r3, r9
 80095c4:	2900      	cmp	r1, #0
 80095c6:	f000 8084 	beq.w	80096d2 <_strtod_l+0x8fa>
 80095ca:	ea02 0109 	and.w	r1, r2, r9
 80095ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80095d2:	dc7e      	bgt.n	80096d2 <_strtod_l+0x8fa>
 80095d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80095d8:	f77f aeb3 	ble.w	8009342 <_strtod_l+0x56a>
 80095dc:	4b4e      	ldr	r3, [pc, #312]	; (8009718 <_strtod_l+0x940>)
 80095de:	4640      	mov	r0, r8
 80095e0:	4649      	mov	r1, r9
 80095e2:	2200      	movs	r2, #0
 80095e4:	f7f7 f808 	bl	80005f8 <__aeabi_dmul>
 80095e8:	4b4a      	ldr	r3, [pc, #296]	; (8009714 <_strtod_l+0x93c>)
 80095ea:	400b      	ands	r3, r1
 80095ec:	4680      	mov	r8, r0
 80095ee:	4689      	mov	r9, r1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f47f ae3f 	bne.w	8009274 <_strtod_l+0x49c>
 80095f6:	2322      	movs	r3, #34	; 0x22
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	e63b      	b.n	8009274 <_strtod_l+0x49c>
 80095fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009600:	fa02 f303 	lsl.w	r3, r2, r3
 8009604:	ea03 0808 	and.w	r8, r3, r8
 8009608:	e6e8      	b.n	80093dc <_strtod_l+0x604>
 800960a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800960e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009612:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009616:	36e2      	adds	r6, #226	; 0xe2
 8009618:	fa01 f306 	lsl.w	r3, r1, r6
 800961c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009620:	e748      	b.n	80094b4 <_strtod_l+0x6dc>
 8009622:	2100      	movs	r1, #0
 8009624:	2301      	movs	r3, #1
 8009626:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800962a:	e743      	b.n	80094b4 <_strtod_l+0x6dc>
 800962c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800962e:	4632      	mov	r2, r6
 8009630:	4620      	mov	r0, r4
 8009632:	f7ff f961 	bl	80088f8 <__lshift>
 8009636:	9016      	str	r0, [sp, #88]	; 0x58
 8009638:	2800      	cmp	r0, #0
 800963a:	f47f af6b 	bne.w	8009514 <_strtod_l+0x73c>
 800963e:	e60f      	b.n	8009260 <_strtod_l+0x488>
 8009640:	46ca      	mov	sl, r9
 8009642:	d171      	bne.n	8009728 <_strtod_l+0x950>
 8009644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009646:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800964a:	b352      	cbz	r2, 80096a2 <_strtod_l+0x8ca>
 800964c:	4a33      	ldr	r2, [pc, #204]	; (800971c <_strtod_l+0x944>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d12a      	bne.n	80096a8 <_strtod_l+0x8d0>
 8009652:	9b04      	ldr	r3, [sp, #16]
 8009654:	4641      	mov	r1, r8
 8009656:	b1fb      	cbz	r3, 8009698 <_strtod_l+0x8c0>
 8009658:	4b2e      	ldr	r3, [pc, #184]	; (8009714 <_strtod_l+0x93c>)
 800965a:	ea09 0303 	and.w	r3, r9, r3
 800965e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009662:	f04f 32ff 	mov.w	r2, #4294967295
 8009666:	d81a      	bhi.n	800969e <_strtod_l+0x8c6>
 8009668:	0d1b      	lsrs	r3, r3, #20
 800966a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800966e:	fa02 f303 	lsl.w	r3, r2, r3
 8009672:	4299      	cmp	r1, r3
 8009674:	d118      	bne.n	80096a8 <_strtod_l+0x8d0>
 8009676:	4b2a      	ldr	r3, [pc, #168]	; (8009720 <_strtod_l+0x948>)
 8009678:	459a      	cmp	sl, r3
 800967a:	d102      	bne.n	8009682 <_strtod_l+0x8aa>
 800967c:	3101      	adds	r1, #1
 800967e:	f43f adef 	beq.w	8009260 <_strtod_l+0x488>
 8009682:	4b24      	ldr	r3, [pc, #144]	; (8009714 <_strtod_l+0x93c>)
 8009684:	ea0a 0303 	and.w	r3, sl, r3
 8009688:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800968c:	f04f 0800 	mov.w	r8, #0
 8009690:	9b04      	ldr	r3, [sp, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1a2      	bne.n	80095dc <_strtod_l+0x804>
 8009696:	e5ed      	b.n	8009274 <_strtod_l+0x49c>
 8009698:	f04f 33ff 	mov.w	r3, #4294967295
 800969c:	e7e9      	b.n	8009672 <_strtod_l+0x89a>
 800969e:	4613      	mov	r3, r2
 80096a0:	e7e7      	b.n	8009672 <_strtod_l+0x89a>
 80096a2:	ea53 0308 	orrs.w	r3, r3, r8
 80096a6:	d08a      	beq.n	80095be <_strtod_l+0x7e6>
 80096a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096aa:	b1e3      	cbz	r3, 80096e6 <_strtod_l+0x90e>
 80096ac:	ea13 0f0a 	tst.w	r3, sl
 80096b0:	d0ee      	beq.n	8009690 <_strtod_l+0x8b8>
 80096b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	4640      	mov	r0, r8
 80096b8:	4649      	mov	r1, r9
 80096ba:	b1c3      	cbz	r3, 80096ee <_strtod_l+0x916>
 80096bc:	f7ff fb6f 	bl	8008d9e <sulp>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	ec51 0b18 	vmov	r0, r1, d8
 80096c8:	f7f6 fde0 	bl	800028c <__adddf3>
 80096cc:	4680      	mov	r8, r0
 80096ce:	4689      	mov	r9, r1
 80096d0:	e7de      	b.n	8009690 <_strtod_l+0x8b8>
 80096d2:	4013      	ands	r3, r2
 80096d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80096d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80096dc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80096e0:	f04f 38ff 	mov.w	r8, #4294967295
 80096e4:	e7d4      	b.n	8009690 <_strtod_l+0x8b8>
 80096e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e8:	ea13 0f08 	tst.w	r3, r8
 80096ec:	e7e0      	b.n	80096b0 <_strtod_l+0x8d8>
 80096ee:	f7ff fb56 	bl	8008d9e <sulp>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	ec51 0b18 	vmov	r0, r1, d8
 80096fa:	f7f6 fdc5 	bl	8000288 <__aeabi_dsub>
 80096fe:	2200      	movs	r2, #0
 8009700:	2300      	movs	r3, #0
 8009702:	4680      	mov	r8, r0
 8009704:	4689      	mov	r9, r1
 8009706:	f7f7 f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800970a:	2800      	cmp	r0, #0
 800970c:	d0c0      	beq.n	8009690 <_strtod_l+0x8b8>
 800970e:	e618      	b.n	8009342 <_strtod_l+0x56a>
 8009710:	fffffc02 	.word	0xfffffc02
 8009714:	7ff00000 	.word	0x7ff00000
 8009718:	39500000 	.word	0x39500000
 800971c:	000fffff 	.word	0x000fffff
 8009720:	7fefffff 	.word	0x7fefffff
 8009724:	0800bec0 	.word	0x0800bec0
 8009728:	4659      	mov	r1, fp
 800972a:	4628      	mov	r0, r5
 800972c:	f7ff fac0 	bl	8008cb0 <__ratio>
 8009730:	ec57 6b10 	vmov	r6, r7, d0
 8009734:	ee10 0a10 	vmov	r0, s0
 8009738:	2200      	movs	r2, #0
 800973a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800973e:	4639      	mov	r1, r7
 8009740:	f7f7 f9d6 	bl	8000af0 <__aeabi_dcmple>
 8009744:	2800      	cmp	r0, #0
 8009746:	d071      	beq.n	800982c <_strtod_l+0xa54>
 8009748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800974a:	2b00      	cmp	r3, #0
 800974c:	d17c      	bne.n	8009848 <_strtod_l+0xa70>
 800974e:	f1b8 0f00 	cmp.w	r8, #0
 8009752:	d15a      	bne.n	800980a <_strtod_l+0xa32>
 8009754:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009758:	2b00      	cmp	r3, #0
 800975a:	d15d      	bne.n	8009818 <_strtod_l+0xa40>
 800975c:	4b90      	ldr	r3, [pc, #576]	; (80099a0 <_strtod_l+0xbc8>)
 800975e:	2200      	movs	r2, #0
 8009760:	4630      	mov	r0, r6
 8009762:	4639      	mov	r1, r7
 8009764:	f7f7 f9ba 	bl	8000adc <__aeabi_dcmplt>
 8009768:	2800      	cmp	r0, #0
 800976a:	d15c      	bne.n	8009826 <_strtod_l+0xa4e>
 800976c:	4630      	mov	r0, r6
 800976e:	4639      	mov	r1, r7
 8009770:	4b8c      	ldr	r3, [pc, #560]	; (80099a4 <_strtod_l+0xbcc>)
 8009772:	2200      	movs	r2, #0
 8009774:	f7f6 ff40 	bl	80005f8 <__aeabi_dmul>
 8009778:	4606      	mov	r6, r0
 800977a:	460f      	mov	r7, r1
 800977c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009780:	9606      	str	r6, [sp, #24]
 8009782:	9307      	str	r3, [sp, #28]
 8009784:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009788:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800978c:	4b86      	ldr	r3, [pc, #536]	; (80099a8 <_strtod_l+0xbd0>)
 800978e:	ea0a 0303 	and.w	r3, sl, r3
 8009792:	930d      	str	r3, [sp, #52]	; 0x34
 8009794:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009796:	4b85      	ldr	r3, [pc, #532]	; (80099ac <_strtod_l+0xbd4>)
 8009798:	429a      	cmp	r2, r3
 800979a:	f040 8090 	bne.w	80098be <_strtod_l+0xae6>
 800979e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80097a2:	ec49 8b10 	vmov	d0, r8, r9
 80097a6:	f7ff f9b9 	bl	8008b1c <__ulp>
 80097aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097ae:	ec51 0b10 	vmov	r0, r1, d0
 80097b2:	f7f6 ff21 	bl	80005f8 <__aeabi_dmul>
 80097b6:	4642      	mov	r2, r8
 80097b8:	464b      	mov	r3, r9
 80097ba:	f7f6 fd67 	bl	800028c <__adddf3>
 80097be:	460b      	mov	r3, r1
 80097c0:	4979      	ldr	r1, [pc, #484]	; (80099a8 <_strtod_l+0xbd0>)
 80097c2:	4a7b      	ldr	r2, [pc, #492]	; (80099b0 <_strtod_l+0xbd8>)
 80097c4:	4019      	ands	r1, r3
 80097c6:	4291      	cmp	r1, r2
 80097c8:	4680      	mov	r8, r0
 80097ca:	d944      	bls.n	8009856 <_strtod_l+0xa7e>
 80097cc:	ee18 2a90 	vmov	r2, s17
 80097d0:	4b78      	ldr	r3, [pc, #480]	; (80099b4 <_strtod_l+0xbdc>)
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d104      	bne.n	80097e0 <_strtod_l+0xa08>
 80097d6:	ee18 3a10 	vmov	r3, s16
 80097da:	3301      	adds	r3, #1
 80097dc:	f43f ad40 	beq.w	8009260 <_strtod_l+0x488>
 80097e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80099b4 <_strtod_l+0xbdc>
 80097e4:	f04f 38ff 	mov.w	r8, #4294967295
 80097e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7fe fe6a 	bl	80084c4 <_Bfree>
 80097f0:	9905      	ldr	r1, [sp, #20]
 80097f2:	4620      	mov	r0, r4
 80097f4:	f7fe fe66 	bl	80084c4 <_Bfree>
 80097f8:	4659      	mov	r1, fp
 80097fa:	4620      	mov	r0, r4
 80097fc:	f7fe fe62 	bl	80084c4 <_Bfree>
 8009800:	4629      	mov	r1, r5
 8009802:	4620      	mov	r0, r4
 8009804:	f7fe fe5e 	bl	80084c4 <_Bfree>
 8009808:	e609      	b.n	800941e <_strtod_l+0x646>
 800980a:	f1b8 0f01 	cmp.w	r8, #1
 800980e:	d103      	bne.n	8009818 <_strtod_l+0xa40>
 8009810:	f1b9 0f00 	cmp.w	r9, #0
 8009814:	f43f ad95 	beq.w	8009342 <_strtod_l+0x56a>
 8009818:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009970 <_strtod_l+0xb98>
 800981c:	4f60      	ldr	r7, [pc, #384]	; (80099a0 <_strtod_l+0xbc8>)
 800981e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009822:	2600      	movs	r6, #0
 8009824:	e7ae      	b.n	8009784 <_strtod_l+0x9ac>
 8009826:	4f5f      	ldr	r7, [pc, #380]	; (80099a4 <_strtod_l+0xbcc>)
 8009828:	2600      	movs	r6, #0
 800982a:	e7a7      	b.n	800977c <_strtod_l+0x9a4>
 800982c:	4b5d      	ldr	r3, [pc, #372]	; (80099a4 <_strtod_l+0xbcc>)
 800982e:	4630      	mov	r0, r6
 8009830:	4639      	mov	r1, r7
 8009832:	2200      	movs	r2, #0
 8009834:	f7f6 fee0 	bl	80005f8 <__aeabi_dmul>
 8009838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800983a:	4606      	mov	r6, r0
 800983c:	460f      	mov	r7, r1
 800983e:	2b00      	cmp	r3, #0
 8009840:	d09c      	beq.n	800977c <_strtod_l+0x9a4>
 8009842:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009846:	e79d      	b.n	8009784 <_strtod_l+0x9ac>
 8009848:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009978 <_strtod_l+0xba0>
 800984c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009850:	ec57 6b17 	vmov	r6, r7, d7
 8009854:	e796      	b.n	8009784 <_strtod_l+0x9ac>
 8009856:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800985a:	9b04      	ldr	r3, [sp, #16]
 800985c:	46ca      	mov	sl, r9
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1c2      	bne.n	80097e8 <_strtod_l+0xa10>
 8009862:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009868:	0d1b      	lsrs	r3, r3, #20
 800986a:	051b      	lsls	r3, r3, #20
 800986c:	429a      	cmp	r2, r3
 800986e:	d1bb      	bne.n	80097e8 <_strtod_l+0xa10>
 8009870:	4630      	mov	r0, r6
 8009872:	4639      	mov	r1, r7
 8009874:	f7f7 fa20 	bl	8000cb8 <__aeabi_d2lz>
 8009878:	f7f6 fe90 	bl	800059c <__aeabi_l2d>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4630      	mov	r0, r6
 8009882:	4639      	mov	r1, r7
 8009884:	f7f6 fd00 	bl	8000288 <__aeabi_dsub>
 8009888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800988a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800988e:	ea43 0308 	orr.w	r3, r3, r8
 8009892:	4313      	orrs	r3, r2
 8009894:	4606      	mov	r6, r0
 8009896:	460f      	mov	r7, r1
 8009898:	d054      	beq.n	8009944 <_strtod_l+0xb6c>
 800989a:	a339      	add	r3, pc, #228	; (adr r3, 8009980 <_strtod_l+0xba8>)
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	f7f7 f91c 	bl	8000adc <__aeabi_dcmplt>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	f47f ace5 	bne.w	8009274 <_strtod_l+0x49c>
 80098aa:	a337      	add	r3, pc, #220	; (adr r3, 8009988 <_strtod_l+0xbb0>)
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	f7f7 f930 	bl	8000b18 <__aeabi_dcmpgt>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d095      	beq.n	80097e8 <_strtod_l+0xa10>
 80098bc:	e4da      	b.n	8009274 <_strtod_l+0x49c>
 80098be:	9b04      	ldr	r3, [sp, #16]
 80098c0:	b333      	cbz	r3, 8009910 <_strtod_l+0xb38>
 80098c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098c8:	d822      	bhi.n	8009910 <_strtod_l+0xb38>
 80098ca:	a331      	add	r3, pc, #196	; (adr r3, 8009990 <_strtod_l+0xbb8>)
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	4630      	mov	r0, r6
 80098d2:	4639      	mov	r1, r7
 80098d4:	f7f7 f90c 	bl	8000af0 <__aeabi_dcmple>
 80098d8:	b1a0      	cbz	r0, 8009904 <_strtod_l+0xb2c>
 80098da:	4639      	mov	r1, r7
 80098dc:	4630      	mov	r0, r6
 80098de:	f7f7 f963 	bl	8000ba8 <__aeabi_d2uiz>
 80098e2:	2801      	cmp	r0, #1
 80098e4:	bf38      	it	cc
 80098e6:	2001      	movcc	r0, #1
 80098e8:	f7f6 fe0c 	bl	8000504 <__aeabi_ui2d>
 80098ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ee:	4606      	mov	r6, r0
 80098f0:	460f      	mov	r7, r1
 80098f2:	bb23      	cbnz	r3, 800993e <_strtod_l+0xb66>
 80098f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098f8:	9010      	str	r0, [sp, #64]	; 0x40
 80098fa:	9311      	str	r3, [sp, #68]	; 0x44
 80098fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009900:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009908:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800990c:	1a9b      	subs	r3, r3, r2
 800990e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009910:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009914:	eeb0 0a48 	vmov.f32	s0, s16
 8009918:	eef0 0a68 	vmov.f32	s1, s17
 800991c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009920:	f7ff f8fc 	bl	8008b1c <__ulp>
 8009924:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009928:	ec53 2b10 	vmov	r2, r3, d0
 800992c:	f7f6 fe64 	bl	80005f8 <__aeabi_dmul>
 8009930:	ec53 2b18 	vmov	r2, r3, d8
 8009934:	f7f6 fcaa 	bl	800028c <__adddf3>
 8009938:	4680      	mov	r8, r0
 800993a:	4689      	mov	r9, r1
 800993c:	e78d      	b.n	800985a <_strtod_l+0xa82>
 800993e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009942:	e7db      	b.n	80098fc <_strtod_l+0xb24>
 8009944:	a314      	add	r3, pc, #80	; (adr r3, 8009998 <_strtod_l+0xbc0>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f7f7 f8c7 	bl	8000adc <__aeabi_dcmplt>
 800994e:	e7b3      	b.n	80098b8 <_strtod_l+0xae0>
 8009950:	2300      	movs	r3, #0
 8009952:	930a      	str	r3, [sp, #40]	; 0x28
 8009954:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	f7ff ba7c 	b.w	8008e56 <_strtod_l+0x7e>
 800995e:	2a65      	cmp	r2, #101	; 0x65
 8009960:	f43f ab75 	beq.w	800904e <_strtod_l+0x276>
 8009964:	2a45      	cmp	r2, #69	; 0x45
 8009966:	f43f ab72 	beq.w	800904e <_strtod_l+0x276>
 800996a:	2301      	movs	r3, #1
 800996c:	f7ff bbaa 	b.w	80090c4 <_strtod_l+0x2ec>
 8009970:	00000000 	.word	0x00000000
 8009974:	bff00000 	.word	0xbff00000
 8009978:	00000000 	.word	0x00000000
 800997c:	3ff00000 	.word	0x3ff00000
 8009980:	94a03595 	.word	0x94a03595
 8009984:	3fdfffff 	.word	0x3fdfffff
 8009988:	35afe535 	.word	0x35afe535
 800998c:	3fe00000 	.word	0x3fe00000
 8009990:	ffc00000 	.word	0xffc00000
 8009994:	41dfffff 	.word	0x41dfffff
 8009998:	94a03595 	.word	0x94a03595
 800999c:	3fcfffff 	.word	0x3fcfffff
 80099a0:	3ff00000 	.word	0x3ff00000
 80099a4:	3fe00000 	.word	0x3fe00000
 80099a8:	7ff00000 	.word	0x7ff00000
 80099ac:	7fe00000 	.word	0x7fe00000
 80099b0:	7c9fffff 	.word	0x7c9fffff
 80099b4:	7fefffff 	.word	0x7fefffff

080099b8 <_strtod_r>:
 80099b8:	4b01      	ldr	r3, [pc, #4]	; (80099c0 <_strtod_r+0x8>)
 80099ba:	f7ff ba0d 	b.w	8008dd8 <_strtod_l>
 80099be:	bf00      	nop
 80099c0:	20000068 	.word	0x20000068

080099c4 <_strtol_l.constprop.0>:
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ca:	d001      	beq.n	80099d0 <_strtol_l.constprop.0+0xc>
 80099cc:	2b24      	cmp	r3, #36	; 0x24
 80099ce:	d906      	bls.n	80099de <_strtol_l.constprop.0+0x1a>
 80099d0:	f7fd fd88 	bl	80074e4 <__errno>
 80099d4:	2316      	movs	r3, #22
 80099d6:	6003      	str	r3, [r0, #0]
 80099d8:	2000      	movs	r0, #0
 80099da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009ac4 <_strtol_l.constprop.0+0x100>
 80099e2:	460d      	mov	r5, r1
 80099e4:	462e      	mov	r6, r5
 80099e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099ea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80099ee:	f017 0708 	ands.w	r7, r7, #8
 80099f2:	d1f7      	bne.n	80099e4 <_strtol_l.constprop.0+0x20>
 80099f4:	2c2d      	cmp	r4, #45	; 0x2d
 80099f6:	d132      	bne.n	8009a5e <_strtol_l.constprop.0+0x9a>
 80099f8:	782c      	ldrb	r4, [r5, #0]
 80099fa:	2701      	movs	r7, #1
 80099fc:	1cb5      	adds	r5, r6, #2
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d05b      	beq.n	8009aba <_strtol_l.constprop.0+0xf6>
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d109      	bne.n	8009a1a <_strtol_l.constprop.0+0x56>
 8009a06:	2c30      	cmp	r4, #48	; 0x30
 8009a08:	d107      	bne.n	8009a1a <_strtol_l.constprop.0+0x56>
 8009a0a:	782c      	ldrb	r4, [r5, #0]
 8009a0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a10:	2c58      	cmp	r4, #88	; 0x58
 8009a12:	d14d      	bne.n	8009ab0 <_strtol_l.constprop.0+0xec>
 8009a14:	786c      	ldrb	r4, [r5, #1]
 8009a16:	2310      	movs	r3, #16
 8009a18:	3502      	adds	r5, #2
 8009a1a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009a1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a22:	f04f 0e00 	mov.w	lr, #0
 8009a26:	fbb8 f9f3 	udiv	r9, r8, r3
 8009a2a:	4676      	mov	r6, lr
 8009a2c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009a30:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009a34:	f1bc 0f09 	cmp.w	ip, #9
 8009a38:	d816      	bhi.n	8009a68 <_strtol_l.constprop.0+0xa4>
 8009a3a:	4664      	mov	r4, ip
 8009a3c:	42a3      	cmp	r3, r4
 8009a3e:	dd24      	ble.n	8009a8a <_strtol_l.constprop.0+0xc6>
 8009a40:	f1be 3fff 	cmp.w	lr, #4294967295
 8009a44:	d008      	beq.n	8009a58 <_strtol_l.constprop.0+0x94>
 8009a46:	45b1      	cmp	r9, r6
 8009a48:	d31c      	bcc.n	8009a84 <_strtol_l.constprop.0+0xc0>
 8009a4a:	d101      	bne.n	8009a50 <_strtol_l.constprop.0+0x8c>
 8009a4c:	45a2      	cmp	sl, r4
 8009a4e:	db19      	blt.n	8009a84 <_strtol_l.constprop.0+0xc0>
 8009a50:	fb06 4603 	mla	r6, r6, r3, r4
 8009a54:	f04f 0e01 	mov.w	lr, #1
 8009a58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a5c:	e7e8      	b.n	8009a30 <_strtol_l.constprop.0+0x6c>
 8009a5e:	2c2b      	cmp	r4, #43	; 0x2b
 8009a60:	bf04      	itt	eq
 8009a62:	782c      	ldrbeq	r4, [r5, #0]
 8009a64:	1cb5      	addeq	r5, r6, #2
 8009a66:	e7ca      	b.n	80099fe <_strtol_l.constprop.0+0x3a>
 8009a68:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009a6c:	f1bc 0f19 	cmp.w	ip, #25
 8009a70:	d801      	bhi.n	8009a76 <_strtol_l.constprop.0+0xb2>
 8009a72:	3c37      	subs	r4, #55	; 0x37
 8009a74:	e7e2      	b.n	8009a3c <_strtol_l.constprop.0+0x78>
 8009a76:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009a7a:	f1bc 0f19 	cmp.w	ip, #25
 8009a7e:	d804      	bhi.n	8009a8a <_strtol_l.constprop.0+0xc6>
 8009a80:	3c57      	subs	r4, #87	; 0x57
 8009a82:	e7db      	b.n	8009a3c <_strtol_l.constprop.0+0x78>
 8009a84:	f04f 3eff 	mov.w	lr, #4294967295
 8009a88:	e7e6      	b.n	8009a58 <_strtol_l.constprop.0+0x94>
 8009a8a:	f1be 3fff 	cmp.w	lr, #4294967295
 8009a8e:	d105      	bne.n	8009a9c <_strtol_l.constprop.0+0xd8>
 8009a90:	2322      	movs	r3, #34	; 0x22
 8009a92:	6003      	str	r3, [r0, #0]
 8009a94:	4646      	mov	r6, r8
 8009a96:	b942      	cbnz	r2, 8009aaa <_strtol_l.constprop.0+0xe6>
 8009a98:	4630      	mov	r0, r6
 8009a9a:	e79e      	b.n	80099da <_strtol_l.constprop.0+0x16>
 8009a9c:	b107      	cbz	r7, 8009aa0 <_strtol_l.constprop.0+0xdc>
 8009a9e:	4276      	negs	r6, r6
 8009aa0:	2a00      	cmp	r2, #0
 8009aa2:	d0f9      	beq.n	8009a98 <_strtol_l.constprop.0+0xd4>
 8009aa4:	f1be 0f00 	cmp.w	lr, #0
 8009aa8:	d000      	beq.n	8009aac <_strtol_l.constprop.0+0xe8>
 8009aaa:	1e69      	subs	r1, r5, #1
 8009aac:	6011      	str	r1, [r2, #0]
 8009aae:	e7f3      	b.n	8009a98 <_strtol_l.constprop.0+0xd4>
 8009ab0:	2430      	movs	r4, #48	; 0x30
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1b1      	bne.n	8009a1a <_strtol_l.constprop.0+0x56>
 8009ab6:	2308      	movs	r3, #8
 8009ab8:	e7af      	b.n	8009a1a <_strtol_l.constprop.0+0x56>
 8009aba:	2c30      	cmp	r4, #48	; 0x30
 8009abc:	d0a5      	beq.n	8009a0a <_strtol_l.constprop.0+0x46>
 8009abe:	230a      	movs	r3, #10
 8009ac0:	e7ab      	b.n	8009a1a <_strtol_l.constprop.0+0x56>
 8009ac2:	bf00      	nop
 8009ac4:	0800bee9 	.word	0x0800bee9

08009ac8 <_strtol_r>:
 8009ac8:	f7ff bf7c 	b.w	80099c4 <_strtol_l.constprop.0>

08009acc <__ssputs_r>:
 8009acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	688e      	ldr	r6, [r1, #8]
 8009ad2:	461f      	mov	r7, r3
 8009ad4:	42be      	cmp	r6, r7
 8009ad6:	680b      	ldr	r3, [r1, #0]
 8009ad8:	4682      	mov	sl, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	4690      	mov	r8, r2
 8009ade:	d82c      	bhi.n	8009b3a <__ssputs_r+0x6e>
 8009ae0:	898a      	ldrh	r2, [r1, #12]
 8009ae2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ae6:	d026      	beq.n	8009b36 <__ssputs_r+0x6a>
 8009ae8:	6965      	ldr	r5, [r4, #20]
 8009aea:	6909      	ldr	r1, [r1, #16]
 8009aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009af0:	eba3 0901 	sub.w	r9, r3, r1
 8009af4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009af8:	1c7b      	adds	r3, r7, #1
 8009afa:	444b      	add	r3, r9
 8009afc:	106d      	asrs	r5, r5, #1
 8009afe:	429d      	cmp	r5, r3
 8009b00:	bf38      	it	cc
 8009b02:	461d      	movcc	r5, r3
 8009b04:	0553      	lsls	r3, r2, #21
 8009b06:	d527      	bpl.n	8009b58 <__ssputs_r+0x8c>
 8009b08:	4629      	mov	r1, r5
 8009b0a:	f7fe fc0f 	bl	800832c <_malloc_r>
 8009b0e:	4606      	mov	r6, r0
 8009b10:	b360      	cbz	r0, 8009b6c <__ssputs_r+0xa0>
 8009b12:	6921      	ldr	r1, [r4, #16]
 8009b14:	464a      	mov	r2, r9
 8009b16:	f000 fa1b 	bl	8009f50 <memcpy>
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b24:	81a3      	strh	r3, [r4, #12]
 8009b26:	6126      	str	r6, [r4, #16]
 8009b28:	6165      	str	r5, [r4, #20]
 8009b2a:	444e      	add	r6, r9
 8009b2c:	eba5 0509 	sub.w	r5, r5, r9
 8009b30:	6026      	str	r6, [r4, #0]
 8009b32:	60a5      	str	r5, [r4, #8]
 8009b34:	463e      	mov	r6, r7
 8009b36:	42be      	cmp	r6, r7
 8009b38:	d900      	bls.n	8009b3c <__ssputs_r+0x70>
 8009b3a:	463e      	mov	r6, r7
 8009b3c:	6820      	ldr	r0, [r4, #0]
 8009b3e:	4632      	mov	r2, r6
 8009b40:	4641      	mov	r1, r8
 8009b42:	f000 f9c9 	bl	8009ed8 <memmove>
 8009b46:	68a3      	ldr	r3, [r4, #8]
 8009b48:	1b9b      	subs	r3, r3, r6
 8009b4a:	60a3      	str	r3, [r4, #8]
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	4433      	add	r3, r6
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	2000      	movs	r0, #0
 8009b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b58:	462a      	mov	r2, r5
 8009b5a:	f000 fdae 	bl	800a6ba <_realloc_r>
 8009b5e:	4606      	mov	r6, r0
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d1e0      	bne.n	8009b26 <__ssputs_r+0x5a>
 8009b64:	6921      	ldr	r1, [r4, #16]
 8009b66:	4650      	mov	r0, sl
 8009b68:	f7fe fb6c 	bl	8008244 <_free_r>
 8009b6c:	230c      	movs	r3, #12
 8009b6e:	f8ca 3000 	str.w	r3, [sl]
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b78:	81a3      	strh	r3, [r4, #12]
 8009b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7e:	e7e9      	b.n	8009b54 <__ssputs_r+0x88>

08009b80 <_svfiprintf_r>:
 8009b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	4698      	mov	r8, r3
 8009b86:	898b      	ldrh	r3, [r1, #12]
 8009b88:	061b      	lsls	r3, r3, #24
 8009b8a:	b09d      	sub	sp, #116	; 0x74
 8009b8c:	4607      	mov	r7, r0
 8009b8e:	460d      	mov	r5, r1
 8009b90:	4614      	mov	r4, r2
 8009b92:	d50e      	bpl.n	8009bb2 <_svfiprintf_r+0x32>
 8009b94:	690b      	ldr	r3, [r1, #16]
 8009b96:	b963      	cbnz	r3, 8009bb2 <_svfiprintf_r+0x32>
 8009b98:	2140      	movs	r1, #64	; 0x40
 8009b9a:	f7fe fbc7 	bl	800832c <_malloc_r>
 8009b9e:	6028      	str	r0, [r5, #0]
 8009ba0:	6128      	str	r0, [r5, #16]
 8009ba2:	b920      	cbnz	r0, 8009bae <_svfiprintf_r+0x2e>
 8009ba4:	230c      	movs	r3, #12
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	e0d0      	b.n	8009d50 <_svfiprintf_r+0x1d0>
 8009bae:	2340      	movs	r3, #64	; 0x40
 8009bb0:	616b      	str	r3, [r5, #20]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb6:	2320      	movs	r3, #32
 8009bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bc0:	2330      	movs	r3, #48	; 0x30
 8009bc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d68 <_svfiprintf_r+0x1e8>
 8009bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bca:	f04f 0901 	mov.w	r9, #1
 8009bce:	4623      	mov	r3, r4
 8009bd0:	469a      	mov	sl, r3
 8009bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bd6:	b10a      	cbz	r2, 8009bdc <_svfiprintf_r+0x5c>
 8009bd8:	2a25      	cmp	r2, #37	; 0x25
 8009bda:	d1f9      	bne.n	8009bd0 <_svfiprintf_r+0x50>
 8009bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8009be0:	d00b      	beq.n	8009bfa <_svfiprintf_r+0x7a>
 8009be2:	465b      	mov	r3, fp
 8009be4:	4622      	mov	r2, r4
 8009be6:	4629      	mov	r1, r5
 8009be8:	4638      	mov	r0, r7
 8009bea:	f7ff ff6f 	bl	8009acc <__ssputs_r>
 8009bee:	3001      	adds	r0, #1
 8009bf0:	f000 80a9 	beq.w	8009d46 <_svfiprintf_r+0x1c6>
 8009bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bf6:	445a      	add	r2, fp
 8009bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8009bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 80a1 	beq.w	8009d46 <_svfiprintf_r+0x1c6>
 8009c04:	2300      	movs	r3, #0
 8009c06:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c0e:	f10a 0a01 	add.w	sl, sl, #1
 8009c12:	9304      	str	r3, [sp, #16]
 8009c14:	9307      	str	r3, [sp, #28]
 8009c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8009c1c:	4654      	mov	r4, sl
 8009c1e:	2205      	movs	r2, #5
 8009c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c24:	4850      	ldr	r0, [pc, #320]	; (8009d68 <_svfiprintf_r+0x1e8>)
 8009c26:	f7f6 fad3 	bl	80001d0 <memchr>
 8009c2a:	9a04      	ldr	r2, [sp, #16]
 8009c2c:	b9d8      	cbnz	r0, 8009c66 <_svfiprintf_r+0xe6>
 8009c2e:	06d0      	lsls	r0, r2, #27
 8009c30:	bf44      	itt	mi
 8009c32:	2320      	movmi	r3, #32
 8009c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c38:	0711      	lsls	r1, r2, #28
 8009c3a:	bf44      	itt	mi
 8009c3c:	232b      	movmi	r3, #43	; 0x2b
 8009c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c42:	f89a 3000 	ldrb.w	r3, [sl]
 8009c46:	2b2a      	cmp	r3, #42	; 0x2a
 8009c48:	d015      	beq.n	8009c76 <_svfiprintf_r+0xf6>
 8009c4a:	9a07      	ldr	r2, [sp, #28]
 8009c4c:	4654      	mov	r4, sl
 8009c4e:	2000      	movs	r0, #0
 8009c50:	f04f 0c0a 	mov.w	ip, #10
 8009c54:	4621      	mov	r1, r4
 8009c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c5a:	3b30      	subs	r3, #48	; 0x30
 8009c5c:	2b09      	cmp	r3, #9
 8009c5e:	d94d      	bls.n	8009cfc <_svfiprintf_r+0x17c>
 8009c60:	b1b0      	cbz	r0, 8009c90 <_svfiprintf_r+0x110>
 8009c62:	9207      	str	r2, [sp, #28]
 8009c64:	e014      	b.n	8009c90 <_svfiprintf_r+0x110>
 8009c66:	eba0 0308 	sub.w	r3, r0, r8
 8009c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	9304      	str	r3, [sp, #16]
 8009c72:	46a2      	mov	sl, r4
 8009c74:	e7d2      	b.n	8009c1c <_svfiprintf_r+0x9c>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	1d19      	adds	r1, r3, #4
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	9103      	str	r1, [sp, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bfbb      	ittet	lt
 8009c82:	425b      	neglt	r3, r3
 8009c84:	f042 0202 	orrlt.w	r2, r2, #2
 8009c88:	9307      	strge	r3, [sp, #28]
 8009c8a:	9307      	strlt	r3, [sp, #28]
 8009c8c:	bfb8      	it	lt
 8009c8e:	9204      	strlt	r2, [sp, #16]
 8009c90:	7823      	ldrb	r3, [r4, #0]
 8009c92:	2b2e      	cmp	r3, #46	; 0x2e
 8009c94:	d10c      	bne.n	8009cb0 <_svfiprintf_r+0x130>
 8009c96:	7863      	ldrb	r3, [r4, #1]
 8009c98:	2b2a      	cmp	r3, #42	; 0x2a
 8009c9a:	d134      	bne.n	8009d06 <_svfiprintf_r+0x186>
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	1d1a      	adds	r2, r3, #4
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	9203      	str	r2, [sp, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bfb8      	it	lt
 8009ca8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cac:	3402      	adds	r4, #2
 8009cae:	9305      	str	r3, [sp, #20]
 8009cb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009d78 <_svfiprintf_r+0x1f8>
 8009cb4:	7821      	ldrb	r1, [r4, #0]
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	4650      	mov	r0, sl
 8009cba:	f7f6 fa89 	bl	80001d0 <memchr>
 8009cbe:	b138      	cbz	r0, 8009cd0 <_svfiprintf_r+0x150>
 8009cc0:	9b04      	ldr	r3, [sp, #16]
 8009cc2:	eba0 000a 	sub.w	r0, r0, sl
 8009cc6:	2240      	movs	r2, #64	; 0x40
 8009cc8:	4082      	lsls	r2, r0
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	3401      	adds	r4, #1
 8009cce:	9304      	str	r3, [sp, #16]
 8009cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd4:	4825      	ldr	r0, [pc, #148]	; (8009d6c <_svfiprintf_r+0x1ec>)
 8009cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cda:	2206      	movs	r2, #6
 8009cdc:	f7f6 fa78 	bl	80001d0 <memchr>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d038      	beq.n	8009d56 <_svfiprintf_r+0x1d6>
 8009ce4:	4b22      	ldr	r3, [pc, #136]	; (8009d70 <_svfiprintf_r+0x1f0>)
 8009ce6:	bb1b      	cbnz	r3, 8009d30 <_svfiprintf_r+0x1b0>
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	3307      	adds	r3, #7
 8009cec:	f023 0307 	bic.w	r3, r3, #7
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	9303      	str	r3, [sp, #12]
 8009cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf6:	4433      	add	r3, r6
 8009cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cfa:	e768      	b.n	8009bce <_svfiprintf_r+0x4e>
 8009cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d00:	460c      	mov	r4, r1
 8009d02:	2001      	movs	r0, #1
 8009d04:	e7a6      	b.n	8009c54 <_svfiprintf_r+0xd4>
 8009d06:	2300      	movs	r3, #0
 8009d08:	3401      	adds	r4, #1
 8009d0a:	9305      	str	r3, [sp, #20]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	f04f 0c0a 	mov.w	ip, #10
 8009d12:	4620      	mov	r0, r4
 8009d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d18:	3a30      	subs	r2, #48	; 0x30
 8009d1a:	2a09      	cmp	r2, #9
 8009d1c:	d903      	bls.n	8009d26 <_svfiprintf_r+0x1a6>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d0c6      	beq.n	8009cb0 <_svfiprintf_r+0x130>
 8009d22:	9105      	str	r1, [sp, #20]
 8009d24:	e7c4      	b.n	8009cb0 <_svfiprintf_r+0x130>
 8009d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e7f0      	b.n	8009d12 <_svfiprintf_r+0x192>
 8009d30:	ab03      	add	r3, sp, #12
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	462a      	mov	r2, r5
 8009d36:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <_svfiprintf_r+0x1f4>)
 8009d38:	a904      	add	r1, sp, #16
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	f7fc fc50 	bl	80065e0 <_printf_float>
 8009d40:	1c42      	adds	r2, r0, #1
 8009d42:	4606      	mov	r6, r0
 8009d44:	d1d6      	bne.n	8009cf4 <_svfiprintf_r+0x174>
 8009d46:	89ab      	ldrh	r3, [r5, #12]
 8009d48:	065b      	lsls	r3, r3, #25
 8009d4a:	f53f af2d 	bmi.w	8009ba8 <_svfiprintf_r+0x28>
 8009d4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d50:	b01d      	add	sp, #116	; 0x74
 8009d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d56:	ab03      	add	r3, sp, #12
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <_svfiprintf_r+0x1f4>)
 8009d5e:	a904      	add	r1, sp, #16
 8009d60:	4638      	mov	r0, r7
 8009d62:	f7fc fee1 	bl	8006b28 <_printf_i>
 8009d66:	e7eb      	b.n	8009d40 <_svfiprintf_r+0x1c0>
 8009d68:	0800bfe9 	.word	0x0800bfe9
 8009d6c:	0800bff3 	.word	0x0800bff3
 8009d70:	080065e1 	.word	0x080065e1
 8009d74:	08009acd 	.word	0x08009acd
 8009d78:	0800bfef 	.word	0x0800bfef

08009d7c <__sflush_r>:
 8009d7c:	898a      	ldrh	r2, [r1, #12]
 8009d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d82:	4605      	mov	r5, r0
 8009d84:	0710      	lsls	r0, r2, #28
 8009d86:	460c      	mov	r4, r1
 8009d88:	d458      	bmi.n	8009e3c <__sflush_r+0xc0>
 8009d8a:	684b      	ldr	r3, [r1, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dc05      	bgt.n	8009d9c <__sflush_r+0x20>
 8009d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dc02      	bgt.n	8009d9c <__sflush_r+0x20>
 8009d96:	2000      	movs	r0, #0
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d9e:	2e00      	cmp	r6, #0
 8009da0:	d0f9      	beq.n	8009d96 <__sflush_r+0x1a>
 8009da2:	2300      	movs	r3, #0
 8009da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009da8:	682f      	ldr	r7, [r5, #0]
 8009daa:	6a21      	ldr	r1, [r4, #32]
 8009dac:	602b      	str	r3, [r5, #0]
 8009dae:	d032      	beq.n	8009e16 <__sflush_r+0x9a>
 8009db0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	075a      	lsls	r2, r3, #29
 8009db6:	d505      	bpl.n	8009dc4 <__sflush_r+0x48>
 8009db8:	6863      	ldr	r3, [r4, #4]
 8009dba:	1ac0      	subs	r0, r0, r3
 8009dbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dbe:	b10b      	cbz	r3, 8009dc4 <__sflush_r+0x48>
 8009dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dc2:	1ac0      	subs	r0, r0, r3
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dca:	6a21      	ldr	r1, [r4, #32]
 8009dcc:	4628      	mov	r0, r5
 8009dce:	47b0      	blx	r6
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	d106      	bne.n	8009de4 <__sflush_r+0x68>
 8009dd6:	6829      	ldr	r1, [r5, #0]
 8009dd8:	291d      	cmp	r1, #29
 8009dda:	d82b      	bhi.n	8009e34 <__sflush_r+0xb8>
 8009ddc:	4a29      	ldr	r2, [pc, #164]	; (8009e84 <__sflush_r+0x108>)
 8009dde:	410a      	asrs	r2, r1
 8009de0:	07d6      	lsls	r6, r2, #31
 8009de2:	d427      	bmi.n	8009e34 <__sflush_r+0xb8>
 8009de4:	2200      	movs	r2, #0
 8009de6:	6062      	str	r2, [r4, #4]
 8009de8:	04d9      	lsls	r1, r3, #19
 8009dea:	6922      	ldr	r2, [r4, #16]
 8009dec:	6022      	str	r2, [r4, #0]
 8009dee:	d504      	bpl.n	8009dfa <__sflush_r+0x7e>
 8009df0:	1c42      	adds	r2, r0, #1
 8009df2:	d101      	bne.n	8009df8 <__sflush_r+0x7c>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b903      	cbnz	r3, 8009dfa <__sflush_r+0x7e>
 8009df8:	6560      	str	r0, [r4, #84]	; 0x54
 8009dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dfc:	602f      	str	r7, [r5, #0]
 8009dfe:	2900      	cmp	r1, #0
 8009e00:	d0c9      	beq.n	8009d96 <__sflush_r+0x1a>
 8009e02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e06:	4299      	cmp	r1, r3
 8009e08:	d002      	beq.n	8009e10 <__sflush_r+0x94>
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f7fe fa1a 	bl	8008244 <_free_r>
 8009e10:	2000      	movs	r0, #0
 8009e12:	6360      	str	r0, [r4, #52]	; 0x34
 8009e14:	e7c0      	b.n	8009d98 <__sflush_r+0x1c>
 8009e16:	2301      	movs	r3, #1
 8009e18:	4628      	mov	r0, r5
 8009e1a:	47b0      	blx	r6
 8009e1c:	1c41      	adds	r1, r0, #1
 8009e1e:	d1c8      	bne.n	8009db2 <__sflush_r+0x36>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0c5      	beq.n	8009db2 <__sflush_r+0x36>
 8009e26:	2b1d      	cmp	r3, #29
 8009e28:	d001      	beq.n	8009e2e <__sflush_r+0xb2>
 8009e2a:	2b16      	cmp	r3, #22
 8009e2c:	d101      	bne.n	8009e32 <__sflush_r+0xb6>
 8009e2e:	602f      	str	r7, [r5, #0]
 8009e30:	e7b1      	b.n	8009d96 <__sflush_r+0x1a>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	e7ad      	b.n	8009d98 <__sflush_r+0x1c>
 8009e3c:	690f      	ldr	r7, [r1, #16]
 8009e3e:	2f00      	cmp	r7, #0
 8009e40:	d0a9      	beq.n	8009d96 <__sflush_r+0x1a>
 8009e42:	0793      	lsls	r3, r2, #30
 8009e44:	680e      	ldr	r6, [r1, #0]
 8009e46:	bf08      	it	eq
 8009e48:	694b      	ldreq	r3, [r1, #20]
 8009e4a:	600f      	str	r7, [r1, #0]
 8009e4c:	bf18      	it	ne
 8009e4e:	2300      	movne	r3, #0
 8009e50:	eba6 0807 	sub.w	r8, r6, r7
 8009e54:	608b      	str	r3, [r1, #8]
 8009e56:	f1b8 0f00 	cmp.w	r8, #0
 8009e5a:	dd9c      	ble.n	8009d96 <__sflush_r+0x1a>
 8009e5c:	6a21      	ldr	r1, [r4, #32]
 8009e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e60:	4643      	mov	r3, r8
 8009e62:	463a      	mov	r2, r7
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b0      	blx	r6
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	dc06      	bgt.n	8009e7a <__sflush_r+0xfe>
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e72:	81a3      	strh	r3, [r4, #12]
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	e78e      	b.n	8009d98 <__sflush_r+0x1c>
 8009e7a:	4407      	add	r7, r0
 8009e7c:	eba8 0800 	sub.w	r8, r8, r0
 8009e80:	e7e9      	b.n	8009e56 <__sflush_r+0xda>
 8009e82:	bf00      	nop
 8009e84:	dfbffffe 	.word	0xdfbffffe

08009e88 <_fflush_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	690b      	ldr	r3, [r1, #16]
 8009e8c:	4605      	mov	r5, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	b913      	cbnz	r3, 8009e98 <_fflush_r+0x10>
 8009e92:	2500      	movs	r5, #0
 8009e94:	4628      	mov	r0, r5
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	b118      	cbz	r0, 8009ea2 <_fflush_r+0x1a>
 8009e9a:	6a03      	ldr	r3, [r0, #32]
 8009e9c:	b90b      	cbnz	r3, 8009ea2 <_fflush_r+0x1a>
 8009e9e:	f7fd fa01 	bl	80072a4 <__sinit>
 8009ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0f3      	beq.n	8009e92 <_fflush_r+0xa>
 8009eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009eac:	07d0      	lsls	r0, r2, #31
 8009eae:	d404      	bmi.n	8009eba <_fflush_r+0x32>
 8009eb0:	0599      	lsls	r1, r3, #22
 8009eb2:	d402      	bmi.n	8009eba <_fflush_r+0x32>
 8009eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eb6:	f7fd fb40 	bl	800753a <__retarget_lock_acquire_recursive>
 8009eba:	4628      	mov	r0, r5
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	f7ff ff5d 	bl	8009d7c <__sflush_r>
 8009ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ec4:	07da      	lsls	r2, r3, #31
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	d4e4      	bmi.n	8009e94 <_fflush_r+0xc>
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	059b      	lsls	r3, r3, #22
 8009ece:	d4e1      	bmi.n	8009e94 <_fflush_r+0xc>
 8009ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ed2:	f7fd fb33 	bl	800753c <__retarget_lock_release_recursive>
 8009ed6:	e7dd      	b.n	8009e94 <_fflush_r+0xc>

08009ed8 <memmove>:
 8009ed8:	4288      	cmp	r0, r1
 8009eda:	b510      	push	{r4, lr}
 8009edc:	eb01 0402 	add.w	r4, r1, r2
 8009ee0:	d902      	bls.n	8009ee8 <memmove+0x10>
 8009ee2:	4284      	cmp	r4, r0
 8009ee4:	4623      	mov	r3, r4
 8009ee6:	d807      	bhi.n	8009ef8 <memmove+0x20>
 8009ee8:	1e43      	subs	r3, r0, #1
 8009eea:	42a1      	cmp	r1, r4
 8009eec:	d008      	beq.n	8009f00 <memmove+0x28>
 8009eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ef6:	e7f8      	b.n	8009eea <memmove+0x12>
 8009ef8:	4402      	add	r2, r0
 8009efa:	4601      	mov	r1, r0
 8009efc:	428a      	cmp	r2, r1
 8009efe:	d100      	bne.n	8009f02 <memmove+0x2a>
 8009f00:	bd10      	pop	{r4, pc}
 8009f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f0a:	e7f7      	b.n	8009efc <memmove+0x24>

08009f0c <strncmp>:
 8009f0c:	b510      	push	{r4, lr}
 8009f0e:	b16a      	cbz	r2, 8009f2c <strncmp+0x20>
 8009f10:	3901      	subs	r1, #1
 8009f12:	1884      	adds	r4, r0, r2
 8009f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d103      	bne.n	8009f28 <strncmp+0x1c>
 8009f20:	42a0      	cmp	r0, r4
 8009f22:	d001      	beq.n	8009f28 <strncmp+0x1c>
 8009f24:	2a00      	cmp	r2, #0
 8009f26:	d1f5      	bne.n	8009f14 <strncmp+0x8>
 8009f28:	1ad0      	subs	r0, r2, r3
 8009f2a:	bd10      	pop	{r4, pc}
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	e7fc      	b.n	8009f2a <strncmp+0x1e>

08009f30 <_sbrk_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4d06      	ldr	r5, [pc, #24]	; (8009f4c <_sbrk_r+0x1c>)
 8009f34:	2300      	movs	r3, #0
 8009f36:	4604      	mov	r4, r0
 8009f38:	4608      	mov	r0, r1
 8009f3a:	602b      	str	r3, [r5, #0]
 8009f3c:	f7f8 fe14 	bl	8002b68 <_sbrk>
 8009f40:	1c43      	adds	r3, r0, #1
 8009f42:	d102      	bne.n	8009f4a <_sbrk_r+0x1a>
 8009f44:	682b      	ldr	r3, [r5, #0]
 8009f46:	b103      	cbz	r3, 8009f4a <_sbrk_r+0x1a>
 8009f48:	6023      	str	r3, [r4, #0]
 8009f4a:	bd38      	pop	{r3, r4, r5, pc}
 8009f4c:	20000954 	.word	0x20000954

08009f50 <memcpy>:
 8009f50:	440a      	add	r2, r1
 8009f52:	4291      	cmp	r1, r2
 8009f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f58:	d100      	bne.n	8009f5c <memcpy+0xc>
 8009f5a:	4770      	bx	lr
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f66:	4291      	cmp	r1, r2
 8009f68:	d1f9      	bne.n	8009f5e <memcpy+0xe>
 8009f6a:	bd10      	pop	{r4, pc}
 8009f6c:	0000      	movs	r0, r0
	...

08009f70 <nan>:
 8009f70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009f78 <nan+0x8>
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	00000000 	.word	0x00000000
 8009f7c:	7ff80000 	.word	0x7ff80000

08009f80 <__assert_func>:
 8009f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f82:	4614      	mov	r4, r2
 8009f84:	461a      	mov	r2, r3
 8009f86:	4b09      	ldr	r3, [pc, #36]	; (8009fac <__assert_func+0x2c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	68d8      	ldr	r0, [r3, #12]
 8009f8e:	b14c      	cbz	r4, 8009fa4 <__assert_func+0x24>
 8009f90:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <__assert_func+0x30>)
 8009f92:	9100      	str	r1, [sp, #0]
 8009f94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f98:	4906      	ldr	r1, [pc, #24]	; (8009fb4 <__assert_func+0x34>)
 8009f9a:	462b      	mov	r3, r5
 8009f9c:	f000 fbca 	bl	800a734 <fiprintf>
 8009fa0:	f000 fbda 	bl	800a758 <abort>
 8009fa4:	4b04      	ldr	r3, [pc, #16]	; (8009fb8 <__assert_func+0x38>)
 8009fa6:	461c      	mov	r4, r3
 8009fa8:	e7f3      	b.n	8009f92 <__assert_func+0x12>
 8009faa:	bf00      	nop
 8009fac:	20000064 	.word	0x20000064
 8009fb0:	0800c002 	.word	0x0800c002
 8009fb4:	0800c00f 	.word	0x0800c00f
 8009fb8:	0800c03d 	.word	0x0800c03d

08009fbc <_calloc_r>:
 8009fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fbe:	fba1 2402 	umull	r2, r4, r1, r2
 8009fc2:	b94c      	cbnz	r4, 8009fd8 <_calloc_r+0x1c>
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	9201      	str	r2, [sp, #4]
 8009fc8:	f7fe f9b0 	bl	800832c <_malloc_r>
 8009fcc:	9a01      	ldr	r2, [sp, #4]
 8009fce:	4605      	mov	r5, r0
 8009fd0:	b930      	cbnz	r0, 8009fe0 <_calloc_r+0x24>
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	b003      	add	sp, #12
 8009fd6:	bd30      	pop	{r4, r5, pc}
 8009fd8:	220c      	movs	r2, #12
 8009fda:	6002      	str	r2, [r0, #0]
 8009fdc:	2500      	movs	r5, #0
 8009fde:	e7f8      	b.n	8009fd2 <_calloc_r+0x16>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	f7fd fa2c 	bl	800743e <memset>
 8009fe6:	e7f4      	b.n	8009fd2 <_calloc_r+0x16>

08009fe8 <rshift>:
 8009fe8:	6903      	ldr	r3, [r0, #16]
 8009fea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009fee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ff2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ff6:	f100 0414 	add.w	r4, r0, #20
 8009ffa:	dd45      	ble.n	800a088 <rshift+0xa0>
 8009ffc:	f011 011f 	ands.w	r1, r1, #31
 800a000:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a004:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a008:	d10c      	bne.n	800a024 <rshift+0x3c>
 800a00a:	f100 0710 	add.w	r7, r0, #16
 800a00e:	4629      	mov	r1, r5
 800a010:	42b1      	cmp	r1, r6
 800a012:	d334      	bcc.n	800a07e <rshift+0x96>
 800a014:	1a9b      	subs	r3, r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	1eea      	subs	r2, r5, #3
 800a01a:	4296      	cmp	r6, r2
 800a01c:	bf38      	it	cc
 800a01e:	2300      	movcc	r3, #0
 800a020:	4423      	add	r3, r4
 800a022:	e015      	b.n	800a050 <rshift+0x68>
 800a024:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a028:	f1c1 0820 	rsb	r8, r1, #32
 800a02c:	40cf      	lsrs	r7, r1
 800a02e:	f105 0e04 	add.w	lr, r5, #4
 800a032:	46a1      	mov	r9, r4
 800a034:	4576      	cmp	r6, lr
 800a036:	46f4      	mov	ip, lr
 800a038:	d815      	bhi.n	800a066 <rshift+0x7e>
 800a03a:	1a9a      	subs	r2, r3, r2
 800a03c:	0092      	lsls	r2, r2, #2
 800a03e:	3a04      	subs	r2, #4
 800a040:	3501      	adds	r5, #1
 800a042:	42ae      	cmp	r6, r5
 800a044:	bf38      	it	cc
 800a046:	2200      	movcc	r2, #0
 800a048:	18a3      	adds	r3, r4, r2
 800a04a:	50a7      	str	r7, [r4, r2]
 800a04c:	b107      	cbz	r7, 800a050 <rshift+0x68>
 800a04e:	3304      	adds	r3, #4
 800a050:	1b1a      	subs	r2, r3, r4
 800a052:	42a3      	cmp	r3, r4
 800a054:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a058:	bf08      	it	eq
 800a05a:	2300      	moveq	r3, #0
 800a05c:	6102      	str	r2, [r0, #16]
 800a05e:	bf08      	it	eq
 800a060:	6143      	streq	r3, [r0, #20]
 800a062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a066:	f8dc c000 	ldr.w	ip, [ip]
 800a06a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a06e:	ea4c 0707 	orr.w	r7, ip, r7
 800a072:	f849 7b04 	str.w	r7, [r9], #4
 800a076:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a07a:	40cf      	lsrs	r7, r1
 800a07c:	e7da      	b.n	800a034 <rshift+0x4c>
 800a07e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a082:	f847 cf04 	str.w	ip, [r7, #4]!
 800a086:	e7c3      	b.n	800a010 <rshift+0x28>
 800a088:	4623      	mov	r3, r4
 800a08a:	e7e1      	b.n	800a050 <rshift+0x68>

0800a08c <__hexdig_fun>:
 800a08c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a090:	2b09      	cmp	r3, #9
 800a092:	d802      	bhi.n	800a09a <__hexdig_fun+0xe>
 800a094:	3820      	subs	r0, #32
 800a096:	b2c0      	uxtb	r0, r0
 800a098:	4770      	bx	lr
 800a09a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a09e:	2b05      	cmp	r3, #5
 800a0a0:	d801      	bhi.n	800a0a6 <__hexdig_fun+0x1a>
 800a0a2:	3847      	subs	r0, #71	; 0x47
 800a0a4:	e7f7      	b.n	800a096 <__hexdig_fun+0xa>
 800a0a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a0aa:	2b05      	cmp	r3, #5
 800a0ac:	d801      	bhi.n	800a0b2 <__hexdig_fun+0x26>
 800a0ae:	3827      	subs	r0, #39	; 0x27
 800a0b0:	e7f1      	b.n	800a096 <__hexdig_fun+0xa>
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	4770      	bx	lr
	...

0800a0b8 <__gethex>:
 800a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	4617      	mov	r7, r2
 800a0be:	680a      	ldr	r2, [r1, #0]
 800a0c0:	b085      	sub	sp, #20
 800a0c2:	f102 0b02 	add.w	fp, r2, #2
 800a0c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a0ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a0ce:	4681      	mov	r9, r0
 800a0d0:	468a      	mov	sl, r1
 800a0d2:	9302      	str	r3, [sp, #8]
 800a0d4:	32fe      	adds	r2, #254	; 0xfe
 800a0d6:	eb02 030b 	add.w	r3, r2, fp
 800a0da:	46d8      	mov	r8, fp
 800a0dc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	2830      	cmp	r0, #48	; 0x30
 800a0e4:	d0f7      	beq.n	800a0d6 <__gethex+0x1e>
 800a0e6:	f7ff ffd1 	bl	800a08c <__hexdig_fun>
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d138      	bne.n	800a162 <__gethex+0xaa>
 800a0f0:	49a7      	ldr	r1, [pc, #668]	; (800a390 <__gethex+0x2d8>)
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	f7ff ff09 	bl	8009f0c <strncmp>
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d169      	bne.n	800a1d4 <__gethex+0x11c>
 800a100:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a104:	465d      	mov	r5, fp
 800a106:	f7ff ffc1 	bl	800a08c <__hexdig_fun>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d064      	beq.n	800a1d8 <__gethex+0x120>
 800a10e:	465a      	mov	r2, fp
 800a110:	7810      	ldrb	r0, [r2, #0]
 800a112:	2830      	cmp	r0, #48	; 0x30
 800a114:	4690      	mov	r8, r2
 800a116:	f102 0201 	add.w	r2, r2, #1
 800a11a:	d0f9      	beq.n	800a110 <__gethex+0x58>
 800a11c:	f7ff ffb6 	bl	800a08c <__hexdig_fun>
 800a120:	2301      	movs	r3, #1
 800a122:	fab0 f480 	clz	r4, r0
 800a126:	0964      	lsrs	r4, r4, #5
 800a128:	465e      	mov	r6, fp
 800a12a:	9301      	str	r3, [sp, #4]
 800a12c:	4642      	mov	r2, r8
 800a12e:	4615      	mov	r5, r2
 800a130:	3201      	adds	r2, #1
 800a132:	7828      	ldrb	r0, [r5, #0]
 800a134:	f7ff ffaa 	bl	800a08c <__hexdig_fun>
 800a138:	2800      	cmp	r0, #0
 800a13a:	d1f8      	bne.n	800a12e <__gethex+0x76>
 800a13c:	4994      	ldr	r1, [pc, #592]	; (800a390 <__gethex+0x2d8>)
 800a13e:	2201      	movs	r2, #1
 800a140:	4628      	mov	r0, r5
 800a142:	f7ff fee3 	bl	8009f0c <strncmp>
 800a146:	b978      	cbnz	r0, 800a168 <__gethex+0xb0>
 800a148:	b946      	cbnz	r6, 800a15c <__gethex+0xa4>
 800a14a:	1c6e      	adds	r6, r5, #1
 800a14c:	4632      	mov	r2, r6
 800a14e:	4615      	mov	r5, r2
 800a150:	3201      	adds	r2, #1
 800a152:	7828      	ldrb	r0, [r5, #0]
 800a154:	f7ff ff9a 	bl	800a08c <__hexdig_fun>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d1f8      	bne.n	800a14e <__gethex+0x96>
 800a15c:	1b73      	subs	r3, r6, r5
 800a15e:	009e      	lsls	r6, r3, #2
 800a160:	e004      	b.n	800a16c <__gethex+0xb4>
 800a162:	2400      	movs	r4, #0
 800a164:	4626      	mov	r6, r4
 800a166:	e7e1      	b.n	800a12c <__gethex+0x74>
 800a168:	2e00      	cmp	r6, #0
 800a16a:	d1f7      	bne.n	800a15c <__gethex+0xa4>
 800a16c:	782b      	ldrb	r3, [r5, #0]
 800a16e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a172:	2b50      	cmp	r3, #80	; 0x50
 800a174:	d13d      	bne.n	800a1f2 <__gethex+0x13a>
 800a176:	786b      	ldrb	r3, [r5, #1]
 800a178:	2b2b      	cmp	r3, #43	; 0x2b
 800a17a:	d02f      	beq.n	800a1dc <__gethex+0x124>
 800a17c:	2b2d      	cmp	r3, #45	; 0x2d
 800a17e:	d031      	beq.n	800a1e4 <__gethex+0x12c>
 800a180:	1c69      	adds	r1, r5, #1
 800a182:	f04f 0b00 	mov.w	fp, #0
 800a186:	7808      	ldrb	r0, [r1, #0]
 800a188:	f7ff ff80 	bl	800a08c <__hexdig_fun>
 800a18c:	1e42      	subs	r2, r0, #1
 800a18e:	b2d2      	uxtb	r2, r2
 800a190:	2a18      	cmp	r2, #24
 800a192:	d82e      	bhi.n	800a1f2 <__gethex+0x13a>
 800a194:	f1a0 0210 	sub.w	r2, r0, #16
 800a198:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a19c:	f7ff ff76 	bl	800a08c <__hexdig_fun>
 800a1a0:	f100 3cff 	add.w	ip, r0, #4294967295
 800a1a4:	fa5f fc8c 	uxtb.w	ip, ip
 800a1a8:	f1bc 0f18 	cmp.w	ip, #24
 800a1ac:	d91d      	bls.n	800a1ea <__gethex+0x132>
 800a1ae:	f1bb 0f00 	cmp.w	fp, #0
 800a1b2:	d000      	beq.n	800a1b6 <__gethex+0xfe>
 800a1b4:	4252      	negs	r2, r2
 800a1b6:	4416      	add	r6, r2
 800a1b8:	f8ca 1000 	str.w	r1, [sl]
 800a1bc:	b1dc      	cbz	r4, 800a1f6 <__gethex+0x13e>
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	bf14      	ite	ne
 800a1c4:	f04f 0800 	movne.w	r8, #0
 800a1c8:	f04f 0806 	moveq.w	r8, #6
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	b005      	add	sp, #20
 800a1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d4:	4645      	mov	r5, r8
 800a1d6:	4626      	mov	r6, r4
 800a1d8:	2401      	movs	r4, #1
 800a1da:	e7c7      	b.n	800a16c <__gethex+0xb4>
 800a1dc:	f04f 0b00 	mov.w	fp, #0
 800a1e0:	1ca9      	adds	r1, r5, #2
 800a1e2:	e7d0      	b.n	800a186 <__gethex+0xce>
 800a1e4:	f04f 0b01 	mov.w	fp, #1
 800a1e8:	e7fa      	b.n	800a1e0 <__gethex+0x128>
 800a1ea:	230a      	movs	r3, #10
 800a1ec:	fb03 0002 	mla	r0, r3, r2, r0
 800a1f0:	e7d0      	b.n	800a194 <__gethex+0xdc>
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	e7e0      	b.n	800a1b8 <__gethex+0x100>
 800a1f6:	eba5 0308 	sub.w	r3, r5, r8
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	2b07      	cmp	r3, #7
 800a200:	dc0a      	bgt.n	800a218 <__gethex+0x160>
 800a202:	4648      	mov	r0, r9
 800a204:	f7fe f91e 	bl	8008444 <_Balloc>
 800a208:	4604      	mov	r4, r0
 800a20a:	b940      	cbnz	r0, 800a21e <__gethex+0x166>
 800a20c:	4b61      	ldr	r3, [pc, #388]	; (800a394 <__gethex+0x2dc>)
 800a20e:	4602      	mov	r2, r0
 800a210:	21e4      	movs	r1, #228	; 0xe4
 800a212:	4861      	ldr	r0, [pc, #388]	; (800a398 <__gethex+0x2e0>)
 800a214:	f7ff feb4 	bl	8009f80 <__assert_func>
 800a218:	3101      	adds	r1, #1
 800a21a:	105b      	asrs	r3, r3, #1
 800a21c:	e7ef      	b.n	800a1fe <__gethex+0x146>
 800a21e:	f100 0a14 	add.w	sl, r0, #20
 800a222:	2300      	movs	r3, #0
 800a224:	495a      	ldr	r1, [pc, #360]	; (800a390 <__gethex+0x2d8>)
 800a226:	f8cd a004 	str.w	sl, [sp, #4]
 800a22a:	469b      	mov	fp, r3
 800a22c:	45a8      	cmp	r8, r5
 800a22e:	d342      	bcc.n	800a2b6 <__gethex+0x1fe>
 800a230:	9801      	ldr	r0, [sp, #4]
 800a232:	f840 bb04 	str.w	fp, [r0], #4
 800a236:	eba0 000a 	sub.w	r0, r0, sl
 800a23a:	1080      	asrs	r0, r0, #2
 800a23c:	6120      	str	r0, [r4, #16]
 800a23e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a242:	4658      	mov	r0, fp
 800a244:	f7fe f9f0 	bl	8008628 <__hi0bits>
 800a248:	683d      	ldr	r5, [r7, #0]
 800a24a:	eba8 0000 	sub.w	r0, r8, r0
 800a24e:	42a8      	cmp	r0, r5
 800a250:	dd59      	ble.n	800a306 <__gethex+0x24e>
 800a252:	eba0 0805 	sub.w	r8, r0, r5
 800a256:	4641      	mov	r1, r8
 800a258:	4620      	mov	r0, r4
 800a25a:	f7fe fd7f 	bl	8008d5c <__any_on>
 800a25e:	4683      	mov	fp, r0
 800a260:	b1b8      	cbz	r0, 800a292 <__gethex+0x1da>
 800a262:	f108 33ff 	add.w	r3, r8, #4294967295
 800a266:	1159      	asrs	r1, r3, #5
 800a268:	f003 021f 	and.w	r2, r3, #31
 800a26c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a270:	f04f 0b01 	mov.w	fp, #1
 800a274:	fa0b f202 	lsl.w	r2, fp, r2
 800a278:	420a      	tst	r2, r1
 800a27a:	d00a      	beq.n	800a292 <__gethex+0x1da>
 800a27c:	455b      	cmp	r3, fp
 800a27e:	dd06      	ble.n	800a28e <__gethex+0x1d6>
 800a280:	f1a8 0102 	sub.w	r1, r8, #2
 800a284:	4620      	mov	r0, r4
 800a286:	f7fe fd69 	bl	8008d5c <__any_on>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d138      	bne.n	800a300 <__gethex+0x248>
 800a28e:	f04f 0b02 	mov.w	fp, #2
 800a292:	4641      	mov	r1, r8
 800a294:	4620      	mov	r0, r4
 800a296:	f7ff fea7 	bl	8009fe8 <rshift>
 800a29a:	4446      	add	r6, r8
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	42b3      	cmp	r3, r6
 800a2a0:	da41      	bge.n	800a326 <__gethex+0x26e>
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4648      	mov	r0, r9
 800a2a6:	f7fe f90d 	bl	80084c4 <_Bfree>
 800a2aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a2b4:	e78a      	b.n	800a1cc <__gethex+0x114>
 800a2b6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a2ba:	2a2e      	cmp	r2, #46	; 0x2e
 800a2bc:	d014      	beq.n	800a2e8 <__gethex+0x230>
 800a2be:	2b20      	cmp	r3, #32
 800a2c0:	d106      	bne.n	800a2d0 <__gethex+0x218>
 800a2c2:	9b01      	ldr	r3, [sp, #4]
 800a2c4:	f843 bb04 	str.w	fp, [r3], #4
 800a2c8:	f04f 0b00 	mov.w	fp, #0
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	465b      	mov	r3, fp
 800a2d0:	7828      	ldrb	r0, [r5, #0]
 800a2d2:	9303      	str	r3, [sp, #12]
 800a2d4:	f7ff feda 	bl	800a08c <__hexdig_fun>
 800a2d8:	9b03      	ldr	r3, [sp, #12]
 800a2da:	f000 000f 	and.w	r0, r0, #15
 800a2de:	4098      	lsls	r0, r3
 800a2e0:	ea4b 0b00 	orr.w	fp, fp, r0
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	e7a1      	b.n	800a22c <__gethex+0x174>
 800a2e8:	45a8      	cmp	r8, r5
 800a2ea:	d8e8      	bhi.n	800a2be <__gethex+0x206>
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	9303      	str	r3, [sp, #12]
 800a2f2:	f7ff fe0b 	bl	8009f0c <strncmp>
 800a2f6:	4926      	ldr	r1, [pc, #152]	; (800a390 <__gethex+0x2d8>)
 800a2f8:	9b03      	ldr	r3, [sp, #12]
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d1df      	bne.n	800a2be <__gethex+0x206>
 800a2fe:	e795      	b.n	800a22c <__gethex+0x174>
 800a300:	f04f 0b03 	mov.w	fp, #3
 800a304:	e7c5      	b.n	800a292 <__gethex+0x1da>
 800a306:	da0b      	bge.n	800a320 <__gethex+0x268>
 800a308:	eba5 0800 	sub.w	r8, r5, r0
 800a30c:	4621      	mov	r1, r4
 800a30e:	4642      	mov	r2, r8
 800a310:	4648      	mov	r0, r9
 800a312:	f7fe faf1 	bl	80088f8 <__lshift>
 800a316:	eba6 0608 	sub.w	r6, r6, r8
 800a31a:	4604      	mov	r4, r0
 800a31c:	f100 0a14 	add.w	sl, r0, #20
 800a320:	f04f 0b00 	mov.w	fp, #0
 800a324:	e7ba      	b.n	800a29c <__gethex+0x1e4>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	42b3      	cmp	r3, r6
 800a32a:	dd73      	ble.n	800a414 <__gethex+0x35c>
 800a32c:	1b9e      	subs	r6, r3, r6
 800a32e:	42b5      	cmp	r5, r6
 800a330:	dc34      	bgt.n	800a39c <__gethex+0x2e4>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b02      	cmp	r3, #2
 800a336:	d023      	beq.n	800a380 <__gethex+0x2c8>
 800a338:	2b03      	cmp	r3, #3
 800a33a:	d025      	beq.n	800a388 <__gethex+0x2d0>
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d115      	bne.n	800a36c <__gethex+0x2b4>
 800a340:	42b5      	cmp	r5, r6
 800a342:	d113      	bne.n	800a36c <__gethex+0x2b4>
 800a344:	2d01      	cmp	r5, #1
 800a346:	d10b      	bne.n	800a360 <__gethex+0x2a8>
 800a348:	9a02      	ldr	r2, [sp, #8]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6013      	str	r3, [r2, #0]
 800a34e:	2301      	movs	r3, #1
 800a350:	6123      	str	r3, [r4, #16]
 800a352:	f8ca 3000 	str.w	r3, [sl]
 800a356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a358:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a35c:	601c      	str	r4, [r3, #0]
 800a35e:	e735      	b.n	800a1cc <__gethex+0x114>
 800a360:	1e69      	subs	r1, r5, #1
 800a362:	4620      	mov	r0, r4
 800a364:	f7fe fcfa 	bl	8008d5c <__any_on>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d1ed      	bne.n	800a348 <__gethex+0x290>
 800a36c:	4621      	mov	r1, r4
 800a36e:	4648      	mov	r0, r9
 800a370:	f7fe f8a8 	bl	80084c4 <_Bfree>
 800a374:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a376:	2300      	movs	r3, #0
 800a378:	6013      	str	r3, [r2, #0]
 800a37a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a37e:	e725      	b.n	800a1cc <__gethex+0x114>
 800a380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1f2      	bne.n	800a36c <__gethex+0x2b4>
 800a386:	e7df      	b.n	800a348 <__gethex+0x290>
 800a388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1dc      	bne.n	800a348 <__gethex+0x290>
 800a38e:	e7ed      	b.n	800a36c <__gethex+0x2b4>
 800a390:	0800be94 	.word	0x0800be94
 800a394:	0800bd29 	.word	0x0800bd29
 800a398:	0800c03e 	.word	0x0800c03e
 800a39c:	f106 38ff 	add.w	r8, r6, #4294967295
 800a3a0:	f1bb 0f00 	cmp.w	fp, #0
 800a3a4:	d133      	bne.n	800a40e <__gethex+0x356>
 800a3a6:	f1b8 0f00 	cmp.w	r8, #0
 800a3aa:	d004      	beq.n	800a3b6 <__gethex+0x2fe>
 800a3ac:	4641      	mov	r1, r8
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f7fe fcd4 	bl	8008d5c <__any_on>
 800a3b4:	4683      	mov	fp, r0
 800a3b6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a3c0:	f008 081f 	and.w	r8, r8, #31
 800a3c4:	fa03 f308 	lsl.w	r3, r3, r8
 800a3c8:	4213      	tst	r3, r2
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	bf18      	it	ne
 800a3d0:	f04b 0b02 	orrne.w	fp, fp, #2
 800a3d4:	1bad      	subs	r5, r5, r6
 800a3d6:	f7ff fe07 	bl	8009fe8 <rshift>
 800a3da:	687e      	ldr	r6, [r7, #4]
 800a3dc:	f04f 0802 	mov.w	r8, #2
 800a3e0:	f1bb 0f00 	cmp.w	fp, #0
 800a3e4:	d04a      	beq.n	800a47c <__gethex+0x3c4>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d016      	beq.n	800a41a <__gethex+0x362>
 800a3ec:	2b03      	cmp	r3, #3
 800a3ee:	d018      	beq.n	800a422 <__gethex+0x36a>
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d109      	bne.n	800a408 <__gethex+0x350>
 800a3f4:	f01b 0f02 	tst.w	fp, #2
 800a3f8:	d006      	beq.n	800a408 <__gethex+0x350>
 800a3fa:	f8da 3000 	ldr.w	r3, [sl]
 800a3fe:	ea4b 0b03 	orr.w	fp, fp, r3
 800a402:	f01b 0f01 	tst.w	fp, #1
 800a406:	d10f      	bne.n	800a428 <__gethex+0x370>
 800a408:	f048 0810 	orr.w	r8, r8, #16
 800a40c:	e036      	b.n	800a47c <__gethex+0x3c4>
 800a40e:	f04f 0b01 	mov.w	fp, #1
 800a412:	e7d0      	b.n	800a3b6 <__gethex+0x2fe>
 800a414:	f04f 0801 	mov.w	r8, #1
 800a418:	e7e2      	b.n	800a3e0 <__gethex+0x328>
 800a41a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a41c:	f1c3 0301 	rsb	r3, r3, #1
 800a420:	930f      	str	r3, [sp, #60]	; 0x3c
 800a422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a424:	2b00      	cmp	r3, #0
 800a426:	d0ef      	beq.n	800a408 <__gethex+0x350>
 800a428:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a42c:	f104 0214 	add.w	r2, r4, #20
 800a430:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a434:	9301      	str	r3, [sp, #4]
 800a436:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a43a:	2300      	movs	r3, #0
 800a43c:	4694      	mov	ip, r2
 800a43e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a442:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a446:	d01e      	beq.n	800a486 <__gethex+0x3ce>
 800a448:	3101      	adds	r1, #1
 800a44a:	f8cc 1000 	str.w	r1, [ip]
 800a44e:	f1b8 0f02 	cmp.w	r8, #2
 800a452:	f104 0214 	add.w	r2, r4, #20
 800a456:	d13d      	bne.n	800a4d4 <__gethex+0x41c>
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	42ab      	cmp	r3, r5
 800a45e:	d10b      	bne.n	800a478 <__gethex+0x3c0>
 800a460:	1169      	asrs	r1, r5, #5
 800a462:	2301      	movs	r3, #1
 800a464:	f005 051f 	and.w	r5, r5, #31
 800a468:	fa03 f505 	lsl.w	r5, r3, r5
 800a46c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a470:	421d      	tst	r5, r3
 800a472:	bf18      	it	ne
 800a474:	f04f 0801 	movne.w	r8, #1
 800a478:	f048 0820 	orr.w	r8, r8, #32
 800a47c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a47e:	601c      	str	r4, [r3, #0]
 800a480:	9b02      	ldr	r3, [sp, #8]
 800a482:	601e      	str	r6, [r3, #0]
 800a484:	e6a2      	b.n	800a1cc <__gethex+0x114>
 800a486:	4290      	cmp	r0, r2
 800a488:	f842 3c04 	str.w	r3, [r2, #-4]
 800a48c:	d8d6      	bhi.n	800a43c <__gethex+0x384>
 800a48e:	68a2      	ldr	r2, [r4, #8]
 800a490:	4593      	cmp	fp, r2
 800a492:	db17      	blt.n	800a4c4 <__gethex+0x40c>
 800a494:	6861      	ldr	r1, [r4, #4]
 800a496:	4648      	mov	r0, r9
 800a498:	3101      	adds	r1, #1
 800a49a:	f7fd ffd3 	bl	8008444 <_Balloc>
 800a49e:	4682      	mov	sl, r0
 800a4a0:	b918      	cbnz	r0, 800a4aa <__gethex+0x3f2>
 800a4a2:	4b1b      	ldr	r3, [pc, #108]	; (800a510 <__gethex+0x458>)
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	2184      	movs	r1, #132	; 0x84
 800a4a8:	e6b3      	b.n	800a212 <__gethex+0x15a>
 800a4aa:	6922      	ldr	r2, [r4, #16]
 800a4ac:	3202      	adds	r2, #2
 800a4ae:	f104 010c 	add.w	r1, r4, #12
 800a4b2:	0092      	lsls	r2, r2, #2
 800a4b4:	300c      	adds	r0, #12
 800a4b6:	f7ff fd4b 	bl	8009f50 <memcpy>
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	4648      	mov	r0, r9
 800a4be:	f7fe f801 	bl	80084c4 <_Bfree>
 800a4c2:	4654      	mov	r4, sl
 800a4c4:	6922      	ldr	r2, [r4, #16]
 800a4c6:	1c51      	adds	r1, r2, #1
 800a4c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a4cc:	6121      	str	r1, [r4, #16]
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	6151      	str	r1, [r2, #20]
 800a4d2:	e7bc      	b.n	800a44e <__gethex+0x396>
 800a4d4:	6921      	ldr	r1, [r4, #16]
 800a4d6:	4559      	cmp	r1, fp
 800a4d8:	dd0b      	ble.n	800a4f2 <__gethex+0x43a>
 800a4da:	2101      	movs	r1, #1
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f7ff fd83 	bl	8009fe8 <rshift>
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	3601      	adds	r6, #1
 800a4e6:	42b3      	cmp	r3, r6
 800a4e8:	f6ff aedb 	blt.w	800a2a2 <__gethex+0x1ea>
 800a4ec:	f04f 0801 	mov.w	r8, #1
 800a4f0:	e7c2      	b.n	800a478 <__gethex+0x3c0>
 800a4f2:	f015 051f 	ands.w	r5, r5, #31
 800a4f6:	d0f9      	beq.n	800a4ec <__gethex+0x434>
 800a4f8:	9b01      	ldr	r3, [sp, #4]
 800a4fa:	441a      	add	r2, r3
 800a4fc:	f1c5 0520 	rsb	r5, r5, #32
 800a500:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a504:	f7fe f890 	bl	8008628 <__hi0bits>
 800a508:	42a8      	cmp	r0, r5
 800a50a:	dbe6      	blt.n	800a4da <__gethex+0x422>
 800a50c:	e7ee      	b.n	800a4ec <__gethex+0x434>
 800a50e:	bf00      	nop
 800a510:	0800bd29 	.word	0x0800bd29

0800a514 <L_shift>:
 800a514:	f1c2 0208 	rsb	r2, r2, #8
 800a518:	0092      	lsls	r2, r2, #2
 800a51a:	b570      	push	{r4, r5, r6, lr}
 800a51c:	f1c2 0620 	rsb	r6, r2, #32
 800a520:	6843      	ldr	r3, [r0, #4]
 800a522:	6804      	ldr	r4, [r0, #0]
 800a524:	fa03 f506 	lsl.w	r5, r3, r6
 800a528:	432c      	orrs	r4, r5
 800a52a:	40d3      	lsrs	r3, r2
 800a52c:	6004      	str	r4, [r0, #0]
 800a52e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a532:	4288      	cmp	r0, r1
 800a534:	d3f4      	bcc.n	800a520 <L_shift+0xc>
 800a536:	bd70      	pop	{r4, r5, r6, pc}

0800a538 <__match>:
 800a538:	b530      	push	{r4, r5, lr}
 800a53a:	6803      	ldr	r3, [r0, #0]
 800a53c:	3301      	adds	r3, #1
 800a53e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a542:	b914      	cbnz	r4, 800a54a <__match+0x12>
 800a544:	6003      	str	r3, [r0, #0]
 800a546:	2001      	movs	r0, #1
 800a548:	bd30      	pop	{r4, r5, pc}
 800a54a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a54e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a552:	2d19      	cmp	r5, #25
 800a554:	bf98      	it	ls
 800a556:	3220      	addls	r2, #32
 800a558:	42a2      	cmp	r2, r4
 800a55a:	d0f0      	beq.n	800a53e <__match+0x6>
 800a55c:	2000      	movs	r0, #0
 800a55e:	e7f3      	b.n	800a548 <__match+0x10>

0800a560 <__hexnan>:
 800a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	680b      	ldr	r3, [r1, #0]
 800a566:	6801      	ldr	r1, [r0, #0]
 800a568:	115e      	asrs	r6, r3, #5
 800a56a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a56e:	f013 031f 	ands.w	r3, r3, #31
 800a572:	b087      	sub	sp, #28
 800a574:	bf18      	it	ne
 800a576:	3604      	addne	r6, #4
 800a578:	2500      	movs	r5, #0
 800a57a:	1f37      	subs	r7, r6, #4
 800a57c:	4682      	mov	sl, r0
 800a57e:	4690      	mov	r8, r2
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	f846 5c04 	str.w	r5, [r6, #-4]
 800a586:	46b9      	mov	r9, r7
 800a588:	463c      	mov	r4, r7
 800a58a:	9502      	str	r5, [sp, #8]
 800a58c:	46ab      	mov	fp, r5
 800a58e:	784a      	ldrb	r2, [r1, #1]
 800a590:	1c4b      	adds	r3, r1, #1
 800a592:	9303      	str	r3, [sp, #12]
 800a594:	b342      	cbz	r2, 800a5e8 <__hexnan+0x88>
 800a596:	4610      	mov	r0, r2
 800a598:	9105      	str	r1, [sp, #20]
 800a59a:	9204      	str	r2, [sp, #16]
 800a59c:	f7ff fd76 	bl	800a08c <__hexdig_fun>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d14f      	bne.n	800a644 <__hexnan+0xe4>
 800a5a4:	9a04      	ldr	r2, [sp, #16]
 800a5a6:	9905      	ldr	r1, [sp, #20]
 800a5a8:	2a20      	cmp	r2, #32
 800a5aa:	d818      	bhi.n	800a5de <__hexnan+0x7e>
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	459b      	cmp	fp, r3
 800a5b0:	dd13      	ble.n	800a5da <__hexnan+0x7a>
 800a5b2:	454c      	cmp	r4, r9
 800a5b4:	d206      	bcs.n	800a5c4 <__hexnan+0x64>
 800a5b6:	2d07      	cmp	r5, #7
 800a5b8:	dc04      	bgt.n	800a5c4 <__hexnan+0x64>
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	4649      	mov	r1, r9
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f7ff ffa8 	bl	800a514 <L_shift>
 800a5c4:	4544      	cmp	r4, r8
 800a5c6:	d950      	bls.n	800a66a <__hexnan+0x10a>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	f1a4 0904 	sub.w	r9, r4, #4
 800a5ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5d2:	f8cd b008 	str.w	fp, [sp, #8]
 800a5d6:	464c      	mov	r4, r9
 800a5d8:	461d      	mov	r5, r3
 800a5da:	9903      	ldr	r1, [sp, #12]
 800a5dc:	e7d7      	b.n	800a58e <__hexnan+0x2e>
 800a5de:	2a29      	cmp	r2, #41	; 0x29
 800a5e0:	d155      	bne.n	800a68e <__hexnan+0x12e>
 800a5e2:	3102      	adds	r1, #2
 800a5e4:	f8ca 1000 	str.w	r1, [sl]
 800a5e8:	f1bb 0f00 	cmp.w	fp, #0
 800a5ec:	d04f      	beq.n	800a68e <__hexnan+0x12e>
 800a5ee:	454c      	cmp	r4, r9
 800a5f0:	d206      	bcs.n	800a600 <__hexnan+0xa0>
 800a5f2:	2d07      	cmp	r5, #7
 800a5f4:	dc04      	bgt.n	800a600 <__hexnan+0xa0>
 800a5f6:	462a      	mov	r2, r5
 800a5f8:	4649      	mov	r1, r9
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f7ff ff8a 	bl	800a514 <L_shift>
 800a600:	4544      	cmp	r4, r8
 800a602:	d934      	bls.n	800a66e <__hexnan+0x10e>
 800a604:	f1a8 0204 	sub.w	r2, r8, #4
 800a608:	4623      	mov	r3, r4
 800a60a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a60e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a612:	429f      	cmp	r7, r3
 800a614:	d2f9      	bcs.n	800a60a <__hexnan+0xaa>
 800a616:	1b3b      	subs	r3, r7, r4
 800a618:	f023 0303 	bic.w	r3, r3, #3
 800a61c:	3304      	adds	r3, #4
 800a61e:	3e03      	subs	r6, #3
 800a620:	3401      	adds	r4, #1
 800a622:	42a6      	cmp	r6, r4
 800a624:	bf38      	it	cc
 800a626:	2304      	movcc	r3, #4
 800a628:	4443      	add	r3, r8
 800a62a:	2200      	movs	r2, #0
 800a62c:	f843 2b04 	str.w	r2, [r3], #4
 800a630:	429f      	cmp	r7, r3
 800a632:	d2fb      	bcs.n	800a62c <__hexnan+0xcc>
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	b91b      	cbnz	r3, 800a640 <__hexnan+0xe0>
 800a638:	4547      	cmp	r7, r8
 800a63a:	d126      	bne.n	800a68a <__hexnan+0x12a>
 800a63c:	2301      	movs	r3, #1
 800a63e:	603b      	str	r3, [r7, #0]
 800a640:	2005      	movs	r0, #5
 800a642:	e025      	b.n	800a690 <__hexnan+0x130>
 800a644:	3501      	adds	r5, #1
 800a646:	2d08      	cmp	r5, #8
 800a648:	f10b 0b01 	add.w	fp, fp, #1
 800a64c:	dd06      	ble.n	800a65c <__hexnan+0xfc>
 800a64e:	4544      	cmp	r4, r8
 800a650:	d9c3      	bls.n	800a5da <__hexnan+0x7a>
 800a652:	2300      	movs	r3, #0
 800a654:	f844 3c04 	str.w	r3, [r4, #-4]
 800a658:	2501      	movs	r5, #1
 800a65a:	3c04      	subs	r4, #4
 800a65c:	6822      	ldr	r2, [r4, #0]
 800a65e:	f000 000f 	and.w	r0, r0, #15
 800a662:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a666:	6020      	str	r0, [r4, #0]
 800a668:	e7b7      	b.n	800a5da <__hexnan+0x7a>
 800a66a:	2508      	movs	r5, #8
 800a66c:	e7b5      	b.n	800a5da <__hexnan+0x7a>
 800a66e:	9b01      	ldr	r3, [sp, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d0df      	beq.n	800a634 <__hexnan+0xd4>
 800a674:	f1c3 0320 	rsb	r3, r3, #32
 800a678:	f04f 32ff 	mov.w	r2, #4294967295
 800a67c:	40da      	lsrs	r2, r3
 800a67e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a682:	4013      	ands	r3, r2
 800a684:	f846 3c04 	str.w	r3, [r6, #-4]
 800a688:	e7d4      	b.n	800a634 <__hexnan+0xd4>
 800a68a:	3f04      	subs	r7, #4
 800a68c:	e7d2      	b.n	800a634 <__hexnan+0xd4>
 800a68e:	2004      	movs	r0, #4
 800a690:	b007      	add	sp, #28
 800a692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a696 <__ascii_mbtowc>:
 800a696:	b082      	sub	sp, #8
 800a698:	b901      	cbnz	r1, 800a69c <__ascii_mbtowc+0x6>
 800a69a:	a901      	add	r1, sp, #4
 800a69c:	b142      	cbz	r2, 800a6b0 <__ascii_mbtowc+0x1a>
 800a69e:	b14b      	cbz	r3, 800a6b4 <__ascii_mbtowc+0x1e>
 800a6a0:	7813      	ldrb	r3, [r2, #0]
 800a6a2:	600b      	str	r3, [r1, #0]
 800a6a4:	7812      	ldrb	r2, [r2, #0]
 800a6a6:	1e10      	subs	r0, r2, #0
 800a6a8:	bf18      	it	ne
 800a6aa:	2001      	movne	r0, #1
 800a6ac:	b002      	add	sp, #8
 800a6ae:	4770      	bx	lr
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	e7fb      	b.n	800a6ac <__ascii_mbtowc+0x16>
 800a6b4:	f06f 0001 	mvn.w	r0, #1
 800a6b8:	e7f8      	b.n	800a6ac <__ascii_mbtowc+0x16>

0800a6ba <_realloc_r>:
 800a6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6be:	4680      	mov	r8, r0
 800a6c0:	4614      	mov	r4, r2
 800a6c2:	460e      	mov	r6, r1
 800a6c4:	b921      	cbnz	r1, 800a6d0 <_realloc_r+0x16>
 800a6c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	f7fd be2e 	b.w	800832c <_malloc_r>
 800a6d0:	b92a      	cbnz	r2, 800a6de <_realloc_r+0x24>
 800a6d2:	f7fd fdb7 	bl	8008244 <_free_r>
 800a6d6:	4625      	mov	r5, r4
 800a6d8:	4628      	mov	r0, r5
 800a6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6de:	f000 f842 	bl	800a766 <_malloc_usable_size_r>
 800a6e2:	4284      	cmp	r4, r0
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	d802      	bhi.n	800a6ee <_realloc_r+0x34>
 800a6e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6ec:	d812      	bhi.n	800a714 <_realloc_r+0x5a>
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	f7fd fe1b 	bl	800832c <_malloc_r>
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d0ed      	beq.n	800a6d8 <_realloc_r+0x1e>
 800a6fc:	42bc      	cmp	r4, r7
 800a6fe:	4622      	mov	r2, r4
 800a700:	4631      	mov	r1, r6
 800a702:	bf28      	it	cs
 800a704:	463a      	movcs	r2, r7
 800a706:	f7ff fc23 	bl	8009f50 <memcpy>
 800a70a:	4631      	mov	r1, r6
 800a70c:	4640      	mov	r0, r8
 800a70e:	f7fd fd99 	bl	8008244 <_free_r>
 800a712:	e7e1      	b.n	800a6d8 <_realloc_r+0x1e>
 800a714:	4635      	mov	r5, r6
 800a716:	e7df      	b.n	800a6d8 <_realloc_r+0x1e>

0800a718 <__ascii_wctomb>:
 800a718:	b149      	cbz	r1, 800a72e <__ascii_wctomb+0x16>
 800a71a:	2aff      	cmp	r2, #255	; 0xff
 800a71c:	bf85      	ittet	hi
 800a71e:	238a      	movhi	r3, #138	; 0x8a
 800a720:	6003      	strhi	r3, [r0, #0]
 800a722:	700a      	strbls	r2, [r1, #0]
 800a724:	f04f 30ff 	movhi.w	r0, #4294967295
 800a728:	bf98      	it	ls
 800a72a:	2001      	movls	r0, #1
 800a72c:	4770      	bx	lr
 800a72e:	4608      	mov	r0, r1
 800a730:	4770      	bx	lr
	...

0800a734 <fiprintf>:
 800a734:	b40e      	push	{r1, r2, r3}
 800a736:	b503      	push	{r0, r1, lr}
 800a738:	4601      	mov	r1, r0
 800a73a:	ab03      	add	r3, sp, #12
 800a73c:	4805      	ldr	r0, [pc, #20]	; (800a754 <fiprintf+0x20>)
 800a73e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a742:	6800      	ldr	r0, [r0, #0]
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	f000 f83f 	bl	800a7c8 <_vfiprintf_r>
 800a74a:	b002      	add	sp, #8
 800a74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a750:	b003      	add	sp, #12
 800a752:	4770      	bx	lr
 800a754:	20000064 	.word	0x20000064

0800a758 <abort>:
 800a758:	b508      	push	{r3, lr}
 800a75a:	2006      	movs	r0, #6
 800a75c:	f000 fa0c 	bl	800ab78 <raise>
 800a760:	2001      	movs	r0, #1
 800a762:	f7f8 f989 	bl	8002a78 <_exit>

0800a766 <_malloc_usable_size_r>:
 800a766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a76a:	1f18      	subs	r0, r3, #4
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	bfbc      	itt	lt
 800a770:	580b      	ldrlt	r3, [r1, r0]
 800a772:	18c0      	addlt	r0, r0, r3
 800a774:	4770      	bx	lr

0800a776 <__sfputc_r>:
 800a776:	6893      	ldr	r3, [r2, #8]
 800a778:	3b01      	subs	r3, #1
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	b410      	push	{r4}
 800a77e:	6093      	str	r3, [r2, #8]
 800a780:	da08      	bge.n	800a794 <__sfputc_r+0x1e>
 800a782:	6994      	ldr	r4, [r2, #24]
 800a784:	42a3      	cmp	r3, r4
 800a786:	db01      	blt.n	800a78c <__sfputc_r+0x16>
 800a788:	290a      	cmp	r1, #10
 800a78a:	d103      	bne.n	800a794 <__sfputc_r+0x1e>
 800a78c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a790:	f000 b934 	b.w	800a9fc <__swbuf_r>
 800a794:	6813      	ldr	r3, [r2, #0]
 800a796:	1c58      	adds	r0, r3, #1
 800a798:	6010      	str	r0, [r2, #0]
 800a79a:	7019      	strb	r1, [r3, #0]
 800a79c:	4608      	mov	r0, r1
 800a79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <__sfputs_r>:
 800a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	460f      	mov	r7, r1
 800a7aa:	4614      	mov	r4, r2
 800a7ac:	18d5      	adds	r5, r2, r3
 800a7ae:	42ac      	cmp	r4, r5
 800a7b0:	d101      	bne.n	800a7b6 <__sfputs_r+0x12>
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	e007      	b.n	800a7c6 <__sfputs_r+0x22>
 800a7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ba:	463a      	mov	r2, r7
 800a7bc:	4630      	mov	r0, r6
 800a7be:	f7ff ffda 	bl	800a776 <__sfputc_r>
 800a7c2:	1c43      	adds	r3, r0, #1
 800a7c4:	d1f3      	bne.n	800a7ae <__sfputs_r+0xa>
 800a7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7c8 <_vfiprintf_r>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	b09d      	sub	sp, #116	; 0x74
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	4698      	mov	r8, r3
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	b118      	cbz	r0, 800a7e0 <_vfiprintf_r+0x18>
 800a7d8:	6a03      	ldr	r3, [r0, #32]
 800a7da:	b90b      	cbnz	r3, 800a7e0 <_vfiprintf_r+0x18>
 800a7dc:	f7fc fd62 	bl	80072a4 <__sinit>
 800a7e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7e2:	07d9      	lsls	r1, r3, #31
 800a7e4:	d405      	bmi.n	800a7f2 <_vfiprintf_r+0x2a>
 800a7e6:	89ab      	ldrh	r3, [r5, #12]
 800a7e8:	059a      	lsls	r2, r3, #22
 800a7ea:	d402      	bmi.n	800a7f2 <_vfiprintf_r+0x2a>
 800a7ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7ee:	f7fc fea4 	bl	800753a <__retarget_lock_acquire_recursive>
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	071b      	lsls	r3, r3, #28
 800a7f6:	d501      	bpl.n	800a7fc <_vfiprintf_r+0x34>
 800a7f8:	692b      	ldr	r3, [r5, #16]
 800a7fa:	b99b      	cbnz	r3, 800a824 <_vfiprintf_r+0x5c>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 f93a 	bl	800aa78 <__swsetup_r>
 800a804:	b170      	cbz	r0, 800a824 <_vfiprintf_r+0x5c>
 800a806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a808:	07dc      	lsls	r4, r3, #31
 800a80a:	d504      	bpl.n	800a816 <_vfiprintf_r+0x4e>
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	b01d      	add	sp, #116	; 0x74
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	0598      	lsls	r0, r3, #22
 800a81a:	d4f7      	bmi.n	800a80c <_vfiprintf_r+0x44>
 800a81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a81e:	f7fc fe8d 	bl	800753c <__retarget_lock_release_recursive>
 800a822:	e7f3      	b.n	800a80c <_vfiprintf_r+0x44>
 800a824:	2300      	movs	r3, #0
 800a826:	9309      	str	r3, [sp, #36]	; 0x24
 800a828:	2320      	movs	r3, #32
 800a82a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a82e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a832:	2330      	movs	r3, #48	; 0x30
 800a834:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a9e8 <_vfiprintf_r+0x220>
 800a838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a83c:	f04f 0901 	mov.w	r9, #1
 800a840:	4623      	mov	r3, r4
 800a842:	469a      	mov	sl, r3
 800a844:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a848:	b10a      	cbz	r2, 800a84e <_vfiprintf_r+0x86>
 800a84a:	2a25      	cmp	r2, #37	; 0x25
 800a84c:	d1f9      	bne.n	800a842 <_vfiprintf_r+0x7a>
 800a84e:	ebba 0b04 	subs.w	fp, sl, r4
 800a852:	d00b      	beq.n	800a86c <_vfiprintf_r+0xa4>
 800a854:	465b      	mov	r3, fp
 800a856:	4622      	mov	r2, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7ff ffa2 	bl	800a7a4 <__sfputs_r>
 800a860:	3001      	adds	r0, #1
 800a862:	f000 80a9 	beq.w	800a9b8 <_vfiprintf_r+0x1f0>
 800a866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a868:	445a      	add	r2, fp
 800a86a:	9209      	str	r2, [sp, #36]	; 0x24
 800a86c:	f89a 3000 	ldrb.w	r3, [sl]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80a1 	beq.w	800a9b8 <_vfiprintf_r+0x1f0>
 800a876:	2300      	movs	r3, #0
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a880:	f10a 0a01 	add.w	sl, sl, #1
 800a884:	9304      	str	r3, [sp, #16]
 800a886:	9307      	str	r3, [sp, #28]
 800a888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a88c:	931a      	str	r3, [sp, #104]	; 0x68
 800a88e:	4654      	mov	r4, sl
 800a890:	2205      	movs	r2, #5
 800a892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a896:	4854      	ldr	r0, [pc, #336]	; (800a9e8 <_vfiprintf_r+0x220>)
 800a898:	f7f5 fc9a 	bl	80001d0 <memchr>
 800a89c:	9a04      	ldr	r2, [sp, #16]
 800a89e:	b9d8      	cbnz	r0, 800a8d8 <_vfiprintf_r+0x110>
 800a8a0:	06d1      	lsls	r1, r2, #27
 800a8a2:	bf44      	itt	mi
 800a8a4:	2320      	movmi	r3, #32
 800a8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8aa:	0713      	lsls	r3, r2, #28
 800a8ac:	bf44      	itt	mi
 800a8ae:	232b      	movmi	r3, #43	; 0x2b
 800a8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ba:	d015      	beq.n	800a8e8 <_vfiprintf_r+0x120>
 800a8bc:	9a07      	ldr	r2, [sp, #28]
 800a8be:	4654      	mov	r4, sl
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f04f 0c0a 	mov.w	ip, #10
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8cc:	3b30      	subs	r3, #48	; 0x30
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	d94d      	bls.n	800a96e <_vfiprintf_r+0x1a6>
 800a8d2:	b1b0      	cbz	r0, 800a902 <_vfiprintf_r+0x13a>
 800a8d4:	9207      	str	r2, [sp, #28]
 800a8d6:	e014      	b.n	800a902 <_vfiprintf_r+0x13a>
 800a8d8:	eba0 0308 	sub.w	r3, r0, r8
 800a8dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	46a2      	mov	sl, r4
 800a8e6:	e7d2      	b.n	800a88e <_vfiprintf_r+0xc6>
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	1d19      	adds	r1, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	9103      	str	r1, [sp, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfbb      	ittet	lt
 800a8f4:	425b      	neglt	r3, r3
 800a8f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a8fa:	9307      	strge	r3, [sp, #28]
 800a8fc:	9307      	strlt	r3, [sp, #28]
 800a8fe:	bfb8      	it	lt
 800a900:	9204      	strlt	r2, [sp, #16]
 800a902:	7823      	ldrb	r3, [r4, #0]
 800a904:	2b2e      	cmp	r3, #46	; 0x2e
 800a906:	d10c      	bne.n	800a922 <_vfiprintf_r+0x15a>
 800a908:	7863      	ldrb	r3, [r4, #1]
 800a90a:	2b2a      	cmp	r3, #42	; 0x2a
 800a90c:	d134      	bne.n	800a978 <_vfiprintf_r+0x1b0>
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	1d1a      	adds	r2, r3, #4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	9203      	str	r2, [sp, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	bfb8      	it	lt
 800a91a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a91e:	3402      	adds	r4, #2
 800a920:	9305      	str	r3, [sp, #20]
 800a922:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a9f8 <_vfiprintf_r+0x230>
 800a926:	7821      	ldrb	r1, [r4, #0]
 800a928:	2203      	movs	r2, #3
 800a92a:	4650      	mov	r0, sl
 800a92c:	f7f5 fc50 	bl	80001d0 <memchr>
 800a930:	b138      	cbz	r0, 800a942 <_vfiprintf_r+0x17a>
 800a932:	9b04      	ldr	r3, [sp, #16]
 800a934:	eba0 000a 	sub.w	r0, r0, sl
 800a938:	2240      	movs	r2, #64	; 0x40
 800a93a:	4082      	lsls	r2, r0
 800a93c:	4313      	orrs	r3, r2
 800a93e:	3401      	adds	r4, #1
 800a940:	9304      	str	r3, [sp, #16]
 800a942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a946:	4829      	ldr	r0, [pc, #164]	; (800a9ec <_vfiprintf_r+0x224>)
 800a948:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a94c:	2206      	movs	r2, #6
 800a94e:	f7f5 fc3f 	bl	80001d0 <memchr>
 800a952:	2800      	cmp	r0, #0
 800a954:	d03f      	beq.n	800a9d6 <_vfiprintf_r+0x20e>
 800a956:	4b26      	ldr	r3, [pc, #152]	; (800a9f0 <_vfiprintf_r+0x228>)
 800a958:	bb1b      	cbnz	r3, 800a9a2 <_vfiprintf_r+0x1da>
 800a95a:	9b03      	ldr	r3, [sp, #12]
 800a95c:	3307      	adds	r3, #7
 800a95e:	f023 0307 	bic.w	r3, r3, #7
 800a962:	3308      	adds	r3, #8
 800a964:	9303      	str	r3, [sp, #12]
 800a966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a968:	443b      	add	r3, r7
 800a96a:	9309      	str	r3, [sp, #36]	; 0x24
 800a96c:	e768      	b.n	800a840 <_vfiprintf_r+0x78>
 800a96e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a972:	460c      	mov	r4, r1
 800a974:	2001      	movs	r0, #1
 800a976:	e7a6      	b.n	800a8c6 <_vfiprintf_r+0xfe>
 800a978:	2300      	movs	r3, #0
 800a97a:	3401      	adds	r4, #1
 800a97c:	9305      	str	r3, [sp, #20]
 800a97e:	4619      	mov	r1, r3
 800a980:	f04f 0c0a 	mov.w	ip, #10
 800a984:	4620      	mov	r0, r4
 800a986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a98a:	3a30      	subs	r2, #48	; 0x30
 800a98c:	2a09      	cmp	r2, #9
 800a98e:	d903      	bls.n	800a998 <_vfiprintf_r+0x1d0>
 800a990:	2b00      	cmp	r3, #0
 800a992:	d0c6      	beq.n	800a922 <_vfiprintf_r+0x15a>
 800a994:	9105      	str	r1, [sp, #20]
 800a996:	e7c4      	b.n	800a922 <_vfiprintf_r+0x15a>
 800a998:	fb0c 2101 	mla	r1, ip, r1, r2
 800a99c:	4604      	mov	r4, r0
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e7f0      	b.n	800a984 <_vfiprintf_r+0x1bc>
 800a9a2:	ab03      	add	r3, sp, #12
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	462a      	mov	r2, r5
 800a9a8:	4b12      	ldr	r3, [pc, #72]	; (800a9f4 <_vfiprintf_r+0x22c>)
 800a9aa:	a904      	add	r1, sp, #16
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f7fb fe17 	bl	80065e0 <_printf_float>
 800a9b2:	4607      	mov	r7, r0
 800a9b4:	1c78      	adds	r0, r7, #1
 800a9b6:	d1d6      	bne.n	800a966 <_vfiprintf_r+0x19e>
 800a9b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ba:	07d9      	lsls	r1, r3, #31
 800a9bc:	d405      	bmi.n	800a9ca <_vfiprintf_r+0x202>
 800a9be:	89ab      	ldrh	r3, [r5, #12]
 800a9c0:	059a      	lsls	r2, r3, #22
 800a9c2:	d402      	bmi.n	800a9ca <_vfiprintf_r+0x202>
 800a9c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9c6:	f7fc fdb9 	bl	800753c <__retarget_lock_release_recursive>
 800a9ca:	89ab      	ldrh	r3, [r5, #12]
 800a9cc:	065b      	lsls	r3, r3, #25
 800a9ce:	f53f af1d 	bmi.w	800a80c <_vfiprintf_r+0x44>
 800a9d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9d4:	e71c      	b.n	800a810 <_vfiprintf_r+0x48>
 800a9d6:	ab03      	add	r3, sp, #12
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	462a      	mov	r2, r5
 800a9dc:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <_vfiprintf_r+0x22c>)
 800a9de:	a904      	add	r1, sp, #16
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	f7fc f8a1 	bl	8006b28 <_printf_i>
 800a9e6:	e7e4      	b.n	800a9b2 <_vfiprintf_r+0x1ea>
 800a9e8:	0800bfe9 	.word	0x0800bfe9
 800a9ec:	0800bff3 	.word	0x0800bff3
 800a9f0:	080065e1 	.word	0x080065e1
 800a9f4:	0800a7a5 	.word	0x0800a7a5
 800a9f8:	0800bfef 	.word	0x0800bfef

0800a9fc <__swbuf_r>:
 800a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fe:	460e      	mov	r6, r1
 800aa00:	4614      	mov	r4, r2
 800aa02:	4605      	mov	r5, r0
 800aa04:	b118      	cbz	r0, 800aa0e <__swbuf_r+0x12>
 800aa06:	6a03      	ldr	r3, [r0, #32]
 800aa08:	b90b      	cbnz	r3, 800aa0e <__swbuf_r+0x12>
 800aa0a:	f7fc fc4b 	bl	80072a4 <__sinit>
 800aa0e:	69a3      	ldr	r3, [r4, #24]
 800aa10:	60a3      	str	r3, [r4, #8]
 800aa12:	89a3      	ldrh	r3, [r4, #12]
 800aa14:	071a      	lsls	r2, r3, #28
 800aa16:	d525      	bpl.n	800aa64 <__swbuf_r+0x68>
 800aa18:	6923      	ldr	r3, [r4, #16]
 800aa1a:	b31b      	cbz	r3, 800aa64 <__swbuf_r+0x68>
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	6922      	ldr	r2, [r4, #16]
 800aa20:	1a98      	subs	r0, r3, r2
 800aa22:	6963      	ldr	r3, [r4, #20]
 800aa24:	b2f6      	uxtb	r6, r6
 800aa26:	4283      	cmp	r3, r0
 800aa28:	4637      	mov	r7, r6
 800aa2a:	dc04      	bgt.n	800aa36 <__swbuf_r+0x3a>
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	4628      	mov	r0, r5
 800aa30:	f7ff fa2a 	bl	8009e88 <_fflush_r>
 800aa34:	b9e0      	cbnz	r0, 800aa70 <__swbuf_r+0x74>
 800aa36:	68a3      	ldr	r3, [r4, #8]
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	60a3      	str	r3, [r4, #8]
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	1c5a      	adds	r2, r3, #1
 800aa40:	6022      	str	r2, [r4, #0]
 800aa42:	701e      	strb	r6, [r3, #0]
 800aa44:	6962      	ldr	r2, [r4, #20]
 800aa46:	1c43      	adds	r3, r0, #1
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d004      	beq.n	800aa56 <__swbuf_r+0x5a>
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	07db      	lsls	r3, r3, #31
 800aa50:	d506      	bpl.n	800aa60 <__swbuf_r+0x64>
 800aa52:	2e0a      	cmp	r6, #10
 800aa54:	d104      	bne.n	800aa60 <__swbuf_r+0x64>
 800aa56:	4621      	mov	r1, r4
 800aa58:	4628      	mov	r0, r5
 800aa5a:	f7ff fa15 	bl	8009e88 <_fflush_r>
 800aa5e:	b938      	cbnz	r0, 800aa70 <__swbuf_r+0x74>
 800aa60:	4638      	mov	r0, r7
 800aa62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa64:	4621      	mov	r1, r4
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 f806 	bl	800aa78 <__swsetup_r>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d0d5      	beq.n	800aa1c <__swbuf_r+0x20>
 800aa70:	f04f 37ff 	mov.w	r7, #4294967295
 800aa74:	e7f4      	b.n	800aa60 <__swbuf_r+0x64>
	...

0800aa78 <__swsetup_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4b2a      	ldr	r3, [pc, #168]	; (800ab24 <__swsetup_r+0xac>)
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	460c      	mov	r4, r1
 800aa82:	b118      	cbz	r0, 800aa8c <__swsetup_r+0x14>
 800aa84:	6a03      	ldr	r3, [r0, #32]
 800aa86:	b90b      	cbnz	r3, 800aa8c <__swsetup_r+0x14>
 800aa88:	f7fc fc0c 	bl	80072a4 <__sinit>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa92:	0718      	lsls	r0, r3, #28
 800aa94:	d422      	bmi.n	800aadc <__swsetup_r+0x64>
 800aa96:	06d9      	lsls	r1, r3, #27
 800aa98:	d407      	bmi.n	800aaaa <__swsetup_r+0x32>
 800aa9a:	2309      	movs	r3, #9
 800aa9c:	602b      	str	r3, [r5, #0]
 800aa9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aaa2:	81a3      	strh	r3, [r4, #12]
 800aaa4:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa8:	e034      	b.n	800ab14 <__swsetup_r+0x9c>
 800aaaa:	0758      	lsls	r0, r3, #29
 800aaac:	d512      	bpl.n	800aad4 <__swsetup_r+0x5c>
 800aaae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aab0:	b141      	cbz	r1, 800aac4 <__swsetup_r+0x4c>
 800aab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aab6:	4299      	cmp	r1, r3
 800aab8:	d002      	beq.n	800aac0 <__swsetup_r+0x48>
 800aaba:	4628      	mov	r0, r5
 800aabc:	f7fd fbc2 	bl	8008244 <_free_r>
 800aac0:	2300      	movs	r3, #0
 800aac2:	6363      	str	r3, [r4, #52]	; 0x34
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aaca:	81a3      	strh	r3, [r4, #12]
 800aacc:	2300      	movs	r3, #0
 800aace:	6063      	str	r3, [r4, #4]
 800aad0:	6923      	ldr	r3, [r4, #16]
 800aad2:	6023      	str	r3, [r4, #0]
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	f043 0308 	orr.w	r3, r3, #8
 800aada:	81a3      	strh	r3, [r4, #12]
 800aadc:	6923      	ldr	r3, [r4, #16]
 800aade:	b94b      	cbnz	r3, 800aaf4 <__swsetup_r+0x7c>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaea:	d003      	beq.n	800aaf4 <__swsetup_r+0x7c>
 800aaec:	4621      	mov	r1, r4
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f000 f884 	bl	800abfc <__smakebuf_r>
 800aaf4:	89a0      	ldrh	r0, [r4, #12]
 800aaf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aafa:	f010 0301 	ands.w	r3, r0, #1
 800aafe:	d00a      	beq.n	800ab16 <__swsetup_r+0x9e>
 800ab00:	2300      	movs	r3, #0
 800ab02:	60a3      	str	r3, [r4, #8]
 800ab04:	6963      	ldr	r3, [r4, #20]
 800ab06:	425b      	negs	r3, r3
 800ab08:	61a3      	str	r3, [r4, #24]
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	b943      	cbnz	r3, 800ab20 <__swsetup_r+0xa8>
 800ab0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab12:	d1c4      	bne.n	800aa9e <__swsetup_r+0x26>
 800ab14:	bd38      	pop	{r3, r4, r5, pc}
 800ab16:	0781      	lsls	r1, r0, #30
 800ab18:	bf58      	it	pl
 800ab1a:	6963      	ldrpl	r3, [r4, #20]
 800ab1c:	60a3      	str	r3, [r4, #8]
 800ab1e:	e7f4      	b.n	800ab0a <__swsetup_r+0x92>
 800ab20:	2000      	movs	r0, #0
 800ab22:	e7f7      	b.n	800ab14 <__swsetup_r+0x9c>
 800ab24:	20000064 	.word	0x20000064

0800ab28 <_raise_r>:
 800ab28:	291f      	cmp	r1, #31
 800ab2a:	b538      	push	{r3, r4, r5, lr}
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	460d      	mov	r5, r1
 800ab30:	d904      	bls.n	800ab3c <_raise_r+0x14>
 800ab32:	2316      	movs	r3, #22
 800ab34:	6003      	str	r3, [r0, #0]
 800ab36:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ab3e:	b112      	cbz	r2, 800ab46 <_raise_r+0x1e>
 800ab40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab44:	b94b      	cbnz	r3, 800ab5a <_raise_r+0x32>
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 f830 	bl	800abac <_getpid_r>
 800ab4c:	462a      	mov	r2, r5
 800ab4e:	4601      	mov	r1, r0
 800ab50:	4620      	mov	r0, r4
 800ab52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab56:	f000 b817 	b.w	800ab88 <_kill_r>
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d00a      	beq.n	800ab74 <_raise_r+0x4c>
 800ab5e:	1c59      	adds	r1, r3, #1
 800ab60:	d103      	bne.n	800ab6a <_raise_r+0x42>
 800ab62:	2316      	movs	r3, #22
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	2001      	movs	r0, #1
 800ab68:	e7e7      	b.n	800ab3a <_raise_r+0x12>
 800ab6a:	2400      	movs	r4, #0
 800ab6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab70:	4628      	mov	r0, r5
 800ab72:	4798      	blx	r3
 800ab74:	2000      	movs	r0, #0
 800ab76:	e7e0      	b.n	800ab3a <_raise_r+0x12>

0800ab78 <raise>:
 800ab78:	4b02      	ldr	r3, [pc, #8]	; (800ab84 <raise+0xc>)
 800ab7a:	4601      	mov	r1, r0
 800ab7c:	6818      	ldr	r0, [r3, #0]
 800ab7e:	f7ff bfd3 	b.w	800ab28 <_raise_r>
 800ab82:	bf00      	nop
 800ab84:	20000064 	.word	0x20000064

0800ab88 <_kill_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4d07      	ldr	r5, [pc, #28]	; (800aba8 <_kill_r+0x20>)
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	4604      	mov	r4, r0
 800ab90:	4608      	mov	r0, r1
 800ab92:	4611      	mov	r1, r2
 800ab94:	602b      	str	r3, [r5, #0]
 800ab96:	f7f7 ff5f 	bl	8002a58 <_kill>
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	d102      	bne.n	800aba4 <_kill_r+0x1c>
 800ab9e:	682b      	ldr	r3, [r5, #0]
 800aba0:	b103      	cbz	r3, 800aba4 <_kill_r+0x1c>
 800aba2:	6023      	str	r3, [r4, #0]
 800aba4:	bd38      	pop	{r3, r4, r5, pc}
 800aba6:	bf00      	nop
 800aba8:	20000954 	.word	0x20000954

0800abac <_getpid_r>:
 800abac:	f7f7 bf4c 	b.w	8002a48 <_getpid>

0800abb0 <__swhatbuf_r>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	460c      	mov	r4, r1
 800abb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb8:	2900      	cmp	r1, #0
 800abba:	b096      	sub	sp, #88	; 0x58
 800abbc:	4615      	mov	r5, r2
 800abbe:	461e      	mov	r6, r3
 800abc0:	da0d      	bge.n	800abde <__swhatbuf_r+0x2e>
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800abc8:	f04f 0100 	mov.w	r1, #0
 800abcc:	bf0c      	ite	eq
 800abce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800abd2:	2340      	movne	r3, #64	; 0x40
 800abd4:	2000      	movs	r0, #0
 800abd6:	6031      	str	r1, [r6, #0]
 800abd8:	602b      	str	r3, [r5, #0]
 800abda:	b016      	add	sp, #88	; 0x58
 800abdc:	bd70      	pop	{r4, r5, r6, pc}
 800abde:	466a      	mov	r2, sp
 800abe0:	f000 f848 	bl	800ac74 <_fstat_r>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	dbec      	blt.n	800abc2 <__swhatbuf_r+0x12>
 800abe8:	9901      	ldr	r1, [sp, #4]
 800abea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800abee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800abf2:	4259      	negs	r1, r3
 800abf4:	4159      	adcs	r1, r3
 800abf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abfa:	e7eb      	b.n	800abd4 <__swhatbuf_r+0x24>

0800abfc <__smakebuf_r>:
 800abfc:	898b      	ldrh	r3, [r1, #12]
 800abfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac00:	079d      	lsls	r5, r3, #30
 800ac02:	4606      	mov	r6, r0
 800ac04:	460c      	mov	r4, r1
 800ac06:	d507      	bpl.n	800ac18 <__smakebuf_r+0x1c>
 800ac08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	6123      	str	r3, [r4, #16]
 800ac10:	2301      	movs	r3, #1
 800ac12:	6163      	str	r3, [r4, #20]
 800ac14:	b002      	add	sp, #8
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	ab01      	add	r3, sp, #4
 800ac1a:	466a      	mov	r2, sp
 800ac1c:	f7ff ffc8 	bl	800abb0 <__swhatbuf_r>
 800ac20:	9900      	ldr	r1, [sp, #0]
 800ac22:	4605      	mov	r5, r0
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7fd fb81 	bl	800832c <_malloc_r>
 800ac2a:	b948      	cbnz	r0, 800ac40 <__smakebuf_r+0x44>
 800ac2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac30:	059a      	lsls	r2, r3, #22
 800ac32:	d4ef      	bmi.n	800ac14 <__smakebuf_r+0x18>
 800ac34:	f023 0303 	bic.w	r3, r3, #3
 800ac38:	f043 0302 	orr.w	r3, r3, #2
 800ac3c:	81a3      	strh	r3, [r4, #12]
 800ac3e:	e7e3      	b.n	800ac08 <__smakebuf_r+0xc>
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	6020      	str	r0, [r4, #0]
 800ac44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	9b00      	ldr	r3, [sp, #0]
 800ac4c:	6163      	str	r3, [r4, #20]
 800ac4e:	9b01      	ldr	r3, [sp, #4]
 800ac50:	6120      	str	r0, [r4, #16]
 800ac52:	b15b      	cbz	r3, 800ac6c <__smakebuf_r+0x70>
 800ac54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f000 f81d 	bl	800ac98 <_isatty_r>
 800ac5e:	b128      	cbz	r0, 800ac6c <__smakebuf_r+0x70>
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	f023 0303 	bic.w	r3, r3, #3
 800ac66:	f043 0301 	orr.w	r3, r3, #1
 800ac6a:	81a3      	strh	r3, [r4, #12]
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	431d      	orrs	r5, r3
 800ac70:	81a5      	strh	r5, [r4, #12]
 800ac72:	e7cf      	b.n	800ac14 <__smakebuf_r+0x18>

0800ac74 <_fstat_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	4d07      	ldr	r5, [pc, #28]	; (800ac94 <_fstat_r+0x20>)
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	4608      	mov	r0, r1
 800ac7e:	4611      	mov	r1, r2
 800ac80:	602b      	str	r3, [r5, #0]
 800ac82:	f7f7 ff48 	bl	8002b16 <_fstat>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	d102      	bne.n	800ac90 <_fstat_r+0x1c>
 800ac8a:	682b      	ldr	r3, [r5, #0]
 800ac8c:	b103      	cbz	r3, 800ac90 <_fstat_r+0x1c>
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	bd38      	pop	{r3, r4, r5, pc}
 800ac92:	bf00      	nop
 800ac94:	20000954 	.word	0x20000954

0800ac98 <_isatty_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4d06      	ldr	r5, [pc, #24]	; (800acb4 <_isatty_r+0x1c>)
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4608      	mov	r0, r1
 800aca2:	602b      	str	r3, [r5, #0]
 800aca4:	f7f7 ff47 	bl	8002b36 <_isatty>
 800aca8:	1c43      	adds	r3, r0, #1
 800acaa:	d102      	bne.n	800acb2 <_isatty_r+0x1a>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	b103      	cbz	r3, 800acb2 <_isatty_r+0x1a>
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	bd38      	pop	{r3, r4, r5, pc}
 800acb4:	20000954 	.word	0x20000954

0800acb8 <atan2>:
 800acb8:	f000 b802 	b.w	800acc0 <__ieee754_atan2>
 800acbc:	0000      	movs	r0, r0
	...

0800acc0 <__ieee754_atan2>:
 800acc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc4:	ec57 6b11 	vmov	r6, r7, d1
 800acc8:	4273      	negs	r3, r6
 800acca:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800ae48 <__ieee754_atan2+0x188>
 800acce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800acd2:	4333      	orrs	r3, r6
 800acd4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800acd8:	4543      	cmp	r3, r8
 800acda:	ec51 0b10 	vmov	r0, r1, d0
 800acde:	ee11 5a10 	vmov	r5, s2
 800ace2:	d80a      	bhi.n	800acfa <__ieee754_atan2+0x3a>
 800ace4:	4244      	negs	r4, r0
 800ace6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acea:	4304      	orrs	r4, r0
 800acec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800acf0:	4544      	cmp	r4, r8
 800acf2:	ee10 9a10 	vmov	r9, s0
 800acf6:	468e      	mov	lr, r1
 800acf8:	d907      	bls.n	800ad0a <__ieee754_atan2+0x4a>
 800acfa:	4632      	mov	r2, r6
 800acfc:	463b      	mov	r3, r7
 800acfe:	f7f5 fac5 	bl	800028c <__adddf3>
 800ad02:	ec41 0b10 	vmov	d0, r0, r1
 800ad06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad0a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ad0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ad12:	4334      	orrs	r4, r6
 800ad14:	d103      	bne.n	800ad1e <__ieee754_atan2+0x5e>
 800ad16:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad1a:	f000 b899 	b.w	800ae50 <atan>
 800ad1e:	17bc      	asrs	r4, r7, #30
 800ad20:	f004 0402 	and.w	r4, r4, #2
 800ad24:	ea53 0909 	orrs.w	r9, r3, r9
 800ad28:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ad2c:	d107      	bne.n	800ad3e <__ieee754_atan2+0x7e>
 800ad2e:	2c02      	cmp	r4, #2
 800ad30:	d05f      	beq.n	800adf2 <__ieee754_atan2+0x132>
 800ad32:	2c03      	cmp	r4, #3
 800ad34:	d1e5      	bne.n	800ad02 <__ieee754_atan2+0x42>
 800ad36:	a140      	add	r1, pc, #256	; (adr r1, 800ae38 <__ieee754_atan2+0x178>)
 800ad38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad3c:	e7e1      	b.n	800ad02 <__ieee754_atan2+0x42>
 800ad3e:	4315      	orrs	r5, r2
 800ad40:	d106      	bne.n	800ad50 <__ieee754_atan2+0x90>
 800ad42:	f1be 0f00 	cmp.w	lr, #0
 800ad46:	da5f      	bge.n	800ae08 <__ieee754_atan2+0x148>
 800ad48:	a13d      	add	r1, pc, #244	; (adr r1, 800ae40 <__ieee754_atan2+0x180>)
 800ad4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4e:	e7d8      	b.n	800ad02 <__ieee754_atan2+0x42>
 800ad50:	4542      	cmp	r2, r8
 800ad52:	d10f      	bne.n	800ad74 <__ieee754_atan2+0xb4>
 800ad54:	4293      	cmp	r3, r2
 800ad56:	f104 34ff 	add.w	r4, r4, #4294967295
 800ad5a:	d107      	bne.n	800ad6c <__ieee754_atan2+0xac>
 800ad5c:	2c02      	cmp	r4, #2
 800ad5e:	d84c      	bhi.n	800adfa <__ieee754_atan2+0x13a>
 800ad60:	4b33      	ldr	r3, [pc, #204]	; (800ae30 <__ieee754_atan2+0x170>)
 800ad62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad6a:	e7ca      	b.n	800ad02 <__ieee754_atan2+0x42>
 800ad6c:	2c02      	cmp	r4, #2
 800ad6e:	d848      	bhi.n	800ae02 <__ieee754_atan2+0x142>
 800ad70:	4b30      	ldr	r3, [pc, #192]	; (800ae34 <__ieee754_atan2+0x174>)
 800ad72:	e7f6      	b.n	800ad62 <__ieee754_atan2+0xa2>
 800ad74:	4543      	cmp	r3, r8
 800ad76:	d0e4      	beq.n	800ad42 <__ieee754_atan2+0x82>
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ad7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad82:	da1e      	bge.n	800adc2 <__ieee754_atan2+0x102>
 800ad84:	2f00      	cmp	r7, #0
 800ad86:	da01      	bge.n	800ad8c <__ieee754_atan2+0xcc>
 800ad88:	323c      	adds	r2, #60	; 0x3c
 800ad8a:	db1e      	blt.n	800adca <__ieee754_atan2+0x10a>
 800ad8c:	4632      	mov	r2, r6
 800ad8e:	463b      	mov	r3, r7
 800ad90:	f7f5 fd5c 	bl	800084c <__aeabi_ddiv>
 800ad94:	ec41 0b10 	vmov	d0, r0, r1
 800ad98:	f000 f9fa 	bl	800b190 <fabs>
 800ad9c:	f000 f858 	bl	800ae50 <atan>
 800ada0:	ec51 0b10 	vmov	r0, r1, d0
 800ada4:	2c01      	cmp	r4, #1
 800ada6:	d013      	beq.n	800add0 <__ieee754_atan2+0x110>
 800ada8:	2c02      	cmp	r4, #2
 800adaa:	d015      	beq.n	800add8 <__ieee754_atan2+0x118>
 800adac:	2c00      	cmp	r4, #0
 800adae:	d0a8      	beq.n	800ad02 <__ieee754_atan2+0x42>
 800adb0:	a317      	add	r3, pc, #92	; (adr r3, 800ae10 <__ieee754_atan2+0x150>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	f7f5 fa67 	bl	8000288 <__aeabi_dsub>
 800adba:	a317      	add	r3, pc, #92	; (adr r3, 800ae18 <__ieee754_atan2+0x158>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	e014      	b.n	800adec <__ieee754_atan2+0x12c>
 800adc2:	a117      	add	r1, pc, #92	; (adr r1, 800ae20 <__ieee754_atan2+0x160>)
 800adc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc8:	e7ec      	b.n	800ada4 <__ieee754_atan2+0xe4>
 800adca:	2000      	movs	r0, #0
 800adcc:	2100      	movs	r1, #0
 800adce:	e7e9      	b.n	800ada4 <__ieee754_atan2+0xe4>
 800add0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800add4:	4619      	mov	r1, r3
 800add6:	e794      	b.n	800ad02 <__ieee754_atan2+0x42>
 800add8:	a30d      	add	r3, pc, #52	; (adr r3, 800ae10 <__ieee754_atan2+0x150>)
 800adda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adde:	f7f5 fa53 	bl	8000288 <__aeabi_dsub>
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	a10c      	add	r1, pc, #48	; (adr r1, 800ae18 <__ieee754_atan2+0x158>)
 800ade8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adec:	f7f5 fa4c 	bl	8000288 <__aeabi_dsub>
 800adf0:	e787      	b.n	800ad02 <__ieee754_atan2+0x42>
 800adf2:	a109      	add	r1, pc, #36	; (adr r1, 800ae18 <__ieee754_atan2+0x158>)
 800adf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf8:	e783      	b.n	800ad02 <__ieee754_atan2+0x42>
 800adfa:	a10b      	add	r1, pc, #44	; (adr r1, 800ae28 <__ieee754_atan2+0x168>)
 800adfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae00:	e77f      	b.n	800ad02 <__ieee754_atan2+0x42>
 800ae02:	2000      	movs	r0, #0
 800ae04:	2100      	movs	r1, #0
 800ae06:	e77c      	b.n	800ad02 <__ieee754_atan2+0x42>
 800ae08:	a105      	add	r1, pc, #20	; (adr r1, 800ae20 <__ieee754_atan2+0x160>)
 800ae0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae0e:	e778      	b.n	800ad02 <__ieee754_atan2+0x42>
 800ae10:	33145c07 	.word	0x33145c07
 800ae14:	3ca1a626 	.word	0x3ca1a626
 800ae18:	54442d18 	.word	0x54442d18
 800ae1c:	400921fb 	.word	0x400921fb
 800ae20:	54442d18 	.word	0x54442d18
 800ae24:	3ff921fb 	.word	0x3ff921fb
 800ae28:	54442d18 	.word	0x54442d18
 800ae2c:	3fe921fb 	.word	0x3fe921fb
 800ae30:	0800c0a0 	.word	0x0800c0a0
 800ae34:	0800c0b8 	.word	0x0800c0b8
 800ae38:	54442d18 	.word	0x54442d18
 800ae3c:	c00921fb 	.word	0xc00921fb
 800ae40:	54442d18 	.word	0x54442d18
 800ae44:	bff921fb 	.word	0xbff921fb
 800ae48:	7ff00000 	.word	0x7ff00000
 800ae4c:	00000000 	.word	0x00000000

0800ae50 <atan>:
 800ae50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	ec55 4b10 	vmov	r4, r5, d0
 800ae58:	4bc3      	ldr	r3, [pc, #780]	; (800b168 <atan+0x318>)
 800ae5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ae5e:	429e      	cmp	r6, r3
 800ae60:	46ab      	mov	fp, r5
 800ae62:	dd18      	ble.n	800ae96 <atan+0x46>
 800ae64:	4bc1      	ldr	r3, [pc, #772]	; (800b16c <atan+0x31c>)
 800ae66:	429e      	cmp	r6, r3
 800ae68:	dc01      	bgt.n	800ae6e <atan+0x1e>
 800ae6a:	d109      	bne.n	800ae80 <atan+0x30>
 800ae6c:	b144      	cbz	r4, 800ae80 <atan+0x30>
 800ae6e:	4622      	mov	r2, r4
 800ae70:	462b      	mov	r3, r5
 800ae72:	4620      	mov	r0, r4
 800ae74:	4629      	mov	r1, r5
 800ae76:	f7f5 fa09 	bl	800028c <__adddf3>
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	460d      	mov	r5, r1
 800ae7e:	e006      	b.n	800ae8e <atan+0x3e>
 800ae80:	f1bb 0f00 	cmp.w	fp, #0
 800ae84:	f300 8131 	bgt.w	800b0ea <atan+0x29a>
 800ae88:	a59b      	add	r5, pc, #620	; (adr r5, 800b0f8 <atan+0x2a8>)
 800ae8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae8e:	ec45 4b10 	vmov	d0, r4, r5
 800ae92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae96:	4bb6      	ldr	r3, [pc, #728]	; (800b170 <atan+0x320>)
 800ae98:	429e      	cmp	r6, r3
 800ae9a:	dc14      	bgt.n	800aec6 <atan+0x76>
 800ae9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800aea0:	429e      	cmp	r6, r3
 800aea2:	dc0d      	bgt.n	800aec0 <atan+0x70>
 800aea4:	a396      	add	r3, pc, #600	; (adr r3, 800b100 <atan+0x2b0>)
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	ee10 0a10 	vmov	r0, s0
 800aeae:	4629      	mov	r1, r5
 800aeb0:	f7f5 f9ec 	bl	800028c <__adddf3>
 800aeb4:	4baf      	ldr	r3, [pc, #700]	; (800b174 <atan+0x324>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f7f5 fe2e 	bl	8000b18 <__aeabi_dcmpgt>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d1e6      	bne.n	800ae8e <atan+0x3e>
 800aec0:	f04f 3aff 	mov.w	sl, #4294967295
 800aec4:	e02b      	b.n	800af1e <atan+0xce>
 800aec6:	f000 f963 	bl	800b190 <fabs>
 800aeca:	4bab      	ldr	r3, [pc, #684]	; (800b178 <atan+0x328>)
 800aecc:	429e      	cmp	r6, r3
 800aece:	ec55 4b10 	vmov	r4, r5, d0
 800aed2:	f300 80bf 	bgt.w	800b054 <atan+0x204>
 800aed6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800aeda:	429e      	cmp	r6, r3
 800aedc:	f300 80a0 	bgt.w	800b020 <atan+0x1d0>
 800aee0:	ee10 2a10 	vmov	r2, s0
 800aee4:	ee10 0a10 	vmov	r0, s0
 800aee8:	462b      	mov	r3, r5
 800aeea:	4629      	mov	r1, r5
 800aeec:	f7f5 f9ce 	bl	800028c <__adddf3>
 800aef0:	4ba0      	ldr	r3, [pc, #640]	; (800b174 <atan+0x324>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	f7f5 f9c8 	bl	8000288 <__aeabi_dsub>
 800aef8:	2200      	movs	r2, #0
 800aefa:	4606      	mov	r6, r0
 800aefc:	460f      	mov	r7, r1
 800aefe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af02:	4620      	mov	r0, r4
 800af04:	4629      	mov	r1, r5
 800af06:	f7f5 f9c1 	bl	800028c <__adddf3>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	4630      	mov	r0, r6
 800af10:	4639      	mov	r1, r7
 800af12:	f7f5 fc9b 	bl	800084c <__aeabi_ddiv>
 800af16:	f04f 0a00 	mov.w	sl, #0
 800af1a:	4604      	mov	r4, r0
 800af1c:	460d      	mov	r5, r1
 800af1e:	4622      	mov	r2, r4
 800af20:	462b      	mov	r3, r5
 800af22:	4620      	mov	r0, r4
 800af24:	4629      	mov	r1, r5
 800af26:	f7f5 fb67 	bl	80005f8 <__aeabi_dmul>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
 800af2e:	4680      	mov	r8, r0
 800af30:	4689      	mov	r9, r1
 800af32:	f7f5 fb61 	bl	80005f8 <__aeabi_dmul>
 800af36:	a374      	add	r3, pc, #464	; (adr r3, 800b108 <atan+0x2b8>)
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	4606      	mov	r6, r0
 800af3e:	460f      	mov	r7, r1
 800af40:	f7f5 fb5a 	bl	80005f8 <__aeabi_dmul>
 800af44:	a372      	add	r3, pc, #456	; (adr r3, 800b110 <atan+0x2c0>)
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	f7f5 f99f 	bl	800028c <__adddf3>
 800af4e:	4632      	mov	r2, r6
 800af50:	463b      	mov	r3, r7
 800af52:	f7f5 fb51 	bl	80005f8 <__aeabi_dmul>
 800af56:	a370      	add	r3, pc, #448	; (adr r3, 800b118 <atan+0x2c8>)
 800af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5c:	f7f5 f996 	bl	800028c <__adddf3>
 800af60:	4632      	mov	r2, r6
 800af62:	463b      	mov	r3, r7
 800af64:	f7f5 fb48 	bl	80005f8 <__aeabi_dmul>
 800af68:	a36d      	add	r3, pc, #436	; (adr r3, 800b120 <atan+0x2d0>)
 800af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6e:	f7f5 f98d 	bl	800028c <__adddf3>
 800af72:	4632      	mov	r2, r6
 800af74:	463b      	mov	r3, r7
 800af76:	f7f5 fb3f 	bl	80005f8 <__aeabi_dmul>
 800af7a:	a36b      	add	r3, pc, #428	; (adr r3, 800b128 <atan+0x2d8>)
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f7f5 f984 	bl	800028c <__adddf3>
 800af84:	4632      	mov	r2, r6
 800af86:	463b      	mov	r3, r7
 800af88:	f7f5 fb36 	bl	80005f8 <__aeabi_dmul>
 800af8c:	a368      	add	r3, pc, #416	; (adr r3, 800b130 <atan+0x2e0>)
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	f7f5 f97b 	bl	800028c <__adddf3>
 800af96:	4642      	mov	r2, r8
 800af98:	464b      	mov	r3, r9
 800af9a:	f7f5 fb2d 	bl	80005f8 <__aeabi_dmul>
 800af9e:	a366      	add	r3, pc, #408	; (adr r3, 800b138 <atan+0x2e8>)
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	4680      	mov	r8, r0
 800afa6:	4689      	mov	r9, r1
 800afa8:	4630      	mov	r0, r6
 800afaa:	4639      	mov	r1, r7
 800afac:	f7f5 fb24 	bl	80005f8 <__aeabi_dmul>
 800afb0:	a363      	add	r3, pc, #396	; (adr r3, 800b140 <atan+0x2f0>)
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	f7f5 f967 	bl	8000288 <__aeabi_dsub>
 800afba:	4632      	mov	r2, r6
 800afbc:	463b      	mov	r3, r7
 800afbe:	f7f5 fb1b 	bl	80005f8 <__aeabi_dmul>
 800afc2:	a361      	add	r3, pc, #388	; (adr r3, 800b148 <atan+0x2f8>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	f7f5 f95e 	bl	8000288 <__aeabi_dsub>
 800afcc:	4632      	mov	r2, r6
 800afce:	463b      	mov	r3, r7
 800afd0:	f7f5 fb12 	bl	80005f8 <__aeabi_dmul>
 800afd4:	a35e      	add	r3, pc, #376	; (adr r3, 800b150 <atan+0x300>)
 800afd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afda:	f7f5 f955 	bl	8000288 <__aeabi_dsub>
 800afde:	4632      	mov	r2, r6
 800afe0:	463b      	mov	r3, r7
 800afe2:	f7f5 fb09 	bl	80005f8 <__aeabi_dmul>
 800afe6:	a35c      	add	r3, pc, #368	; (adr r3, 800b158 <atan+0x308>)
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	f7f5 f94c 	bl	8000288 <__aeabi_dsub>
 800aff0:	4632      	mov	r2, r6
 800aff2:	463b      	mov	r3, r7
 800aff4:	f7f5 fb00 	bl	80005f8 <__aeabi_dmul>
 800aff8:	4602      	mov	r2, r0
 800affa:	460b      	mov	r3, r1
 800affc:	4640      	mov	r0, r8
 800affe:	4649      	mov	r1, r9
 800b000:	f7f5 f944 	bl	800028c <__adddf3>
 800b004:	4622      	mov	r2, r4
 800b006:	462b      	mov	r3, r5
 800b008:	f7f5 faf6 	bl	80005f8 <__aeabi_dmul>
 800b00c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	d14b      	bne.n	800b0ae <atan+0x25e>
 800b016:	4620      	mov	r0, r4
 800b018:	4629      	mov	r1, r5
 800b01a:	f7f5 f935 	bl	8000288 <__aeabi_dsub>
 800b01e:	e72c      	b.n	800ae7a <atan+0x2a>
 800b020:	ee10 0a10 	vmov	r0, s0
 800b024:	4b53      	ldr	r3, [pc, #332]	; (800b174 <atan+0x324>)
 800b026:	2200      	movs	r2, #0
 800b028:	4629      	mov	r1, r5
 800b02a:	f7f5 f92d 	bl	8000288 <__aeabi_dsub>
 800b02e:	4b51      	ldr	r3, [pc, #324]	; (800b174 <atan+0x324>)
 800b030:	4606      	mov	r6, r0
 800b032:	460f      	mov	r7, r1
 800b034:	2200      	movs	r2, #0
 800b036:	4620      	mov	r0, r4
 800b038:	4629      	mov	r1, r5
 800b03a:	f7f5 f927 	bl	800028c <__adddf3>
 800b03e:	4602      	mov	r2, r0
 800b040:	460b      	mov	r3, r1
 800b042:	4630      	mov	r0, r6
 800b044:	4639      	mov	r1, r7
 800b046:	f7f5 fc01 	bl	800084c <__aeabi_ddiv>
 800b04a:	f04f 0a01 	mov.w	sl, #1
 800b04e:	4604      	mov	r4, r0
 800b050:	460d      	mov	r5, r1
 800b052:	e764      	b.n	800af1e <atan+0xce>
 800b054:	4b49      	ldr	r3, [pc, #292]	; (800b17c <atan+0x32c>)
 800b056:	429e      	cmp	r6, r3
 800b058:	da1d      	bge.n	800b096 <atan+0x246>
 800b05a:	ee10 0a10 	vmov	r0, s0
 800b05e:	4b48      	ldr	r3, [pc, #288]	; (800b180 <atan+0x330>)
 800b060:	2200      	movs	r2, #0
 800b062:	4629      	mov	r1, r5
 800b064:	f7f5 f910 	bl	8000288 <__aeabi_dsub>
 800b068:	4b45      	ldr	r3, [pc, #276]	; (800b180 <atan+0x330>)
 800b06a:	4606      	mov	r6, r0
 800b06c:	460f      	mov	r7, r1
 800b06e:	2200      	movs	r2, #0
 800b070:	4620      	mov	r0, r4
 800b072:	4629      	mov	r1, r5
 800b074:	f7f5 fac0 	bl	80005f8 <__aeabi_dmul>
 800b078:	4b3e      	ldr	r3, [pc, #248]	; (800b174 <atan+0x324>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	f7f5 f906 	bl	800028c <__adddf3>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	4630      	mov	r0, r6
 800b086:	4639      	mov	r1, r7
 800b088:	f7f5 fbe0 	bl	800084c <__aeabi_ddiv>
 800b08c:	f04f 0a02 	mov.w	sl, #2
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	e743      	b.n	800af1e <atan+0xce>
 800b096:	462b      	mov	r3, r5
 800b098:	ee10 2a10 	vmov	r2, s0
 800b09c:	4939      	ldr	r1, [pc, #228]	; (800b184 <atan+0x334>)
 800b09e:	2000      	movs	r0, #0
 800b0a0:	f7f5 fbd4 	bl	800084c <__aeabi_ddiv>
 800b0a4:	f04f 0a03 	mov.w	sl, #3
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	460d      	mov	r5, r1
 800b0ac:	e737      	b.n	800af1e <atan+0xce>
 800b0ae:	4b36      	ldr	r3, [pc, #216]	; (800b188 <atan+0x338>)
 800b0b0:	4e36      	ldr	r6, [pc, #216]	; (800b18c <atan+0x33c>)
 800b0b2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ba:	f7f5 f8e5 	bl	8000288 <__aeabi_dsub>
 800b0be:	4622      	mov	r2, r4
 800b0c0:	462b      	mov	r3, r5
 800b0c2:	f7f5 f8e1 	bl	8000288 <__aeabi_dsub>
 800b0c6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b0d2:	f7f5 f8d9 	bl	8000288 <__aeabi_dsub>
 800b0d6:	f1bb 0f00 	cmp.w	fp, #0
 800b0da:	4604      	mov	r4, r0
 800b0dc:	460d      	mov	r5, r1
 800b0de:	f6bf aed6 	bge.w	800ae8e <atan+0x3e>
 800b0e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0e6:	461d      	mov	r5, r3
 800b0e8:	e6d1      	b.n	800ae8e <atan+0x3e>
 800b0ea:	a51d      	add	r5, pc, #116	; (adr r5, 800b160 <atan+0x310>)
 800b0ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b0f0:	e6cd      	b.n	800ae8e <atan+0x3e>
 800b0f2:	bf00      	nop
 800b0f4:	f3af 8000 	nop.w
 800b0f8:	54442d18 	.word	0x54442d18
 800b0fc:	bff921fb 	.word	0xbff921fb
 800b100:	8800759c 	.word	0x8800759c
 800b104:	7e37e43c 	.word	0x7e37e43c
 800b108:	e322da11 	.word	0xe322da11
 800b10c:	3f90ad3a 	.word	0x3f90ad3a
 800b110:	24760deb 	.word	0x24760deb
 800b114:	3fa97b4b 	.word	0x3fa97b4b
 800b118:	a0d03d51 	.word	0xa0d03d51
 800b11c:	3fb10d66 	.word	0x3fb10d66
 800b120:	c54c206e 	.word	0xc54c206e
 800b124:	3fb745cd 	.word	0x3fb745cd
 800b128:	920083ff 	.word	0x920083ff
 800b12c:	3fc24924 	.word	0x3fc24924
 800b130:	5555550d 	.word	0x5555550d
 800b134:	3fd55555 	.word	0x3fd55555
 800b138:	2c6a6c2f 	.word	0x2c6a6c2f
 800b13c:	bfa2b444 	.word	0xbfa2b444
 800b140:	52defd9a 	.word	0x52defd9a
 800b144:	3fadde2d 	.word	0x3fadde2d
 800b148:	af749a6d 	.word	0xaf749a6d
 800b14c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b150:	fe231671 	.word	0xfe231671
 800b154:	3fbc71c6 	.word	0x3fbc71c6
 800b158:	9998ebc4 	.word	0x9998ebc4
 800b15c:	3fc99999 	.word	0x3fc99999
 800b160:	54442d18 	.word	0x54442d18
 800b164:	3ff921fb 	.word	0x3ff921fb
 800b168:	440fffff 	.word	0x440fffff
 800b16c:	7ff00000 	.word	0x7ff00000
 800b170:	3fdbffff 	.word	0x3fdbffff
 800b174:	3ff00000 	.word	0x3ff00000
 800b178:	3ff2ffff 	.word	0x3ff2ffff
 800b17c:	40038000 	.word	0x40038000
 800b180:	3ff80000 	.word	0x3ff80000
 800b184:	bff00000 	.word	0xbff00000
 800b188:	0800c0f0 	.word	0x0800c0f0
 800b18c:	0800c0d0 	.word	0x0800c0d0

0800b190 <fabs>:
 800b190:	ec51 0b10 	vmov	r0, r1, d0
 800b194:	ee10 2a10 	vmov	r2, s0
 800b198:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b19c:	ec43 2b10 	vmov	d0, r2, r3
 800b1a0:	4770      	bx	lr
	...

0800b1a4 <_init>:
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a6:	bf00      	nop
 800b1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1aa:	bc08      	pop	{r3}
 800b1ac:	469e      	mov	lr, r3
 800b1ae:	4770      	bx	lr

0800b1b0 <_fini>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	bf00      	nop
 800b1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b6:	bc08      	pop	{r3}
 800b1b8:	469e      	mov	lr, r3
 800b1ba:	4770      	bx	lr
