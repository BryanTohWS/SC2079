
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011290  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001158  08011420  08011420  00021420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012578  08012578  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012578  08012578  00022578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012580  08012580  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012580  08012580  00022580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012584  08012584  00022584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012588  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          0000095c  200001e8  200001e8  000301e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b44  20000b44  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 14 .debug_info   000183b7  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003cfa  00000000  00000000  00048612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015c8  00000000  00000000  0004c310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010ec  00000000  00000000  0004d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000267e9  00000000  00000000  0004e9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cd6d  00000000  00000000  000751ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dffe2  00000000  00000000  00091f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000074b4  00000000  00000000  00171efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001793b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011408 	.word	0x08011408

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08011408 	.word	0x08011408

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_ICM20948_SelectUserBank>:

#include "ICM20948.h"

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	b2db      	uxtb	r3, r3
 800100a:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <_ICM20948_SelectUserBank+0x26>
 8001012:	2368      	movs	r3, #104	; 0x68
 8001014:	e000      	b.n	8001018 <_ICM20948_SelectUserBank+0x28>
 8001016:	2369      	movs	r3, #105	; 0x69
 8001018:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800101a:	7dbb      	ldrb	r3, [r7, #22]
 800101c:	b29b      	uxth	r3, r3
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b299      	uxth	r1, r3
 8001022:	230a      	movs	r3, #10
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2301      	movs	r3, #1
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 0315 	add.w	r3, r7, #21
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	227f      	movs	r2, #127	; 0x7f
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f005 f8c5 	bl	80061c4 <HAL_I2C_Mem_Write>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4603      	mov	r3, r0
 8001058:	70fb      	strb	r3, [r7, #3]
 800105a:	460b      	mov	r3, r1
 800105c:	70bb      	strb	r3, [r7, #2]
 800105e:	4613      	mov	r3, r2
 8001060:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <_ICM20948_WriteByte+0x28>
 800106c:	2368      	movs	r3, #104	; 0x68
 800106e:	e000      	b.n	8001072 <_ICM20948_WriteByte+0x2a>
 8001070:	2369      	movs	r3, #105	; 0x69
 8001072:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	b29b      	uxth	r3, r3
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b299      	uxth	r1, r3
 800107c:	78bb      	ldrb	r3, [r7, #2]
 800107e:	b29a      	uxth	r2, r3
 8001080:	230a      	movs	r3, #10
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1c7b      	adds	r3, r7, #1
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f005 f898 	bl	80061c4 <HAL_I2C_Mem_Write>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b088      	sub	sp, #32
 80010a6:	af04      	add	r7, sp, #16
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	70fb      	strb	r3, [r7, #3]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70bb      	strb	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <_ICM20948_BrustRead+0x28>
 80010c6:	2368      	movs	r3, #104	; 0x68
 80010c8:	e000      	b.n	80010cc <_ICM20948_BrustRead+0x2a>
 80010ca:	2369      	movs	r3, #105	; 0x69
 80010cc:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b299      	uxth	r1, r3
 80010d6:	78bb      	ldrb	r3, [r7, #2]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	230a      	movs	r3, #10
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	883b      	ldrh	r3, [r7, #0]
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f005 f965 	bl	80063b8 <HAL_I2C_Mem_Read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	b29a      	uxth	r2, r3
 8001114:	230a      	movs	r3, #10
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	1cbb      	adds	r3, r7, #2
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2118      	movs	r1, #24
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f005 f84d 	bl	80061c4 <HAL_I2C_Mem_Write>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_AK09916_ReadByte>:

HAL_StatusTypeDef _AK09916_ReadByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t *readData) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af04      	add	r7, sp, #16
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	460b      	mov	r3, r1
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	b29a      	uxth	r2, r3
 800114e:	230a      	movs	r3, #10
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	2118      	movs	r1, #24
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f005 f92a 	bl	80063b8 <HAL_I2C_Mem_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001168:	7dfb      	ldrb	r3, [r7, #23]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_AK09916_BrustRead>:

HAL_StatusTypeDef _AK09916_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b08a      	sub	sp, #40	; 0x28
 8001176:	af04      	add	r7, sp, #16
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	72fb      	strb	r3, [r7, #11]
 8001180:	4613      	mov	r3, r2
 8001182:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	b29a      	uxth	r2, r3
 800118c:	230a      	movs	r3, #10
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	893b      	ldrh	r3, [r7, #8]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2118      	movs	r1, #24
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f005 f90b 	bl	80063b8 <HAL_I2C_Mem_Read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	70fb      	strb	r3, [r7, #3]
 80011c2:	460b      	mov	r3, r1
 80011c4:	70bb      	strb	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff0b 	bl	8000ff0 <_ICM20948_SelectUserBank>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 80011de:	78f9      	ldrb	r1, [r7, #3]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	2206      	movs	r2, #6
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff2f 	bl	8001048 <_ICM20948_WriteByte>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 80011ee:	20c8      	movs	r0, #200	; 0xc8
 80011f0:	f003 ff42 	bl	8005078 <HAL_Delay>

	status = _ICM20948_WriteByte(
 80011f4:	78f9      	ldrb	r1, [r7, #3]
 80011f6:	2301      	movs	r3, #1
 80011f8:	2206      	movs	r2, #6
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff24 	bl	8001048 <_ICM20948_WriteByte>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8001204:	78f9      	ldrb	r1, [r7, #3]
 8001206:	2300      	movs	r3, #0
 8001208:	2207      	movs	r2, #7
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff1c 	bl	8001048 <_ICM20948_WriteByte>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2202      	movs	r2, #2
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fee8 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8001230:	b2db      	uxtb	r3, r3
 8001232:	78f9      	ldrb	r1, [r7, #3]
 8001234:	2201      	movs	r2, #1
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff06 	bl	8001048 <_ICM20948_WriteByte>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8001240:	78f9      	ldrb	r1, [r7, #3]
 8001242:	2304      	movs	r3, #4
 8001244:	2200      	movs	r2, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fefe 	bl	8001048 <_ICM20948_WriteByte>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	b25b      	sxtb	r3, r3
 8001256:	f043 0309 	orr.w	r3, r3, #9
 800125a:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800125c:	b2db      	uxtb	r3, r3
 800125e:	78f9      	ldrb	r1, [r7, #3]
 8001260:	2214      	movs	r2, #20
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fef0 	bl	8001048 <_ICM20948_WriteByte>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 800126c:	78f9      	ldrb	r1, [r7, #3]
 800126e:	2304      	movs	r3, #4
 8001270:	2211      	movs	r2, #17
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fee8 	bl	8001048 <_ICM20948_WriteByte>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff feb4 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800128c:	78f9      	ldrb	r1, [r7, #3]
 800128e:	2302      	movs	r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fed8 	bl	8001048 <_ICM20948_WriteByte>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 800129c:	2208      	movs	r2, #8
 800129e:	2131      	movs	r1, #49	; 0x31
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff2b 	bl	80010fc <_AK09916_WriteByte>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	0000      	movs	r0, r0
 80012b4:	0000      	movs	r0, r0
	...

080012b8 <ICM20948_readGyroscope_Z>:

void ICM20948_readGyroscope_Z(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float *gyroZ) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	72fb      	strb	r3, [r7, #11]
 80012c6:	4613      	mov	r3, r2
 80012c8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[2];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_ZOUT_H__REGISTER, 2, readData);
 80012ca:	7af9      	ldrb	r1, [r7, #11]
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2302      	movs	r3, #2
 80012d4:	2237      	movs	r2, #55	; 0x37
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff fee3 	bl	80010a2 <_ICM20948_BrustRead>

	int16_t reading = readData[0]<<8 | readData[1];
 80012dc:	7d3b      	ldrb	r3, [r7, #20]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	7d7b      	ldrb	r3, [r7, #21]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	82fb      	strh	r3, [r7, #22]
	*gyroZ = (float) -reading;
 80012ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012ee:	425b      	negs	r3, r3
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edc3 7a00 	vstr	s15, [r3]
	switch (selectGyroSensitivity) {
 80012fe:	7abb      	ldrb	r3, [r7, #10]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d849      	bhi.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <ICM20948_readGyroscope_Z+0x54>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001333 	.word	0x08001333
 8001314:	08001349 	.word	0x08001349
 8001318:	08001371 	.word	0x08001371
		case GYRO_FULL_SCALE_250DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	eddf 6a23 	vldr	s13, [pc, #140]	; 80013b0 <ICM20948_readGyroscope_Z+0xf8>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001330:	e032      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_500DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80013b4 <ICM20948_readGyroscope_Z+0xfc>
 800133c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001346:	e027      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_1000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8fb 	bl	8000548 <__aeabi_f2d>
 8001352:	a313      	add	r3, pc, #76	; (adr r3, 80013a0 <ICM20948_readGyroscope_Z+0xe8>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff fa78 	bl	800084c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc40 	bl	8000be8 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	601a      	str	r2, [r3, #0]
			break;
 800136e:	e013      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_2000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	a30b      	add	r3, pc, #44	; (adr r3, 80013a8 <ICM20948_readGyroscope_Z+0xf0>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fa64 	bl	800084c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc2c 	bl	8000be8 <__aeabi_d2f>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
			break;
 8001396:	bf00      	nop
	}

}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	66666666 	.word	0x66666666
 80013a4:	40406666 	.word	0x40406666
 80013a8:	66666666 	.word	0x66666666
 80013ac:	40306666 	.word	0x40306666
 80013b0:	43030000 	.word	0x43030000
 80013b4:	42830000 	.word	0x42830000

080013b8 <ICM20948_readAccelerometer_all>:

void ICM20948_readAccelerometer_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, float readings[3]) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af02      	add	r7, sp, #8
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	72fb      	strb	r3, [r7, #11]
 80013c6:	4613      	mov	r3, r2
 80013c8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 80013ca:	7af9      	ldrb	r1, [r7, #11]
 80013cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2306      	movs	r3, #6
 80013d4:	222d      	movs	r2, #45	; 0x2d
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff fe63 	bl	80010a2 <_ICM20948_BrustRead>


	int16_t rD_int[3];
	rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 80013dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	843b      	strh	r3, [r7, #32]
	rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 80013f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21b      	sxth	r3, r3
 8001402:	847b      	strh	r3, [r7, #34]	; 0x22
	rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8001404:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21b      	sxth	r3, r3
 8001416:	84bb      	strh	r3, [r7, #36]	; 0x24

	float rD[3];
	rD[X] = (float) rD_int[X];
 8001418:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001424:	edc7 7a05 	vstr	s15, [r7, #20]
	rD[Y] = (float) rD_int[Y];
 8001428:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001434:	edc7 7a06 	vstr	s15, [r7, #24]
	rD[Z] = (float) rD_int[Z];
 8001438:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001444:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (selectAccelSensitivity) {
 8001448:	7abb      	ldrb	r3, [r7, #10]
 800144a:	2b03      	cmp	r3, #3
 800144c:	f200 8084 	bhi.w	8001558 <ICM20948_readAccelerometer_all+0x1a0>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <ICM20948_readAccelerometer_all+0xa0>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001469 	.word	0x08001469
 800145c:	080014a5 	.word	0x080014a5
 8001460:	080014e1 	.word	0x080014e1
 8001464:	0800151d 	.word	0x0800151d
		case ACCEL_FULL_SCALE_2G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8001468:	ed97 7a05 	vldr	s14, [r7, #20]
 800146c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 8001470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800147a:	ed97 7a06 	vldr	s14, [r7, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3304      	adds	r3, #4
 8001482:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 8001486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148a:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800148e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3308      	adds	r3, #8
 8001496:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001560 <ICM20948_readAccelerometer_all+0x1a8>
 800149a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149e:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014a2:	e059      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_4G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80014a8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3304      	adds	r3, #4
 80014be:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c6:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3308      	adds	r3, #8
 80014d2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001564 <ICM20948_readAccelerometer_all+0x1ac>
 80014d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014da:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014de:	e03b      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_8G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 80014e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 80014e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 80014f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3304      	adds	r3, #4
 80014fa:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 80014fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001502:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8001506:	ed97 7a07 	vldr	s14, [r7, #28]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3308      	adds	r3, #8
 800150e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001568 <ICM20948_readAccelerometer_all+0x1b0>
 8001512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001516:	edc3 7a00 	vstr	s15, [r3]
			break;
 800151a:	e01d      	b.n	8001558 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_16G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800151c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001520:	eddf 6a12 	vldr	s13, [pc, #72]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 8001524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800152e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 800153a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153e:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8001542:	ed97 7a07 	vldr	s14, [r7, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3308      	adds	r3, #8
 800154a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800156c <ICM20948_readAccelerometer_all+0x1b4>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001556:	bf00      	nop
	}
}
 8001558:	bf00      	nop
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	46800000 	.word	0x46800000
 8001564:	46000000 	.word	0x46000000
 8001568:	45800000 	.word	0x45800000
 800156c:	45000000 	.word	0x45000000

08001570 <ICM20948_readMagnetometer_XY>:

void ICM20948_readMagnetometer_XY(I2C_HandleTypeDef * hi2c, float magXY[2]) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	uint8_t readData[4];
	_AK09916_BrustRead(hi2c, AK09916__XOUT_L__REGISTER, 4, readData);
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2204      	movs	r2, #4
 8001580:	2111      	movs	r1, #17
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fdf5 	bl	8001172 <_AK09916_BrustRead>

	//read status register to mark end of data read.
	uint8_t st2;
	_AK09916_ReadByte(hi2c, AK09916__ST2__REGISTER, &st2);
 8001588:	f107 030f 	add.w	r3, r7, #15
 800158c:	461a      	mov	r2, r3
 800158e:	2118      	movs	r1, #24
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fdd1 	bl	8001138 <_AK09916_ReadByte>
	int16_t reading;
	for (uint8_t i = 0; i < 2; i++) {
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
 800159a:	e02a      	b.n	80015f2 <ICM20948_readMagnetometer_XY+0x82>
		reading = readData[1+2*i]<<8|readData[2*i];
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	3301      	adds	r3, #1
 80015a2:	3318      	adds	r3, #24
 80015a4:	443b      	add	r3, r7
 80015a6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	3318      	adds	r3, #24
 80015b4:	443b      	add	r3, r7
 80015b6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	82bb      	strh	r3, [r7, #20]
		magXY[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
 80015c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffad 	bl	8000524 <__aeabi_i2d>
 80015ca:	a30f      	add	r3, pc, #60	; (adr r3, 8001608 <ICM20948_readMagnetometer_XY+0x98>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f812 	bl	80005f8 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	18d4      	adds	r4, r2, r3
 80015e4:	f7ff fb00 	bl	8000be8 <__aeabi_d2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	6023      	str	r3, [r4, #0]
	for (uint8_t i = 0; i < 2; i++) {
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	3301      	adds	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d9d1      	bls.n	800159c <ICM20948_readMagnetometer_XY+0x2c>
	}
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	33333333 	.word	0x33333333
 800160c:	3fc33333 	.word	0x3fc33333

08001610 <angle_init>:
#include "angle.h"

static KalmanParams kParams;

void angle_init(float heading) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	ed87 0a01 	vstr	s0, [r7, #4]
	angle_reset(heading);
 800161a:	ed97 0a01 	vldr	s0, [r7, #4]
 800161e:	f000 f805 	bl	800162c <angle_reset>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <angle_reset>:

void angle_reset(float heading) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	ed87 0a01 	vstr	s0, [r7, #4]
	kalman_init(&kParams, heading, ANGLE_S_W, ANGLE_S_HEADING);
 8001636:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
 800163a:	eef2 0a0c 	vmov.f32	s1, #44	; 0x41600000  14.0
 800163e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001642:	4803      	ldr	r0, [pc, #12]	; (8001650 <angle_reset+0x24>)
 8001644:	f000 fdea 	bl	800221c <kalman_init>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000204 	.word	0x20000204

08001654 <angle_get>:
float angle_get(float msElapsed, float w, float heading) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	ed87 0a03 	vstr	s0, [r7, #12]
 800165e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001662:	ed87 1a01 	vstr	s2, [r7, #4]
	float angle_w = add_angle(kParams.last_est, w * msElapsed);
 8001666:	4b35      	ldr	r3, [pc, #212]	; (800173c <angle_get+0xe8>)
 8001668:	edd3 6a00 	vldr	s13, [r3]
 800166c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001670:	edd7 7a03 	vldr	s15, [r7, #12]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	eef0 0a67 	vmov.f32	s1, s15
 800167c:	eeb0 0a66 	vmov.f32	s0, s13
 8001680:	f000 fbfe 	bl	8001e80 <add_angle>
 8001684:	ed87 0a05 	vstr	s0, [r7, #20]

	kParams.s_est += msElapsed * msElapsed * ANGLE_S_W;
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <angle_get+0xe8>)
 800168a:	ed93 7a01 	vldr	s14, [r3, #4]
 800168e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001692:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001696:	eef2 6a0c 	vmov.f32	s13, #44	; 0x41600000  14.0
 800169a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <angle_get+0xe8>)
 80016a4:	edc3 7a01 	vstr	s15, [r3, #4]
	kalman_update(&kParams, angle_w, heading);
 80016a8:	edd7 0a01 	vldr	s1, [r7, #4]
 80016ac:	ed97 0a05 	vldr	s0, [r7, #20]
 80016b0:	4822      	ldr	r0, [pc, #136]	; (800173c <angle_get+0xe8>)
 80016b2:	f000 fdcc 	bl	800224e <kalman_update>

	if (angle_w < -90 && (heading - angle_w) > 180 || heading < -90 && (angle_w - heading) > 180) {
 80016b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ba:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001740 <angle_get+0xec>
 80016be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d50c      	bpl.n	80016e2 <angle_get+0x8e>
 80016c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80016cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001744 <angle_get+0xf0>
 80016d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	dc15      	bgt.n	800170e <angle_get+0xba>
 80016e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001740 <angle_get+0xec>
 80016ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	d51a      	bpl.n	800172a <angle_get+0xd6>
 80016f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80016f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001700:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001744 <angle_get+0xf0>
 8001704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	dd0d      	ble.n	800172a <angle_get+0xd6>
		//detect discontinuous wrapping; adjust accordingly.
		kParams.last_est = add_angle(kParams.last_est, 180);
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <angle_get+0xe8>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001744 <angle_get+0xf0>
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f000 fbb0 	bl	8001e80 <add_angle>
 8001720:	eef0 7a40 	vmov.f32	s15, s0
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <angle_get+0xe8>)
 8001726:	edc3 7a00 	vstr	s15, [r3]
	}
	return kParams.last_est;
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <angle_get+0xe8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	ee07 3a90 	vmov	s15, r3
}
 8001732:	eeb0 0a67 	vmov.f32	s0, s15
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000204 	.word	0x20000204
 8001740:	c2b40000 	.word	0xc2b40000
 8001744:	43340000 	.word	0x43340000

08001748 <get_new_cmd>:
#include "commands.h"

static Command *cur = NULL;

static Command *get_new_cmd() {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	Command *new = (Command *) malloc(sizeof(Command));
 800174e:	2018      	movs	r0, #24
 8001750:	f008 feae 	bl	800a4b0 <malloc>
 8001754:	4603      	mov	r3, r0
 8001756:	607b      	str	r3, [r7, #4]
	new->dir = 0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	715a      	strb	r2, [r3, #5]
	new->speed = 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	719a      	strb	r2, [r3, #6]
	new->steeringAngle = 0;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
	new->val = 0;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
	new->distType = TARGET;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	731a      	strb	r2, [r3, #12]
	new->next = NULL;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]

	return new;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <commands_ack>:

static void commands_ack(UART_HandleTypeDef *uart, Command *cmd, uint8_t indicator) {
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	4613      	mov	r3, r2
 8001796:	71fb      	strb	r3, [r7, #7]
	uint8_t buf_size = cmd->str_size + 1;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	791b      	ldrb	r3, [r3, #4]
 800179c:	3301      	adds	r3, #1
 800179e:	75fb      	strb	r3, [r7, #23]
	uint8_t *buf = (uint8_t *) malloc(buf_size * sizeof(uint8_t));
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f008 fe84 	bl	800a4b0 <malloc>
 80017a8:	4603      	mov	r3, r0
 80017aa:	613b      	str	r3, [r7, #16]
	*buf = indicator;
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	79fa      	ldrb	r2, [r7, #7]
 80017b0:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, cmd->str, buf_size - 1);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1c58      	adds	r0, r3, #1
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	3b01      	subs	r3, #1
 80017be:	461a      	mov	r2, r3
 80017c0:	f009 ff5d 	bl	800b67e <memcpy>

	HAL_UART_Transmit(uart, buf, buf_size, HAL_MAX_DELAY);
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	6939      	ldr	r1, [r7, #16]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f007 fe68 	bl	80094a4 <HAL_UART_Transmit>
	free(buf);
 80017d4:	6938      	ldr	r0, [r7, #16]
 80017d6:	f008 fe73 	bl	800a4c0 <free>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <commands_process>:

static uint8_t buf[3];
void commands_process(UART_HandleTypeDef *uart, uint8_t *buf, uint8_t size) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	4613      	mov	r3, r2
 80017f0:	71fb      	strb	r3, [r7, #7]
	Command *next = get_new_cmd();
 80017f2:	f7ff ffa9 	bl	8001748 <get_new_cmd>
 80017f6:	61b8      	str	r0, [r7, #24]

	uint8_t c = *buf, *temp = buf;
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	75fb      	strb	r3, [r7, #23]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	613b      	str	r3, [r7, #16]

	//first byte: command flag
	switch (c) {
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	3b53      	subs	r3, #83	; 0x53
 8001806:	2b24      	cmp	r3, #36	; 0x24
 8001808:	f200 80d1 	bhi.w	80019ae <commands_process+0x1ca>
 800180c:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <commands_process+0x30>)
 800180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001812:	bf00      	nop
 8001814:	080018a9 	.word	0x080018a9
 8001818:	080018b1 	.word	0x080018b1
 800181c:	080019af 	.word	0x080019af
 8001820:	080019af 	.word	0x080019af
 8001824:	080018bf 	.word	0x080018bf
 8001828:	080019af 	.word	0x080019af
 800182c:	080019af 	.word	0x080019af
 8001830:	080019af 	.word	0x080019af
 8001834:	080019af 	.word	0x080019af
 8001838:	080019af 	.word	0x080019af
 800183c:	080019af 	.word	0x080019af
 8001840:	080019af 	.word	0x080019af
 8001844:	080019af 	.word	0x080019af
 8001848:	080019af 	.word	0x080019af
 800184c:	080019af 	.word	0x080019af
 8001850:	080019af 	.word	0x080019af
 8001854:	080019af 	.word	0x080019af
 8001858:	080019af 	.word	0x080019af
 800185c:	080019af 	.word	0x080019af
 8001860:	080019af 	.word	0x080019af
 8001864:	080019af 	.word	0x080019af
 8001868:	080019af 	.word	0x080019af
 800186c:	080019af 	.word	0x080019af
 8001870:	080019af 	.word	0x080019af
 8001874:	080019af 	.word	0x080019af
 8001878:	080019af 	.word	0x080019af
 800187c:	080019af 	.word	0x080019af
 8001880:	080019af 	.word	0x080019af
 8001884:	080019af 	.word	0x080019af
 8001888:	080019af 	.word	0x080019af
 800188c:	080019af 	.word	0x080019af
 8001890:	080019af 	.word	0x080019af
 8001894:	080019af 	.word	0x080019af
 8001898:	080018cd 	.word	0x080018cd
 800189c:	080019af 	.word	0x080019af
 80018a0:	080019af 	.word	0x080019af
 80018a4:	080018db 	.word	0x080018db
		case CMD_FULL_STOP:
			next->dir = 0;
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2200      	movs	r2, #0
 80018ac:	715a      	strb	r2, [r3, #5]
			break;
 80018ae:	e01b      	b.n	80018e8 <commands_process+0x104>

		case CMD_FORWARD_DIST_TARGET:
			next->dir = 1;
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2201      	movs	r2, #1
 80018b4:	715a      	strb	r2, [r3, #5]
			next->distType = TARGET;
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2200      	movs	r2, #0
 80018ba:	731a      	strb	r2, [r3, #12]
			break;
 80018bc:	e014      	b.n	80018e8 <commands_process+0x104>

		case CMD_FORWARD_DIST_AWAY:
			next->dir = 1;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2201      	movs	r2, #1
 80018c2:	715a      	strb	r2, [r3, #5]
			next->distType = STOP_AWAY;
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2201      	movs	r2, #1
 80018c8:	731a      	strb	r2, [r3, #12]
			break;
 80018ca:	e00d      	b.n	80018e8 <commands_process+0x104>

		case CMD_BACKWARD_DIST_TARGET:
			next->dir = -1;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	22ff      	movs	r2, #255	; 0xff
 80018d0:	715a      	strb	r2, [r3, #5]
			next->distType = TARGET;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2200      	movs	r2, #0
 80018d6:	731a      	strb	r2, [r3, #12]
			break;
 80018d8:	e006      	b.n	80018e8 <commands_process+0x104>

		case CMD_BACKWARD_DIST_AWAY:
			next->dir = -1;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	22ff      	movs	r2, #255	; 0xff
 80018de:	715a      	strb	r2, [r3, #5]
			next->distType = STOP_AWAY;
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2201      	movs	r2, #1
 80018e4:	731a      	strb	r2, [r3, #12]
			break;
 80018e6:	bf00      	nop
		default:
			//invalid command, return.
			return;
	}

	if (c != CMD_FULL_STOP) {
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	2b53      	cmp	r3, #83	; 0x53
 80018ec:	d02b      	beq.n	8001946 <commands_process+0x162>
		temp++;
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	3301      	adds	r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
		next->speed = parse_uint16_t_until(&temp, CMD_SEP, 3);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	2203      	movs	r2, #3
 80018fa:	217c      	movs	r1, #124	; 0x7c
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f8c5 	bl	8001a8c <parse_uint16_t_until>
 8001902:	4603      	mov	r3, r0
 8001904:	b2da      	uxtb	r2, r3
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	719a      	strb	r2, [r3, #6]
		temp++;
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	3301      	adds	r3, #1
 800190e:	613b      	str	r3, [r7, #16]
		next->steeringAngle = parse_float_until(&temp, CMD_SEP, 6);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	2206      	movs	r2, #6
 8001916:	217c      	movs	r1, #124	; 0x7c
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f8f5 	bl	8001b08 <parse_float_until>
 800191e:	eef0 7a40 	vmov.f32	s15, s0
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	edc3 7a02 	vstr	s15, [r3, #8]
		temp++;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	3301      	adds	r3, #1
 800192c:	613b      	str	r3, [r7, #16]
		next->val = parse_float_until(&temp, CMD_END, 6);
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	2206      	movs	r2, #6
 8001934:	210a      	movs	r1, #10
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f8e6 	bl	8001b08 <parse_float_until>
 800193c:	eef0 7a40 	vmov.f32	s15, s0
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	//copy command.
	uint8_t str_size = temp - buf + 1;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3301      	adds	r3, #1
 8001950:	75bb      	strb	r3, [r7, #22]
	next->str_size = str_size;
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	7dba      	ldrb	r2, [r7, #22]
 8001956:	711a      	strb	r2, [r3, #4]
	next->str = (uint8_t *) malloc(str_size * sizeof(uint8_t));
 8001958:	7dbb      	ldrb	r3, [r7, #22]
 800195a:	4618      	mov	r0, r3
 800195c:	f008 fda8 	bl	800a4b0 <malloc>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	601a      	str	r2, [r3, #0]
	memcpy(next->str, buf, str_size);
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	7dba      	ldrb	r2, [r7, #22]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	4618      	mov	r0, r3
 8001972:	f009 fe84 	bl	800b67e <memcpy>


	if (cur == NULL) {
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <commands_process+0x1d4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d103      	bne.n	8001986 <commands_process+0x1a2>
		cur = next;
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <commands_process+0x1d4>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e00d      	b.n	80019a2 <commands_process+0x1be>
	} else {
		Command *temp = cur;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <commands_process+0x1d4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	61fb      	str	r3, [r7, #28]
		while (temp->next != NULL) {
 800198c:	e002      	b.n	8001994 <commands_process+0x1b0>
			temp = temp->next;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	61fb      	str	r3, [r7, #28]
		while (temp->next != NULL) {
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f8      	bne.n	800198e <commands_process+0x1aa>
		}
		temp->next = next;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	615a      	str	r2, [r3, #20]
	}

	//acknowledge command has been received and queued.
	commands_ack(uart, next, CMD_RCV);
 80019a2:	2272      	movs	r2, #114	; 0x72
 80019a4:	69b9      	ldr	r1, [r7, #24]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f7ff feef 	bl	800178a <commands_ack>
 80019ac:	e000      	b.n	80019b0 <commands_process+0x1cc>
			return;
 80019ae:	bf00      	nop
}
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000210 	.word	0x20000210

080019bc <commands_pop>:


Command *commands_pop() {
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
	Command *ret = cur;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <commands_pop+0x2c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	607b      	str	r3, [r7, #4]
	if (cur != NULL) cur = cur->next;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <commands_pop+0x2c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d004      	beq.n	80019da <commands_pop+0x1e>
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <commands_pop+0x2c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <commands_pop+0x2c>)
 80019d8:	6013      	str	r3, [r2, #0]
	return ret;
 80019da:	687b      	ldr	r3, [r7, #4]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000210 	.word	0x20000210

080019ec <commands_peek>:

Command *commands_peek() {
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
	return cur;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <commands_peek+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000210 	.word	0x20000210

08001a04 <commands_end>:

void commands_end(UART_HandleTypeDef *uart, Command *cmd) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
	commands_ack(uart, cmd, CMD_FIN);
 8001a0e:	2266      	movs	r2, #102	; 0x66
 8001a10:	6839      	ldr	r1, [r7, #0]
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff feb9 	bl	800178a <commands_ack>
	free(cmd->str);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f008 fd4f 	bl	800a4c0 <free>
	free(cmd);
 8001a22:	6838      	ldr	r0, [r7, #0]
 8001a24:	f008 fd4c 	bl	800a4c0 <free>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <abs_float>:
#include "convert.h"

float abs_float(float a) {
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	ed87 0a01 	vstr	s0, [r7, #4]
	return a < 0 ? -a : a;
 8001a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a46:	d504      	bpl.n	8001a52 <abs_float+0x22>
 8001a48:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a4c:	eef1 7a67 	vneg.f32	s15, s15
 8001a50:	e001      	b.n	8001a56 <abs_float+0x26>
 8001a52:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <min_uint8>:
}
float dist_squared(float x1, float x2, float y1, float y2) {
	return square_float(x1 - x2) + square_float(y1 - y2);
}

uint8_t min_uint8(uint8_t a, uint8_t b) {
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	4613      	mov	r3, r2
 8001a72:	71bb      	strb	r3, [r7, #6]
	return a < b ? a : b;
 8001a74:	79ba      	ldrb	r2, [r7, #6]
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	bf28      	it	cs
 8001a7c:	4613      	movcs	r3, r2
 8001a7e:	b2db      	uxtb	r3, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <parse_uint16_t_until>:

	return ret;
}

//get a uint16_t from a string until terminating character.
uint16_t parse_uint16_t_until(uint8_t **buf_ptr, uint8_t until, uint8_t sizeExpected) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, c = **buf_ptr;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	73bb      	strb	r3, [r7, #14]
	uint16_t res = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	81bb      	strh	r3, [r7, #12]

	while (i < sizeExpected && c != until) {
 8001aac:	e01d      	b.n	8001aea <parse_uint16_t_until+0x5e>
		if (c <= '9' && c >= '0') res = res * 10 + (c - '0');
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
 8001ab0:	2b39      	cmp	r3, #57	; 0x39
 8001ab2:	d80e      	bhi.n	8001ad2 <parse_uint16_t_until+0x46>
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	2b2f      	cmp	r3, #47	; 0x2f
 8001ab8:	d90b      	bls.n	8001ad2 <parse_uint16_t_until+0x46>
 8001aba:	89bb      	ldrh	r3, [r7, #12]
 8001abc:	461a      	mov	r2, r3
 8001abe:	0092      	lsls	r2, r2, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	7bbb      	ldrb	r3, [r7, #14]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b30      	subs	r3, #48	; 0x30
 8001ad0:	81bb      	strh	r3, [r7, #12]

		c = *(++(*buf_ptr)); i++;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	73bb      	strb	r3, [r7, #14]
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
	while (i < sizeExpected && c != until) {
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	78bb      	ldrb	r3, [r7, #2]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d203      	bcs.n	8001afa <parse_uint16_t_until+0x6e>
 8001af2:	7bba      	ldrb	r2, [r7, #14]
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d1d9      	bne.n	8001aae <parse_uint16_t_until+0x22>
	}

	return res;
 8001afa:	89bb      	ldrh	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <parse_float_until>:

//get a float from a string until terminating character.
float parse_float_until(uint8_t **buf_ptr, uint8_t until, uint8_t sizeExpected) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
 8001b14:	4613      	mov	r3, r2
 8001b16:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, c = **buf_ptr, isFrac = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	77fb      	strb	r3, [r7, #31]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	77bb      	strb	r3, [r7, #30]
 8001b24:	2300      	movs	r3, #0
 8001b26:	777b      	strb	r3, [r7, #29]
	int8_t sign = 1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	773b      	strb	r3, [r7, #28]
	uint32_t whole = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
	float frac = 0, div = 0.1;
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	4b3c      	ldr	r3, [pc, #240]	; (8001c28 <parse_float_until+0x120>)
 8001b38:	613b      	str	r3, [r7, #16]

	while (i < sizeExpected && c != until) {
 8001b3a:	e051      	b.n	8001be0 <parse_float_until+0xd8>
		if (i == 0 && c == '-') sign *= -1;
 8001b3c:	7ffb      	ldrb	r3, [r7, #31]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <parse_float_until+0x4a>
 8001b42:	7fbb      	ldrb	r3, [r7, #30]
 8001b44:	2b2d      	cmp	r3, #45	; 0x2d
 8001b46:	d104      	bne.n	8001b52 <parse_float_until+0x4a>
 8001b48:	7f3b      	ldrb	r3, [r7, #28]
 8001b4a:	425b      	negs	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	773b      	strb	r3, [r7, #28]
 8001b50:	e03a      	b.n	8001bc8 <parse_float_until+0xc0>
		else if (c == '.') isFrac = 1;
 8001b52:	7fbb      	ldrb	r3, [r7, #30]
 8001b54:	2b2e      	cmp	r3, #46	; 0x2e
 8001b56:	d102      	bne.n	8001b5e <parse_float_until+0x56>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	777b      	strb	r3, [r7, #29]
 8001b5c:	e034      	b.n	8001bc8 <parse_float_until+0xc0>
		else if (c <= '9' && c >= '0') {
 8001b5e:	7fbb      	ldrb	r3, [r7, #30]
 8001b60:	2b39      	cmp	r3, #57	; 0x39
 8001b62:	d831      	bhi.n	8001bc8 <parse_float_until+0xc0>
 8001b64:	7fbb      	ldrb	r3, [r7, #30]
 8001b66:	2b2f      	cmp	r3, #47	; 0x2f
 8001b68:	d92e      	bls.n	8001bc8 <parse_float_until+0xc0>
			uint8_t d = c - '0';
 8001b6a:	7fbb      	ldrb	r3, [r7, #30]
 8001b6c:	3b30      	subs	r3, #48	; 0x30
 8001b6e:	73fb      	strb	r3, [r7, #15]
			if (isFrac) {
 8001b70:	7f7b      	ldrb	r3, [r7, #29]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01f      	beq.n	8001bb6 <parse_float_until+0xae>
				frac += div * d;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	ee07 3a90 	vmov	s15, r3
 8001b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b88:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b90:	edc7 7a05 	vstr	s15, [r7, #20]
				div *= 0.1;
 8001b94:	6938      	ldr	r0, [r7, #16]
 8001b96:	f7fe fcd7 	bl	8000548 <__aeabi_f2d>
 8001b9a:	a321      	add	r3, pc, #132	; (adr r3, 8001c20 <parse_float_until+0x118>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fd2a 	bl	80005f8 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7ff f81c 	bl	8000be8 <__aeabi_d2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	e008      	b.n	8001bc8 <parse_float_until+0xc0>
			}
			else whole = whole * 10 + d;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
		}

		c = *(++(*buf_ptr)); i++;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	77bb      	strb	r3, [r7, #30]
 8001bda:	7ffb      	ldrb	r3, [r7, #31]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	77fb      	strb	r3, [r7, #31]
	while (i < sizeExpected && c != until) {
 8001be0:	7ffa      	ldrb	r2, [r7, #31]
 8001be2:	78bb      	ldrb	r3, [r7, #2]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d203      	bcs.n	8001bf0 <parse_float_until+0xe8>
 8001be8:	7fba      	ldrb	r2, [r7, #30]
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1a5      	bne.n	8001b3c <parse_float_until+0x34>
	}

	return (whole + frac) * sign;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c02:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001c12:	eeb0 0a67 	vmov.f32	s0, s15
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	f3af 8000 	nop.w
 8001c20:	9999999a 	.word	0x9999999a
 8001c24:	3fb99999 	.word	0x3fb99999
 8001c28:	3dcccccd 	.word	0x3dcccccd
 8001c2c:	00000000 	.word	0x00000000

08001c30 <get_turning_r_steer_cm>:


static float get_turning_r_steer_cm(float steeringAngle) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	ed87 0a01 	vstr	s0, [r7, #4]
	return CHASSIS_CM / sin(steeringAngle * M_PI / 180);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7fe fc84 	bl	8000548 <__aeabi_f2d>
 8001c40:	a319      	add	r3, pc, #100	; (adr r3, 8001ca8 <get_turning_r_steer_cm+0x78>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fcd7 	bl	80005f8 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <get_turning_r_steer_cm+0x70>)
 8001c58:	f7fe fdf8 	bl	800084c <__aeabi_ddiv>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	ec43 2b17 	vmov	d7, r2, r3
 8001c64:	eeb0 0a47 	vmov.f32	s0, s14
 8001c68:	eef0 0a67 	vmov.f32	s1, s15
 8001c6c:	f00d f89c 	bl	800eda8 <sin>
 8001c70:	ec53 2b10 	vmov	r2, r3, d0
 8001c74:	f04f 0000 	mov.w	r0, #0
 8001c78:	490a      	ldr	r1, [pc, #40]	; (8001ca4 <get_turning_r_steer_cm+0x74>)
 8001c7a:	f7fe fde7 	bl	800084c <__aeabi_ddiv>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7fe ffaf 	bl	8000be8 <__aeabi_d2f>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	ee07 3a90 	vmov	s15, r3
}
 8001c90:	eeb0 0a67 	vmov.f32	s0, s15
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	40668000 	.word	0x40668000
 8001ca4:	402d0000 	.word	0x402d0000
 8001ca8:	54442d18 	.word	0x54442d18
 8001cac:	400921fb 	.word	0x400921fb

08001cb0 <get_turning_r_back_cm>:
float get_turning_r_back_cm(float steeringAngle) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	ed87 0a01 	vstr	s0, [r7, #4]
	return CHASSIS_CM / tan(steeringAngle * M_PI / 180);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fc44 	bl	8000548 <__aeabi_f2d>
 8001cc0:	a319      	add	r3, pc, #100	; (adr r3, 8001d28 <get_turning_r_back_cm+0x78>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fc97 	bl	80005f8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <get_turning_r_back_cm+0x70>)
 8001cd8:	f7fe fdb8 	bl	800084c <__aeabi_ddiv>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	ec43 2b17 	vmov	d7, r2, r3
 8001ce4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce8:	eef0 0a67 	vmov.f32	s1, s15
 8001cec:	f00d f8b4 	bl	800ee58 <tan>
 8001cf0:	ec53 2b10 	vmov	r2, r3, d0
 8001cf4:	f04f 0000 	mov.w	r0, #0
 8001cf8:	490a      	ldr	r1, [pc, #40]	; (8001d24 <get_turning_r_back_cm+0x74>)
 8001cfa:	f7fe fda7 	bl	800084c <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ff6f 	bl	8000be8 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	ee07 3a90 	vmov	s15, r3
}
 8001d10:	eeb0 0a67 	vmov.f32	s0, s15
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	f3af 8000 	nop.w
 8001d20:	40668000 	.word	0x40668000
 8001d24:	402d0000 	.word	0x402d0000
 8001d28:	54442d18 	.word	0x54442d18
 8001d2c:	400921fb 	.word	0x400921fb

08001d30 <get_turning_r_robot_cm>:
float get_turning_r_robot_cm(float steeringAngle) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	ed87 0a01 	vstr	s0, [r7, #4]
	float r_steer = get_turning_r_steer_cm(steeringAngle);
 8001d3a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d3e:	f7ff ff77 	bl	8001c30 <get_turning_r_steer_cm>
 8001d42:	ed87 0a04 	vstr	s0, [r7, #16]
	float L2 = CHASSIS_CM / 2;
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <get_turning_r_robot_cm+0x7c>)
 8001d48:	60fb      	str	r3, [r7, #12]
	float r = sqrt(r_steer * r_steer + L2 * L2);
 8001d4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5e:	ee17 0a90 	vmov	r0, s15
 8001d62:	f7fe fbf1 	bl	8000548 <__aeabi_f2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	ec43 2b10 	vmov	d0, r2, r3
 8001d6e:	f00c ffed 	bl	800ed4c <sqrt>
 8001d72:	ec53 2b10 	vmov	r2, r3, d0
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe ff35 	bl	8000be8 <__aeabi_d2f>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	617b      	str	r3, [r7, #20]
	if (steeringAngle < 0) r = -r;
 8001d82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	d505      	bpl.n	8001d9c <get_turning_r_robot_cm+0x6c>
 8001d90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d94:	eef1 7a67 	vneg.f32	s15, s15
 8001d98:	edc7 7a05 	vstr	s15, [r7, #20]
	return r;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	ee07 3a90 	vmov	s15, r3
}
 8001da2:	eeb0 0a67 	vmov.f32	s0, s15
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40e80000 	.word	0x40e80000

08001db0 <get_w_ms>:

//angular velocity (with actual translational speed).
float get_w_ms(float speed_cm_ms, float turning_r_robot_cm) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001dba:	edc7 0a00 	vstr	s1, [r7]
	return speed_cm_ms / turning_r_robot_cm *  180 / M_PI;
 8001dbe:	edd7 6a01 	vldr	s13, [r7, #4]
 8001dc2:	ed97 7a00 	vldr	s14, [r7]
 8001dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001e08 <get_w_ms+0x58>
 8001dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd2:	ee17 0a90 	vmov	r0, s15
 8001dd6:	f7fe fbb7 	bl	8000548 <__aeabi_f2d>
 8001dda:	a309      	add	r3, pc, #36	; (adr r3, 8001e00 <get_w_ms+0x50>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fd34 	bl	800084c <__aeabi_ddiv>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fefc 	bl	8000be8 <__aeabi_d2f>
 8001df0:	4603      	mov	r3, r0
 8001df2:	ee07 3a90 	vmov	s15, r3
}
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	54442d18 	.word	0x54442d18
 8001e04:	400921fb 	.word	0x400921fb
 8001e08:	43340000 	.word	0x43340000

08001e0c <mod_360>:

static float mod_360(float angle) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	ed87 0a01 	vstr	s0, [r7, #4]
	while (angle < -180) angle += 360;
 8001e16:	e007      	b.n	8001e28 <mod_360+0x1c>
 8001e18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001e74 <mod_360+0x68>
 8001e20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e24:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e2c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001e78 <mod_360+0x6c>
 8001e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	d4ee      	bmi.n	8001e18 <mod_360+0xc>
	while (angle > 180) angle -= 360;
 8001e3a:	e007      	b.n	8001e4c <mod_360+0x40>
 8001e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e40:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001e74 <mod_360+0x68>
 8001e44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e48:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e50:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001e7c <mod_360+0x70>
 8001e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	dcee      	bgt.n	8001e3c <mod_360+0x30>
	return angle;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	ee07 3a90 	vmov	s15, r3
}
 8001e64:	eeb0 0a67 	vmov.f32	s0, s15
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	43b40000 	.word	0x43b40000
 8001e78:	c3340000 	.word	0xc3340000
 8001e7c:	43340000 	.word	0x43340000

08001e80 <add_angle>:

float add_angle(float old, float change) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e8a:	edc7 0a00 	vstr	s1, [r7]
	return mod_360(old + change);
 8001e8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e92:	edd7 7a00 	vldr	s15, [r7]
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9e:	f7ff ffb5 	bl	8001e0c <mod_360>
 8001ea2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <angle_diff_180>:

float angle_diff_180(float a1, float a2) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001eba:	edc7 0a00 	vstr	s1, [r7]
	return mod_360(a1 - a2);
 8001ebe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ec2:	edd7 7a00 	vldr	s15, [r7]
 8001ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	f7ff ff9d 	bl	8001e0c <mod_360>
 8001ed2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <get_distance_cm>:
	else if (diff > 0 && dir < 0) diff -= 360;

	return diff;
}

float get_distance_cm(uint16_t pulses) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	80fb      	strh	r3, [r7, #6]
	return ((float) pulses) / MOTOR_PPR * 2 * M_PI * WHEEL_R_CM;
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	ee07 3a90 	vmov	s15, r3
 8001ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ef4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001f48 <get_distance_cm+0x68>
 8001ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001efc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f00:	ee17 0a90 	vmov	r0, s15
 8001f04:	f7fe fb20 	bl	8000548 <__aeabi_f2d>
 8001f08:	a30d      	add	r3, pc, #52	; (adr r3, 8001f40 <get_distance_cm+0x60>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb73 	bl	80005f8 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <get_distance_cm+0x6c>)
 8001f20:	f7fe fb6a 	bl	80005f8 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe5c 	bl	8000be8 <__aeabi_d2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	ee07 3a90 	vmov	s15, r3
}
 8001f36:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	54442d18 	.word	0x54442d18
 8001f44:	400921fb 	.word	0x400921fb
 8001f48:	44bfe000 	.word	0x44bfe000
 8001f4c:	400a0000 	.word	0x400a0000

08001f50 <get_arc_length>:

float get_arc_length(float angle, float r) {
 8001f50:	b5b0      	push	{r4, r5, r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f5a:	edc7 0a00 	vstr	s1, [r7]
	return 2 * M_PI * r * angle / 360;
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f7fe faf2 	bl	8000548 <__aeabi_f2d>
 8001f64:	a315      	add	r3, pc, #84	; (adr r3, 8001fbc <get_arc_length+0x6c>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe fb45 	bl	80005f8 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4614      	mov	r4, r2
 8001f74:	461d      	mov	r5, r3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fae6 	bl	8000548 <__aeabi_f2d>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe fb38 	bl	80005f8 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <get_arc_length+0x68>)
 8001f96:	f7fe fc59 	bl	800084c <__aeabi_ddiv>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f7fe fe21 	bl	8000be8 <__aeabi_d2f>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	ee07 3a90 	vmov	s15, r3
}
 8001fac:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40768000 	.word	0x40768000
 8001fbc:	54442d18 	.word	0x54442d18
 8001fc0:	401921fb 	.word	0x401921fb

08001fc4 <delay_us_init>:
#include "delay_us.h"

static TIM_HandleTypeDef *htim;

void delay_us_init(TIM_HandleTypeDef *tim_ptr) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	htim = tim_ptr;
 8001fcc:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <delay_us_init+0x20>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim);
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <delay_us_init+0x20>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 fca4 	bl	8007924 <HAL_TIM_Base_Start>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000214 	.word	0x20000214

08001fe8 <delay_us_wait>:

void delay_us_wait(uint16_t us) {
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <delay_us_wait+0x34>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(htim) < us);
 8001ffc:	bf00      	nop
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <delay_us_wait+0x34>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	429a      	cmp	r2, r3
 800200a:	d3f8      	bcc.n	8001ffe <delay_us_wait+0x16>
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000214 	.word	0x20000214

08002020 <dist_init>:
#include "dist.h"

static KalmanParams kParams;
static DistState state;

void dist_init() {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	dist_reset(0);
 8002024:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8002030 <dist_init+0x10>
 8002028:	f000 f804 	bl	8002034 <dist_reset>
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	00000000 	.word	0x00000000

08002034 <dist_reset>:

void dist_reset(float v) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	ed87 0a01 	vstr	s0, [r7, #4]
	kalman_init(&kParams, 0, DIST_S_ACCEL, DIST_S_MOTOR);
 800203e:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 8002042:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002070 <dist_reset+0x3c>
 8002046:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002074 <dist_reset+0x40>
 800204a:	480b      	ldr	r0, [pc, #44]	; (8002078 <dist_reset+0x44>)
 800204c:	f000 f8e6 	bl	800221c <kalman_init>
	state.dist = 0;
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <dist_reset+0x48>)
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
	state.v = v;
 8002058:	4a08      	ldr	r2, [pc, #32]	; (800207c <dist_reset+0x48>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6053      	str	r3, [r2, #4]
	state.s_v = 0;
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <dist_reset+0x48>)
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	3724873e 	.word	0x3724873e
 8002074:	00000000 	.word	0x00000000
 8002078:	20000218 	.word	0x20000218
 800207c:	20000224 	.word	0x20000224

08002080 <update_state>:

static void update_state(float msElapsed, float accel) {
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	ed87 0a01 	vstr	s0, [r7, #4]
 800208a:	edc7 0a00 	vstr	s1, [r7]
	state.dist += state.v * msElapsed;
 800208e:	4b22      	ldr	r3, [pc, #136]	; (8002118 <update_state+0x98>)
 8002090:	ed93 7a00 	vldr	s14, [r3]
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <update_state+0x98>)
 8002096:	edd3 6a01 	vldr	s13, [r3, #4]
 800209a:	edd7 7a01 	vldr	s15, [r7, #4]
 800209e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <update_state+0x98>)
 80020a8:	edc3 7a00 	vstr	s15, [r3]
	state.v += accel * msElapsed;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <update_state+0x98>)
 80020ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80020b2:	edd7 6a00 	vldr	s13, [r7]
 80020b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <update_state+0x98>)
 80020c4:	edc3 7a01 	vstr	s15, [r3, #4]

	//update uncertainties.
	kParams.s_est += msElapsed * msElapsed * state.s_v;
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <update_state+0x9c>)
 80020ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80020ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <update_state+0x98>)
 80020d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80020dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <update_state+0x9c>)
 80020e6:	edc3 7a01 	vstr	s15, [r3, #4]
	state.s_v += msElapsed * msElapsed * DIST_S_ACCEL;
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <update_state+0x98>)
 80020ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80020f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020f8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002120 <update_state+0xa0>
 80020fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <update_state+0x98>)
 8002106:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000224 	.word	0x20000224
 800211c:	20000218 	.word	0x20000218
 8002120:	3724873e 	.word	0x3724873e

08002124 <dist_get_cm>:

float dist_get_cm(float msElapsed, float accel, float motorDist) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	ed87 0a03 	vstr	s0, [r7, #12]
 800212e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002132:	ed87 1a01 	vstr	s2, [r7, #4]
	//get raw estimate, and update uncertainty.
	update_state(msElapsed, accel);
 8002136:	edd7 0a02 	vldr	s1, [r7, #8]
 800213a:	ed97 0a03 	vldr	s0, [r7, #12]
 800213e:	f7ff ff9f 	bl	8002080 <update_state>

	//get improved estimate.
	kalman_update(&kParams, state.dist, motorDist);
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <dist_get_cm+0x4c>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	edd7 0a01 	vldr	s1, [r7, #4]
 800214c:	eeb0 0a67 	vmov.f32	s0, s15
 8002150:	4808      	ldr	r0, [pc, #32]	; (8002174 <dist_get_cm+0x50>)
 8002152:	f000 f87c 	bl	800224e <kalman_update>
	state.dist = kParams.last_est;
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <dist_get_cm+0x50>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <dist_get_cm+0x4c>)
 800215c:	6013      	str	r3, [r2, #0]

	return state.dist;
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <dist_get_cm+0x4c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	ee07 3a90 	vmov	s15, r3
}
 8002166:	eeb0 0a67 	vmov.f32	s0, s15
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000224 	.word	0x20000224
 8002174:	20000218 	.word	0x20000218

08002178 <dist_get_front>:

float dist_get_front(float usDist, float irDist) {
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002182:	edc7 0a00 	vstr	s1, [r7]
	float dist = usDist;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60fb      	str	r3, [r7, #12]
	if (usDist > DIST_IR_MIN && usDist < DIST_IR_MAX) {
 800218a:	edd7 7a01 	vldr	s15, [r7, #4]
 800218e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	dd2a      	ble.n	80021f2 <dist_get_front+0x7a>
 800219c:	edd7 7a01 	vldr	s15, [r7, #4]
 80021a0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002218 <dist_get_front+0xa0>
 80021a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	d521      	bpl.n	80021f2 <dist_get_front+0x7a>
		//use IR for averaging.
		dist = 0.8 * usDist + 0.2 * irDist;
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe f9ca 	bl	8000548 <__aeabi_f2d>
 80021b4:	a314      	add	r3, pc, #80	; (adr r3, 8002208 <dist_get_front+0x90>)
 80021b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ba:	f7fe fa1d 	bl	80005f8 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4614      	mov	r4, r2
 80021c4:	461d      	mov	r5, r3
 80021c6:	6838      	ldr	r0, [r7, #0]
 80021c8:	f7fe f9be 	bl	8000548 <__aeabi_f2d>
 80021cc:	a310      	add	r3, pc, #64	; (adr r3, 8002210 <dist_get_front+0x98>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	f7fe fa11 	bl	80005f8 <__aeabi_dmul>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	f7fe f855 	bl	800028c <__adddf3>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7fe fcfd 	bl	8000be8 <__aeabi_d2f>
 80021ee:	4603      	mov	r3, r0
 80021f0:	60fb      	str	r3, [r7, #12]
	}

	return dist;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	ee07 3a90 	vmov	s15, r3
}
 80021f8:	eeb0 0a67 	vmov.f32	s0, s15
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
 8002202:	bf00      	nop
 8002204:	f3af 8000 	nop.w
 8002208:	9999999a 	.word	0x9999999a
 800220c:	3fe99999 	.word	0x3fe99999
 8002210:	9999999a 	.word	0x9999999a
 8002214:	3fc99999 	.word	0x3fc99999
 8002218:	428c0000 	.word	0x428c0000

0800221c <kalman_init>:
#include "kalman.h"

void kalman_init(KalmanParams *params, float initial_est, float s_est, float s_mea){
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	ed87 0a02 	vstr	s0, [r7, #8]
 8002228:	edc7 0a01 	vstr	s1, [r7, #4]
 800222c:	ed87 1a00 	vstr	s2, [r7]
	params->last_est = initial_est;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	601a      	str	r2, [r3, #0]
	params->s_est = s_est;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	605a      	str	r2, [r3, #4]
	params->s_mea = s_mea;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	609a      	str	r2, [r3, #8]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <kalman_update>:

void kalman_update(KalmanParams *params, float est, float mea){
 800224e:	b480      	push	{r7}
 8002250:	b087      	sub	sp, #28
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	ed87 0a02 	vstr	s0, [r7, #8]
 800225a:	edc7 0a01 	vstr	s1, [r7, #4]
	//calculate Kalman gain.
	float G = (params->s_est) / (params->s_est + params->s_mea);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	edd3 6a01 	vldr	s13, [r3, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	ed93 7a01 	vldr	s14, [r3, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002278:	edc7 7a05 	vstr	s15, [r7, #20]

	//update estimate.
	params->last_est += G * (mea - est);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	edd7 6a01 	vldr	s13, [r7, #4]
 8002286:	edd7 7a02 	vldr	s15, [r7, #8]
 800228a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800228e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	edc3 7a00 	vstr	s15, [r3]
}
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <magcal_preload>:
#include "mag_cal.h"

static I2C_HandleTypeDef *hi2c;
static MagCalParams *params;

static void magcal_preload(MagCalParams *params_ptr) {
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	params_ptr->offset_HI[0] = 12.3750;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <magcal_preload+0x38>)
 80022b8:	601a      	str	r2, [r3, #0]
	params_ptr->offset_HI[1] = -56.4750;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <magcal_preload+0x3c>)
 80022be:	605a      	str	r2, [r3, #4]

	params_ptr->matrix_SI[0][0] = 0.8898;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <magcal_preload+0x40>)
 80022c4:	609a      	str	r2, [r3, #8]
	params_ptr->matrix_SI[0][1] = -0.5961;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <magcal_preload+0x44>)
 80022ca:	60da      	str	r2, [r3, #12]
	params_ptr->matrix_SI[1][0] = 0.8007;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <magcal_preload+0x48>)
 80022d0:	611a      	str	r2, [r3, #16]
	params_ptr->matrix_SI[1][1] = 1.1952;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <magcal_preload+0x4c>)
 80022d6:	615a      	str	r2, [r3, #20]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	41460000 	.word	0x41460000
 80022e8:	c261e666 	.word	0xc261e666
 80022ec:	3f63c9ef 	.word	0x3f63c9ef
 80022f0:	bf189a02 	.word	0xbf189a02
 80022f4:	3f4cfaad 	.word	0x3f4cfaad
 80022f8:	3f98fc50 	.word	0x3f98fc50

080022fc <magcal_init>:

void magcal_init(I2C_HandleTypeDef *hi2c_ptr, MagCalParams *params_ptr) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
	hi2c = hi2c_ptr;
 8002306:	4a06      	ldr	r2, [pc, #24]	; (8002320 <magcal_init+0x24>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6013      	str	r3, [r2, #0]
	params = params_ptr;
 800230c:	4a05      	ldr	r2, [pc, #20]	; (8002324 <magcal_init+0x28>)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6013      	str	r3, [r2, #0]

	magcal_preload(params_ptr);
 8002312:	6838      	ldr	r0, [r7, #0]
 8002314:	f7ff ffca 	bl	80022ac <magcal_preload>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000230 	.word	0x20000230
 8002324:	20000234 	.word	0x20000234

08002328 <magcal_adjust>:

	OLED_Clear();
	OLED_Refresh_Gram();
}

void magcal_adjust(float magXY[2]) {
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	float x = magXY[0] - params->offset_HI[0], y = magXY[1] - params->offset_HI[1];
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	ed93 7a00 	vldr	s14, [r3]
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <magcal_adjust+0x98>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002342:	edc7 7a03 	vstr	s15, [r7, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	ed93 7a00 	vldr	s14, [r3]
 800234e:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <magcal_adjust+0x98>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	edd3 7a01 	vldr	s15, [r3, #4]
 8002356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235a:	edc7 7a02 	vstr	s15, [r7, #8]
	magXY[0] = params->matrix_SI[0][0] * x + params->matrix_SI[0][1] * y;
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <magcal_adjust+0x98>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	ed93 7a02 	vldr	s14, [r3, #8]
 8002366:	edd7 7a03 	vldr	s15, [r7, #12]
 800236a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <magcal_adjust+0x98>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	edd3 6a03 	vldr	s13, [r3, #12]
 8002376:	edd7 7a02 	vldr	s15, [r7, #8]
 800237a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	edc3 7a00 	vstr	s15, [r3]
	magXY[1] = params->matrix_SI[1][0] * x + params->matrix_SI[1][1] * y;
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <magcal_adjust+0x98>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002390:	edd7 7a03 	vldr	s15, [r7, #12]
 8002394:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <magcal_adjust+0x98>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	edd3 6a05 	vldr	s13, [r3, #20]
 80023a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b0:	edc3 7a00 	vstr	s15, [r3]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	20000234 	.word	0x20000234

080023c4 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//serial in.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &byte_serial, 1);
 80023cc:	2201      	movs	r2, #1
 80023ce:	4910      	ldr	r1, [pc, #64]	; (8002410 <HAL_UART_RxCpltCallback+0x4c>)
 80023d0:	4810      	ldr	r0, [pc, #64]	; (8002414 <HAL_UART_RxCpltCallback+0x50>)
 80023d2:	f007 f8f2 	bl	80095ba <HAL_UART_Receive_IT>
	buf_serial[buf_i++] = byte_serial;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_UART_RxCpltCallback+0x54>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	b2d1      	uxtb	r1, r2
 80023de:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <HAL_UART_RxCpltCallback+0x54>)
 80023e0:	7011      	strb	r1, [r2, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_UART_RxCpltCallback+0x4c>)
 80023e6:	7819      	ldrb	r1, [r3, #0]
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_UART_RxCpltCallback+0x58>)
 80023ea:	5499      	strb	r1, [r3, r2]

	if (byte_serial == CMD_END) {
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_UART_RxCpltCallback+0x4c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b0a      	cmp	r3, #10
 80023f2:	d109      	bne.n	8002408 <HAL_UART_RxCpltCallback+0x44>
		commands_process(&huart3, buf_serial, buf_i);
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_UART_RxCpltCallback+0x54>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <HAL_UART_RxCpltCallback+0x58>)
 80023fc:	4805      	ldr	r0, [pc, #20]	; (8002414 <HAL_UART_RxCpltCallback+0x50>)
 80023fe:	f7ff f9f1 	bl	80017e4 <commands_process>
		buf_i = 0;
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_UART_RxCpltCallback+0x54>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
	}
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000574 	.word	0x20000574
 8002414:	200004cc 	.word	0x200004cc
 8002418:	2000055c 	.word	0x2000055c
 800241c:	20000560 	.word	0x20000560

08002420 <HAL_TIM_PeriodElapsedCallback>:

/* --- Start: Timer Management --- */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) {
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0c      	ldr	r2, [pc, #48]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d107      	bne.n	8002440 <HAL_TIM_PeriodElapsedCallback+0x20>
		usWrap++;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	3301      	adds	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800243c:	801a      	strh	r2, [r3, #0]

	else if (htim == &htim7) {
		//8MHz / 20000 = 2.5ms frame.
		newTick = 1;
	}
}
 800243e:	e006      	b.n	800244e <HAL_TIM_PeriodElapsedCallback+0x2e>
	else if (htim == &htim7) {
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a08      	ldr	r2, [pc, #32]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d102      	bne.n	800244e <HAL_TIM_PeriodElapsedCallback+0x2e>
		newTick = 1;
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	200003ac 	.word	0x200003ac
 8002460:	20000578 	.word	0x20000578
 8002464:	2000043c 	.word	0x2000043c
 8002468:	20000580 	.word	0x20000580
 800246c:	00000000 	.word	0x00000000

08002470 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	if (htim != &htim4) return;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a37      	ldr	r2, [pc, #220]	; (8002558 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d162      	bne.n	8002546 <HAL_TIM_IC_CaptureCallback+0xd6>

	if (!isRisingCaptured) {
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_TIM_IC_CaptureCallback+0xec>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11d      	bne.n	80024c6 <HAL_TIM_IC_CaptureCallback+0x56>
		//rising edge
		usCaptureComplete = 0;
 800248a:	4b35      	ldr	r3, [pc, #212]	; (8002560 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]

		usWrap = 0;
 8002490:	4b34      	ldr	r3, [pc, #208]	; (8002564 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8002492:	2200      	movs	r2, #0
 8002494:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

		isRisingCaptured = 1;
 800249e:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_TIM_IC_CaptureCallback+0xec>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, US_IC_CHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a1a      	ldr	r2, [r3, #32]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 020a 	bic.w	r2, r2, #10
 80024b2:	621a      	str	r2, [r3, #32]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0202 	orr.w	r2, r2, #2
 80024c2:	621a      	str	r2, [r3, #32]
 80024c4:	e040      	b.n	8002548 <HAL_TIM_IC_CaptureCallback+0xd8>
	} else {
		//falling edge
		counter = HAL_TIM_ReadCapturedValue(htim, US_IC_CHANNEL);
 80024c6:	2100      	movs	r1, #0
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f006 fa11 	bl	80088f0 <HAL_TIM_ReadCapturedValue>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4a25      	ldr	r2, [pc, #148]	; (8002568 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80024d2:	6013      	str	r3, [r2, #0]
		counter += usWrap * 65536;
 80024d4:	4b23      	ldr	r3, [pc, #140]	; (8002564 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	461a      	mov	r2, r3
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80024e6:	6013      	str	r3, [r2, #0]
		sensors_read_usDist((float) counter * 1e-6);
 80024e8:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	ee07 3a90 	vmov	s15, r3
 80024f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f4:	ee17 0a90 	vmov	r0, s15
 80024f8:	f7fe f826 	bl	8000548 <__aeabi_f2d>
 80024fc:	a314      	add	r3, pc, #80	; (adr r3, 8002550 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fe f879 	bl	80005f8 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb6b 	bl	8000be8 <__aeabi_d2f>
 8002512:	4603      	mov	r3, r0
 8002514:	ee00 3a10 	vmov	s0, r3
 8002518:	f001 fe98 	bl	800424c <sensors_read_usDist>

		isRisingCaptured = 0;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_TIM_IC_CaptureCallback+0xec>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, US_IC_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6a1a      	ldr	r2, [r3, #32]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 020a 	bic.w	r2, r2, #10
 8002530:	621a      	str	r2, [r3, #32]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6a12      	ldr	r2, [r2, #32]
 800253c:	621a      	str	r2, [r3, #32]

		usCaptureComplete = 1;
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e000      	b.n	8002548 <HAL_TIM_IC_CaptureCallback+0xd8>
	if (htim != &htim4) return;
 8002546:	bf00      	nop
	}
}
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	a0b5ed8d 	.word	0xa0b5ed8d
 8002554:	3eb0c6f7 	.word	0x3eb0c6f7
 8002558:	200003ac 	.word	0x200003ac
 800255c:	20000575 	.word	0x20000575
 8002560:	20000576 	.word	0x20000576
 8002564:	20000578 	.word	0x20000578
 8002568:	2000057c 	.word	0x2000057c
 800256c:	00000000 	.word	0x00000000

08002570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	b09d      	sub	sp, #116	; 0x74
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002576:	f002 fd0d 	bl	8004f94 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800257a:	f000 fb17 	bl	8002bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800257e:	f000 feed 	bl	800335c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002582:	f000 fec1 	bl	8003308 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002586:	f000 fbc1 	bl	8002d0c <MX_I2C1_Init>
  MX_TIM8_Init();
 800258a:	f000 fe11 	bl	80031b0 <MX_TIM8_Init>
  MX_TIM2_Init();
 800258e:	f000 fc8b 	bl	8002ea8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002592:	f000 fcdd 	bl	8002f50 <MX_TIM3_Init>
  MX_TIM1_Init();
 8002596:	f000 fbe7 	bl	8002d68 <MX_TIM1_Init>
  MX_TIM4_Init();
 800259a:	f000 fd2d 	bl	8002ff8 <MX_TIM4_Init>
  MX_ADC1_Init();
 800259e:	f000 fb63 	bl	8002c68 <MX_ADC1_Init>
  MX_TIM6_Init();
 80025a2:	f000 fd99 	bl	80030d8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80025a6:	f000 fdcd 	bl	8003144 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* ----- Start: Initialize libraries ----- */
  OLED_Init();										//initialize OLED display.
 80025aa:	f001 fc37 	bl	8003e1c <OLED_Init>
  magcal_init(&hi2c1, &magCalParams);				//initialize magnetometer calibration.
 80025ae:	49c1      	ldr	r1, [pc, #772]	; (80028b4 <main+0x344>)
 80025b0:	48c1      	ldr	r0, [pc, #772]	; (80028b8 <main+0x348>)
 80025b2:	f7ff fea3 	bl	80022fc <magcal_init>
  sensors_init(&hi2c1, &hadc1, &htim4, &sensors); 	//initialize motion sensors.
 80025b6:	4bc1      	ldr	r3, [pc, #772]	; (80028bc <main+0x34c>)
 80025b8:	4ac1      	ldr	r2, [pc, #772]	; (80028c0 <main+0x350>)
 80025ba:	49c2      	ldr	r1, [pc, #776]	; (80028c4 <main+0x354>)
 80025bc:	48be      	ldr	r0, [pc, #760]	; (80028b8 <main+0x348>)
 80025be:	f001 fddb 	bl	8004178 <sensors_init>
  motor_init(&htim8, &htim2, &htim3); 				//initialize motor PWM and encoders.
 80025c2:	4ac1      	ldr	r2, [pc, #772]	; (80028c8 <main+0x358>)
 80025c4:	49c1      	ldr	r1, [pc, #772]	; (80028cc <main+0x35c>)
 80025c6:	48c2      	ldr	r0, [pc, #776]	; (80028d0 <main+0x360>)
 80025c8:	f000 ff74 	bl	80034b4 <motor_init>
  servo_init(&htim1); 								//initialize servo PWM.
 80025cc:	48c1      	ldr	r0, [pc, #772]	; (80028d4 <main+0x364>)
 80025ce:	f002 f843 	bl	8004658 <servo_init>
  delay_us_init(&htim6);							//initialize us timer.
 80025d2:	48c1      	ldr	r0, [pc, #772]	; (80028d8 <main+0x368>)
 80025d4:	f7ff fcf6 	bl	8001fc4 <delay_us_init>

  dist_init();										//initialize distance tracking.
 80025d8:	f7ff fd22 	bl	8002020 <dist_init>

  /* ----- Start: Car setup ----- */
//  magcal_calc_params();

  //reset car.
  servo_setAngle(0);
 80025dc:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80028dc <main+0x36c>
 80025e0:	f002 f85e 	bl	80046a0 <servo_setAngle>
  motor_setDrive(0, 0);
 80025e4:	2100      	movs	r1, #0
 80025e6:	2000      	movs	r0, #0
 80025e8:	f001 fa44 	bl	8003a74 <motor_setDrive>

  OLED_ShowString(0, 0, "Press USER when ready...");
 80025ec:	4abc      	ldr	r2, [pc, #752]	; (80028e0 <main+0x370>)
 80025ee:	2100      	movs	r1, #0
 80025f0:	2000      	movs	r0, #0
 80025f2:	f001 fbe1 	bl	8003db8 <OLED_ShowString>
  OLED_Refresh_Gram();
 80025f6:	f001 fab5 	bl	8003b64 <OLED_Refresh_Gram>
  while (!user_is_pressed());	//wait for user to place car.
 80025fa:	bf00      	nop
 80025fc:	f002 fc8e 	bl	8004f1c <user_is_pressed>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0fa      	beq.n	80025fc <main+0x8c>
  OLED_Clear();
 8002606:	f001 fae5 	bl	8003bd4 <OLED_Clear>
  OLED_ShowString(0, 0, "Setting sensors bias...");
 800260a:	4ab6      	ldr	r2, [pc, #728]	; (80028e4 <main+0x374>)
 800260c:	2100      	movs	r1, #0
 800260e:	2000      	movs	r0, #0
 8002610:	f001 fbd2 	bl	8003db8 <OLED_ShowString>
  OLED_Refresh_Gram();
 8002614:	f001 faa6 	bl	8003b64 <OLED_Refresh_Gram>

  sensors_set_bias(500); 		// set initial bias.
 8002618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800261c:	f001 ff60 	bl	80044e0 <sensors_set_bias>
  OLED_Clear();
 8002620:	f001 fad8 	bl	8003bd4 <OLED_Clear>
  OLED_ShowString(0, 0, "Active.");
 8002624:	4ab0      	ldr	r2, [pc, #704]	; (80028e8 <main+0x378>)
 8002626:	2100      	movs	r1, #0
 8002628:	2000      	movs	r0, #0
 800262a:	f001 fbc5 	bl	8003db8 <OLED_ShowString>
  OLED_Refresh_Gram();
 800262e:	f001 fa99 	bl	8003b64 <OLED_Refresh_Gram>

  /* ----- End: Car setup ----- */

  /* ----- Start: OS Parameters ----- */
  //ticking for longer timing requirements for ultrasound.
  uint8_t ticksElapsed = 0,
 8002632:	2300      	movs	r3, #0
 8002634:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		  ticksUltrasound = (17.5f / MS_FRAME) + 1,
 8002638:	2308      	movs	r3, #8
 800263a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  ticksRefresh = ticksUltrasound;
 800263e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002642:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  Command *cmd = NULL;							//current command.
 8002646:	2300      	movs	r3, #0
 8002648:	66bb      	str	r3, [r7, #104]	; 0x68
  float steeringAngle = 0;						//current steering angle.
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	643b      	str	r3, [r7, #64]	; 0x40
  float motorDist = 0, estDist = 0,
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	63bb      	str	r3, [r7, #56]	; 0x38
		  estAngle = 0,
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	667b      	str	r3, [r7, #100]	; 0x64
		  estDistOld = 0; 						//distance estimations.
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	663b      	str	r3, [r7, #96]	; 0x60

  float distTarget = 0;							//decide distance target.
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	65fb      	str	r3, [r7, #92]	; 0x5c
  float distDiff = 0, brakingDist = 0; 			//current distance difference.
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	65bb      	str	r3, [r7, #88]	; 0x58
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	657b      	str	r3, [r7, #84]	; 0x54
  float wDiff = 0, wTarget = 0;					//current angular velocity difference and target.
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	637b      	str	r3, [r7, #52]	; 0x34
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	653b      	str	r3, [r7, #80]	; 0x50
  float rBack = 0, rRobot = 0;					//turning radii at the back and centre of robot.
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	64bb      	str	r3, [r7, #72]	; 0x48
  /* ----- End: OS Parameters ----- */

  /* ----- Start: Interrupts ----- */
  HAL_UART_Receive_IT(&huart3, &byte_serial, 1);	//start receiving serial.
 8002692:	2201      	movs	r2, #1
 8002694:	4995      	ldr	r1, [pc, #596]	; (80028ec <main+0x37c>)
 8002696:	4896      	ldr	r0, [pc, #600]	; (80028f0 <main+0x380>)
 8002698:	f006 ff8f 	bl	80095ba <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);							//start continuous ADC conversion.
 800269c:	4889      	ldr	r0, [pc, #548]	; (80028c4 <main+0x354>)
 800269e:	f002 fd53 	bl	8005148 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim7);					//start paced loop timer.
 80026a2:	4894      	ldr	r0, [pc, #592]	; (80028f4 <main+0x384>)
 80026a4:	f005 f9a6 	bl	80079f4 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */

	/* ----- Start: Sensor reading ----- */
	//trigger distance measurement (minimum 3ms delay)
	if (!(ticksElapsed % ticksUltrasound)) {
 80026a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80026ac:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80026b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80026b4:	fb01 f202 	mul.w	r2, r1, r2
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <main+0x154>
		sensors_us_trig();
 80026c0:	f001 fda8 	bl	8004214 <sensors_us_trig>
	}

	sensors_read_irDist();
 80026c4:	f001 fdf0 	bl	80042a8 <sensors_read_irDist>
	sensors_read_accel();
 80026c8:	f001 fea2 	bl	8004410 <sensors_read_accel>
	sensors_read_gyroZ();
 80026cc:	f001 fe7c 	bl	80043c8 <sensors_read_gyroZ>
	sensors_read_heading(MS_FRAME, sensors.gyroZ);
 80026d0:	4b7a      	ldr	r3, [pc, #488]	; (80028bc <main+0x34c>)
 80026d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80026d6:	eef0 0a67 	vmov.f32	s1, s15
 80026da:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80026de:	f001 fed3 	bl	8004488 <sensors_read_heading>
//		snprintf(buf, 25, "%7.2f,%7.2f,%7.2f\r\n", sensors.usDist, sensors.irDist, dist_get_front(sensors.usDist, sensors.irDist));
//		HAL_UART_Transmit(&huart3, buf, sizeof(buf), HAL_MAX_DELAY);
//	}

	/* ----- Start: Get next command (if any) ----- */
	if (cmd == NULL) {
 80026e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d175      	bne.n	80027d4 <main+0x264>
		cmd = commands_pop();
 80026e8:	f7ff f968 	bl	80019bc <commands_pop>
 80026ec:	66b8      	str	r0, [r7, #104]	; 0x68

		if (cmd != NULL) {
 80026ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d06f      	beq.n	80027d4 <main+0x264>
			estDistOld = 0;
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	663b      	str	r3, [r7, #96]	; 0x60
			estAngle = 0;
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	667b      	str	r3, [r7, #100]	; 0x64
			motor_setDrive(cmd->dir, cmd->speed);
 8002700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002702:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8002706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002708:	799b      	ldrb	r3, [r3, #6]
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f001 f9b1 	bl	8003a74 <motor_setDrive>
			if (cmd->dir != 0) {
 8002712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002714:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d055      	beq.n	80027c8 <main+0x258>
				distTarget = cmd->val;
 800271c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	65fb      	str	r3, [r7, #92]	; 0x5c
				distDiff = DIST_DIFF_DEFAULT;
 8002722:	4b75      	ldr	r3, [pc, #468]	; (80028f8 <main+0x388>)
 8002724:	65bb      	str	r3, [r7, #88]	; 0x58
				brakingDist = (cmd->distType == TARGET
 8002726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002728:	7b1b      	ldrb	r3, [r3, #12]
					? MOTOR_BRAKING_DIST_CM_TARGET
					: MOTOR_BRAKING_DIST_CM_AWAY
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <main+0x1c4>
 800272e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002732:	e001      	b.n	8002738 <main+0x1c8>
 8002734:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80028fc <main+0x38c>
				) * cmd->speed / 100;
 8002738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800273a:	799b      	ldrb	r3, [r3, #6]
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002744:	ee27 7a27 	vmul.f32	s14, s14, s15
				brakingDist = (cmd->distType == TARGET
 8002748:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8002900 <main+0x390>
 800274c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002750:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

				steeringAngle = cmd->steeringAngle;
 8002754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	643b      	str	r3, [r7, #64]	; 0x40
				servo_setAngle(steeringAngle);
 800275a:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800275e:	f001 ff9f 	bl	80046a0 <servo_setAngle>
				if (steeringAngle != 0) {
 8002762:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002766:	eef5 7a40 	vcmp.f32	s15, #0.0
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	d021      	beq.n	80027b4 <main+0x244>
					rBack = get_turning_r_back_cm(steeringAngle);
 8002770:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002774:	f7ff fa9c 	bl	8001cb0 <get_turning_r_back_cm>
 8002778:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
					rRobot = get_turning_r_robot_cm(steeringAngle);
 800277c:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002780:	f7ff fad6 	bl	8001d30 <get_turning_r_robot_cm>
 8002784:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
					if (cmd->distType == TARGET) {
 8002788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278a:	7b1b      	ldrb	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d121      	bne.n	80027d4 <main+0x264>
						distTarget = abs_float(get_arc_length(cmd->val, rRobot));
 8002790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002792:	edd3 7a04 	vldr	s15, [r3, #16]
 8002796:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 800279a:	eeb0 0a67 	vmov.f32	s0, s15
 800279e:	f7ff fbd7 	bl	8001f50 <get_arc_length>
 80027a2:	eef0 7a40 	vmov.f32	s15, s0
 80027a6:	eeb0 0a67 	vmov.f32	s0, s15
 80027aa:	f7ff f941 	bl	8001a30 <abs_float>
 80027ae:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
 80027b2:	e00f      	b.n	80027d4 <main+0x264>
					}
				} else {
					rBack = 0;
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	64fb      	str	r3, [r7, #76]	; 0x4c
					rRobot = 0;
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	64bb      	str	r3, [r7, #72]	; 0x48
					wTarget = 0;
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	653b      	str	r3, [r7, #80]	; 0x50
 80027c6:	e005      	b.n	80027d4 <main+0x264>
				}
			} else {
				commands_end(&huart3, cmd);
 80027c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027ca:	4849      	ldr	r0, [pc, #292]	; (80028f0 <main+0x380>)
 80027cc:	f7ff f91a 	bl	8001a04 <commands_end>
				cmd = NULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	66bb      	str	r3, [r7, #104]	; 0x68
		}
	}
	/* ----- End: Get next command (if any) ----- */

	/* ----- Start: Drive PID Control ----- */
	if (cmd != NULL && cmd->dir != 0) {
 80027d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 81be 	beq.w	8002b58 <main+0x5e8>
 80027dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027de:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 81b8 	beq.w	8002b58 <main+0x5e8>
		//calculate distance.
		motorDist = motor_getDist();
 80027e8:	f000 ff44 	bl	8003674 <motor_getDist>
 80027ec:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		estDist = dist_get_cm(MS_FRAME, cmd->dir * sensors.accel[1], motorDist);
 80027f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027f2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <main+0x34c>)
 8002800:	edd3 7a04 	vldr	s15, [r3, #16]
 8002804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002808:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 800280c:	eef0 0a67 	vmov.f32	s1, s15
 8002810:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8002814:	f7ff fc86 	bl	8002124 <dist_get_cm>
 8002818:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

		//estimate current speed.
		float estSpeed = (estDist - estDistOld) / MS_FRAME;
 800281c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002820:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002824:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002828:	eef0 6a04 	vmov.f32	s13, #4	; 0x40200000  2.5
 800282c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002830:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		estDistOld = estDist;
 8002834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002836:	663b      	str	r3, [r7, #96]	; 0x60

		//calculate difference in angular velocity.
		if (rRobot != 0) wTarget = get_w_ms(estSpeed, rRobot);
 8002838:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800283c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	d007      	beq.n	8002856 <main+0x2e6>
 8002846:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 800284a:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800284e:	f7ff faaf 	bl	8001db0 <get_w_ms>
 8002852:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
		float wGyro = cmd->dir * sensors.gyroZ;
 8002856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002858:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800285c:	ee07 3a90 	vmov	s15, r3
 8002860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <main+0x34c>)
 8002866:	edd3 7a02 	vldr	s15, [r3, #8]
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		wDiff = (wGyro - wTarget); //gyro is flipped when going backwards.
 8002872:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002876:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800287a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		estAngle += abs_float(wGyro * MS_FRAME);
 8002882:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002886:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800288a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800288e:	eeb0 0a67 	vmov.f32	s0, s15
 8002892:	f7ff f8cd 	bl	8001a30 <abs_float>
 8002896:	eeb0 7a40 	vmov.f32	s14, s0
 800289a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800289e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028a2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		switch (cmd->distType) {
 80028a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a8:	7b1b      	ldrb	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02a      	beq.n	8002904 <main+0x394>
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d05b      	beq.n	800296a <main+0x3fa>
 80028b2:	e084      	b.n	80029be <main+0x44e>
 80028b4:	20000544 	.word	0x20000544
 80028b8:	20000280 	.word	0x20000280
 80028bc:	20000514 	.word	0x20000514
 80028c0:	200003ac 	.word	0x200003ac
 80028c4:	20000238 	.word	0x20000238
 80028c8:	20000364 	.word	0x20000364
 80028cc:	2000031c 	.word	0x2000031c
 80028d0:	20000484 	.word	0x20000484
 80028d4:	200002d4 	.word	0x200002d4
 80028d8:	200003f4 	.word	0x200003f4
 80028dc:	00000000 	.word	0x00000000
 80028e0:	08011420 	.word	0x08011420
 80028e4:	0801143c 	.word	0x0801143c
 80028e8:	08011454 	.word	0x08011454
 80028ec:	20000574 	.word	0x20000574
 80028f0:	200004cc 	.word	0x200004cc
 80028f4:	2000043c 	.word	0x2000043c
 80028f8:	41200000 	.word	0x41200000
 80028fc:	42200000 	.word	0x42200000
 8002900:	42c80000 	.word	0x42c80000
			case TARGET:
				distDiff = distTarget - estDist;
 8002904:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002908:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800290c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002910:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				if (rRobot != 0) {
 8002914:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002918:	eef5 7a40 	vcmp.f32	s15, #0.0
 800291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002920:	d050      	beq.n	80029c4 <main+0x454>
					if (estAngle >= cmd->val) distDiff = 0;
 8002922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002924:	edd3 7a04 	vldr	s15, [r3, #16]
 8002928:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800292c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002934:	db03      	blt.n	800293e <main+0x3ce>
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	65bb      	str	r3, [r7, #88]	; 0x58
					else distDiff = abs_float(get_arc_length(cmd->val - estAngle, rRobot));
				}
				break;
 800293c:	e042      	b.n	80029c4 <main+0x454>
					else distDiff = abs_float(get_arc_length(cmd->val - estAngle, rRobot));
 800293e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002940:	ed93 7a04 	vldr	s14, [r3, #16]
 8002944:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294c:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8002950:	eeb0 0a67 	vmov.f32	s0, s15
 8002954:	f7ff fafc 	bl	8001f50 <get_arc_length>
 8002958:	eef0 7a40 	vmov.f32	s15, s0
 800295c:	eeb0 0a67 	vmov.f32	s0, s15
 8002960:	f7ff f866 	bl	8001a30 <abs_float>
 8002964:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
				break;
 8002968:	e02c      	b.n	80029c4 <main+0x454>
			case STOP_AWAY:
				if (usCaptureComplete) {
 800296a:	4b89      	ldr	r3, [pc, #548]	; (8002b90 <main+0x620>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d029      	beq.n	80029c8 <main+0x458>
					float frontDist = dist_get_front(sensors.usDist, sensors.irDist);
 8002974:	4b87      	ldr	r3, [pc, #540]	; (8002b94 <main+0x624>)
 8002976:	edd3 7a01 	vldr	s15, [r3, #4]
 800297a:	4b86      	ldr	r3, [pc, #536]	; (8002b94 <main+0x624>)
 800297c:	ed93 7a00 	vldr	s14, [r3]
 8002980:	eef0 0a47 	vmov.f32	s1, s14
 8002984:	eeb0 0a67 	vmov.f32	s0, s15
 8002988:	f7ff fbf6 	bl	8002178 <dist_get_front>
 800298c:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
					distDiff = frontDist - cmd->val;
 8002990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002992:	edd3 7a04 	vldr	s15, [r3, #16]
 8002996:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800299a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
					distDiff *= cmd->dir;
 80029a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029a4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80029b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				}
				break;
 80029bc:	e004      	b.n	80029c8 <main+0x458>
			default:
				distDiff = DIST_DIFF_DEFAULT;
 80029be:	4b76      	ldr	r3, [pc, #472]	; (8002b98 <main+0x628>)
 80029c0:	65bb      	str	r3, [r7, #88]	; 0x58
				break;
 80029c2:	e002      	b.n	80029ca <main+0x45a>
				break;
 80029c4:	bf00      	nop
 80029c6:	e000      	b.n	80029ca <main+0x45a>
				break;
 80029c8:	bf00      	nop
		}

		Command *next = commands_peek();
 80029ca:	f7ff f80f 	bl	80019ec <commands_peek>
 80029ce:	6278      	str	r0, [r7, #36]	; 0x24
		float nextAngle = next != NULL ? next->steeringAngle : 0;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <main+0x46c>
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	e001      	b.n	80029e0 <main+0x470>
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
		float nextAngleDiff = abs_float(next->steeringAngle - cmd->steeringAngle);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80029e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f2:	eeb0 0a67 	vmov.f32	s0, s15
 80029f6:	f7ff f81b 	bl	8001a30 <abs_float>
 80029fa:	ed87 0a07 	vstr	s0, [r7, #28]
		uint8_t shouldBrake = cmd->distType == STOP_AWAY
 80029fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a00:	7b1b      	ldrb	r3, [r3, #12]
				? 1
				: next != NULL
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d013      	beq.n	8002a2e <main+0x4be>
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d010      	beq.n	8002a2e <main+0x4be>
				? next->dir != cmd->dir || nextAngleDiff > SERVO_WIDTH
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8002a12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a14:	f993 3005 	ldrsb.w	r3, [r3, #5]
				: 1;
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d108      	bne.n	8002a2e <main+0x4be>
				? next->dir != cmd->dir || nextAngleDiff > SERVO_WIDTH
 8002a1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a20:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2c:	dd01      	ble.n	8002a32 <main+0x4c2>
				: next != NULL
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <main+0x4c4>
 8002a32:	2300      	movs	r3, #0
		uint8_t shouldBrake = cmd->distType == STOP_AWAY
 8002a34:	76fb      	strb	r3, [r7, #27]
		uint8_t turnSpeed = min_uint8(25, next->speed);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	799b      	ldrb	r3, [r3, #6]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	2019      	movs	r0, #25
 8002a3e:	f7ff f811 	bl	8001a64 <min_uint8>
 8002a42:	4603      	mov	r3, r0
 8002a44:	76bb      	strb	r3, [r7, #26]

		//motor correction.
		motor_pwmCorrection(
 8002a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a48:	7b1a      	ldrb	r2, [r3, #12]
 8002a4a:	7efb      	ldrb	r3, [r7, #27]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <main+0x4e4>
 8002a50:	7ebb      	ldrb	r3, [r7, #26]
 8002a52:	e000      	b.n	8002a56 <main+0x4e6>
 8002a54:	2300      	movs	r3, #0
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	ed97 2a15 	vldr	s4, [r7, #84]	; 0x54
 8002a5e:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 8002a62:	ed97 1a12 	vldr	s2, [r7, #72]	; 0x48
 8002a66:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8002a6a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8002a6e:	f000 fe39 	bl	80036e4 <motor_pwmCorrection>
			wDiff, rBack, rRobot, distDiff,
			brakingDist, cmd->distType,
			shouldBrake ? 0 : turnSpeed
		);

		float turnMs = 144.0f * turnSpeed / 25 * nextAngleDiff / SERVO_WIDTH;
 8002a72:	7ebb      	ldrb	r3, [r7, #26]
 8002a74:	ee07 3a90 	vmov	s15, r3
 8002a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002b9c <main+0x62c>
 8002a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a84:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002a88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a94:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a9c:	edc7 7a05 	vstr	s15, [r7, #20]
		uint8_t shouldTurn = shouldBrake
 8002aa0:	7efb      	ldrb	r3, [r7, #27]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01b      	beq.n	8002ade <main+0x56e>
			? distDiff < 0.025 * brakingDist
 8002aa6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002aa8:	f7fd fd4e 	bl	8000548 <__aeabi_f2d>
 8002aac:	4604      	mov	r4, r0
 8002aae:	460d      	mov	r5, r1
 8002ab0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002ab2:	f7fd fd49 	bl	8000548 <__aeabi_f2d>
 8002ab6:	a334      	add	r3, pc, #208	; (adr r3, 8002b88 <main+0x618>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fd9c 	bl	80005f8 <__aeabi_dmul>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	460e      	mov	r6, r1
 8002ac8:	4620      	mov	r0, r4
 8002aca:	4629      	mov	r1, r5
 8002acc:	f7fe f806 	bl	8000adc <__aeabi_dcmplt>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <main+0x56a>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	461e      	mov	r6, r3
 8002ada:	b2f3      	uxtb	r3, r6
 8002adc:	e017      	b.n	8002b0e <main+0x59e>
			: estSpeed > 0
			  	  ? distDiff / estSpeed < turnMs
				  : 0;
 8002ade:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ae2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aea:	dd0e      	ble.n	8002b0a <main+0x59a>
			  	  ? distDiff / estSpeed < turnMs
 8002aec:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002af0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
				  : 0;
 8002af8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b04:	dd01      	ble.n	8002b0a <main+0x59a>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <main+0x59c>
 8002b0a:	2300      	movs	r3, #0
		uint8_t shouldTurn = shouldBrake
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	74fb      	strb	r3, [r7, #19]
		if (shouldTurn) servo_setAngle(nextAngle);
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <main+0x5ae>
 8002b16:	ed97 0a08 	vldr	s0, [r7, #32]
 8002b1a:	f001 fdc1 	bl	80046a0 <servo_setAngle>
		if (distDiff <= 0) {
 8002b1e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2a:	d815      	bhi.n	8002b58 <main+0x5e8>
			//target achieved; move to next command.
			commands_end(&huart3, cmd);
 8002b2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b2e:	481c      	ldr	r0, [pc, #112]	; (8002ba0 <main+0x630>)
 8002b30:	f7fe ff68 	bl	8001a04 <commands_end>
			cmd = NULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	66bb      	str	r3, [r7, #104]	; 0x68

			if (shouldBrake) {
 8002b38:	7efb      	ldrb	r3, [r7, #27]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <main+0x5e0>
				motor_setDrive(0, 0);
 8002b3e:	2100      	movs	r1, #0
 8002b40:	2000      	movs	r0, #0
 8002b42:	f000 ff97 	bl	8003a74 <motor_setDrive>
				dist_reset(0);
 8002b46:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002ba4 <main+0x634>
 8002b4a:	f7ff fa73 	bl	8002034 <dist_reset>
 8002b4e:	e003      	b.n	8002b58 <main+0x5e8>
			} else dist_reset(estSpeed);
 8002b50:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8002b54:	f7ff fa6e 	bl	8002034 <dist_reset>
		}
	}
	/* ----- End: Drive PID Control ----- */

	/* ----- Start: Paced Loop Control ----- */
	while (!newTick);									//wait for new tick.
 8002b58:	bf00      	nop
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <main+0x638>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0fa      	beq.n	8002b5a <main+0x5ea>
	newTick = 0;										//acknowledge flag.
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <main+0x638>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]

	ticksElapsed = (ticksElapsed + 1) % ticksRefresh;	//refresh tick count.
 8002b6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b74:	fb93 f1f2 	sdiv	r1, r3, r2
 8002b78:	fb01 f202 	mul.w	r2, r1, r2
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (!(ticksElapsed % ticksUltrasound)) {
 8002b82:	e591      	b.n	80026a8 <main+0x138>
 8002b84:	f3af 8000 	nop.w
 8002b88:	9999999a 	.word	0x9999999a
 8002b8c:	3f999999 	.word	0x3f999999
 8002b90:	20000576 	.word	0x20000576
 8002b94:	20000514 	.word	0x20000514
 8002b98:	41200000 	.word	0x41200000
 8002b9c:	43100000 	.word	0x43100000
 8002ba0:	200004cc 	.word	0x200004cc
 8002ba4:	00000000 	.word	0x00000000
 8002ba8:	20000580 	.word	0x20000580

08002bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b094      	sub	sp, #80	; 0x50
 8002bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bb2:	f107 0320 	add.w	r3, r7, #32
 8002bb6:	2230      	movs	r2, #48	; 0x30
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f008 fccf 	bl	800b55e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <SystemClock_Config+0xb4>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	4a21      	ldr	r2, [pc, #132]	; (8002c60 <SystemClock_Config+0xb4>)
 8002bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bde:	6413      	str	r3, [r2, #64]	; 0x40
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <SystemClock_Config+0xb4>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bec:	2300      	movs	r3, #0
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <SystemClock_Config+0xb8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <SystemClock_Config+0xb8>)
 8002bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <SystemClock_Config+0xb8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c04:	607b      	str	r3, [r7, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c10:	2310      	movs	r3, #16
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c18:	f107 0320 	add.w	r3, r7, #32
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f004 f9d9 	bl	8006fd4 <HAL_RCC_OscConfig>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002c28:	f000 fc3e 	bl	80034a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c2c:	230f      	movs	r3, #15
 8002c2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f004 fc3c 	bl	80074c4 <HAL_RCC_ClockConfig>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002c52:	f000 fc29 	bl	80034a8 <Error_Handler>
  }
}
 8002c56:	bf00      	nop
 8002c58:	3750      	adds	r7, #80	; 0x50
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40007000 	.word	0x40007000

08002c68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c7a:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002c7c:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <MX_ADC1_Init+0x9c>)
 8002c7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c86:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002ca8:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <MX_ADC1_Init+0xa0>)
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cc6:	480e      	ldr	r0, [pc, #56]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002cc8:	f002 f9fa 	bl	80050c0 <HAL_ADC_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002cd2:	f000 fbe9 	bl	80034a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002cd6:	230d      	movs	r3, #13
 8002cd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ce2:	463b      	mov	r3, r7
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4806      	ldr	r0, [pc, #24]	; (8002d00 <MX_ADC1_Init+0x98>)
 8002ce8:	f002 fb98 	bl	800541c <HAL_ADC_ConfigChannel>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002cf2:	f000 fbd9 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000238 	.word	0x20000238
 8002d04:	40012000 	.word	0x40012000
 8002d08:	0f000001 	.word	0x0f000001

08002d0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <MX_I2C1_Init+0x50>)
 8002d12:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <MX_I2C1_Init+0x54>)
 8002d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <MX_I2C1_Init+0x50>)
 8002d18:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <MX_I2C1_Init+0x58>)
 8002d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <MX_I2C1_Init+0x50>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <MX_I2C1_Init+0x50>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <MX_I2C1_Init+0x50>)
 8002d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <MX_I2C1_Init+0x50>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <MX_I2C1_Init+0x50>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d3c:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <MX_I2C1_Init+0x50>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <MX_I2C1_Init+0x50>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d48:	4804      	ldr	r0, [pc, #16]	; (8002d5c <MX_I2C1_Init+0x50>)
 8002d4a:	f003 f8f7 	bl	8005f3c <HAL_I2C_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d54:	f000 fba8 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000280 	.word	0x20000280
 8002d60:	40005400 	.word	0x40005400
 8002d64:	00061a80 	.word	0x00061a80

08002d68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b096      	sub	sp, #88	; 0x58
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	611a      	str	r2, [r3, #16]
 8002d96:	615a      	str	r2, [r3, #20]
 8002d98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f008 fbdc 	bl	800b55e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002da6:	4b3e      	ldr	r3, [pc, #248]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002da8:	4a3e      	ldr	r2, [pc, #248]	; (8002ea4 <MX_TIM1_Init+0x13c>)
 8002daa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8002dac:	4b3c      	ldr	r3, [pc, #240]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002dae:	2204      	movs	r2, #4
 8002db0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db2:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 8002db8:	4b39      	ldr	r3, [pc, #228]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002dba:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002dbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc0:	4b37      	ldr	r3, [pc, #220]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dcc:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dd2:	4833      	ldr	r0, [pc, #204]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002dd4:	f004 fd56 	bl	8007884 <HAL_TIM_Base_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002dde:	f000 fb63 	bl	80034a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002de8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002dec:	4619      	mov	r1, r3
 8002dee:	482c      	ldr	r0, [pc, #176]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002df0:	f005 fcb6 	bl	8008760 <HAL_TIM_ConfigClockSource>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002dfa:	f000 fb55 	bl	80034a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dfe:	4828      	ldr	r0, [pc, #160]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002e00:	f004 fe68 	bl	8007ad4 <HAL_TIM_PWM_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002e0a:	f000 fb4d 	bl	80034a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4820      	ldr	r0, [pc, #128]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002e1e:	f006 fa0f 	bl	8009240 <HAL_TIMEx_MasterConfigSynchronization>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002e28:	f000 fb3e 	bl	80034a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e2c:	2360      	movs	r3, #96	; 0x60
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4813      	ldr	r0, [pc, #76]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002e52:	f005 fbc3 	bl	80085dc <HAL_TIM_PWM_ConfigChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002e5c:	f000 fb24 	bl	80034a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4807      	ldr	r0, [pc, #28]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002e84:	f006 fa58 	bl	8009338 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002e8e:	f000 fb0b 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e92:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <MX_TIM1_Init+0x138>)
 8002e94:	f001 fe66 	bl	8004b64 <HAL_TIM_MspPostInit>

}
 8002e98:	bf00      	nop
 8002e9a:	3758      	adds	r7, #88	; 0x58
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	200002d4 	.word	0x200002d4
 8002ea4:	40010000 	.word	0x40010000

08002ea8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	; 0x30
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002eae:	f107 030c 	add.w	r3, r7, #12
 8002eb2:	2224      	movs	r2, #36	; 0x24
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f008 fb51 	bl	800b55e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ec4:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <MX_TIM2_Init+0xa4>)
 8002ec6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002eca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <MX_TIM2_Init+0xa4>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <MX_TIM2_Init+0xa4>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <MX_TIM2_Init+0xa4>)
 8002eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ede:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <MX_TIM2_Init+0xa4>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee6:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <MX_TIM2_Init+0xa4>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002eec:	2303      	movs	r3, #3
 8002eee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f00:	2300      	movs	r3, #0
 8002f02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f04:	2301      	movs	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002f10:	f107 030c 	add.w	r3, r7, #12
 8002f14:	4619      	mov	r1, r3
 8002f16:	480d      	ldr	r0, [pc, #52]	; (8002f4c <MX_TIM2_Init+0xa4>)
 8002f18:	f005 f880 	bl	800801c <HAL_TIM_Encoder_Init>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002f22:	f000 fac1 	bl	80034a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	4806      	ldr	r0, [pc, #24]	; (8002f4c <MX_TIM2_Init+0xa4>)
 8002f34:	f006 f984 	bl	8009240 <HAL_TIMEx_MasterConfigSynchronization>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f3e:	f000 fab3 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	3730      	adds	r7, #48	; 0x30
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000031c 	.word	0x2000031c

08002f50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08c      	sub	sp, #48	; 0x30
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f56:	f107 030c 	add.w	r3, r7, #12
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f008 fafd 	bl	800b55e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f6c:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <MX_TIM3_Init+0xa0>)
 8002f6e:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <MX_TIM3_Init+0xa4>)
 8002f70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f72:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <MX_TIM3_Init+0xa0>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <MX_TIM3_Init+0xa0>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <MX_TIM3_Init+0xa0>)
 8002f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <MX_TIM3_Init+0xa0>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <MX_TIM3_Init+0xa0>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f92:	2303      	movs	r3, #3
 8002f94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002faa:	2301      	movs	r3, #1
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	4619      	mov	r1, r3
 8002fbc:	480c      	ldr	r0, [pc, #48]	; (8002ff0 <MX_TIM3_Init+0xa0>)
 8002fbe:	f005 f82d 	bl	800801c <HAL_TIM_Encoder_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002fc8:	f000 fa6e 	bl	80034a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <MX_TIM3_Init+0xa0>)
 8002fda:	f006 f931 	bl	8009240 <HAL_TIMEx_MasterConfigSynchronization>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002fe4:	f000 fa60 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fe8:	bf00      	nop
 8002fea:	3730      	adds	r7, #48	; 0x30
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000364 	.word	0x20000364
 8002ff4:	40000400 	.word	0x40000400

08002ff8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffe:	f107 0318 	add.w	r3, r7, #24
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300c:	f107 0310 	add.w	r3, r7, #16
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003016:	463b      	mov	r3, r7
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003022:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <MX_TIM4_Init+0xd8>)
 8003024:	4a2b      	ldr	r2, [pc, #172]	; (80030d4 <MX_TIM4_Init+0xdc>)
 8003026:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <MX_TIM4_Init+0xd8>)
 800302a:	220f      	movs	r2, #15
 800302c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302e:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <MX_TIM4_Init+0xd8>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8003034:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <MX_TIM4_Init+0xd8>)
 8003036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800303a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303c:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <MX_TIM4_Init+0xd8>)
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003042:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <MX_TIM4_Init+0xd8>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003048:	4821      	ldr	r0, [pc, #132]	; (80030d0 <MX_TIM4_Init+0xd8>)
 800304a:	f004 fc1b 	bl	8007884 <HAL_TIM_Base_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8003054:	f000 fa28 	bl	80034a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800305c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800305e:	f107 0318 	add.w	r3, r7, #24
 8003062:	4619      	mov	r1, r3
 8003064:	481a      	ldr	r0, [pc, #104]	; (80030d0 <MX_TIM4_Init+0xd8>)
 8003066:	f005 fb7b 	bl	8008760 <HAL_TIM_ConfigClockSource>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003070:	f000 fa1a 	bl	80034a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003074:	4816      	ldr	r0, [pc, #88]	; (80030d0 <MX_TIM4_Init+0xd8>)
 8003076:	f004 fe4f 	bl	8007d18 <HAL_TIM_IC_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003080:	f000 fa12 	bl	80034a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003084:	2300      	movs	r3, #0
 8003086:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800308c:	f107 0310 	add.w	r3, r7, #16
 8003090:	4619      	mov	r1, r3
 8003092:	480f      	ldr	r0, [pc, #60]	; (80030d0 <MX_TIM4_Init+0xd8>)
 8003094:	f006 f8d4 	bl	8009240 <HAL_TIMEx_MasterConfigSynchronization>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800309e:	f000 fa03 	bl	80034a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80030a2:	2300      	movs	r3, #0
 80030a4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030a6:	2301      	movs	r3, #1
 80030a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80030b2:	463b      	mov	r3, r7
 80030b4:	2200      	movs	r2, #0
 80030b6:	4619      	mov	r1, r3
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <MX_TIM4_Init+0xd8>)
 80030ba:	f005 f9f3 	bl	80084a4 <HAL_TIM_IC_ConfigChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80030c4:	f000 f9f0 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030c8:	bf00      	nop
 80030ca:	3728      	adds	r7, #40	; 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	200003ac 	.word	0x200003ac
 80030d4:	40000800 	.word	0x40000800

080030d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030de:	463b      	mov	r3, r7
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <MX_TIM6_Init+0x64>)
 80030e8:	4a15      	ldr	r2, [pc, #84]	; (8003140 <MX_TIM6_Init+0x68>)
 80030ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <MX_TIM6_Init+0x64>)
 80030ee:	220f      	movs	r2, #15
 80030f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <MX_TIM6_Init+0x64>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 80030f8:	4b10      	ldr	r3, [pc, #64]	; (800313c <MX_TIM6_Init+0x64>)
 80030fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <MX_TIM6_Init+0x64>)
 8003102:	2200      	movs	r2, #0
 8003104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003106:	480d      	ldr	r0, [pc, #52]	; (800313c <MX_TIM6_Init+0x64>)
 8003108:	f004 fbbc 	bl	8007884 <HAL_TIM_Base_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003112:	f000 f9c9 	bl	80034a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800311e:	463b      	mov	r3, r7
 8003120:	4619      	mov	r1, r3
 8003122:	4806      	ldr	r0, [pc, #24]	; (800313c <MX_TIM6_Init+0x64>)
 8003124:	f006 f88c 	bl	8009240 <HAL_TIMEx_MasterConfigSynchronization>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800312e:	f000 f9bb 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200003f4 	.word	0x200003f4
 8003140:	40001000 	.word	0x40001000

08003144 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800314a:	463b      	mov	r3, r7
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <MX_TIM7_Init+0x64>)
 8003154:	4a15      	ldr	r2, [pc, #84]	; (80031ac <MX_TIM7_Init+0x68>)
 8003156:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 8003158:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <MX_TIM7_Init+0x64>)
 800315a:	2201      	movs	r2, #1
 800315c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315e:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <MX_TIM7_Init+0x64>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000-1;
 8003164:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <MX_TIM7_Init+0x64>)
 8003166:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800316a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800316c:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <MX_TIM7_Init+0x64>)
 800316e:	2200      	movs	r2, #0
 8003170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003172:	480d      	ldr	r0, [pc, #52]	; (80031a8 <MX_TIM7_Init+0x64>)
 8003174:	f004 fb86 	bl	8007884 <HAL_TIM_Base_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800317e:	f000 f993 	bl	80034a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800318a:	463b      	mov	r3, r7
 800318c:	4619      	mov	r1, r3
 800318e:	4806      	ldr	r0, [pc, #24]	; (80031a8 <MX_TIM7_Init+0x64>)
 8003190:	f006 f856 	bl	8009240 <HAL_TIMEx_MasterConfigSynchronization>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800319a:	f000 f985 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000043c 	.word	0x2000043c
 80031ac:	40001400 	.word	0x40001400

080031b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b096      	sub	sp, #88	; 0x58
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	609a      	str	r2, [r3, #8]
 80031da:	60da      	str	r2, [r3, #12]
 80031dc:	611a      	str	r2, [r3, #16]
 80031de:	615a      	str	r2, [r3, #20]
 80031e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	2220      	movs	r2, #32
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f008 f9b8 	bl	800b55e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80031ee:	4b44      	ldr	r3, [pc, #272]	; (8003300 <MX_TIM8_Init+0x150>)
 80031f0:	4a44      	ldr	r2, [pc, #272]	; (8003304 <MX_TIM8_Init+0x154>)
 80031f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80031f4:	4b42      	ldr	r3, [pc, #264]	; (8003300 <MX_TIM8_Init+0x150>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fa:	4b41      	ldr	r3, [pc, #260]	; (8003300 <MX_TIM8_Init+0x150>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7200-1;
 8003200:	4b3f      	ldr	r3, [pc, #252]	; (8003300 <MX_TIM8_Init+0x150>)
 8003202:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003206:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003208:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <MX_TIM8_Init+0x150>)
 800320a:	2200      	movs	r2, #0
 800320c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800320e:	4b3c      	ldr	r3, [pc, #240]	; (8003300 <MX_TIM8_Init+0x150>)
 8003210:	2200      	movs	r2, #0
 8003212:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003214:	4b3a      	ldr	r3, [pc, #232]	; (8003300 <MX_TIM8_Init+0x150>)
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800321a:	4839      	ldr	r0, [pc, #228]	; (8003300 <MX_TIM8_Init+0x150>)
 800321c:	f004 fb32 	bl	8007884 <HAL_TIM_Base_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003226:	f000 f93f 	bl	80034a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800322a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003230:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003234:	4619      	mov	r1, r3
 8003236:	4832      	ldr	r0, [pc, #200]	; (8003300 <MX_TIM8_Init+0x150>)
 8003238:	f005 fa92 	bl	8008760 <HAL_TIM_ConfigClockSource>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003242:	f000 f931 	bl	80034a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003246:	482e      	ldr	r0, [pc, #184]	; (8003300 <MX_TIM8_Init+0x150>)
 8003248:	f004 fc44 	bl	8007ad4 <HAL_TIM_PWM_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003252:	f000 f929 	bl	80034a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800325a:	2300      	movs	r3, #0
 800325c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800325e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003262:	4619      	mov	r1, r3
 8003264:	4826      	ldr	r0, [pc, #152]	; (8003300 <MX_TIM8_Init+0x150>)
 8003266:	f005 ffeb 	bl	8009240 <HAL_TIMEx_MasterConfigSynchronization>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003270:	f000 f91a 	bl	80034a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003274:	2360      	movs	r3, #96	; 0x60
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003280:	2300      	movs	r3, #0
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003288:	2300      	movs	r3, #0
 800328a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800328c:	2300      	movs	r3, #0
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003294:	2200      	movs	r2, #0
 8003296:	4619      	mov	r1, r3
 8003298:	4819      	ldr	r0, [pc, #100]	; (8003300 <MX_TIM8_Init+0x150>)
 800329a:	f005 f99f 	bl	80085dc <HAL_TIM_PWM_ConfigChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80032a4:	f000 f900 	bl	80034a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ac:	2204      	movs	r2, #4
 80032ae:	4619      	mov	r1, r3
 80032b0:	4813      	ldr	r0, [pc, #76]	; (8003300 <MX_TIM8_Init+0x150>)
 80032b2:	f005 f993 	bl	80085dc <HAL_TIM_PWM_ConfigChannel>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80032bc:	f000 f8f4 	bl	80034a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032da:	2300      	movs	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4807      	ldr	r0, [pc, #28]	; (8003300 <MX_TIM8_Init+0x150>)
 80032e4:	f006 f828 	bl	8009338 <HAL_TIMEx_ConfigBreakDeadTime>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80032ee:	f000 f8db 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80032f2:	4803      	ldr	r0, [pc, #12]	; (8003300 <MX_TIM8_Init+0x150>)
 80032f4:	f001 fc36 	bl	8004b64 <HAL_TIM_MspPostInit>

}
 80032f8:	bf00      	nop
 80032fa:	3758      	adds	r7, #88	; 0x58
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000484 	.word	0x20000484
 8003304:	40010400 	.word	0x40010400

08003308 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <MX_USART3_UART_Init+0x4c>)
 800330e:	4a12      	ldr	r2, [pc, #72]	; (8003358 <MX_USART3_UART_Init+0x50>)
 8003310:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <MX_USART3_UART_Init+0x4c>)
 8003314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003318:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800331a:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <MX_USART3_UART_Init+0x4c>)
 800331c:	2200      	movs	r2, #0
 800331e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <MX_USART3_UART_Init+0x4c>)
 8003322:	2200      	movs	r2, #0
 8003324:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <MX_USART3_UART_Init+0x4c>)
 8003328:	2200      	movs	r2, #0
 800332a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <MX_USART3_UART_Init+0x4c>)
 800332e:	220c      	movs	r2, #12
 8003330:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <MX_USART3_UART_Init+0x4c>)
 8003334:	2200      	movs	r2, #0
 8003336:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <MX_USART3_UART_Init+0x4c>)
 800333a:	2200      	movs	r2, #0
 800333c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800333e:	4805      	ldr	r0, [pc, #20]	; (8003354 <MX_USART3_UART_Init+0x4c>)
 8003340:	f006 f860 	bl	8009404 <HAL_UART_Init>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800334a:	f000 f8ad 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200004cc 	.word	0x200004cc
 8003358:	40004800 	.word	0x40004800

0800335c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	60da      	str	r2, [r3, #12]
 8003370:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	4b48      	ldr	r3, [pc, #288]	; (8003498 <MX_GPIO_Init+0x13c>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a47      	ldr	r2, [pc, #284]	; (8003498 <MX_GPIO_Init+0x13c>)
 800337c:	f043 0310 	orr.w	r3, r3, #16
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b45      	ldr	r3, [pc, #276]	; (8003498 <MX_GPIO_Init+0x13c>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <MX_GPIO_Init+0x13c>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	4a40      	ldr	r2, [pc, #256]	; (8003498 <MX_GPIO_Init+0x13c>)
 8003398:	f043 0304 	orr.w	r3, r3, #4
 800339c:	6313      	str	r3, [r2, #48]	; 0x30
 800339e:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <MX_GPIO_Init+0x13c>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <MX_GPIO_Init+0x13c>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	4a39      	ldr	r2, [pc, #228]	; (8003498 <MX_GPIO_Init+0x13c>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ba:	4b37      	ldr	r3, [pc, #220]	; (8003498 <MX_GPIO_Init+0x13c>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	4b33      	ldr	r3, [pc, #204]	; (8003498 <MX_GPIO_Init+0x13c>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a32      	ldr	r2, [pc, #200]	; (8003498 <MX_GPIO_Init+0x13c>)
 80033d0:	f043 0308 	orr.w	r3, r3, #8
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b30      	ldr	r3, [pc, #192]	; (8003498 <MX_GPIO_Init+0x13c>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <MX_GPIO_Init+0x13c>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a2b      	ldr	r2, [pc, #172]	; (8003498 <MX_GPIO_Init+0x13c>)
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b29      	ldr	r3, [pc, #164]	; (8003498 <MX_GPIO_Init+0x13c>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin, GPIO_PIN_RESET);
 80033fe:	2200      	movs	r2, #0
 8003400:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003404:	4825      	ldr	r0, [pc, #148]	; (800349c <MX_GPIO_Init+0x140>)
 8003406:	f002 fd7f 	bl	8005f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin, GPIO_PIN_RESET);
 800340a:	2200      	movs	r2, #0
 800340c:	213c      	movs	r1, #60	; 0x3c
 800340e:	4824      	ldr	r0, [pc, #144]	; (80034a0 <MX_GPIO_Init+0x144>)
 8003410:	f002 fd7a 	bl	8005f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8003414:	2200      	movs	r2, #0
 8003416:	2180      	movs	r1, #128	; 0x80
 8003418:	4822      	ldr	r0, [pc, #136]	; (80034a4 <MX_GPIO_Init+0x148>)
 800341a:	f002 fd75 	bl	8005f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET__Pin OLED_DATA_COMMAND__Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin;
 800341e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003424:	2301      	movs	r3, #1
 8003426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	4619      	mov	r1, r3
 8003436:	4819      	ldr	r0, [pc, #100]	; (800349c <MX_GPIO_Init+0x140>)
 8003438:	f002 fbb2 	bl	8005ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTORA_IN2_Pin MOTORA_IN1_Pin MOTORB_IN1_Pin MOTORB_IN2_Pin */
  GPIO_InitStruct.Pin = MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin;
 800343c:	233c      	movs	r3, #60	; 0x3c
 800343e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003440:	2301      	movs	r3, #1
 8003442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003448:	2300      	movs	r3, #0
 800344a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	4619      	mov	r1, r3
 8003452:	4813      	ldr	r0, [pc, #76]	; (80034a0 <MX_GPIO_Init+0x144>)
 8003454:	f002 fba4 	bl	8005ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8003458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800345c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003462:	2301      	movs	r3, #1
 8003464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8003466:	f107 0314 	add.w	r3, r7, #20
 800346a:	4619      	mov	r1, r3
 800346c:	480d      	ldr	r0, [pc, #52]	; (80034a4 <MX_GPIO_Init+0x148>)
 800346e:	f002 fb97 	bl	8005ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003476:	2301      	movs	r3, #1
 8003478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	2300      	movs	r3, #0
 8003480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4619      	mov	r1, r3
 8003488:	4806      	ldr	r0, [pc, #24]	; (80034a4 <MX_GPIO_Init+0x148>)
 800348a:	f002 fb89 	bl	8005ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800348e:	bf00      	nop
 8003490:	3728      	adds	r7, #40	; 0x28
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	40021000 	.word	0x40021000
 80034a0:	40020000 	.word	0x40020000
 80034a4:	40020c00 	.word	0x40020c00

080034a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034ac:	b672      	cpsid	i
}
 80034ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <Error_Handler+0x8>
	...

080034b4 <motor_init>:
static PidDef pidDistAway;
const static float Kp_distAway = 0.975;
const static float Ki_distAway = 0.00001;
const static float Kd_distAway = 0.13;

void motor_init(TIM_HandleTypeDef *pwm, TIM_HandleTypeDef *l_enc, TIM_HandleTypeDef *r_enc) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
	//assign timer pointers.
	motor_pwm_tim = pwm;
 80034c0:	4a24      	ldr	r2, [pc, #144]	; (8003554 <motor_init+0xa0>)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6013      	str	r3, [r2, #0]
	l_enc_tim = l_enc;
 80034c6:	4a24      	ldr	r2, [pc, #144]	; (8003558 <motor_init+0xa4>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6013      	str	r3, [r2, #0]
	r_enc_tim = r_enc;
 80034cc:	4a23      	ldr	r2, [pc, #140]	; (800355c <motor_init+0xa8>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6013      	str	r3, [r2, #0]

	//start Encoders and PWM for L, R motors.
	HAL_TIM_Encoder_Start_IT(l_enc, TIM_CHANNEL_ALL);
 80034d2:	213c      	movs	r1, #60	; 0x3c
 80034d4:	68b8      	ldr	r0, [r7, #8]
 80034d6:	f004 fe47 	bl	8008168 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(r_enc, TIM_CHANNEL_ALL);
 80034da:	213c      	movs	r1, #60	; 0x3c
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f004 fe43 	bl	8008168 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(pwm, L_CHANNEL);
 80034e2:	2100      	movs	r1, #0
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f004 fb4f 	bl	8007b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm, R_CHANNEL);
 80034ea:	2104      	movs	r1, #4
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f004 fb4b 	bl	8007b88 <HAL_TIM_PWM_Start>

	//initialize PID values.
	pid_init(&pidMatch, Kp_match, Ki_match, Kd_match);
 80034f2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8003560 <motor_init+0xac>
 80034f6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003564 <motor_init+0xb0>
 80034fa:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003568 <motor_init+0xb4>
 80034fe:	eeb0 1a66 	vmov.f32	s2, s13
 8003502:	eef0 0a47 	vmov.f32	s1, s14
 8003506:	eeb0 0a67 	vmov.f32	s0, s15
 800350a:	4818      	ldr	r0, [pc, #96]	; (800356c <motor_init+0xb8>)
 800350c:	f000 fd24 	bl	8003f58 <pid_init>
	pid_init(&pidDistTarget, Kp_distTarget, Ki_distTarget, Kd_distTarget);
 8003510:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003570 <motor_init+0xbc>
 8003514:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003574 <motor_init+0xc0>
 8003518:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003578 <motor_init+0xc4>
 800351c:	eeb0 1a66 	vmov.f32	s2, s13
 8003520:	eef0 0a47 	vmov.f32	s1, s14
 8003524:	eeb0 0a67 	vmov.f32	s0, s15
 8003528:	4814      	ldr	r0, [pc, #80]	; (800357c <motor_init+0xc8>)
 800352a:	f000 fd15 	bl	8003f58 <pid_init>
	pid_init(&pidDistAway, Kp_distAway, Ki_distAway, Kd_distAway);
 800352e:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003580 <motor_init+0xcc>
 8003532:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003584 <motor_init+0xd0>
 8003536:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003588 <motor_init+0xd4>
 800353a:	eeb0 1a66 	vmov.f32	s2, s13
 800353e:	eef0 0a47 	vmov.f32	s1, s14
 8003542:	eeb0 0a67 	vmov.f32	s0, s15
 8003546:	4811      	ldr	r0, [pc, #68]	; (800358c <motor_init+0xd8>)
 8003548:	f000 fd06 	bl	8003f58 <pid_init>
}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000584 	.word	0x20000584
 8003558:	20000588 	.word	0x20000588
 800355c:	2000058c 	.word	0x2000058c
 8003560:	466a6000 	.word	0x466a6000
 8003564:	44548000 	.word	0x44548000
 8003568:	461c4000 	.word	0x461c4000
 800356c:	20000598 	.word	0x20000598
 8003570:	3e570a3d 	.word	0x3e570a3d
 8003574:	3a6bedfa 	.word	0x3a6bedfa
 8003578:	3dcccccd 	.word	0x3dcccccd
 800357c:	200005ac 	.word	0x200005ac
 8003580:	3f79999a 	.word	0x3f79999a
 8003584:	3727c5ac 	.word	0x3727c5ac
 8003588:	3e051eb8 	.word	0x3e051eb8
 800358c:	200005c0 	.word	0x200005c0

08003590 <timer_reset>:

static void timer_reset(TIM_HandleTypeDef *htim) {
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <setPwmLR>:

static void setPwmLR() {
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
	//set L, R channels.
	__HAL_TIM_SetCompare(motor_pwm_tim, L_CHANNEL,
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <setPwmLR+0x40>)
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	f241 7270 	movw	r2, #6000	; 0x1770
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bf28      	it	cs
 80035bc:	4613      	movcs	r3, r2
 80035be:	b29a      	uxth	r2, r3
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <setPwmLR+0x44>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	635a      	str	r2, [r3, #52]	; 0x34
		lPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: lPwmVal);
	__HAL_TIM_SetCompare(motor_pwm_tim, R_CHANNEL,
 80035c8:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <setPwmLR+0x48>)
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	f241 7270 	movw	r2, #6000	; 0x1770
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bf28      	it	cs
 80035d4:	4613      	movcs	r3, r2
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <setPwmLR+0x44>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	639a      	str	r2, [r3, #56]	; 0x38
		rPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: rPwmVal);
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000594 	.word	0x20000594
 80035f0:	20000584 	.word	0x20000584
 80035f4:	20000596 	.word	0x20000596

080035f8 <resetPwmParams>:

static void resetPwmParams() {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
	pid_reset(&pidMatch);
 80035fc:	4805      	ldr	r0, [pc, #20]	; (8003614 <resetPwmParams+0x1c>)
 80035fe:	f000 fc99 	bl	8003f34 <pid_reset>
	pid_reset(&pidDistTarget);
 8003602:	4805      	ldr	r0, [pc, #20]	; (8003618 <resetPwmParams+0x20>)
 8003604:	f000 fc96 	bl	8003f34 <pid_reset>
	pid_reset(&pidDistAway);
 8003608:	4804      	ldr	r0, [pc, #16]	; (800361c <resetPwmParams+0x24>)
 800360a:	f000 fc93 	bl	8003f34 <pid_reset>
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000598 	.word	0x20000598
 8003618:	200005ac 	.word	0x200005ac
 800361c:	200005c0 	.word	0x200005c0

08003620 <resetEncoders>:

static void resetEncoders() {
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
	timer_reset(l_enc_tim);
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <resetEncoders+0x1c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ffb1 	bl	8003590 <timer_reset>
	timer_reset(r_enc_tim);
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <resetEncoders+0x20>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ffac 	bl	8003590 <timer_reset>
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000588 	.word	0x20000588
 8003640:	2000058c 	.word	0x2000058c

08003644 <getSpeedPwm>:

static uint16_t getSpeedPwm(uint8_t speed) {
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	71fb      	strb	r3, [r7, #7]
	uint16_t val = MOTOR_PWM_MAX / 100 * speed;
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	b29b      	uxth	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	81fb      	strh	r3, [r7, #14]
	if (val < MOTOR_PWM_MIN) val = MOTOR_PWM_MIN;
 800365c:	89fb      	ldrh	r3, [r7, #14]
 800365e:	2bf9      	cmp	r3, #249	; 0xf9
 8003660:	d801      	bhi.n	8003666 <getSpeedPwm+0x22>
 8003662:	23fa      	movs	r3, #250	; 0xfa
 8003664:	81fb      	strh	r3, [r7, #14]

	return val;
 8003666:	89fb      	ldrh	r3, [r7, #14]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <motor_getDist>:

float motor_getDist() {
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
	uint32_t lCounter = __HAL_TIM_GET_COUNTER(l_enc_tim),
 800367a:	4b18      	ldr	r3, [pc, #96]	; (80036dc <motor_getDist+0x68>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	60bb      	str	r3, [r7, #8]
			rCounter = __HAL_TIM_GET_COUNTER(r_enc_tim);
 8003684:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <motor_getDist+0x6c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	607b      	str	r3, [r7, #4]
	int16_t lCount = (int16_t) lCounter,
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	81fb      	strh	r3, [r7, #14]
			rCount = (int16_t) rCounter;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	81bb      	strh	r3, [r7, #12]
	if (lCount < 0) lCount = -lCount;
 8003696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800369a:	2b00      	cmp	r3, #0
 800369c:	da03      	bge.n	80036a6 <motor_getDist+0x32>
 800369e:	89fb      	ldrh	r3, [r7, #14]
 80036a0:	425b      	negs	r3, r3
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	81fb      	strh	r3, [r7, #14]
	if (rCount < 0) rCount = -rCount;
 80036a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da03      	bge.n	80036b6 <motor_getDist+0x42>
 80036ae:	89bb      	ldrh	r3, [r7, #12]
 80036b0:	425b      	negs	r3, r3
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	81bb      	strh	r3, [r7, #12]

	uint16_t pulses = ((uint16_t) lCount) + ((uint16_t) rCount);
 80036b6:	89fa      	ldrh	r2, [r7, #14]
 80036b8:	89bb      	ldrh	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	807b      	strh	r3, [r7, #2]
	pulses >>= 1;
 80036be:	887b      	ldrh	r3, [r7, #2]
 80036c0:	085b      	lsrs	r3, r3, #1
 80036c2:	807b      	strh	r3, [r7, #2]

	return get_distance_cm(pulses);
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe fc0a 	bl	8001ee0 <get_distance_cm>
 80036cc:	eef0 7a40 	vmov.f32	s15, s0
}
 80036d0:	eeb0 0a67 	vmov.f32	s0, s15
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000588 	.word	0x20000588
 80036e0:	2000058c 	.word	0x2000058c

080036e4 <motor_pwmCorrection>:

//PWM at fixed intervals.
void motor_pwmCorrection(float wDiff, float rBack, float rRobot, float distDiff, float brakingDist, CmdDistType distType, uint8_t speedNext) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	ed2d 8b02 	vpush	{d8}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80036f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80036f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80036fa:	edc7 1a02 	vstr	s3, [r7, #8]
 80036fe:	ed87 2a01 	vstr	s4, [r7, #4]
 8003702:	4603      	mov	r3, r0
 8003704:	460a      	mov	r2, r1
 8003706:	70fb      	strb	r3, [r7, #3]
 8003708:	4613      	mov	r3, r2
 800370a:	70bb      	strb	r3, [r7, #2]
	//adjust speed based on distance to drive.
	if (distDiff < brakingDist) {
 800370c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003710:	edd7 7a01 	vldr	s15, [r7, #4]
 8003714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371c:	d538      	bpl.n	8003790 <motor_pwmCorrection+0xac>
		PidDef *pidBrake = distType == TARGET ? &pidDistTarget : &pidDistAway;
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <motor_pwmCorrection+0x44>
 8003724:	4ba1      	ldr	r3, [pc, #644]	; (80039ac <motor_pwmCorrection+0x2c8>)
 8003726:	e000      	b.n	800372a <motor_pwmCorrection+0x46>
 8003728:	4ba1      	ldr	r3, [pc, #644]	; (80039b0 <motor_pwmCorrection+0x2cc>)
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint16_t pwmValNext = getSpeedPwm(speedNext);
 800372c:	78bb      	ldrb	r3, [r7, #2]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ff88 	bl	8003644 <getSpeedPwm>
 8003734:	4603      	mov	r3, r0
 8003736:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (pwmValNext < pwmValTarget) pwmValAccel = pwmValNext + pid_adjust(pidBrake, distDiff, 1) / brakingDist * (pwmValTarget - pwmValNext);
 8003738:	4b9e      	ldr	r3, [pc, #632]	; (80039b4 <motor_pwmCorrection+0x2d0>)
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800373e:	429a      	cmp	r2, r3
 8003740:	d232      	bcs.n	80037a8 <motor_pwmCorrection+0xc4>
 8003742:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800374c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003750:	ed97 0a02 	vldr	s0, [r7, #8]
 8003754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003756:	f000 fc19 	bl	8003f8c <pid_adjust>
 800375a:	eef0 6a40 	vmov.f32	s13, s0
 800375e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003766:	4b93      	ldr	r3, [pc, #588]	; (80039b4 <motor_pwmCorrection+0x2d0>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003784:	ee17 3a90 	vmov	r3, s15
 8003788:	b29a      	uxth	r2, r3
 800378a:	4b8b      	ldr	r3, [pc, #556]	; (80039b8 <motor_pwmCorrection+0x2d4>)
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	e00b      	b.n	80037a8 <motor_pwmCorrection+0xc4>
	} else if (pwmValAccel < pwmValTarget) pwmValAccel += MOTOR_PWM_ACCEL;
 8003790:	4b89      	ldr	r3, [pc, #548]	; (80039b8 <motor_pwmCorrection+0x2d4>)
 8003792:	881a      	ldrh	r2, [r3, #0]
 8003794:	4b87      	ldr	r3, [pc, #540]	; (80039b4 <motor_pwmCorrection+0x2d0>)
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d205      	bcs.n	80037a8 <motor_pwmCorrection+0xc4>
 800379c:	4b86      	ldr	r3, [pc, #536]	; (80039b8 <motor_pwmCorrection+0x2d4>)
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	330f      	adds	r3, #15
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	4b84      	ldr	r3, [pc, #528]	; (80039b8 <motor_pwmCorrection+0x2d4>)
 80037a6:	801a      	strh	r2, [r3, #0]
	if (pwmValAccel > pwmValTarget) pwmValAccel = pwmValTarget;
 80037a8:	4b83      	ldr	r3, [pc, #524]	; (80039b8 <motor_pwmCorrection+0x2d4>)
 80037aa:	881a      	ldrh	r2, [r3, #0]
 80037ac:	4b81      	ldr	r3, [pc, #516]	; (80039b4 <motor_pwmCorrection+0x2d0>)
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d903      	bls.n	80037bc <motor_pwmCorrection+0xd8>
 80037b4:	4b7f      	ldr	r3, [pc, #508]	; (80039b4 <motor_pwmCorrection+0x2d0>)
 80037b6:	881a      	ldrh	r2, [r3, #0]
 80037b8:	4b7f      	ldr	r3, [pc, #508]	; (80039b8 <motor_pwmCorrection+0x2d4>)
 80037ba:	801a      	strh	r2, [r3, #0]

	float offset = pid_adjust(&pidMatch, wDiff, 1) * pwmValAccel / pwmValTarget;
 80037bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80037c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80037c4:	487d      	ldr	r0, [pc, #500]	; (80039bc <motor_pwmCorrection+0x2d8>)
 80037c6:	f000 fbe1 	bl	8003f8c <pid_adjust>
 80037ca:	eeb0 7a40 	vmov.f32	s14, s0
 80037ce:	4b7a      	ldr	r3, [pc, #488]	; (80039b8 <motor_pwmCorrection+0x2d4>)
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037da:	ee67 6a27 	vmul.f32	s13, s14, s15
 80037de:	4b75      	ldr	r3, [pc, #468]	; (80039b4 <motor_pwmCorrection+0x2d0>)
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//	float offset = 0;
	float lScale = 1, rScale = 1;
 80037f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
 80037f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30

	if (rBack != 0 && rRobot != 0) {
 80037fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003802:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380a:	d04d      	beq.n	80038a8 <motor_pwmCorrection+0x1c4>
 800380c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003810:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003818:	d046      	beq.n	80038a8 <motor_pwmCorrection+0x1c4>
		float B2 = WHEELBASE_CM / 2;
 800381a:	4b69      	ldr	r3, [pc, #420]	; (80039c0 <motor_pwmCorrection+0x2dc>)
 800381c:	623b      	str	r3, [r7, #32]

		if (rBack < 0 && rRobot < 0) {
 800381e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382a:	d525      	bpl.n	8003878 <motor_pwmCorrection+0x194>
 800382c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003830:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003838:	d51e      	bpl.n	8003878 <motor_pwmCorrection+0x194>
			lScale = (-rBack - B2) / -rRobot;
 800383a:	edd7 7a04 	vldr	s15, [r7, #16]
 800383e:	eeb1 7a67 	vneg.f32	s14, s15
 8003842:	edd7 7a08 	vldr	s15, [r7, #32]
 8003846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800384a:	eef1 6a67 	vneg.f32	s13, s15
 800384e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003856:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			rScale = (-rBack + B2) / -rRobot;
 800385a:	ed97 7a08 	vldr	s14, [r7, #32]
 800385e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003866:	eef1 6a67 	vneg.f32	s13, s15
 800386a:	ed97 7a03 	vldr	s14, [r7, #12]
 800386e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003872:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8003876:	e017      	b.n	80038a8 <motor_pwmCorrection+0x1c4>
		} else {
			lScale = (rBack + B2) / rRobot;
 8003878:	ed97 7a04 	vldr	s14, [r7, #16]
 800387c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003880:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003884:	ed97 7a03 	vldr	s14, [r7, #12]
 8003888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800388c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			rScale = (rBack - B2) / rRobot;
 8003890:	ed97 7a04 	vldr	s14, [r7, #16]
 8003894:	edd7 7a08 	vldr	s15, [r7, #32]
 8003898:	ee77 6a67 	vsub.f32	s13, s14, s15
 800389c:	ed97 7a03 	vldr	s14, [r7, #12]
 80038a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		}
	}

	lPwmVal = pwmValAccel * lScale - offset;
 80038a8:	4b43      	ldr	r3, [pc, #268]	; (80039b8 <motor_pwmCorrection+0x2d4>)
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80038b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c8:	ee17 3a90 	vmov	r3, s15
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <motor_pwmCorrection+0x2e0>)
 80038d0:	801a      	strh	r2, [r3, #0]
	rPwmVal = pwmValAccel * rScale + offset;
 80038d2:	4b39      	ldr	r3, [pc, #228]	; (80039b8 <motor_pwmCorrection+0x2d4>)
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80038e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f2:	ee17 3a90 	vmov	r3, s15
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	4b33      	ldr	r3, [pc, #204]	; (80039c8 <motor_pwmCorrection+0x2e4>)
 80038fa:	801a      	strh	r2, [r3, #0]

	if (lPwmVal > MOTOR_PWM_MAX || rPwmVal > MOTOR_PWM_MAX) {
 80038fc:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <motor_pwmCorrection+0x2e0>)
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	f241 7270 	movw	r2, #6000	; 0x1770
 8003904:	4293      	cmp	r3, r2
 8003906:	d805      	bhi.n	8003914 <motor_pwmCorrection+0x230>
 8003908:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <motor_pwmCorrection+0x2e4>)
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	f241 7270 	movw	r2, #6000	; 0x1770
 8003910:	4293      	cmp	r3, r2
 8003912:	d942      	bls.n	800399a <motor_pwmCorrection+0x2b6>
		float scale;
		if (lPwmVal > rPwmVal) {
 8003914:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <motor_pwmCorrection+0x2e0>)
 8003916:	881a      	ldrh	r2, [r3, #0]
 8003918:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <motor_pwmCorrection+0x2e4>)
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d91e      	bls.n	800395e <motor_pwmCorrection+0x27a>
			scale = rPwmVal / lPwmVal;
 8003920:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <motor_pwmCorrection+0x2e4>)
 8003922:	881a      	ldrh	r2, [r3, #0]
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <motor_pwmCorrection+0x2e0>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	b29b      	uxth	r3, r3
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
			lPwmVal = MOTOR_PWM_MAX;
 800393a:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <motor_pwmCorrection+0x2e0>)
 800393c:	f241 7270 	movw	r2, #6000	; 0x1770
 8003940:	801a      	strh	r2, [r3, #0]
			rPwmVal = MOTOR_PWM_MAX * scale;
 8003942:	edd7 7a07 	vldr	s15, [r7, #28]
 8003946:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80039cc <motor_pwmCorrection+0x2e8>
 800394a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800394e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003952:	ee17 3a90 	vmov	r3, s15
 8003956:	b29a      	uxth	r2, r3
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <motor_pwmCorrection+0x2e4>)
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	e01d      	b.n	800399a <motor_pwmCorrection+0x2b6>
		} else {
			scale = lPwmVal / rPwmVal;
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <motor_pwmCorrection+0x2e0>)
 8003960:	881a      	ldrh	r2, [r3, #0]
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <motor_pwmCorrection+0x2e4>)
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	fbb2 f3f3 	udiv	r3, r2, r3
 800396a:	b29b      	uxth	r3, r3
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003974:	edc7 7a07 	vstr	s15, [r7, #28]
			lPwmVal = MOTOR_PWM_MAX * scale;
 8003978:	edd7 7a07 	vldr	s15, [r7, #28]
 800397c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80039cc <motor_pwmCorrection+0x2e8>
 8003980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003988:	ee17 3a90 	vmov	r3, s15
 800398c:	b29a      	uxth	r2, r3
 800398e:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <motor_pwmCorrection+0x2e0>)
 8003990:	801a      	strh	r2, [r3, #0]
			rPwmVal = MOTOR_PWM_MAX;
 8003992:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <motor_pwmCorrection+0x2e4>)
 8003994:	f241 7270 	movw	r2, #6000	; 0x1770
 8003998:	801a      	strh	r2, [r3, #0]
		}
	}

	setPwmLR();
 800399a:	f7ff fe07 	bl	80035ac <setPwmLR>
}
 800399e:	bf00      	nop
 80039a0:	3738      	adds	r7, #56	; 0x38
 80039a2:	46bd      	mov	sp, r7
 80039a4:	ecbd 8b02 	vpop	{d8}
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200005ac 	.word	0x200005ac
 80039b0:	200005c0 	.word	0x200005c0
 80039b4:	20000592 	.word	0x20000592
 80039b8:	20000590 	.word	0x20000590
 80039bc:	20000598 	.word	0x20000598
 80039c0:	4101999a 	.word	0x4101999a
 80039c4:	20000594 	.word	0x20000594
 80039c8:	20000596 	.word	0x20000596
 80039cc:	45bb8000 	.word	0x45bb8000

080039d0 <setDriveDir>:

static void setDriveDir(int8_t dir) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
	if (dir > 0) {
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	dd14      	ble.n	8003a0c <setDriveDir+0x3c>
		//forward.
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_SET);
 80039e2:	2201      	movs	r2, #1
 80039e4:	2108      	movs	r1, #8
 80039e6:	4822      	ldr	r0, [pc, #136]	; (8003a70 <setDriveDir+0xa0>)
 80039e8:	f002 fa8e 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
 80039ec:	2200      	movs	r2, #0
 80039ee:	2104      	movs	r1, #4
 80039f0:	481f      	ldr	r0, [pc, #124]	; (8003a70 <setDriveDir+0xa0>)
 80039f2:	f002 fa89 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_SET);
 80039f6:	2201      	movs	r2, #1
 80039f8:	2110      	movs	r1, #16
 80039fa:	481d      	ldr	r0, [pc, #116]	; (8003a70 <setDriveDir+0xa0>)
 80039fc:	f002 fa84 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8003a00:	2200      	movs	r2, #0
 8003a02:	2120      	movs	r1, #32
 8003a04:	481a      	ldr	r0, [pc, #104]	; (8003a70 <setDriveDir+0xa0>)
 8003a06:	f002 fa7f 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
	}
}
 8003a0a:	e02c      	b.n	8003a66 <setDriveDir+0x96>
	} else if (dir < 0) {
 8003a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da14      	bge.n	8003a3e <setDriveDir+0x6e>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
 8003a14:	2200      	movs	r2, #0
 8003a16:	2108      	movs	r1, #8
 8003a18:	4815      	ldr	r0, [pc, #84]	; (8003a70 <setDriveDir+0xa0>)
 8003a1a:	f002 fa75 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_SET);
 8003a1e:	2201      	movs	r2, #1
 8003a20:	2104      	movs	r1, #4
 8003a22:	4813      	ldr	r0, [pc, #76]	; (8003a70 <setDriveDir+0xa0>)
 8003a24:	f002 fa70 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2110      	movs	r1, #16
 8003a2c:	4810      	ldr	r0, [pc, #64]	; (8003a70 <setDriveDir+0xa0>)
 8003a2e:	f002 fa6b 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_SET);
 8003a32:	2201      	movs	r2, #1
 8003a34:	2120      	movs	r1, #32
 8003a36:	480e      	ldr	r0, [pc, #56]	; (8003a70 <setDriveDir+0xa0>)
 8003a38:	f002 fa66 	bl	8005f08 <HAL_GPIO_WritePin>
}
 8003a3c:	e013      	b.n	8003a66 <setDriveDir+0x96>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2108      	movs	r1, #8
 8003a42:	480b      	ldr	r0, [pc, #44]	; (8003a70 <setDriveDir+0xa0>)
 8003a44:	f002 fa60 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2104      	movs	r1, #4
 8003a4c:	4808      	ldr	r0, [pc, #32]	; (8003a70 <setDriveDir+0xa0>)
 8003a4e:	f002 fa5b 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
 8003a52:	2200      	movs	r2, #0
 8003a54:	2110      	movs	r1, #16
 8003a56:	4806      	ldr	r0, [pc, #24]	; (8003a70 <setDriveDir+0xa0>)
 8003a58:	f002 fa56 	bl	8005f08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2120      	movs	r1, #32
 8003a60:	4803      	ldr	r0, [pc, #12]	; (8003a70 <setDriveDir+0xa0>)
 8003a62:	f002 fa51 	bl	8005f08 <HAL_GPIO_WritePin>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40020000 	.word	0x40020000

08003a74 <motor_setDrive>:

//speed: 0 - 100
void motor_setDrive(int8_t dir, uint8_t speed) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	460a      	mov	r2, r1
 8003a7e:	71fb      	strb	r3, [r7, #7]
 8003a80:	4613      	mov	r3, r2
 8003a82:	71bb      	strb	r3, [r7, #6]
	if (dir == 0) {
 8003a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <motor_setDrive+0x26>
		setDriveDir(0);
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f7ff ff9f 	bl	80039d0 <setDriveDir>
		pwmValAccel = 0;
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <motor_setDrive+0x54>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	801a      	strh	r2, [r3, #0]
		return;
 8003a98:	e012      	b.n	8003ac0 <motor_setDrive+0x4c>
	}

	//derive PWM value.
	pwmValTarget = getSpeedPwm(speed);
 8003a9a:	79bb      	ldrb	r3, [r7, #6]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fdd1 	bl	8003644 <getSpeedPwm>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <motor_setDrive+0x58>)
 8003aa8:	801a      	strh	r2, [r3, #0]
//		? MOTOR_PWM_MIN
//		: 0;
//	lPwmVal = rPwmVal = pwmValAccel;

	//reset.
	resetEncoders();
 8003aaa:	f7ff fdb9 	bl	8003620 <resetEncoders>
	resetPwmParams();
 8003aae:	f7ff fda3 	bl	80035f8 <resetPwmParams>

	setDriveDir(dir);
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff8a 	bl	80039d0 <setDriveDir>
	setPwmLR();
 8003abc:	f7ff fd76 	bl	80035ac <setPwmLR>
}
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000590 	.word	0x20000590
 8003acc:	20000592 	.word	0x20000592

08003ad0 <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460a      	mov	r2, r1
 8003ada:	71fb      	strb	r3, [r7, #7]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 8003ae0:	79bb      	ldrb	r3, [r7, #6]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d106      	bne.n	8003af4 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003aec:	481c      	ldr	r0, [pc, #112]	; (8003b60 <OLED_WR_Byte+0x90>)
 8003aee:	f002 fa0b 	bl	8005f08 <HAL_GPIO_WritePin>
 8003af2:	e005      	b.n	8003b00 <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 8003af4:	2200      	movs	r2, #0
 8003af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003afa:	4819      	ldr	r0, [pc, #100]	; (8003b60 <OLED_WR_Byte+0x90>)
 8003afc:	f002 fa04 	bl	8005f08 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 8003b00:	2300      	movs	r3, #0
 8003b02:	73fb      	strb	r3, [r7, #15]
 8003b04:	e01f      	b.n	8003b46 <OLED_WR_Byte+0x76>
	{ // Complete the code below
		OLED_SCLK_Clr();
 8003b06:	2200      	movs	r2, #0
 8003b08:	2120      	movs	r1, #32
 8003b0a:	4815      	ldr	r0, [pc, #84]	; (8003b60 <OLED_WR_Byte+0x90>)
 8003b0c:	f002 f9fc 	bl	8005f08 <HAL_GPIO_WritePin>
		if (dat & (0x80 >> i)) OLED_SDIN_Set();
 8003b10:	79fa      	ldrb	r2, [r7, #7]
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2180      	movs	r1, #128	; 0x80
 8003b16:	fa41 f303 	asr.w	r3, r1, r3
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <OLED_WR_Byte+0x5c>
 8003b20:	2201      	movs	r2, #1
 8003b22:	2140      	movs	r1, #64	; 0x40
 8003b24:	480e      	ldr	r0, [pc, #56]	; (8003b60 <OLED_WR_Byte+0x90>)
 8003b26:	f002 f9ef 	bl	8005f08 <HAL_GPIO_WritePin>
 8003b2a:	e004      	b.n	8003b36 <OLED_WR_Byte+0x66>
		else OLED_SDIN_Clr();
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2140      	movs	r1, #64	; 0x40
 8003b30:	480b      	ldr	r0, [pc, #44]	; (8003b60 <OLED_WR_Byte+0x90>)
 8003b32:	f002 f9e9 	bl	8005f08 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8003b36:	2201      	movs	r2, #1
 8003b38:	2120      	movs	r1, #32
 8003b3a:	4809      	ldr	r0, [pc, #36]	; (8003b60 <OLED_WR_Byte+0x90>)
 8003b3c:	f002 f9e4 	bl	8005f08 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	3301      	adds	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	2b07      	cmp	r3, #7
 8003b4a:	d9dc      	bls.n	8003b06 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b52:	4803      	ldr	r0, [pc, #12]	; (8003b60 <OLED_WR_Byte+0x90>)
 8003b54:	f002 f9d8 	bl	8005f08 <HAL_GPIO_WritePin>
} 
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40021000 	.word	0x40021000

08003b64 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	71fb      	strb	r3, [r7, #7]
 8003b6e:	e026      	b.n	8003bbe <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	3b50      	subs	r3, #80	; 0x50
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff ffa9 	bl	8003ad0 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 8003b7e:	2100      	movs	r1, #0
 8003b80:	2000      	movs	r0, #0
 8003b82:	f7ff ffa5 	bl	8003ad0 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8003b86:	2100      	movs	r1, #0
 8003b88:	2010      	movs	r0, #16
 8003b8a:	f7ff ffa1 	bl	8003ad0 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	71bb      	strb	r3, [r7, #6]
 8003b92:	e00d      	b.n	8003bb0 <OLED_Refresh_Gram+0x4c>
 8003b94:	79ba      	ldrb	r2, [r7, #6]
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	490d      	ldr	r1, [pc, #52]	; (8003bd0 <OLED_Refresh_Gram+0x6c>)
 8003b9a:	00d2      	lsls	r2, r2, #3
 8003b9c:	440a      	add	r2, r1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff93 	bl	8003ad0 <OLED_WR_Byte>
 8003baa:	79bb      	ldrb	r3, [r7, #6]
 8003bac:	3301      	adds	r3, #1
 8003bae:	71bb      	strb	r3, [r7, #6]
 8003bb0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	daed      	bge.n	8003b94 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	71fb      	strb	r3, [r7, #7]
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	2b07      	cmp	r3, #7
 8003bc2:	d9d5      	bls.n	8003b70 <OLED_Refresh_Gram+0xc>
	}
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	200005d4 	.word	0x200005d4

08003bd4 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8003bda:	2300      	movs	r3, #0
 8003bdc:	71fb      	strb	r3, [r7, #7]
 8003bde:	e014      	b.n	8003c0a <OLED_Clear+0x36>
 8003be0:	2300      	movs	r3, #0
 8003be2:	71bb      	strb	r3, [r7, #6]
 8003be4:	e00a      	b.n	8003bfc <OLED_Clear+0x28>
 8003be6:	79ba      	ldrb	r2, [r7, #6]
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	490c      	ldr	r1, [pc, #48]	; (8003c1c <OLED_Clear+0x48>)
 8003bec:	00d2      	lsls	r2, r2, #3
 8003bee:	440a      	add	r2, r1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	79bb      	ldrb	r3, [r7, #6]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	71bb      	strb	r3, [r7, #6]
 8003bfc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	daf0      	bge.n	8003be6 <OLED_Clear+0x12>
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	3301      	adds	r3, #1
 8003c08:	71fb      	strb	r3, [r7, #7]
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	2b07      	cmp	r3, #7
 8003c0e:	d9e7      	bls.n	8003be0 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003c10:	f7ff ffa8 	bl	8003b64 <OLED_Refresh_Gram>
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	200005d4 	.word	0x200005d4

08003c20 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	71bb      	strb	r3, [r7, #6]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	db41      	blt.n	8003cc2 <OLED_DrawPoint+0xa2>
 8003c3e:	79bb      	ldrb	r3, [r7, #6]
 8003c40:	2b3f      	cmp	r3, #63	; 0x3f
 8003c42:	d83e      	bhi.n	8003cc2 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003c44:	79bb      	ldrb	r3, [r7, #6]
 8003c46:	08db      	lsrs	r3, r3, #3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f1c3 0307 	rsb	r3, r3, #7
 8003c4e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003c50:	79bb      	ldrb	r3, [r7, #6]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003c58:	7b7b      	ldrb	r3, [r7, #13]
 8003c5a:	f1c3 0307 	rsb	r3, r3, #7
 8003c5e:	2201      	movs	r2, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8003c66:	797b      	ldrb	r3, [r7, #5]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d012      	beq.n	8003c92 <OLED_DrawPoint+0x72>
 8003c6c:	79fa      	ldrb	r2, [r7, #7]
 8003c6e:	7bbb      	ldrb	r3, [r7, #14]
 8003c70:	4917      	ldr	r1, [pc, #92]	; (8003cd0 <OLED_DrawPoint+0xb0>)
 8003c72:	00d2      	lsls	r2, r2, #3
 8003c74:	440a      	add	r2, r1
 8003c76:	4413      	add	r3, r2
 8003c78:	7818      	ldrb	r0, [r3, #0]
 8003c7a:	79fa      	ldrb	r2, [r7, #7]
 8003c7c:	7bbb      	ldrb	r3, [r7, #14]
 8003c7e:	7bf9      	ldrb	r1, [r7, #15]
 8003c80:	4301      	orrs	r1, r0
 8003c82:	b2c8      	uxtb	r0, r1
 8003c84:	4912      	ldr	r1, [pc, #72]	; (8003cd0 <OLED_DrawPoint+0xb0>)
 8003c86:	00d2      	lsls	r2, r2, #3
 8003c88:	440a      	add	r2, r1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	e018      	b.n	8003cc4 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003c92:	79fa      	ldrb	r2, [r7, #7]
 8003c94:	7bbb      	ldrb	r3, [r7, #14]
 8003c96:	490e      	ldr	r1, [pc, #56]	; (8003cd0 <OLED_DrawPoint+0xb0>)
 8003c98:	00d2      	lsls	r2, r2, #3
 8003c9a:	440a      	add	r2, r1
 8003c9c:	4413      	add	r3, r2
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	b25a      	sxtb	r2, r3
 8003ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	b25b      	sxtb	r3, r3
 8003caa:	4013      	ands	r3, r2
 8003cac:	b259      	sxtb	r1, r3
 8003cae:	79fa      	ldrb	r2, [r7, #7]
 8003cb0:	7bbb      	ldrb	r3, [r7, #14]
 8003cb2:	b2c8      	uxtb	r0, r1
 8003cb4:	4906      	ldr	r1, [pc, #24]	; (8003cd0 <OLED_DrawPoint+0xb0>)
 8003cb6:	00d2      	lsls	r2, r2, #3
 8003cb8:	440a      	add	r2, r1
 8003cba:	4413      	add	r3, r2
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e000      	b.n	8003cc4 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003cc2:	bf00      	nop
}
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	200005d4 	.word	0x200005d4

08003cd4 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4604      	mov	r4, r0
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4623      	mov	r3, r4
 8003ce4:	71fb      	strb	r3, [r7, #7]
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71bb      	strb	r3, [r7, #6]
 8003cea:	460b      	mov	r3, r1
 8003cec:	717b      	strb	r3, [r7, #5]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8003cf2:	79bb      	ldrb	r3, [r7, #6]
 8003cf4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8003cf6:	797b      	ldrb	r3, [r7, #5]
 8003cf8:	3b20      	subs	r3, #32
 8003cfa:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	73bb      	strb	r3, [r7, #14]
 8003d00:	e04d      	b.n	8003d9e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8003d02:	793b      	ldrb	r3, [r7, #4]
 8003d04:	2b0c      	cmp	r3, #12
 8003d06:	d10b      	bne.n	8003d20 <OLED_ShowChar+0x4c>
 8003d08:	797a      	ldrb	r2, [r7, #5]
 8003d0a:	7bb9      	ldrb	r1, [r7, #14]
 8003d0c:	4828      	ldr	r0, [pc, #160]	; (8003db0 <OLED_ShowChar+0xdc>)
 8003d0e:	4613      	mov	r3, r2
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4403      	add	r3, r0
 8003d18:	440b      	add	r3, r1
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	e007      	b.n	8003d30 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003d20:	797a      	ldrb	r2, [r7, #5]
 8003d22:	7bbb      	ldrb	r3, [r7, #14]
 8003d24:	4923      	ldr	r1, [pc, #140]	; (8003db4 <OLED_ShowChar+0xe0>)
 8003d26:	0112      	lsls	r2, r2, #4
 8003d28:	440a      	add	r2, r1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003d30:	2300      	movs	r3, #0
 8003d32:	737b      	strb	r3, [r7, #13]
 8003d34:	e02d      	b.n	8003d92 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	da07      	bge.n	8003d4e <OLED_ShowChar+0x7a>
 8003d3e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003d42:	79b9      	ldrb	r1, [r7, #6]
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ff6a 	bl	8003c20 <OLED_DrawPoint>
 8003d4c:	e00c      	b.n	8003d68 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8003d4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bf0c      	ite	eq
 8003d56:	2301      	moveq	r3, #1
 8003d58:	2300      	movne	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	79b9      	ldrb	r1, [r7, #6]
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff ff5c 	bl	8003c20 <OLED_DrawPoint>
			temp<<=1;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
			y++;
 8003d6e:	79bb      	ldrb	r3, [r7, #6]
 8003d70:	3301      	adds	r3, #1
 8003d72:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003d74:	79ba      	ldrb	r2, [r7, #6]
 8003d76:	7b3b      	ldrb	r3, [r7, #12]
 8003d78:	1ad2      	subs	r2, r2, r3
 8003d7a:	793b      	ldrb	r3, [r7, #4]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d105      	bne.n	8003d8c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003d80:	7b3b      	ldrb	r3, [r7, #12]
 8003d82:	71bb      	strb	r3, [r7, #6]
				x++;
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	3301      	adds	r3, #1
 8003d88:	71fb      	strb	r3, [r7, #7]
				break;
 8003d8a:	e005      	b.n	8003d98 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8003d8c:	7b7b      	ldrb	r3, [r7, #13]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	737b      	strb	r3, [r7, #13]
 8003d92:	7b7b      	ldrb	r3, [r7, #13]
 8003d94:	2b07      	cmp	r3, #7
 8003d96:	d9ce      	bls.n	8003d36 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8003d98:	7bbb      	ldrb	r3, [r7, #14]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	73bb      	strb	r3, [r7, #14]
 8003d9e:	7bba      	ldrb	r2, [r7, #14]
 8003da0:	793b      	ldrb	r3, [r7, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3ad      	bcc.n	8003d02 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd90      	pop	{r4, r7, pc}
 8003db0:	0801145c 	.word	0x0801145c
 8003db4:	080118d0 	.word	0x080118d0

08003db8 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	603a      	str	r2, [r7, #0]
 8003dc2:	71fb      	strb	r3, [r7, #7]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003dc8:	e01f      	b.n	8003e0a <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	2b7a      	cmp	r3, #122	; 0x7a
 8003dce:	d904      	bls.n	8003dda <OLED_ShowString+0x22>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	71fb      	strb	r3, [r7, #7]
 8003dd4:	79bb      	ldrb	r3, [r7, #6]
 8003dd6:	3310      	adds	r3, #16
 8003dd8:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8003dda:	79bb      	ldrb	r3, [r7, #6]
 8003ddc:	2b3a      	cmp	r3, #58	; 0x3a
 8003dde:	d905      	bls.n	8003dec <OLED_ShowString+0x34>
 8003de0:	2300      	movs	r3, #0
 8003de2:	71fb      	strb	r3, [r7, #7]
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	71bb      	strb	r3, [r7, #6]
 8003de8:	f7ff fef4 	bl	8003bd4 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781a      	ldrb	r2, [r3, #0]
 8003df0:	79b9      	ldrb	r1, [r7, #6]
 8003df2:	79f8      	ldrb	r0, [r7, #7]
 8003df4:	2301      	movs	r3, #1
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	230c      	movs	r3, #12
 8003dfa:	f7ff ff6b 	bl	8003cd4 <OLED_ShowChar>
        x+=8;
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	3308      	adds	r3, #8
 8003e02:	71fb      	strb	r3, [r7, #7]
        p++;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	3301      	adds	r3, #1
 8003e08:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1db      	bne.n	8003dca <OLED_ShowString+0x12>
    }  
}	 
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <OLED_Init>:

void OLED_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003e20:	f003 f8b0 	bl	8006f84 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003e24:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <OLED_Init+0x110>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <OLED_Init+0x110>)
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e30:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <OLED_Init+0x110>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a3d      	ldr	r2, [pc, #244]	; (8003f2c <OLED_Init+0x110>)
 8003e36:	f023 0304 	bic.w	r3, r3, #4
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8003e3c:	f003 f8b6 	bl	8006fac <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003e40:	2200      	movs	r2, #0
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	483a      	ldr	r0, [pc, #232]	; (8003f30 <OLED_Init+0x114>)
 8003e46:	f002 f85f 	bl	8005f08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003e4a:	2064      	movs	r0, #100	; 0x64
 8003e4c:	f001 f914 	bl	8005078 <HAL_Delay>
	OLED_RST_Set();
 8003e50:	2201      	movs	r2, #1
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	4836      	ldr	r0, [pc, #216]	; (8003f30 <OLED_Init+0x114>)
 8003e56:	f002 f857 	bl	8005f08 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	20ae      	movs	r0, #174	; 0xae
 8003e5e:	f7ff fe37 	bl	8003ad0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003e62:	2100      	movs	r1, #0
 8003e64:	20d5      	movs	r0, #213	; 0xd5
 8003e66:	f7ff fe33 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	2050      	movs	r0, #80	; 0x50
 8003e6e:	f7ff fe2f 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003e72:	2100      	movs	r1, #0
 8003e74:	20a8      	movs	r0, #168	; 0xa8
 8003e76:	f7ff fe2b 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	203f      	movs	r0, #63	; 0x3f
 8003e7e:	f7ff fe27 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003e82:	2100      	movs	r1, #0
 8003e84:	20d3      	movs	r0, #211	; 0xd3
 8003e86:	f7ff fe23 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7ff fe1f 	bl	8003ad0 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003e92:	2100      	movs	r1, #0
 8003e94:	2040      	movs	r0, #64	; 0x40
 8003e96:	f7ff fe1b 	bl	8003ad0 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	208d      	movs	r0, #141	; 0x8d
 8003e9e:	f7ff fe17 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	2014      	movs	r0, #20
 8003ea6:	f7ff fe13 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8003eaa:	2100      	movs	r1, #0
 8003eac:	2020      	movs	r0, #32
 8003eae:	f7ff fe0f 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	2002      	movs	r0, #2
 8003eb6:	f7ff fe0b 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8003eba:	2100      	movs	r1, #0
 8003ebc:	20a1      	movs	r0, #161	; 0xa1
 8003ebe:	f7ff fe07 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	20c0      	movs	r0, #192	; 0xc0
 8003ec6:	f7ff fe03 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8003eca:	2100      	movs	r1, #0
 8003ecc:	20da      	movs	r0, #218	; 0xda
 8003ece:	f7ff fdff 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	2012      	movs	r0, #18
 8003ed6:	f7ff fdfb 	bl	8003ad0 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8003eda:	2100      	movs	r1, #0
 8003edc:	2081      	movs	r0, #129	; 0x81
 8003ede:	f7ff fdf7 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	20ef      	movs	r0, #239	; 0xef
 8003ee6:	f7ff fdf3 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8003eea:	2100      	movs	r1, #0
 8003eec:	20d9      	movs	r0, #217	; 0xd9
 8003eee:	f7ff fdef 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	20f1      	movs	r0, #241	; 0xf1
 8003ef6:	f7ff fdeb 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8003efa:	2100      	movs	r1, #0
 8003efc:	20db      	movs	r0, #219	; 0xdb
 8003efe:	f7ff fde7 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003f02:	2100      	movs	r1, #0
 8003f04:	2030      	movs	r0, #48	; 0x30
 8003f06:	f7ff fde3 	bl	8003ad0 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	20a4      	movs	r0, #164	; 0xa4
 8003f0e:	f7ff fddf 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8003f12:	2100      	movs	r1, #0
 8003f14:	20a6      	movs	r0, #166	; 0xa6
 8003f16:	f7ff fddb 	bl	8003ad0 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	20af      	movs	r0, #175	; 0xaf
 8003f1e:	f7ff fdd7 	bl	8003ad0 <OLED_WR_Byte>
	OLED_Clear(); 
 8003f22:	f7ff fe57 	bl	8003bd4 <OLED_Clear>
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40021000 	.word	0x40021000

08003f34 <pid_reset>:
#include "pid.h"

void pid_reset(PidDef *def) {
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	def->errorArea = 0;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	605a      	str	r2, [r3, #4]
	def->errorOld = 0;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <pid_init>:

void pid_init(PidDef *def, float Kp, float Ki, float Kd) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f64:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f68:	ed87 1a00 	vstr	s2, [r7]
	pid_reset(def);
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7ff ffe1 	bl	8003f34 <pid_reset>

	def->Kp = Kp;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	609a      	str	r2, [r3, #8]
	def->Ki = Ki;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	60da      	str	r2, [r3, #12]
	def->Kd = Kd;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	611a      	str	r2, [r3, #16]
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <pid_adjust>:

float pid_adjust(PidDef *def, float error, float scale) {
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f98:	edc7 0a01 	vstr	s1, [r7, #4]
	def->errorArea += error;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	edc3 7a01 	vstr	s15, [r3, #4]
	float errorRate = (error - def->errorOld);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	edd3 7a00 	vldr	s15, [r3]
 8003fb6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fbe:	edc7 7a05 	vstr	s15, [r7, #20]
	def->errorOld = error;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	601a      	str	r2, [r3, #0]

	return error * def->Kp * scale + def->errorArea * def->Ki * scale + errorRate * def->Kd * scale;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	ed93 7a02 	vldr	s14, [r3, #8]
 8003fce:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	edd3 6a01 	vldr	s13, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fee:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ff6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	edd3 6a04 	vldr	s13, [r3, #16]
 8004000:	edd7 7a05 	vldr	s15, [r7, #20]
 8004004:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004008:	edd7 7a01 	vldr	s15, [r7, #4]
 800400c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004010:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004014:	eeb0 0a67 	vmov.f32	s0, s15
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <lpf>:
static const float a_accel = 0.8;
static const float a_mag = 0.9;
static float magOld[2];
static float headingRaw, headingOld;

static float lpf(float a, float old, float new) {
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	ed87 0a03 	vstr	s0, [r7, #12]
 800402c:	edc7 0a02 	vstr	s1, [r7, #8]
 8004030:	ed87 1a01 	vstr	s2, [r7, #4]
	return a * old + (1 - a) * new;
 8004034:	ed97 7a03 	vldr	s14, [r7, #12]
 8004038:	edd7 7a02 	vldr	s15, [r7, #8]
 800403c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004044:	edd7 7a03 	vldr	s15, [r7, #12]
 8004048:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800404c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004054:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004058:	eeb0 0a67 	vmov.f32	s0, s15
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <read_mag_angle>:
static I2C_HandleTypeDef *hi2c_ptr;
static ADC_HandleTypeDef *hadc_ptr;
static TIM_HandleTypeDef *hic_ptr;
static Sensors *sensors_ptr;

static float read_mag_angle() {
 8004068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
	//Calculate angle from X and Y
	float mag[2];
	ICM20948_readMagnetometer_XY(hi2c_ptr, mag);
 8004070:	4b3d      	ldr	r3, [pc, #244]	; (8004168 <read_mag_angle+0x100>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	1d3a      	adds	r2, r7, #4
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f7fd fa79 	bl	8001570 <ICM20948_readMagnetometer_XY>
	for (uint8_t i = 0; i < 2; i++) {
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]
 8004082:	e02d      	b.n	80040e0 <read_mag_angle+0x78>
		mag[i] = lpf(a_mag, magOld[i], mag[i]);
 8004084:	eddf 6a39 	vldr	s13, [pc, #228]	; 800416c <read_mag_angle+0x104>
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	4a39      	ldr	r2, [pc, #228]	; (8004170 <read_mag_angle+0x108>)
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	edd3 7a00 	vldr	s15, [r3]
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	3310      	adds	r3, #16
 800409a:	443b      	add	r3, r7
 800409c:	3b0c      	subs	r3, #12
 800409e:	ed93 7a00 	vldr	s14, [r3]
 80040a2:	7bfe      	ldrb	r6, [r7, #15]
 80040a4:	eeb0 1a47 	vmov.f32	s2, s14
 80040a8:	eef0 0a67 	vmov.f32	s1, s15
 80040ac:	eeb0 0a66 	vmov.f32	s0, s13
 80040b0:	f7ff ffb7 	bl	8004022 <lpf>
 80040b4:	eef0 7a40 	vmov.f32	s15, s0
 80040b8:	00b3      	lsls	r3, r6, #2
 80040ba:	3310      	adds	r3, #16
 80040bc:	443b      	add	r3, r7
 80040be:	3b0c      	subs	r3, #12
 80040c0:	edc3 7a00 	vstr	s15, [r3]
		magOld[i] = mag[i];
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	0092      	lsls	r2, r2, #2
 80040ca:	3210      	adds	r2, #16
 80040cc:	443a      	add	r2, r7
 80040ce:	3a0c      	subs	r2, #12
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	4927      	ldr	r1, [pc, #156]	; (8004170 <read_mag_angle+0x108>)
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 2; i++) {
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	3301      	adds	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d9ce      	bls.n	8004084 <read_mag_angle+0x1c>
	}
	magcal_adjust(mag);
 80040e6:	1d3b      	adds	r3, r7, #4
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe f91d 	bl	8002328 <magcal_adjust>
	return -atan2(mag[1], mag[0]) * 180 / M_PI;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fc fa29 	bl	8000548 <__aeabi_f2d>
 80040f6:	4680      	mov	r8, r0
 80040f8:	4689      	mov	r9, r1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fc fa23 	bl	8000548 <__aeabi_f2d>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	ec43 2b11 	vmov	d1, r2, r3
 800410a:	ec49 8b10 	vmov	d0, r8, r9
 800410e:	f00a fdab 	bl	800ec68 <atan2>
 8004112:	ec53 2b10 	vmov	r2, r3, d0
 8004116:	4614      	mov	r4, r2
 8004118:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <read_mag_angle+0x10c>)
 8004122:	4620      	mov	r0, r4
 8004124:	4629      	mov	r1, r5
 8004126:	f7fc fa67 	bl	80005f8 <__aeabi_dmul>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	a30b      	add	r3, pc, #44	; (adr r3, 8004160 <read_mag_angle+0xf8>)
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	f7fc fb88 	bl	800084c <__aeabi_ddiv>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4610      	mov	r0, r2
 8004142:	4619      	mov	r1, r3
 8004144:	f7fc fd50 	bl	8000be8 <__aeabi_d2f>
 8004148:	4603      	mov	r3, r0
 800414a:	ee07 3a90 	vmov	s15, r3
}
 800414e:	eeb0 0a67 	vmov.f32	s0, s15
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800415a:	bf00      	nop
 800415c:	f3af 8000 	nop.w
 8004160:	54442d18 	.word	0x54442d18
 8004164:	400921fb 	.word	0x400921fb
 8004168:	200009dc 	.word	0x200009dc
 800416c:	3f666666 	.word	0x3f666666
 8004170:	200009d4 	.word	0x200009d4
 8004174:	40668000 	.word	0x40668000

08004178 <sensors_init>:

void sensors_init(I2C_HandleTypeDef *i2c_ptr, ADC_HandleTypeDef *adc_ptr, TIM_HandleTypeDef *ic_ptr, Sensors *sens_ptr) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
	hi2c_ptr = i2c_ptr;
 8004186:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <sensors_init+0x88>)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6013      	str	r3, [r2, #0]
	hadc_ptr = adc_ptr;
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <sensors_init+0x8c>)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	6013      	str	r3, [r2, #0]
	hic_ptr = ic_ptr;
 8004192:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <sensors_init+0x90>)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6013      	str	r3, [r2, #0]
	sensors_ptr = sens_ptr;
 8004198:	4a1c      	ldr	r2, [pc, #112]	; (800420c <sensors_init+0x94>)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6013      	str	r3, [r2, #0]

	ICM20948_init(hi2c_ptr, ICM_I2C_ADDR, GYRO_SENS, ACCEL_SENS);
 800419e:	4b18      	ldr	r3, [pc, #96]	; (8004200 <sensors_init+0x88>)
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	2300      	movs	r3, #0
 80041a6:	2100      	movs	r1, #0
 80041a8:	f7fd f802 	bl	80011b0 <ICM20948_init>
	ICM20948_readMagnetometer_XY(hi2c_ptr, magOld); //pre-load magOld values.
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <sensors_init+0x88>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4917      	ldr	r1, [pc, #92]	; (8004210 <sensors_init+0x98>)
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd f9dc 	bl	8001570 <ICM20948_readMagnetometer_XY>

	HAL_TIM_IC_Start_IT(ic_ptr, US_IC_CHANNEL);
 80041b8:	2100      	movs	r1, #0
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f003 fe06 	bl	8007dcc <HAL_TIM_IC_Start_IT>

	sens_ptr->gyroZ_bias = 0;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	61da      	str	r2, [r3, #28]
	sens_ptr->accel_bias[0] = sens_ptr->accel_bias[1] = sens_ptr->accel_bias[2] = 0;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	621a      	str	r2, [r3, #32]

	float mag_angle = read_mag_angle();
 80041e0:	f7ff ff42 	bl	8004068 <read_mag_angle>
 80041e4:	ed87 0a05 	vstr	s0, [r7, #20]
	sens_ptr->heading_bias = mag_angle;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	62da      	str	r2, [r3, #44]	; 0x2c
	angle_init(mag_angle);
 80041ee:	ed97 0a05 	vldr	s0, [r7, #20]
 80041f2:	f7fd fa0d 	bl	8001610 <angle_init>
}
 80041f6:	bf00      	nop
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200009dc 	.word	0x200009dc
 8004204:	200009e0 	.word	0x200009e0
 8004208:	200009e4 	.word	0x200009e4
 800420c:	200009e8 	.word	0x200009e8
 8004210:	200009d4 	.word	0x200009d4

08004214 <sensors_us_trig>:

void sensors_us_trig() {
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
	US_TRIG_CLR();
 8004218:	2200      	movs	r2, #0
 800421a:	2180      	movs	r1, #128	; 0x80
 800421c:	480a      	ldr	r0, [pc, #40]	; (8004248 <sensors_us_trig+0x34>)
 800421e:	f001 fe73 	bl	8005f08 <HAL_GPIO_WritePin>
	delay_us_wait(5);
 8004222:	2005      	movs	r0, #5
 8004224:	f7fd fee0 	bl	8001fe8 <delay_us_wait>

	//1. 10us pulse
	US_TRIG_SET();
 8004228:	2201      	movs	r2, #1
 800422a:	2180      	movs	r1, #128	; 0x80
 800422c:	4806      	ldr	r0, [pc, #24]	; (8004248 <sensors_us_trig+0x34>)
 800422e:	f001 fe6b 	bl	8005f08 <HAL_GPIO_WritePin>
	delay_us_wait(10);
 8004232:	200a      	movs	r0, #10
 8004234:	f7fd fed8 	bl	8001fe8 <delay_us_wait>
	US_TRIG_CLR();
 8004238:	2200      	movs	r2, #0
 800423a:	2180      	movs	r1, #128	; 0x80
 800423c:	4802      	ldr	r0, [pc, #8]	; (8004248 <sensors_us_trig+0x34>)
 800423e:	f001 fe63 	bl	8005f08 <HAL_GPIO_WritePin>
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40020c00 	.word	0x40020c00

0800424c <sensors_read_usDist>:

void sensors_read_usDist(float pulse_s) {
 800424c:	b590      	push	{r4, r7, lr}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	ed87 0a01 	vstr	s0, [r7, #4]
	sensors_ptr->usDist = lpf(a_usDist, sensors_ptr->usDist, pulse_s * 34300 / 2);
 8004256:	eef6 5a08 	vmov.f32	s11, #104	; 0x3f400000  0.750
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <sensors_read_usDist+0x50>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004262:	edd7 7a01 	vldr	s15, [r7, #4]
 8004266:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80042a0 <sensors_read_usDist+0x54>
 800426a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800426e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8004272:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004276:	4b09      	ldr	r3, [pc, #36]	; (800429c <sensors_read_usDist+0x50>)
 8004278:	681c      	ldr	r4, [r3, #0]
 800427a:	eeb0 1a66 	vmov.f32	s2, s13
 800427e:	eef0 0a47 	vmov.f32	s1, s14
 8004282:	eeb0 0a65 	vmov.f32	s0, s11
 8004286:	f7ff fecc 	bl	8004022 <lpf>
 800428a:	eef0 7a40 	vmov.f32	s15, s0
 800428e:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bd90      	pop	{r4, r7, pc}
 800429a:	bf00      	nop
 800429c:	200009e8 	.word	0x200009e8
 80042a0:	4705fc00 	.word	0x4705fc00
 80042a4:	00000000 	.word	0x00000000

080042a8 <sensors_read_irDist>:

void sensors_read_irDist() {
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
	HAL_ADC_Start(hadc_ptr);
 80042ae:	4b40      	ldr	r3, [pc, #256]	; (80043b0 <sensors_read_irDist+0x108>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 ff48 	bl	8005148 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc_ptr, HAL_MAX_DELAY);
 80042b8:	4b3d      	ldr	r3, [pc, #244]	; (80043b0 <sensors_read_irDist+0x108>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f04f 31ff 	mov.w	r1, #4294967295
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 f813 	bl	80052ec <HAL_ADC_PollForConversion>

	uint16_t value = (uint16_t) HAL_ADC_GetValue(hadc_ptr);
 80042c6:	4b3a      	ldr	r3, [pc, #232]	; (80043b0 <sensors_read_irDist+0x108>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f001 f899 	bl	8005402 <HAL_ADC_GetValue>
 80042d0:	4603      	mov	r3, r0
 80042d2:	817b      	strh	r3, [r7, #10]
	float div = pow(((float) value) / 4095, 1.226);
 80042d4:	897b      	ldrh	r3, [r7, #10]
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042de:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80043b4 <sensors_read_irDist+0x10c>
 80042e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80042e6:	ee16 0a90 	vmov	r0, s13
 80042ea:	f7fc f92d 	bl	8000548 <__aeabi_f2d>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8004398 <sensors_read_irDist+0xf0>
 80042f6:	ec43 2b10 	vmov	d0, r2, r3
 80042fa:	f00a fcb7 	bl	800ec6c <pow>
 80042fe:	ec53 2b10 	vmov	r2, r3, d0
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	f7fc fc6f 	bl	8000be8 <__aeabi_d2f>
 800430a:	4603      	mov	r3, r0
 800430c:	607b      	str	r3, [r7, #4]
	float dist = (div < 6.3028 / DIST_IR_MAX)
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fc f91a 	bl	8000548 <__aeabi_f2d>
		? DIST_IR_MAX
		: 6.3028 / div;
 8004314:	a322      	add	r3, pc, #136	; (adr r3, 80043a0 <sensors_read_irDist+0xf8>)
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f7fc fbdf 	bl	8000adc <__aeabi_dcmplt>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <sensors_read_irDist+0x80>
 8004324:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <sensors_read_irDist+0x110>)
 8004326:	e010      	b.n	800434a <sensors_read_irDist+0xa2>
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fc f90d 	bl	8000548 <__aeabi_f2d>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	a11d      	add	r1, pc, #116	; (adr r1, 80043a8 <sensors_read_irDist+0x100>)
 8004334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004338:	f7fc fa88 	bl	800084c <__aeabi_ddiv>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	f7fc fc50 	bl	8000be8 <__aeabi_d2f>
 8004348:	4603      	mov	r3, r0
	float dist = (div < 6.3028 / DIST_IR_MAX)
 800434a:	60fb      	str	r3, [r7, #12]
	if (dist < DIST_IR_MIN) dist = DIST_IR_MIN;
 800434c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004350:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435c:	d501      	bpl.n	8004362 <sensors_read_irDist+0xba>
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <sensors_read_irDist+0x114>)
 8004360:	60fb      	str	r3, [r7, #12]

	sensors_ptr->irDist = lpf(a_irDist, sensors_ptr->irDist, dist);
 8004362:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80043c0 <sensors_read_irDist+0x118>
 8004366:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <sensors_read_irDist+0x11c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	edd3 7a00 	vldr	s15, [r3]
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <sensors_read_irDist+0x11c>)
 8004370:	681c      	ldr	r4, [r3, #0]
 8004372:	ed97 1a03 	vldr	s2, [r7, #12]
 8004376:	eef0 0a67 	vmov.f32	s1, s15
 800437a:	eeb0 0a47 	vmov.f32	s0, s14
 800437e:	f7ff fe50 	bl	8004022 <lpf>
 8004382:	eef0 7a40 	vmov.f32	s15, s0
 8004386:	edc4 7a00 	vstr	s15, [r4]
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bd90      	pop	{r4, r7, pc}
 8004392:	bf00      	nop
 8004394:	f3af 8000 	nop.w
 8004398:	2d0e5604 	.word	0x2d0e5604
 800439c:	3ff39db2 	.word	0x3ff39db2
 80043a0:	8754f378 	.word	0x8754f378
 80043a4:	3fb70cdc 	.word	0x3fb70cdc
 80043a8:	3404ea4b 	.word	0x3404ea4b
 80043ac:	40193611 	.word	0x40193611
 80043b0:	200009e0 	.word	0x200009e0
 80043b4:	457ff000 	.word	0x457ff000
 80043b8:	428c0000 	.word	0x428c0000
 80043bc:	41200000 	.word	0x41200000
 80043c0:	3f733333 	.word	0x3f733333
 80043c4:	200009e8 	.word	0x200009e8

080043c8 <sensors_read_gyroZ>:

void sensors_read_gyroZ() {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
	float val;
	ICM20948_readGyroscope_Z(hi2c_ptr, ICM_I2C_ADDR, GYRO_SENS, &val);
 80043ce:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <sensors_read_gyroZ+0x3c>)
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	2100      	movs	r1, #0
 80043d8:	f7fc ff6e 	bl	80012b8 <ICM20948_readGyroscope_Z>
	sensors_ptr->gyroZ = (val - sensors_ptr->gyroZ_bias) / 1000; //convert to ms
 80043dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <sensors_read_gyroZ+0x40>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80043e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <sensors_read_gyroZ+0x40>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	eddf 6a06 	vldr	s13, [pc, #24]	; 800440c <sensors_read_gyroZ+0x44>
 80043f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043f8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200009dc 	.word	0x200009dc
 8004408:	200009e8 	.word	0x200009e8
 800440c:	447a0000 	.word	0x447a0000

08004410 <sensors_read_accel>:


void sensors_read_accel() {
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
	float accel_new[3];
	ICM20948_readAccelerometer_all(hi2c_ptr, ICM_I2C_ADDR, ACCEL_SENS, accel_new);
 8004416:	4b19      	ldr	r3, [pc, #100]	; (800447c <sensors_read_accel+0x6c>)
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	463b      	mov	r3, r7
 800441e:	2100      	movs	r1, #0
 8004420:	f7fc ffca 	bl	80013b8 <ICM20948_readAccelerometer_all>
	for (int i = 0; i < 3; i++) {
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e020      	b.n	800446c <sensors_read_accel+0x5c>
		sensors_ptr->accel[i] = (accel_new[i] - sensors_ptr->accel_bias[i]) * GRAVITY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	3310      	adds	r3, #16
 8004430:	443b      	add	r3, r7
 8004432:	3b10      	subs	r3, #16
 8004434:	ed93 7a00 	vldr	s14, [r3]
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <sensors_read_accel+0x70>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3308      	adds	r3, #8
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	edd3 7a00 	vldr	s15, [r3]
 8004448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <sensors_read_accel+0x70>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004484 <sensors_read_accel+0x74>
 8004454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3302      	adds	r3, #2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	3304      	adds	r3, #4
 8004462:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++) {
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b02      	cmp	r3, #2
 8004470:	dddb      	ble.n	800442a <sensors_read_accel+0x1a>
	}
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	200009dc 	.word	0x200009dc
 8004480:	200009e8 	.word	0x200009e8
 8004484:	3a8089a8 	.word	0x3a8089a8

08004488 <sensors_read_heading>:

void sensors_read_heading(float msElapsed, float gyroZ) {
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004492:	edc7 0a00 	vstr	s1, [r7]
	sensors_ptr->heading = angle_diff_180(
 8004496:	f7ff fde7 	bl	8004068 <read_mag_angle>
 800449a:	eef0 7a40 	vmov.f32	s15, s0
 800449e:	eeb0 1a67 	vmov.f32	s2, s15
 80044a2:	edd7 0a00 	vldr	s1, [r7]
 80044a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80044aa:	f7fd f8d3 	bl	8001654 <angle_get>
 80044ae:	eeb0 7a40 	vmov.f32	s14, s0
		angle_get(msElapsed, gyroZ, read_mag_angle()),
		sensors_ptr->heading_bias
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <sensors_read_heading+0x54>)
 80044b4:	681b      	ldr	r3, [r3, #0]
	sensors_ptr->heading = angle_diff_180(
 80044b6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <sensors_read_heading+0x54>)
 80044bc:	681c      	ldr	r4, [r3, #0]
 80044be:	eef0 0a67 	vmov.f32	s1, s15
 80044c2:	eeb0 0a47 	vmov.f32	s0, s14
 80044c6:	f7fd fcf3 	bl	8001eb0 <angle_diff_180>
 80044ca:	eef0 7a40 	vmov.f32	s15, s0
 80044ce:	edc4 7a06 	vstr	s15, [r4, #24]
	);
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd90      	pop	{r4, r7, pc}
 80044da:	bf00      	nop
 80044dc:	200009e8 	.word	0x200009e8

080044e0 <sensors_set_bias>:

void sensors_set_bias(uint16_t count) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08e      	sub	sp, #56	; 0x38
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t j;
	float gyroZTotal = 0, gyroZ = 0,
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
		accelTotal[3] = {0}, accel[3],
 80044f6:	f107 0318 	add.w	r3, r7, #24
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	605a      	str	r2, [r3, #4]
 8004500:	609a      	str	r2, [r3, #8]
		headingTotal = 0;
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (i = 0; i < count; i++) {
 8004508:	2300      	movs	r3, #0
 800450a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800450c:	e04b      	b.n	80045a6 <sensors_set_bias+0xc6>
		ICM20948_readGyroscope_Z(hi2c_ptr, ICM_I2C_ADDR, GYRO_SENS, &gyroZ); //gyroscope bias
 800450e:	4b4f      	ldr	r3, [pc, #316]	; (800464c <sensors_set_bias+0x16c>)
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004518:	2100      	movs	r1, #0
 800451a:	f7fc fecd 	bl	80012b8 <ICM20948_readGyroscope_Z>
		gyroZTotal += gyroZ;
 800451e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004522:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800452a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		ICM20948_readAccelerometer_all(hi2c_ptr, ICM_I2C_ADDR, ACCEL_SENS, accel); //accelerometer bias
 800452e:	4b47      	ldr	r3, [pc, #284]	; (800464c <sensors_set_bias+0x16c>)
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	2200      	movs	r2, #0
 8004534:	f107 030c 	add.w	r3, r7, #12
 8004538:	2100      	movs	r1, #0
 800453a:	f7fc ff3d 	bl	80013b8 <ICM20948_readAccelerometer_all>
		for (j = 0; j < 3; j++) accelTotal[j] += accel[j];
 800453e:	2300      	movs	r3, #0
 8004540:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004544:	e01e      	b.n	8004584 <sensors_set_bias+0xa4>
 8004546:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	3338      	adds	r3, #56	; 0x38
 800454e:	443b      	add	r3, r7
 8004550:	3b20      	subs	r3, #32
 8004552:	ed93 7a00 	vldr	s14, [r3]
 8004556:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	3338      	adds	r3, #56	; 0x38
 800455e:	443b      	add	r3, r7
 8004560:	3b2c      	subs	r3, #44	; 0x2c
 8004562:	edd3 7a00 	vldr	s15, [r3]
 8004566:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800456a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	3338      	adds	r3, #56	; 0x38
 8004572:	443b      	add	r3, r7
 8004574:	3b20      	subs	r3, #32
 8004576:	edc3 7a00 	vstr	s15, [r3]
 800457a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800457e:	3301      	adds	r3, #1
 8004580:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004584:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004588:	2b02      	cmp	r3, #2
 800458a:	d9dc      	bls.n	8004546 <sensors_set_bias+0x66>

		headingTotal += read_mag_angle(); //heading bias
 800458c:	f7ff fd6c 	bl	8004068 <read_mag_angle>
 8004590:	eeb0 7a40 	vmov.f32	s14, s0
 8004594:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800459c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for (i = 0; i < count; i++) {
 80045a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045a2:	3301      	adds	r3, #1
 80045a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d3af      	bcc.n	800450e <sensors_set_bias+0x2e>
	}

	sensors_ptr->gyroZ_bias = gyroZTotal / count;
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045b8:	4b25      	ldr	r3, [pc, #148]	; (8004650 <sensors_set_bias+0x170>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80045c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c4:	edc3 7a07 	vstr	s15, [r3, #28]

	for (i = 0; i < 3; i++) sensors_ptr->accel_bias[i] = accelTotal[i] / count;
 80045c8:	2300      	movs	r3, #0
 80045ca:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045cc:	e018      	b.n	8004600 <sensors_set_bias+0x120>
 80045ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	3338      	adds	r3, #56	; 0x38
 80045d4:	443b      	add	r3, r7
 80045d6:	3b20      	subs	r3, #32
 80045d8:	edd3 6a00 	vldr	s13, [r3]
 80045dc:	88fb      	ldrh	r3, [r7, #6]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045e6:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <sensors_set_bias+0x170>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f0:	3308      	adds	r3, #8
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	edc3 7a00 	vstr	s15, [r3]
 80045fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045fc:	3301      	adds	r3, #1
 80045fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004600:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004602:	2b02      	cmp	r3, #2
 8004604:	d9e3      	bls.n	80045ce <sensors_set_bias+0xee>
	sensors_ptr->accel_bias[2] -= GRAVITY; //normally z accelerometer should read gravity.
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <sensors_set_bias+0x170>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <sensors_set_bias+0x170>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004654 <sensors_set_bias+0x174>
 8004616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800461a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	float heading_bias = headingTotal / count;
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	ee07 3a90 	vmov	s15, r3
 8004624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004628:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800462c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004630:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	sensors_ptr->heading_bias = heading_bias;
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <sensors_set_bias+0x170>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c
	angle_reset(heading_bias);
 800463c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004640:	f7fc fff4 	bl	800162c <angle_reset>
}
 8004644:	bf00      	nop
 8004646:	3738      	adds	r7, #56	; 0x38
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	200009dc 	.word	0x200009dc
 8004650:	200009e8 	.word	0x200009e8
 8004654:	3a8089a8 	.word	0x3a8089a8

08004658 <servo_init>:
#include "servo.h"

static TIM_HandleTypeDef *pwm_tim;

void servo_init(TIM_HandleTypeDef *pwm) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	pwm_tim = pwm;
 8004660:	4a05      	ldr	r2, [pc, #20]	; (8004678 <servo_init+0x20>)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm, SERVO_PWM_CHANNEL);
 8004666:	2100      	movs	r1, #0
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f003 fa8d 	bl	8007b88 <HAL_TIM_PWM_Start>
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200009ec 	.word	0x200009ec

0800467c <setServoVal>:

static void setServoVal(uint32_t val) {
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	pwm_tim->Instance->CCR1 = val;
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <setServoVal+0x20>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	200009ec 	.word	0x200009ec

080046a0 <servo_setAngle>:

void servo_setAngle(float angle) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	ed87 0a01 	vstr	s0, [r7, #4]
	//clamp angle to within width.
	if (angle < -SERVO_WIDTH) angle = -SERVO_WIDTH;
 80046aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80046ae:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 80046b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ba:	d502      	bpl.n	80046c2 <servo_setAngle+0x22>
 80046bc:	4b21      	ldr	r3, [pc, #132]	; (8004744 <servo_setAngle+0xa4>)
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	e00a      	b.n	80046d8 <servo_setAngle+0x38>
	else if (angle > SERVO_WIDTH) angle = SERVO_WIDTH;
 80046c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80046c6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80046ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d2:	dd01      	ble.n	80046d8 <servo_setAngle+0x38>
 80046d4:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <servo_setAngle+0xa8>)
 80046d6:	607b      	str	r3, [r7, #4]

	uint32_t val;
	if (angle < 0) {
 80046d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80046dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e4:	d513      	bpl.n	800470e <servo_setAngle+0x6e>
		val = SERVO_PULSE_0 + (SERVO_PULSE_0 - SERVO_PULSE_L) * angle / SERVO_WIDTH;
 80046e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80046ea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800474c <servo_setAngle+0xac>
 80046ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046f2:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80046f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046fa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004750 <servo_setAngle+0xb0>
 80046fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004706:	ee17 3a90 	vmov	r3, s15
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e012      	b.n	8004734 <servo_setAngle+0x94>
	} else {
		val = SERVO_PULSE_0 + (SERVO_PULSE_R - SERVO_PULSE_0) * angle / SERVO_WIDTH;
 800470e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004712:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004754 <servo_setAngle+0xb4>
 8004716:	ee27 7a87 	vmul.f32	s14, s15, s14
 800471a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800471e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004722:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004750 <servo_setAngle+0xb0>
 8004726:	ee77 7a87 	vadd.f32	s15, s15, s14
 800472a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800472e:	ee17 3a90 	vmov	r3, s15
 8004732:	60fb      	str	r3, [r7, #12]
	}

	setServoVal(val);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff ffa1 	bl	800467c <setServoVal>
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	c1c80000 	.word	0xc1c80000
 8004748:	41c80000 	.word	0x41c80000
 800474c:	449c4000 	.word	0x449c4000
 8004750:	45979000 	.word	0x45979000
 8004754:	4512e000 	.word	0x4512e000

08004758 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_MspInit+0x4c>)
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <HAL_MspInit+0x4c>)
 8004768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800476c:	6453      	str	r3, [r2, #68]	; 0x44
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <HAL_MspInit+0x4c>)
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004776:	607b      	str	r3, [r7, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_MspInit+0x4c>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <HAL_MspInit+0x4c>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_MspInit+0x4c>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800

080047a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a17      	ldr	r2, [pc, #92]	; (8004824 <HAL_ADC_MspInit+0x7c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d127      	bne.n	800481a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	4b16      	ldr	r3, [pc, #88]	; (8004828 <HAL_ADC_MspInit+0x80>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	4a15      	ldr	r2, [pc, #84]	; (8004828 <HAL_ADC_MspInit+0x80>)
 80047d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d8:	6453      	str	r3, [r2, #68]	; 0x44
 80047da:	4b13      	ldr	r3, [pc, #76]	; (8004828 <HAL_ADC_MspInit+0x80>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <HAL_ADC_MspInit+0x80>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	4a0e      	ldr	r2, [pc, #56]	; (8004828 <HAL_ADC_MspInit+0x80>)
 80047f0:	f043 0304 	orr.w	r3, r3, #4
 80047f4:	6313      	str	r3, [r2, #48]	; 0x30
 80047f6:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <HAL_ADC_MspInit+0x80>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = IR_V0_Pin;
 8004802:	2308      	movs	r3, #8
 8004804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004806:	2303      	movs	r3, #3
 8004808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_V0_GPIO_Port, &GPIO_InitStruct);
 800480e:	f107 0314 	add.w	r3, r7, #20
 8004812:	4619      	mov	r1, r3
 8004814:	4805      	ldr	r0, [pc, #20]	; (800482c <HAL_ADC_MspInit+0x84>)
 8004816:	f001 f9c3 	bl	8005ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800481a:	bf00      	nop
 800481c:	3728      	adds	r7, #40	; 0x28
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40012000 	.word	0x40012000
 8004828:	40023800 	.word	0x40023800
 800482c:	40020800 	.word	0x40020800

08004830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	; 0x28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004838:	f107 0314 	add.w	r3, r7, #20
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_I2C_MspInit+0x84>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d12c      	bne.n	80048ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <HAL_I2C_MspInit+0x88>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <HAL_I2C_MspInit+0x88>)
 800485c:	f043 0302 	orr.w	r3, r3, #2
 8004860:	6313      	str	r3, [r2, #48]	; 0x30
 8004862:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <HAL_I2C_MspInit+0x88>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 800486e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004874:	2312      	movs	r3, #18
 8004876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487c:	2303      	movs	r3, #3
 800487e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004880:	2304      	movs	r3, #4
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	4619      	mov	r1, r3
 800488a:	480c      	ldr	r0, [pc, #48]	; (80048bc <HAL_I2C_MspInit+0x8c>)
 800488c:	f001 f988 	bl	8005ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <HAL_I2C_MspInit+0x88>)
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <HAL_I2C_MspInit+0x88>)
 800489a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800489e:	6413      	str	r3, [r2, #64]	; 0x40
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_I2C_MspInit+0x88>)
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80048ac:	bf00      	nop
 80048ae:	3728      	adds	r7, #40	; 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40005400 	.word	0x40005400
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40020400 	.word	0x40020400

080048c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08e      	sub	sp, #56	; 0x38
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a4d      	ldr	r2, [pc, #308]	; (8004a14 <HAL_TIM_Base_MspInit+0x154>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d116      	bne.n	8004910 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	4b4c      	ldr	r3, [pc, #304]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	4a4b      	ldr	r2, [pc, #300]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6453      	str	r3, [r2, #68]	; 0x44
 80048f2:	4b49      	ldr	r3, [pc, #292]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	623b      	str	r3, [r7, #32]
 80048fc:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80048fe:	2200      	movs	r2, #0
 8004900:	2100      	movs	r1, #0
 8004902:	201b      	movs	r0, #27
 8004904:	f001 f883 	bl	8005a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004908:	201b      	movs	r0, #27
 800490a:	f001 f89c 	bl	8005a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800490e:	e07d      	b.n	8004a0c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a41      	ldr	r2, [pc, #260]	; (8004a1c <HAL_TIM_Base_MspInit+0x15c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d135      	bne.n	8004986 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	4b3e      	ldr	r3, [pc, #248]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	4a3d      	ldr	r2, [pc, #244]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	6413      	str	r3, [r2, #64]	; 0x40
 800492a:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	4a36      	ldr	r2, [pc, #216]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	6313      	str	r3, [r2, #48]	; 0x30
 8004946:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	61bb      	str	r3, [r7, #24]
 8004950:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004958:	2302      	movs	r3, #2
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495c:	2300      	movs	r3, #0
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004960:	2300      	movs	r3, #0
 8004962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004964:	2302      	movs	r3, #2
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800496c:	4619      	mov	r1, r3
 800496e:	482c      	ldr	r0, [pc, #176]	; (8004a20 <HAL_TIM_Base_MspInit+0x160>)
 8004970:	f001 f916 	bl	8005ba0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004974:	2200      	movs	r2, #0
 8004976:	2100      	movs	r1, #0
 8004978:	201e      	movs	r0, #30
 800497a:	f001 f848 	bl	8005a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800497e:	201e      	movs	r0, #30
 8004980:	f001 f861 	bl	8005a46 <HAL_NVIC_EnableIRQ>
}
 8004984:	e042      	b.n	8004a0c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM6)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a26      	ldr	r2, [pc, #152]	; (8004a24 <HAL_TIM_Base_MspInit+0x164>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d10e      	bne.n	80049ae <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 800499a:	f043 0310 	orr.w	r3, r3, #16
 800499e:	6413      	str	r3, [r2, #64]	; 0x40
 80049a0:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	697b      	ldr	r3, [r7, #20]
}
 80049ac:	e02e      	b.n	8004a0c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM7)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <HAL_TIM_Base_MspInit+0x168>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d116      	bne.n	80049e6 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 80049c2:	f043 0320 	orr.w	r3, r3, #32
 80049c6:	6413      	str	r3, [r2, #64]	; 0x40
 80049c8:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80049d4:	2200      	movs	r2, #0
 80049d6:	2100      	movs	r1, #0
 80049d8:	2037      	movs	r0, #55	; 0x37
 80049da:	f001 f818 	bl	8005a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80049de:	2037      	movs	r0, #55	; 0x37
 80049e0:	f001 f831 	bl	8005a46 <HAL_NVIC_EnableIRQ>
}
 80049e4:	e012      	b.n	8004a0c <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM8)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a10      	ldr	r2, [pc, #64]	; (8004a2c <HAL_TIM_Base_MspInit+0x16c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10d      	bne.n	8004a0c <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 80049f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f8:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 80049fa:	f043 0302 	orr.w	r3, r3, #2
 80049fe:	6453      	str	r3, [r2, #68]	; 0x44
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_TIM_Base_MspInit+0x158>)
 8004a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
}
 8004a0c:	bf00      	nop
 8004a0e:	3738      	adds	r7, #56	; 0x38
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40020c00 	.word	0x40020c00
 8004a24:	40001000 	.word	0x40001000
 8004a28:	40001400 	.word	0x40001400
 8004a2c:	40010400 	.word	0x40010400

08004a30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08c      	sub	sp, #48	; 0x30
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a38:	f107 031c 	add.w	r3, r7, #28
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a50:	d14b      	bne.n	8004aea <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	4b3f      	ldr	r3, [pc, #252]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	4a3e      	ldr	r2, [pc, #248]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6413      	str	r3, [r2, #64]	; 0x40
 8004a62:	4b3c      	ldr	r3, [pc, #240]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	4b38      	ldr	r3, [pc, #224]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	4a37      	ldr	r2, [pc, #220]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a7e:	4b35      	ldr	r3, [pc, #212]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	4b31      	ldr	r3, [pc, #196]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	4a30      	ldr	r2, [pc, #192]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a94:	f043 0302 	orr.w	r3, r3, #2
 8004a98:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9a:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTORA_CH1_Pin;
 8004aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aac:	2302      	movs	r3, #2
 8004aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH1_GPIO_Port, &GPIO_InitStruct);
 8004abc:	f107 031c 	add.w	r3, r7, #28
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4825      	ldr	r0, [pc, #148]	; (8004b58 <HAL_TIM_Encoder_MspInit+0x128>)
 8004ac4:	f001 f86c 	bl	8005ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTORA_CH2_Pin;
 8004ac8:	2308      	movs	r3, #8
 8004aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004acc:	2302      	movs	r3, #2
 8004ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH2_GPIO_Port, &GPIO_InitStruct);
 8004adc:	f107 031c 	add.w	r3, r7, #28
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	481e      	ldr	r0, [pc, #120]	; (8004b5c <HAL_TIM_Encoder_MspInit+0x12c>)
 8004ae4:	f001 f85c 	bl	8005ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004ae8:	e030      	b.n	8004b4c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <HAL_TIM_Encoder_MspInit+0x130>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d12b      	bne.n	8004b4c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	4a15      	ldr	r2, [pc, #84]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004afe:	f043 0302 	orr.w	r3, r3, #2
 8004b02:	6413      	str	r3, [r2, #64]	; 0x40
 8004b04:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTORB_CH1_Pin|MOTORB_CH2_Pin;
 8004b2c:	23c0      	movs	r3, #192	; 0xc0
 8004b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b30:	2302      	movs	r3, #2
 8004b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b40:	f107 031c 	add.w	r3, r7, #28
 8004b44:	4619      	mov	r1, r3
 8004b46:	4804      	ldr	r0, [pc, #16]	; (8004b58 <HAL_TIM_Encoder_MspInit+0x128>)
 8004b48:	f001 f82a 	bl	8005ba0 <HAL_GPIO_Init>
}
 8004b4c:	bf00      	nop
 8004b4e:	3730      	adds	r7, #48	; 0x30
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40020000 	.word	0x40020000
 8004b5c:	40020400 	.word	0x40020400
 8004b60:	40000400 	.word	0x40000400

08004b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	609a      	str	r2, [r3, #8]
 8004b78:	60da      	str	r2, [r3, #12]
 8004b7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a24      	ldr	r2, [pc, #144]	; (8004c14 <HAL_TIM_MspPostInit+0xb0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d11f      	bne.n	8004bc6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	4b23      	ldr	r3, [pc, #140]	; (8004c18 <HAL_TIM_MspPostInit+0xb4>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	4a22      	ldr	r2, [pc, #136]	; (8004c18 <HAL_TIM_MspPostInit+0xb4>)
 8004b90:	f043 0310 	orr.w	r3, r3, #16
 8004b94:	6313      	str	r3, [r2, #48]	; 0x30
 8004b96:	4b20      	ldr	r3, [pc, #128]	; (8004c18 <HAL_TIM_MspPostInit+0xb4>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8004ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4817      	ldr	r0, [pc, #92]	; (8004c1c <HAL_TIM_MspPostInit+0xb8>)
 8004bc0:	f000 ffee 	bl	8005ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004bc4:	e022      	b.n	8004c0c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <HAL_TIM_MspPostInit+0xbc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d11d      	bne.n	8004c0c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <HAL_TIM_MspPostInit+0xb4>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	4a0f      	ldr	r2, [pc, #60]	; (8004c18 <HAL_TIM_MspPostInit+0xb4>)
 8004bda:	f043 0304 	orr.w	r3, r3, #4
 8004bde:	6313      	str	r3, [r2, #48]	; 0x30
 8004be0:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <HAL_TIM_MspPostInit+0xb4>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTORA_PWM_Pin|MOTORB_PWM_Pin;
 8004bec:	23c0      	movs	r3, #192	; 0xc0
 8004bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c00:	f107 0314 	add.w	r3, r7, #20
 8004c04:	4619      	mov	r1, r3
 8004c06:	4807      	ldr	r0, [pc, #28]	; (8004c24 <HAL_TIM_MspPostInit+0xc0>)
 8004c08:	f000 ffca 	bl	8005ba0 <HAL_GPIO_Init>
}
 8004c0c:	bf00      	nop
 8004c0e:	3728      	adds	r7, #40	; 0x28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	40010400 	.word	0x40010400
 8004c24:	40020800 	.word	0x40020800

08004c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c30:	f107 0314 	add.w	r3, r7, #20
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	60da      	str	r2, [r3, #12]
 8004c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1d      	ldr	r2, [pc, #116]	; (8004cbc <HAL_UART_MspInit+0x94>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d134      	bne.n	8004cb4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <HAL_UART_MspInit+0x98>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <HAL_UART_MspInit+0x98>)
 8004c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c58:	6413      	str	r3, [r2, #64]	; 0x40
 8004c5a:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_UART_MspInit+0x98>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <HAL_UART_MspInit+0x98>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	4a14      	ldr	r2, [pc, #80]	; (8004cc0 <HAL_UART_MspInit+0x98>)
 8004c70:	f043 0304 	orr.w	r3, r3, #4
 8004c74:	6313      	str	r3, [r2, #48]	; 0x30
 8004c76:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <HAL_UART_MspInit+0x98>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c90:	2303      	movs	r3, #3
 8004c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c94:	2307      	movs	r3, #7
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4809      	ldr	r0, [pc, #36]	; (8004cc4 <HAL_UART_MspInit+0x9c>)
 8004ca0:	f000 ff7e 	bl	8005ba0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	2027      	movs	r0, #39	; 0x27
 8004caa:	f000 feb0 	bl	8005a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004cae:	2027      	movs	r0, #39	; 0x27
 8004cb0:	f000 fec9 	bl	8005a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004cb4:	bf00      	nop
 8004cb6:	3728      	adds	r7, #40	; 0x28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40004800 	.word	0x40004800
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	40020800 	.word	0x40020800

08004cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ccc:	e7fe      	b.n	8004ccc <NMI_Handler+0x4>

08004cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cd2:	e7fe      	b.n	8004cd2 <HardFault_Handler+0x4>

08004cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cd8:	e7fe      	b.n	8004cd8 <MemManage_Handler+0x4>

08004cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cde:	e7fe      	b.n	8004cde <BusFault_Handler+0x4>

08004ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ce4:	e7fe      	b.n	8004ce4 <UsageFault_Handler+0x4>

08004ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cea:	bf00      	nop
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d02:	b480      	push	{r7}
 8004d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d06:	bf00      	nop
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d14:	f000 f990 	bl	8005038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d18:	bf00      	nop
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d20:	4802      	ldr	r0, [pc, #8]	; (8004d2c <TIM1_CC_IRQHandler+0x10>)
 8004d22:	f003 facf 	bl	80082c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	200002d4 	.word	0x200002d4

08004d30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004d34:	4802      	ldr	r0, [pc, #8]	; (8004d40 <TIM4_IRQHandler+0x10>)
 8004d36:	f003 fac5 	bl	80082c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004d3a:	bf00      	nop
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	200003ac 	.word	0x200003ac

08004d44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004d48:	4802      	ldr	r0, [pc, #8]	; (8004d54 <USART3_IRQHandler+0x10>)
 8004d4a:	f004 fc5b 	bl	8009604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200004cc 	.word	0x200004cc

08004d58 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004d5c:	4802      	ldr	r0, [pc, #8]	; (8004d68 <TIM7_IRQHandler+0x10>)
 8004d5e:	f003 fab1 	bl	80082c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	2000043c 	.word	0x2000043c

08004d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return 1;
 8004d70:	2301      	movs	r3, #1
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <_kill>:

int _kill(int pid, int sig)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d86:	f006 fc4d 	bl	800b624 <__errno>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2216      	movs	r2, #22
 8004d8e:	601a      	str	r2, [r3, #0]
  return -1;
 8004d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_exit>:

void _exit (int status)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004da4:	f04f 31ff 	mov.w	r1, #4294967295
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff ffe7 	bl	8004d7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004dae:	e7fe      	b.n	8004dae <_exit+0x12>

08004db0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e00a      	b.n	8004dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004dc2:	f3af 8000 	nop.w
 8004dc6:	4601      	mov	r1, r0
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	60ba      	str	r2, [r7, #8]
 8004dce:	b2ca      	uxtb	r2, r1
 8004dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	dbf0      	blt.n	8004dc2 <_read+0x12>
  }

  return len;
 8004de0:	687b      	ldr	r3, [r7, #4]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b086      	sub	sp, #24
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e009      	b.n	8004e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	60ba      	str	r2, [r7, #8]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	dbf1      	blt.n	8004dfc <_write+0x12>
  }
  return len;
 8004e18:	687b      	ldr	r3, [r7, #4]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <_close>:

int _close(int file)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <_isatty>:

int _isatty(int file)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e62:	2301      	movs	r3, #1
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e94:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <_sbrk+0x5c>)
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <_sbrk+0x60>)
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ea0:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <_sbrk+0x64>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ea8:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <_sbrk+0x64>)
 8004eaa:	4a12      	ldr	r2, [pc, #72]	; (8004ef4 <_sbrk+0x68>)
 8004eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004eae:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <_sbrk+0x64>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d207      	bcs.n	8004ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ebc:	f006 fbb2 	bl	800b624 <__errno>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	220c      	movs	r2, #12
 8004ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eca:	e009      	b.n	8004ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ecc:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <_sbrk+0x64>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <_sbrk+0x64>)
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4413      	add	r3, r2
 8004eda:	4a05      	ldr	r2, [pc, #20]	; (8004ef0 <_sbrk+0x64>)
 8004edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ede:	68fb      	ldr	r3, [r7, #12]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20020000 	.word	0x20020000
 8004eec:	00000400 	.word	0x00000400
 8004ef0:	200009f0 	.word	0x200009f0
 8004ef4:	20000b48 	.word	0x20000b48

08004ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <SystemInit+0x20>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <SystemInit+0x20>)
 8004f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f0c:	bf00      	nop
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <user_is_pressed>:
#include "user_input.h"

uint8_t user_is_pressed() {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BTN_USER_GPIO_Port, BTN_USER_Pin) != GPIO_PIN_SET;
 8004f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f24:	4805      	ldr	r0, [pc, #20]	; (8004f3c <user_is_pressed+0x20>)
 8004f26:	f000 ffd7 	bl	8005ed8 <HAL_GPIO_ReadPin>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40020c00 	.word	0x40020c00

08004f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004f44:	f7ff ffd8 	bl	8004ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f48:	480c      	ldr	r0, [pc, #48]	; (8004f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f4a:	490d      	ldr	r1, [pc, #52]	; (8004f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f4c:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f50:	e002      	b.n	8004f58 <LoopCopyDataInit>

08004f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f56:	3304      	adds	r3, #4

08004f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f5c:	d3f9      	bcc.n	8004f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f60:	4c0a      	ldr	r4, [pc, #40]	; (8004f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f64:	e001      	b.n	8004f6a <LoopFillZerobss>

08004f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f68:	3204      	adds	r2, #4

08004f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f6c:	d3fb      	bcc.n	8004f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f6e:	f006 fb5f 	bl	800b630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f72:	f7fd fafd 	bl	8002570 <main>
  bx  lr    
 8004f76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f80:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004f84:	08012588 	.word	0x08012588
  ldr r2, =_sbss
 8004f88:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004f8c:	20000b44 	.word	0x20000b44

08004f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f90:	e7fe      	b.n	8004f90 <ADC_IRQHandler>
	...

08004f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f98:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <HAL_Init+0x40>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a0d      	ldr	r2, [pc, #52]	; (8004fd4 <HAL_Init+0x40>)
 8004f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_Init+0x40>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a0a      	ldr	r2, [pc, #40]	; (8004fd4 <HAL_Init+0x40>)
 8004faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fb0:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <HAL_Init+0x40>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a07      	ldr	r2, [pc, #28]	; (8004fd4 <HAL_Init+0x40>)
 8004fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fbc:	2003      	movs	r0, #3
 8004fbe:	f000 fd1b 	bl	80059f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fc2:	200f      	movs	r0, #15
 8004fc4:	f000 f808 	bl	8004fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fc8:	f7ff fbc6 	bl	8004758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023c00 	.word	0x40023c00

08004fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fe0:	4b12      	ldr	r3, [pc, #72]	; (800502c <HAL_InitTick+0x54>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b12      	ldr	r3, [pc, #72]	; (8005030 <HAL_InitTick+0x58>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fd33 	bl	8005a62 <HAL_SYSTICK_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e00e      	b.n	8005024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b0f      	cmp	r3, #15
 800500a:	d80a      	bhi.n	8005022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800500c:	2200      	movs	r2, #0
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	f000 fcfb 	bl	8005a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005018:	4a06      	ldr	r2, [pc, #24]	; (8005034 <HAL_InitTick+0x5c>)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	e000      	b.n	8005024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20000000 	.word	0x20000000
 8005030:	20000008 	.word	0x20000008
 8005034:	20000004 	.word	0x20000004

08005038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <HAL_IncTick+0x20>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <HAL_IncTick+0x24>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4413      	add	r3, r2
 8005048:	4a04      	ldr	r2, [pc, #16]	; (800505c <HAL_IncTick+0x24>)
 800504a:	6013      	str	r3, [r2, #0]
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20000008 	.word	0x20000008
 800505c:	200009f4 	.word	0x200009f4

08005060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  return uwTick;
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <HAL_GetTick+0x14>)
 8005066:	681b      	ldr	r3, [r3, #0]
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	200009f4 	.word	0x200009f4

08005078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005080:	f7ff ffee 	bl	8005060 <HAL_GetTick>
 8005084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d005      	beq.n	800509e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <HAL_Delay+0x44>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800509e:	bf00      	nop
 80050a0:	f7ff ffde 	bl	8005060 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d8f7      	bhi.n	80050a0 <HAL_Delay+0x28>
  {
  }
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000008 	.word	0x20000008

080050c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e033      	b.n	800513e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff fb62 	bl	80047a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d118      	bne.n	8005130 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005106:	f023 0302 	bic.w	r3, r3, #2
 800510a:	f043 0202 	orr.w	r2, r3, #2
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 faa4 	bl	8005660 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	f043 0201 	orr.w	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
 800512e:	e001      	b.n	8005134 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_ADC_Start+0x1a>
 800515e:	2302      	movs	r3, #2
 8005160:	e0b2      	b.n	80052c8 <HAL_ADC_Start+0x180>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b01      	cmp	r3, #1
 8005176:	d018      	beq.n	80051aa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005188:	4b52      	ldr	r3, [pc, #328]	; (80052d4 <HAL_ADC_Start+0x18c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a52      	ldr	r2, [pc, #328]	; (80052d8 <HAL_ADC_Start+0x190>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	0c9a      	lsrs	r2, r3, #18
 8005194:	4613      	mov	r3, r2
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	4413      	add	r3, r2
 800519a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800519c:	e002      	b.n	80051a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f9      	bne.n	800519e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d17a      	bne.n	80052ae <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f6:	d106      	bne.n	8005206 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fc:	f023 0206 	bic.w	r2, r3, #6
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	645a      	str	r2, [r3, #68]	; 0x44
 8005204:	e002      	b.n	800520c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005214:	4b31      	ldr	r3, [pc, #196]	; (80052dc <HAL_ADC_Start+0x194>)
 8005216:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005220:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	2b00      	cmp	r3, #0
 800522c:	d12a      	bne.n	8005284 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2b      	ldr	r2, [pc, #172]	; (80052e0 <HAL_ADC_Start+0x198>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d015      	beq.n	8005264 <HAL_ADC_Start+0x11c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a29      	ldr	r2, [pc, #164]	; (80052e4 <HAL_ADC_Start+0x19c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d105      	bne.n	800524e <HAL_ADC_Start+0x106>
 8005242:	4b26      	ldr	r3, [pc, #152]	; (80052dc <HAL_ADC_Start+0x194>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <HAL_ADC_Start+0x1a0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d136      	bne.n	80052c6 <HAL_ADC_Start+0x17e>
 8005258:	4b20      	ldr	r3, [pc, #128]	; (80052dc <HAL_ADC_Start+0x194>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	d130      	bne.n	80052c6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d129      	bne.n	80052c6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005280:	609a      	str	r2, [r3, #8]
 8005282:	e020      	b.n	80052c6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <HAL_ADC_Start+0x198>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d11b      	bne.n	80052c6 <HAL_ADC_Start+0x17e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d114      	bne.n	80052c6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052aa:	609a      	str	r2, [r3, #8]
 80052ac:	e00b      	b.n	80052c6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0210 	orr.w	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	f043 0201 	orr.w	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	20000000 	.word	0x20000000
 80052d8:	431bde83 	.word	0x431bde83
 80052dc:	40012300 	.word	0x40012300
 80052e0:	40012000 	.word	0x40012000
 80052e4:	40012100 	.word	0x40012100
 80052e8:	40012200 	.word	0x40012200

080052ec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005308:	d113      	bne.n	8005332 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005318:	d10b      	bne.n	8005332 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e063      	b.n	80053fa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005332:	f7ff fe95 	bl	8005060 <HAL_GetTick>
 8005336:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005338:	e021      	b.n	800537e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d01d      	beq.n	800537e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_ADC_PollForConversion+0x6c>
 8005348:	f7ff fe8a 	bl	8005060 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d212      	bcs.n	800537e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d00b      	beq.n	800537e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f043 0204 	orr.w	r2, r3, #4
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e03d      	b.n	80053fa <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b02      	cmp	r3, #2
 800538a:	d1d6      	bne.n	800533a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0212 	mvn.w	r2, #18
 8005394:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d123      	bne.n	80053f8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11f      	bne.n	80053f8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d006      	beq.n	80053d4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d111      	bne.n	80053f8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d105      	bne.n	80053f8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f043 0201 	orr.w	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_ADC_ConfigChannel+0x1c>
 8005434:	2302      	movs	r3, #2
 8005436:	e105      	b.n	8005644 <HAL_ADC_ConfigChannel+0x228>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b09      	cmp	r3, #9
 8005446:	d925      	bls.n	8005494 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68d9      	ldr	r1, [r3, #12]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	461a      	mov	r2, r3
 8005456:	4613      	mov	r3, r2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4413      	add	r3, r2
 800545c:	3b1e      	subs	r3, #30
 800545e:	2207      	movs	r2, #7
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43da      	mvns	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	400a      	ands	r2, r1
 800546c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68d9      	ldr	r1, [r3, #12]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	4618      	mov	r0, r3
 8005480:	4603      	mov	r3, r0
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	4403      	add	r3, r0
 8005486:	3b1e      	subs	r3, #30
 8005488:	409a      	lsls	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	60da      	str	r2, [r3, #12]
 8005492:	e022      	b.n	80054da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6919      	ldr	r1, [r3, #16]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	4613      	mov	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4413      	add	r3, r2
 80054a8:	2207      	movs	r2, #7
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43da      	mvns	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	400a      	ands	r2, r1
 80054b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6919      	ldr	r1, [r3, #16]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	4618      	mov	r0, r3
 80054ca:	4603      	mov	r3, r0
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	4403      	add	r3, r0
 80054d0:	409a      	lsls	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b06      	cmp	r3, #6
 80054e0:	d824      	bhi.n	800552c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	3b05      	subs	r3, #5
 80054f4:	221f      	movs	r2, #31
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43da      	mvns	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	400a      	ands	r2, r1
 8005502:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	4618      	mov	r0, r3
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	3b05      	subs	r3, #5
 800551e:	fa00 f203 	lsl.w	r2, r0, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	635a      	str	r2, [r3, #52]	; 0x34
 800552a:	e04c      	b.n	80055c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b0c      	cmp	r3, #12
 8005532:	d824      	bhi.n	800557e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	3b23      	subs	r3, #35	; 0x23
 8005546:	221f      	movs	r2, #31
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	43da      	mvns	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	400a      	ands	r2, r1
 8005554:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	4618      	mov	r0, r3
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	3b23      	subs	r3, #35	; 0x23
 8005570:	fa00 f203 	lsl.w	r2, r0, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
 800557c:	e023      	b.n	80055c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	3b41      	subs	r3, #65	; 0x41
 8005590:	221f      	movs	r2, #31
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43da      	mvns	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	400a      	ands	r2, r1
 800559e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	4618      	mov	r0, r3
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	3b41      	subs	r3, #65	; 0x41
 80055ba:	fa00 f203 	lsl.w	r2, r0, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055c6:	4b22      	ldr	r3, [pc, #136]	; (8005650 <HAL_ADC_ConfigChannel+0x234>)
 80055c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a21      	ldr	r2, [pc, #132]	; (8005654 <HAL_ADC_ConfigChannel+0x238>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d109      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x1cc>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b12      	cmp	r3, #18
 80055da:	d105      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a19      	ldr	r2, [pc, #100]	; (8005654 <HAL_ADC_ConfigChannel+0x238>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d123      	bne.n	800563a <HAL_ADC_ConfigChannel+0x21e>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b10      	cmp	r3, #16
 80055f8:	d003      	beq.n	8005602 <HAL_ADC_ConfigChannel+0x1e6>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b11      	cmp	r3, #17
 8005600:	d11b      	bne.n	800563a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b10      	cmp	r3, #16
 8005614:	d111      	bne.n	800563a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005616:	4b10      	ldr	r3, [pc, #64]	; (8005658 <HAL_ADC_ConfigChannel+0x23c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a10      	ldr	r2, [pc, #64]	; (800565c <HAL_ADC_ConfigChannel+0x240>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	0c9a      	lsrs	r2, r3, #18
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800562c:	e002      	b.n	8005634 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	3b01      	subs	r3, #1
 8005632:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f9      	bne.n	800562e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40012300 	.word	0x40012300
 8005654:	40012000 	.word	0x40012000
 8005658:	20000000 	.word	0x20000000
 800565c:	431bde83 	.word	0x431bde83

08005660 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005668:	4b79      	ldr	r3, [pc, #484]	; (8005850 <ADC_Init+0x1f0>)
 800566a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	431a      	orrs	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6859      	ldr	r1, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	021a      	lsls	r2, r3, #8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6859      	ldr	r1, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6899      	ldr	r1, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	4a58      	ldr	r2, [pc, #352]	; (8005854 <ADC_Init+0x1f4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d022      	beq.n	800573e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005706:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6899      	ldr	r1, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6899      	ldr	r1, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	609a      	str	r2, [r3, #8]
 800573c:	e00f      	b.n	800575e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800574c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800575c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0202 	bic.w	r2, r2, #2
 800576c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6899      	ldr	r1, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	7e1b      	ldrb	r3, [r3, #24]
 8005778:	005a      	lsls	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01b      	beq.n	80057c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800579a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80057aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	3b01      	subs	r3, #1
 80057b8:	035a      	lsls	r2, r3, #13
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	e007      	b.n	80057d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80057e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	051a      	lsls	r2, r3, #20
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6899      	ldr	r1, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005816:	025a      	lsls	r2, r3, #9
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6899      	ldr	r1, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	029a      	lsls	r2, r3, #10
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40012300 	.word	0x40012300
 8005854:	0f000001 	.word	0x0f000001

08005858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005868:	4b0c      	ldr	r3, [pc, #48]	; (800589c <__NVIC_SetPriorityGrouping+0x44>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005874:	4013      	ands	r3, r2
 8005876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800588a:	4a04      	ldr	r2, [pc, #16]	; (800589c <__NVIC_SetPriorityGrouping+0x44>)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	60d3      	str	r3, [r2, #12]
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	e000ed00 	.word	0xe000ed00

080058a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058a4:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <__NVIC_GetPriorityGrouping+0x18>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	0a1b      	lsrs	r3, r3, #8
 80058aa:	f003 0307 	and.w	r3, r3, #7
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	e000ed00 	.word	0xe000ed00

080058bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	db0b      	blt.n	80058e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	f003 021f 	and.w	r2, r3, #31
 80058d4:	4907      	ldr	r1, [pc, #28]	; (80058f4 <__NVIC_EnableIRQ+0x38>)
 80058d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	2001      	movs	r0, #1
 80058de:	fa00 f202 	lsl.w	r2, r0, r2
 80058e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	e000e100 	.word	0xe000e100

080058f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	6039      	str	r1, [r7, #0]
 8005902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005908:	2b00      	cmp	r3, #0
 800590a:	db0a      	blt.n	8005922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	b2da      	uxtb	r2, r3
 8005910:	490c      	ldr	r1, [pc, #48]	; (8005944 <__NVIC_SetPriority+0x4c>)
 8005912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005916:	0112      	lsls	r2, r2, #4
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	440b      	add	r3, r1
 800591c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005920:	e00a      	b.n	8005938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	4908      	ldr	r1, [pc, #32]	; (8005948 <__NVIC_SetPriority+0x50>)
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	3b04      	subs	r3, #4
 8005930:	0112      	lsls	r2, r2, #4
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	440b      	add	r3, r1
 8005936:	761a      	strb	r2, [r3, #24]
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	e000e100 	.word	0xe000e100
 8005948:	e000ed00 	.word	0xe000ed00

0800594c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800594c:	b480      	push	{r7}
 800594e:	b089      	sub	sp, #36	; 0x24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f1c3 0307 	rsb	r3, r3, #7
 8005966:	2b04      	cmp	r3, #4
 8005968:	bf28      	it	cs
 800596a:	2304      	movcs	r3, #4
 800596c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	3304      	adds	r3, #4
 8005972:	2b06      	cmp	r3, #6
 8005974:	d902      	bls.n	800597c <NVIC_EncodePriority+0x30>
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	3b03      	subs	r3, #3
 800597a:	e000      	b.n	800597e <NVIC_EncodePriority+0x32>
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005980:	f04f 32ff 	mov.w	r2, #4294967295
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43da      	mvns	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	401a      	ands	r2, r3
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005994:	f04f 31ff 	mov.w	r1, #4294967295
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	fa01 f303 	lsl.w	r3, r1, r3
 800599e:	43d9      	mvns	r1, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a4:	4313      	orrs	r3, r2
         );
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3724      	adds	r7, #36	; 0x24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
	...

080059b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3b01      	subs	r3, #1
 80059c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059c4:	d301      	bcc.n	80059ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059c6:	2301      	movs	r3, #1
 80059c8:	e00f      	b.n	80059ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059ca:	4a0a      	ldr	r2, [pc, #40]	; (80059f4 <SysTick_Config+0x40>)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059d2:	210f      	movs	r1, #15
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	f7ff ff8e 	bl	80058f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <SysTick_Config+0x40>)
 80059de:	2200      	movs	r2, #0
 80059e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059e2:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <SysTick_Config+0x40>)
 80059e4:	2207      	movs	r2, #7
 80059e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	e000e010 	.word	0xe000e010

080059f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff ff29 	bl	8005858 <__NVIC_SetPriorityGrouping>
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b086      	sub	sp, #24
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	4603      	mov	r3, r0
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a20:	f7ff ff3e 	bl	80058a0 <__NVIC_GetPriorityGrouping>
 8005a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	6978      	ldr	r0, [r7, #20]
 8005a2c:	f7ff ff8e 	bl	800594c <NVIC_EncodePriority>
 8005a30:	4602      	mov	r2, r0
 8005a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ff5d 	bl	80058f8 <__NVIC_SetPriority>
}
 8005a3e:	bf00      	nop
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff31 	bl	80058bc <__NVIC_EnableIRQ>
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff ffa2 	bl	80059b4 <SysTick_Config>
 8005a70:	4603      	mov	r3, r0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a88:	f7ff faea 	bl	8005060 <HAL_GetTick>
 8005a8c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d008      	beq.n	8005aac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2280      	movs	r2, #128	; 0x80
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e052      	b.n	8005b52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0216 	bic.w	r2, r2, #22
 8005aba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695a      	ldr	r2, [r3, #20]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d103      	bne.n	8005adc <HAL_DMA_Abort+0x62>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0208 	bic.w	r2, r2, #8
 8005aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0201 	bic.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005afc:	e013      	b.n	8005b26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005afe:	f7ff faaf 	bl	8005060 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b05      	cmp	r3, #5
 8005b0a:	d90c      	bls.n	8005b26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2203      	movs	r2, #3
 8005b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e015      	b.n	8005b52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e4      	bne.n	8005afe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b38:	223f      	movs	r2, #63	; 0x3f
 8005b3a:	409a      	lsls	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d004      	beq.n	8005b78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2280      	movs	r2, #128	; 0x80
 8005b72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e00c      	b.n	8005b92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2205      	movs	r2, #5
 8005b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b089      	sub	sp, #36	; 0x24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	e16b      	b.n	8005e94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	f040 815a 	bne.w	8005e8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d005      	beq.n	8005bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d130      	bne.n	8005c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	2203      	movs	r2, #3
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	43db      	mvns	r3, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4013      	ands	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c28:	2201      	movs	r2, #1
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43db      	mvns	r3, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4013      	ands	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	091b      	lsrs	r3, r3, #4
 8005c3e:	f003 0201 	and.w	r2, r3, #1
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d017      	beq.n	8005c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4013      	ands	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d123      	bne.n	8005ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	08da      	lsrs	r2, r3, #3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3208      	adds	r2, #8
 8005ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	220f      	movs	r2, #15
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	08da      	lsrs	r2, r3, #3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3208      	adds	r2, #8
 8005cde:	69b9      	ldr	r1, [r7, #24]
 8005ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	2203      	movs	r2, #3
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 0203 	and.w	r2, r3, #3
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80b4 	beq.w	8005e8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	4b60      	ldr	r3, [pc, #384]	; (8005eac <HAL_GPIO_Init+0x30c>)
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	4a5f      	ldr	r2, [pc, #380]	; (8005eac <HAL_GPIO_Init+0x30c>)
 8005d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d34:	6453      	str	r3, [r2, #68]	; 0x44
 8005d36:	4b5d      	ldr	r3, [pc, #372]	; (8005eac <HAL_GPIO_Init+0x30c>)
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d42:	4a5b      	ldr	r2, [pc, #364]	; (8005eb0 <HAL_GPIO_Init+0x310>)
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	089b      	lsrs	r3, r3, #2
 8005d48:	3302      	adds	r3, #2
 8005d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	220f      	movs	r2, #15
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a52      	ldr	r2, [pc, #328]	; (8005eb4 <HAL_GPIO_Init+0x314>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d02b      	beq.n	8005dc6 <HAL_GPIO_Init+0x226>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a51      	ldr	r2, [pc, #324]	; (8005eb8 <HAL_GPIO_Init+0x318>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d025      	beq.n	8005dc2 <HAL_GPIO_Init+0x222>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a50      	ldr	r2, [pc, #320]	; (8005ebc <HAL_GPIO_Init+0x31c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01f      	beq.n	8005dbe <HAL_GPIO_Init+0x21e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a4f      	ldr	r2, [pc, #316]	; (8005ec0 <HAL_GPIO_Init+0x320>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d019      	beq.n	8005dba <HAL_GPIO_Init+0x21a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a4e      	ldr	r2, [pc, #312]	; (8005ec4 <HAL_GPIO_Init+0x324>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <HAL_GPIO_Init+0x216>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a4d      	ldr	r2, [pc, #308]	; (8005ec8 <HAL_GPIO_Init+0x328>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00d      	beq.n	8005db2 <HAL_GPIO_Init+0x212>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a4c      	ldr	r2, [pc, #304]	; (8005ecc <HAL_GPIO_Init+0x32c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d007      	beq.n	8005dae <HAL_GPIO_Init+0x20e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a4b      	ldr	r2, [pc, #300]	; (8005ed0 <HAL_GPIO_Init+0x330>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d101      	bne.n	8005daa <HAL_GPIO_Init+0x20a>
 8005da6:	2307      	movs	r3, #7
 8005da8:	e00e      	b.n	8005dc8 <HAL_GPIO_Init+0x228>
 8005daa:	2308      	movs	r3, #8
 8005dac:	e00c      	b.n	8005dc8 <HAL_GPIO_Init+0x228>
 8005dae:	2306      	movs	r3, #6
 8005db0:	e00a      	b.n	8005dc8 <HAL_GPIO_Init+0x228>
 8005db2:	2305      	movs	r3, #5
 8005db4:	e008      	b.n	8005dc8 <HAL_GPIO_Init+0x228>
 8005db6:	2304      	movs	r3, #4
 8005db8:	e006      	b.n	8005dc8 <HAL_GPIO_Init+0x228>
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e004      	b.n	8005dc8 <HAL_GPIO_Init+0x228>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e002      	b.n	8005dc8 <HAL_GPIO_Init+0x228>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <HAL_GPIO_Init+0x228>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	f002 0203 	and.w	r2, r2, #3
 8005dce:	0092      	lsls	r2, r2, #2
 8005dd0:	4093      	lsls	r3, r2
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dd8:	4935      	ldr	r1, [pc, #212]	; (8005eb0 <HAL_GPIO_Init+0x310>)
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	089b      	lsrs	r3, r3, #2
 8005dde:	3302      	adds	r3, #2
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005de6:	4b3b      	ldr	r3, [pc, #236]	; (8005ed4 <HAL_GPIO_Init+0x334>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	43db      	mvns	r3, r3
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	4013      	ands	r3, r2
 8005df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e0a:	4a32      	ldr	r2, [pc, #200]	; (8005ed4 <HAL_GPIO_Init+0x334>)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e10:	4b30      	ldr	r3, [pc, #192]	; (8005ed4 <HAL_GPIO_Init+0x334>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e34:	4a27      	ldr	r2, [pc, #156]	; (8005ed4 <HAL_GPIO_Init+0x334>)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e3a:	4b26      	ldr	r3, [pc, #152]	; (8005ed4 <HAL_GPIO_Init+0x334>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	43db      	mvns	r3, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4013      	ands	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_GPIO_Init+0x334>)
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e64:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <HAL_GPIO_Init+0x334>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	4013      	ands	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e88:	4a12      	ldr	r2, [pc, #72]	; (8005ed4 <HAL_GPIO_Init+0x334>)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	3301      	adds	r3, #1
 8005e92:	61fb      	str	r3, [r7, #28]
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	2b0f      	cmp	r3, #15
 8005e98:	f67f ae90 	bls.w	8005bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	3724      	adds	r7, #36	; 0x24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	40013800 	.word	0x40013800
 8005eb4:	40020000 	.word	0x40020000
 8005eb8:	40020400 	.word	0x40020400
 8005ebc:	40020800 	.word	0x40020800
 8005ec0:	40020c00 	.word	0x40020c00
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40021400 	.word	0x40021400
 8005ecc:	40021800 	.word	0x40021800
 8005ed0:	40021c00 	.word	0x40021c00
 8005ed4:	40013c00 	.word	0x40013c00

08005ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	887b      	ldrh	r3, [r7, #2]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
 8005ef4:	e001      	b.n	8005efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	807b      	strh	r3, [r7, #2]
 8005f14:	4613      	mov	r3, r2
 8005f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f18:	787b      	ldrb	r3, [r7, #1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f1e:	887a      	ldrh	r2, [r7, #2]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f24:	e003      	b.n	8005f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f26:	887b      	ldrh	r3, [r7, #2]
 8005f28:	041a      	lsls	r2, r3, #16
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	619a      	str	r2, [r3, #24]
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e12b      	b.n	80061a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fe fc64 	bl	8004830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2224      	movs	r2, #36	; 0x24
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0201 	bic.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fa0:	f001 fc48 	bl	8007834 <HAL_RCC_GetPCLK1Freq>
 8005fa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	4a81      	ldr	r2, [pc, #516]	; (80061b0 <HAL_I2C_Init+0x274>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d807      	bhi.n	8005fc0 <HAL_I2C_Init+0x84>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4a80      	ldr	r2, [pc, #512]	; (80061b4 <HAL_I2C_Init+0x278>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	bf94      	ite	ls
 8005fb8:	2301      	movls	r3, #1
 8005fba:	2300      	movhi	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	e006      	b.n	8005fce <HAL_I2C_Init+0x92>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4a7d      	ldr	r2, [pc, #500]	; (80061b8 <HAL_I2C_Init+0x27c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	bf94      	ite	ls
 8005fc8:	2301      	movls	r3, #1
 8005fca:	2300      	movhi	r3, #0
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e0e7      	b.n	80061a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4a78      	ldr	r2, [pc, #480]	; (80061bc <HAL_I2C_Init+0x280>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	0c9b      	lsrs	r3, r3, #18
 8005fe0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	4a6a      	ldr	r2, [pc, #424]	; (80061b0 <HAL_I2C_Init+0x274>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d802      	bhi.n	8006010 <HAL_I2C_Init+0xd4>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	3301      	adds	r3, #1
 800600e:	e009      	b.n	8006024 <HAL_I2C_Init+0xe8>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	4a69      	ldr	r2, [pc, #420]	; (80061c0 <HAL_I2C_Init+0x284>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	099b      	lsrs	r3, r3, #6
 8006022:	3301      	adds	r3, #1
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	430b      	orrs	r3, r1
 800602a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006036:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	495c      	ldr	r1, [pc, #368]	; (80061b0 <HAL_I2C_Init+0x274>)
 8006040:	428b      	cmp	r3, r1
 8006042:	d819      	bhi.n	8006078 <HAL_I2C_Init+0x13c>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	1e59      	subs	r1, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006052:	1c59      	adds	r1, r3, #1
 8006054:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006058:	400b      	ands	r3, r1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <HAL_I2C_Init+0x138>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	1e59      	subs	r1, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	fbb1 f3f3 	udiv	r3, r1, r3
 800606c:	3301      	adds	r3, #1
 800606e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006072:	e051      	b.n	8006118 <HAL_I2C_Init+0x1dc>
 8006074:	2304      	movs	r3, #4
 8006076:	e04f      	b.n	8006118 <HAL_I2C_Init+0x1dc>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d111      	bne.n	80060a4 <HAL_I2C_Init+0x168>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	1e58      	subs	r0, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6859      	ldr	r1, [r3, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	440b      	add	r3, r1
 800608e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006092:	3301      	adds	r3, #1
 8006094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf0c      	ite	eq
 800609c:	2301      	moveq	r3, #1
 800609e:	2300      	movne	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	e012      	b.n	80060ca <HAL_I2C_Init+0x18e>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1e58      	subs	r0, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6859      	ldr	r1, [r3, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	0099      	lsls	r1, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ba:	3301      	adds	r3, #1
 80060bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_I2C_Init+0x196>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e022      	b.n	8006118 <HAL_I2C_Init+0x1dc>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10e      	bne.n	80060f8 <HAL_I2C_Init+0x1bc>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1e58      	subs	r0, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6859      	ldr	r1, [r3, #4]
 80060e2:	460b      	mov	r3, r1
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	440b      	add	r3, r1
 80060e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ec:	3301      	adds	r3, #1
 80060ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f6:	e00f      	b.n	8006118 <HAL_I2C_Init+0x1dc>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	1e58      	subs	r0, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6859      	ldr	r1, [r3, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	0099      	lsls	r1, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	fbb0 f3f3 	udiv	r3, r0, r3
 800610e:	3301      	adds	r3, #1
 8006110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	6809      	ldr	r1, [r1, #0]
 800611c:	4313      	orrs	r3, r2
 800611e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69da      	ldr	r2, [r3, #28]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6911      	ldr	r1, [r2, #16]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68d2      	ldr	r2, [r2, #12]
 8006152:	4311      	orrs	r1, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	430b      	orrs	r3, r1
 800615a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	000186a0 	.word	0x000186a0
 80061b4:	001e847f 	.word	0x001e847f
 80061b8:	003d08ff 	.word	0x003d08ff
 80061bc:	431bde83 	.word	0x431bde83
 80061c0:	10624dd3 	.word	0x10624dd3

080061c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	4608      	mov	r0, r1
 80061ce:	4611      	mov	r1, r2
 80061d0:	461a      	mov	r2, r3
 80061d2:	4603      	mov	r3, r0
 80061d4:	817b      	strh	r3, [r7, #10]
 80061d6:	460b      	mov	r3, r1
 80061d8:	813b      	strh	r3, [r7, #8]
 80061da:	4613      	mov	r3, r2
 80061dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061de:	f7fe ff3f 	bl	8005060 <HAL_GetTick>
 80061e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	f040 80d9 	bne.w	80063a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	2319      	movs	r3, #25
 80061f8:	2201      	movs	r2, #1
 80061fa:	496d      	ldr	r1, [pc, #436]	; (80063b0 <HAL_I2C_Mem_Write+0x1ec>)
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fc8b 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006208:	2302      	movs	r3, #2
 800620a:	e0cc      	b.n	80063a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_I2C_Mem_Write+0x56>
 8006216:	2302      	movs	r3, #2
 8006218:	e0c5      	b.n	80063a6 <HAL_I2C_Mem_Write+0x1e2>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b01      	cmp	r3, #1
 800622e:	d007      	beq.n	8006240 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800624e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2221      	movs	r2, #33	; 0x21
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2240      	movs	r2, #64	; 0x40
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a3a      	ldr	r2, [r7, #32]
 800626a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006270:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4a4d      	ldr	r2, [pc, #308]	; (80063b4 <HAL_I2C_Mem_Write+0x1f0>)
 8006280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006282:	88f8      	ldrh	r0, [r7, #6]
 8006284:	893a      	ldrh	r2, [r7, #8]
 8006286:	8979      	ldrh	r1, [r7, #10]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	4603      	mov	r3, r0
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 fac2 	bl	800681c <I2C_RequestMemoryWrite>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d052      	beq.n	8006344 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e081      	b.n	80063a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fd50 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d107      	bne.n	80062ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e06b      	b.n	80063a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	781a      	ldrb	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b04      	cmp	r3, #4
 800630a:	d11b      	bne.n	8006344 <HAL_I2C_Mem_Write+0x180>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006310:	2b00      	cmp	r3, #0
 8006312:	d017      	beq.n	8006344 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	781a      	ldrb	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1aa      	bne.n	80062a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fd43 	bl	8006ddc <I2C_WaitOnBTFFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	2b04      	cmp	r3, #4
 8006362:	d107      	bne.n	8006374 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006372:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e016      	b.n	80063a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	e000      	b.n	80063a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
  }
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	00100002 	.word	0x00100002
 80063b4:	ffff0000 	.word	0xffff0000

080063b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08c      	sub	sp, #48	; 0x30
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	4608      	mov	r0, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	461a      	mov	r2, r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	817b      	strh	r3, [r7, #10]
 80063ca:	460b      	mov	r3, r1
 80063cc:	813b      	strh	r3, [r7, #8]
 80063ce:	4613      	mov	r3, r2
 80063d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063d2:	f7fe fe45 	bl	8005060 <HAL_GetTick>
 80063d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	f040 8214 	bne.w	800680e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	2319      	movs	r3, #25
 80063ec:	2201      	movs	r2, #1
 80063ee:	497b      	ldr	r1, [pc, #492]	; (80065dc <HAL_I2C_Mem_Read+0x224>)
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fb91 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80063fc:	2302      	movs	r3, #2
 80063fe:	e207      	b.n	8006810 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_I2C_Mem_Read+0x56>
 800640a:	2302      	movs	r3, #2
 800640c:	e200      	b.n	8006810 <HAL_I2C_Mem_Read+0x458>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b01      	cmp	r3, #1
 8006422:	d007      	beq.n	8006434 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2222      	movs	r2, #34	; 0x22
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2240      	movs	r2, #64	; 0x40
 8006450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4a5b      	ldr	r2, [pc, #364]	; (80065e0 <HAL_I2C_Mem_Read+0x228>)
 8006474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006476:	88f8      	ldrh	r0, [r7, #6]
 8006478:	893a      	ldrh	r2, [r7, #8]
 800647a:	8979      	ldrh	r1, [r7, #10]
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	4603      	mov	r3, r0
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fa5e 	bl	8006948 <I2C_RequestMemoryRead>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e1bc      	b.n	8006810 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	d113      	bne.n	80064c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800649e:	2300      	movs	r3, #0
 80064a0:	623b      	str	r3, [r7, #32]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	623b      	str	r3, [r7, #32]
 80064b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e190      	b.n	80067e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d11b      	bne.n	8006506 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	e170      	b.n	80067e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650a:	2b02      	cmp	r3, #2
 800650c:	d11b      	bne.n	8006546 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800651c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800652c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800652e:	2300      	movs	r3, #0
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	e150      	b.n	80067e8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800655c:	e144      	b.n	80067e8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006562:	2b03      	cmp	r3, #3
 8006564:	f200 80f1 	bhi.w	800674a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656c:	2b01      	cmp	r3, #1
 800656e:	d123      	bne.n	80065b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006572:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fc79 	bl	8006e6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e145      	b.n	8006810 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065b6:	e117      	b.n	80067e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d14e      	bne.n	800665e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	2200      	movs	r2, #0
 80065c8:	4906      	ldr	r1, [pc, #24]	; (80065e4 <HAL_I2C_Mem_Read+0x22c>)
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 faa4 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d008      	beq.n	80065e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e11a      	b.n	8006810 <HAL_I2C_Mem_Read+0x458>
 80065da:	bf00      	nop
 80065dc:	00100002 	.word	0x00100002
 80065e0:	ffff0000 	.word	0xffff0000
 80065e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691a      	ldr	r2, [r3, #16]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800665c:	e0c4      	b.n	80067e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	2200      	movs	r2, #0
 8006666:	496c      	ldr	r1, [pc, #432]	; (8006818 <HAL_I2C_Mem_Read+0x460>)
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fa55 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0cb      	b.n	8006810 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691a      	ldr	r2, [r3, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	2200      	movs	r2, #0
 80066c2:	4955      	ldr	r1, [pc, #340]	; (8006818 <HAL_I2C_Mem_Read+0x460>)
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 fa27 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e09d      	b.n	8006810 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006748:	e04e      	b.n	80067e8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800674a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 fb8c 	bl	8006e6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e058      	b.n	8006810 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b04      	cmp	r3, #4
 800679c:	d124      	bne.n	80067e8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d107      	bne.n	80067b6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f47f aeb6 	bne.w	800655e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	e000      	b.n	8006810 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800680e:	2302      	movs	r3, #2
  }
}
 8006810:	4618      	mov	r0, r3
 8006812:	3728      	adds	r7, #40	; 0x28
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	00010004 	.word	0x00010004

0800681c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af02      	add	r7, sp, #8
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	4608      	mov	r0, r1
 8006826:	4611      	mov	r1, r2
 8006828:	461a      	mov	r2, r3
 800682a:	4603      	mov	r3, r0
 800682c:	817b      	strh	r3, [r7, #10]
 800682e:	460b      	mov	r3, r1
 8006830:	813b      	strh	r3, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006844:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	2200      	movs	r2, #0
 800684e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f960 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00d      	beq.n	800687a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686c:	d103      	bne.n	8006876 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006874:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e05f      	b.n	800693a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800687a:	897b      	ldrh	r3, [r7, #10]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	461a      	mov	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006888:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	6a3a      	ldr	r2, [r7, #32]
 800688e:	492d      	ldr	r1, [pc, #180]	; (8006944 <I2C_RequestMemoryWrite+0x128>)
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f9bb 	bl	8006c0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e04c      	b.n	800693a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b8:	6a39      	ldr	r1, [r7, #32]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 fa46 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00d      	beq.n	80068e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d107      	bne.n	80068de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e02b      	b.n	800693a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d105      	bne.n	80068f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068e8:	893b      	ldrh	r3, [r7, #8]
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	611a      	str	r2, [r3, #16]
 80068f2:	e021      	b.n	8006938 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068f4:	893b      	ldrh	r3, [r7, #8]
 80068f6:	0a1b      	lsrs	r3, r3, #8
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006904:	6a39      	ldr	r1, [r7, #32]
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 fa20 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	2b04      	cmp	r3, #4
 8006918:	d107      	bne.n	800692a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006928:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e005      	b.n	800693a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800692e:	893b      	ldrh	r3, [r7, #8]
 8006930:	b2da      	uxtb	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	00010002 	.word	0x00010002

08006948 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af02      	add	r7, sp, #8
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	4608      	mov	r0, r1
 8006952:	4611      	mov	r1, r2
 8006954:	461a      	mov	r2, r3
 8006956:	4603      	mov	r3, r0
 8006958:	817b      	strh	r3, [r7, #10]
 800695a:	460b      	mov	r3, r1
 800695c:	813b      	strh	r3, [r7, #8]
 800695e:	4613      	mov	r3, r2
 8006960:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006970:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	2200      	movs	r2, #0
 800698a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f8c2 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00d      	beq.n	80069b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a8:	d103      	bne.n	80069b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e0aa      	b.n	8006b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069b6:	897b      	ldrh	r3, [r7, #10]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	6a3a      	ldr	r2, [r7, #32]
 80069ca:	4952      	ldr	r1, [pc, #328]	; (8006b14 <I2C_RequestMemoryRead+0x1cc>)
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f91d 	bl	8006c0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e097      	b.n	8006b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069dc:	2300      	movs	r3, #0
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f4:	6a39      	ldr	r1, [r7, #32]
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 f9a8 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00d      	beq.n	8006a1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d107      	bne.n	8006a1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e076      	b.n	8006b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d105      	bne.n	8006a30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a24:	893b      	ldrh	r3, [r7, #8]
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	611a      	str	r2, [r3, #16]
 8006a2e:	e021      	b.n	8006a74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a30:	893b      	ldrh	r3, [r7, #8]
 8006a32:	0a1b      	lsrs	r3, r3, #8
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a40:	6a39      	ldr	r1, [r7, #32]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f982 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00d      	beq.n	8006a6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d107      	bne.n	8006a66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e050      	b.n	8006b0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a6a:	893b      	ldrh	r3, [r7, #8]
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a76:	6a39      	ldr	r1, [r7, #32]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 f967 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00d      	beq.n	8006aa0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d107      	bne.n	8006a9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e035      	b.n	8006b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f82b 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00d      	beq.n	8006ae4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad6:	d103      	bne.n	8006ae0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e013      	b.n	8006b0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ae4:	897b      	ldrh	r3, [r7, #10]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	6a3a      	ldr	r2, [r7, #32]
 8006af8:	4906      	ldr	r1, [pc, #24]	; (8006b14 <I2C_RequestMemoryRead+0x1cc>)
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f886 	bl	8006c0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	00010002 	.word	0x00010002

08006b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	4613      	mov	r3, r2
 8006b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b28:	e048      	b.n	8006bbc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d044      	beq.n	8006bbc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b32:	f7fe fa95 	bl	8005060 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d302      	bcc.n	8006b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d139      	bne.n	8006bbc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	0c1b      	lsrs	r3, r3, #16
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d10d      	bne.n	8006b6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	43da      	mvns	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	bf0c      	ite	eq
 8006b64:	2301      	moveq	r3, #1
 8006b66:	2300      	movne	r3, #0
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	e00c      	b.n	8006b88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	43da      	mvns	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bf0c      	ite	eq
 8006b80:	2301      	moveq	r3, #1
 8006b82:	2300      	movne	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	461a      	mov	r2, r3
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d116      	bne.n	8006bbc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	f043 0220 	orr.w	r2, r3, #32
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e023      	b.n	8006c04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d10d      	bne.n	8006be2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	43da      	mvns	r2, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bf0c      	ite	eq
 8006bd8:	2301      	moveq	r3, #1
 8006bda:	2300      	movne	r3, #0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	e00c      	b.n	8006bfc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	43da      	mvns	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4013      	ands	r3, r2
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bf0c      	ite	eq
 8006bf4:	2301      	moveq	r3, #1
 8006bf6:	2300      	movne	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d093      	beq.n	8006b2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c1a:	e071      	b.n	8006d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c2a:	d123      	bne.n	8006c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	f043 0204 	orr.w	r2, r3, #4
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e067      	b.n	8006d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d041      	beq.n	8006d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7c:	f7fe f9f0 	bl	8005060 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d302      	bcc.n	8006c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d136      	bne.n	8006d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	0c1b      	lsrs	r3, r3, #16
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d10c      	bne.n	8006cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	43da      	mvns	r2, r3
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bf14      	ite	ne
 8006cae:	2301      	movne	r3, #1
 8006cb0:	2300      	moveq	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	e00b      	b.n	8006cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	43da      	mvns	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bf14      	ite	ne
 8006cc8:	2301      	movne	r3, #1
 8006cca:	2300      	moveq	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d016      	beq.n	8006d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	f043 0220 	orr.w	r2, r3, #32
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e021      	b.n	8006d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	0c1b      	lsrs	r3, r3, #16
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d10c      	bne.n	8006d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	43da      	mvns	r2, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4013      	ands	r3, r2
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	e00b      	b.n	8006d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	43da      	mvns	r2, r3
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bf14      	ite	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	2300      	moveq	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f47f af6d 	bne.w	8006c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d58:	e034      	b.n	8006dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f8e3 	bl	8006f26 <I2C_IsAcknowledgeFailed>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e034      	b.n	8006dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d028      	beq.n	8006dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d72:	f7fe f975 	bl	8005060 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d302      	bcc.n	8006d88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d11d      	bne.n	8006dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d92:	2b80      	cmp	r3, #128	; 0x80
 8006d94:	d016      	beq.n	8006dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	f043 0220 	orr.w	r2, r3, #32
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e007      	b.n	8006dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dce:	2b80      	cmp	r3, #128	; 0x80
 8006dd0:	d1c3      	bne.n	8006d5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006de8:	e034      	b.n	8006e54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f89b 	bl	8006f26 <I2C_IsAcknowledgeFailed>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e034      	b.n	8006e64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d028      	beq.n	8006e54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e02:	f7fe f92d 	bl	8005060 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d302      	bcc.n	8006e18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11d      	bne.n	8006e54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d016      	beq.n	8006e54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	f043 0220 	orr.w	r2, r3, #32
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e007      	b.n	8006e64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d1c3      	bne.n	8006dea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e78:	e049      	b.n	8006f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	d119      	bne.n	8006ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0210 	mvn.w	r2, #16
 8006e90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e030      	b.n	8006f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ebc:	f7fe f8d0 	bl	8005060 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d302      	bcc.n	8006ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d11d      	bne.n	8006f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d016      	beq.n	8006f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	f043 0220 	orr.w	r2, r3, #32
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e007      	b.n	8006f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b40      	cmp	r3, #64	; 0x40
 8006f1a:	d1ae      	bne.n	8006e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3c:	d11b      	bne.n	8006f76 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f46:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	f043 0204 	orr.w	r2, r3, #4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006f8a:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <HAL_PWR_EnableBkUpAccess+0x24>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006f96:	687b      	ldr	r3, [r7, #4]
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	420e0020 	.word	0x420e0020
 8006fa8:	40007000 	.word	0x40007000

08006fac <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <HAL_PWR_DisableBkUpAccess+0x20>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006fb8:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <HAL_PWR_DisableBkUpAccess+0x24>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006fbe:	687b      	ldr	r3, [r7, #4]
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	420e0020 	.word	0x420e0020
 8006fd0:	40007000 	.word	0x40007000

08006fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e267      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d075      	beq.n	80070de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ff2:	4b88      	ldr	r3, [pc, #544]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d00c      	beq.n	8007018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ffe:	4b85      	ldr	r3, [pc, #532]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007006:	2b08      	cmp	r3, #8
 8007008:	d112      	bne.n	8007030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800700a:	4b82      	ldr	r3, [pc, #520]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007016:	d10b      	bne.n	8007030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007018:	4b7e      	ldr	r3, [pc, #504]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d05b      	beq.n	80070dc <HAL_RCC_OscConfig+0x108>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d157      	bne.n	80070dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e242      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007038:	d106      	bne.n	8007048 <HAL_RCC_OscConfig+0x74>
 800703a:	4b76      	ldr	r3, [pc, #472]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a75      	ldr	r2, [pc, #468]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	e01d      	b.n	8007084 <HAL_RCC_OscConfig+0xb0>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007050:	d10c      	bne.n	800706c <HAL_RCC_OscConfig+0x98>
 8007052:	4b70      	ldr	r3, [pc, #448]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a6f      	ldr	r2, [pc, #444]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	4b6d      	ldr	r3, [pc, #436]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6c      	ldr	r2, [pc, #432]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	e00b      	b.n	8007084 <HAL_RCC_OscConfig+0xb0>
 800706c:	4b69      	ldr	r3, [pc, #420]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a68      	ldr	r2, [pc, #416]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	4b66      	ldr	r3, [pc, #408]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a65      	ldr	r2, [pc, #404]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 800707e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d013      	beq.n	80070b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800708c:	f7fd ffe8 	bl	8005060 <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007094:	f7fd ffe4 	bl	8005060 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b64      	cmp	r3, #100	; 0x64
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e207      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a6:	4b5b      	ldr	r3, [pc, #364]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0f0      	beq.n	8007094 <HAL_RCC_OscConfig+0xc0>
 80070b2:	e014      	b.n	80070de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b4:	f7fd ffd4 	bl	8005060 <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070bc:	f7fd ffd0 	bl	8005060 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b64      	cmp	r3, #100	; 0x64
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e1f3      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ce:	4b51      	ldr	r3, [pc, #324]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f0      	bne.n	80070bc <HAL_RCC_OscConfig+0xe8>
 80070da:	e000      	b.n	80070de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d063      	beq.n	80071b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070ea:	4b4a      	ldr	r3, [pc, #296]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00b      	beq.n	800710e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070f6:	4b47      	ldr	r3, [pc, #284]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d11c      	bne.n	800713c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007102:	4b44      	ldr	r3, [pc, #272]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d116      	bne.n	800713c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800710e:	4b41      	ldr	r3, [pc, #260]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <HAL_RCC_OscConfig+0x152>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d001      	beq.n	8007126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e1c7      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007126:	4b3b      	ldr	r3, [pc, #236]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	4937      	ldr	r1, [pc, #220]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007136:	4313      	orrs	r3, r2
 8007138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800713a:	e03a      	b.n	80071b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d020      	beq.n	8007186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007144:	4b34      	ldr	r3, [pc, #208]	; (8007218 <HAL_RCC_OscConfig+0x244>)
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714a:	f7fd ff89 	bl	8005060 <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007152:	f7fd ff85 	bl	8005060 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e1a8      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007164:	4b2b      	ldr	r3, [pc, #172]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f0      	beq.n	8007152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007170:	4b28      	ldr	r3, [pc, #160]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	4925      	ldr	r1, [pc, #148]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 8007180:	4313      	orrs	r3, r2
 8007182:	600b      	str	r3, [r1, #0]
 8007184:	e015      	b.n	80071b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007186:	4b24      	ldr	r3, [pc, #144]	; (8007218 <HAL_RCC_OscConfig+0x244>)
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718c:	f7fd ff68 	bl	8005060 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007194:	f7fd ff64 	bl	8005060 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e187      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071a6:	4b1b      	ldr	r3, [pc, #108]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f0      	bne.n	8007194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d036      	beq.n	800722c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d016      	beq.n	80071f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071c6:	4b15      	ldr	r3, [pc, #84]	; (800721c <HAL_RCC_OscConfig+0x248>)
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071cc:	f7fd ff48 	bl	8005060 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071d4:	f7fd ff44 	bl	8005060 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e167      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071e6:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_RCC_OscConfig+0x240>)
 80071e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f0      	beq.n	80071d4 <HAL_RCC_OscConfig+0x200>
 80071f2:	e01b      	b.n	800722c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071f4:	4b09      	ldr	r3, [pc, #36]	; (800721c <HAL_RCC_OscConfig+0x248>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071fa:	f7fd ff31 	bl	8005060 <HAL_GetTick>
 80071fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007200:	e00e      	b.n	8007220 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007202:	f7fd ff2d 	bl	8005060 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d907      	bls.n	8007220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e150      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
 8007214:	40023800 	.word	0x40023800
 8007218:	42470000 	.word	0x42470000
 800721c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007220:	4b88      	ldr	r3, [pc, #544]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 8007222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1ea      	bne.n	8007202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8097 	beq.w	8007368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800723a:	2300      	movs	r3, #0
 800723c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800723e:	4b81      	ldr	r3, [pc, #516]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10f      	bne.n	800726a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800724a:	2300      	movs	r3, #0
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	4b7d      	ldr	r3, [pc, #500]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	4a7c      	ldr	r2, [pc, #496]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 8007254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007258:	6413      	str	r3, [r2, #64]	; 0x40
 800725a:	4b7a      	ldr	r3, [pc, #488]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007262:	60bb      	str	r3, [r7, #8]
 8007264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800726a:	4b77      	ldr	r3, [pc, #476]	; (8007448 <HAL_RCC_OscConfig+0x474>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d118      	bne.n	80072a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007276:	4b74      	ldr	r3, [pc, #464]	; (8007448 <HAL_RCC_OscConfig+0x474>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a73      	ldr	r2, [pc, #460]	; (8007448 <HAL_RCC_OscConfig+0x474>)
 800727c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007282:	f7fd feed 	bl	8005060 <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800728a:	f7fd fee9 	bl	8005060 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e10c      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800729c:	4b6a      	ldr	r3, [pc, #424]	; (8007448 <HAL_RCC_OscConfig+0x474>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0f0      	beq.n	800728a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d106      	bne.n	80072be <HAL_RCC_OscConfig+0x2ea>
 80072b0:	4b64      	ldr	r3, [pc, #400]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b4:	4a63      	ldr	r2, [pc, #396]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	6713      	str	r3, [r2, #112]	; 0x70
 80072bc:	e01c      	b.n	80072f8 <HAL_RCC_OscConfig+0x324>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d10c      	bne.n	80072e0 <HAL_RCC_OscConfig+0x30c>
 80072c6:	4b5f      	ldr	r3, [pc, #380]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	4a5e      	ldr	r2, [pc, #376]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80072cc:	f043 0304 	orr.w	r3, r3, #4
 80072d0:	6713      	str	r3, [r2, #112]	; 0x70
 80072d2:	4b5c      	ldr	r3, [pc, #368]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d6:	4a5b      	ldr	r2, [pc, #364]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	6713      	str	r3, [r2, #112]	; 0x70
 80072de:	e00b      	b.n	80072f8 <HAL_RCC_OscConfig+0x324>
 80072e0:	4b58      	ldr	r3, [pc, #352]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e4:	4a57      	ldr	r2, [pc, #348]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80072e6:	f023 0301 	bic.w	r3, r3, #1
 80072ea:	6713      	str	r3, [r2, #112]	; 0x70
 80072ec:	4b55      	ldr	r3, [pc, #340]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f0:	4a54      	ldr	r2, [pc, #336]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80072f2:	f023 0304 	bic.w	r3, r3, #4
 80072f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d015      	beq.n	800732c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007300:	f7fd feae 	bl	8005060 <HAL_GetTick>
 8007304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007306:	e00a      	b.n	800731e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007308:	f7fd feaa 	bl	8005060 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	f241 3288 	movw	r2, #5000	; 0x1388
 8007316:	4293      	cmp	r3, r2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e0cb      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800731e:	4b49      	ldr	r3, [pc, #292]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 8007320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0ee      	beq.n	8007308 <HAL_RCC_OscConfig+0x334>
 800732a:	e014      	b.n	8007356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800732c:	f7fd fe98 	bl	8005060 <HAL_GetTick>
 8007330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007332:	e00a      	b.n	800734a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007334:	f7fd fe94 	bl	8005060 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e0b5      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800734a:	4b3e      	ldr	r3, [pc, #248]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1ee      	bne.n	8007334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d105      	bne.n	8007368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800735c:	4b39      	ldr	r3, [pc, #228]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	4a38      	ldr	r2, [pc, #224]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 8007362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007366:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80a1 	beq.w	80074b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007372:	4b34      	ldr	r3, [pc, #208]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 030c 	and.w	r3, r3, #12
 800737a:	2b08      	cmp	r3, #8
 800737c:	d05c      	beq.n	8007438 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d141      	bne.n	800740a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007386:	4b31      	ldr	r3, [pc, #196]	; (800744c <HAL_RCC_OscConfig+0x478>)
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800738c:	f7fd fe68 	bl	8005060 <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007394:	f7fd fe64 	bl	8005060 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e087      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a6:	4b27      	ldr	r3, [pc, #156]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f0      	bne.n	8007394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69da      	ldr	r2, [r3, #28]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	019b      	lsls	r3, r3, #6
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c8:	085b      	lsrs	r3, r3, #1
 80073ca:	3b01      	subs	r3, #1
 80073cc:	041b      	lsls	r3, r3, #16
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	061b      	lsls	r3, r3, #24
 80073d6:	491b      	ldr	r1, [pc, #108]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073dc:	4b1b      	ldr	r3, [pc, #108]	; (800744c <HAL_RCC_OscConfig+0x478>)
 80073de:	2201      	movs	r2, #1
 80073e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073e2:	f7fd fe3d 	bl	8005060 <HAL_GetTick>
 80073e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073e8:	e008      	b.n	80073fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ea:	f7fd fe39 	bl	8005060 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e05c      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073fc:	4b11      	ldr	r3, [pc, #68]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0f0      	beq.n	80073ea <HAL_RCC_OscConfig+0x416>
 8007408:	e054      	b.n	80074b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <HAL_RCC_OscConfig+0x478>)
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007410:	f7fd fe26 	bl	8005060 <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007418:	f7fd fe22 	bl	8005060 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e045      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742a:	4b06      	ldr	r3, [pc, #24]	; (8007444 <HAL_RCC_OscConfig+0x470>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1f0      	bne.n	8007418 <HAL_RCC_OscConfig+0x444>
 8007436:	e03d      	b.n	80074b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d107      	bne.n	8007450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e038      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
 8007444:	40023800 	.word	0x40023800
 8007448:	40007000 	.word	0x40007000
 800744c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007450:	4b1b      	ldr	r3, [pc, #108]	; (80074c0 <HAL_RCC_OscConfig+0x4ec>)
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d028      	beq.n	80074b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007468:	429a      	cmp	r2, r3
 800746a:	d121      	bne.n	80074b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007476:	429a      	cmp	r2, r3
 8007478:	d11a      	bne.n	80074b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007480:	4013      	ands	r3, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007488:	4293      	cmp	r3, r2
 800748a:	d111      	bne.n	80074b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	085b      	lsrs	r3, r3, #1
 8007498:	3b01      	subs	r3, #1
 800749a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800749c:	429a      	cmp	r2, r3
 800749e:	d107      	bne.n	80074b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d001      	beq.n	80074b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e000      	b.n	80074b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	40023800 	.word	0x40023800

080074c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0cc      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074d8:	4b68      	ldr	r3, [pc, #416]	; (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d90c      	bls.n	8007500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074e6:	4b65      	ldr	r3, [pc, #404]	; (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ee:	4b63      	ldr	r3, [pc, #396]	; (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d001      	beq.n	8007500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0b8      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d020      	beq.n	800754e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007518:	4b59      	ldr	r3, [pc, #356]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	4a58      	ldr	r2, [pc, #352]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 800751e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007530:	4b53      	ldr	r3, [pc, #332]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	4a52      	ldr	r2, [pc, #328]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800753a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800753c:	4b50      	ldr	r3, [pc, #320]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	494d      	ldr	r1, [pc, #308]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 800754a:	4313      	orrs	r3, r2
 800754c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d044      	beq.n	80075e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d107      	bne.n	8007572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007562:	4b47      	ldr	r3, [pc, #284]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d119      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e07f      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d003      	beq.n	8007582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800757e:	2b03      	cmp	r3, #3
 8007580:	d107      	bne.n	8007592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007582:	4b3f      	ldr	r3, [pc, #252]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d109      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e06f      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007592:	4b3b      	ldr	r3, [pc, #236]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e067      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075a2:	4b37      	ldr	r3, [pc, #220]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f023 0203 	bic.w	r2, r3, #3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	4934      	ldr	r1, [pc, #208]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075b4:	f7fd fd54 	bl	8005060 <HAL_GetTick>
 80075b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ba:	e00a      	b.n	80075d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075bc:	f7fd fd50 	bl	8005060 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e04f      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075d2:	4b2b      	ldr	r3, [pc, #172]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 020c 	and.w	r2, r3, #12
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d1eb      	bne.n	80075bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075e4:	4b25      	ldr	r3, [pc, #148]	; (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d20c      	bcs.n	800760c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f2:	4b22      	ldr	r3, [pc, #136]	; (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075fa:	4b20      	ldr	r3, [pc, #128]	; (800767c <HAL_RCC_ClockConfig+0x1b8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d001      	beq.n	800760c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e032      	b.n	8007672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d008      	beq.n	800762a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007618:	4b19      	ldr	r3, [pc, #100]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	4916      	ldr	r1, [pc, #88]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007626:	4313      	orrs	r3, r2
 8007628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0308 	and.w	r3, r3, #8
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007636:	4b12      	ldr	r3, [pc, #72]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	490e      	ldr	r1, [pc, #56]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	4313      	orrs	r3, r2
 8007648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800764a:	f000 f821 	bl	8007690 <HAL_RCC_GetSysClockFreq>
 800764e:	4602      	mov	r2, r0
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	091b      	lsrs	r3, r3, #4
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	490a      	ldr	r1, [pc, #40]	; (8007684 <HAL_RCC_ClockConfig+0x1c0>)
 800765c:	5ccb      	ldrb	r3, [r1, r3]
 800765e:	fa22 f303 	lsr.w	r3, r2, r3
 8007662:	4a09      	ldr	r2, [pc, #36]	; (8007688 <HAL_RCC_ClockConfig+0x1c4>)
 8007664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007666:	4b09      	ldr	r3, [pc, #36]	; (800768c <HAL_RCC_ClockConfig+0x1c8>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4618      	mov	r0, r3
 800766c:	f7fd fcb4 	bl	8004fd8 <HAL_InitTick>

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	40023c00 	.word	0x40023c00
 8007680:	40023800 	.word	0x40023800
 8007684:	08011ec0 	.word	0x08011ec0
 8007688:	20000000 	.word	0x20000000
 800768c:	20000004 	.word	0x20000004

08007690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007694:	b090      	sub	sp, #64	; 0x40
 8007696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	637b      	str	r3, [r7, #52]	; 0x34
 800769c:	2300      	movs	r3, #0
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076a0:	2300      	movs	r3, #0
 80076a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076a8:	4b59      	ldr	r3, [pc, #356]	; (8007810 <HAL_RCC_GetSysClockFreq+0x180>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f003 030c 	and.w	r3, r3, #12
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d00d      	beq.n	80076d0 <HAL_RCC_GetSysClockFreq+0x40>
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	f200 80a1 	bhi.w	80077fc <HAL_RCC_GetSysClockFreq+0x16c>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <HAL_RCC_GetSysClockFreq+0x34>
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d003      	beq.n	80076ca <HAL_RCC_GetSysClockFreq+0x3a>
 80076c2:	e09b      	b.n	80077fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076c4:	4b53      	ldr	r3, [pc, #332]	; (8007814 <HAL_RCC_GetSysClockFreq+0x184>)
 80076c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80076c8:	e09b      	b.n	8007802 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076ca:	4b53      	ldr	r3, [pc, #332]	; (8007818 <HAL_RCC_GetSysClockFreq+0x188>)
 80076cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076ce:	e098      	b.n	8007802 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076d0:	4b4f      	ldr	r3, [pc, #316]	; (8007810 <HAL_RCC_GetSysClockFreq+0x180>)
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076da:	4b4d      	ldr	r3, [pc, #308]	; (8007810 <HAL_RCC_GetSysClockFreq+0x180>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d028      	beq.n	8007738 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076e6:	4b4a      	ldr	r3, [pc, #296]	; (8007810 <HAL_RCC_GetSysClockFreq+0x180>)
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	099b      	lsrs	r3, r3, #6
 80076ec:	2200      	movs	r2, #0
 80076ee:	623b      	str	r3, [r7, #32]
 80076f0:	627a      	str	r2, [r7, #36]	; 0x24
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80076f8:	2100      	movs	r1, #0
 80076fa:	4b47      	ldr	r3, [pc, #284]	; (8007818 <HAL_RCC_GetSysClockFreq+0x188>)
 80076fc:	fb03 f201 	mul.w	r2, r3, r1
 8007700:	2300      	movs	r3, #0
 8007702:	fb00 f303 	mul.w	r3, r0, r3
 8007706:	4413      	add	r3, r2
 8007708:	4a43      	ldr	r2, [pc, #268]	; (8007818 <HAL_RCC_GetSysClockFreq+0x188>)
 800770a:	fba0 1202 	umull	r1, r2, r0, r2
 800770e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007710:	460a      	mov	r2, r1
 8007712:	62ba      	str	r2, [r7, #40]	; 0x28
 8007714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007716:	4413      	add	r3, r2
 8007718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800771a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771c:	2200      	movs	r2, #0
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	61fa      	str	r2, [r7, #28]
 8007722:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007726:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800772a:	f7f9 faad 	bl	8000c88 <__aeabi_uldivmod>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4613      	mov	r3, r2
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007736:	e053      	b.n	80077e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007738:	4b35      	ldr	r3, [pc, #212]	; (8007810 <HAL_RCC_GetSysClockFreq+0x180>)
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	099b      	lsrs	r3, r3, #6
 800773e:	2200      	movs	r2, #0
 8007740:	613b      	str	r3, [r7, #16]
 8007742:	617a      	str	r2, [r7, #20]
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800774a:	f04f 0b00 	mov.w	fp, #0
 800774e:	4652      	mov	r2, sl
 8007750:	465b      	mov	r3, fp
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f04f 0100 	mov.w	r1, #0
 800775a:	0159      	lsls	r1, r3, #5
 800775c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007760:	0150      	lsls	r0, r2, #5
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	ebb2 080a 	subs.w	r8, r2, sl
 800776a:	eb63 090b 	sbc.w	r9, r3, fp
 800776e:	f04f 0200 	mov.w	r2, #0
 8007772:	f04f 0300 	mov.w	r3, #0
 8007776:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800777a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800777e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007782:	ebb2 0408 	subs.w	r4, r2, r8
 8007786:	eb63 0509 	sbc.w	r5, r3, r9
 800778a:	f04f 0200 	mov.w	r2, #0
 800778e:	f04f 0300 	mov.w	r3, #0
 8007792:	00eb      	lsls	r3, r5, #3
 8007794:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007798:	00e2      	lsls	r2, r4, #3
 800779a:	4614      	mov	r4, r2
 800779c:	461d      	mov	r5, r3
 800779e:	eb14 030a 	adds.w	r3, r4, sl
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	eb45 030b 	adc.w	r3, r5, fp
 80077a8:	607b      	str	r3, [r7, #4]
 80077aa:	f04f 0200 	mov.w	r2, #0
 80077ae:	f04f 0300 	mov.w	r3, #0
 80077b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077b6:	4629      	mov	r1, r5
 80077b8:	028b      	lsls	r3, r1, #10
 80077ba:	4621      	mov	r1, r4
 80077bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077c0:	4621      	mov	r1, r4
 80077c2:	028a      	lsls	r2, r1, #10
 80077c4:	4610      	mov	r0, r2
 80077c6:	4619      	mov	r1, r3
 80077c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ca:	2200      	movs	r2, #0
 80077cc:	60bb      	str	r3, [r7, #8]
 80077ce:	60fa      	str	r2, [r7, #12]
 80077d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077d4:	f7f9 fa58 	bl	8000c88 <__aeabi_uldivmod>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4613      	mov	r3, r2
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <HAL_RCC_GetSysClockFreq+0x180>)
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	0c1b      	lsrs	r3, r3, #16
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	3301      	adds	r3, #1
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80077f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80077fa:	e002      	b.n	8007802 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077fc:	4b05      	ldr	r3, [pc, #20]	; (8007814 <HAL_RCC_GetSysClockFreq+0x184>)
 80077fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007804:	4618      	mov	r0, r3
 8007806:	3740      	adds	r7, #64	; 0x40
 8007808:	46bd      	mov	sp, r7
 800780a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800780e:	bf00      	nop
 8007810:	40023800 	.word	0x40023800
 8007814:	00f42400 	.word	0x00f42400
 8007818:	017d7840 	.word	0x017d7840

0800781c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007820:	4b03      	ldr	r3, [pc, #12]	; (8007830 <HAL_RCC_GetHCLKFreq+0x14>)
 8007822:	681b      	ldr	r3, [r3, #0]
}
 8007824:	4618      	mov	r0, r3
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20000000 	.word	0x20000000

08007834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007838:	f7ff fff0 	bl	800781c <HAL_RCC_GetHCLKFreq>
 800783c:	4602      	mov	r2, r0
 800783e:	4b05      	ldr	r3, [pc, #20]	; (8007854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	0a9b      	lsrs	r3, r3, #10
 8007844:	f003 0307 	and.w	r3, r3, #7
 8007848:	4903      	ldr	r1, [pc, #12]	; (8007858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800784a:	5ccb      	ldrb	r3, [r1, r3]
 800784c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007850:	4618      	mov	r0, r3
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40023800 	.word	0x40023800
 8007858:	08011ed0 	.word	0x08011ed0

0800785c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007860:	f7ff ffdc 	bl	800781c <HAL_RCC_GetHCLKFreq>
 8007864:	4602      	mov	r2, r0
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	0b5b      	lsrs	r3, r3, #13
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	4903      	ldr	r1, [pc, #12]	; (8007880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007872:	5ccb      	ldrb	r3, [r1, r3]
 8007874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007878:	4618      	mov	r0, r3
 800787a:	bd80      	pop	{r7, pc}
 800787c:	40023800 	.word	0x40023800
 8007880:	08011ed0 	.word	0x08011ed0

08007884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e041      	b.n	800791a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7fd f808 	bl	80048c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3304      	adds	r3, #4
 80078c0:	4619      	mov	r1, r3
 80078c2:	4610      	mov	r0, r2
 80078c4:	f001 f876 	bl	80089b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b01      	cmp	r3, #1
 8007936:	d001      	beq.n	800793c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e046      	b.n	80079ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a23      	ldr	r2, [pc, #140]	; (80079d8 <HAL_TIM_Base_Start+0xb4>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d022      	beq.n	8007994 <HAL_TIM_Base_Start+0x70>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007956:	d01d      	beq.n	8007994 <HAL_TIM_Base_Start+0x70>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1f      	ldr	r2, [pc, #124]	; (80079dc <HAL_TIM_Base_Start+0xb8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d018      	beq.n	8007994 <HAL_TIM_Base_Start+0x70>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <HAL_TIM_Base_Start+0xbc>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d013      	beq.n	8007994 <HAL_TIM_Base_Start+0x70>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a1c      	ldr	r2, [pc, #112]	; (80079e4 <HAL_TIM_Base_Start+0xc0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00e      	beq.n	8007994 <HAL_TIM_Base_Start+0x70>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <HAL_TIM_Base_Start+0xc4>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d009      	beq.n	8007994 <HAL_TIM_Base_Start+0x70>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a19      	ldr	r2, [pc, #100]	; (80079ec <HAL_TIM_Base_Start+0xc8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d004      	beq.n	8007994 <HAL_TIM_Base_Start+0x70>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a18      	ldr	r2, [pc, #96]	; (80079f0 <HAL_TIM_Base_Start+0xcc>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d111      	bne.n	80079b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 0307 	and.w	r3, r3, #7
 800799e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b06      	cmp	r3, #6
 80079a4:	d010      	beq.n	80079c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f042 0201 	orr.w	r2, r2, #1
 80079b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b6:	e007      	b.n	80079c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0201 	orr.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	40010000 	.word	0x40010000
 80079dc:	40000400 	.word	0x40000400
 80079e0:	40000800 	.word	0x40000800
 80079e4:	40000c00 	.word	0x40000c00
 80079e8:	40010400 	.word	0x40010400
 80079ec:	40014000 	.word	0x40014000
 80079f0:	40001800 	.word	0x40001800

080079f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d001      	beq.n	8007a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e04e      	b.n	8007aaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a23      	ldr	r2, [pc, #140]	; (8007ab8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d022      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a36:	d01d      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1f      	ldr	r2, [pc, #124]	; (8007abc <HAL_TIM_Base_Start_IT+0xc8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d018      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1e      	ldr	r2, [pc, #120]	; (8007ac0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d013      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1c      	ldr	r2, [pc, #112]	; (8007ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00e      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1b      	ldr	r2, [pc, #108]	; (8007ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d009      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a19      	ldr	r2, [pc, #100]	; (8007acc <HAL_TIM_Base_Start_IT+0xd8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d004      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a18      	ldr	r2, [pc, #96]	; (8007ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d111      	bne.n	8007a98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b06      	cmp	r3, #6
 8007a84:	d010      	beq.n	8007aa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f042 0201 	orr.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a96:	e007      	b.n	8007aa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0201 	orr.w	r2, r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	40010000 	.word	0x40010000
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800
 8007ac4:	40000c00 	.word	0x40000c00
 8007ac8:	40010400 	.word	0x40010400
 8007acc:	40014000 	.word	0x40014000
 8007ad0:	40001800 	.word	0x40001800

08007ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e041      	b.n	8007b6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d106      	bne.n	8007b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f839 	bl	8007b72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	4619      	mov	r1, r3
 8007b12:	4610      	mov	r0, r2
 8007b14:	f000 ff4e 	bl	80089b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b7a:	bf00      	nop
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
	...

08007b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d109      	bne.n	8007bac <HAL_TIM_PWM_Start+0x24>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	bf14      	ite	ne
 8007ba4:	2301      	movne	r3, #1
 8007ba6:	2300      	moveq	r3, #0
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	e022      	b.n	8007bf2 <HAL_TIM_PWM_Start+0x6a>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d109      	bne.n	8007bc6 <HAL_TIM_PWM_Start+0x3e>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	bf14      	ite	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	2300      	moveq	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	e015      	b.n	8007bf2 <HAL_TIM_PWM_Start+0x6a>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d109      	bne.n	8007be0 <HAL_TIM_PWM_Start+0x58>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	bf14      	ite	ne
 8007bd8:	2301      	movne	r3, #1
 8007bda:	2300      	moveq	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	e008      	b.n	8007bf2 <HAL_TIM_PWM_Start+0x6a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	bf14      	ite	ne
 8007bec:	2301      	movne	r3, #1
 8007bee:	2300      	moveq	r3, #0
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e07c      	b.n	8007cf4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d104      	bne.n	8007c0a <HAL_TIM_PWM_Start+0x82>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c08:	e013      	b.n	8007c32 <HAL_TIM_PWM_Start+0xaa>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d104      	bne.n	8007c1a <HAL_TIM_PWM_Start+0x92>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c18:	e00b      	b.n	8007c32 <HAL_TIM_PWM_Start+0xaa>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d104      	bne.n	8007c2a <HAL_TIM_PWM_Start+0xa2>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c28:	e003      	b.n	8007c32 <HAL_TIM_PWM_Start+0xaa>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2201      	movs	r2, #1
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 fada 	bl	80091f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a2d      	ldr	r2, [pc, #180]	; (8007cfc <HAL_TIM_PWM_Start+0x174>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <HAL_TIM_PWM_Start+0xcc>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a2c      	ldr	r2, [pc, #176]	; (8007d00 <HAL_TIM_PWM_Start+0x178>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d101      	bne.n	8007c58 <HAL_TIM_PWM_Start+0xd0>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e000      	b.n	8007c5a <HAL_TIM_PWM_Start+0xd2>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a22      	ldr	r2, [pc, #136]	; (8007cfc <HAL_TIM_PWM_Start+0x174>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d022      	beq.n	8007cbe <HAL_TIM_PWM_Start+0x136>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c80:	d01d      	beq.n	8007cbe <HAL_TIM_PWM_Start+0x136>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a1f      	ldr	r2, [pc, #124]	; (8007d04 <HAL_TIM_PWM_Start+0x17c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d018      	beq.n	8007cbe <HAL_TIM_PWM_Start+0x136>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a1d      	ldr	r2, [pc, #116]	; (8007d08 <HAL_TIM_PWM_Start+0x180>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d013      	beq.n	8007cbe <HAL_TIM_PWM_Start+0x136>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a1c      	ldr	r2, [pc, #112]	; (8007d0c <HAL_TIM_PWM_Start+0x184>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00e      	beq.n	8007cbe <HAL_TIM_PWM_Start+0x136>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <HAL_TIM_PWM_Start+0x178>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d009      	beq.n	8007cbe <HAL_TIM_PWM_Start+0x136>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a18      	ldr	r2, [pc, #96]	; (8007d10 <HAL_TIM_PWM_Start+0x188>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d004      	beq.n	8007cbe <HAL_TIM_PWM_Start+0x136>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a16      	ldr	r2, [pc, #88]	; (8007d14 <HAL_TIM_PWM_Start+0x18c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d111      	bne.n	8007ce2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f003 0307 	and.w	r3, r3, #7
 8007cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b06      	cmp	r3, #6
 8007cce:	d010      	beq.n	8007cf2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce0:	e007      	b.n	8007cf2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f042 0201 	orr.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40010000 	.word	0x40010000
 8007d00:	40010400 	.word	0x40010400
 8007d04:	40000400 	.word	0x40000400
 8007d08:	40000800 	.word	0x40000800
 8007d0c:	40000c00 	.word	0x40000c00
 8007d10:	40014000 	.word	0x40014000
 8007d14:	40001800 	.word	0x40001800

08007d18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e041      	b.n	8007dae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f839 	bl	8007db6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f000 fe2c 	bl	80089b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d104      	bne.n	8007dea <HAL_TIM_IC_Start_IT+0x1e>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	e013      	b.n	8007e12 <HAL_TIM_IC_Start_IT+0x46>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d104      	bne.n	8007dfa <HAL_TIM_IC_Start_IT+0x2e>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	e00b      	b.n	8007e12 <HAL_TIM_IC_Start_IT+0x46>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d104      	bne.n	8007e0a <HAL_TIM_IC_Start_IT+0x3e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	e003      	b.n	8007e12 <HAL_TIM_IC_Start_IT+0x46>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d104      	bne.n	8007e24 <HAL_TIM_IC_Start_IT+0x58>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	e013      	b.n	8007e4c <HAL_TIM_IC_Start_IT+0x80>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d104      	bne.n	8007e34 <HAL_TIM_IC_Start_IT+0x68>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	e00b      	b.n	8007e4c <HAL_TIM_IC_Start_IT+0x80>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	d104      	bne.n	8007e44 <HAL_TIM_IC_Start_IT+0x78>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	e003      	b.n	8007e4c <HAL_TIM_IC_Start_IT+0x80>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d102      	bne.n	8007e5a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e54:	7b7b      	ldrb	r3, [r7, #13]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d001      	beq.n	8007e5e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e0cc      	b.n	8007ff8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d104      	bne.n	8007e6e <HAL_TIM_IC_Start_IT+0xa2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e6c:	e013      	b.n	8007e96 <HAL_TIM_IC_Start_IT+0xca>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d104      	bne.n	8007e7e <HAL_TIM_IC_Start_IT+0xb2>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e7c:	e00b      	b.n	8007e96 <HAL_TIM_IC_Start_IT+0xca>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d104      	bne.n	8007e8e <HAL_TIM_IC_Start_IT+0xc2>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e8c:	e003      	b.n	8007e96 <HAL_TIM_IC_Start_IT+0xca>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d104      	bne.n	8007ea6 <HAL_TIM_IC_Start_IT+0xda>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ea4:	e013      	b.n	8007ece <HAL_TIM_IC_Start_IT+0x102>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d104      	bne.n	8007eb6 <HAL_TIM_IC_Start_IT+0xea>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007eb4:	e00b      	b.n	8007ece <HAL_TIM_IC_Start_IT+0x102>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d104      	bne.n	8007ec6 <HAL_TIM_IC_Start_IT+0xfa>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ec4:	e003      	b.n	8007ece <HAL_TIM_IC_Start_IT+0x102>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b0c      	cmp	r3, #12
 8007ed2:	d841      	bhi.n	8007f58 <HAL_TIM_IC_Start_IT+0x18c>
 8007ed4:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <HAL_TIM_IC_Start_IT+0x110>)
 8007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eda:	bf00      	nop
 8007edc:	08007f11 	.word	0x08007f11
 8007ee0:	08007f59 	.word	0x08007f59
 8007ee4:	08007f59 	.word	0x08007f59
 8007ee8:	08007f59 	.word	0x08007f59
 8007eec:	08007f23 	.word	0x08007f23
 8007ef0:	08007f59 	.word	0x08007f59
 8007ef4:	08007f59 	.word	0x08007f59
 8007ef8:	08007f59 	.word	0x08007f59
 8007efc:	08007f35 	.word	0x08007f35
 8007f00:	08007f59 	.word	0x08007f59
 8007f04:	08007f59 	.word	0x08007f59
 8007f08:	08007f59 	.word	0x08007f59
 8007f0c:	08007f47 	.word	0x08007f47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0202 	orr.w	r2, r2, #2
 8007f1e:	60da      	str	r2, [r3, #12]
      break;
 8007f20:	e01d      	b.n	8007f5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0204 	orr.w	r2, r2, #4
 8007f30:	60da      	str	r2, [r3, #12]
      break;
 8007f32:	e014      	b.n	8007f5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0208 	orr.w	r2, r2, #8
 8007f42:	60da      	str	r2, [r3, #12]
      break;
 8007f44:	e00b      	b.n	8007f5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f042 0210 	orr.w	r2, r2, #16
 8007f54:	60da      	str	r2, [r3, #12]
      break;
 8007f56:	e002      	b.n	8007f5e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d148      	bne.n	8007ff6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 f941 	bl	80091f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a22      	ldr	r2, [pc, #136]	; (8008000 <HAL_TIM_IC_Start_IT+0x234>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d022      	beq.n	8007fc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f84:	d01d      	beq.n	8007fc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a1e      	ldr	r2, [pc, #120]	; (8008004 <HAL_TIM_IC_Start_IT+0x238>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d018      	beq.n	8007fc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a1c      	ldr	r2, [pc, #112]	; (8008008 <HAL_TIM_IC_Start_IT+0x23c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d013      	beq.n	8007fc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a1b      	ldr	r2, [pc, #108]	; (800800c <HAL_TIM_IC_Start_IT+0x240>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00e      	beq.n	8007fc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a19      	ldr	r2, [pc, #100]	; (8008010 <HAL_TIM_IC_Start_IT+0x244>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d009      	beq.n	8007fc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a18      	ldr	r2, [pc, #96]	; (8008014 <HAL_TIM_IC_Start_IT+0x248>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a16      	ldr	r2, [pc, #88]	; (8008018 <HAL_TIM_IC_Start_IT+0x24c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d111      	bne.n	8007fe6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b06      	cmp	r3, #6
 8007fd2:	d010      	beq.n	8007ff6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f042 0201 	orr.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe4:	e007      	b.n	8007ff6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f042 0201 	orr.w	r2, r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40010000 	.word	0x40010000
 8008004:	40000400 	.word	0x40000400
 8008008:	40000800 	.word	0x40000800
 800800c:	40000c00 	.word	0x40000c00
 8008010:	40010400 	.word	0x40010400
 8008014:	40014000 	.word	0x40014000
 8008018:	40001800 	.word	0x40001800

0800801c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e097      	b.n	8008160 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d106      	bne.n	800804a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7fc fcf3 	bl	8004a30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2202      	movs	r2, #2
 800804e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6812      	ldr	r2, [r2, #0]
 800805c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008060:	f023 0307 	bic.w	r3, r3, #7
 8008064:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3304      	adds	r3, #4
 800806e:	4619      	mov	r1, r3
 8008070:	4610      	mov	r0, r2
 8008072:	f000 fc9f 	bl	80089b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	4313      	orrs	r3, r2
 8008096:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800809e:	f023 0303 	bic.w	r3, r3, #3
 80080a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	4313      	orrs	r3, r2
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80080bc:	f023 030c 	bic.w	r3, r3, #12
 80080c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68da      	ldr	r2, [r3, #12]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	4313      	orrs	r3, r2
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	4313      	orrs	r3, r2
 80080de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	011a      	lsls	r2, r3, #4
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	031b      	lsls	r3, r3, #12
 80080ec:	4313      	orrs	r3, r2
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80080fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008102:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	4313      	orrs	r3, r2
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008178:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008180:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008188:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008190:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d110      	bne.n	80081ba <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d102      	bne.n	80081a4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800819e:	7b7b      	ldrb	r3, [r7, #13]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d001      	beq.n	80081a8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e089      	b.n	80082bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081b8:	e031      	b.n	800821e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d110      	bne.n	80081e2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d102      	bne.n	80081cc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80081c6:	7b3b      	ldrb	r3, [r7, #12]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d001      	beq.n	80081d0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e075      	b.n	80082bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081e0:	e01d      	b.n	800821e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d108      	bne.n	80081fa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d105      	bne.n	80081fa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081ee:	7b7b      	ldrb	r3, [r7, #13]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d102      	bne.n	80081fa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80081f4:	7b3b      	ldrb	r3, [r7, #12]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d001      	beq.n	80081fe <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e05e      	b.n	80082bc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2202      	movs	r2, #2
 8008202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2202      	movs	r2, #2
 800820a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2202      	movs	r2, #2
 8008212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2202      	movs	r2, #2
 800821a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <HAL_TIM_Encoder_Start_IT+0xc4>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b04      	cmp	r3, #4
 8008228:	d010      	beq.n	800824c <HAL_TIM_Encoder_Start_IT+0xe4>
 800822a:	e01f      	b.n	800826c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2201      	movs	r2, #1
 8008232:	2100      	movs	r1, #0
 8008234:	4618      	mov	r0, r3
 8008236:	f000 ffdd 	bl	80091f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f042 0202 	orr.w	r2, r2, #2
 8008248:	60da      	str	r2, [r3, #12]
      break;
 800824a:	e02e      	b.n	80082aa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2201      	movs	r2, #1
 8008252:	2104      	movs	r1, #4
 8008254:	4618      	mov	r0, r3
 8008256:	f000 ffcd 	bl	80091f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0204 	orr.w	r2, r2, #4
 8008268:	60da      	str	r2, [r3, #12]
      break;
 800826a:	e01e      	b.n	80082aa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2201      	movs	r2, #1
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f000 ffbd 	bl	80091f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2201      	movs	r2, #1
 8008280:	2104      	movs	r1, #4
 8008282:	4618      	mov	r0, r3
 8008284:	f000 ffb6 	bl	80091f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0202 	orr.w	r2, r2, #2
 8008296:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0204 	orr.w	r2, r2, #4
 80082a6:	60da      	str	r2, [r3, #12]
      break;
 80082a8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f042 0201 	orr.w	r2, r2, #1
 80082b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d020      	beq.n	8008328 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d01b      	beq.n	8008328 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f06f 0202 	mvn.w	r2, #2
 80082f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	f003 0303 	and.w	r3, r3, #3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7fa f8ae 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 8008314:	e005      	b.n	8008322 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fb2e 	bl	8008978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fb35 	bl	800898c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f003 0304 	and.w	r3, r3, #4
 800832e:	2b00      	cmp	r3, #0
 8008330:	d020      	beq.n	8008374 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f003 0304 	and.w	r3, r3, #4
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01b      	beq.n	8008374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0204 	mvn.w	r2, #4
 8008344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2202      	movs	r2, #2
 800834a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fa f888 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 8008360:	e005      	b.n	800836e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fb08 	bl	8008978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fb0f 	bl	800898c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d020      	beq.n	80083c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01b      	beq.n	80083c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0208 	mvn.w	r2, #8
 8008390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2204      	movs	r2, #4
 8008396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7fa f862 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 80083ac:	e005      	b.n	80083ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fae2 	bl	8008978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fae9 	bl	800898c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f003 0310 	and.w	r3, r3, #16
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d020      	beq.n	800840c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f003 0310 	and.w	r3, r3, #16
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d01b      	beq.n	800840c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f06f 0210 	mvn.w	r2, #16
 80083dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2208      	movs	r2, #8
 80083e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7fa f83c 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 80083f8:	e005      	b.n	8008406 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fabc 	bl	8008978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fac3 	bl	800898c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00c      	beq.n	8008430 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	d007      	beq.n	8008430 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0201 	mvn.w	r2, #1
 8008428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7f9 fff8 	bl	8002420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00c      	beq.n	8008454 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008440:	2b00      	cmp	r3, #0
 8008442:	d007      	beq.n	8008454 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800844c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 ffce 	bl	80093f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00c      	beq.n	8008478 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	d007      	beq.n	8008478 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa94 	bl	80089a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00c      	beq.n	800849c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	2b00      	cmp	r3, #0
 800848a:	d007      	beq.n	800849c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f06f 0220 	mvn.w	r2, #32
 8008494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 ffa0 	bl	80093dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d101      	bne.n	80084c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80084be:	2302      	movs	r3, #2
 80084c0:	e088      	b.n	80085d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d11b      	bne.n	8008508 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80084e0:	f000 fcc4 	bl	8008e6c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 020c 	bic.w	r2, r2, #12
 80084f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6999      	ldr	r1, [r3, #24]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	619a      	str	r2, [r3, #24]
 8008506:	e060      	b.n	80085ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b04      	cmp	r3, #4
 800850c:	d11c      	bne.n	8008548 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800851e:	f000 fd48 	bl	8008fb2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	699a      	ldr	r2, [r3, #24]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008530:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6999      	ldr	r1, [r3, #24]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	021a      	lsls	r2, r3, #8
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	619a      	str	r2, [r3, #24]
 8008546:	e040      	b.n	80085ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b08      	cmp	r3, #8
 800854c:	d11b      	bne.n	8008586 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800855e:	f000 fd95 	bl	800908c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	69da      	ldr	r2, [r3, #28]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 020c 	bic.w	r2, r2, #12
 8008570:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69d9      	ldr	r1, [r3, #28]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	61da      	str	r2, [r3, #28]
 8008584:	e021      	b.n	80085ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b0c      	cmp	r3, #12
 800858a:	d11c      	bne.n	80085c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800859c:	f000 fdb2 	bl	8009104 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69da      	ldr	r2, [r3, #28]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80085ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69d9      	ldr	r1, [r3, #28]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	021a      	lsls	r2, r3, #8
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	61da      	str	r2, [r3, #28]
 80085c4:	e001      	b.n	80085ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3718      	adds	r7, #24
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e0ae      	b.n	8008758 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b0c      	cmp	r3, #12
 8008606:	f200 809f 	bhi.w	8008748 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800860a:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	08008645 	.word	0x08008645
 8008614:	08008749 	.word	0x08008749
 8008618:	08008749 	.word	0x08008749
 800861c:	08008749 	.word	0x08008749
 8008620:	08008685 	.word	0x08008685
 8008624:	08008749 	.word	0x08008749
 8008628:	08008749 	.word	0x08008749
 800862c:	08008749 	.word	0x08008749
 8008630:	080086c7 	.word	0x080086c7
 8008634:	08008749 	.word	0x08008749
 8008638:	08008749 	.word	0x08008749
 800863c:	08008749 	.word	0x08008749
 8008640:	08008707 	.word	0x08008707
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68b9      	ldr	r1, [r7, #8]
 800864a:	4618      	mov	r0, r3
 800864c:	f000 fa5e 	bl	8008b0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699a      	ldr	r2, [r3, #24]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0208 	orr.w	r2, r2, #8
 800865e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699a      	ldr	r2, [r3, #24]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0204 	bic.w	r2, r2, #4
 800866e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6999      	ldr	r1, [r3, #24]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	691a      	ldr	r2, [r3, #16]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	619a      	str	r2, [r3, #24]
      break;
 8008682:	e064      	b.n	800874e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 faae 	bl	8008bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699a      	ldr	r2, [r3, #24]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800869e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699a      	ldr	r2, [r3, #24]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6999      	ldr	r1, [r3, #24]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	021a      	lsls	r2, r3, #8
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	619a      	str	r2, [r3, #24]
      break;
 80086c4:	e043      	b.n	800874e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68b9      	ldr	r1, [r7, #8]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fb03 	bl	8008cd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69da      	ldr	r2, [r3, #28]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f042 0208 	orr.w	r2, r2, #8
 80086e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	69da      	ldr	r2, [r3, #28]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0204 	bic.w	r2, r2, #4
 80086f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	69d9      	ldr	r1, [r3, #28]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	61da      	str	r2, [r3, #28]
      break;
 8008704:	e023      	b.n	800874e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68b9      	ldr	r1, [r7, #8]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fb57 	bl	8008dc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	69da      	ldr	r2, [r3, #28]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69da      	ldr	r2, [r3, #28]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69d9      	ldr	r1, [r3, #28]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	021a      	lsls	r2, r3, #8
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	61da      	str	r2, [r3, #28]
      break;
 8008746:	e002      	b.n	800874e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	75fb      	strb	r3, [r7, #23]
      break;
 800874c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008756:	7dfb      	ldrb	r3, [r7, #23]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008774:	2b01      	cmp	r3, #1
 8008776:	d101      	bne.n	800877c <HAL_TIM_ConfigClockSource+0x1c>
 8008778:	2302      	movs	r3, #2
 800877a:	e0b4      	b.n	80088e6 <HAL_TIM_ConfigClockSource+0x186>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800879a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087b4:	d03e      	beq.n	8008834 <HAL_TIM_ConfigClockSource+0xd4>
 80087b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087ba:	f200 8087 	bhi.w	80088cc <HAL_TIM_ConfigClockSource+0x16c>
 80087be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087c2:	f000 8086 	beq.w	80088d2 <HAL_TIM_ConfigClockSource+0x172>
 80087c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ca:	d87f      	bhi.n	80088cc <HAL_TIM_ConfigClockSource+0x16c>
 80087cc:	2b70      	cmp	r3, #112	; 0x70
 80087ce:	d01a      	beq.n	8008806 <HAL_TIM_ConfigClockSource+0xa6>
 80087d0:	2b70      	cmp	r3, #112	; 0x70
 80087d2:	d87b      	bhi.n	80088cc <HAL_TIM_ConfigClockSource+0x16c>
 80087d4:	2b60      	cmp	r3, #96	; 0x60
 80087d6:	d050      	beq.n	800887a <HAL_TIM_ConfigClockSource+0x11a>
 80087d8:	2b60      	cmp	r3, #96	; 0x60
 80087da:	d877      	bhi.n	80088cc <HAL_TIM_ConfigClockSource+0x16c>
 80087dc:	2b50      	cmp	r3, #80	; 0x50
 80087de:	d03c      	beq.n	800885a <HAL_TIM_ConfigClockSource+0xfa>
 80087e0:	2b50      	cmp	r3, #80	; 0x50
 80087e2:	d873      	bhi.n	80088cc <HAL_TIM_ConfigClockSource+0x16c>
 80087e4:	2b40      	cmp	r3, #64	; 0x40
 80087e6:	d058      	beq.n	800889a <HAL_TIM_ConfigClockSource+0x13a>
 80087e8:	2b40      	cmp	r3, #64	; 0x40
 80087ea:	d86f      	bhi.n	80088cc <HAL_TIM_ConfigClockSource+0x16c>
 80087ec:	2b30      	cmp	r3, #48	; 0x30
 80087ee:	d064      	beq.n	80088ba <HAL_TIM_ConfigClockSource+0x15a>
 80087f0:	2b30      	cmp	r3, #48	; 0x30
 80087f2:	d86b      	bhi.n	80088cc <HAL_TIM_ConfigClockSource+0x16c>
 80087f4:	2b20      	cmp	r3, #32
 80087f6:	d060      	beq.n	80088ba <HAL_TIM_ConfigClockSource+0x15a>
 80087f8:	2b20      	cmp	r3, #32
 80087fa:	d867      	bhi.n	80088cc <HAL_TIM_ConfigClockSource+0x16c>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d05c      	beq.n	80088ba <HAL_TIM_ConfigClockSource+0x15a>
 8008800:	2b10      	cmp	r3, #16
 8008802:	d05a      	beq.n	80088ba <HAL_TIM_ConfigClockSource+0x15a>
 8008804:	e062      	b.n	80088cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008816:	f000 fccd 	bl	80091b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	609a      	str	r2, [r3, #8]
      break;
 8008832:	e04f      	b.n	80088d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008844:	f000 fcb6 	bl	80091b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008856:	609a      	str	r2, [r3, #8]
      break;
 8008858:	e03c      	b.n	80088d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008866:	461a      	mov	r2, r3
 8008868:	f000 fb74 	bl	8008f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2150      	movs	r1, #80	; 0x50
 8008872:	4618      	mov	r0, r3
 8008874:	f000 fc83 	bl	800917e <TIM_ITRx_SetConfig>
      break;
 8008878:	e02c      	b.n	80088d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008886:	461a      	mov	r2, r3
 8008888:	f000 fbd0 	bl	800902c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2160      	movs	r1, #96	; 0x60
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fc73 	bl	800917e <TIM_ITRx_SetConfig>
      break;
 8008898:	e01c      	b.n	80088d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088a6:	461a      	mov	r2, r3
 80088a8:	f000 fb54 	bl	8008f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2140      	movs	r1, #64	; 0x40
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fc63 	bl	800917e <TIM_ITRx_SetConfig>
      break;
 80088b8:	e00c      	b.n	80088d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4619      	mov	r1, r3
 80088c4:	4610      	mov	r0, r2
 80088c6:	f000 fc5a 	bl	800917e <TIM_ITRx_SetConfig>
      break;
 80088ca:	e003      	b.n	80088d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	73fb      	strb	r3, [r7, #15]
      break;
 80088d0:	e000      	b.n	80088d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b0c      	cmp	r3, #12
 8008902:	d831      	bhi.n	8008968 <HAL_TIM_ReadCapturedValue+0x78>
 8008904:	a201      	add	r2, pc, #4	; (adr r2, 800890c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890a:	bf00      	nop
 800890c:	08008941 	.word	0x08008941
 8008910:	08008969 	.word	0x08008969
 8008914:	08008969 	.word	0x08008969
 8008918:	08008969 	.word	0x08008969
 800891c:	0800894b 	.word	0x0800894b
 8008920:	08008969 	.word	0x08008969
 8008924:	08008969 	.word	0x08008969
 8008928:	08008969 	.word	0x08008969
 800892c:	08008955 	.word	0x08008955
 8008930:	08008969 	.word	0x08008969
 8008934:	08008969 	.word	0x08008969
 8008938:	08008969 	.word	0x08008969
 800893c:	0800895f 	.word	0x0800895f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008946:	60fb      	str	r3, [r7, #12]

      break;
 8008948:	e00f      	b.n	800896a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	60fb      	str	r3, [r7, #12]

      break;
 8008952:	e00a      	b.n	800896a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895a:	60fb      	str	r3, [r7, #12]

      break;
 800895c:	e005      	b.n	800896a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008964:	60fb      	str	r3, [r7, #12]

      break;
 8008966:	e000      	b.n	800896a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008968:	bf00      	nop
  }

  return tmpreg;
 800896a:	68fb      	ldr	r3, [r7, #12]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a46      	ldr	r2, [pc, #280]	; (8008ae0 <TIM_Base_SetConfig+0x12c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d013      	beq.n	80089f4 <TIM_Base_SetConfig+0x40>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d2:	d00f      	beq.n	80089f4 <TIM_Base_SetConfig+0x40>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a43      	ldr	r2, [pc, #268]	; (8008ae4 <TIM_Base_SetConfig+0x130>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d00b      	beq.n	80089f4 <TIM_Base_SetConfig+0x40>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a42      	ldr	r2, [pc, #264]	; (8008ae8 <TIM_Base_SetConfig+0x134>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d007      	beq.n	80089f4 <TIM_Base_SetConfig+0x40>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a41      	ldr	r2, [pc, #260]	; (8008aec <TIM_Base_SetConfig+0x138>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d003      	beq.n	80089f4 <TIM_Base_SetConfig+0x40>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a40      	ldr	r2, [pc, #256]	; (8008af0 <TIM_Base_SetConfig+0x13c>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d108      	bne.n	8008a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a35      	ldr	r2, [pc, #212]	; (8008ae0 <TIM_Base_SetConfig+0x12c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d02b      	beq.n	8008a66 <TIM_Base_SetConfig+0xb2>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a14:	d027      	beq.n	8008a66 <TIM_Base_SetConfig+0xb2>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a32      	ldr	r2, [pc, #200]	; (8008ae4 <TIM_Base_SetConfig+0x130>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d023      	beq.n	8008a66 <TIM_Base_SetConfig+0xb2>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a31      	ldr	r2, [pc, #196]	; (8008ae8 <TIM_Base_SetConfig+0x134>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d01f      	beq.n	8008a66 <TIM_Base_SetConfig+0xb2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a30      	ldr	r2, [pc, #192]	; (8008aec <TIM_Base_SetConfig+0x138>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d01b      	beq.n	8008a66 <TIM_Base_SetConfig+0xb2>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a2f      	ldr	r2, [pc, #188]	; (8008af0 <TIM_Base_SetConfig+0x13c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d017      	beq.n	8008a66 <TIM_Base_SetConfig+0xb2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a2e      	ldr	r2, [pc, #184]	; (8008af4 <TIM_Base_SetConfig+0x140>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d013      	beq.n	8008a66 <TIM_Base_SetConfig+0xb2>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a2d      	ldr	r2, [pc, #180]	; (8008af8 <TIM_Base_SetConfig+0x144>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00f      	beq.n	8008a66 <TIM_Base_SetConfig+0xb2>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a2c      	ldr	r2, [pc, #176]	; (8008afc <TIM_Base_SetConfig+0x148>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00b      	beq.n	8008a66 <TIM_Base_SetConfig+0xb2>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a2b      	ldr	r2, [pc, #172]	; (8008b00 <TIM_Base_SetConfig+0x14c>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d007      	beq.n	8008a66 <TIM_Base_SetConfig+0xb2>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a2a      	ldr	r2, [pc, #168]	; (8008b04 <TIM_Base_SetConfig+0x150>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d003      	beq.n	8008a66 <TIM_Base_SetConfig+0xb2>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a29      	ldr	r2, [pc, #164]	; (8008b08 <TIM_Base_SetConfig+0x154>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d108      	bne.n	8008a78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	689a      	ldr	r2, [r3, #8]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a10      	ldr	r2, [pc, #64]	; (8008ae0 <TIM_Base_SetConfig+0x12c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d003      	beq.n	8008aac <TIM_Base_SetConfig+0xf8>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a12      	ldr	r2, [pc, #72]	; (8008af0 <TIM_Base_SetConfig+0x13c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d103      	bne.n	8008ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	691a      	ldr	r2, [r3, #16]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d105      	bne.n	8008ad2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f023 0201 	bic.w	r2, r3, #1
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	611a      	str	r2, [r3, #16]
  }
}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	40010000 	.word	0x40010000
 8008ae4:	40000400 	.word	0x40000400
 8008ae8:	40000800 	.word	0x40000800
 8008aec:	40000c00 	.word	0x40000c00
 8008af0:	40010400 	.word	0x40010400
 8008af4:	40014000 	.word	0x40014000
 8008af8:	40014400 	.word	0x40014400
 8008afc:	40014800 	.word	0x40014800
 8008b00:	40001800 	.word	0x40001800
 8008b04:	40001c00 	.word	0x40001c00
 8008b08:	40002000 	.word	0x40002000

08008b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a1b      	ldr	r3, [r3, #32]
 8008b20:	f023 0201 	bic.w	r2, r3, #1
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 0303 	bic.w	r3, r3, #3
 8008b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f023 0302 	bic.w	r3, r3, #2
 8008b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a20      	ldr	r2, [pc, #128]	; (8008be4 <TIM_OC1_SetConfig+0xd8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d003      	beq.n	8008b70 <TIM_OC1_SetConfig+0x64>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a1f      	ldr	r2, [pc, #124]	; (8008be8 <TIM_OC1_SetConfig+0xdc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d10c      	bne.n	8008b8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f023 0308 	bic.w	r3, r3, #8
 8008b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f023 0304 	bic.w	r3, r3, #4
 8008b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a15      	ldr	r2, [pc, #84]	; (8008be4 <TIM_OC1_SetConfig+0xd8>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d003      	beq.n	8008b9a <TIM_OC1_SetConfig+0x8e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a14      	ldr	r2, [pc, #80]	; (8008be8 <TIM_OC1_SetConfig+0xdc>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d111      	bne.n	8008bbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	621a      	str	r2, [r3, #32]
}
 8008bd8:	bf00      	nop
 8008bda:	371c      	adds	r7, #28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	40010000 	.word	0x40010000
 8008be8:	40010400 	.word	0x40010400

08008bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	f023 0210 	bic.w	r2, r3, #16
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	021b      	lsls	r3, r3, #8
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f023 0320 	bic.w	r3, r3, #32
 8008c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	011b      	lsls	r3, r3, #4
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a22      	ldr	r2, [pc, #136]	; (8008cd0 <TIM_OC2_SetConfig+0xe4>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d003      	beq.n	8008c54 <TIM_OC2_SetConfig+0x68>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a21      	ldr	r2, [pc, #132]	; (8008cd4 <TIM_OC2_SetConfig+0xe8>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d10d      	bne.n	8008c70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a17      	ldr	r2, [pc, #92]	; (8008cd0 <TIM_OC2_SetConfig+0xe4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d003      	beq.n	8008c80 <TIM_OC2_SetConfig+0x94>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a16      	ldr	r2, [pc, #88]	; (8008cd4 <TIM_OC2_SetConfig+0xe8>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d113      	bne.n	8008ca8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	621a      	str	r2, [r3, #32]
}
 8008cc2:	bf00      	nop
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	40010000 	.word	0x40010000
 8008cd4:	40010400 	.word	0x40010400

08008cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0303 	bic.w	r3, r3, #3
 8008d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	021b      	lsls	r3, r3, #8
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a21      	ldr	r2, [pc, #132]	; (8008db8 <TIM_OC3_SetConfig+0xe0>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d003      	beq.n	8008d3e <TIM_OC3_SetConfig+0x66>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a20      	ldr	r2, [pc, #128]	; (8008dbc <TIM_OC3_SetConfig+0xe4>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d10d      	bne.n	8008d5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	021b      	lsls	r3, r3, #8
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a16      	ldr	r2, [pc, #88]	; (8008db8 <TIM_OC3_SetConfig+0xe0>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d003      	beq.n	8008d6a <TIM_OC3_SetConfig+0x92>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a15      	ldr	r2, [pc, #84]	; (8008dbc <TIM_OC3_SetConfig+0xe4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d113      	bne.n	8008d92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	621a      	str	r2, [r3, #32]
}
 8008dac:	bf00      	nop
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	40010000 	.word	0x40010000
 8008dbc:	40010400 	.word	0x40010400

08008dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	021b      	lsls	r3, r3, #8
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	031b      	lsls	r3, r3, #12
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a12      	ldr	r2, [pc, #72]	; (8008e64 <TIM_OC4_SetConfig+0xa4>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d003      	beq.n	8008e28 <TIM_OC4_SetConfig+0x68>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a11      	ldr	r2, [pc, #68]	; (8008e68 <TIM_OC4_SetConfig+0xa8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d109      	bne.n	8008e3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	019b      	lsls	r3, r3, #6
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	621a      	str	r2, [r3, #32]
}
 8008e56:	bf00      	nop
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	40010000 	.word	0x40010000
 8008e68:	40010400 	.word	0x40010400

08008e6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	f023 0201 	bic.w	r2, r3, #1
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	4a28      	ldr	r2, [pc, #160]	; (8008f38 <TIM_TI1_SetConfig+0xcc>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d01b      	beq.n	8008ed2 <TIM_TI1_SetConfig+0x66>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea0:	d017      	beq.n	8008ed2 <TIM_TI1_SetConfig+0x66>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4a25      	ldr	r2, [pc, #148]	; (8008f3c <TIM_TI1_SetConfig+0xd0>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <TIM_TI1_SetConfig+0x66>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4a24      	ldr	r2, [pc, #144]	; (8008f40 <TIM_TI1_SetConfig+0xd4>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d00f      	beq.n	8008ed2 <TIM_TI1_SetConfig+0x66>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	4a23      	ldr	r2, [pc, #140]	; (8008f44 <TIM_TI1_SetConfig+0xd8>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d00b      	beq.n	8008ed2 <TIM_TI1_SetConfig+0x66>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4a22      	ldr	r2, [pc, #136]	; (8008f48 <TIM_TI1_SetConfig+0xdc>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d007      	beq.n	8008ed2 <TIM_TI1_SetConfig+0x66>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	4a21      	ldr	r2, [pc, #132]	; (8008f4c <TIM_TI1_SetConfig+0xe0>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d003      	beq.n	8008ed2 <TIM_TI1_SetConfig+0x66>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4a20      	ldr	r2, [pc, #128]	; (8008f50 <TIM_TI1_SetConfig+0xe4>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d101      	bne.n	8008ed6 <TIM_TI1_SetConfig+0x6a>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e000      	b.n	8008ed8 <TIM_TI1_SetConfig+0x6c>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d008      	beq.n	8008eee <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	e003      	b.n	8008ef6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f043 0301 	orr.w	r3, r3, #1
 8008ef4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008efc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	011b      	lsls	r3, r3, #4
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	f023 030a 	bic.w	r3, r3, #10
 8008f10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f003 030a 	and.w	r3, r3, #10
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	621a      	str	r2, [r3, #32]
}
 8008f2a:	bf00      	nop
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	40010000 	.word	0x40010000
 8008f3c:	40000400 	.word	0x40000400
 8008f40:	40000800 	.word	0x40000800
 8008f44:	40000c00 	.word	0x40000c00
 8008f48:	40010400 	.word	0x40010400
 8008f4c:	40014000 	.word	0x40014000
 8008f50:	40001800 	.word	0x40001800

08008f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	f023 0201 	bic.w	r2, r3, #1
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	011b      	lsls	r3, r3, #4
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f023 030a 	bic.w	r3, r3, #10
 8008f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	621a      	str	r2, [r3, #32]
}
 8008fa6:	bf00      	nop
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b087      	sub	sp, #28
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	607a      	str	r2, [r7, #4]
 8008fbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	f023 0210 	bic.w	r2, r3, #16
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	031b      	lsls	r3, r3, #12
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009004:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	4313      	orrs	r3, r2
 8009012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	621a      	str	r2, [r3, #32]
}
 8009020:	bf00      	nop
 8009022:	371c      	adds	r7, #28
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	f023 0210 	bic.w	r2, r3, #16
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	031b      	lsls	r3, r3, #12
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4313      	orrs	r3, r2
 8009060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009068:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	4313      	orrs	r3, r2
 8009072:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	621a      	str	r2, [r3, #32]
}
 8009080:	bf00      	nop
 8009082:	371c      	adds	r7, #28
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800908c:	b480      	push	{r7}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	69db      	ldr	r3, [r3, #28]
 80090b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	f023 0303 	bic.w	r3, r3, #3
 80090b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4313      	orrs	r3, r2
 80090c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	011b      	lsls	r3, r3, #4
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80090dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	021b      	lsls	r3, r3, #8
 80090e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	621a      	str	r2, [r3, #32]
}
 80090f8:	bf00      	nop
 80090fa:	371c      	adds	r7, #28
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009130:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	021b      	lsls	r3, r3, #8
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	4313      	orrs	r3, r2
 800913a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009142:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	031b      	lsls	r3, r3, #12
 8009148:	b29b      	uxth	r3, r3
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	4313      	orrs	r3, r2
 800914e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009156:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	031b      	lsls	r3, r3, #12
 800915c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	4313      	orrs	r3, r2
 8009164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	621a      	str	r2, [r3, #32]
}
 8009172:	bf00      	nop
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4313      	orrs	r3, r2
 800919c:	f043 0307 	orr.w	r3, r3, #7
 80091a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	609a      	str	r2, [r3, #8]
}
 80091a8:	bf00      	nop
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	021a      	lsls	r2, r3, #8
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	431a      	orrs	r2, r3
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4313      	orrs	r3, r2
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	4313      	orrs	r3, r2
 80091e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	609a      	str	r2, [r3, #8]
}
 80091e8:	bf00      	nop
 80091ea:	371c      	adds	r7, #28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f003 031f 	and.w	r3, r3, #31
 8009206:	2201      	movs	r2, #1
 8009208:	fa02 f303 	lsl.w	r3, r2, r3
 800920c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6a1a      	ldr	r2, [r3, #32]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	43db      	mvns	r3, r3
 8009216:	401a      	ands	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6a1a      	ldr	r2, [r3, #32]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f003 031f 	and.w	r3, r3, #31
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	fa01 f303 	lsl.w	r3, r1, r3
 800922c:	431a      	orrs	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	621a      	str	r2, [r3, #32]
}
 8009232:	bf00      	nop
 8009234:	371c      	adds	r7, #28
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
	...

08009240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009250:	2b01      	cmp	r3, #1
 8009252:	d101      	bne.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009254:	2302      	movs	r3, #2
 8009256:	e05a      	b.n	800930e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2202      	movs	r2, #2
 8009264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a21      	ldr	r2, [pc, #132]	; (800931c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d022      	beq.n	80092e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a4:	d01d      	beq.n	80092e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a1d      	ldr	r2, [pc, #116]	; (8009320 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d018      	beq.n	80092e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a1b      	ldr	r2, [pc, #108]	; (8009324 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d013      	beq.n	80092e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a1a      	ldr	r2, [pc, #104]	; (8009328 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00e      	beq.n	80092e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a18      	ldr	r2, [pc, #96]	; (800932c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d009      	beq.n	80092e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a17      	ldr	r2, [pc, #92]	; (8009330 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d004      	beq.n	80092e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a15      	ldr	r2, [pc, #84]	; (8009334 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d10c      	bne.n	80092fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	40010000 	.word	0x40010000
 8009320:	40000400 	.word	0x40000400
 8009324:	40000800 	.word	0x40000800
 8009328:	40000c00 	.word	0x40000c00
 800932c:	40010400 	.word	0x40010400
 8009330:	40014000 	.word	0x40014000
 8009334:	40001800 	.word	0x40001800

08009338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800934c:	2b01      	cmp	r3, #1
 800934e:	d101      	bne.n	8009354 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009350:	2302      	movs	r3, #2
 8009352:	e03d      	b.n	80093d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	4313      	orrs	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	4313      	orrs	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	4313      	orrs	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4313      	orrs	r3, r2
 8009392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e042      	b.n	800949c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d106      	bne.n	8009430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7fb fbfc 	bl	8004c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2224      	movs	r2, #36	; 0x24
 8009434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fdbd 	bl	8009fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	691a      	ldr	r2, [r3, #16]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800945c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	695a      	ldr	r2, [r3, #20]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800946c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68da      	ldr	r2, [r3, #12]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800947c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2220      	movs	r2, #32
 8009488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2220      	movs	r2, #32
 8009490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b08a      	sub	sp, #40	; 0x28
 80094a8:	af02      	add	r7, sp, #8
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	603b      	str	r3, [r7, #0]
 80094b0:	4613      	mov	r3, r2
 80094b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80094b4:	2300      	movs	r3, #0
 80094b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b20      	cmp	r3, #32
 80094c2:	d175      	bne.n	80095b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <HAL_UART_Transmit+0x2c>
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e06e      	b.n	80095b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2221      	movs	r2, #33	; 0x21
 80094de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094e2:	f7fb fdbd 	bl	8005060 <HAL_GetTick>
 80094e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	88fa      	ldrh	r2, [r7, #6]
 80094ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	88fa      	ldrh	r2, [r7, #6]
 80094f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094fc:	d108      	bne.n	8009510 <HAL_UART_Transmit+0x6c>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d104      	bne.n	8009510 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009506:	2300      	movs	r3, #0
 8009508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	61bb      	str	r3, [r7, #24]
 800950e:	e003      	b.n	8009518 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009514:	2300      	movs	r3, #0
 8009516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009518:	e02e      	b.n	8009578 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2200      	movs	r2, #0
 8009522:	2180      	movs	r1, #128	; 0x80
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 fb1f 	bl	8009b68 <UART_WaitOnFlagUntilTimeout>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d005      	beq.n	800953c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e03a      	b.n	80095b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10b      	bne.n	800955a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009550:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	3302      	adds	r3, #2
 8009556:	61bb      	str	r3, [r7, #24]
 8009558:	e007      	b.n	800956a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	781a      	ldrb	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	3301      	adds	r3, #1
 8009568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800956e:	b29b      	uxth	r3, r3
 8009570:	3b01      	subs	r3, #1
 8009572:	b29a      	uxth	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800957c:	b29b      	uxth	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1cb      	bne.n	800951a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2200      	movs	r2, #0
 800958a:	2140      	movs	r1, #64	; 0x40
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 faeb 	bl	8009b68 <UART_WaitOnFlagUntilTimeout>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d005      	beq.n	80095a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2220      	movs	r2, #32
 800959c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e006      	b.n	80095b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	e000      	b.n	80095b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80095b0:	2302      	movs	r3, #2
  }
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3720      	adds	r7, #32
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	60b9      	str	r1, [r7, #8]
 80095c4:	4613      	mov	r3, r2
 80095c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	d112      	bne.n	80095fa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <HAL_UART_Receive_IT+0x26>
 80095da:	88fb      	ldrh	r3, [r7, #6]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e00b      	b.n	80095fc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80095ea:	88fb      	ldrh	r3, [r7, #6]
 80095ec:	461a      	mov	r2, r3
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 fb12 	bl	8009c1a <UART_Start_Receive_IT>
 80095f6:	4603      	mov	r3, r0
 80095f8:	e000      	b.n	80095fc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80095fa:	2302      	movs	r3, #2
  }
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b0ba      	sub	sp, #232	; 0xe8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800962a:	2300      	movs	r3, #0
 800962c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009630:	2300      	movs	r3, #0
 8009632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800963a:	f003 030f 	and.w	r3, r3, #15
 800963e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10f      	bne.n	800966a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800964a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <HAL_UART_IRQHandler+0x66>
 8009656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800965a:	f003 0320 	and.w	r3, r3, #32
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fbf2 	bl	8009e4c <UART_Receive_IT>
      return;
 8009668:	e25b      	b.n	8009b22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800966a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 80de 	beq.w	8009830 <HAL_UART_IRQHandler+0x22c>
 8009674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b00      	cmp	r3, #0
 800967e:	d106      	bne.n	800968e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009684:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80d1 	beq.w	8009830 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800968e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00b      	beq.n	80096b2 <HAL_UART_IRQHandler+0xae>
 800969a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800969e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d005      	beq.n	80096b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096aa:	f043 0201 	orr.w	r2, r3, #1
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00b      	beq.n	80096d6 <HAL_UART_IRQHandler+0xd2>
 80096be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d005      	beq.n	80096d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ce:	f043 0202 	orr.w	r2, r3, #2
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00b      	beq.n	80096fa <HAL_UART_IRQHandler+0xf6>
 80096e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f2:	f043 0204 	orr.w	r2, r3, #4
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80096fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096fe:	f003 0308 	and.w	r3, r3, #8
 8009702:	2b00      	cmp	r3, #0
 8009704:	d011      	beq.n	800972a <HAL_UART_IRQHandler+0x126>
 8009706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800970a:	f003 0320 	and.w	r3, r3, #32
 800970e:	2b00      	cmp	r3, #0
 8009710:	d105      	bne.n	800971e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	d005      	beq.n	800972a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009722:	f043 0208 	orr.w	r2, r3, #8
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 81f2 	beq.w	8009b18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009738:	f003 0320 	and.w	r3, r3, #32
 800973c:	2b00      	cmp	r3, #0
 800973e:	d008      	beq.n	8009752 <HAL_UART_IRQHandler+0x14e>
 8009740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009744:	f003 0320 	and.w	r3, r3, #32
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fb7d 	bl	8009e4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975c:	2b40      	cmp	r3, #64	; 0x40
 800975e:	bf0c      	ite	eq
 8009760:	2301      	moveq	r3, #1
 8009762:	2300      	movne	r3, #0
 8009764:	b2db      	uxtb	r3, r3
 8009766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976e:	f003 0308 	and.w	r3, r3, #8
 8009772:	2b00      	cmp	r3, #0
 8009774:	d103      	bne.n	800977e <HAL_UART_IRQHandler+0x17a>
 8009776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800977a:	2b00      	cmp	r3, #0
 800977c:	d04f      	beq.n	800981e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa85 	bl	8009c8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978e:	2b40      	cmp	r3, #64	; 0x40
 8009790:	d141      	bne.n	8009816 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3314      	adds	r3, #20
 8009798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80097a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3314      	adds	r3, #20
 80097ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80097be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80097c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80097ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80097ce:	e841 2300 	strex	r3, r2, [r1]
 80097d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80097d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1d9      	bne.n	8009792 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d013      	beq.n	800980e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ea:	4a7e      	ldr	r2, [pc, #504]	; (80099e4 <HAL_UART_IRQHandler+0x3e0>)
 80097ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fc f9b1 	bl	8005b5a <HAL_DMA_Abort_IT>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d016      	beq.n	800982c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800980c:	e00e      	b.n	800982c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f994 	bl	8009b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009814:	e00a      	b.n	800982c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f990 	bl	8009b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800981c:	e006      	b.n	800982c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f98c 	bl	8009b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800982a:	e175      	b.n	8009b18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982c:	bf00      	nop
    return;
 800982e:	e173      	b.n	8009b18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009834:	2b01      	cmp	r3, #1
 8009836:	f040 814f 	bne.w	8009ad8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800983a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800983e:	f003 0310 	and.w	r3, r3, #16
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 8148 	beq.w	8009ad8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800984c:	f003 0310 	and.w	r3, r3, #16
 8009850:	2b00      	cmp	r3, #0
 8009852:	f000 8141 	beq.w	8009ad8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009856:	2300      	movs	r3, #0
 8009858:	60bb      	str	r3, [r7, #8]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	60bb      	str	r3, [r7, #8]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	60bb      	str	r3, [r7, #8]
 800986a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009876:	2b40      	cmp	r3, #64	; 0x40
 8009878:	f040 80b6 	bne.w	80099e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 8145 	beq.w	8009b1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800989a:	429a      	cmp	r2, r3
 800989c:	f080 813e 	bcs.w	8009b1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ac:	69db      	ldr	r3, [r3, #28]
 80098ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b2:	f000 8088 	beq.w	80099c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	330c      	adds	r3, #12
 80098bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80098cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	330c      	adds	r3, #12
 80098de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80098e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80098ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80098f2:	e841 2300 	strex	r3, r2, [r1]
 80098f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80098fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1d9      	bne.n	80098b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3314      	adds	r3, #20
 8009908:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009914:	f023 0301 	bic.w	r3, r3, #1
 8009918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3314      	adds	r3, #20
 8009922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009926:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800992a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800992e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009932:	e841 2300 	strex	r3, r2, [r1]
 8009936:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e1      	bne.n	8009902 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3314      	adds	r3, #20
 8009944:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800994e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3314      	adds	r3, #20
 800995e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009962:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009964:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009968:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e3      	bne.n	800993e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2220      	movs	r2, #32
 800997a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	330c      	adds	r3, #12
 800998a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800998e:	e853 3f00 	ldrex	r3, [r3]
 8009992:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009996:	f023 0310 	bic.w	r3, r3, #16
 800999a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	330c      	adds	r3, #12
 80099a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80099a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80099aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099b0:	e841 2300 	strex	r3, r2, [r1]
 80099b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1e3      	bne.n	8009984 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fc f85a 	bl	8005a7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2202      	movs	r2, #2
 80099ca:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	b29b      	uxth	r3, r3
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f8b7 	bl	8009b50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099e2:	e09b      	b.n	8009b1c <HAL_UART_IRQHandler+0x518>
 80099e4:	08009d55 	.word	0x08009d55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f000 808e 	beq.w	8009b20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 8089 	beq.w	8009b20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	330c      	adds	r3, #12
 8009a14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	330c      	adds	r3, #12
 8009a2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009a32:	647a      	str	r2, [r7, #68]	; 0x44
 8009a34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e3      	bne.n	8009a0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3314      	adds	r3, #20
 8009a4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	623b      	str	r3, [r7, #32]
   return(result);
 8009a56:	6a3b      	ldr	r3, [r7, #32]
 8009a58:	f023 0301 	bic.w	r3, r3, #1
 8009a5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3314      	adds	r3, #20
 8009a66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a6a:	633a      	str	r2, [r7, #48]	; 0x30
 8009a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a72:	e841 2300 	strex	r3, r2, [r1]
 8009a76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1e3      	bne.n	8009a46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2220      	movs	r2, #32
 8009a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	330c      	adds	r3, #12
 8009a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	e853 3f00 	ldrex	r3, [r3]
 8009a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f023 0310 	bic.w	r3, r3, #16
 8009aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	330c      	adds	r3, #12
 8009aac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009ab0:	61fa      	str	r2, [r7, #28]
 8009ab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	69b9      	ldr	r1, [r7, #24]
 8009ab6:	69fa      	ldr	r2, [r7, #28]
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	617b      	str	r3, [r7, #20]
   return(result);
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e3      	bne.n	8009a8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009aca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f83d 	bl	8009b50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ad6:	e023      	b.n	8009b20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d009      	beq.n	8009af8 <HAL_UART_IRQHandler+0x4f4>
 8009ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d003      	beq.n	8009af8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f943 	bl	8009d7c <UART_Transmit_IT>
    return;
 8009af6:	e014      	b.n	8009b22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00e      	beq.n	8009b22 <HAL_UART_IRQHandler+0x51e>
 8009b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d008      	beq.n	8009b22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f983 	bl	8009e1c <UART_EndTransmit_IT>
    return;
 8009b16:	e004      	b.n	8009b22 <HAL_UART_IRQHandler+0x51e>
    return;
 8009b18:	bf00      	nop
 8009b1a:	e002      	b.n	8009b22 <HAL_UART_IRQHandler+0x51e>
      return;
 8009b1c:	bf00      	nop
 8009b1e:	e000      	b.n	8009b22 <HAL_UART_IRQHandler+0x51e>
      return;
 8009b20:	bf00      	nop
  }
}
 8009b22:	37e8      	adds	r7, #232	; 0xe8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	603b      	str	r3, [r7, #0]
 8009b74:	4613      	mov	r3, r2
 8009b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b78:	e03b      	b.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b80:	d037      	beq.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b82:	f7fb fa6d 	bl	8005060 <HAL_GetTick>
 8009b86:	4602      	mov	r2, r0
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	6a3a      	ldr	r2, [r7, #32]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d302      	bcc.n	8009b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d101      	bne.n	8009b9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e03a      	b.n	8009c12 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	f003 0304 	and.w	r3, r3, #4
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d023      	beq.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b80      	cmp	r3, #128	; 0x80
 8009bae:	d020      	beq.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2b40      	cmp	r3, #64	; 0x40
 8009bb4:	d01d      	beq.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0308 	and.w	r3, r3, #8
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d116      	bne.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	617b      	str	r3, [r7, #20]
 8009bd8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 f857 	bl	8009c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2208      	movs	r2, #8
 8009be4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e00f      	b.n	8009c12 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	bf0c      	ite	eq
 8009c02:	2301      	moveq	r3, #1
 8009c04:	2300      	movne	r3, #0
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	461a      	mov	r2, r3
 8009c0a:	79fb      	ldrb	r3, [r7, #7]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d0b4      	beq.n	8009b7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3718      	adds	r7, #24
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b085      	sub	sp, #20
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	60f8      	str	r0, [r7, #12]
 8009c22:	60b9      	str	r1, [r7, #8]
 8009c24:	4613      	mov	r3, r2
 8009c26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	88fa      	ldrh	r2, [r7, #6]
 8009c32:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	88fa      	ldrh	r2, [r7, #6]
 8009c38:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2222      	movs	r2, #34	; 0x22
 8009c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d007      	beq.n	8009c60 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68da      	ldr	r2, [r3, #12]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c5e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	695a      	ldr	r2, [r3, #20]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f042 0201 	orr.w	r2, r2, #1
 8009c6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 0220 	orr.w	r2, r2, #32
 8009c7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b095      	sub	sp, #84	; 0x54
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	330c      	adds	r3, #12
 8009c9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca0:	e853 3f00 	ldrex	r3, [r3]
 8009ca4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	330c      	adds	r3, #12
 8009cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cb6:	643a      	str	r2, [r7, #64]	; 0x40
 8009cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cbe:	e841 2300 	strex	r3, r2, [r1]
 8009cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1e5      	bne.n	8009c96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3314      	adds	r3, #20
 8009cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd2:	6a3b      	ldr	r3, [r7, #32]
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	f023 0301 	bic.w	r3, r3, #1
 8009ce0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3314      	adds	r3, #20
 8009ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cf2:	e841 2300 	strex	r3, r2, [r1]
 8009cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1e5      	bne.n	8009cca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d119      	bne.n	8009d3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	330c      	adds	r3, #12
 8009d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	e853 3f00 	ldrex	r3, [r3]
 8009d14:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f023 0310 	bic.w	r3, r3, #16
 8009d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	330c      	adds	r3, #12
 8009d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d26:	61ba      	str	r2, [r7, #24]
 8009d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	6979      	ldr	r1, [r7, #20]
 8009d2c:	69ba      	ldr	r2, [r7, #24]
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	613b      	str	r3, [r7, #16]
   return(result);
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e5      	bne.n	8009d06 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d48:	bf00      	nop
 8009d4a:	3754      	adds	r7, #84	; 0x54
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f7ff fee4 	bl	8009b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d74:	bf00      	nop
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b21      	cmp	r3, #33	; 0x21
 8009d8e:	d13e      	bne.n	8009e0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d98:	d114      	bne.n	8009dc4 <UART_Transmit_IT+0x48>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d110      	bne.n	8009dc4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	461a      	mov	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009db6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	1c9a      	adds	r2, r3, #2
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	621a      	str	r2, [r3, #32]
 8009dc2:	e008      	b.n	8009dd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	1c59      	adds	r1, r3, #1
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	6211      	str	r1, [r2, #32]
 8009dce:	781a      	ldrb	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	4619      	mov	r1, r3
 8009de4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10f      	bne.n	8009e0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009df8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	e000      	b.n	8009e10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e0e:	2302      	movs	r3, #2
  }
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68da      	ldr	r2, [r3, #12]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2220      	movs	r2, #32
 8009e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f7ff fe73 	bl	8009b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b08c      	sub	sp, #48	; 0x30
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b22      	cmp	r3, #34	; 0x22
 8009e5e:	f040 80ae 	bne.w	8009fbe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e6a:	d117      	bne.n	8009e9c <UART_Receive_IT+0x50>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d113      	bne.n	8009e9c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e74:	2300      	movs	r3, #0
 8009e76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e94:	1c9a      	adds	r2, r3, #2
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	629a      	str	r2, [r3, #40]	; 0x28
 8009e9a:	e026      	b.n	8009eea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eae:	d007      	beq.n	8009ec0 <UART_Receive_IT+0x74>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10a      	bne.n	8009ece <UART_Receive_IT+0x82>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d106      	bne.n	8009ece <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eca:	701a      	strb	r2, [r3, #0]
 8009ecc:	e008      	b.n	8009ee0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ede:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d15d      	bne.n	8009fba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68da      	ldr	r2, [r3, #12]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f022 0220 	bic.w	r2, r2, #32
 8009f0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68da      	ldr	r2, [r3, #12]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	695a      	ldr	r2, [r3, #20]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0201 	bic.w	r2, r2, #1
 8009f2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d135      	bne.n	8009fb0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	330c      	adds	r3, #12
 8009f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	e853 3f00 	ldrex	r3, [r3]
 8009f58:	613b      	str	r3, [r7, #16]
   return(result);
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	f023 0310 	bic.w	r3, r3, #16
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	330c      	adds	r3, #12
 8009f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6a:	623a      	str	r2, [r7, #32]
 8009f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6e:	69f9      	ldr	r1, [r7, #28]
 8009f70:	6a3a      	ldr	r2, [r7, #32]
 8009f72:	e841 2300 	strex	r3, r2, [r1]
 8009f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1e5      	bne.n	8009f4a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0310 	and.w	r3, r3, #16
 8009f88:	2b10      	cmp	r3, #16
 8009f8a:	d10a      	bne.n	8009fa2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	60fb      	str	r3, [r7, #12]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7ff fdd1 	bl	8009b50 <HAL_UARTEx_RxEventCallback>
 8009fae:	e002      	b.n	8009fb6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7f8 fa07 	bl	80023c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e002      	b.n	8009fc0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	e000      	b.n	8009fc0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009fbe:	2302      	movs	r3, #2
  }
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3730      	adds	r7, #48	; 0x30
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fcc:	b0c0      	sub	sp, #256	; 0x100
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fe4:	68d9      	ldr	r1, [r3, #12]
 8009fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	ea40 0301 	orr.w	r3, r0, r1
 8009ff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff6:	689a      	ldr	r2, [r3, #8]
 8009ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	431a      	orrs	r2, r3
 800a000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	431a      	orrs	r2, r3
 800a008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	4313      	orrs	r3, r2
 800a010:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a020:	f021 010c 	bic.w	r1, r1, #12
 800a024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a02e:	430b      	orrs	r3, r1
 800a030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a042:	6999      	ldr	r1, [r3, #24]
 800a044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	ea40 0301 	orr.w	r3, r0, r1
 800a04e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	4b8f      	ldr	r3, [pc, #572]	; (800a294 <UART_SetConfig+0x2cc>)
 800a058:	429a      	cmp	r2, r3
 800a05a:	d005      	beq.n	800a068 <UART_SetConfig+0xa0>
 800a05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	4b8d      	ldr	r3, [pc, #564]	; (800a298 <UART_SetConfig+0x2d0>)
 800a064:	429a      	cmp	r2, r3
 800a066:	d104      	bne.n	800a072 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a068:	f7fd fbf8 	bl	800785c <HAL_RCC_GetPCLK2Freq>
 800a06c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a070:	e003      	b.n	800a07a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a072:	f7fd fbdf 	bl	8007834 <HAL_RCC_GetPCLK1Freq>
 800a076:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a07a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a084:	f040 810c 	bne.w	800a2a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a08c:	2200      	movs	r2, #0
 800a08e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a092:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a09a:	4622      	mov	r2, r4
 800a09c:	462b      	mov	r3, r5
 800a09e:	1891      	adds	r1, r2, r2
 800a0a0:	65b9      	str	r1, [r7, #88]	; 0x58
 800a0a2:	415b      	adcs	r3, r3
 800a0a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	eb12 0801 	adds.w	r8, r2, r1
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	eb43 0901 	adc.w	r9, r3, r1
 800a0b6:	f04f 0200 	mov.w	r2, #0
 800a0ba:	f04f 0300 	mov.w	r3, #0
 800a0be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a0c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a0c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a0ca:	4690      	mov	r8, r2
 800a0cc:	4699      	mov	r9, r3
 800a0ce:	4623      	mov	r3, r4
 800a0d0:	eb18 0303 	adds.w	r3, r8, r3
 800a0d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a0d8:	462b      	mov	r3, r5
 800a0da:	eb49 0303 	adc.w	r3, r9, r3
 800a0de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a0ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a0f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	18db      	adds	r3, r3, r3
 800a0fa:	653b      	str	r3, [r7, #80]	; 0x50
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	eb42 0303 	adc.w	r3, r2, r3
 800a102:	657b      	str	r3, [r7, #84]	; 0x54
 800a104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a10c:	f7f6 fdbc 	bl	8000c88 <__aeabi_uldivmod>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	4b61      	ldr	r3, [pc, #388]	; (800a29c <UART_SetConfig+0x2d4>)
 800a116:	fba3 2302 	umull	r2, r3, r3, r2
 800a11a:	095b      	lsrs	r3, r3, #5
 800a11c:	011c      	lsls	r4, r3, #4
 800a11e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a122:	2200      	movs	r2, #0
 800a124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a128:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a12c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a130:	4642      	mov	r2, r8
 800a132:	464b      	mov	r3, r9
 800a134:	1891      	adds	r1, r2, r2
 800a136:	64b9      	str	r1, [r7, #72]	; 0x48
 800a138:	415b      	adcs	r3, r3
 800a13a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a13c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a140:	4641      	mov	r1, r8
 800a142:	eb12 0a01 	adds.w	sl, r2, r1
 800a146:	4649      	mov	r1, r9
 800a148:	eb43 0b01 	adc.w	fp, r3, r1
 800a14c:	f04f 0200 	mov.w	r2, #0
 800a150:	f04f 0300 	mov.w	r3, #0
 800a154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a15c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a160:	4692      	mov	sl, r2
 800a162:	469b      	mov	fp, r3
 800a164:	4643      	mov	r3, r8
 800a166:	eb1a 0303 	adds.w	r3, sl, r3
 800a16a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a16e:	464b      	mov	r3, r9
 800a170:	eb4b 0303 	adc.w	r3, fp, r3
 800a174:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a184:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a18c:	460b      	mov	r3, r1
 800a18e:	18db      	adds	r3, r3, r3
 800a190:	643b      	str	r3, [r7, #64]	; 0x40
 800a192:	4613      	mov	r3, r2
 800a194:	eb42 0303 	adc.w	r3, r2, r3
 800a198:	647b      	str	r3, [r7, #68]	; 0x44
 800a19a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a19e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a1a2:	f7f6 fd71 	bl	8000c88 <__aeabi_uldivmod>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	4b3b      	ldr	r3, [pc, #236]	; (800a29c <UART_SetConfig+0x2d4>)
 800a1ae:	fba3 2301 	umull	r2, r3, r3, r1
 800a1b2:	095b      	lsrs	r3, r3, #5
 800a1b4:	2264      	movs	r2, #100	; 0x64
 800a1b6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ba:	1acb      	subs	r3, r1, r3
 800a1bc:	00db      	lsls	r3, r3, #3
 800a1be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a1c2:	4b36      	ldr	r3, [pc, #216]	; (800a29c <UART_SetConfig+0x2d4>)
 800a1c4:	fba3 2302 	umull	r2, r3, r3, r2
 800a1c8:	095b      	lsrs	r3, r3, #5
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a1d0:	441c      	add	r4, r3
 800a1d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a1e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a1e4:	4642      	mov	r2, r8
 800a1e6:	464b      	mov	r3, r9
 800a1e8:	1891      	adds	r1, r2, r2
 800a1ea:	63b9      	str	r1, [r7, #56]	; 0x38
 800a1ec:	415b      	adcs	r3, r3
 800a1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1f4:	4641      	mov	r1, r8
 800a1f6:	1851      	adds	r1, r2, r1
 800a1f8:	6339      	str	r1, [r7, #48]	; 0x30
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	414b      	adcs	r3, r1
 800a1fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a200:	f04f 0200 	mov.w	r2, #0
 800a204:	f04f 0300 	mov.w	r3, #0
 800a208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a20c:	4659      	mov	r1, fp
 800a20e:	00cb      	lsls	r3, r1, #3
 800a210:	4651      	mov	r1, sl
 800a212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a216:	4651      	mov	r1, sl
 800a218:	00ca      	lsls	r2, r1, #3
 800a21a:	4610      	mov	r0, r2
 800a21c:	4619      	mov	r1, r3
 800a21e:	4603      	mov	r3, r0
 800a220:	4642      	mov	r2, r8
 800a222:	189b      	adds	r3, r3, r2
 800a224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a228:	464b      	mov	r3, r9
 800a22a:	460a      	mov	r2, r1
 800a22c:	eb42 0303 	adc.w	r3, r2, r3
 800a230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a240:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a248:	460b      	mov	r3, r1
 800a24a:	18db      	adds	r3, r3, r3
 800a24c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a24e:	4613      	mov	r3, r2
 800a250:	eb42 0303 	adc.w	r3, r2, r3
 800a254:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a25a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a25e:	f7f6 fd13 	bl	8000c88 <__aeabi_uldivmod>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <UART_SetConfig+0x2d4>)
 800a268:	fba3 1302 	umull	r1, r3, r3, r2
 800a26c:	095b      	lsrs	r3, r3, #5
 800a26e:	2164      	movs	r1, #100	; 0x64
 800a270:	fb01 f303 	mul.w	r3, r1, r3
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	00db      	lsls	r3, r3, #3
 800a278:	3332      	adds	r3, #50	; 0x32
 800a27a:	4a08      	ldr	r2, [pc, #32]	; (800a29c <UART_SetConfig+0x2d4>)
 800a27c:	fba2 2303 	umull	r2, r3, r2, r3
 800a280:	095b      	lsrs	r3, r3, #5
 800a282:	f003 0207 	and.w	r2, r3, #7
 800a286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4422      	add	r2, r4
 800a28e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a290:	e106      	b.n	800a4a0 <UART_SetConfig+0x4d8>
 800a292:	bf00      	nop
 800a294:	40011000 	.word	0x40011000
 800a298:	40011400 	.word	0x40011400
 800a29c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a2a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a2aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a2ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a2b2:	4642      	mov	r2, r8
 800a2b4:	464b      	mov	r3, r9
 800a2b6:	1891      	adds	r1, r2, r2
 800a2b8:	6239      	str	r1, [r7, #32]
 800a2ba:	415b      	adcs	r3, r3
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a2be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a2c2:	4641      	mov	r1, r8
 800a2c4:	1854      	adds	r4, r2, r1
 800a2c6:	4649      	mov	r1, r9
 800a2c8:	eb43 0501 	adc.w	r5, r3, r1
 800a2cc:	f04f 0200 	mov.w	r2, #0
 800a2d0:	f04f 0300 	mov.w	r3, #0
 800a2d4:	00eb      	lsls	r3, r5, #3
 800a2d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2da:	00e2      	lsls	r2, r4, #3
 800a2dc:	4614      	mov	r4, r2
 800a2de:	461d      	mov	r5, r3
 800a2e0:	4643      	mov	r3, r8
 800a2e2:	18e3      	adds	r3, r4, r3
 800a2e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2e8:	464b      	mov	r3, r9
 800a2ea:	eb45 0303 	adc.w	r3, r5, r3
 800a2ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a302:	f04f 0200 	mov.w	r2, #0
 800a306:	f04f 0300 	mov.w	r3, #0
 800a30a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a30e:	4629      	mov	r1, r5
 800a310:	008b      	lsls	r3, r1, #2
 800a312:	4621      	mov	r1, r4
 800a314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a318:	4621      	mov	r1, r4
 800a31a:	008a      	lsls	r2, r1, #2
 800a31c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a320:	f7f6 fcb2 	bl	8000c88 <__aeabi_uldivmod>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4b60      	ldr	r3, [pc, #384]	; (800a4ac <UART_SetConfig+0x4e4>)
 800a32a:	fba3 2302 	umull	r2, r3, r3, r2
 800a32e:	095b      	lsrs	r3, r3, #5
 800a330:	011c      	lsls	r4, r3, #4
 800a332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a336:	2200      	movs	r2, #0
 800a338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a33c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a344:	4642      	mov	r2, r8
 800a346:	464b      	mov	r3, r9
 800a348:	1891      	adds	r1, r2, r2
 800a34a:	61b9      	str	r1, [r7, #24]
 800a34c:	415b      	adcs	r3, r3
 800a34e:	61fb      	str	r3, [r7, #28]
 800a350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a354:	4641      	mov	r1, r8
 800a356:	1851      	adds	r1, r2, r1
 800a358:	6139      	str	r1, [r7, #16]
 800a35a:	4649      	mov	r1, r9
 800a35c:	414b      	adcs	r3, r1
 800a35e:	617b      	str	r3, [r7, #20]
 800a360:	f04f 0200 	mov.w	r2, #0
 800a364:	f04f 0300 	mov.w	r3, #0
 800a368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a36c:	4659      	mov	r1, fp
 800a36e:	00cb      	lsls	r3, r1, #3
 800a370:	4651      	mov	r1, sl
 800a372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a376:	4651      	mov	r1, sl
 800a378:	00ca      	lsls	r2, r1, #3
 800a37a:	4610      	mov	r0, r2
 800a37c:	4619      	mov	r1, r3
 800a37e:	4603      	mov	r3, r0
 800a380:	4642      	mov	r2, r8
 800a382:	189b      	adds	r3, r3, r2
 800a384:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a388:	464b      	mov	r3, r9
 800a38a:	460a      	mov	r2, r1
 800a38c:	eb42 0303 	adc.w	r3, r2, r3
 800a390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a39e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a3a0:	f04f 0200 	mov.w	r2, #0
 800a3a4:	f04f 0300 	mov.w	r3, #0
 800a3a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a3ac:	4649      	mov	r1, r9
 800a3ae:	008b      	lsls	r3, r1, #2
 800a3b0:	4641      	mov	r1, r8
 800a3b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3b6:	4641      	mov	r1, r8
 800a3b8:	008a      	lsls	r2, r1, #2
 800a3ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a3be:	f7f6 fc63 	bl	8000c88 <__aeabi_uldivmod>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	4b38      	ldr	r3, [pc, #224]	; (800a4ac <UART_SetConfig+0x4e4>)
 800a3ca:	fba3 2301 	umull	r2, r3, r3, r1
 800a3ce:	095b      	lsrs	r3, r3, #5
 800a3d0:	2264      	movs	r2, #100	; 0x64
 800a3d2:	fb02 f303 	mul.w	r3, r2, r3
 800a3d6:	1acb      	subs	r3, r1, r3
 800a3d8:	011b      	lsls	r3, r3, #4
 800a3da:	3332      	adds	r3, #50	; 0x32
 800a3dc:	4a33      	ldr	r2, [pc, #204]	; (800a4ac <UART_SetConfig+0x4e4>)
 800a3de:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e2:	095b      	lsrs	r3, r3, #5
 800a3e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3e8:	441c      	add	r4, r3
 800a3ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	673b      	str	r3, [r7, #112]	; 0x70
 800a3f2:	677a      	str	r2, [r7, #116]	; 0x74
 800a3f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	1891      	adds	r1, r2, r2
 800a3fe:	60b9      	str	r1, [r7, #8]
 800a400:	415b      	adcs	r3, r3
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a408:	4641      	mov	r1, r8
 800a40a:	1851      	adds	r1, r2, r1
 800a40c:	6039      	str	r1, [r7, #0]
 800a40e:	4649      	mov	r1, r9
 800a410:	414b      	adcs	r3, r1
 800a412:	607b      	str	r3, [r7, #4]
 800a414:	f04f 0200 	mov.w	r2, #0
 800a418:	f04f 0300 	mov.w	r3, #0
 800a41c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a420:	4659      	mov	r1, fp
 800a422:	00cb      	lsls	r3, r1, #3
 800a424:	4651      	mov	r1, sl
 800a426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a42a:	4651      	mov	r1, sl
 800a42c:	00ca      	lsls	r2, r1, #3
 800a42e:	4610      	mov	r0, r2
 800a430:	4619      	mov	r1, r3
 800a432:	4603      	mov	r3, r0
 800a434:	4642      	mov	r2, r8
 800a436:	189b      	adds	r3, r3, r2
 800a438:	66bb      	str	r3, [r7, #104]	; 0x68
 800a43a:	464b      	mov	r3, r9
 800a43c:	460a      	mov	r2, r1
 800a43e:	eb42 0303 	adc.w	r3, r2, r3
 800a442:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	663b      	str	r3, [r7, #96]	; 0x60
 800a44e:	667a      	str	r2, [r7, #100]	; 0x64
 800a450:	f04f 0200 	mov.w	r2, #0
 800a454:	f04f 0300 	mov.w	r3, #0
 800a458:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a45c:	4649      	mov	r1, r9
 800a45e:	008b      	lsls	r3, r1, #2
 800a460:	4641      	mov	r1, r8
 800a462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a466:	4641      	mov	r1, r8
 800a468:	008a      	lsls	r2, r1, #2
 800a46a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a46e:	f7f6 fc0b 	bl	8000c88 <__aeabi_uldivmod>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <UART_SetConfig+0x4e4>)
 800a478:	fba3 1302 	umull	r1, r3, r3, r2
 800a47c:	095b      	lsrs	r3, r3, #5
 800a47e:	2164      	movs	r1, #100	; 0x64
 800a480:	fb01 f303 	mul.w	r3, r1, r3
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	3332      	adds	r3, #50	; 0x32
 800a48a:	4a08      	ldr	r2, [pc, #32]	; (800a4ac <UART_SetConfig+0x4e4>)
 800a48c:	fba2 2303 	umull	r2, r3, r2, r3
 800a490:	095b      	lsrs	r3, r3, #5
 800a492:	f003 020f 	and.w	r2, r3, #15
 800a496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4422      	add	r2, r4
 800a49e:	609a      	str	r2, [r3, #8]
}
 800a4a0:	bf00      	nop
 800a4a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4ac:	51eb851f 	.word	0x51eb851f

0800a4b0 <malloc>:
 800a4b0:	4b02      	ldr	r3, [pc, #8]	; (800a4bc <malloc+0xc>)
 800a4b2:	4601      	mov	r1, r0
 800a4b4:	6818      	ldr	r0, [r3, #0]
 800a4b6:	f000 b82b 	b.w	800a510 <_malloc_r>
 800a4ba:	bf00      	nop
 800a4bc:	20000064 	.word	0x20000064

0800a4c0 <free>:
 800a4c0:	4b02      	ldr	r3, [pc, #8]	; (800a4cc <free+0xc>)
 800a4c2:	4601      	mov	r1, r0
 800a4c4:	6818      	ldr	r0, [r3, #0]
 800a4c6:	f001 bf69 	b.w	800c39c <_free_r>
 800a4ca:	bf00      	nop
 800a4cc:	20000064 	.word	0x20000064

0800a4d0 <sbrk_aligned>:
 800a4d0:	b570      	push	{r4, r5, r6, lr}
 800a4d2:	4e0e      	ldr	r6, [pc, #56]	; (800a50c <sbrk_aligned+0x3c>)
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	6831      	ldr	r1, [r6, #0]
 800a4d8:	4605      	mov	r5, r0
 800a4da:	b911      	cbnz	r1, 800a4e2 <sbrk_aligned+0x12>
 800a4dc:	f001 f880 	bl	800b5e0 <_sbrk_r>
 800a4e0:	6030      	str	r0, [r6, #0]
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f001 f87b 	bl	800b5e0 <_sbrk_r>
 800a4ea:	1c43      	adds	r3, r0, #1
 800a4ec:	d00a      	beq.n	800a504 <sbrk_aligned+0x34>
 800a4ee:	1cc4      	adds	r4, r0, #3
 800a4f0:	f024 0403 	bic.w	r4, r4, #3
 800a4f4:	42a0      	cmp	r0, r4
 800a4f6:	d007      	beq.n	800a508 <sbrk_aligned+0x38>
 800a4f8:	1a21      	subs	r1, r4, r0
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	f001 f870 	bl	800b5e0 <_sbrk_r>
 800a500:	3001      	adds	r0, #1
 800a502:	d101      	bne.n	800a508 <sbrk_aligned+0x38>
 800a504:	f04f 34ff 	mov.w	r4, #4294967295
 800a508:	4620      	mov	r0, r4
 800a50a:	bd70      	pop	{r4, r5, r6, pc}
 800a50c:	200009fc 	.word	0x200009fc

0800a510 <_malloc_r>:
 800a510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a514:	1ccd      	adds	r5, r1, #3
 800a516:	f025 0503 	bic.w	r5, r5, #3
 800a51a:	3508      	adds	r5, #8
 800a51c:	2d0c      	cmp	r5, #12
 800a51e:	bf38      	it	cc
 800a520:	250c      	movcc	r5, #12
 800a522:	2d00      	cmp	r5, #0
 800a524:	4607      	mov	r7, r0
 800a526:	db01      	blt.n	800a52c <_malloc_r+0x1c>
 800a528:	42a9      	cmp	r1, r5
 800a52a:	d905      	bls.n	800a538 <_malloc_r+0x28>
 800a52c:	230c      	movs	r3, #12
 800a52e:	603b      	str	r3, [r7, #0]
 800a530:	2600      	movs	r6, #0
 800a532:	4630      	mov	r0, r6
 800a534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a538:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a60c <_malloc_r+0xfc>
 800a53c:	f000 f868 	bl	800a610 <__malloc_lock>
 800a540:	f8d8 3000 	ldr.w	r3, [r8]
 800a544:	461c      	mov	r4, r3
 800a546:	bb5c      	cbnz	r4, 800a5a0 <_malloc_r+0x90>
 800a548:	4629      	mov	r1, r5
 800a54a:	4638      	mov	r0, r7
 800a54c:	f7ff ffc0 	bl	800a4d0 <sbrk_aligned>
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	4604      	mov	r4, r0
 800a554:	d155      	bne.n	800a602 <_malloc_r+0xf2>
 800a556:	f8d8 4000 	ldr.w	r4, [r8]
 800a55a:	4626      	mov	r6, r4
 800a55c:	2e00      	cmp	r6, #0
 800a55e:	d145      	bne.n	800a5ec <_malloc_r+0xdc>
 800a560:	2c00      	cmp	r4, #0
 800a562:	d048      	beq.n	800a5f6 <_malloc_r+0xe6>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	4631      	mov	r1, r6
 800a568:	4638      	mov	r0, r7
 800a56a:	eb04 0903 	add.w	r9, r4, r3
 800a56e:	f001 f837 	bl	800b5e0 <_sbrk_r>
 800a572:	4581      	cmp	r9, r0
 800a574:	d13f      	bne.n	800a5f6 <_malloc_r+0xe6>
 800a576:	6821      	ldr	r1, [r4, #0]
 800a578:	1a6d      	subs	r5, r5, r1
 800a57a:	4629      	mov	r1, r5
 800a57c:	4638      	mov	r0, r7
 800a57e:	f7ff ffa7 	bl	800a4d0 <sbrk_aligned>
 800a582:	3001      	adds	r0, #1
 800a584:	d037      	beq.n	800a5f6 <_malloc_r+0xe6>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	442b      	add	r3, r5
 800a58a:	6023      	str	r3, [r4, #0]
 800a58c:	f8d8 3000 	ldr.w	r3, [r8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d038      	beq.n	800a606 <_malloc_r+0xf6>
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	42a2      	cmp	r2, r4
 800a598:	d12b      	bne.n	800a5f2 <_malloc_r+0xe2>
 800a59a:	2200      	movs	r2, #0
 800a59c:	605a      	str	r2, [r3, #4]
 800a59e:	e00f      	b.n	800a5c0 <_malloc_r+0xb0>
 800a5a0:	6822      	ldr	r2, [r4, #0]
 800a5a2:	1b52      	subs	r2, r2, r5
 800a5a4:	d41f      	bmi.n	800a5e6 <_malloc_r+0xd6>
 800a5a6:	2a0b      	cmp	r2, #11
 800a5a8:	d917      	bls.n	800a5da <_malloc_r+0xca>
 800a5aa:	1961      	adds	r1, r4, r5
 800a5ac:	42a3      	cmp	r3, r4
 800a5ae:	6025      	str	r5, [r4, #0]
 800a5b0:	bf18      	it	ne
 800a5b2:	6059      	strne	r1, [r3, #4]
 800a5b4:	6863      	ldr	r3, [r4, #4]
 800a5b6:	bf08      	it	eq
 800a5b8:	f8c8 1000 	streq.w	r1, [r8]
 800a5bc:	5162      	str	r2, [r4, r5]
 800a5be:	604b      	str	r3, [r1, #4]
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	f104 060b 	add.w	r6, r4, #11
 800a5c6:	f000 f829 	bl	800a61c <__malloc_unlock>
 800a5ca:	f026 0607 	bic.w	r6, r6, #7
 800a5ce:	1d23      	adds	r3, r4, #4
 800a5d0:	1af2      	subs	r2, r6, r3
 800a5d2:	d0ae      	beq.n	800a532 <_malloc_r+0x22>
 800a5d4:	1b9b      	subs	r3, r3, r6
 800a5d6:	50a3      	str	r3, [r4, r2]
 800a5d8:	e7ab      	b.n	800a532 <_malloc_r+0x22>
 800a5da:	42a3      	cmp	r3, r4
 800a5dc:	6862      	ldr	r2, [r4, #4]
 800a5de:	d1dd      	bne.n	800a59c <_malloc_r+0x8c>
 800a5e0:	f8c8 2000 	str.w	r2, [r8]
 800a5e4:	e7ec      	b.n	800a5c0 <_malloc_r+0xb0>
 800a5e6:	4623      	mov	r3, r4
 800a5e8:	6864      	ldr	r4, [r4, #4]
 800a5ea:	e7ac      	b.n	800a546 <_malloc_r+0x36>
 800a5ec:	4634      	mov	r4, r6
 800a5ee:	6876      	ldr	r6, [r6, #4]
 800a5f0:	e7b4      	b.n	800a55c <_malloc_r+0x4c>
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	e7cc      	b.n	800a590 <_malloc_r+0x80>
 800a5f6:	230c      	movs	r3, #12
 800a5f8:	603b      	str	r3, [r7, #0]
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	f000 f80e 	bl	800a61c <__malloc_unlock>
 800a600:	e797      	b.n	800a532 <_malloc_r+0x22>
 800a602:	6025      	str	r5, [r4, #0]
 800a604:	e7dc      	b.n	800a5c0 <_malloc_r+0xb0>
 800a606:	605b      	str	r3, [r3, #4]
 800a608:	deff      	udf	#255	; 0xff
 800a60a:	bf00      	nop
 800a60c:	200009f8 	.word	0x200009f8

0800a610 <__malloc_lock>:
 800a610:	4801      	ldr	r0, [pc, #4]	; (800a618 <__malloc_lock+0x8>)
 800a612:	f001 b832 	b.w	800b67a <__retarget_lock_acquire_recursive>
 800a616:	bf00      	nop
 800a618:	20000b40 	.word	0x20000b40

0800a61c <__malloc_unlock>:
 800a61c:	4801      	ldr	r0, [pc, #4]	; (800a624 <__malloc_unlock+0x8>)
 800a61e:	f001 b82d 	b.w	800b67c <__retarget_lock_release_recursive>
 800a622:	bf00      	nop
 800a624:	20000b40 	.word	0x20000b40

0800a628 <__cvt>:
 800a628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a62c:	ec55 4b10 	vmov	r4, r5, d0
 800a630:	2d00      	cmp	r5, #0
 800a632:	460e      	mov	r6, r1
 800a634:	4619      	mov	r1, r3
 800a636:	462b      	mov	r3, r5
 800a638:	bfbb      	ittet	lt
 800a63a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a63e:	461d      	movlt	r5, r3
 800a640:	2300      	movge	r3, #0
 800a642:	232d      	movlt	r3, #45	; 0x2d
 800a644:	700b      	strb	r3, [r1, #0]
 800a646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a648:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a64c:	4691      	mov	r9, r2
 800a64e:	f023 0820 	bic.w	r8, r3, #32
 800a652:	bfbc      	itt	lt
 800a654:	4622      	movlt	r2, r4
 800a656:	4614      	movlt	r4, r2
 800a658:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a65c:	d005      	beq.n	800a66a <__cvt+0x42>
 800a65e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a662:	d100      	bne.n	800a666 <__cvt+0x3e>
 800a664:	3601      	adds	r6, #1
 800a666:	2102      	movs	r1, #2
 800a668:	e000      	b.n	800a66c <__cvt+0x44>
 800a66a:	2103      	movs	r1, #3
 800a66c:	ab03      	add	r3, sp, #12
 800a66e:	9301      	str	r3, [sp, #4]
 800a670:	ab02      	add	r3, sp, #8
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	ec45 4b10 	vmov	d0, r4, r5
 800a678:	4653      	mov	r3, sl
 800a67a:	4632      	mov	r2, r6
 800a67c:	f001 f89c 	bl	800b7b8 <_dtoa_r>
 800a680:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a684:	4607      	mov	r7, r0
 800a686:	d102      	bne.n	800a68e <__cvt+0x66>
 800a688:	f019 0f01 	tst.w	r9, #1
 800a68c:	d022      	beq.n	800a6d4 <__cvt+0xac>
 800a68e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a692:	eb07 0906 	add.w	r9, r7, r6
 800a696:	d110      	bne.n	800a6ba <__cvt+0x92>
 800a698:	783b      	ldrb	r3, [r7, #0]
 800a69a:	2b30      	cmp	r3, #48	; 0x30
 800a69c:	d10a      	bne.n	800a6b4 <__cvt+0x8c>
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7f6 fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6aa:	b918      	cbnz	r0, 800a6b4 <__cvt+0x8c>
 800a6ac:	f1c6 0601 	rsb	r6, r6, #1
 800a6b0:	f8ca 6000 	str.w	r6, [sl]
 800a6b4:	f8da 3000 	ldr.w	r3, [sl]
 800a6b8:	4499      	add	r9, r3
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4620      	mov	r0, r4
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	f7f6 fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6c6:	b108      	cbz	r0, 800a6cc <__cvt+0xa4>
 800a6c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6cc:	2230      	movs	r2, #48	; 0x30
 800a6ce:	9b03      	ldr	r3, [sp, #12]
 800a6d0:	454b      	cmp	r3, r9
 800a6d2:	d307      	bcc.n	800a6e4 <__cvt+0xbc>
 800a6d4:	9b03      	ldr	r3, [sp, #12]
 800a6d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6d8:	1bdb      	subs	r3, r3, r7
 800a6da:	4638      	mov	r0, r7
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	b004      	add	sp, #16
 800a6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e4:	1c59      	adds	r1, r3, #1
 800a6e6:	9103      	str	r1, [sp, #12]
 800a6e8:	701a      	strb	r2, [r3, #0]
 800a6ea:	e7f0      	b.n	800a6ce <__cvt+0xa6>

0800a6ec <__exponent>:
 800a6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2900      	cmp	r1, #0
 800a6f2:	bfb8      	it	lt
 800a6f4:	4249      	neglt	r1, r1
 800a6f6:	f803 2b02 	strb.w	r2, [r3], #2
 800a6fa:	bfb4      	ite	lt
 800a6fc:	222d      	movlt	r2, #45	; 0x2d
 800a6fe:	222b      	movge	r2, #43	; 0x2b
 800a700:	2909      	cmp	r1, #9
 800a702:	7042      	strb	r2, [r0, #1]
 800a704:	dd2a      	ble.n	800a75c <__exponent+0x70>
 800a706:	f10d 0207 	add.w	r2, sp, #7
 800a70a:	4617      	mov	r7, r2
 800a70c:	260a      	movs	r6, #10
 800a70e:	4694      	mov	ip, r2
 800a710:	fb91 f5f6 	sdiv	r5, r1, r6
 800a714:	fb06 1415 	mls	r4, r6, r5, r1
 800a718:	3430      	adds	r4, #48	; 0x30
 800a71a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a71e:	460c      	mov	r4, r1
 800a720:	2c63      	cmp	r4, #99	; 0x63
 800a722:	f102 32ff 	add.w	r2, r2, #4294967295
 800a726:	4629      	mov	r1, r5
 800a728:	dcf1      	bgt.n	800a70e <__exponent+0x22>
 800a72a:	3130      	adds	r1, #48	; 0x30
 800a72c:	f1ac 0402 	sub.w	r4, ip, #2
 800a730:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a734:	1c41      	adds	r1, r0, #1
 800a736:	4622      	mov	r2, r4
 800a738:	42ba      	cmp	r2, r7
 800a73a:	d30a      	bcc.n	800a752 <__exponent+0x66>
 800a73c:	f10d 0209 	add.w	r2, sp, #9
 800a740:	eba2 020c 	sub.w	r2, r2, ip
 800a744:	42bc      	cmp	r4, r7
 800a746:	bf88      	it	hi
 800a748:	2200      	movhi	r2, #0
 800a74a:	4413      	add	r3, r2
 800a74c:	1a18      	subs	r0, r3, r0
 800a74e:	b003      	add	sp, #12
 800a750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a752:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a756:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a75a:	e7ed      	b.n	800a738 <__exponent+0x4c>
 800a75c:	2330      	movs	r3, #48	; 0x30
 800a75e:	3130      	adds	r1, #48	; 0x30
 800a760:	7083      	strb	r3, [r0, #2]
 800a762:	70c1      	strb	r1, [r0, #3]
 800a764:	1d03      	adds	r3, r0, #4
 800a766:	e7f1      	b.n	800a74c <__exponent+0x60>

0800a768 <_printf_float>:
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	ed2d 8b02 	vpush	{d8}
 800a770:	b08d      	sub	sp, #52	; 0x34
 800a772:	460c      	mov	r4, r1
 800a774:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a778:	4616      	mov	r6, r2
 800a77a:	461f      	mov	r7, r3
 800a77c:	4605      	mov	r5, r0
 800a77e:	f000 fef7 	bl	800b570 <_localeconv_r>
 800a782:	f8d0 a000 	ldr.w	sl, [r0]
 800a786:	4650      	mov	r0, sl
 800a788:	f7f5 fd72 	bl	8000270 <strlen>
 800a78c:	2300      	movs	r3, #0
 800a78e:	930a      	str	r3, [sp, #40]	; 0x28
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	9305      	str	r3, [sp, #20]
 800a794:	f8d8 3000 	ldr.w	r3, [r8]
 800a798:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a79c:	3307      	adds	r3, #7
 800a79e:	f023 0307 	bic.w	r3, r3, #7
 800a7a2:	f103 0208 	add.w	r2, r3, #8
 800a7a6:	f8c8 2000 	str.w	r2, [r8]
 800a7aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7b2:	9307      	str	r3, [sp, #28]
 800a7b4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7b8:	ee08 0a10 	vmov	s16, r0
 800a7bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a7c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7c4:	4b9e      	ldr	r3, [pc, #632]	; (800aa40 <_printf_float+0x2d8>)
 800a7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ca:	f7f6 f9af 	bl	8000b2c <__aeabi_dcmpun>
 800a7ce:	bb88      	cbnz	r0, 800a834 <_printf_float+0xcc>
 800a7d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7d4:	4b9a      	ldr	r3, [pc, #616]	; (800aa40 <_printf_float+0x2d8>)
 800a7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7da:	f7f6 f989 	bl	8000af0 <__aeabi_dcmple>
 800a7de:	bb48      	cbnz	r0, 800a834 <_printf_float+0xcc>
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	f7f6 f978 	bl	8000adc <__aeabi_dcmplt>
 800a7ec:	b110      	cbz	r0, 800a7f4 <_printf_float+0x8c>
 800a7ee:	232d      	movs	r3, #45	; 0x2d
 800a7f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7f4:	4a93      	ldr	r2, [pc, #588]	; (800aa44 <_printf_float+0x2dc>)
 800a7f6:	4b94      	ldr	r3, [pc, #592]	; (800aa48 <_printf_float+0x2e0>)
 800a7f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a7fc:	bf94      	ite	ls
 800a7fe:	4690      	movls	r8, r2
 800a800:	4698      	movhi	r8, r3
 800a802:	2303      	movs	r3, #3
 800a804:	6123      	str	r3, [r4, #16]
 800a806:	9b05      	ldr	r3, [sp, #20]
 800a808:	f023 0304 	bic.w	r3, r3, #4
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	f04f 0900 	mov.w	r9, #0
 800a812:	9700      	str	r7, [sp, #0]
 800a814:	4633      	mov	r3, r6
 800a816:	aa0b      	add	r2, sp, #44	; 0x2c
 800a818:	4621      	mov	r1, r4
 800a81a:	4628      	mov	r0, r5
 800a81c:	f000 f9da 	bl	800abd4 <_printf_common>
 800a820:	3001      	adds	r0, #1
 800a822:	f040 8090 	bne.w	800a946 <_printf_float+0x1de>
 800a826:	f04f 30ff 	mov.w	r0, #4294967295
 800a82a:	b00d      	add	sp, #52	; 0x34
 800a82c:	ecbd 8b02 	vpop	{d8}
 800a830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a834:	4642      	mov	r2, r8
 800a836:	464b      	mov	r3, r9
 800a838:	4640      	mov	r0, r8
 800a83a:	4649      	mov	r1, r9
 800a83c:	f7f6 f976 	bl	8000b2c <__aeabi_dcmpun>
 800a840:	b140      	cbz	r0, 800a854 <_printf_float+0xec>
 800a842:	464b      	mov	r3, r9
 800a844:	2b00      	cmp	r3, #0
 800a846:	bfbc      	itt	lt
 800a848:	232d      	movlt	r3, #45	; 0x2d
 800a84a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a84e:	4a7f      	ldr	r2, [pc, #508]	; (800aa4c <_printf_float+0x2e4>)
 800a850:	4b7f      	ldr	r3, [pc, #508]	; (800aa50 <_printf_float+0x2e8>)
 800a852:	e7d1      	b.n	800a7f8 <_printf_float+0x90>
 800a854:	6863      	ldr	r3, [r4, #4]
 800a856:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a85a:	9206      	str	r2, [sp, #24]
 800a85c:	1c5a      	adds	r2, r3, #1
 800a85e:	d13f      	bne.n	800a8e0 <_printf_float+0x178>
 800a860:	2306      	movs	r3, #6
 800a862:	6063      	str	r3, [r4, #4]
 800a864:	9b05      	ldr	r3, [sp, #20]
 800a866:	6861      	ldr	r1, [r4, #4]
 800a868:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a86c:	2300      	movs	r3, #0
 800a86e:	9303      	str	r3, [sp, #12]
 800a870:	ab0a      	add	r3, sp, #40	; 0x28
 800a872:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a876:	ab09      	add	r3, sp, #36	; 0x24
 800a878:	ec49 8b10 	vmov	d0, r8, r9
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	6022      	str	r2, [r4, #0]
 800a880:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a884:	4628      	mov	r0, r5
 800a886:	f7ff fecf 	bl	800a628 <__cvt>
 800a88a:	9b06      	ldr	r3, [sp, #24]
 800a88c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a88e:	2b47      	cmp	r3, #71	; 0x47
 800a890:	4680      	mov	r8, r0
 800a892:	d108      	bne.n	800a8a6 <_printf_float+0x13e>
 800a894:	1cc8      	adds	r0, r1, #3
 800a896:	db02      	blt.n	800a89e <_printf_float+0x136>
 800a898:	6863      	ldr	r3, [r4, #4]
 800a89a:	4299      	cmp	r1, r3
 800a89c:	dd41      	ble.n	800a922 <_printf_float+0x1ba>
 800a89e:	f1ab 0302 	sub.w	r3, fp, #2
 800a8a2:	fa5f fb83 	uxtb.w	fp, r3
 800a8a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8aa:	d820      	bhi.n	800a8ee <_printf_float+0x186>
 800a8ac:	3901      	subs	r1, #1
 800a8ae:	465a      	mov	r2, fp
 800a8b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8b4:	9109      	str	r1, [sp, #36]	; 0x24
 800a8b6:	f7ff ff19 	bl	800a6ec <__exponent>
 800a8ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8bc:	1813      	adds	r3, r2, r0
 800a8be:	2a01      	cmp	r2, #1
 800a8c0:	4681      	mov	r9, r0
 800a8c2:	6123      	str	r3, [r4, #16]
 800a8c4:	dc02      	bgt.n	800a8cc <_printf_float+0x164>
 800a8c6:	6822      	ldr	r2, [r4, #0]
 800a8c8:	07d2      	lsls	r2, r2, #31
 800a8ca:	d501      	bpl.n	800a8d0 <_printf_float+0x168>
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	6123      	str	r3, [r4, #16]
 800a8d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d09c      	beq.n	800a812 <_printf_float+0xaa>
 800a8d8:	232d      	movs	r3, #45	; 0x2d
 800a8da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8de:	e798      	b.n	800a812 <_printf_float+0xaa>
 800a8e0:	9a06      	ldr	r2, [sp, #24]
 800a8e2:	2a47      	cmp	r2, #71	; 0x47
 800a8e4:	d1be      	bne.n	800a864 <_printf_float+0xfc>
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1bc      	bne.n	800a864 <_printf_float+0xfc>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e7b9      	b.n	800a862 <_printf_float+0xfa>
 800a8ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a8f2:	d118      	bne.n	800a926 <_printf_float+0x1be>
 800a8f4:	2900      	cmp	r1, #0
 800a8f6:	6863      	ldr	r3, [r4, #4]
 800a8f8:	dd0b      	ble.n	800a912 <_printf_float+0x1aa>
 800a8fa:	6121      	str	r1, [r4, #16]
 800a8fc:	b913      	cbnz	r3, 800a904 <_printf_float+0x19c>
 800a8fe:	6822      	ldr	r2, [r4, #0]
 800a900:	07d0      	lsls	r0, r2, #31
 800a902:	d502      	bpl.n	800a90a <_printf_float+0x1a2>
 800a904:	3301      	adds	r3, #1
 800a906:	440b      	add	r3, r1
 800a908:	6123      	str	r3, [r4, #16]
 800a90a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a90c:	f04f 0900 	mov.w	r9, #0
 800a910:	e7de      	b.n	800a8d0 <_printf_float+0x168>
 800a912:	b913      	cbnz	r3, 800a91a <_printf_float+0x1b2>
 800a914:	6822      	ldr	r2, [r4, #0]
 800a916:	07d2      	lsls	r2, r2, #31
 800a918:	d501      	bpl.n	800a91e <_printf_float+0x1b6>
 800a91a:	3302      	adds	r3, #2
 800a91c:	e7f4      	b.n	800a908 <_printf_float+0x1a0>
 800a91e:	2301      	movs	r3, #1
 800a920:	e7f2      	b.n	800a908 <_printf_float+0x1a0>
 800a922:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a928:	4299      	cmp	r1, r3
 800a92a:	db05      	blt.n	800a938 <_printf_float+0x1d0>
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	6121      	str	r1, [r4, #16]
 800a930:	07d8      	lsls	r0, r3, #31
 800a932:	d5ea      	bpl.n	800a90a <_printf_float+0x1a2>
 800a934:	1c4b      	adds	r3, r1, #1
 800a936:	e7e7      	b.n	800a908 <_printf_float+0x1a0>
 800a938:	2900      	cmp	r1, #0
 800a93a:	bfd4      	ite	le
 800a93c:	f1c1 0202 	rsble	r2, r1, #2
 800a940:	2201      	movgt	r2, #1
 800a942:	4413      	add	r3, r2
 800a944:	e7e0      	b.n	800a908 <_printf_float+0x1a0>
 800a946:	6823      	ldr	r3, [r4, #0]
 800a948:	055a      	lsls	r2, r3, #21
 800a94a:	d407      	bmi.n	800a95c <_printf_float+0x1f4>
 800a94c:	6923      	ldr	r3, [r4, #16]
 800a94e:	4642      	mov	r2, r8
 800a950:	4631      	mov	r1, r6
 800a952:	4628      	mov	r0, r5
 800a954:	47b8      	blx	r7
 800a956:	3001      	adds	r0, #1
 800a958:	d12c      	bne.n	800a9b4 <_printf_float+0x24c>
 800a95a:	e764      	b.n	800a826 <_printf_float+0xbe>
 800a95c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a960:	f240 80e0 	bls.w	800ab24 <_printf_float+0x3bc>
 800a964:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a968:	2200      	movs	r2, #0
 800a96a:	2300      	movs	r3, #0
 800a96c:	f7f6 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 800a970:	2800      	cmp	r0, #0
 800a972:	d034      	beq.n	800a9de <_printf_float+0x276>
 800a974:	4a37      	ldr	r2, [pc, #220]	; (800aa54 <_printf_float+0x2ec>)
 800a976:	2301      	movs	r3, #1
 800a978:	4631      	mov	r1, r6
 800a97a:	4628      	mov	r0, r5
 800a97c:	47b8      	blx	r7
 800a97e:	3001      	adds	r0, #1
 800a980:	f43f af51 	beq.w	800a826 <_printf_float+0xbe>
 800a984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a988:	429a      	cmp	r2, r3
 800a98a:	db02      	blt.n	800a992 <_printf_float+0x22a>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	07d8      	lsls	r0, r3, #31
 800a990:	d510      	bpl.n	800a9b4 <_printf_float+0x24c>
 800a992:	ee18 3a10 	vmov	r3, s16
 800a996:	4652      	mov	r2, sl
 800a998:	4631      	mov	r1, r6
 800a99a:	4628      	mov	r0, r5
 800a99c:	47b8      	blx	r7
 800a99e:	3001      	adds	r0, #1
 800a9a0:	f43f af41 	beq.w	800a826 <_printf_float+0xbe>
 800a9a4:	f04f 0800 	mov.w	r8, #0
 800a9a8:	f104 091a 	add.w	r9, r4, #26
 800a9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	4543      	cmp	r3, r8
 800a9b2:	dc09      	bgt.n	800a9c8 <_printf_float+0x260>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	079b      	lsls	r3, r3, #30
 800a9b8:	f100 8107 	bmi.w	800abca <_printf_float+0x462>
 800a9bc:	68e0      	ldr	r0, [r4, #12]
 800a9be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c0:	4298      	cmp	r0, r3
 800a9c2:	bfb8      	it	lt
 800a9c4:	4618      	movlt	r0, r3
 800a9c6:	e730      	b.n	800a82a <_printf_float+0xc2>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	464a      	mov	r2, r9
 800a9cc:	4631      	mov	r1, r6
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	47b8      	blx	r7
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	f43f af27 	beq.w	800a826 <_printf_float+0xbe>
 800a9d8:	f108 0801 	add.w	r8, r8, #1
 800a9dc:	e7e6      	b.n	800a9ac <_printf_float+0x244>
 800a9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	dc39      	bgt.n	800aa58 <_printf_float+0x2f0>
 800a9e4:	4a1b      	ldr	r2, [pc, #108]	; (800aa54 <_printf_float+0x2ec>)
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	47b8      	blx	r7
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	f43f af19 	beq.w	800a826 <_printf_float+0xbe>
 800a9f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	d102      	bne.n	800aa02 <_printf_float+0x29a>
 800a9fc:	6823      	ldr	r3, [r4, #0]
 800a9fe:	07d9      	lsls	r1, r3, #31
 800aa00:	d5d8      	bpl.n	800a9b4 <_printf_float+0x24c>
 800aa02:	ee18 3a10 	vmov	r3, s16
 800aa06:	4652      	mov	r2, sl
 800aa08:	4631      	mov	r1, r6
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	47b8      	blx	r7
 800aa0e:	3001      	adds	r0, #1
 800aa10:	f43f af09 	beq.w	800a826 <_printf_float+0xbe>
 800aa14:	f04f 0900 	mov.w	r9, #0
 800aa18:	f104 0a1a 	add.w	sl, r4, #26
 800aa1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa1e:	425b      	negs	r3, r3
 800aa20:	454b      	cmp	r3, r9
 800aa22:	dc01      	bgt.n	800aa28 <_printf_float+0x2c0>
 800aa24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa26:	e792      	b.n	800a94e <_printf_float+0x1e6>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	4652      	mov	r2, sl
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4628      	mov	r0, r5
 800aa30:	47b8      	blx	r7
 800aa32:	3001      	adds	r0, #1
 800aa34:	f43f aef7 	beq.w	800a826 <_printf_float+0xbe>
 800aa38:	f109 0901 	add.w	r9, r9, #1
 800aa3c:	e7ee      	b.n	800aa1c <_printf_float+0x2b4>
 800aa3e:	bf00      	nop
 800aa40:	7fefffff 	.word	0x7fefffff
 800aa44:	08011ed8 	.word	0x08011ed8
 800aa48:	08011edc 	.word	0x08011edc
 800aa4c:	08011ee0 	.word	0x08011ee0
 800aa50:	08011ee4 	.word	0x08011ee4
 800aa54:	08011ee8 	.word	0x08011ee8
 800aa58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	bfa8      	it	ge
 800aa60:	461a      	movge	r2, r3
 800aa62:	2a00      	cmp	r2, #0
 800aa64:	4691      	mov	r9, r2
 800aa66:	dc37      	bgt.n	800aad8 <_printf_float+0x370>
 800aa68:	f04f 0b00 	mov.w	fp, #0
 800aa6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa70:	f104 021a 	add.w	r2, r4, #26
 800aa74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa76:	9305      	str	r3, [sp, #20]
 800aa78:	eba3 0309 	sub.w	r3, r3, r9
 800aa7c:	455b      	cmp	r3, fp
 800aa7e:	dc33      	bgt.n	800aae8 <_printf_float+0x380>
 800aa80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa84:	429a      	cmp	r2, r3
 800aa86:	db3b      	blt.n	800ab00 <_printf_float+0x398>
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	07da      	lsls	r2, r3, #31
 800aa8c:	d438      	bmi.n	800ab00 <_printf_float+0x398>
 800aa8e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aa92:	eba2 0903 	sub.w	r9, r2, r3
 800aa96:	9b05      	ldr	r3, [sp, #20]
 800aa98:	1ad2      	subs	r2, r2, r3
 800aa9a:	4591      	cmp	r9, r2
 800aa9c:	bfa8      	it	ge
 800aa9e:	4691      	movge	r9, r2
 800aaa0:	f1b9 0f00 	cmp.w	r9, #0
 800aaa4:	dc35      	bgt.n	800ab12 <_printf_float+0x3aa>
 800aaa6:	f04f 0800 	mov.w	r8, #0
 800aaaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aaae:	f104 0a1a 	add.w	sl, r4, #26
 800aab2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aab6:	1a9b      	subs	r3, r3, r2
 800aab8:	eba3 0309 	sub.w	r3, r3, r9
 800aabc:	4543      	cmp	r3, r8
 800aabe:	f77f af79 	ble.w	800a9b4 <_printf_float+0x24c>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4652      	mov	r2, sl
 800aac6:	4631      	mov	r1, r6
 800aac8:	4628      	mov	r0, r5
 800aaca:	47b8      	blx	r7
 800aacc:	3001      	adds	r0, #1
 800aace:	f43f aeaa 	beq.w	800a826 <_printf_float+0xbe>
 800aad2:	f108 0801 	add.w	r8, r8, #1
 800aad6:	e7ec      	b.n	800aab2 <_printf_float+0x34a>
 800aad8:	4613      	mov	r3, r2
 800aada:	4631      	mov	r1, r6
 800aadc:	4642      	mov	r2, r8
 800aade:	4628      	mov	r0, r5
 800aae0:	47b8      	blx	r7
 800aae2:	3001      	adds	r0, #1
 800aae4:	d1c0      	bne.n	800aa68 <_printf_float+0x300>
 800aae6:	e69e      	b.n	800a826 <_printf_float+0xbe>
 800aae8:	2301      	movs	r3, #1
 800aaea:	4631      	mov	r1, r6
 800aaec:	4628      	mov	r0, r5
 800aaee:	9205      	str	r2, [sp, #20]
 800aaf0:	47b8      	blx	r7
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	f43f ae97 	beq.w	800a826 <_printf_float+0xbe>
 800aaf8:	9a05      	ldr	r2, [sp, #20]
 800aafa:	f10b 0b01 	add.w	fp, fp, #1
 800aafe:	e7b9      	b.n	800aa74 <_printf_float+0x30c>
 800ab00:	ee18 3a10 	vmov	r3, s16
 800ab04:	4652      	mov	r2, sl
 800ab06:	4631      	mov	r1, r6
 800ab08:	4628      	mov	r0, r5
 800ab0a:	47b8      	blx	r7
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	d1be      	bne.n	800aa8e <_printf_float+0x326>
 800ab10:	e689      	b.n	800a826 <_printf_float+0xbe>
 800ab12:	9a05      	ldr	r2, [sp, #20]
 800ab14:	464b      	mov	r3, r9
 800ab16:	4442      	add	r2, r8
 800ab18:	4631      	mov	r1, r6
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	47b8      	blx	r7
 800ab1e:	3001      	adds	r0, #1
 800ab20:	d1c1      	bne.n	800aaa6 <_printf_float+0x33e>
 800ab22:	e680      	b.n	800a826 <_printf_float+0xbe>
 800ab24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab26:	2a01      	cmp	r2, #1
 800ab28:	dc01      	bgt.n	800ab2e <_printf_float+0x3c6>
 800ab2a:	07db      	lsls	r3, r3, #31
 800ab2c:	d53a      	bpl.n	800aba4 <_printf_float+0x43c>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	4642      	mov	r2, r8
 800ab32:	4631      	mov	r1, r6
 800ab34:	4628      	mov	r0, r5
 800ab36:	47b8      	blx	r7
 800ab38:	3001      	adds	r0, #1
 800ab3a:	f43f ae74 	beq.w	800a826 <_printf_float+0xbe>
 800ab3e:	ee18 3a10 	vmov	r3, s16
 800ab42:	4652      	mov	r2, sl
 800ab44:	4631      	mov	r1, r6
 800ab46:	4628      	mov	r0, r5
 800ab48:	47b8      	blx	r7
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	f43f ae6b 	beq.w	800a826 <_printf_float+0xbe>
 800ab50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab54:	2200      	movs	r2, #0
 800ab56:	2300      	movs	r3, #0
 800ab58:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ab5c:	f7f5 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab60:	b9d8      	cbnz	r0, 800ab9a <_printf_float+0x432>
 800ab62:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ab66:	f108 0201 	add.w	r2, r8, #1
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	47b8      	blx	r7
 800ab70:	3001      	adds	r0, #1
 800ab72:	d10e      	bne.n	800ab92 <_printf_float+0x42a>
 800ab74:	e657      	b.n	800a826 <_printf_float+0xbe>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4652      	mov	r2, sl
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	47b8      	blx	r7
 800ab80:	3001      	adds	r0, #1
 800ab82:	f43f ae50 	beq.w	800a826 <_printf_float+0xbe>
 800ab86:	f108 0801 	add.w	r8, r8, #1
 800ab8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	4543      	cmp	r3, r8
 800ab90:	dcf1      	bgt.n	800ab76 <_printf_float+0x40e>
 800ab92:	464b      	mov	r3, r9
 800ab94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab98:	e6da      	b.n	800a950 <_printf_float+0x1e8>
 800ab9a:	f04f 0800 	mov.w	r8, #0
 800ab9e:	f104 0a1a 	add.w	sl, r4, #26
 800aba2:	e7f2      	b.n	800ab8a <_printf_float+0x422>
 800aba4:	2301      	movs	r3, #1
 800aba6:	4642      	mov	r2, r8
 800aba8:	e7df      	b.n	800ab6a <_printf_float+0x402>
 800abaa:	2301      	movs	r3, #1
 800abac:	464a      	mov	r2, r9
 800abae:	4631      	mov	r1, r6
 800abb0:	4628      	mov	r0, r5
 800abb2:	47b8      	blx	r7
 800abb4:	3001      	adds	r0, #1
 800abb6:	f43f ae36 	beq.w	800a826 <_printf_float+0xbe>
 800abba:	f108 0801 	add.w	r8, r8, #1
 800abbe:	68e3      	ldr	r3, [r4, #12]
 800abc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abc2:	1a5b      	subs	r3, r3, r1
 800abc4:	4543      	cmp	r3, r8
 800abc6:	dcf0      	bgt.n	800abaa <_printf_float+0x442>
 800abc8:	e6f8      	b.n	800a9bc <_printf_float+0x254>
 800abca:	f04f 0800 	mov.w	r8, #0
 800abce:	f104 0919 	add.w	r9, r4, #25
 800abd2:	e7f4      	b.n	800abbe <_printf_float+0x456>

0800abd4 <_printf_common>:
 800abd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd8:	4616      	mov	r6, r2
 800abda:	4699      	mov	r9, r3
 800abdc:	688a      	ldr	r2, [r1, #8]
 800abde:	690b      	ldr	r3, [r1, #16]
 800abe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abe4:	4293      	cmp	r3, r2
 800abe6:	bfb8      	it	lt
 800abe8:	4613      	movlt	r3, r2
 800abea:	6033      	str	r3, [r6, #0]
 800abec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abf0:	4607      	mov	r7, r0
 800abf2:	460c      	mov	r4, r1
 800abf4:	b10a      	cbz	r2, 800abfa <_printf_common+0x26>
 800abf6:	3301      	adds	r3, #1
 800abf8:	6033      	str	r3, [r6, #0]
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	0699      	lsls	r1, r3, #26
 800abfe:	bf42      	ittt	mi
 800ac00:	6833      	ldrmi	r3, [r6, #0]
 800ac02:	3302      	addmi	r3, #2
 800ac04:	6033      	strmi	r3, [r6, #0]
 800ac06:	6825      	ldr	r5, [r4, #0]
 800ac08:	f015 0506 	ands.w	r5, r5, #6
 800ac0c:	d106      	bne.n	800ac1c <_printf_common+0x48>
 800ac0e:	f104 0a19 	add.w	sl, r4, #25
 800ac12:	68e3      	ldr	r3, [r4, #12]
 800ac14:	6832      	ldr	r2, [r6, #0]
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	42ab      	cmp	r3, r5
 800ac1a:	dc26      	bgt.n	800ac6a <_printf_common+0x96>
 800ac1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac20:	1e13      	subs	r3, r2, #0
 800ac22:	6822      	ldr	r2, [r4, #0]
 800ac24:	bf18      	it	ne
 800ac26:	2301      	movne	r3, #1
 800ac28:	0692      	lsls	r2, r2, #26
 800ac2a:	d42b      	bmi.n	800ac84 <_printf_common+0xb0>
 800ac2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac30:	4649      	mov	r1, r9
 800ac32:	4638      	mov	r0, r7
 800ac34:	47c0      	blx	r8
 800ac36:	3001      	adds	r0, #1
 800ac38:	d01e      	beq.n	800ac78 <_printf_common+0xa4>
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	6922      	ldr	r2, [r4, #16]
 800ac3e:	f003 0306 	and.w	r3, r3, #6
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	bf02      	ittt	eq
 800ac46:	68e5      	ldreq	r5, [r4, #12]
 800ac48:	6833      	ldreq	r3, [r6, #0]
 800ac4a:	1aed      	subeq	r5, r5, r3
 800ac4c:	68a3      	ldr	r3, [r4, #8]
 800ac4e:	bf0c      	ite	eq
 800ac50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac54:	2500      	movne	r5, #0
 800ac56:	4293      	cmp	r3, r2
 800ac58:	bfc4      	itt	gt
 800ac5a:	1a9b      	subgt	r3, r3, r2
 800ac5c:	18ed      	addgt	r5, r5, r3
 800ac5e:	2600      	movs	r6, #0
 800ac60:	341a      	adds	r4, #26
 800ac62:	42b5      	cmp	r5, r6
 800ac64:	d11a      	bne.n	800ac9c <_printf_common+0xc8>
 800ac66:	2000      	movs	r0, #0
 800ac68:	e008      	b.n	800ac7c <_printf_common+0xa8>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	4652      	mov	r2, sl
 800ac6e:	4649      	mov	r1, r9
 800ac70:	4638      	mov	r0, r7
 800ac72:	47c0      	blx	r8
 800ac74:	3001      	adds	r0, #1
 800ac76:	d103      	bne.n	800ac80 <_printf_common+0xac>
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac80:	3501      	adds	r5, #1
 800ac82:	e7c6      	b.n	800ac12 <_printf_common+0x3e>
 800ac84:	18e1      	adds	r1, r4, r3
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	2030      	movs	r0, #48	; 0x30
 800ac8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac8e:	4422      	add	r2, r4
 800ac90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac98:	3302      	adds	r3, #2
 800ac9a:	e7c7      	b.n	800ac2c <_printf_common+0x58>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	4622      	mov	r2, r4
 800aca0:	4649      	mov	r1, r9
 800aca2:	4638      	mov	r0, r7
 800aca4:	47c0      	blx	r8
 800aca6:	3001      	adds	r0, #1
 800aca8:	d0e6      	beq.n	800ac78 <_printf_common+0xa4>
 800acaa:	3601      	adds	r6, #1
 800acac:	e7d9      	b.n	800ac62 <_printf_common+0x8e>
	...

0800acb0 <_printf_i>:
 800acb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acb4:	7e0f      	ldrb	r7, [r1, #24]
 800acb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acb8:	2f78      	cmp	r7, #120	; 0x78
 800acba:	4691      	mov	r9, r2
 800acbc:	4680      	mov	r8, r0
 800acbe:	460c      	mov	r4, r1
 800acc0:	469a      	mov	sl, r3
 800acc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acc6:	d807      	bhi.n	800acd8 <_printf_i+0x28>
 800acc8:	2f62      	cmp	r7, #98	; 0x62
 800acca:	d80a      	bhi.n	800ace2 <_printf_i+0x32>
 800accc:	2f00      	cmp	r7, #0
 800acce:	f000 80d4 	beq.w	800ae7a <_printf_i+0x1ca>
 800acd2:	2f58      	cmp	r7, #88	; 0x58
 800acd4:	f000 80c0 	beq.w	800ae58 <_printf_i+0x1a8>
 800acd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ace0:	e03a      	b.n	800ad58 <_printf_i+0xa8>
 800ace2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ace6:	2b15      	cmp	r3, #21
 800ace8:	d8f6      	bhi.n	800acd8 <_printf_i+0x28>
 800acea:	a101      	add	r1, pc, #4	; (adr r1, 800acf0 <_printf_i+0x40>)
 800acec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acf0:	0800ad49 	.word	0x0800ad49
 800acf4:	0800ad5d 	.word	0x0800ad5d
 800acf8:	0800acd9 	.word	0x0800acd9
 800acfc:	0800acd9 	.word	0x0800acd9
 800ad00:	0800acd9 	.word	0x0800acd9
 800ad04:	0800acd9 	.word	0x0800acd9
 800ad08:	0800ad5d 	.word	0x0800ad5d
 800ad0c:	0800acd9 	.word	0x0800acd9
 800ad10:	0800acd9 	.word	0x0800acd9
 800ad14:	0800acd9 	.word	0x0800acd9
 800ad18:	0800acd9 	.word	0x0800acd9
 800ad1c:	0800ae61 	.word	0x0800ae61
 800ad20:	0800ad89 	.word	0x0800ad89
 800ad24:	0800ae1b 	.word	0x0800ae1b
 800ad28:	0800acd9 	.word	0x0800acd9
 800ad2c:	0800acd9 	.word	0x0800acd9
 800ad30:	0800ae83 	.word	0x0800ae83
 800ad34:	0800acd9 	.word	0x0800acd9
 800ad38:	0800ad89 	.word	0x0800ad89
 800ad3c:	0800acd9 	.word	0x0800acd9
 800ad40:	0800acd9 	.word	0x0800acd9
 800ad44:	0800ae23 	.word	0x0800ae23
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	1d1a      	adds	r2, r3, #4
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	602a      	str	r2, [r5, #0]
 800ad50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e09f      	b.n	800ae9c <_printf_i+0x1ec>
 800ad5c:	6820      	ldr	r0, [r4, #0]
 800ad5e:	682b      	ldr	r3, [r5, #0]
 800ad60:	0607      	lsls	r7, r0, #24
 800ad62:	f103 0104 	add.w	r1, r3, #4
 800ad66:	6029      	str	r1, [r5, #0]
 800ad68:	d501      	bpl.n	800ad6e <_printf_i+0xbe>
 800ad6a:	681e      	ldr	r6, [r3, #0]
 800ad6c:	e003      	b.n	800ad76 <_printf_i+0xc6>
 800ad6e:	0646      	lsls	r6, r0, #25
 800ad70:	d5fb      	bpl.n	800ad6a <_printf_i+0xba>
 800ad72:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ad76:	2e00      	cmp	r6, #0
 800ad78:	da03      	bge.n	800ad82 <_printf_i+0xd2>
 800ad7a:	232d      	movs	r3, #45	; 0x2d
 800ad7c:	4276      	negs	r6, r6
 800ad7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad82:	485a      	ldr	r0, [pc, #360]	; (800aeec <_printf_i+0x23c>)
 800ad84:	230a      	movs	r3, #10
 800ad86:	e012      	b.n	800adae <_printf_i+0xfe>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	6820      	ldr	r0, [r4, #0]
 800ad8c:	1d19      	adds	r1, r3, #4
 800ad8e:	6029      	str	r1, [r5, #0]
 800ad90:	0605      	lsls	r5, r0, #24
 800ad92:	d501      	bpl.n	800ad98 <_printf_i+0xe8>
 800ad94:	681e      	ldr	r6, [r3, #0]
 800ad96:	e002      	b.n	800ad9e <_printf_i+0xee>
 800ad98:	0641      	lsls	r1, r0, #25
 800ad9a:	d5fb      	bpl.n	800ad94 <_printf_i+0xe4>
 800ad9c:	881e      	ldrh	r6, [r3, #0]
 800ad9e:	4853      	ldr	r0, [pc, #332]	; (800aeec <_printf_i+0x23c>)
 800ada0:	2f6f      	cmp	r7, #111	; 0x6f
 800ada2:	bf0c      	ite	eq
 800ada4:	2308      	moveq	r3, #8
 800ada6:	230a      	movne	r3, #10
 800ada8:	2100      	movs	r1, #0
 800adaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adae:	6865      	ldr	r5, [r4, #4]
 800adb0:	60a5      	str	r5, [r4, #8]
 800adb2:	2d00      	cmp	r5, #0
 800adb4:	bfa2      	ittt	ge
 800adb6:	6821      	ldrge	r1, [r4, #0]
 800adb8:	f021 0104 	bicge.w	r1, r1, #4
 800adbc:	6021      	strge	r1, [r4, #0]
 800adbe:	b90e      	cbnz	r6, 800adc4 <_printf_i+0x114>
 800adc0:	2d00      	cmp	r5, #0
 800adc2:	d04b      	beq.n	800ae5c <_printf_i+0x1ac>
 800adc4:	4615      	mov	r5, r2
 800adc6:	fbb6 f1f3 	udiv	r1, r6, r3
 800adca:	fb03 6711 	mls	r7, r3, r1, r6
 800adce:	5dc7      	ldrb	r7, [r0, r7]
 800add0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800add4:	4637      	mov	r7, r6
 800add6:	42bb      	cmp	r3, r7
 800add8:	460e      	mov	r6, r1
 800adda:	d9f4      	bls.n	800adc6 <_printf_i+0x116>
 800addc:	2b08      	cmp	r3, #8
 800adde:	d10b      	bne.n	800adf8 <_printf_i+0x148>
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	07de      	lsls	r6, r3, #31
 800ade4:	d508      	bpl.n	800adf8 <_printf_i+0x148>
 800ade6:	6923      	ldr	r3, [r4, #16]
 800ade8:	6861      	ldr	r1, [r4, #4]
 800adea:	4299      	cmp	r1, r3
 800adec:	bfde      	ittt	le
 800adee:	2330      	movle	r3, #48	; 0x30
 800adf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adf8:	1b52      	subs	r2, r2, r5
 800adfa:	6122      	str	r2, [r4, #16]
 800adfc:	f8cd a000 	str.w	sl, [sp]
 800ae00:	464b      	mov	r3, r9
 800ae02:	aa03      	add	r2, sp, #12
 800ae04:	4621      	mov	r1, r4
 800ae06:	4640      	mov	r0, r8
 800ae08:	f7ff fee4 	bl	800abd4 <_printf_common>
 800ae0c:	3001      	adds	r0, #1
 800ae0e:	d14a      	bne.n	800aea6 <_printf_i+0x1f6>
 800ae10:	f04f 30ff 	mov.w	r0, #4294967295
 800ae14:	b004      	add	sp, #16
 800ae16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	f043 0320 	orr.w	r3, r3, #32
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	4833      	ldr	r0, [pc, #204]	; (800aef0 <_printf_i+0x240>)
 800ae24:	2778      	movs	r7, #120	; 0x78
 800ae26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	6829      	ldr	r1, [r5, #0]
 800ae2e:	061f      	lsls	r7, r3, #24
 800ae30:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae34:	d402      	bmi.n	800ae3c <_printf_i+0x18c>
 800ae36:	065f      	lsls	r7, r3, #25
 800ae38:	bf48      	it	mi
 800ae3a:	b2b6      	uxthmi	r6, r6
 800ae3c:	07df      	lsls	r7, r3, #31
 800ae3e:	bf48      	it	mi
 800ae40:	f043 0320 	orrmi.w	r3, r3, #32
 800ae44:	6029      	str	r1, [r5, #0]
 800ae46:	bf48      	it	mi
 800ae48:	6023      	strmi	r3, [r4, #0]
 800ae4a:	b91e      	cbnz	r6, 800ae54 <_printf_i+0x1a4>
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	f023 0320 	bic.w	r3, r3, #32
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	2310      	movs	r3, #16
 800ae56:	e7a7      	b.n	800ada8 <_printf_i+0xf8>
 800ae58:	4824      	ldr	r0, [pc, #144]	; (800aeec <_printf_i+0x23c>)
 800ae5a:	e7e4      	b.n	800ae26 <_printf_i+0x176>
 800ae5c:	4615      	mov	r5, r2
 800ae5e:	e7bd      	b.n	800addc <_printf_i+0x12c>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	6826      	ldr	r6, [r4, #0]
 800ae64:	6961      	ldr	r1, [r4, #20]
 800ae66:	1d18      	adds	r0, r3, #4
 800ae68:	6028      	str	r0, [r5, #0]
 800ae6a:	0635      	lsls	r5, r6, #24
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	d501      	bpl.n	800ae74 <_printf_i+0x1c4>
 800ae70:	6019      	str	r1, [r3, #0]
 800ae72:	e002      	b.n	800ae7a <_printf_i+0x1ca>
 800ae74:	0670      	lsls	r0, r6, #25
 800ae76:	d5fb      	bpl.n	800ae70 <_printf_i+0x1c0>
 800ae78:	8019      	strh	r1, [r3, #0]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	6123      	str	r3, [r4, #16]
 800ae7e:	4615      	mov	r5, r2
 800ae80:	e7bc      	b.n	800adfc <_printf_i+0x14c>
 800ae82:	682b      	ldr	r3, [r5, #0]
 800ae84:	1d1a      	adds	r2, r3, #4
 800ae86:	602a      	str	r2, [r5, #0]
 800ae88:	681d      	ldr	r5, [r3, #0]
 800ae8a:	6862      	ldr	r2, [r4, #4]
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f7f5 f99e 	bl	80001d0 <memchr>
 800ae94:	b108      	cbz	r0, 800ae9a <_printf_i+0x1ea>
 800ae96:	1b40      	subs	r0, r0, r5
 800ae98:	6060      	str	r0, [r4, #4]
 800ae9a:	6863      	ldr	r3, [r4, #4]
 800ae9c:	6123      	str	r3, [r4, #16]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aea4:	e7aa      	b.n	800adfc <_printf_i+0x14c>
 800aea6:	6923      	ldr	r3, [r4, #16]
 800aea8:	462a      	mov	r2, r5
 800aeaa:	4649      	mov	r1, r9
 800aeac:	4640      	mov	r0, r8
 800aeae:	47d0      	blx	sl
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d0ad      	beq.n	800ae10 <_printf_i+0x160>
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	079b      	lsls	r3, r3, #30
 800aeb8:	d413      	bmi.n	800aee2 <_printf_i+0x232>
 800aeba:	68e0      	ldr	r0, [r4, #12]
 800aebc:	9b03      	ldr	r3, [sp, #12]
 800aebe:	4298      	cmp	r0, r3
 800aec0:	bfb8      	it	lt
 800aec2:	4618      	movlt	r0, r3
 800aec4:	e7a6      	b.n	800ae14 <_printf_i+0x164>
 800aec6:	2301      	movs	r3, #1
 800aec8:	4632      	mov	r2, r6
 800aeca:	4649      	mov	r1, r9
 800aecc:	4640      	mov	r0, r8
 800aece:	47d0      	blx	sl
 800aed0:	3001      	adds	r0, #1
 800aed2:	d09d      	beq.n	800ae10 <_printf_i+0x160>
 800aed4:	3501      	adds	r5, #1
 800aed6:	68e3      	ldr	r3, [r4, #12]
 800aed8:	9903      	ldr	r1, [sp, #12]
 800aeda:	1a5b      	subs	r3, r3, r1
 800aedc:	42ab      	cmp	r3, r5
 800aede:	dcf2      	bgt.n	800aec6 <_printf_i+0x216>
 800aee0:	e7eb      	b.n	800aeba <_printf_i+0x20a>
 800aee2:	2500      	movs	r5, #0
 800aee4:	f104 0619 	add.w	r6, r4, #25
 800aee8:	e7f5      	b.n	800aed6 <_printf_i+0x226>
 800aeea:	bf00      	nop
 800aeec:	08011eea 	.word	0x08011eea
 800aef0:	08011efb 	.word	0x08011efb

0800aef4 <_scanf_float>:
 800aef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef8:	b087      	sub	sp, #28
 800aefa:	4617      	mov	r7, r2
 800aefc:	9303      	str	r3, [sp, #12]
 800aefe:	688b      	ldr	r3, [r1, #8]
 800af00:	1e5a      	subs	r2, r3, #1
 800af02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800af06:	bf83      	ittte	hi
 800af08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800af0c:	195b      	addhi	r3, r3, r5
 800af0e:	9302      	strhi	r3, [sp, #8]
 800af10:	2300      	movls	r3, #0
 800af12:	bf86      	itte	hi
 800af14:	f240 135d 	movwhi	r3, #349	; 0x15d
 800af18:	608b      	strhi	r3, [r1, #8]
 800af1a:	9302      	strls	r3, [sp, #8]
 800af1c:	680b      	ldr	r3, [r1, #0]
 800af1e:	468b      	mov	fp, r1
 800af20:	2500      	movs	r5, #0
 800af22:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800af26:	f84b 3b1c 	str.w	r3, [fp], #28
 800af2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af2e:	4680      	mov	r8, r0
 800af30:	460c      	mov	r4, r1
 800af32:	465e      	mov	r6, fp
 800af34:	46aa      	mov	sl, r5
 800af36:	46a9      	mov	r9, r5
 800af38:	9501      	str	r5, [sp, #4]
 800af3a:	68a2      	ldr	r2, [r4, #8]
 800af3c:	b152      	cbz	r2, 800af54 <_scanf_float+0x60>
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	2b4e      	cmp	r3, #78	; 0x4e
 800af44:	d864      	bhi.n	800b010 <_scanf_float+0x11c>
 800af46:	2b40      	cmp	r3, #64	; 0x40
 800af48:	d83c      	bhi.n	800afc4 <_scanf_float+0xd0>
 800af4a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800af4e:	b2c8      	uxtb	r0, r1
 800af50:	280e      	cmp	r0, #14
 800af52:	d93a      	bls.n	800afca <_scanf_float+0xd6>
 800af54:	f1b9 0f00 	cmp.w	r9, #0
 800af58:	d003      	beq.n	800af62 <_scanf_float+0x6e>
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af66:	f1ba 0f01 	cmp.w	sl, #1
 800af6a:	f200 8113 	bhi.w	800b194 <_scanf_float+0x2a0>
 800af6e:	455e      	cmp	r6, fp
 800af70:	f200 8105 	bhi.w	800b17e <_scanf_float+0x28a>
 800af74:	2501      	movs	r5, #1
 800af76:	4628      	mov	r0, r5
 800af78:	b007      	add	sp, #28
 800af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800af82:	2a0d      	cmp	r2, #13
 800af84:	d8e6      	bhi.n	800af54 <_scanf_float+0x60>
 800af86:	a101      	add	r1, pc, #4	; (adr r1, 800af8c <_scanf_float+0x98>)
 800af88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800af8c:	0800b0cb 	.word	0x0800b0cb
 800af90:	0800af55 	.word	0x0800af55
 800af94:	0800af55 	.word	0x0800af55
 800af98:	0800af55 	.word	0x0800af55
 800af9c:	0800b12b 	.word	0x0800b12b
 800afa0:	0800b103 	.word	0x0800b103
 800afa4:	0800af55 	.word	0x0800af55
 800afa8:	0800af55 	.word	0x0800af55
 800afac:	0800b0d9 	.word	0x0800b0d9
 800afb0:	0800af55 	.word	0x0800af55
 800afb4:	0800af55 	.word	0x0800af55
 800afb8:	0800af55 	.word	0x0800af55
 800afbc:	0800af55 	.word	0x0800af55
 800afc0:	0800b091 	.word	0x0800b091
 800afc4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800afc8:	e7db      	b.n	800af82 <_scanf_float+0x8e>
 800afca:	290e      	cmp	r1, #14
 800afcc:	d8c2      	bhi.n	800af54 <_scanf_float+0x60>
 800afce:	a001      	add	r0, pc, #4	; (adr r0, 800afd4 <_scanf_float+0xe0>)
 800afd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800afd4:	0800b083 	.word	0x0800b083
 800afd8:	0800af55 	.word	0x0800af55
 800afdc:	0800b083 	.word	0x0800b083
 800afe0:	0800b117 	.word	0x0800b117
 800afe4:	0800af55 	.word	0x0800af55
 800afe8:	0800b031 	.word	0x0800b031
 800afec:	0800b06d 	.word	0x0800b06d
 800aff0:	0800b06d 	.word	0x0800b06d
 800aff4:	0800b06d 	.word	0x0800b06d
 800aff8:	0800b06d 	.word	0x0800b06d
 800affc:	0800b06d 	.word	0x0800b06d
 800b000:	0800b06d 	.word	0x0800b06d
 800b004:	0800b06d 	.word	0x0800b06d
 800b008:	0800b06d 	.word	0x0800b06d
 800b00c:	0800b06d 	.word	0x0800b06d
 800b010:	2b6e      	cmp	r3, #110	; 0x6e
 800b012:	d809      	bhi.n	800b028 <_scanf_float+0x134>
 800b014:	2b60      	cmp	r3, #96	; 0x60
 800b016:	d8b2      	bhi.n	800af7e <_scanf_float+0x8a>
 800b018:	2b54      	cmp	r3, #84	; 0x54
 800b01a:	d077      	beq.n	800b10c <_scanf_float+0x218>
 800b01c:	2b59      	cmp	r3, #89	; 0x59
 800b01e:	d199      	bne.n	800af54 <_scanf_float+0x60>
 800b020:	2d07      	cmp	r5, #7
 800b022:	d197      	bne.n	800af54 <_scanf_float+0x60>
 800b024:	2508      	movs	r5, #8
 800b026:	e029      	b.n	800b07c <_scanf_float+0x188>
 800b028:	2b74      	cmp	r3, #116	; 0x74
 800b02a:	d06f      	beq.n	800b10c <_scanf_float+0x218>
 800b02c:	2b79      	cmp	r3, #121	; 0x79
 800b02e:	e7f6      	b.n	800b01e <_scanf_float+0x12a>
 800b030:	6821      	ldr	r1, [r4, #0]
 800b032:	05c8      	lsls	r0, r1, #23
 800b034:	d51a      	bpl.n	800b06c <_scanf_float+0x178>
 800b036:	9b02      	ldr	r3, [sp, #8]
 800b038:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b03c:	6021      	str	r1, [r4, #0]
 800b03e:	f109 0901 	add.w	r9, r9, #1
 800b042:	b11b      	cbz	r3, 800b04c <_scanf_float+0x158>
 800b044:	3b01      	subs	r3, #1
 800b046:	3201      	adds	r2, #1
 800b048:	9302      	str	r3, [sp, #8]
 800b04a:	60a2      	str	r2, [r4, #8]
 800b04c:	68a3      	ldr	r3, [r4, #8]
 800b04e:	3b01      	subs	r3, #1
 800b050:	60a3      	str	r3, [r4, #8]
 800b052:	6923      	ldr	r3, [r4, #16]
 800b054:	3301      	adds	r3, #1
 800b056:	6123      	str	r3, [r4, #16]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	607b      	str	r3, [r7, #4]
 800b060:	f340 8084 	ble.w	800b16c <_scanf_float+0x278>
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	3301      	adds	r3, #1
 800b068:	603b      	str	r3, [r7, #0]
 800b06a:	e766      	b.n	800af3a <_scanf_float+0x46>
 800b06c:	eb1a 0f05 	cmn.w	sl, r5
 800b070:	f47f af70 	bne.w	800af54 <_scanf_float+0x60>
 800b074:	6822      	ldr	r2, [r4, #0]
 800b076:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b07a:	6022      	str	r2, [r4, #0]
 800b07c:	f806 3b01 	strb.w	r3, [r6], #1
 800b080:	e7e4      	b.n	800b04c <_scanf_float+0x158>
 800b082:	6822      	ldr	r2, [r4, #0]
 800b084:	0610      	lsls	r0, r2, #24
 800b086:	f57f af65 	bpl.w	800af54 <_scanf_float+0x60>
 800b08a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b08e:	e7f4      	b.n	800b07a <_scanf_float+0x186>
 800b090:	f1ba 0f00 	cmp.w	sl, #0
 800b094:	d10e      	bne.n	800b0b4 <_scanf_float+0x1c0>
 800b096:	f1b9 0f00 	cmp.w	r9, #0
 800b09a:	d10e      	bne.n	800b0ba <_scanf_float+0x1c6>
 800b09c:	6822      	ldr	r2, [r4, #0]
 800b09e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b0a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b0a6:	d108      	bne.n	800b0ba <_scanf_float+0x1c6>
 800b0a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b0ac:	6022      	str	r2, [r4, #0]
 800b0ae:	f04f 0a01 	mov.w	sl, #1
 800b0b2:	e7e3      	b.n	800b07c <_scanf_float+0x188>
 800b0b4:	f1ba 0f02 	cmp.w	sl, #2
 800b0b8:	d055      	beq.n	800b166 <_scanf_float+0x272>
 800b0ba:	2d01      	cmp	r5, #1
 800b0bc:	d002      	beq.n	800b0c4 <_scanf_float+0x1d0>
 800b0be:	2d04      	cmp	r5, #4
 800b0c0:	f47f af48 	bne.w	800af54 <_scanf_float+0x60>
 800b0c4:	3501      	adds	r5, #1
 800b0c6:	b2ed      	uxtb	r5, r5
 800b0c8:	e7d8      	b.n	800b07c <_scanf_float+0x188>
 800b0ca:	f1ba 0f01 	cmp.w	sl, #1
 800b0ce:	f47f af41 	bne.w	800af54 <_scanf_float+0x60>
 800b0d2:	f04f 0a02 	mov.w	sl, #2
 800b0d6:	e7d1      	b.n	800b07c <_scanf_float+0x188>
 800b0d8:	b97d      	cbnz	r5, 800b0fa <_scanf_float+0x206>
 800b0da:	f1b9 0f00 	cmp.w	r9, #0
 800b0de:	f47f af3c 	bne.w	800af5a <_scanf_float+0x66>
 800b0e2:	6822      	ldr	r2, [r4, #0]
 800b0e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b0e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b0ec:	f47f af39 	bne.w	800af62 <_scanf_float+0x6e>
 800b0f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b0f4:	6022      	str	r2, [r4, #0]
 800b0f6:	2501      	movs	r5, #1
 800b0f8:	e7c0      	b.n	800b07c <_scanf_float+0x188>
 800b0fa:	2d03      	cmp	r5, #3
 800b0fc:	d0e2      	beq.n	800b0c4 <_scanf_float+0x1d0>
 800b0fe:	2d05      	cmp	r5, #5
 800b100:	e7de      	b.n	800b0c0 <_scanf_float+0x1cc>
 800b102:	2d02      	cmp	r5, #2
 800b104:	f47f af26 	bne.w	800af54 <_scanf_float+0x60>
 800b108:	2503      	movs	r5, #3
 800b10a:	e7b7      	b.n	800b07c <_scanf_float+0x188>
 800b10c:	2d06      	cmp	r5, #6
 800b10e:	f47f af21 	bne.w	800af54 <_scanf_float+0x60>
 800b112:	2507      	movs	r5, #7
 800b114:	e7b2      	b.n	800b07c <_scanf_float+0x188>
 800b116:	6822      	ldr	r2, [r4, #0]
 800b118:	0591      	lsls	r1, r2, #22
 800b11a:	f57f af1b 	bpl.w	800af54 <_scanf_float+0x60>
 800b11e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b122:	6022      	str	r2, [r4, #0]
 800b124:	f8cd 9004 	str.w	r9, [sp, #4]
 800b128:	e7a8      	b.n	800b07c <_scanf_float+0x188>
 800b12a:	6822      	ldr	r2, [r4, #0]
 800b12c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b130:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b134:	d006      	beq.n	800b144 <_scanf_float+0x250>
 800b136:	0550      	lsls	r0, r2, #21
 800b138:	f57f af0c 	bpl.w	800af54 <_scanf_float+0x60>
 800b13c:	f1b9 0f00 	cmp.w	r9, #0
 800b140:	f43f af0f 	beq.w	800af62 <_scanf_float+0x6e>
 800b144:	0591      	lsls	r1, r2, #22
 800b146:	bf58      	it	pl
 800b148:	9901      	ldrpl	r1, [sp, #4]
 800b14a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b14e:	bf58      	it	pl
 800b150:	eba9 0101 	subpl.w	r1, r9, r1
 800b154:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b158:	bf58      	it	pl
 800b15a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b15e:	6022      	str	r2, [r4, #0]
 800b160:	f04f 0900 	mov.w	r9, #0
 800b164:	e78a      	b.n	800b07c <_scanf_float+0x188>
 800b166:	f04f 0a03 	mov.w	sl, #3
 800b16a:	e787      	b.n	800b07c <_scanf_float+0x188>
 800b16c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b170:	4639      	mov	r1, r7
 800b172:	4640      	mov	r0, r8
 800b174:	4798      	blx	r3
 800b176:	2800      	cmp	r0, #0
 800b178:	f43f aedf 	beq.w	800af3a <_scanf_float+0x46>
 800b17c:	e6ea      	b.n	800af54 <_scanf_float+0x60>
 800b17e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b182:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b186:	463a      	mov	r2, r7
 800b188:	4640      	mov	r0, r8
 800b18a:	4798      	blx	r3
 800b18c:	6923      	ldr	r3, [r4, #16]
 800b18e:	3b01      	subs	r3, #1
 800b190:	6123      	str	r3, [r4, #16]
 800b192:	e6ec      	b.n	800af6e <_scanf_float+0x7a>
 800b194:	1e6b      	subs	r3, r5, #1
 800b196:	2b06      	cmp	r3, #6
 800b198:	d825      	bhi.n	800b1e6 <_scanf_float+0x2f2>
 800b19a:	2d02      	cmp	r5, #2
 800b19c:	d836      	bhi.n	800b20c <_scanf_float+0x318>
 800b19e:	455e      	cmp	r6, fp
 800b1a0:	f67f aee8 	bls.w	800af74 <_scanf_float+0x80>
 800b1a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1ac:	463a      	mov	r2, r7
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	4798      	blx	r3
 800b1b2:	6923      	ldr	r3, [r4, #16]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	6123      	str	r3, [r4, #16]
 800b1b8:	e7f1      	b.n	800b19e <_scanf_float+0x2aa>
 800b1ba:	9802      	ldr	r0, [sp, #8]
 800b1bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b1c4:	9002      	str	r0, [sp, #8]
 800b1c6:	463a      	mov	r2, r7
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	4798      	blx	r3
 800b1cc:	6923      	ldr	r3, [r4, #16]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	6123      	str	r3, [r4, #16]
 800b1d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1d6:	fa5f fa8a 	uxtb.w	sl, sl
 800b1da:	f1ba 0f02 	cmp.w	sl, #2
 800b1de:	d1ec      	bne.n	800b1ba <_scanf_float+0x2c6>
 800b1e0:	3d03      	subs	r5, #3
 800b1e2:	b2ed      	uxtb	r5, r5
 800b1e4:	1b76      	subs	r6, r6, r5
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	05da      	lsls	r2, r3, #23
 800b1ea:	d52f      	bpl.n	800b24c <_scanf_float+0x358>
 800b1ec:	055b      	lsls	r3, r3, #21
 800b1ee:	d510      	bpl.n	800b212 <_scanf_float+0x31e>
 800b1f0:	455e      	cmp	r6, fp
 800b1f2:	f67f aebf 	bls.w	800af74 <_scanf_float+0x80>
 800b1f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1fe:	463a      	mov	r2, r7
 800b200:	4640      	mov	r0, r8
 800b202:	4798      	blx	r3
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	3b01      	subs	r3, #1
 800b208:	6123      	str	r3, [r4, #16]
 800b20a:	e7f1      	b.n	800b1f0 <_scanf_float+0x2fc>
 800b20c:	46aa      	mov	sl, r5
 800b20e:	9602      	str	r6, [sp, #8]
 800b210:	e7df      	b.n	800b1d2 <_scanf_float+0x2de>
 800b212:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b216:	6923      	ldr	r3, [r4, #16]
 800b218:	2965      	cmp	r1, #101	; 0x65
 800b21a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b21e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b222:	6123      	str	r3, [r4, #16]
 800b224:	d00c      	beq.n	800b240 <_scanf_float+0x34c>
 800b226:	2945      	cmp	r1, #69	; 0x45
 800b228:	d00a      	beq.n	800b240 <_scanf_float+0x34c>
 800b22a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b22e:	463a      	mov	r2, r7
 800b230:	4640      	mov	r0, r8
 800b232:	4798      	blx	r3
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b23a:	3b01      	subs	r3, #1
 800b23c:	1eb5      	subs	r5, r6, #2
 800b23e:	6123      	str	r3, [r4, #16]
 800b240:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b244:	463a      	mov	r2, r7
 800b246:	4640      	mov	r0, r8
 800b248:	4798      	blx	r3
 800b24a:	462e      	mov	r6, r5
 800b24c:	6825      	ldr	r5, [r4, #0]
 800b24e:	f015 0510 	ands.w	r5, r5, #16
 800b252:	d158      	bne.n	800b306 <_scanf_float+0x412>
 800b254:	7035      	strb	r5, [r6, #0]
 800b256:	6823      	ldr	r3, [r4, #0]
 800b258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b25c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b260:	d11c      	bne.n	800b29c <_scanf_float+0x3a8>
 800b262:	9b01      	ldr	r3, [sp, #4]
 800b264:	454b      	cmp	r3, r9
 800b266:	eba3 0209 	sub.w	r2, r3, r9
 800b26a:	d124      	bne.n	800b2b6 <_scanf_float+0x3c2>
 800b26c:	2200      	movs	r2, #0
 800b26e:	4659      	mov	r1, fp
 800b270:	4640      	mov	r0, r8
 800b272:	f002 fb99 	bl	800d9a8 <_strtod_r>
 800b276:	9b03      	ldr	r3, [sp, #12]
 800b278:	6821      	ldr	r1, [r4, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f011 0f02 	tst.w	r1, #2
 800b280:	ec57 6b10 	vmov	r6, r7, d0
 800b284:	f103 0204 	add.w	r2, r3, #4
 800b288:	d020      	beq.n	800b2cc <_scanf_float+0x3d8>
 800b28a:	9903      	ldr	r1, [sp, #12]
 800b28c:	600a      	str	r2, [r1, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	e9c3 6700 	strd	r6, r7, [r3]
 800b294:	68e3      	ldr	r3, [r4, #12]
 800b296:	3301      	adds	r3, #1
 800b298:	60e3      	str	r3, [r4, #12]
 800b29a:	e66c      	b.n	800af76 <_scanf_float+0x82>
 800b29c:	9b04      	ldr	r3, [sp, #16]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d0e4      	beq.n	800b26c <_scanf_float+0x378>
 800b2a2:	9905      	ldr	r1, [sp, #20]
 800b2a4:	230a      	movs	r3, #10
 800b2a6:	462a      	mov	r2, r5
 800b2a8:	3101      	adds	r1, #1
 800b2aa:	4640      	mov	r0, r8
 800b2ac:	f002 fc04 	bl	800dab8 <_strtol_r>
 800b2b0:	9b04      	ldr	r3, [sp, #16]
 800b2b2:	9e05      	ldr	r6, [sp, #20]
 800b2b4:	1ac2      	subs	r2, r0, r3
 800b2b6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b2ba:	429e      	cmp	r6, r3
 800b2bc:	bf28      	it	cs
 800b2be:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b2c2:	4912      	ldr	r1, [pc, #72]	; (800b30c <_scanf_float+0x418>)
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	f000 f8e7 	bl	800b498 <siprintf>
 800b2ca:	e7cf      	b.n	800b26c <_scanf_float+0x378>
 800b2cc:	f011 0f04 	tst.w	r1, #4
 800b2d0:	9903      	ldr	r1, [sp, #12]
 800b2d2:	600a      	str	r2, [r1, #0]
 800b2d4:	d1db      	bne.n	800b28e <_scanf_float+0x39a>
 800b2d6:	f8d3 8000 	ldr.w	r8, [r3]
 800b2da:	ee10 2a10 	vmov	r2, s0
 800b2de:	ee10 0a10 	vmov	r0, s0
 800b2e2:	463b      	mov	r3, r7
 800b2e4:	4639      	mov	r1, r7
 800b2e6:	f7f5 fc21 	bl	8000b2c <__aeabi_dcmpun>
 800b2ea:	b128      	cbz	r0, 800b2f8 <_scanf_float+0x404>
 800b2ec:	4808      	ldr	r0, [pc, #32]	; (800b310 <_scanf_float+0x41c>)
 800b2ee:	f000 f9d5 	bl	800b69c <nanf>
 800b2f2:	ed88 0a00 	vstr	s0, [r8]
 800b2f6:	e7cd      	b.n	800b294 <_scanf_float+0x3a0>
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	4639      	mov	r1, r7
 800b2fc:	f7f5 fc74 	bl	8000be8 <__aeabi_d2f>
 800b300:	f8c8 0000 	str.w	r0, [r8]
 800b304:	e7c6      	b.n	800b294 <_scanf_float+0x3a0>
 800b306:	2500      	movs	r5, #0
 800b308:	e635      	b.n	800af76 <_scanf_float+0x82>
 800b30a:	bf00      	nop
 800b30c:	08011f0c 	.word	0x08011f0c
 800b310:	0801229d 	.word	0x0801229d

0800b314 <std>:
 800b314:	2300      	movs	r3, #0
 800b316:	b510      	push	{r4, lr}
 800b318:	4604      	mov	r4, r0
 800b31a:	e9c0 3300 	strd	r3, r3, [r0]
 800b31e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b322:	6083      	str	r3, [r0, #8]
 800b324:	8181      	strh	r1, [r0, #12]
 800b326:	6643      	str	r3, [r0, #100]	; 0x64
 800b328:	81c2      	strh	r2, [r0, #14]
 800b32a:	6183      	str	r3, [r0, #24]
 800b32c:	4619      	mov	r1, r3
 800b32e:	2208      	movs	r2, #8
 800b330:	305c      	adds	r0, #92	; 0x5c
 800b332:	f000 f914 	bl	800b55e <memset>
 800b336:	4b0d      	ldr	r3, [pc, #52]	; (800b36c <std+0x58>)
 800b338:	6263      	str	r3, [r4, #36]	; 0x24
 800b33a:	4b0d      	ldr	r3, [pc, #52]	; (800b370 <std+0x5c>)
 800b33c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b33e:	4b0d      	ldr	r3, [pc, #52]	; (800b374 <std+0x60>)
 800b340:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b342:	4b0d      	ldr	r3, [pc, #52]	; (800b378 <std+0x64>)
 800b344:	6323      	str	r3, [r4, #48]	; 0x30
 800b346:	4b0d      	ldr	r3, [pc, #52]	; (800b37c <std+0x68>)
 800b348:	6224      	str	r4, [r4, #32]
 800b34a:	429c      	cmp	r4, r3
 800b34c:	d006      	beq.n	800b35c <std+0x48>
 800b34e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b352:	4294      	cmp	r4, r2
 800b354:	d002      	beq.n	800b35c <std+0x48>
 800b356:	33d0      	adds	r3, #208	; 0xd0
 800b358:	429c      	cmp	r4, r3
 800b35a:	d105      	bne.n	800b368 <std+0x54>
 800b35c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b364:	f000 b988 	b.w	800b678 <__retarget_lock_init_recursive>
 800b368:	bd10      	pop	{r4, pc}
 800b36a:	bf00      	nop
 800b36c:	0800b4d9 	.word	0x0800b4d9
 800b370:	0800b4fb 	.word	0x0800b4fb
 800b374:	0800b533 	.word	0x0800b533
 800b378:	0800b557 	.word	0x0800b557
 800b37c:	20000a00 	.word	0x20000a00

0800b380 <stdio_exit_handler>:
 800b380:	4a02      	ldr	r2, [pc, #8]	; (800b38c <stdio_exit_handler+0xc>)
 800b382:	4903      	ldr	r1, [pc, #12]	; (800b390 <stdio_exit_handler+0x10>)
 800b384:	4803      	ldr	r0, [pc, #12]	; (800b394 <stdio_exit_handler+0x14>)
 800b386:	f000 b869 	b.w	800b45c <_fwalk_sglue>
 800b38a:	bf00      	nop
 800b38c:	2000000c 	.word	0x2000000c
 800b390:	0800de79 	.word	0x0800de79
 800b394:	20000018 	.word	0x20000018

0800b398 <cleanup_stdio>:
 800b398:	6841      	ldr	r1, [r0, #4]
 800b39a:	4b0c      	ldr	r3, [pc, #48]	; (800b3cc <cleanup_stdio+0x34>)
 800b39c:	4299      	cmp	r1, r3
 800b39e:	b510      	push	{r4, lr}
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	d001      	beq.n	800b3a8 <cleanup_stdio+0x10>
 800b3a4:	f002 fd68 	bl	800de78 <_fflush_r>
 800b3a8:	68a1      	ldr	r1, [r4, #8]
 800b3aa:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <cleanup_stdio+0x38>)
 800b3ac:	4299      	cmp	r1, r3
 800b3ae:	d002      	beq.n	800b3b6 <cleanup_stdio+0x1e>
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f002 fd61 	bl	800de78 <_fflush_r>
 800b3b6:	68e1      	ldr	r1, [r4, #12]
 800b3b8:	4b06      	ldr	r3, [pc, #24]	; (800b3d4 <cleanup_stdio+0x3c>)
 800b3ba:	4299      	cmp	r1, r3
 800b3bc:	d004      	beq.n	800b3c8 <cleanup_stdio+0x30>
 800b3be:	4620      	mov	r0, r4
 800b3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c4:	f002 bd58 	b.w	800de78 <_fflush_r>
 800b3c8:	bd10      	pop	{r4, pc}
 800b3ca:	bf00      	nop
 800b3cc:	20000a00 	.word	0x20000a00
 800b3d0:	20000a68 	.word	0x20000a68
 800b3d4:	20000ad0 	.word	0x20000ad0

0800b3d8 <global_stdio_init.part.0>:
 800b3d8:	b510      	push	{r4, lr}
 800b3da:	4b0b      	ldr	r3, [pc, #44]	; (800b408 <global_stdio_init.part.0+0x30>)
 800b3dc:	4c0b      	ldr	r4, [pc, #44]	; (800b40c <global_stdio_init.part.0+0x34>)
 800b3de:	4a0c      	ldr	r2, [pc, #48]	; (800b410 <global_stdio_init.part.0+0x38>)
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2104      	movs	r1, #4
 800b3e8:	f7ff ff94 	bl	800b314 <std>
 800b3ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	2109      	movs	r1, #9
 800b3f4:	f7ff ff8e 	bl	800b314 <std>
 800b3f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b3fc:	2202      	movs	r2, #2
 800b3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b402:	2112      	movs	r1, #18
 800b404:	f7ff bf86 	b.w	800b314 <std>
 800b408:	20000b38 	.word	0x20000b38
 800b40c:	20000a00 	.word	0x20000a00
 800b410:	0800b381 	.word	0x0800b381

0800b414 <__sfp_lock_acquire>:
 800b414:	4801      	ldr	r0, [pc, #4]	; (800b41c <__sfp_lock_acquire+0x8>)
 800b416:	f000 b930 	b.w	800b67a <__retarget_lock_acquire_recursive>
 800b41a:	bf00      	nop
 800b41c:	20000b41 	.word	0x20000b41

0800b420 <__sfp_lock_release>:
 800b420:	4801      	ldr	r0, [pc, #4]	; (800b428 <__sfp_lock_release+0x8>)
 800b422:	f000 b92b 	b.w	800b67c <__retarget_lock_release_recursive>
 800b426:	bf00      	nop
 800b428:	20000b41 	.word	0x20000b41

0800b42c <__sinit>:
 800b42c:	b510      	push	{r4, lr}
 800b42e:	4604      	mov	r4, r0
 800b430:	f7ff fff0 	bl	800b414 <__sfp_lock_acquire>
 800b434:	6a23      	ldr	r3, [r4, #32]
 800b436:	b11b      	cbz	r3, 800b440 <__sinit+0x14>
 800b438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b43c:	f7ff bff0 	b.w	800b420 <__sfp_lock_release>
 800b440:	4b04      	ldr	r3, [pc, #16]	; (800b454 <__sinit+0x28>)
 800b442:	6223      	str	r3, [r4, #32]
 800b444:	4b04      	ldr	r3, [pc, #16]	; (800b458 <__sinit+0x2c>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1f5      	bne.n	800b438 <__sinit+0xc>
 800b44c:	f7ff ffc4 	bl	800b3d8 <global_stdio_init.part.0>
 800b450:	e7f2      	b.n	800b438 <__sinit+0xc>
 800b452:	bf00      	nop
 800b454:	0800b399 	.word	0x0800b399
 800b458:	20000b38 	.word	0x20000b38

0800b45c <_fwalk_sglue>:
 800b45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b460:	4607      	mov	r7, r0
 800b462:	4688      	mov	r8, r1
 800b464:	4614      	mov	r4, r2
 800b466:	2600      	movs	r6, #0
 800b468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b46c:	f1b9 0901 	subs.w	r9, r9, #1
 800b470:	d505      	bpl.n	800b47e <_fwalk_sglue+0x22>
 800b472:	6824      	ldr	r4, [r4, #0]
 800b474:	2c00      	cmp	r4, #0
 800b476:	d1f7      	bne.n	800b468 <_fwalk_sglue+0xc>
 800b478:	4630      	mov	r0, r6
 800b47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47e:	89ab      	ldrh	r3, [r5, #12]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d907      	bls.n	800b494 <_fwalk_sglue+0x38>
 800b484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b488:	3301      	adds	r3, #1
 800b48a:	d003      	beq.n	800b494 <_fwalk_sglue+0x38>
 800b48c:	4629      	mov	r1, r5
 800b48e:	4638      	mov	r0, r7
 800b490:	47c0      	blx	r8
 800b492:	4306      	orrs	r6, r0
 800b494:	3568      	adds	r5, #104	; 0x68
 800b496:	e7e9      	b.n	800b46c <_fwalk_sglue+0x10>

0800b498 <siprintf>:
 800b498:	b40e      	push	{r1, r2, r3}
 800b49a:	b500      	push	{lr}
 800b49c:	b09c      	sub	sp, #112	; 0x70
 800b49e:	ab1d      	add	r3, sp, #116	; 0x74
 800b4a0:	9002      	str	r0, [sp, #8]
 800b4a2:	9006      	str	r0, [sp, #24]
 800b4a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b4a8:	4809      	ldr	r0, [pc, #36]	; (800b4d0 <siprintf+0x38>)
 800b4aa:	9107      	str	r1, [sp, #28]
 800b4ac:	9104      	str	r1, [sp, #16]
 800b4ae:	4909      	ldr	r1, [pc, #36]	; (800b4d4 <siprintf+0x3c>)
 800b4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4b4:	9105      	str	r1, [sp, #20]
 800b4b6:	6800      	ldr	r0, [r0, #0]
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	a902      	add	r1, sp, #8
 800b4bc:	f002 fb58 	bl	800db70 <_svfiprintf_r>
 800b4c0:	9b02      	ldr	r3, [sp, #8]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	701a      	strb	r2, [r3, #0]
 800b4c6:	b01c      	add	sp, #112	; 0x70
 800b4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4cc:	b003      	add	sp, #12
 800b4ce:	4770      	bx	lr
 800b4d0:	20000064 	.word	0x20000064
 800b4d4:	ffff0208 	.word	0xffff0208

0800b4d8 <__sread>:
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	460c      	mov	r4, r1
 800b4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4e0:	f000 f86c 	bl	800b5bc <_read_r>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	bfab      	itete	ge
 800b4e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4ea:	89a3      	ldrhlt	r3, [r4, #12]
 800b4ec:	181b      	addge	r3, r3, r0
 800b4ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4f2:	bfac      	ite	ge
 800b4f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4f6:	81a3      	strhlt	r3, [r4, #12]
 800b4f8:	bd10      	pop	{r4, pc}

0800b4fa <__swrite>:
 800b4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fe:	461f      	mov	r7, r3
 800b500:	898b      	ldrh	r3, [r1, #12]
 800b502:	05db      	lsls	r3, r3, #23
 800b504:	4605      	mov	r5, r0
 800b506:	460c      	mov	r4, r1
 800b508:	4616      	mov	r6, r2
 800b50a:	d505      	bpl.n	800b518 <__swrite+0x1e>
 800b50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b510:	2302      	movs	r3, #2
 800b512:	2200      	movs	r2, #0
 800b514:	f000 f840 	bl	800b598 <_lseek_r>
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b51e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b522:	81a3      	strh	r3, [r4, #12]
 800b524:	4632      	mov	r2, r6
 800b526:	463b      	mov	r3, r7
 800b528:	4628      	mov	r0, r5
 800b52a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b52e:	f000 b867 	b.w	800b600 <_write_r>

0800b532 <__sseek>:
 800b532:	b510      	push	{r4, lr}
 800b534:	460c      	mov	r4, r1
 800b536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b53a:	f000 f82d 	bl	800b598 <_lseek_r>
 800b53e:	1c43      	adds	r3, r0, #1
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	bf15      	itete	ne
 800b544:	6560      	strne	r0, [r4, #84]	; 0x54
 800b546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b54a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b54e:	81a3      	strheq	r3, [r4, #12]
 800b550:	bf18      	it	ne
 800b552:	81a3      	strhne	r3, [r4, #12]
 800b554:	bd10      	pop	{r4, pc}

0800b556 <__sclose>:
 800b556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55a:	f000 b80d 	b.w	800b578 <_close_r>

0800b55e <memset>:
 800b55e:	4402      	add	r2, r0
 800b560:	4603      	mov	r3, r0
 800b562:	4293      	cmp	r3, r2
 800b564:	d100      	bne.n	800b568 <memset+0xa>
 800b566:	4770      	bx	lr
 800b568:	f803 1b01 	strb.w	r1, [r3], #1
 800b56c:	e7f9      	b.n	800b562 <memset+0x4>
	...

0800b570 <_localeconv_r>:
 800b570:	4800      	ldr	r0, [pc, #0]	; (800b574 <_localeconv_r+0x4>)
 800b572:	4770      	bx	lr
 800b574:	20000158 	.word	0x20000158

0800b578 <_close_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4d06      	ldr	r5, [pc, #24]	; (800b594 <_close_r+0x1c>)
 800b57c:	2300      	movs	r3, #0
 800b57e:	4604      	mov	r4, r0
 800b580:	4608      	mov	r0, r1
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	f7f9 fc4d 	bl	8004e22 <_close>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_close_r+0x1a>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_close_r+0x1a>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	20000b3c 	.word	0x20000b3c

0800b598 <_lseek_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d07      	ldr	r5, [pc, #28]	; (800b5b8 <_lseek_r+0x20>)
 800b59c:	4604      	mov	r4, r0
 800b59e:	4608      	mov	r0, r1
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	602a      	str	r2, [r5, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f7f9 fc62 	bl	8004e70 <_lseek>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_lseek_r+0x1e>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_lseek_r+0x1e>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	20000b3c 	.word	0x20000b3c

0800b5bc <_read_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d07      	ldr	r5, [pc, #28]	; (800b5dc <_read_r+0x20>)
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	4608      	mov	r0, r1
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	602a      	str	r2, [r5, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f7f9 fbf0 	bl	8004db0 <_read>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	d102      	bne.n	800b5da <_read_r+0x1e>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	b103      	cbz	r3, 800b5da <_read_r+0x1e>
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	20000b3c 	.word	0x20000b3c

0800b5e0 <_sbrk_r>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	4d06      	ldr	r5, [pc, #24]	; (800b5fc <_sbrk_r+0x1c>)
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	4608      	mov	r0, r1
 800b5ea:	602b      	str	r3, [r5, #0]
 800b5ec:	f7f9 fc4e 	bl	8004e8c <_sbrk>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_sbrk_r+0x1a>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_sbrk_r+0x1a>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	20000b3c 	.word	0x20000b3c

0800b600 <_write_r>:
 800b600:	b538      	push	{r3, r4, r5, lr}
 800b602:	4d07      	ldr	r5, [pc, #28]	; (800b620 <_write_r+0x20>)
 800b604:	4604      	mov	r4, r0
 800b606:	4608      	mov	r0, r1
 800b608:	4611      	mov	r1, r2
 800b60a:	2200      	movs	r2, #0
 800b60c:	602a      	str	r2, [r5, #0]
 800b60e:	461a      	mov	r2, r3
 800b610:	f7f9 fbeb 	bl	8004dea <_write>
 800b614:	1c43      	adds	r3, r0, #1
 800b616:	d102      	bne.n	800b61e <_write_r+0x1e>
 800b618:	682b      	ldr	r3, [r5, #0]
 800b61a:	b103      	cbz	r3, 800b61e <_write_r+0x1e>
 800b61c:	6023      	str	r3, [r4, #0]
 800b61e:	bd38      	pop	{r3, r4, r5, pc}
 800b620:	20000b3c 	.word	0x20000b3c

0800b624 <__errno>:
 800b624:	4b01      	ldr	r3, [pc, #4]	; (800b62c <__errno+0x8>)
 800b626:	6818      	ldr	r0, [r3, #0]
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	20000064 	.word	0x20000064

0800b630 <__libc_init_array>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	4d0d      	ldr	r5, [pc, #52]	; (800b668 <__libc_init_array+0x38>)
 800b634:	4c0d      	ldr	r4, [pc, #52]	; (800b66c <__libc_init_array+0x3c>)
 800b636:	1b64      	subs	r4, r4, r5
 800b638:	10a4      	asrs	r4, r4, #2
 800b63a:	2600      	movs	r6, #0
 800b63c:	42a6      	cmp	r6, r4
 800b63e:	d109      	bne.n	800b654 <__libc_init_array+0x24>
 800b640:	4d0b      	ldr	r5, [pc, #44]	; (800b670 <__libc_init_array+0x40>)
 800b642:	4c0c      	ldr	r4, [pc, #48]	; (800b674 <__libc_init_array+0x44>)
 800b644:	f005 fee0 	bl	8011408 <_init>
 800b648:	1b64      	subs	r4, r4, r5
 800b64a:	10a4      	asrs	r4, r4, #2
 800b64c:	2600      	movs	r6, #0
 800b64e:	42a6      	cmp	r6, r4
 800b650:	d105      	bne.n	800b65e <__libc_init_array+0x2e>
 800b652:	bd70      	pop	{r4, r5, r6, pc}
 800b654:	f855 3b04 	ldr.w	r3, [r5], #4
 800b658:	4798      	blx	r3
 800b65a:	3601      	adds	r6, #1
 800b65c:	e7ee      	b.n	800b63c <__libc_init_array+0xc>
 800b65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b662:	4798      	blx	r3
 800b664:	3601      	adds	r6, #1
 800b666:	e7f2      	b.n	800b64e <__libc_init_array+0x1e>
 800b668:	08012580 	.word	0x08012580
 800b66c:	08012580 	.word	0x08012580
 800b670:	08012580 	.word	0x08012580
 800b674:	08012584 	.word	0x08012584

0800b678 <__retarget_lock_init_recursive>:
 800b678:	4770      	bx	lr

0800b67a <__retarget_lock_acquire_recursive>:
 800b67a:	4770      	bx	lr

0800b67c <__retarget_lock_release_recursive>:
 800b67c:	4770      	bx	lr

0800b67e <memcpy>:
 800b67e:	440a      	add	r2, r1
 800b680:	4291      	cmp	r1, r2
 800b682:	f100 33ff 	add.w	r3, r0, #4294967295
 800b686:	d100      	bne.n	800b68a <memcpy+0xc>
 800b688:	4770      	bx	lr
 800b68a:	b510      	push	{r4, lr}
 800b68c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b690:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b694:	4291      	cmp	r1, r2
 800b696:	d1f9      	bne.n	800b68c <memcpy+0xe>
 800b698:	bd10      	pop	{r4, pc}
	...

0800b69c <nanf>:
 800b69c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b6a4 <nanf+0x8>
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	7fc00000 	.word	0x7fc00000

0800b6a8 <quorem>:
 800b6a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	6903      	ldr	r3, [r0, #16]
 800b6ae:	690c      	ldr	r4, [r1, #16]
 800b6b0:	42a3      	cmp	r3, r4
 800b6b2:	4607      	mov	r7, r0
 800b6b4:	db7e      	blt.n	800b7b4 <quorem+0x10c>
 800b6b6:	3c01      	subs	r4, #1
 800b6b8:	f101 0814 	add.w	r8, r1, #20
 800b6bc:	f100 0514 	add.w	r5, r0, #20
 800b6c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6c4:	9301      	str	r3, [sp, #4]
 800b6c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6da:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6de:	d331      	bcc.n	800b744 <quorem+0x9c>
 800b6e0:	f04f 0e00 	mov.w	lr, #0
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	46ac      	mov	ip, r5
 800b6e8:	46f2      	mov	sl, lr
 800b6ea:	f850 2b04 	ldr.w	r2, [r0], #4
 800b6ee:	b293      	uxth	r3, r2
 800b6f0:	fb06 e303 	mla	r3, r6, r3, lr
 800b6f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6f8:	0c1a      	lsrs	r2, r3, #16
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	ebaa 0303 	sub.w	r3, sl, r3
 800b700:	f8dc a000 	ldr.w	sl, [ip]
 800b704:	fa13 f38a 	uxtah	r3, r3, sl
 800b708:	fb06 220e 	mla	r2, r6, lr, r2
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	9b00      	ldr	r3, [sp, #0]
 800b710:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b714:	b292      	uxth	r2, r2
 800b716:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b71a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b71e:	f8bd 3000 	ldrh.w	r3, [sp]
 800b722:	4581      	cmp	r9, r0
 800b724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b728:	f84c 3b04 	str.w	r3, [ip], #4
 800b72c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b730:	d2db      	bcs.n	800b6ea <quorem+0x42>
 800b732:	f855 300b 	ldr.w	r3, [r5, fp]
 800b736:	b92b      	cbnz	r3, 800b744 <quorem+0x9c>
 800b738:	9b01      	ldr	r3, [sp, #4]
 800b73a:	3b04      	subs	r3, #4
 800b73c:	429d      	cmp	r5, r3
 800b73e:	461a      	mov	r2, r3
 800b740:	d32c      	bcc.n	800b79c <quorem+0xf4>
 800b742:	613c      	str	r4, [r7, #16]
 800b744:	4638      	mov	r0, r7
 800b746:	f001 f93b 	bl	800c9c0 <__mcmp>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	db22      	blt.n	800b794 <quorem+0xec>
 800b74e:	3601      	adds	r6, #1
 800b750:	4629      	mov	r1, r5
 800b752:	2000      	movs	r0, #0
 800b754:	f858 2b04 	ldr.w	r2, [r8], #4
 800b758:	f8d1 c000 	ldr.w	ip, [r1]
 800b75c:	b293      	uxth	r3, r2
 800b75e:	1ac3      	subs	r3, r0, r3
 800b760:	0c12      	lsrs	r2, r2, #16
 800b762:	fa13 f38c 	uxtah	r3, r3, ip
 800b766:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b76a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b76e:	b29b      	uxth	r3, r3
 800b770:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b774:	45c1      	cmp	r9, r8
 800b776:	f841 3b04 	str.w	r3, [r1], #4
 800b77a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b77e:	d2e9      	bcs.n	800b754 <quorem+0xac>
 800b780:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b784:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b788:	b922      	cbnz	r2, 800b794 <quorem+0xec>
 800b78a:	3b04      	subs	r3, #4
 800b78c:	429d      	cmp	r5, r3
 800b78e:	461a      	mov	r2, r3
 800b790:	d30a      	bcc.n	800b7a8 <quorem+0x100>
 800b792:	613c      	str	r4, [r7, #16]
 800b794:	4630      	mov	r0, r6
 800b796:	b003      	add	sp, #12
 800b798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79c:	6812      	ldr	r2, [r2, #0]
 800b79e:	3b04      	subs	r3, #4
 800b7a0:	2a00      	cmp	r2, #0
 800b7a2:	d1ce      	bne.n	800b742 <quorem+0x9a>
 800b7a4:	3c01      	subs	r4, #1
 800b7a6:	e7c9      	b.n	800b73c <quorem+0x94>
 800b7a8:	6812      	ldr	r2, [r2, #0]
 800b7aa:	3b04      	subs	r3, #4
 800b7ac:	2a00      	cmp	r2, #0
 800b7ae:	d1f0      	bne.n	800b792 <quorem+0xea>
 800b7b0:	3c01      	subs	r4, #1
 800b7b2:	e7eb      	b.n	800b78c <quorem+0xe4>
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	e7ee      	b.n	800b796 <quorem+0xee>

0800b7b8 <_dtoa_r>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	ed2d 8b04 	vpush	{d8-d9}
 800b7c0:	69c5      	ldr	r5, [r0, #28]
 800b7c2:	b093      	sub	sp, #76	; 0x4c
 800b7c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b7c8:	ec57 6b10 	vmov	r6, r7, d0
 800b7cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b7d0:	9107      	str	r1, [sp, #28]
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	920a      	str	r2, [sp, #40]	; 0x28
 800b7d6:	930d      	str	r3, [sp, #52]	; 0x34
 800b7d8:	b975      	cbnz	r5, 800b7f8 <_dtoa_r+0x40>
 800b7da:	2010      	movs	r0, #16
 800b7dc:	f7fe fe68 	bl	800a4b0 <malloc>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	61e0      	str	r0, [r4, #28]
 800b7e4:	b920      	cbnz	r0, 800b7f0 <_dtoa_r+0x38>
 800b7e6:	4bae      	ldr	r3, [pc, #696]	; (800baa0 <_dtoa_r+0x2e8>)
 800b7e8:	21ef      	movs	r1, #239	; 0xef
 800b7ea:	48ae      	ldr	r0, [pc, #696]	; (800baa4 <_dtoa_r+0x2ec>)
 800b7ec:	f002 fba0 	bl	800df30 <__assert_func>
 800b7f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b7f4:	6005      	str	r5, [r0, #0]
 800b7f6:	60c5      	str	r5, [r0, #12]
 800b7f8:	69e3      	ldr	r3, [r4, #28]
 800b7fa:	6819      	ldr	r1, [r3, #0]
 800b7fc:	b151      	cbz	r1, 800b814 <_dtoa_r+0x5c>
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	604a      	str	r2, [r1, #4]
 800b802:	2301      	movs	r3, #1
 800b804:	4093      	lsls	r3, r2
 800b806:	608b      	str	r3, [r1, #8]
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 fe53 	bl	800c4b4 <_Bfree>
 800b80e:	69e3      	ldr	r3, [r4, #28]
 800b810:	2200      	movs	r2, #0
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	1e3b      	subs	r3, r7, #0
 800b816:	bfbb      	ittet	lt
 800b818:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b81c:	9303      	strlt	r3, [sp, #12]
 800b81e:	2300      	movge	r3, #0
 800b820:	2201      	movlt	r2, #1
 800b822:	bfac      	ite	ge
 800b824:	f8c8 3000 	strge.w	r3, [r8]
 800b828:	f8c8 2000 	strlt.w	r2, [r8]
 800b82c:	4b9e      	ldr	r3, [pc, #632]	; (800baa8 <_dtoa_r+0x2f0>)
 800b82e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b832:	ea33 0308 	bics.w	r3, r3, r8
 800b836:	d11b      	bne.n	800b870 <_dtoa_r+0xb8>
 800b838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b83a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b844:	4333      	orrs	r3, r6
 800b846:	f000 8593 	beq.w	800c370 <_dtoa_r+0xbb8>
 800b84a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b84c:	b963      	cbnz	r3, 800b868 <_dtoa_r+0xb0>
 800b84e:	4b97      	ldr	r3, [pc, #604]	; (800baac <_dtoa_r+0x2f4>)
 800b850:	e027      	b.n	800b8a2 <_dtoa_r+0xea>
 800b852:	4b97      	ldr	r3, [pc, #604]	; (800bab0 <_dtoa_r+0x2f8>)
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	3308      	adds	r3, #8
 800b858:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b85a:	6013      	str	r3, [r2, #0]
 800b85c:	9800      	ldr	r0, [sp, #0]
 800b85e:	b013      	add	sp, #76	; 0x4c
 800b860:	ecbd 8b04 	vpop	{d8-d9}
 800b864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b868:	4b90      	ldr	r3, [pc, #576]	; (800baac <_dtoa_r+0x2f4>)
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	3303      	adds	r3, #3
 800b86e:	e7f3      	b.n	800b858 <_dtoa_r+0xa0>
 800b870:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b874:	2200      	movs	r2, #0
 800b876:	ec51 0b17 	vmov	r0, r1, d7
 800b87a:	eeb0 8a47 	vmov.f32	s16, s14
 800b87e:	eef0 8a67 	vmov.f32	s17, s15
 800b882:	2300      	movs	r3, #0
 800b884:	f7f5 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 800b888:	4681      	mov	r9, r0
 800b88a:	b160      	cbz	r0, 800b8a6 <_dtoa_r+0xee>
 800b88c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b88e:	2301      	movs	r3, #1
 800b890:	6013      	str	r3, [r2, #0]
 800b892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 8568 	beq.w	800c36a <_dtoa_r+0xbb2>
 800b89a:	4b86      	ldr	r3, [pc, #536]	; (800bab4 <_dtoa_r+0x2fc>)
 800b89c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	e7da      	b.n	800b85c <_dtoa_r+0xa4>
 800b8a6:	aa10      	add	r2, sp, #64	; 0x40
 800b8a8:	a911      	add	r1, sp, #68	; 0x44
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	eeb0 0a48 	vmov.f32	s0, s16
 800b8b0:	eef0 0a68 	vmov.f32	s1, s17
 800b8b4:	f001 f99a 	bl	800cbec <__d2b>
 800b8b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b8bc:	4682      	mov	sl, r0
 800b8be:	2d00      	cmp	r5, #0
 800b8c0:	d07f      	beq.n	800b9c2 <_dtoa_r+0x20a>
 800b8c2:	ee18 3a90 	vmov	r3, s17
 800b8c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b8ce:	ec51 0b18 	vmov	r0, r1, d8
 800b8d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b8d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b8da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b8de:	4619      	mov	r1, r3
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	4b75      	ldr	r3, [pc, #468]	; (800bab8 <_dtoa_r+0x300>)
 800b8e4:	f7f4 fcd0 	bl	8000288 <__aeabi_dsub>
 800b8e8:	a367      	add	r3, pc, #412	; (adr r3, 800ba88 <_dtoa_r+0x2d0>)
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	f7f4 fe83 	bl	80005f8 <__aeabi_dmul>
 800b8f2:	a367      	add	r3, pc, #412	; (adr r3, 800ba90 <_dtoa_r+0x2d8>)
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	f7f4 fcc8 	bl	800028c <__adddf3>
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	4628      	mov	r0, r5
 800b900:	460f      	mov	r7, r1
 800b902:	f7f4 fe0f 	bl	8000524 <__aeabi_i2d>
 800b906:	a364      	add	r3, pc, #400	; (adr r3, 800ba98 <_dtoa_r+0x2e0>)
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f7f4 fe74 	bl	80005f8 <__aeabi_dmul>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	4630      	mov	r0, r6
 800b916:	4639      	mov	r1, r7
 800b918:	f7f4 fcb8 	bl	800028c <__adddf3>
 800b91c:	4606      	mov	r6, r0
 800b91e:	460f      	mov	r7, r1
 800b920:	f7f5 f91a 	bl	8000b58 <__aeabi_d2iz>
 800b924:	2200      	movs	r2, #0
 800b926:	4683      	mov	fp, r0
 800b928:	2300      	movs	r3, #0
 800b92a:	4630      	mov	r0, r6
 800b92c:	4639      	mov	r1, r7
 800b92e:	f7f5 f8d5 	bl	8000adc <__aeabi_dcmplt>
 800b932:	b148      	cbz	r0, 800b948 <_dtoa_r+0x190>
 800b934:	4658      	mov	r0, fp
 800b936:	f7f4 fdf5 	bl	8000524 <__aeabi_i2d>
 800b93a:	4632      	mov	r2, r6
 800b93c:	463b      	mov	r3, r7
 800b93e:	f7f5 f8c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b942:	b908      	cbnz	r0, 800b948 <_dtoa_r+0x190>
 800b944:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b948:	f1bb 0f16 	cmp.w	fp, #22
 800b94c:	d857      	bhi.n	800b9fe <_dtoa_r+0x246>
 800b94e:	4b5b      	ldr	r3, [pc, #364]	; (800babc <_dtoa_r+0x304>)
 800b950:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	ec51 0b18 	vmov	r0, r1, d8
 800b95c:	f7f5 f8be 	bl	8000adc <__aeabi_dcmplt>
 800b960:	2800      	cmp	r0, #0
 800b962:	d04e      	beq.n	800ba02 <_dtoa_r+0x24a>
 800b964:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b968:	2300      	movs	r3, #0
 800b96a:	930c      	str	r3, [sp, #48]	; 0x30
 800b96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b96e:	1b5b      	subs	r3, r3, r5
 800b970:	1e5a      	subs	r2, r3, #1
 800b972:	bf45      	ittet	mi
 800b974:	f1c3 0301 	rsbmi	r3, r3, #1
 800b978:	9305      	strmi	r3, [sp, #20]
 800b97a:	2300      	movpl	r3, #0
 800b97c:	2300      	movmi	r3, #0
 800b97e:	9206      	str	r2, [sp, #24]
 800b980:	bf54      	ite	pl
 800b982:	9305      	strpl	r3, [sp, #20]
 800b984:	9306      	strmi	r3, [sp, #24]
 800b986:	f1bb 0f00 	cmp.w	fp, #0
 800b98a:	db3c      	blt.n	800ba06 <_dtoa_r+0x24e>
 800b98c:	9b06      	ldr	r3, [sp, #24]
 800b98e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b992:	445b      	add	r3, fp
 800b994:	9306      	str	r3, [sp, #24]
 800b996:	2300      	movs	r3, #0
 800b998:	9308      	str	r3, [sp, #32]
 800b99a:	9b07      	ldr	r3, [sp, #28]
 800b99c:	2b09      	cmp	r3, #9
 800b99e:	d868      	bhi.n	800ba72 <_dtoa_r+0x2ba>
 800b9a0:	2b05      	cmp	r3, #5
 800b9a2:	bfc4      	itt	gt
 800b9a4:	3b04      	subgt	r3, #4
 800b9a6:	9307      	strgt	r3, [sp, #28]
 800b9a8:	9b07      	ldr	r3, [sp, #28]
 800b9aa:	f1a3 0302 	sub.w	r3, r3, #2
 800b9ae:	bfcc      	ite	gt
 800b9b0:	2500      	movgt	r5, #0
 800b9b2:	2501      	movle	r5, #1
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	f200 8085 	bhi.w	800bac4 <_dtoa_r+0x30c>
 800b9ba:	e8df f003 	tbb	[pc, r3]
 800b9be:	3b2e      	.short	0x3b2e
 800b9c0:	5839      	.short	0x5839
 800b9c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9c6:	441d      	add	r5, r3
 800b9c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9cc:	2b20      	cmp	r3, #32
 800b9ce:	bfc1      	itttt	gt
 800b9d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b9d4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b9d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b9dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b9e0:	bfd6      	itet	le
 800b9e2:	f1c3 0320 	rsble	r3, r3, #32
 800b9e6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b9ea:	fa06 f003 	lslle.w	r0, r6, r3
 800b9ee:	f7f4 fd89 	bl	8000504 <__aeabi_ui2d>
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b9f8:	3d01      	subs	r5, #1
 800b9fa:	920e      	str	r2, [sp, #56]	; 0x38
 800b9fc:	e76f      	b.n	800b8de <_dtoa_r+0x126>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e7b3      	b.n	800b96a <_dtoa_r+0x1b2>
 800ba02:	900c      	str	r0, [sp, #48]	; 0x30
 800ba04:	e7b2      	b.n	800b96c <_dtoa_r+0x1b4>
 800ba06:	9b05      	ldr	r3, [sp, #20]
 800ba08:	eba3 030b 	sub.w	r3, r3, fp
 800ba0c:	9305      	str	r3, [sp, #20]
 800ba0e:	f1cb 0300 	rsb	r3, fp, #0
 800ba12:	9308      	str	r3, [sp, #32]
 800ba14:	2300      	movs	r3, #0
 800ba16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba18:	e7bf      	b.n	800b99a <_dtoa_r+0x1e2>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dc52      	bgt.n	800baca <_dtoa_r+0x312>
 800ba24:	2301      	movs	r3, #1
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	9304      	str	r3, [sp, #16]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	920a      	str	r2, [sp, #40]	; 0x28
 800ba2e:	e00b      	b.n	800ba48 <_dtoa_r+0x290>
 800ba30:	2301      	movs	r3, #1
 800ba32:	e7f3      	b.n	800ba1c <_dtoa_r+0x264>
 800ba34:	2300      	movs	r3, #0
 800ba36:	9309      	str	r3, [sp, #36]	; 0x24
 800ba38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba3a:	445b      	add	r3, fp
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	bfb8      	it	lt
 800ba46:	2301      	movlt	r3, #1
 800ba48:	69e0      	ldr	r0, [r4, #28]
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	2204      	movs	r2, #4
 800ba4e:	f102 0614 	add.w	r6, r2, #20
 800ba52:	429e      	cmp	r6, r3
 800ba54:	d93d      	bls.n	800bad2 <_dtoa_r+0x31a>
 800ba56:	6041      	str	r1, [r0, #4]
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f000 fceb 	bl	800c434 <_Balloc>
 800ba5e:	9000      	str	r0, [sp, #0]
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d139      	bne.n	800bad8 <_dtoa_r+0x320>
 800ba64:	4b16      	ldr	r3, [pc, #88]	; (800bac0 <_dtoa_r+0x308>)
 800ba66:	4602      	mov	r2, r0
 800ba68:	f240 11af 	movw	r1, #431	; 0x1af
 800ba6c:	e6bd      	b.n	800b7ea <_dtoa_r+0x32>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e7e1      	b.n	800ba36 <_dtoa_r+0x27e>
 800ba72:	2501      	movs	r5, #1
 800ba74:	2300      	movs	r3, #0
 800ba76:	9307      	str	r3, [sp, #28]
 800ba78:	9509      	str	r5, [sp, #36]	; 0x24
 800ba7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7e:	9301      	str	r3, [sp, #4]
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	2200      	movs	r2, #0
 800ba84:	2312      	movs	r3, #18
 800ba86:	e7d1      	b.n	800ba2c <_dtoa_r+0x274>
 800ba88:	636f4361 	.word	0x636f4361
 800ba8c:	3fd287a7 	.word	0x3fd287a7
 800ba90:	8b60c8b3 	.word	0x8b60c8b3
 800ba94:	3fc68a28 	.word	0x3fc68a28
 800ba98:	509f79fb 	.word	0x509f79fb
 800ba9c:	3fd34413 	.word	0x3fd34413
 800baa0:	08011f1e 	.word	0x08011f1e
 800baa4:	08011f35 	.word	0x08011f35
 800baa8:	7ff00000 	.word	0x7ff00000
 800baac:	08011f1a 	.word	0x08011f1a
 800bab0:	08011f11 	.word	0x08011f11
 800bab4:	08011ee9 	.word	0x08011ee9
 800bab8:	3ff80000 	.word	0x3ff80000
 800babc:	08012020 	.word	0x08012020
 800bac0:	08011f8d 	.word	0x08011f8d
 800bac4:	2301      	movs	r3, #1
 800bac6:	9309      	str	r3, [sp, #36]	; 0x24
 800bac8:	e7d7      	b.n	800ba7a <_dtoa_r+0x2c2>
 800baca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bacc:	9301      	str	r3, [sp, #4]
 800bace:	9304      	str	r3, [sp, #16]
 800bad0:	e7ba      	b.n	800ba48 <_dtoa_r+0x290>
 800bad2:	3101      	adds	r1, #1
 800bad4:	0052      	lsls	r2, r2, #1
 800bad6:	e7ba      	b.n	800ba4e <_dtoa_r+0x296>
 800bad8:	69e3      	ldr	r3, [r4, #28]
 800bada:	9a00      	ldr	r2, [sp, #0]
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	2b0e      	cmp	r3, #14
 800bae2:	f200 80a8 	bhi.w	800bc36 <_dtoa_r+0x47e>
 800bae6:	2d00      	cmp	r5, #0
 800bae8:	f000 80a5 	beq.w	800bc36 <_dtoa_r+0x47e>
 800baec:	f1bb 0f00 	cmp.w	fp, #0
 800baf0:	dd38      	ble.n	800bb64 <_dtoa_r+0x3ac>
 800baf2:	4bc0      	ldr	r3, [pc, #768]	; (800bdf4 <_dtoa_r+0x63c>)
 800baf4:	f00b 020f 	and.w	r2, fp, #15
 800baf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bafc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bb00:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bb04:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bb08:	d019      	beq.n	800bb3e <_dtoa_r+0x386>
 800bb0a:	4bbb      	ldr	r3, [pc, #748]	; (800bdf8 <_dtoa_r+0x640>)
 800bb0c:	ec51 0b18 	vmov	r0, r1, d8
 800bb10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb14:	f7f4 fe9a 	bl	800084c <__aeabi_ddiv>
 800bb18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb1c:	f008 080f 	and.w	r8, r8, #15
 800bb20:	2503      	movs	r5, #3
 800bb22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bdf8 <_dtoa_r+0x640>
 800bb26:	f1b8 0f00 	cmp.w	r8, #0
 800bb2a:	d10a      	bne.n	800bb42 <_dtoa_r+0x38a>
 800bb2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb30:	4632      	mov	r2, r6
 800bb32:	463b      	mov	r3, r7
 800bb34:	f7f4 fe8a 	bl	800084c <__aeabi_ddiv>
 800bb38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb3c:	e02b      	b.n	800bb96 <_dtoa_r+0x3de>
 800bb3e:	2502      	movs	r5, #2
 800bb40:	e7ef      	b.n	800bb22 <_dtoa_r+0x36a>
 800bb42:	f018 0f01 	tst.w	r8, #1
 800bb46:	d008      	beq.n	800bb5a <_dtoa_r+0x3a2>
 800bb48:	4630      	mov	r0, r6
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bb50:	f7f4 fd52 	bl	80005f8 <__aeabi_dmul>
 800bb54:	3501      	adds	r5, #1
 800bb56:	4606      	mov	r6, r0
 800bb58:	460f      	mov	r7, r1
 800bb5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb5e:	f109 0908 	add.w	r9, r9, #8
 800bb62:	e7e0      	b.n	800bb26 <_dtoa_r+0x36e>
 800bb64:	f000 809f 	beq.w	800bca6 <_dtoa_r+0x4ee>
 800bb68:	f1cb 0600 	rsb	r6, fp, #0
 800bb6c:	4ba1      	ldr	r3, [pc, #644]	; (800bdf4 <_dtoa_r+0x63c>)
 800bb6e:	4fa2      	ldr	r7, [pc, #648]	; (800bdf8 <_dtoa_r+0x640>)
 800bb70:	f006 020f 	and.w	r2, r6, #15
 800bb74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	ec51 0b18 	vmov	r0, r1, d8
 800bb80:	f7f4 fd3a 	bl	80005f8 <__aeabi_dmul>
 800bb84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb88:	1136      	asrs	r6, r6, #4
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2502      	movs	r5, #2
 800bb8e:	2e00      	cmp	r6, #0
 800bb90:	d17e      	bne.n	800bc90 <_dtoa_r+0x4d8>
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1d0      	bne.n	800bb38 <_dtoa_r+0x380>
 800bb96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 8084 	beq.w	800bcaa <_dtoa_r+0x4f2>
 800bba2:	4b96      	ldr	r3, [pc, #600]	; (800bdfc <_dtoa_r+0x644>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	4640      	mov	r0, r8
 800bba8:	4649      	mov	r1, r9
 800bbaa:	f7f4 ff97 	bl	8000adc <__aeabi_dcmplt>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d07b      	beq.n	800bcaa <_dtoa_r+0x4f2>
 800bbb2:	9b04      	ldr	r3, [sp, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d078      	beq.n	800bcaa <_dtoa_r+0x4f2>
 800bbb8:	9b01      	ldr	r3, [sp, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	dd39      	ble.n	800bc32 <_dtoa_r+0x47a>
 800bbbe:	4b90      	ldr	r3, [pc, #576]	; (800be00 <_dtoa_r+0x648>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	f7f4 fd17 	bl	80005f8 <__aeabi_dmul>
 800bbca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbce:	9e01      	ldr	r6, [sp, #4]
 800bbd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bbd4:	3501      	adds	r5, #1
 800bbd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f7f4 fca2 	bl	8000524 <__aeabi_i2d>
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	464b      	mov	r3, r9
 800bbe4:	f7f4 fd08 	bl	80005f8 <__aeabi_dmul>
 800bbe8:	4b86      	ldr	r3, [pc, #536]	; (800be04 <_dtoa_r+0x64c>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	f7f4 fb4e 	bl	800028c <__adddf3>
 800bbf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bbf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbf8:	9303      	str	r3, [sp, #12]
 800bbfa:	2e00      	cmp	r6, #0
 800bbfc:	d158      	bne.n	800bcb0 <_dtoa_r+0x4f8>
 800bbfe:	4b82      	ldr	r3, [pc, #520]	; (800be08 <_dtoa_r+0x650>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	4640      	mov	r0, r8
 800bc04:	4649      	mov	r1, r9
 800bc06:	f7f4 fb3f 	bl	8000288 <__aeabi_dsub>
 800bc0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc0e:	4680      	mov	r8, r0
 800bc10:	4689      	mov	r9, r1
 800bc12:	f7f4 ff81 	bl	8000b18 <__aeabi_dcmpgt>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	f040 8296 	bne.w	800c148 <_dtoa_r+0x990>
 800bc1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bc20:	4640      	mov	r0, r8
 800bc22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc26:	4649      	mov	r1, r9
 800bc28:	f7f4 ff58 	bl	8000adc <__aeabi_dcmplt>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	f040 8289 	bne.w	800c144 <_dtoa_r+0x98c>
 800bc32:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f2c0 814e 	blt.w	800beda <_dtoa_r+0x722>
 800bc3e:	f1bb 0f0e 	cmp.w	fp, #14
 800bc42:	f300 814a 	bgt.w	800beda <_dtoa_r+0x722>
 800bc46:	4b6b      	ldr	r3, [pc, #428]	; (800bdf4 <_dtoa_r+0x63c>)
 800bc48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f280 80dc 	bge.w	800be10 <_dtoa_r+0x658>
 800bc58:	9b04      	ldr	r3, [sp, #16]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f300 80d8 	bgt.w	800be10 <_dtoa_r+0x658>
 800bc60:	f040 826f 	bne.w	800c142 <_dtoa_r+0x98a>
 800bc64:	4b68      	ldr	r3, [pc, #416]	; (800be08 <_dtoa_r+0x650>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	4640      	mov	r0, r8
 800bc6a:	4649      	mov	r1, r9
 800bc6c:	f7f4 fcc4 	bl	80005f8 <__aeabi_dmul>
 800bc70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc74:	f7f4 ff46 	bl	8000b04 <__aeabi_dcmpge>
 800bc78:	9e04      	ldr	r6, [sp, #16]
 800bc7a:	4637      	mov	r7, r6
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	f040 8245 	bne.w	800c10c <_dtoa_r+0x954>
 800bc82:	9d00      	ldr	r5, [sp, #0]
 800bc84:	2331      	movs	r3, #49	; 0x31
 800bc86:	f805 3b01 	strb.w	r3, [r5], #1
 800bc8a:	f10b 0b01 	add.w	fp, fp, #1
 800bc8e:	e241      	b.n	800c114 <_dtoa_r+0x95c>
 800bc90:	07f2      	lsls	r2, r6, #31
 800bc92:	d505      	bpl.n	800bca0 <_dtoa_r+0x4e8>
 800bc94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc98:	f7f4 fcae 	bl	80005f8 <__aeabi_dmul>
 800bc9c:	3501      	adds	r5, #1
 800bc9e:	2301      	movs	r3, #1
 800bca0:	1076      	asrs	r6, r6, #1
 800bca2:	3708      	adds	r7, #8
 800bca4:	e773      	b.n	800bb8e <_dtoa_r+0x3d6>
 800bca6:	2502      	movs	r5, #2
 800bca8:	e775      	b.n	800bb96 <_dtoa_r+0x3de>
 800bcaa:	9e04      	ldr	r6, [sp, #16]
 800bcac:	465f      	mov	r7, fp
 800bcae:	e792      	b.n	800bbd6 <_dtoa_r+0x41e>
 800bcb0:	9900      	ldr	r1, [sp, #0]
 800bcb2:	4b50      	ldr	r3, [pc, #320]	; (800bdf4 <_dtoa_r+0x63c>)
 800bcb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bcb8:	4431      	add	r1, r6
 800bcba:	9102      	str	r1, [sp, #8]
 800bcbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcbe:	eeb0 9a47 	vmov.f32	s18, s14
 800bcc2:	eef0 9a67 	vmov.f32	s19, s15
 800bcc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcce:	2900      	cmp	r1, #0
 800bcd0:	d044      	beq.n	800bd5c <_dtoa_r+0x5a4>
 800bcd2:	494e      	ldr	r1, [pc, #312]	; (800be0c <_dtoa_r+0x654>)
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	f7f4 fdb9 	bl	800084c <__aeabi_ddiv>
 800bcda:	ec53 2b19 	vmov	r2, r3, d9
 800bcde:	f7f4 fad3 	bl	8000288 <__aeabi_dsub>
 800bce2:	9d00      	ldr	r5, [sp, #0]
 800bce4:	ec41 0b19 	vmov	d9, r0, r1
 800bce8:	4649      	mov	r1, r9
 800bcea:	4640      	mov	r0, r8
 800bcec:	f7f4 ff34 	bl	8000b58 <__aeabi_d2iz>
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	f7f4 fc17 	bl	8000524 <__aeabi_i2d>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	4640      	mov	r0, r8
 800bcfc:	4649      	mov	r1, r9
 800bcfe:	f7f4 fac3 	bl	8000288 <__aeabi_dsub>
 800bd02:	3630      	adds	r6, #48	; 0x30
 800bd04:	f805 6b01 	strb.w	r6, [r5], #1
 800bd08:	ec53 2b19 	vmov	r2, r3, d9
 800bd0c:	4680      	mov	r8, r0
 800bd0e:	4689      	mov	r9, r1
 800bd10:	f7f4 fee4 	bl	8000adc <__aeabi_dcmplt>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d164      	bne.n	800bde2 <_dtoa_r+0x62a>
 800bd18:	4642      	mov	r2, r8
 800bd1a:	464b      	mov	r3, r9
 800bd1c:	4937      	ldr	r1, [pc, #220]	; (800bdfc <_dtoa_r+0x644>)
 800bd1e:	2000      	movs	r0, #0
 800bd20:	f7f4 fab2 	bl	8000288 <__aeabi_dsub>
 800bd24:	ec53 2b19 	vmov	r2, r3, d9
 800bd28:	f7f4 fed8 	bl	8000adc <__aeabi_dcmplt>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	f040 80b6 	bne.w	800be9e <_dtoa_r+0x6e6>
 800bd32:	9b02      	ldr	r3, [sp, #8]
 800bd34:	429d      	cmp	r5, r3
 800bd36:	f43f af7c 	beq.w	800bc32 <_dtoa_r+0x47a>
 800bd3a:	4b31      	ldr	r3, [pc, #196]	; (800be00 <_dtoa_r+0x648>)
 800bd3c:	ec51 0b19 	vmov	r0, r1, d9
 800bd40:	2200      	movs	r2, #0
 800bd42:	f7f4 fc59 	bl	80005f8 <__aeabi_dmul>
 800bd46:	4b2e      	ldr	r3, [pc, #184]	; (800be00 <_dtoa_r+0x648>)
 800bd48:	ec41 0b19 	vmov	d9, r0, r1
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	4640      	mov	r0, r8
 800bd50:	4649      	mov	r1, r9
 800bd52:	f7f4 fc51 	bl	80005f8 <__aeabi_dmul>
 800bd56:	4680      	mov	r8, r0
 800bd58:	4689      	mov	r9, r1
 800bd5a:	e7c5      	b.n	800bce8 <_dtoa_r+0x530>
 800bd5c:	ec51 0b17 	vmov	r0, r1, d7
 800bd60:	f7f4 fc4a 	bl	80005f8 <__aeabi_dmul>
 800bd64:	9b02      	ldr	r3, [sp, #8]
 800bd66:	9d00      	ldr	r5, [sp, #0]
 800bd68:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd6a:	ec41 0b19 	vmov	d9, r0, r1
 800bd6e:	4649      	mov	r1, r9
 800bd70:	4640      	mov	r0, r8
 800bd72:	f7f4 fef1 	bl	8000b58 <__aeabi_d2iz>
 800bd76:	4606      	mov	r6, r0
 800bd78:	f7f4 fbd4 	bl	8000524 <__aeabi_i2d>
 800bd7c:	3630      	adds	r6, #48	; 0x30
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	4640      	mov	r0, r8
 800bd84:	4649      	mov	r1, r9
 800bd86:	f7f4 fa7f 	bl	8000288 <__aeabi_dsub>
 800bd8a:	f805 6b01 	strb.w	r6, [r5], #1
 800bd8e:	9b02      	ldr	r3, [sp, #8]
 800bd90:	429d      	cmp	r5, r3
 800bd92:	4680      	mov	r8, r0
 800bd94:	4689      	mov	r9, r1
 800bd96:	f04f 0200 	mov.w	r2, #0
 800bd9a:	d124      	bne.n	800bde6 <_dtoa_r+0x62e>
 800bd9c:	4b1b      	ldr	r3, [pc, #108]	; (800be0c <_dtoa_r+0x654>)
 800bd9e:	ec51 0b19 	vmov	r0, r1, d9
 800bda2:	f7f4 fa73 	bl	800028c <__adddf3>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	f7f4 feb3 	bl	8000b18 <__aeabi_dcmpgt>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d173      	bne.n	800be9e <_dtoa_r+0x6e6>
 800bdb6:	ec53 2b19 	vmov	r2, r3, d9
 800bdba:	4914      	ldr	r1, [pc, #80]	; (800be0c <_dtoa_r+0x654>)
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f7f4 fa63 	bl	8000288 <__aeabi_dsub>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	4649      	mov	r1, r9
 800bdca:	f7f4 fe87 	bl	8000adc <__aeabi_dcmplt>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	f43f af2f 	beq.w	800bc32 <_dtoa_r+0x47a>
 800bdd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bdd6:	1e6b      	subs	r3, r5, #1
 800bdd8:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdde:	2b30      	cmp	r3, #48	; 0x30
 800bde0:	d0f8      	beq.n	800bdd4 <_dtoa_r+0x61c>
 800bde2:	46bb      	mov	fp, r7
 800bde4:	e04a      	b.n	800be7c <_dtoa_r+0x6c4>
 800bde6:	4b06      	ldr	r3, [pc, #24]	; (800be00 <_dtoa_r+0x648>)
 800bde8:	f7f4 fc06 	bl	80005f8 <__aeabi_dmul>
 800bdec:	4680      	mov	r8, r0
 800bdee:	4689      	mov	r9, r1
 800bdf0:	e7bd      	b.n	800bd6e <_dtoa_r+0x5b6>
 800bdf2:	bf00      	nop
 800bdf4:	08012020 	.word	0x08012020
 800bdf8:	08011ff8 	.word	0x08011ff8
 800bdfc:	3ff00000 	.word	0x3ff00000
 800be00:	40240000 	.word	0x40240000
 800be04:	401c0000 	.word	0x401c0000
 800be08:	40140000 	.word	0x40140000
 800be0c:	3fe00000 	.word	0x3fe00000
 800be10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be14:	9d00      	ldr	r5, [sp, #0]
 800be16:	4642      	mov	r2, r8
 800be18:	464b      	mov	r3, r9
 800be1a:	4630      	mov	r0, r6
 800be1c:	4639      	mov	r1, r7
 800be1e:	f7f4 fd15 	bl	800084c <__aeabi_ddiv>
 800be22:	f7f4 fe99 	bl	8000b58 <__aeabi_d2iz>
 800be26:	9001      	str	r0, [sp, #4]
 800be28:	f7f4 fb7c 	bl	8000524 <__aeabi_i2d>
 800be2c:	4642      	mov	r2, r8
 800be2e:	464b      	mov	r3, r9
 800be30:	f7f4 fbe2 	bl	80005f8 <__aeabi_dmul>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	4630      	mov	r0, r6
 800be3a:	4639      	mov	r1, r7
 800be3c:	f7f4 fa24 	bl	8000288 <__aeabi_dsub>
 800be40:	9e01      	ldr	r6, [sp, #4]
 800be42:	9f04      	ldr	r7, [sp, #16]
 800be44:	3630      	adds	r6, #48	; 0x30
 800be46:	f805 6b01 	strb.w	r6, [r5], #1
 800be4a:	9e00      	ldr	r6, [sp, #0]
 800be4c:	1bae      	subs	r6, r5, r6
 800be4e:	42b7      	cmp	r7, r6
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	d134      	bne.n	800bec0 <_dtoa_r+0x708>
 800be56:	f7f4 fa19 	bl	800028c <__adddf3>
 800be5a:	4642      	mov	r2, r8
 800be5c:	464b      	mov	r3, r9
 800be5e:	4606      	mov	r6, r0
 800be60:	460f      	mov	r7, r1
 800be62:	f7f4 fe59 	bl	8000b18 <__aeabi_dcmpgt>
 800be66:	b9c8      	cbnz	r0, 800be9c <_dtoa_r+0x6e4>
 800be68:	4642      	mov	r2, r8
 800be6a:	464b      	mov	r3, r9
 800be6c:	4630      	mov	r0, r6
 800be6e:	4639      	mov	r1, r7
 800be70:	f7f4 fe2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800be74:	b110      	cbz	r0, 800be7c <_dtoa_r+0x6c4>
 800be76:	9b01      	ldr	r3, [sp, #4]
 800be78:	07db      	lsls	r3, r3, #31
 800be7a:	d40f      	bmi.n	800be9c <_dtoa_r+0x6e4>
 800be7c:	4651      	mov	r1, sl
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 fb18 	bl	800c4b4 <_Bfree>
 800be84:	2300      	movs	r3, #0
 800be86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be88:	702b      	strb	r3, [r5, #0]
 800be8a:	f10b 0301 	add.w	r3, fp, #1
 800be8e:	6013      	str	r3, [r2, #0]
 800be90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be92:	2b00      	cmp	r3, #0
 800be94:	f43f ace2 	beq.w	800b85c <_dtoa_r+0xa4>
 800be98:	601d      	str	r5, [r3, #0]
 800be9a:	e4df      	b.n	800b85c <_dtoa_r+0xa4>
 800be9c:	465f      	mov	r7, fp
 800be9e:	462b      	mov	r3, r5
 800bea0:	461d      	mov	r5, r3
 800bea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bea6:	2a39      	cmp	r2, #57	; 0x39
 800bea8:	d106      	bne.n	800beb8 <_dtoa_r+0x700>
 800beaa:	9a00      	ldr	r2, [sp, #0]
 800beac:	429a      	cmp	r2, r3
 800beae:	d1f7      	bne.n	800bea0 <_dtoa_r+0x6e8>
 800beb0:	9900      	ldr	r1, [sp, #0]
 800beb2:	2230      	movs	r2, #48	; 0x30
 800beb4:	3701      	adds	r7, #1
 800beb6:	700a      	strb	r2, [r1, #0]
 800beb8:	781a      	ldrb	r2, [r3, #0]
 800beba:	3201      	adds	r2, #1
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	e790      	b.n	800bde2 <_dtoa_r+0x62a>
 800bec0:	4ba3      	ldr	r3, [pc, #652]	; (800c150 <_dtoa_r+0x998>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	f7f4 fb98 	bl	80005f8 <__aeabi_dmul>
 800bec8:	2200      	movs	r2, #0
 800beca:	2300      	movs	r3, #0
 800becc:	4606      	mov	r6, r0
 800bece:	460f      	mov	r7, r1
 800bed0:	f7f4 fdfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d09e      	beq.n	800be16 <_dtoa_r+0x65e>
 800bed8:	e7d0      	b.n	800be7c <_dtoa_r+0x6c4>
 800beda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bedc:	2a00      	cmp	r2, #0
 800bede:	f000 80ca 	beq.w	800c076 <_dtoa_r+0x8be>
 800bee2:	9a07      	ldr	r2, [sp, #28]
 800bee4:	2a01      	cmp	r2, #1
 800bee6:	f300 80ad 	bgt.w	800c044 <_dtoa_r+0x88c>
 800beea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800beec:	2a00      	cmp	r2, #0
 800beee:	f000 80a5 	beq.w	800c03c <_dtoa_r+0x884>
 800bef2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bef6:	9e08      	ldr	r6, [sp, #32]
 800bef8:	9d05      	ldr	r5, [sp, #20]
 800befa:	9a05      	ldr	r2, [sp, #20]
 800befc:	441a      	add	r2, r3
 800befe:	9205      	str	r2, [sp, #20]
 800bf00:	9a06      	ldr	r2, [sp, #24]
 800bf02:	2101      	movs	r1, #1
 800bf04:	441a      	add	r2, r3
 800bf06:	4620      	mov	r0, r4
 800bf08:	9206      	str	r2, [sp, #24]
 800bf0a:	f000 fbd3 	bl	800c6b4 <__i2b>
 800bf0e:	4607      	mov	r7, r0
 800bf10:	b165      	cbz	r5, 800bf2c <_dtoa_r+0x774>
 800bf12:	9b06      	ldr	r3, [sp, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	dd09      	ble.n	800bf2c <_dtoa_r+0x774>
 800bf18:	42ab      	cmp	r3, r5
 800bf1a:	9a05      	ldr	r2, [sp, #20]
 800bf1c:	bfa8      	it	ge
 800bf1e:	462b      	movge	r3, r5
 800bf20:	1ad2      	subs	r2, r2, r3
 800bf22:	9205      	str	r2, [sp, #20]
 800bf24:	9a06      	ldr	r2, [sp, #24]
 800bf26:	1aed      	subs	r5, r5, r3
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	9306      	str	r3, [sp, #24]
 800bf2c:	9b08      	ldr	r3, [sp, #32]
 800bf2e:	b1f3      	cbz	r3, 800bf6e <_dtoa_r+0x7b6>
 800bf30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f000 80a3 	beq.w	800c07e <_dtoa_r+0x8c6>
 800bf38:	2e00      	cmp	r6, #0
 800bf3a:	dd10      	ble.n	800bf5e <_dtoa_r+0x7a6>
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	4632      	mov	r2, r6
 800bf40:	4620      	mov	r0, r4
 800bf42:	f000 fc77 	bl	800c834 <__pow5mult>
 800bf46:	4652      	mov	r2, sl
 800bf48:	4601      	mov	r1, r0
 800bf4a:	4607      	mov	r7, r0
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f000 fbc7 	bl	800c6e0 <__multiply>
 800bf52:	4651      	mov	r1, sl
 800bf54:	4680      	mov	r8, r0
 800bf56:	4620      	mov	r0, r4
 800bf58:	f000 faac 	bl	800c4b4 <_Bfree>
 800bf5c:	46c2      	mov	sl, r8
 800bf5e:	9b08      	ldr	r3, [sp, #32]
 800bf60:	1b9a      	subs	r2, r3, r6
 800bf62:	d004      	beq.n	800bf6e <_dtoa_r+0x7b6>
 800bf64:	4651      	mov	r1, sl
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 fc64 	bl	800c834 <__pow5mult>
 800bf6c:	4682      	mov	sl, r0
 800bf6e:	2101      	movs	r1, #1
 800bf70:	4620      	mov	r0, r4
 800bf72:	f000 fb9f 	bl	800c6b4 <__i2b>
 800bf76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	f340 8081 	ble.w	800c082 <_dtoa_r+0x8ca>
 800bf80:	461a      	mov	r2, r3
 800bf82:	4601      	mov	r1, r0
 800bf84:	4620      	mov	r0, r4
 800bf86:	f000 fc55 	bl	800c834 <__pow5mult>
 800bf8a:	9b07      	ldr	r3, [sp, #28]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	4606      	mov	r6, r0
 800bf90:	dd7a      	ble.n	800c088 <_dtoa_r+0x8d0>
 800bf92:	f04f 0800 	mov.w	r8, #0
 800bf96:	6933      	ldr	r3, [r6, #16]
 800bf98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf9c:	6918      	ldr	r0, [r3, #16]
 800bf9e:	f000 fb3b 	bl	800c618 <__hi0bits>
 800bfa2:	f1c0 0020 	rsb	r0, r0, #32
 800bfa6:	9b06      	ldr	r3, [sp, #24]
 800bfa8:	4418      	add	r0, r3
 800bfaa:	f010 001f 	ands.w	r0, r0, #31
 800bfae:	f000 8094 	beq.w	800c0da <_dtoa_r+0x922>
 800bfb2:	f1c0 0320 	rsb	r3, r0, #32
 800bfb6:	2b04      	cmp	r3, #4
 800bfb8:	f340 8085 	ble.w	800c0c6 <_dtoa_r+0x90e>
 800bfbc:	9b05      	ldr	r3, [sp, #20]
 800bfbe:	f1c0 001c 	rsb	r0, r0, #28
 800bfc2:	4403      	add	r3, r0
 800bfc4:	9305      	str	r3, [sp, #20]
 800bfc6:	9b06      	ldr	r3, [sp, #24]
 800bfc8:	4403      	add	r3, r0
 800bfca:	4405      	add	r5, r0
 800bfcc:	9306      	str	r3, [sp, #24]
 800bfce:	9b05      	ldr	r3, [sp, #20]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	dd05      	ble.n	800bfe0 <_dtoa_r+0x828>
 800bfd4:	4651      	mov	r1, sl
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f000 fc85 	bl	800c8e8 <__lshift>
 800bfde:	4682      	mov	sl, r0
 800bfe0:	9b06      	ldr	r3, [sp, #24]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	dd05      	ble.n	800bff2 <_dtoa_r+0x83a>
 800bfe6:	4631      	mov	r1, r6
 800bfe8:	461a      	mov	r2, r3
 800bfea:	4620      	mov	r0, r4
 800bfec:	f000 fc7c 	bl	800c8e8 <__lshift>
 800bff0:	4606      	mov	r6, r0
 800bff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d072      	beq.n	800c0de <_dtoa_r+0x926>
 800bff8:	4631      	mov	r1, r6
 800bffa:	4650      	mov	r0, sl
 800bffc:	f000 fce0 	bl	800c9c0 <__mcmp>
 800c000:	2800      	cmp	r0, #0
 800c002:	da6c      	bge.n	800c0de <_dtoa_r+0x926>
 800c004:	2300      	movs	r3, #0
 800c006:	4651      	mov	r1, sl
 800c008:	220a      	movs	r2, #10
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 fa74 	bl	800c4f8 <__multadd>
 800c010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c012:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c016:	4682      	mov	sl, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f000 81b0 	beq.w	800c37e <_dtoa_r+0xbc6>
 800c01e:	2300      	movs	r3, #0
 800c020:	4639      	mov	r1, r7
 800c022:	220a      	movs	r2, #10
 800c024:	4620      	mov	r0, r4
 800c026:	f000 fa67 	bl	800c4f8 <__multadd>
 800c02a:	9b01      	ldr	r3, [sp, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	4607      	mov	r7, r0
 800c030:	f300 8096 	bgt.w	800c160 <_dtoa_r+0x9a8>
 800c034:	9b07      	ldr	r3, [sp, #28]
 800c036:	2b02      	cmp	r3, #2
 800c038:	dc59      	bgt.n	800c0ee <_dtoa_r+0x936>
 800c03a:	e091      	b.n	800c160 <_dtoa_r+0x9a8>
 800c03c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c03e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c042:	e758      	b.n	800bef6 <_dtoa_r+0x73e>
 800c044:	9b04      	ldr	r3, [sp, #16]
 800c046:	1e5e      	subs	r6, r3, #1
 800c048:	9b08      	ldr	r3, [sp, #32]
 800c04a:	42b3      	cmp	r3, r6
 800c04c:	bfbf      	itttt	lt
 800c04e:	9b08      	ldrlt	r3, [sp, #32]
 800c050:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c052:	9608      	strlt	r6, [sp, #32]
 800c054:	1af3      	sublt	r3, r6, r3
 800c056:	bfb4      	ite	lt
 800c058:	18d2      	addlt	r2, r2, r3
 800c05a:	1b9e      	subge	r6, r3, r6
 800c05c:	9b04      	ldr	r3, [sp, #16]
 800c05e:	bfbc      	itt	lt
 800c060:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c062:	2600      	movlt	r6, #0
 800c064:	2b00      	cmp	r3, #0
 800c066:	bfb7      	itett	lt
 800c068:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c06c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c070:	1a9d      	sublt	r5, r3, r2
 800c072:	2300      	movlt	r3, #0
 800c074:	e741      	b.n	800befa <_dtoa_r+0x742>
 800c076:	9e08      	ldr	r6, [sp, #32]
 800c078:	9d05      	ldr	r5, [sp, #20]
 800c07a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c07c:	e748      	b.n	800bf10 <_dtoa_r+0x758>
 800c07e:	9a08      	ldr	r2, [sp, #32]
 800c080:	e770      	b.n	800bf64 <_dtoa_r+0x7ac>
 800c082:	9b07      	ldr	r3, [sp, #28]
 800c084:	2b01      	cmp	r3, #1
 800c086:	dc19      	bgt.n	800c0bc <_dtoa_r+0x904>
 800c088:	9b02      	ldr	r3, [sp, #8]
 800c08a:	b9bb      	cbnz	r3, 800c0bc <_dtoa_r+0x904>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c092:	b99b      	cbnz	r3, 800c0bc <_dtoa_r+0x904>
 800c094:	9b03      	ldr	r3, [sp, #12]
 800c096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c09a:	0d1b      	lsrs	r3, r3, #20
 800c09c:	051b      	lsls	r3, r3, #20
 800c09e:	b183      	cbz	r3, 800c0c2 <_dtoa_r+0x90a>
 800c0a0:	9b05      	ldr	r3, [sp, #20]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	9305      	str	r3, [sp, #20]
 800c0a6:	9b06      	ldr	r3, [sp, #24]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	9306      	str	r3, [sp, #24]
 800c0ac:	f04f 0801 	mov.w	r8, #1
 800c0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f47f af6f 	bne.w	800bf96 <_dtoa_r+0x7de>
 800c0b8:	2001      	movs	r0, #1
 800c0ba:	e774      	b.n	800bfa6 <_dtoa_r+0x7ee>
 800c0bc:	f04f 0800 	mov.w	r8, #0
 800c0c0:	e7f6      	b.n	800c0b0 <_dtoa_r+0x8f8>
 800c0c2:	4698      	mov	r8, r3
 800c0c4:	e7f4      	b.n	800c0b0 <_dtoa_r+0x8f8>
 800c0c6:	d082      	beq.n	800bfce <_dtoa_r+0x816>
 800c0c8:	9a05      	ldr	r2, [sp, #20]
 800c0ca:	331c      	adds	r3, #28
 800c0cc:	441a      	add	r2, r3
 800c0ce:	9205      	str	r2, [sp, #20]
 800c0d0:	9a06      	ldr	r2, [sp, #24]
 800c0d2:	441a      	add	r2, r3
 800c0d4:	441d      	add	r5, r3
 800c0d6:	9206      	str	r2, [sp, #24]
 800c0d8:	e779      	b.n	800bfce <_dtoa_r+0x816>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	e7f4      	b.n	800c0c8 <_dtoa_r+0x910>
 800c0de:	9b04      	ldr	r3, [sp, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	dc37      	bgt.n	800c154 <_dtoa_r+0x99c>
 800c0e4:	9b07      	ldr	r3, [sp, #28]
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	dd34      	ble.n	800c154 <_dtoa_r+0x99c>
 800c0ea:	9b04      	ldr	r3, [sp, #16]
 800c0ec:	9301      	str	r3, [sp, #4]
 800c0ee:	9b01      	ldr	r3, [sp, #4]
 800c0f0:	b963      	cbnz	r3, 800c10c <_dtoa_r+0x954>
 800c0f2:	4631      	mov	r1, r6
 800c0f4:	2205      	movs	r2, #5
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f000 f9fe 	bl	800c4f8 <__multadd>
 800c0fc:	4601      	mov	r1, r0
 800c0fe:	4606      	mov	r6, r0
 800c100:	4650      	mov	r0, sl
 800c102:	f000 fc5d 	bl	800c9c0 <__mcmp>
 800c106:	2800      	cmp	r0, #0
 800c108:	f73f adbb 	bgt.w	800bc82 <_dtoa_r+0x4ca>
 800c10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c10e:	9d00      	ldr	r5, [sp, #0]
 800c110:	ea6f 0b03 	mvn.w	fp, r3
 800c114:	f04f 0800 	mov.w	r8, #0
 800c118:	4631      	mov	r1, r6
 800c11a:	4620      	mov	r0, r4
 800c11c:	f000 f9ca 	bl	800c4b4 <_Bfree>
 800c120:	2f00      	cmp	r7, #0
 800c122:	f43f aeab 	beq.w	800be7c <_dtoa_r+0x6c4>
 800c126:	f1b8 0f00 	cmp.w	r8, #0
 800c12a:	d005      	beq.n	800c138 <_dtoa_r+0x980>
 800c12c:	45b8      	cmp	r8, r7
 800c12e:	d003      	beq.n	800c138 <_dtoa_r+0x980>
 800c130:	4641      	mov	r1, r8
 800c132:	4620      	mov	r0, r4
 800c134:	f000 f9be 	bl	800c4b4 <_Bfree>
 800c138:	4639      	mov	r1, r7
 800c13a:	4620      	mov	r0, r4
 800c13c:	f000 f9ba 	bl	800c4b4 <_Bfree>
 800c140:	e69c      	b.n	800be7c <_dtoa_r+0x6c4>
 800c142:	2600      	movs	r6, #0
 800c144:	4637      	mov	r7, r6
 800c146:	e7e1      	b.n	800c10c <_dtoa_r+0x954>
 800c148:	46bb      	mov	fp, r7
 800c14a:	4637      	mov	r7, r6
 800c14c:	e599      	b.n	800bc82 <_dtoa_r+0x4ca>
 800c14e:	bf00      	nop
 800c150:	40240000 	.word	0x40240000
 800c154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 80c8 	beq.w	800c2ec <_dtoa_r+0xb34>
 800c15c:	9b04      	ldr	r3, [sp, #16]
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	2d00      	cmp	r5, #0
 800c162:	dd05      	ble.n	800c170 <_dtoa_r+0x9b8>
 800c164:	4639      	mov	r1, r7
 800c166:	462a      	mov	r2, r5
 800c168:	4620      	mov	r0, r4
 800c16a:	f000 fbbd 	bl	800c8e8 <__lshift>
 800c16e:	4607      	mov	r7, r0
 800c170:	f1b8 0f00 	cmp.w	r8, #0
 800c174:	d05b      	beq.n	800c22e <_dtoa_r+0xa76>
 800c176:	6879      	ldr	r1, [r7, #4]
 800c178:	4620      	mov	r0, r4
 800c17a:	f000 f95b 	bl	800c434 <_Balloc>
 800c17e:	4605      	mov	r5, r0
 800c180:	b928      	cbnz	r0, 800c18e <_dtoa_r+0x9d6>
 800c182:	4b83      	ldr	r3, [pc, #524]	; (800c390 <_dtoa_r+0xbd8>)
 800c184:	4602      	mov	r2, r0
 800c186:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c18a:	f7ff bb2e 	b.w	800b7ea <_dtoa_r+0x32>
 800c18e:	693a      	ldr	r2, [r7, #16]
 800c190:	3202      	adds	r2, #2
 800c192:	0092      	lsls	r2, r2, #2
 800c194:	f107 010c 	add.w	r1, r7, #12
 800c198:	300c      	adds	r0, #12
 800c19a:	f7ff fa70 	bl	800b67e <memcpy>
 800c19e:	2201      	movs	r2, #1
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f000 fba0 	bl	800c8e8 <__lshift>
 800c1a8:	9b00      	ldr	r3, [sp, #0]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	9304      	str	r3, [sp, #16]
 800c1ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	9308      	str	r3, [sp, #32]
 800c1b6:	9b02      	ldr	r3, [sp, #8]
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	46b8      	mov	r8, r7
 800c1be:	9306      	str	r3, [sp, #24]
 800c1c0:	4607      	mov	r7, r0
 800c1c2:	9b04      	ldr	r3, [sp, #16]
 800c1c4:	4631      	mov	r1, r6
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	4650      	mov	r0, sl
 800c1ca:	9301      	str	r3, [sp, #4]
 800c1cc:	f7ff fa6c 	bl	800b6a8 <quorem>
 800c1d0:	4641      	mov	r1, r8
 800c1d2:	9002      	str	r0, [sp, #8]
 800c1d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c1d8:	4650      	mov	r0, sl
 800c1da:	f000 fbf1 	bl	800c9c0 <__mcmp>
 800c1de:	463a      	mov	r2, r7
 800c1e0:	9005      	str	r0, [sp, #20]
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f000 fc07 	bl	800c9f8 <__mdiff>
 800c1ea:	68c2      	ldr	r2, [r0, #12]
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	bb02      	cbnz	r2, 800c232 <_dtoa_r+0xa7a>
 800c1f0:	4601      	mov	r1, r0
 800c1f2:	4650      	mov	r0, sl
 800c1f4:	f000 fbe4 	bl	800c9c0 <__mcmp>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	4629      	mov	r1, r5
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	9209      	str	r2, [sp, #36]	; 0x24
 800c200:	f000 f958 	bl	800c4b4 <_Bfree>
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c208:	9d04      	ldr	r5, [sp, #16]
 800c20a:	ea43 0102 	orr.w	r1, r3, r2
 800c20e:	9b06      	ldr	r3, [sp, #24]
 800c210:	4319      	orrs	r1, r3
 800c212:	d110      	bne.n	800c236 <_dtoa_r+0xa7e>
 800c214:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c218:	d029      	beq.n	800c26e <_dtoa_r+0xab6>
 800c21a:	9b05      	ldr	r3, [sp, #20]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	dd02      	ble.n	800c226 <_dtoa_r+0xa6e>
 800c220:	9b02      	ldr	r3, [sp, #8]
 800c222:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	f883 9000 	strb.w	r9, [r3]
 800c22c:	e774      	b.n	800c118 <_dtoa_r+0x960>
 800c22e:	4638      	mov	r0, r7
 800c230:	e7ba      	b.n	800c1a8 <_dtoa_r+0x9f0>
 800c232:	2201      	movs	r2, #1
 800c234:	e7e1      	b.n	800c1fa <_dtoa_r+0xa42>
 800c236:	9b05      	ldr	r3, [sp, #20]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	db04      	blt.n	800c246 <_dtoa_r+0xa8e>
 800c23c:	9907      	ldr	r1, [sp, #28]
 800c23e:	430b      	orrs	r3, r1
 800c240:	9906      	ldr	r1, [sp, #24]
 800c242:	430b      	orrs	r3, r1
 800c244:	d120      	bne.n	800c288 <_dtoa_r+0xad0>
 800c246:	2a00      	cmp	r2, #0
 800c248:	dded      	ble.n	800c226 <_dtoa_r+0xa6e>
 800c24a:	4651      	mov	r1, sl
 800c24c:	2201      	movs	r2, #1
 800c24e:	4620      	mov	r0, r4
 800c250:	f000 fb4a 	bl	800c8e8 <__lshift>
 800c254:	4631      	mov	r1, r6
 800c256:	4682      	mov	sl, r0
 800c258:	f000 fbb2 	bl	800c9c0 <__mcmp>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	dc03      	bgt.n	800c268 <_dtoa_r+0xab0>
 800c260:	d1e1      	bne.n	800c226 <_dtoa_r+0xa6e>
 800c262:	f019 0f01 	tst.w	r9, #1
 800c266:	d0de      	beq.n	800c226 <_dtoa_r+0xa6e>
 800c268:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c26c:	d1d8      	bne.n	800c220 <_dtoa_r+0xa68>
 800c26e:	9a01      	ldr	r2, [sp, #4]
 800c270:	2339      	movs	r3, #57	; 0x39
 800c272:	7013      	strb	r3, [r2, #0]
 800c274:	462b      	mov	r3, r5
 800c276:	461d      	mov	r5, r3
 800c278:	3b01      	subs	r3, #1
 800c27a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c27e:	2a39      	cmp	r2, #57	; 0x39
 800c280:	d06c      	beq.n	800c35c <_dtoa_r+0xba4>
 800c282:	3201      	adds	r2, #1
 800c284:	701a      	strb	r2, [r3, #0]
 800c286:	e747      	b.n	800c118 <_dtoa_r+0x960>
 800c288:	2a00      	cmp	r2, #0
 800c28a:	dd07      	ble.n	800c29c <_dtoa_r+0xae4>
 800c28c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c290:	d0ed      	beq.n	800c26e <_dtoa_r+0xab6>
 800c292:	9a01      	ldr	r2, [sp, #4]
 800c294:	f109 0301 	add.w	r3, r9, #1
 800c298:	7013      	strb	r3, [r2, #0]
 800c29a:	e73d      	b.n	800c118 <_dtoa_r+0x960>
 800c29c:	9b04      	ldr	r3, [sp, #16]
 800c29e:	9a08      	ldr	r2, [sp, #32]
 800c2a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d043      	beq.n	800c330 <_dtoa_r+0xb78>
 800c2a8:	4651      	mov	r1, sl
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	220a      	movs	r2, #10
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f000 f922 	bl	800c4f8 <__multadd>
 800c2b4:	45b8      	cmp	r8, r7
 800c2b6:	4682      	mov	sl, r0
 800c2b8:	f04f 0300 	mov.w	r3, #0
 800c2bc:	f04f 020a 	mov.w	r2, #10
 800c2c0:	4641      	mov	r1, r8
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	d107      	bne.n	800c2d6 <_dtoa_r+0xb1e>
 800c2c6:	f000 f917 	bl	800c4f8 <__multadd>
 800c2ca:	4680      	mov	r8, r0
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	9b04      	ldr	r3, [sp, #16]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	9304      	str	r3, [sp, #16]
 800c2d4:	e775      	b.n	800c1c2 <_dtoa_r+0xa0a>
 800c2d6:	f000 f90f 	bl	800c4f8 <__multadd>
 800c2da:	4639      	mov	r1, r7
 800c2dc:	4680      	mov	r8, r0
 800c2de:	2300      	movs	r3, #0
 800c2e0:	220a      	movs	r2, #10
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f000 f908 	bl	800c4f8 <__multadd>
 800c2e8:	4607      	mov	r7, r0
 800c2ea:	e7f0      	b.n	800c2ce <_dtoa_r+0xb16>
 800c2ec:	9b04      	ldr	r3, [sp, #16]
 800c2ee:	9301      	str	r3, [sp, #4]
 800c2f0:	9d00      	ldr	r5, [sp, #0]
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4650      	mov	r0, sl
 800c2f6:	f7ff f9d7 	bl	800b6a8 <quorem>
 800c2fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c2fe:	9b00      	ldr	r3, [sp, #0]
 800c300:	f805 9b01 	strb.w	r9, [r5], #1
 800c304:	1aea      	subs	r2, r5, r3
 800c306:	9b01      	ldr	r3, [sp, #4]
 800c308:	4293      	cmp	r3, r2
 800c30a:	dd07      	ble.n	800c31c <_dtoa_r+0xb64>
 800c30c:	4651      	mov	r1, sl
 800c30e:	2300      	movs	r3, #0
 800c310:	220a      	movs	r2, #10
 800c312:	4620      	mov	r0, r4
 800c314:	f000 f8f0 	bl	800c4f8 <__multadd>
 800c318:	4682      	mov	sl, r0
 800c31a:	e7ea      	b.n	800c2f2 <_dtoa_r+0xb3a>
 800c31c:	9b01      	ldr	r3, [sp, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	bfc8      	it	gt
 800c322:	461d      	movgt	r5, r3
 800c324:	9b00      	ldr	r3, [sp, #0]
 800c326:	bfd8      	it	le
 800c328:	2501      	movle	r5, #1
 800c32a:	441d      	add	r5, r3
 800c32c:	f04f 0800 	mov.w	r8, #0
 800c330:	4651      	mov	r1, sl
 800c332:	2201      	movs	r2, #1
 800c334:	4620      	mov	r0, r4
 800c336:	f000 fad7 	bl	800c8e8 <__lshift>
 800c33a:	4631      	mov	r1, r6
 800c33c:	4682      	mov	sl, r0
 800c33e:	f000 fb3f 	bl	800c9c0 <__mcmp>
 800c342:	2800      	cmp	r0, #0
 800c344:	dc96      	bgt.n	800c274 <_dtoa_r+0xabc>
 800c346:	d102      	bne.n	800c34e <_dtoa_r+0xb96>
 800c348:	f019 0f01 	tst.w	r9, #1
 800c34c:	d192      	bne.n	800c274 <_dtoa_r+0xabc>
 800c34e:	462b      	mov	r3, r5
 800c350:	461d      	mov	r5, r3
 800c352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c356:	2a30      	cmp	r2, #48	; 0x30
 800c358:	d0fa      	beq.n	800c350 <_dtoa_r+0xb98>
 800c35a:	e6dd      	b.n	800c118 <_dtoa_r+0x960>
 800c35c:	9a00      	ldr	r2, [sp, #0]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d189      	bne.n	800c276 <_dtoa_r+0xabe>
 800c362:	f10b 0b01 	add.w	fp, fp, #1
 800c366:	2331      	movs	r3, #49	; 0x31
 800c368:	e796      	b.n	800c298 <_dtoa_r+0xae0>
 800c36a:	4b0a      	ldr	r3, [pc, #40]	; (800c394 <_dtoa_r+0xbdc>)
 800c36c:	f7ff ba99 	b.w	800b8a2 <_dtoa_r+0xea>
 800c370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c372:	2b00      	cmp	r3, #0
 800c374:	f47f aa6d 	bne.w	800b852 <_dtoa_r+0x9a>
 800c378:	4b07      	ldr	r3, [pc, #28]	; (800c398 <_dtoa_r+0xbe0>)
 800c37a:	f7ff ba92 	b.w	800b8a2 <_dtoa_r+0xea>
 800c37e:	9b01      	ldr	r3, [sp, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	dcb5      	bgt.n	800c2f0 <_dtoa_r+0xb38>
 800c384:	9b07      	ldr	r3, [sp, #28]
 800c386:	2b02      	cmp	r3, #2
 800c388:	f73f aeb1 	bgt.w	800c0ee <_dtoa_r+0x936>
 800c38c:	e7b0      	b.n	800c2f0 <_dtoa_r+0xb38>
 800c38e:	bf00      	nop
 800c390:	08011f8d 	.word	0x08011f8d
 800c394:	08011ee8 	.word	0x08011ee8
 800c398:	08011f11 	.word	0x08011f11

0800c39c <_free_r>:
 800c39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c39e:	2900      	cmp	r1, #0
 800c3a0:	d044      	beq.n	800c42c <_free_r+0x90>
 800c3a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3a6:	9001      	str	r0, [sp, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f1a1 0404 	sub.w	r4, r1, #4
 800c3ae:	bfb8      	it	lt
 800c3b0:	18e4      	addlt	r4, r4, r3
 800c3b2:	f7fe f92d 	bl	800a610 <__malloc_lock>
 800c3b6:	4a1e      	ldr	r2, [pc, #120]	; (800c430 <_free_r+0x94>)
 800c3b8:	9801      	ldr	r0, [sp, #4]
 800c3ba:	6813      	ldr	r3, [r2, #0]
 800c3bc:	b933      	cbnz	r3, 800c3cc <_free_r+0x30>
 800c3be:	6063      	str	r3, [r4, #4]
 800c3c0:	6014      	str	r4, [r2, #0]
 800c3c2:	b003      	add	sp, #12
 800c3c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3c8:	f7fe b928 	b.w	800a61c <__malloc_unlock>
 800c3cc:	42a3      	cmp	r3, r4
 800c3ce:	d908      	bls.n	800c3e2 <_free_r+0x46>
 800c3d0:	6825      	ldr	r5, [r4, #0]
 800c3d2:	1961      	adds	r1, r4, r5
 800c3d4:	428b      	cmp	r3, r1
 800c3d6:	bf01      	itttt	eq
 800c3d8:	6819      	ldreq	r1, [r3, #0]
 800c3da:	685b      	ldreq	r3, [r3, #4]
 800c3dc:	1949      	addeq	r1, r1, r5
 800c3de:	6021      	streq	r1, [r4, #0]
 800c3e0:	e7ed      	b.n	800c3be <_free_r+0x22>
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	b10b      	cbz	r3, 800c3ec <_free_r+0x50>
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	d9fa      	bls.n	800c3e2 <_free_r+0x46>
 800c3ec:	6811      	ldr	r1, [r2, #0]
 800c3ee:	1855      	adds	r5, r2, r1
 800c3f0:	42a5      	cmp	r5, r4
 800c3f2:	d10b      	bne.n	800c40c <_free_r+0x70>
 800c3f4:	6824      	ldr	r4, [r4, #0]
 800c3f6:	4421      	add	r1, r4
 800c3f8:	1854      	adds	r4, r2, r1
 800c3fa:	42a3      	cmp	r3, r4
 800c3fc:	6011      	str	r1, [r2, #0]
 800c3fe:	d1e0      	bne.n	800c3c2 <_free_r+0x26>
 800c400:	681c      	ldr	r4, [r3, #0]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	6053      	str	r3, [r2, #4]
 800c406:	440c      	add	r4, r1
 800c408:	6014      	str	r4, [r2, #0]
 800c40a:	e7da      	b.n	800c3c2 <_free_r+0x26>
 800c40c:	d902      	bls.n	800c414 <_free_r+0x78>
 800c40e:	230c      	movs	r3, #12
 800c410:	6003      	str	r3, [r0, #0]
 800c412:	e7d6      	b.n	800c3c2 <_free_r+0x26>
 800c414:	6825      	ldr	r5, [r4, #0]
 800c416:	1961      	adds	r1, r4, r5
 800c418:	428b      	cmp	r3, r1
 800c41a:	bf04      	itt	eq
 800c41c:	6819      	ldreq	r1, [r3, #0]
 800c41e:	685b      	ldreq	r3, [r3, #4]
 800c420:	6063      	str	r3, [r4, #4]
 800c422:	bf04      	itt	eq
 800c424:	1949      	addeq	r1, r1, r5
 800c426:	6021      	streq	r1, [r4, #0]
 800c428:	6054      	str	r4, [r2, #4]
 800c42a:	e7ca      	b.n	800c3c2 <_free_r+0x26>
 800c42c:	b003      	add	sp, #12
 800c42e:	bd30      	pop	{r4, r5, pc}
 800c430:	200009f8 	.word	0x200009f8

0800c434 <_Balloc>:
 800c434:	b570      	push	{r4, r5, r6, lr}
 800c436:	69c6      	ldr	r6, [r0, #28]
 800c438:	4604      	mov	r4, r0
 800c43a:	460d      	mov	r5, r1
 800c43c:	b976      	cbnz	r6, 800c45c <_Balloc+0x28>
 800c43e:	2010      	movs	r0, #16
 800c440:	f7fe f836 	bl	800a4b0 <malloc>
 800c444:	4602      	mov	r2, r0
 800c446:	61e0      	str	r0, [r4, #28]
 800c448:	b920      	cbnz	r0, 800c454 <_Balloc+0x20>
 800c44a:	4b18      	ldr	r3, [pc, #96]	; (800c4ac <_Balloc+0x78>)
 800c44c:	4818      	ldr	r0, [pc, #96]	; (800c4b0 <_Balloc+0x7c>)
 800c44e:	216b      	movs	r1, #107	; 0x6b
 800c450:	f001 fd6e 	bl	800df30 <__assert_func>
 800c454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c458:	6006      	str	r6, [r0, #0]
 800c45a:	60c6      	str	r6, [r0, #12]
 800c45c:	69e6      	ldr	r6, [r4, #28]
 800c45e:	68f3      	ldr	r3, [r6, #12]
 800c460:	b183      	cbz	r3, 800c484 <_Balloc+0x50>
 800c462:	69e3      	ldr	r3, [r4, #28]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c46a:	b9b8      	cbnz	r0, 800c49c <_Balloc+0x68>
 800c46c:	2101      	movs	r1, #1
 800c46e:	fa01 f605 	lsl.w	r6, r1, r5
 800c472:	1d72      	adds	r2, r6, #5
 800c474:	0092      	lsls	r2, r2, #2
 800c476:	4620      	mov	r0, r4
 800c478:	f001 fd78 	bl	800df6c <_calloc_r>
 800c47c:	b160      	cbz	r0, 800c498 <_Balloc+0x64>
 800c47e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c482:	e00e      	b.n	800c4a2 <_Balloc+0x6e>
 800c484:	2221      	movs	r2, #33	; 0x21
 800c486:	2104      	movs	r1, #4
 800c488:	4620      	mov	r0, r4
 800c48a:	f001 fd6f 	bl	800df6c <_calloc_r>
 800c48e:	69e3      	ldr	r3, [r4, #28]
 800c490:	60f0      	str	r0, [r6, #12]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1e4      	bne.n	800c462 <_Balloc+0x2e>
 800c498:	2000      	movs	r0, #0
 800c49a:	bd70      	pop	{r4, r5, r6, pc}
 800c49c:	6802      	ldr	r2, [r0, #0]
 800c49e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4a8:	e7f7      	b.n	800c49a <_Balloc+0x66>
 800c4aa:	bf00      	nop
 800c4ac:	08011f1e 	.word	0x08011f1e
 800c4b0:	08011f9e 	.word	0x08011f9e

0800c4b4 <_Bfree>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	69c6      	ldr	r6, [r0, #28]
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	b976      	cbnz	r6, 800c4dc <_Bfree+0x28>
 800c4be:	2010      	movs	r0, #16
 800c4c0:	f7fd fff6 	bl	800a4b0 <malloc>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	61e8      	str	r0, [r5, #28]
 800c4c8:	b920      	cbnz	r0, 800c4d4 <_Bfree+0x20>
 800c4ca:	4b09      	ldr	r3, [pc, #36]	; (800c4f0 <_Bfree+0x3c>)
 800c4cc:	4809      	ldr	r0, [pc, #36]	; (800c4f4 <_Bfree+0x40>)
 800c4ce:	218f      	movs	r1, #143	; 0x8f
 800c4d0:	f001 fd2e 	bl	800df30 <__assert_func>
 800c4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4d8:	6006      	str	r6, [r0, #0]
 800c4da:	60c6      	str	r6, [r0, #12]
 800c4dc:	b13c      	cbz	r4, 800c4ee <_Bfree+0x3a>
 800c4de:	69eb      	ldr	r3, [r5, #28]
 800c4e0:	6862      	ldr	r2, [r4, #4]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4e8:	6021      	str	r1, [r4, #0]
 800c4ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}
 800c4f0:	08011f1e 	.word	0x08011f1e
 800c4f4:	08011f9e 	.word	0x08011f9e

0800c4f8 <__multadd>:
 800c4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4fc:	690d      	ldr	r5, [r1, #16]
 800c4fe:	4607      	mov	r7, r0
 800c500:	460c      	mov	r4, r1
 800c502:	461e      	mov	r6, r3
 800c504:	f101 0c14 	add.w	ip, r1, #20
 800c508:	2000      	movs	r0, #0
 800c50a:	f8dc 3000 	ldr.w	r3, [ip]
 800c50e:	b299      	uxth	r1, r3
 800c510:	fb02 6101 	mla	r1, r2, r1, r6
 800c514:	0c1e      	lsrs	r6, r3, #16
 800c516:	0c0b      	lsrs	r3, r1, #16
 800c518:	fb02 3306 	mla	r3, r2, r6, r3
 800c51c:	b289      	uxth	r1, r1
 800c51e:	3001      	adds	r0, #1
 800c520:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c524:	4285      	cmp	r5, r0
 800c526:	f84c 1b04 	str.w	r1, [ip], #4
 800c52a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c52e:	dcec      	bgt.n	800c50a <__multadd+0x12>
 800c530:	b30e      	cbz	r6, 800c576 <__multadd+0x7e>
 800c532:	68a3      	ldr	r3, [r4, #8]
 800c534:	42ab      	cmp	r3, r5
 800c536:	dc19      	bgt.n	800c56c <__multadd+0x74>
 800c538:	6861      	ldr	r1, [r4, #4]
 800c53a:	4638      	mov	r0, r7
 800c53c:	3101      	adds	r1, #1
 800c53e:	f7ff ff79 	bl	800c434 <_Balloc>
 800c542:	4680      	mov	r8, r0
 800c544:	b928      	cbnz	r0, 800c552 <__multadd+0x5a>
 800c546:	4602      	mov	r2, r0
 800c548:	4b0c      	ldr	r3, [pc, #48]	; (800c57c <__multadd+0x84>)
 800c54a:	480d      	ldr	r0, [pc, #52]	; (800c580 <__multadd+0x88>)
 800c54c:	21ba      	movs	r1, #186	; 0xba
 800c54e:	f001 fcef 	bl	800df30 <__assert_func>
 800c552:	6922      	ldr	r2, [r4, #16]
 800c554:	3202      	adds	r2, #2
 800c556:	f104 010c 	add.w	r1, r4, #12
 800c55a:	0092      	lsls	r2, r2, #2
 800c55c:	300c      	adds	r0, #12
 800c55e:	f7ff f88e 	bl	800b67e <memcpy>
 800c562:	4621      	mov	r1, r4
 800c564:	4638      	mov	r0, r7
 800c566:	f7ff ffa5 	bl	800c4b4 <_Bfree>
 800c56a:	4644      	mov	r4, r8
 800c56c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c570:	3501      	adds	r5, #1
 800c572:	615e      	str	r6, [r3, #20]
 800c574:	6125      	str	r5, [r4, #16]
 800c576:	4620      	mov	r0, r4
 800c578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c57c:	08011f8d 	.word	0x08011f8d
 800c580:	08011f9e 	.word	0x08011f9e

0800c584 <__s2b>:
 800c584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c588:	460c      	mov	r4, r1
 800c58a:	4615      	mov	r5, r2
 800c58c:	461f      	mov	r7, r3
 800c58e:	2209      	movs	r2, #9
 800c590:	3308      	adds	r3, #8
 800c592:	4606      	mov	r6, r0
 800c594:	fb93 f3f2 	sdiv	r3, r3, r2
 800c598:	2100      	movs	r1, #0
 800c59a:	2201      	movs	r2, #1
 800c59c:	429a      	cmp	r2, r3
 800c59e:	db09      	blt.n	800c5b4 <__s2b+0x30>
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f7ff ff47 	bl	800c434 <_Balloc>
 800c5a6:	b940      	cbnz	r0, 800c5ba <__s2b+0x36>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	4b19      	ldr	r3, [pc, #100]	; (800c610 <__s2b+0x8c>)
 800c5ac:	4819      	ldr	r0, [pc, #100]	; (800c614 <__s2b+0x90>)
 800c5ae:	21d3      	movs	r1, #211	; 0xd3
 800c5b0:	f001 fcbe 	bl	800df30 <__assert_func>
 800c5b4:	0052      	lsls	r2, r2, #1
 800c5b6:	3101      	adds	r1, #1
 800c5b8:	e7f0      	b.n	800c59c <__s2b+0x18>
 800c5ba:	9b08      	ldr	r3, [sp, #32]
 800c5bc:	6143      	str	r3, [r0, #20]
 800c5be:	2d09      	cmp	r5, #9
 800c5c0:	f04f 0301 	mov.w	r3, #1
 800c5c4:	6103      	str	r3, [r0, #16]
 800c5c6:	dd16      	ble.n	800c5f6 <__s2b+0x72>
 800c5c8:	f104 0909 	add.w	r9, r4, #9
 800c5cc:	46c8      	mov	r8, r9
 800c5ce:	442c      	add	r4, r5
 800c5d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c5d4:	4601      	mov	r1, r0
 800c5d6:	3b30      	subs	r3, #48	; 0x30
 800c5d8:	220a      	movs	r2, #10
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f7ff ff8c 	bl	800c4f8 <__multadd>
 800c5e0:	45a0      	cmp	r8, r4
 800c5e2:	d1f5      	bne.n	800c5d0 <__s2b+0x4c>
 800c5e4:	f1a5 0408 	sub.w	r4, r5, #8
 800c5e8:	444c      	add	r4, r9
 800c5ea:	1b2d      	subs	r5, r5, r4
 800c5ec:	1963      	adds	r3, r4, r5
 800c5ee:	42bb      	cmp	r3, r7
 800c5f0:	db04      	blt.n	800c5fc <__s2b+0x78>
 800c5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5f6:	340a      	adds	r4, #10
 800c5f8:	2509      	movs	r5, #9
 800c5fa:	e7f6      	b.n	800c5ea <__s2b+0x66>
 800c5fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c600:	4601      	mov	r1, r0
 800c602:	3b30      	subs	r3, #48	; 0x30
 800c604:	220a      	movs	r2, #10
 800c606:	4630      	mov	r0, r6
 800c608:	f7ff ff76 	bl	800c4f8 <__multadd>
 800c60c:	e7ee      	b.n	800c5ec <__s2b+0x68>
 800c60e:	bf00      	nop
 800c610:	08011f8d 	.word	0x08011f8d
 800c614:	08011f9e 	.word	0x08011f9e

0800c618 <__hi0bits>:
 800c618:	0c03      	lsrs	r3, r0, #16
 800c61a:	041b      	lsls	r3, r3, #16
 800c61c:	b9d3      	cbnz	r3, 800c654 <__hi0bits+0x3c>
 800c61e:	0400      	lsls	r0, r0, #16
 800c620:	2310      	movs	r3, #16
 800c622:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c626:	bf04      	itt	eq
 800c628:	0200      	lsleq	r0, r0, #8
 800c62a:	3308      	addeq	r3, #8
 800c62c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c630:	bf04      	itt	eq
 800c632:	0100      	lsleq	r0, r0, #4
 800c634:	3304      	addeq	r3, #4
 800c636:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c63a:	bf04      	itt	eq
 800c63c:	0080      	lsleq	r0, r0, #2
 800c63e:	3302      	addeq	r3, #2
 800c640:	2800      	cmp	r0, #0
 800c642:	db05      	blt.n	800c650 <__hi0bits+0x38>
 800c644:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c648:	f103 0301 	add.w	r3, r3, #1
 800c64c:	bf08      	it	eq
 800c64e:	2320      	moveq	r3, #32
 800c650:	4618      	mov	r0, r3
 800c652:	4770      	bx	lr
 800c654:	2300      	movs	r3, #0
 800c656:	e7e4      	b.n	800c622 <__hi0bits+0xa>

0800c658 <__lo0bits>:
 800c658:	6803      	ldr	r3, [r0, #0]
 800c65a:	f013 0207 	ands.w	r2, r3, #7
 800c65e:	d00c      	beq.n	800c67a <__lo0bits+0x22>
 800c660:	07d9      	lsls	r1, r3, #31
 800c662:	d422      	bmi.n	800c6aa <__lo0bits+0x52>
 800c664:	079a      	lsls	r2, r3, #30
 800c666:	bf49      	itett	mi
 800c668:	085b      	lsrmi	r3, r3, #1
 800c66a:	089b      	lsrpl	r3, r3, #2
 800c66c:	6003      	strmi	r3, [r0, #0]
 800c66e:	2201      	movmi	r2, #1
 800c670:	bf5c      	itt	pl
 800c672:	6003      	strpl	r3, [r0, #0]
 800c674:	2202      	movpl	r2, #2
 800c676:	4610      	mov	r0, r2
 800c678:	4770      	bx	lr
 800c67a:	b299      	uxth	r1, r3
 800c67c:	b909      	cbnz	r1, 800c682 <__lo0bits+0x2a>
 800c67e:	0c1b      	lsrs	r3, r3, #16
 800c680:	2210      	movs	r2, #16
 800c682:	b2d9      	uxtb	r1, r3
 800c684:	b909      	cbnz	r1, 800c68a <__lo0bits+0x32>
 800c686:	3208      	adds	r2, #8
 800c688:	0a1b      	lsrs	r3, r3, #8
 800c68a:	0719      	lsls	r1, r3, #28
 800c68c:	bf04      	itt	eq
 800c68e:	091b      	lsreq	r3, r3, #4
 800c690:	3204      	addeq	r2, #4
 800c692:	0799      	lsls	r1, r3, #30
 800c694:	bf04      	itt	eq
 800c696:	089b      	lsreq	r3, r3, #2
 800c698:	3202      	addeq	r2, #2
 800c69a:	07d9      	lsls	r1, r3, #31
 800c69c:	d403      	bmi.n	800c6a6 <__lo0bits+0x4e>
 800c69e:	085b      	lsrs	r3, r3, #1
 800c6a0:	f102 0201 	add.w	r2, r2, #1
 800c6a4:	d003      	beq.n	800c6ae <__lo0bits+0x56>
 800c6a6:	6003      	str	r3, [r0, #0]
 800c6a8:	e7e5      	b.n	800c676 <__lo0bits+0x1e>
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	e7e3      	b.n	800c676 <__lo0bits+0x1e>
 800c6ae:	2220      	movs	r2, #32
 800c6b0:	e7e1      	b.n	800c676 <__lo0bits+0x1e>
	...

0800c6b4 <__i2b>:
 800c6b4:	b510      	push	{r4, lr}
 800c6b6:	460c      	mov	r4, r1
 800c6b8:	2101      	movs	r1, #1
 800c6ba:	f7ff febb 	bl	800c434 <_Balloc>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	b928      	cbnz	r0, 800c6ce <__i2b+0x1a>
 800c6c2:	4b05      	ldr	r3, [pc, #20]	; (800c6d8 <__i2b+0x24>)
 800c6c4:	4805      	ldr	r0, [pc, #20]	; (800c6dc <__i2b+0x28>)
 800c6c6:	f240 1145 	movw	r1, #325	; 0x145
 800c6ca:	f001 fc31 	bl	800df30 <__assert_func>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	6144      	str	r4, [r0, #20]
 800c6d2:	6103      	str	r3, [r0, #16]
 800c6d4:	bd10      	pop	{r4, pc}
 800c6d6:	bf00      	nop
 800c6d8:	08011f8d 	.word	0x08011f8d
 800c6dc:	08011f9e 	.word	0x08011f9e

0800c6e0 <__multiply>:
 800c6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e4:	4691      	mov	r9, r2
 800c6e6:	690a      	ldr	r2, [r1, #16]
 800c6e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	bfb8      	it	lt
 800c6f0:	460b      	movlt	r3, r1
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	bfbc      	itt	lt
 800c6f6:	464c      	movlt	r4, r9
 800c6f8:	4699      	movlt	r9, r3
 800c6fa:	6927      	ldr	r7, [r4, #16]
 800c6fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c700:	68a3      	ldr	r3, [r4, #8]
 800c702:	6861      	ldr	r1, [r4, #4]
 800c704:	eb07 060a 	add.w	r6, r7, sl
 800c708:	42b3      	cmp	r3, r6
 800c70a:	b085      	sub	sp, #20
 800c70c:	bfb8      	it	lt
 800c70e:	3101      	addlt	r1, #1
 800c710:	f7ff fe90 	bl	800c434 <_Balloc>
 800c714:	b930      	cbnz	r0, 800c724 <__multiply+0x44>
 800c716:	4602      	mov	r2, r0
 800c718:	4b44      	ldr	r3, [pc, #272]	; (800c82c <__multiply+0x14c>)
 800c71a:	4845      	ldr	r0, [pc, #276]	; (800c830 <__multiply+0x150>)
 800c71c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c720:	f001 fc06 	bl	800df30 <__assert_func>
 800c724:	f100 0514 	add.w	r5, r0, #20
 800c728:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c72c:	462b      	mov	r3, r5
 800c72e:	2200      	movs	r2, #0
 800c730:	4543      	cmp	r3, r8
 800c732:	d321      	bcc.n	800c778 <__multiply+0x98>
 800c734:	f104 0314 	add.w	r3, r4, #20
 800c738:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c73c:	f109 0314 	add.w	r3, r9, #20
 800c740:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c744:	9202      	str	r2, [sp, #8]
 800c746:	1b3a      	subs	r2, r7, r4
 800c748:	3a15      	subs	r2, #21
 800c74a:	f022 0203 	bic.w	r2, r2, #3
 800c74e:	3204      	adds	r2, #4
 800c750:	f104 0115 	add.w	r1, r4, #21
 800c754:	428f      	cmp	r7, r1
 800c756:	bf38      	it	cc
 800c758:	2204      	movcc	r2, #4
 800c75a:	9201      	str	r2, [sp, #4]
 800c75c:	9a02      	ldr	r2, [sp, #8]
 800c75e:	9303      	str	r3, [sp, #12]
 800c760:	429a      	cmp	r2, r3
 800c762:	d80c      	bhi.n	800c77e <__multiply+0x9e>
 800c764:	2e00      	cmp	r6, #0
 800c766:	dd03      	ble.n	800c770 <__multiply+0x90>
 800c768:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d05b      	beq.n	800c828 <__multiply+0x148>
 800c770:	6106      	str	r6, [r0, #16]
 800c772:	b005      	add	sp, #20
 800c774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c778:	f843 2b04 	str.w	r2, [r3], #4
 800c77c:	e7d8      	b.n	800c730 <__multiply+0x50>
 800c77e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c782:	f1ba 0f00 	cmp.w	sl, #0
 800c786:	d024      	beq.n	800c7d2 <__multiply+0xf2>
 800c788:	f104 0e14 	add.w	lr, r4, #20
 800c78c:	46a9      	mov	r9, r5
 800c78e:	f04f 0c00 	mov.w	ip, #0
 800c792:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c796:	f8d9 1000 	ldr.w	r1, [r9]
 800c79a:	fa1f fb82 	uxth.w	fp, r2
 800c79e:	b289      	uxth	r1, r1
 800c7a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7a8:	f8d9 2000 	ldr.w	r2, [r9]
 800c7ac:	4461      	add	r1, ip
 800c7ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7ba:	b289      	uxth	r1, r1
 800c7bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7c0:	4577      	cmp	r7, lr
 800c7c2:	f849 1b04 	str.w	r1, [r9], #4
 800c7c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7ca:	d8e2      	bhi.n	800c792 <__multiply+0xb2>
 800c7cc:	9a01      	ldr	r2, [sp, #4]
 800c7ce:	f845 c002 	str.w	ip, [r5, r2]
 800c7d2:	9a03      	ldr	r2, [sp, #12]
 800c7d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7d8:	3304      	adds	r3, #4
 800c7da:	f1b9 0f00 	cmp.w	r9, #0
 800c7de:	d021      	beq.n	800c824 <__multiply+0x144>
 800c7e0:	6829      	ldr	r1, [r5, #0]
 800c7e2:	f104 0c14 	add.w	ip, r4, #20
 800c7e6:	46ae      	mov	lr, r5
 800c7e8:	f04f 0a00 	mov.w	sl, #0
 800c7ec:	f8bc b000 	ldrh.w	fp, [ip]
 800c7f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7f4:	fb09 220b 	mla	r2, r9, fp, r2
 800c7f8:	4452      	add	r2, sl
 800c7fa:	b289      	uxth	r1, r1
 800c7fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c800:	f84e 1b04 	str.w	r1, [lr], #4
 800c804:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c808:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c80c:	f8be 1000 	ldrh.w	r1, [lr]
 800c810:	fb09 110a 	mla	r1, r9, sl, r1
 800c814:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c818:	4567      	cmp	r7, ip
 800c81a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c81e:	d8e5      	bhi.n	800c7ec <__multiply+0x10c>
 800c820:	9a01      	ldr	r2, [sp, #4]
 800c822:	50a9      	str	r1, [r5, r2]
 800c824:	3504      	adds	r5, #4
 800c826:	e799      	b.n	800c75c <__multiply+0x7c>
 800c828:	3e01      	subs	r6, #1
 800c82a:	e79b      	b.n	800c764 <__multiply+0x84>
 800c82c:	08011f8d 	.word	0x08011f8d
 800c830:	08011f9e 	.word	0x08011f9e

0800c834 <__pow5mult>:
 800c834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c838:	4615      	mov	r5, r2
 800c83a:	f012 0203 	ands.w	r2, r2, #3
 800c83e:	4606      	mov	r6, r0
 800c840:	460f      	mov	r7, r1
 800c842:	d007      	beq.n	800c854 <__pow5mult+0x20>
 800c844:	4c25      	ldr	r4, [pc, #148]	; (800c8dc <__pow5mult+0xa8>)
 800c846:	3a01      	subs	r2, #1
 800c848:	2300      	movs	r3, #0
 800c84a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c84e:	f7ff fe53 	bl	800c4f8 <__multadd>
 800c852:	4607      	mov	r7, r0
 800c854:	10ad      	asrs	r5, r5, #2
 800c856:	d03d      	beq.n	800c8d4 <__pow5mult+0xa0>
 800c858:	69f4      	ldr	r4, [r6, #28]
 800c85a:	b97c      	cbnz	r4, 800c87c <__pow5mult+0x48>
 800c85c:	2010      	movs	r0, #16
 800c85e:	f7fd fe27 	bl	800a4b0 <malloc>
 800c862:	4602      	mov	r2, r0
 800c864:	61f0      	str	r0, [r6, #28]
 800c866:	b928      	cbnz	r0, 800c874 <__pow5mult+0x40>
 800c868:	4b1d      	ldr	r3, [pc, #116]	; (800c8e0 <__pow5mult+0xac>)
 800c86a:	481e      	ldr	r0, [pc, #120]	; (800c8e4 <__pow5mult+0xb0>)
 800c86c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c870:	f001 fb5e 	bl	800df30 <__assert_func>
 800c874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c878:	6004      	str	r4, [r0, #0]
 800c87a:	60c4      	str	r4, [r0, #12]
 800c87c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c884:	b94c      	cbnz	r4, 800c89a <__pow5mult+0x66>
 800c886:	f240 2171 	movw	r1, #625	; 0x271
 800c88a:	4630      	mov	r0, r6
 800c88c:	f7ff ff12 	bl	800c6b4 <__i2b>
 800c890:	2300      	movs	r3, #0
 800c892:	f8c8 0008 	str.w	r0, [r8, #8]
 800c896:	4604      	mov	r4, r0
 800c898:	6003      	str	r3, [r0, #0]
 800c89a:	f04f 0900 	mov.w	r9, #0
 800c89e:	07eb      	lsls	r3, r5, #31
 800c8a0:	d50a      	bpl.n	800c8b8 <__pow5mult+0x84>
 800c8a2:	4639      	mov	r1, r7
 800c8a4:	4622      	mov	r2, r4
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	f7ff ff1a 	bl	800c6e0 <__multiply>
 800c8ac:	4639      	mov	r1, r7
 800c8ae:	4680      	mov	r8, r0
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	f7ff fdff 	bl	800c4b4 <_Bfree>
 800c8b6:	4647      	mov	r7, r8
 800c8b8:	106d      	asrs	r5, r5, #1
 800c8ba:	d00b      	beq.n	800c8d4 <__pow5mult+0xa0>
 800c8bc:	6820      	ldr	r0, [r4, #0]
 800c8be:	b938      	cbnz	r0, 800c8d0 <__pow5mult+0x9c>
 800c8c0:	4622      	mov	r2, r4
 800c8c2:	4621      	mov	r1, r4
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7ff ff0b 	bl	800c6e0 <__multiply>
 800c8ca:	6020      	str	r0, [r4, #0]
 800c8cc:	f8c0 9000 	str.w	r9, [r0]
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	e7e4      	b.n	800c89e <__pow5mult+0x6a>
 800c8d4:	4638      	mov	r0, r7
 800c8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8da:	bf00      	nop
 800c8dc:	080120e8 	.word	0x080120e8
 800c8e0:	08011f1e 	.word	0x08011f1e
 800c8e4:	08011f9e 	.word	0x08011f9e

0800c8e8 <__lshift>:
 800c8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8ec:	460c      	mov	r4, r1
 800c8ee:	6849      	ldr	r1, [r1, #4]
 800c8f0:	6923      	ldr	r3, [r4, #16]
 800c8f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8f6:	68a3      	ldr	r3, [r4, #8]
 800c8f8:	4607      	mov	r7, r0
 800c8fa:	4691      	mov	r9, r2
 800c8fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c900:	f108 0601 	add.w	r6, r8, #1
 800c904:	42b3      	cmp	r3, r6
 800c906:	db0b      	blt.n	800c920 <__lshift+0x38>
 800c908:	4638      	mov	r0, r7
 800c90a:	f7ff fd93 	bl	800c434 <_Balloc>
 800c90e:	4605      	mov	r5, r0
 800c910:	b948      	cbnz	r0, 800c926 <__lshift+0x3e>
 800c912:	4602      	mov	r2, r0
 800c914:	4b28      	ldr	r3, [pc, #160]	; (800c9b8 <__lshift+0xd0>)
 800c916:	4829      	ldr	r0, [pc, #164]	; (800c9bc <__lshift+0xd4>)
 800c918:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c91c:	f001 fb08 	bl	800df30 <__assert_func>
 800c920:	3101      	adds	r1, #1
 800c922:	005b      	lsls	r3, r3, #1
 800c924:	e7ee      	b.n	800c904 <__lshift+0x1c>
 800c926:	2300      	movs	r3, #0
 800c928:	f100 0114 	add.w	r1, r0, #20
 800c92c:	f100 0210 	add.w	r2, r0, #16
 800c930:	4618      	mov	r0, r3
 800c932:	4553      	cmp	r3, sl
 800c934:	db33      	blt.n	800c99e <__lshift+0xb6>
 800c936:	6920      	ldr	r0, [r4, #16]
 800c938:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c93c:	f104 0314 	add.w	r3, r4, #20
 800c940:	f019 091f 	ands.w	r9, r9, #31
 800c944:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c948:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c94c:	d02b      	beq.n	800c9a6 <__lshift+0xbe>
 800c94e:	f1c9 0e20 	rsb	lr, r9, #32
 800c952:	468a      	mov	sl, r1
 800c954:	2200      	movs	r2, #0
 800c956:	6818      	ldr	r0, [r3, #0]
 800c958:	fa00 f009 	lsl.w	r0, r0, r9
 800c95c:	4310      	orrs	r0, r2
 800c95e:	f84a 0b04 	str.w	r0, [sl], #4
 800c962:	f853 2b04 	ldr.w	r2, [r3], #4
 800c966:	459c      	cmp	ip, r3
 800c968:	fa22 f20e 	lsr.w	r2, r2, lr
 800c96c:	d8f3      	bhi.n	800c956 <__lshift+0x6e>
 800c96e:	ebac 0304 	sub.w	r3, ip, r4
 800c972:	3b15      	subs	r3, #21
 800c974:	f023 0303 	bic.w	r3, r3, #3
 800c978:	3304      	adds	r3, #4
 800c97a:	f104 0015 	add.w	r0, r4, #21
 800c97e:	4584      	cmp	ip, r0
 800c980:	bf38      	it	cc
 800c982:	2304      	movcc	r3, #4
 800c984:	50ca      	str	r2, [r1, r3]
 800c986:	b10a      	cbz	r2, 800c98c <__lshift+0xa4>
 800c988:	f108 0602 	add.w	r6, r8, #2
 800c98c:	3e01      	subs	r6, #1
 800c98e:	4638      	mov	r0, r7
 800c990:	612e      	str	r6, [r5, #16]
 800c992:	4621      	mov	r1, r4
 800c994:	f7ff fd8e 	bl	800c4b4 <_Bfree>
 800c998:	4628      	mov	r0, r5
 800c99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c99e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	e7c5      	b.n	800c932 <__lshift+0x4a>
 800c9a6:	3904      	subs	r1, #4
 800c9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9b0:	459c      	cmp	ip, r3
 800c9b2:	d8f9      	bhi.n	800c9a8 <__lshift+0xc0>
 800c9b4:	e7ea      	b.n	800c98c <__lshift+0xa4>
 800c9b6:	bf00      	nop
 800c9b8:	08011f8d 	.word	0x08011f8d
 800c9bc:	08011f9e 	.word	0x08011f9e

0800c9c0 <__mcmp>:
 800c9c0:	b530      	push	{r4, r5, lr}
 800c9c2:	6902      	ldr	r2, [r0, #16]
 800c9c4:	690c      	ldr	r4, [r1, #16]
 800c9c6:	1b12      	subs	r2, r2, r4
 800c9c8:	d10e      	bne.n	800c9e8 <__mcmp+0x28>
 800c9ca:	f100 0314 	add.w	r3, r0, #20
 800c9ce:	3114      	adds	r1, #20
 800c9d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c9d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9e0:	42a5      	cmp	r5, r4
 800c9e2:	d003      	beq.n	800c9ec <__mcmp+0x2c>
 800c9e4:	d305      	bcc.n	800c9f2 <__mcmp+0x32>
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	bd30      	pop	{r4, r5, pc}
 800c9ec:	4283      	cmp	r3, r0
 800c9ee:	d3f3      	bcc.n	800c9d8 <__mcmp+0x18>
 800c9f0:	e7fa      	b.n	800c9e8 <__mcmp+0x28>
 800c9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f6:	e7f7      	b.n	800c9e8 <__mcmp+0x28>

0800c9f8 <__mdiff>:
 800c9f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	4606      	mov	r6, r0
 800ca00:	4611      	mov	r1, r2
 800ca02:	4620      	mov	r0, r4
 800ca04:	4690      	mov	r8, r2
 800ca06:	f7ff ffdb 	bl	800c9c0 <__mcmp>
 800ca0a:	1e05      	subs	r5, r0, #0
 800ca0c:	d110      	bne.n	800ca30 <__mdiff+0x38>
 800ca0e:	4629      	mov	r1, r5
 800ca10:	4630      	mov	r0, r6
 800ca12:	f7ff fd0f 	bl	800c434 <_Balloc>
 800ca16:	b930      	cbnz	r0, 800ca26 <__mdiff+0x2e>
 800ca18:	4b3a      	ldr	r3, [pc, #232]	; (800cb04 <__mdiff+0x10c>)
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	f240 2137 	movw	r1, #567	; 0x237
 800ca20:	4839      	ldr	r0, [pc, #228]	; (800cb08 <__mdiff+0x110>)
 800ca22:	f001 fa85 	bl	800df30 <__assert_func>
 800ca26:	2301      	movs	r3, #1
 800ca28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca30:	bfa4      	itt	ge
 800ca32:	4643      	movge	r3, r8
 800ca34:	46a0      	movge	r8, r4
 800ca36:	4630      	mov	r0, r6
 800ca38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca3c:	bfa6      	itte	ge
 800ca3e:	461c      	movge	r4, r3
 800ca40:	2500      	movge	r5, #0
 800ca42:	2501      	movlt	r5, #1
 800ca44:	f7ff fcf6 	bl	800c434 <_Balloc>
 800ca48:	b920      	cbnz	r0, 800ca54 <__mdiff+0x5c>
 800ca4a:	4b2e      	ldr	r3, [pc, #184]	; (800cb04 <__mdiff+0x10c>)
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	f240 2145 	movw	r1, #581	; 0x245
 800ca52:	e7e5      	b.n	800ca20 <__mdiff+0x28>
 800ca54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca58:	6926      	ldr	r6, [r4, #16]
 800ca5a:	60c5      	str	r5, [r0, #12]
 800ca5c:	f104 0914 	add.w	r9, r4, #20
 800ca60:	f108 0514 	add.w	r5, r8, #20
 800ca64:	f100 0e14 	add.w	lr, r0, #20
 800ca68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca70:	f108 0210 	add.w	r2, r8, #16
 800ca74:	46f2      	mov	sl, lr
 800ca76:	2100      	movs	r1, #0
 800ca78:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca80:	fa11 f88b 	uxtah	r8, r1, fp
 800ca84:	b299      	uxth	r1, r3
 800ca86:	0c1b      	lsrs	r3, r3, #16
 800ca88:	eba8 0801 	sub.w	r8, r8, r1
 800ca8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca94:	fa1f f888 	uxth.w	r8, r8
 800ca98:	1419      	asrs	r1, r3, #16
 800ca9a:	454e      	cmp	r6, r9
 800ca9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800caa0:	f84a 3b04 	str.w	r3, [sl], #4
 800caa4:	d8e8      	bhi.n	800ca78 <__mdiff+0x80>
 800caa6:	1b33      	subs	r3, r6, r4
 800caa8:	3b15      	subs	r3, #21
 800caaa:	f023 0303 	bic.w	r3, r3, #3
 800caae:	3304      	adds	r3, #4
 800cab0:	3415      	adds	r4, #21
 800cab2:	42a6      	cmp	r6, r4
 800cab4:	bf38      	it	cc
 800cab6:	2304      	movcc	r3, #4
 800cab8:	441d      	add	r5, r3
 800caba:	4473      	add	r3, lr
 800cabc:	469e      	mov	lr, r3
 800cabe:	462e      	mov	r6, r5
 800cac0:	4566      	cmp	r6, ip
 800cac2:	d30e      	bcc.n	800cae2 <__mdiff+0xea>
 800cac4:	f10c 0203 	add.w	r2, ip, #3
 800cac8:	1b52      	subs	r2, r2, r5
 800caca:	f022 0203 	bic.w	r2, r2, #3
 800cace:	3d03      	subs	r5, #3
 800cad0:	45ac      	cmp	ip, r5
 800cad2:	bf38      	it	cc
 800cad4:	2200      	movcc	r2, #0
 800cad6:	4413      	add	r3, r2
 800cad8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cadc:	b17a      	cbz	r2, 800cafe <__mdiff+0x106>
 800cade:	6107      	str	r7, [r0, #16]
 800cae0:	e7a4      	b.n	800ca2c <__mdiff+0x34>
 800cae2:	f856 8b04 	ldr.w	r8, [r6], #4
 800cae6:	fa11 f288 	uxtah	r2, r1, r8
 800caea:	1414      	asrs	r4, r2, #16
 800caec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800caf0:	b292      	uxth	r2, r2
 800caf2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800caf6:	f84e 2b04 	str.w	r2, [lr], #4
 800cafa:	1421      	asrs	r1, r4, #16
 800cafc:	e7e0      	b.n	800cac0 <__mdiff+0xc8>
 800cafe:	3f01      	subs	r7, #1
 800cb00:	e7ea      	b.n	800cad8 <__mdiff+0xe0>
 800cb02:	bf00      	nop
 800cb04:	08011f8d 	.word	0x08011f8d
 800cb08:	08011f9e 	.word	0x08011f9e

0800cb0c <__ulp>:
 800cb0c:	b082      	sub	sp, #8
 800cb0e:	ed8d 0b00 	vstr	d0, [sp]
 800cb12:	9a01      	ldr	r2, [sp, #4]
 800cb14:	4b0f      	ldr	r3, [pc, #60]	; (800cb54 <__ulp+0x48>)
 800cb16:	4013      	ands	r3, r2
 800cb18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	dc08      	bgt.n	800cb32 <__ulp+0x26>
 800cb20:	425b      	negs	r3, r3
 800cb22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cb26:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cb2a:	da04      	bge.n	800cb36 <__ulp+0x2a>
 800cb2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb30:	4113      	asrs	r3, r2
 800cb32:	2200      	movs	r2, #0
 800cb34:	e008      	b.n	800cb48 <__ulp+0x3c>
 800cb36:	f1a2 0314 	sub.w	r3, r2, #20
 800cb3a:	2b1e      	cmp	r3, #30
 800cb3c:	bfda      	itte	le
 800cb3e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cb42:	40da      	lsrle	r2, r3
 800cb44:	2201      	movgt	r2, #1
 800cb46:	2300      	movs	r3, #0
 800cb48:	4619      	mov	r1, r3
 800cb4a:	4610      	mov	r0, r2
 800cb4c:	ec41 0b10 	vmov	d0, r0, r1
 800cb50:	b002      	add	sp, #8
 800cb52:	4770      	bx	lr
 800cb54:	7ff00000 	.word	0x7ff00000

0800cb58 <__b2d>:
 800cb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5c:	6906      	ldr	r6, [r0, #16]
 800cb5e:	f100 0814 	add.w	r8, r0, #20
 800cb62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cb66:	1f37      	subs	r7, r6, #4
 800cb68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	f7ff fd53 	bl	800c618 <__hi0bits>
 800cb72:	f1c0 0320 	rsb	r3, r0, #32
 800cb76:	280a      	cmp	r0, #10
 800cb78:	600b      	str	r3, [r1, #0]
 800cb7a:	491b      	ldr	r1, [pc, #108]	; (800cbe8 <__b2d+0x90>)
 800cb7c:	dc15      	bgt.n	800cbaa <__b2d+0x52>
 800cb7e:	f1c0 0c0b 	rsb	ip, r0, #11
 800cb82:	fa22 f30c 	lsr.w	r3, r2, ip
 800cb86:	45b8      	cmp	r8, r7
 800cb88:	ea43 0501 	orr.w	r5, r3, r1
 800cb8c:	bf34      	ite	cc
 800cb8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb92:	2300      	movcs	r3, #0
 800cb94:	3015      	adds	r0, #21
 800cb96:	fa02 f000 	lsl.w	r0, r2, r0
 800cb9a:	fa23 f30c 	lsr.w	r3, r3, ip
 800cb9e:	4303      	orrs	r3, r0
 800cba0:	461c      	mov	r4, r3
 800cba2:	ec45 4b10 	vmov	d0, r4, r5
 800cba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbaa:	45b8      	cmp	r8, r7
 800cbac:	bf3a      	itte	cc
 800cbae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cbb2:	f1a6 0708 	subcc.w	r7, r6, #8
 800cbb6:	2300      	movcs	r3, #0
 800cbb8:	380b      	subs	r0, #11
 800cbba:	d012      	beq.n	800cbe2 <__b2d+0x8a>
 800cbbc:	f1c0 0120 	rsb	r1, r0, #32
 800cbc0:	fa23 f401 	lsr.w	r4, r3, r1
 800cbc4:	4082      	lsls	r2, r0
 800cbc6:	4322      	orrs	r2, r4
 800cbc8:	4547      	cmp	r7, r8
 800cbca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800cbce:	bf8c      	ite	hi
 800cbd0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cbd4:	2200      	movls	r2, #0
 800cbd6:	4083      	lsls	r3, r0
 800cbd8:	40ca      	lsrs	r2, r1
 800cbda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	e7de      	b.n	800cba0 <__b2d+0x48>
 800cbe2:	ea42 0501 	orr.w	r5, r2, r1
 800cbe6:	e7db      	b.n	800cba0 <__b2d+0x48>
 800cbe8:	3ff00000 	.word	0x3ff00000

0800cbec <__d2b>:
 800cbec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbf0:	460f      	mov	r7, r1
 800cbf2:	2101      	movs	r1, #1
 800cbf4:	ec59 8b10 	vmov	r8, r9, d0
 800cbf8:	4616      	mov	r6, r2
 800cbfa:	f7ff fc1b 	bl	800c434 <_Balloc>
 800cbfe:	4604      	mov	r4, r0
 800cc00:	b930      	cbnz	r0, 800cc10 <__d2b+0x24>
 800cc02:	4602      	mov	r2, r0
 800cc04:	4b24      	ldr	r3, [pc, #144]	; (800cc98 <__d2b+0xac>)
 800cc06:	4825      	ldr	r0, [pc, #148]	; (800cc9c <__d2b+0xb0>)
 800cc08:	f240 310f 	movw	r1, #783	; 0x30f
 800cc0c:	f001 f990 	bl	800df30 <__assert_func>
 800cc10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc18:	bb2d      	cbnz	r5, 800cc66 <__d2b+0x7a>
 800cc1a:	9301      	str	r3, [sp, #4]
 800cc1c:	f1b8 0300 	subs.w	r3, r8, #0
 800cc20:	d026      	beq.n	800cc70 <__d2b+0x84>
 800cc22:	4668      	mov	r0, sp
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	f7ff fd17 	bl	800c658 <__lo0bits>
 800cc2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc2e:	b1e8      	cbz	r0, 800cc6c <__d2b+0x80>
 800cc30:	f1c0 0320 	rsb	r3, r0, #32
 800cc34:	fa02 f303 	lsl.w	r3, r2, r3
 800cc38:	430b      	orrs	r3, r1
 800cc3a:	40c2      	lsrs	r2, r0
 800cc3c:	6163      	str	r3, [r4, #20]
 800cc3e:	9201      	str	r2, [sp, #4]
 800cc40:	9b01      	ldr	r3, [sp, #4]
 800cc42:	61a3      	str	r3, [r4, #24]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	bf14      	ite	ne
 800cc48:	2202      	movne	r2, #2
 800cc4a:	2201      	moveq	r2, #1
 800cc4c:	6122      	str	r2, [r4, #16]
 800cc4e:	b1bd      	cbz	r5, 800cc80 <__d2b+0x94>
 800cc50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc54:	4405      	add	r5, r0
 800cc56:	603d      	str	r5, [r7, #0]
 800cc58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc5c:	6030      	str	r0, [r6, #0]
 800cc5e:	4620      	mov	r0, r4
 800cc60:	b003      	add	sp, #12
 800cc62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc6a:	e7d6      	b.n	800cc1a <__d2b+0x2e>
 800cc6c:	6161      	str	r1, [r4, #20]
 800cc6e:	e7e7      	b.n	800cc40 <__d2b+0x54>
 800cc70:	a801      	add	r0, sp, #4
 800cc72:	f7ff fcf1 	bl	800c658 <__lo0bits>
 800cc76:	9b01      	ldr	r3, [sp, #4]
 800cc78:	6163      	str	r3, [r4, #20]
 800cc7a:	3020      	adds	r0, #32
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	e7e5      	b.n	800cc4c <__d2b+0x60>
 800cc80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc88:	6038      	str	r0, [r7, #0]
 800cc8a:	6918      	ldr	r0, [r3, #16]
 800cc8c:	f7ff fcc4 	bl	800c618 <__hi0bits>
 800cc90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc94:	e7e2      	b.n	800cc5c <__d2b+0x70>
 800cc96:	bf00      	nop
 800cc98:	08011f8d 	.word	0x08011f8d
 800cc9c:	08011f9e 	.word	0x08011f9e

0800cca0 <__ratio>:
 800cca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca4:	4688      	mov	r8, r1
 800cca6:	4669      	mov	r1, sp
 800cca8:	4681      	mov	r9, r0
 800ccaa:	f7ff ff55 	bl	800cb58 <__b2d>
 800ccae:	a901      	add	r1, sp, #4
 800ccb0:	4640      	mov	r0, r8
 800ccb2:	ec55 4b10 	vmov	r4, r5, d0
 800ccb6:	f7ff ff4f 	bl	800cb58 <__b2d>
 800ccba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ccc2:	eba3 0c02 	sub.w	ip, r3, r2
 800ccc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ccca:	1a9b      	subs	r3, r3, r2
 800cccc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ccd0:	ec51 0b10 	vmov	r0, r1, d0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	bfd6      	itet	le
 800ccd8:	460a      	movle	r2, r1
 800ccda:	462a      	movgt	r2, r5
 800ccdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cce0:	468b      	mov	fp, r1
 800cce2:	462f      	mov	r7, r5
 800cce4:	bfd4      	ite	le
 800cce6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ccea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ccee:	4620      	mov	r0, r4
 800ccf0:	ee10 2a10 	vmov	r2, s0
 800ccf4:	465b      	mov	r3, fp
 800ccf6:	4639      	mov	r1, r7
 800ccf8:	f7f3 fda8 	bl	800084c <__aeabi_ddiv>
 800ccfc:	ec41 0b10 	vmov	d0, r0, r1
 800cd00:	b003      	add	sp, #12
 800cd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd06 <__copybits>:
 800cd06:	3901      	subs	r1, #1
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	1149      	asrs	r1, r1, #5
 800cd0c:	6914      	ldr	r4, [r2, #16]
 800cd0e:	3101      	adds	r1, #1
 800cd10:	f102 0314 	add.w	r3, r2, #20
 800cd14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd1c:	1f05      	subs	r5, r0, #4
 800cd1e:	42a3      	cmp	r3, r4
 800cd20:	d30c      	bcc.n	800cd3c <__copybits+0x36>
 800cd22:	1aa3      	subs	r3, r4, r2
 800cd24:	3b11      	subs	r3, #17
 800cd26:	f023 0303 	bic.w	r3, r3, #3
 800cd2a:	3211      	adds	r2, #17
 800cd2c:	42a2      	cmp	r2, r4
 800cd2e:	bf88      	it	hi
 800cd30:	2300      	movhi	r3, #0
 800cd32:	4418      	add	r0, r3
 800cd34:	2300      	movs	r3, #0
 800cd36:	4288      	cmp	r0, r1
 800cd38:	d305      	bcc.n	800cd46 <__copybits+0x40>
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
 800cd3c:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd40:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd44:	e7eb      	b.n	800cd1e <__copybits+0x18>
 800cd46:	f840 3b04 	str.w	r3, [r0], #4
 800cd4a:	e7f4      	b.n	800cd36 <__copybits+0x30>

0800cd4c <__any_on>:
 800cd4c:	f100 0214 	add.w	r2, r0, #20
 800cd50:	6900      	ldr	r0, [r0, #16]
 800cd52:	114b      	asrs	r3, r1, #5
 800cd54:	4298      	cmp	r0, r3
 800cd56:	b510      	push	{r4, lr}
 800cd58:	db11      	blt.n	800cd7e <__any_on+0x32>
 800cd5a:	dd0a      	ble.n	800cd72 <__any_on+0x26>
 800cd5c:	f011 011f 	ands.w	r1, r1, #31
 800cd60:	d007      	beq.n	800cd72 <__any_on+0x26>
 800cd62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cd66:	fa24 f001 	lsr.w	r0, r4, r1
 800cd6a:	fa00 f101 	lsl.w	r1, r0, r1
 800cd6e:	428c      	cmp	r4, r1
 800cd70:	d10b      	bne.n	800cd8a <__any_on+0x3e>
 800cd72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d803      	bhi.n	800cd82 <__any_on+0x36>
 800cd7a:	2000      	movs	r0, #0
 800cd7c:	bd10      	pop	{r4, pc}
 800cd7e:	4603      	mov	r3, r0
 800cd80:	e7f7      	b.n	800cd72 <__any_on+0x26>
 800cd82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd86:	2900      	cmp	r1, #0
 800cd88:	d0f5      	beq.n	800cd76 <__any_on+0x2a>
 800cd8a:	2001      	movs	r0, #1
 800cd8c:	e7f6      	b.n	800cd7c <__any_on+0x30>

0800cd8e <sulp>:
 800cd8e:	b570      	push	{r4, r5, r6, lr}
 800cd90:	4604      	mov	r4, r0
 800cd92:	460d      	mov	r5, r1
 800cd94:	ec45 4b10 	vmov	d0, r4, r5
 800cd98:	4616      	mov	r6, r2
 800cd9a:	f7ff feb7 	bl	800cb0c <__ulp>
 800cd9e:	ec51 0b10 	vmov	r0, r1, d0
 800cda2:	b17e      	cbz	r6, 800cdc4 <sulp+0x36>
 800cda4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cda8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	dd09      	ble.n	800cdc4 <sulp+0x36>
 800cdb0:	051b      	lsls	r3, r3, #20
 800cdb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cdb6:	2400      	movs	r4, #0
 800cdb8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cdbc:	4622      	mov	r2, r4
 800cdbe:	462b      	mov	r3, r5
 800cdc0:	f7f3 fc1a 	bl	80005f8 <__aeabi_dmul>
 800cdc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cdc8 <_strtod_l>:
 800cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdcc:	ed2d 8b02 	vpush	{d8}
 800cdd0:	b09b      	sub	sp, #108	; 0x6c
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	9213      	str	r2, [sp, #76]	; 0x4c
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	9216      	str	r2, [sp, #88]	; 0x58
 800cdda:	460d      	mov	r5, r1
 800cddc:	f04f 0800 	mov.w	r8, #0
 800cde0:	f04f 0900 	mov.w	r9, #0
 800cde4:	460a      	mov	r2, r1
 800cde6:	9215      	str	r2, [sp, #84]	; 0x54
 800cde8:	7811      	ldrb	r1, [r2, #0]
 800cdea:	292b      	cmp	r1, #43	; 0x2b
 800cdec:	d04c      	beq.n	800ce88 <_strtod_l+0xc0>
 800cdee:	d83a      	bhi.n	800ce66 <_strtod_l+0x9e>
 800cdf0:	290d      	cmp	r1, #13
 800cdf2:	d834      	bhi.n	800ce5e <_strtod_l+0x96>
 800cdf4:	2908      	cmp	r1, #8
 800cdf6:	d834      	bhi.n	800ce62 <_strtod_l+0x9a>
 800cdf8:	2900      	cmp	r1, #0
 800cdfa:	d03d      	beq.n	800ce78 <_strtod_l+0xb0>
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	920a      	str	r2, [sp, #40]	; 0x28
 800ce00:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ce02:	7832      	ldrb	r2, [r6, #0]
 800ce04:	2a30      	cmp	r2, #48	; 0x30
 800ce06:	f040 80b4 	bne.w	800cf72 <_strtod_l+0x1aa>
 800ce0a:	7872      	ldrb	r2, [r6, #1]
 800ce0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ce10:	2a58      	cmp	r2, #88	; 0x58
 800ce12:	d170      	bne.n	800cef6 <_strtod_l+0x12e>
 800ce14:	9302      	str	r3, [sp, #8]
 800ce16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce18:	9301      	str	r3, [sp, #4]
 800ce1a:	ab16      	add	r3, sp, #88	; 0x58
 800ce1c:	9300      	str	r3, [sp, #0]
 800ce1e:	4a8e      	ldr	r2, [pc, #568]	; (800d058 <_strtod_l+0x290>)
 800ce20:	ab17      	add	r3, sp, #92	; 0x5c
 800ce22:	a915      	add	r1, sp, #84	; 0x54
 800ce24:	4620      	mov	r0, r4
 800ce26:	f001 f91f 	bl	800e068 <__gethex>
 800ce2a:	f010 070f 	ands.w	r7, r0, #15
 800ce2e:	4605      	mov	r5, r0
 800ce30:	d005      	beq.n	800ce3e <_strtod_l+0x76>
 800ce32:	2f06      	cmp	r7, #6
 800ce34:	d12a      	bne.n	800ce8c <_strtod_l+0xc4>
 800ce36:	3601      	adds	r6, #1
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9615      	str	r6, [sp, #84]	; 0x54
 800ce3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ce3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f040 857f 	bne.w	800d944 <_strtod_l+0xb7c>
 800ce46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce48:	b1db      	cbz	r3, 800ce82 <_strtod_l+0xba>
 800ce4a:	4642      	mov	r2, r8
 800ce4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ce50:	ec43 2b10 	vmov	d0, r2, r3
 800ce54:	b01b      	add	sp, #108	; 0x6c
 800ce56:	ecbd 8b02 	vpop	{d8}
 800ce5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5e:	2920      	cmp	r1, #32
 800ce60:	d1cc      	bne.n	800cdfc <_strtod_l+0x34>
 800ce62:	3201      	adds	r2, #1
 800ce64:	e7bf      	b.n	800cde6 <_strtod_l+0x1e>
 800ce66:	292d      	cmp	r1, #45	; 0x2d
 800ce68:	d1c8      	bne.n	800cdfc <_strtod_l+0x34>
 800ce6a:	2101      	movs	r1, #1
 800ce6c:	910a      	str	r1, [sp, #40]	; 0x28
 800ce6e:	1c51      	adds	r1, r2, #1
 800ce70:	9115      	str	r1, [sp, #84]	; 0x54
 800ce72:	7852      	ldrb	r2, [r2, #1]
 800ce74:	2a00      	cmp	r2, #0
 800ce76:	d1c3      	bne.n	800ce00 <_strtod_l+0x38>
 800ce78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce7a:	9515      	str	r5, [sp, #84]	; 0x54
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f040 855f 	bne.w	800d940 <_strtod_l+0xb78>
 800ce82:	4642      	mov	r2, r8
 800ce84:	464b      	mov	r3, r9
 800ce86:	e7e3      	b.n	800ce50 <_strtod_l+0x88>
 800ce88:	2100      	movs	r1, #0
 800ce8a:	e7ef      	b.n	800ce6c <_strtod_l+0xa4>
 800ce8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ce8e:	b13a      	cbz	r2, 800cea0 <_strtod_l+0xd8>
 800ce90:	2135      	movs	r1, #53	; 0x35
 800ce92:	a818      	add	r0, sp, #96	; 0x60
 800ce94:	f7ff ff37 	bl	800cd06 <__copybits>
 800ce98:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f7ff fb0a 	bl	800c4b4 <_Bfree>
 800cea0:	3f01      	subs	r7, #1
 800cea2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cea4:	2f04      	cmp	r7, #4
 800cea6:	d806      	bhi.n	800ceb6 <_strtod_l+0xee>
 800cea8:	e8df f007 	tbb	[pc, r7]
 800ceac:	201d0314 	.word	0x201d0314
 800ceb0:	14          	.byte	0x14
 800ceb1:	00          	.byte	0x00
 800ceb2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ceb6:	05e9      	lsls	r1, r5, #23
 800ceb8:	bf48      	it	mi
 800ceba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800cebe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cec2:	0d1b      	lsrs	r3, r3, #20
 800cec4:	051b      	lsls	r3, r3, #20
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d1b9      	bne.n	800ce3e <_strtod_l+0x76>
 800ceca:	f7fe fbab 	bl	800b624 <__errno>
 800cece:	2322      	movs	r3, #34	; 0x22
 800ced0:	6003      	str	r3, [r0, #0]
 800ced2:	e7b4      	b.n	800ce3e <_strtod_l+0x76>
 800ced4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ced8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cedc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cee0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800cee4:	e7e7      	b.n	800ceb6 <_strtod_l+0xee>
 800cee6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d060 <_strtod_l+0x298>
 800ceea:	e7e4      	b.n	800ceb6 <_strtod_l+0xee>
 800ceec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800cef0:	f04f 38ff 	mov.w	r8, #4294967295
 800cef4:	e7df      	b.n	800ceb6 <_strtod_l+0xee>
 800cef6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cef8:	1c5a      	adds	r2, r3, #1
 800cefa:	9215      	str	r2, [sp, #84]	; 0x54
 800cefc:	785b      	ldrb	r3, [r3, #1]
 800cefe:	2b30      	cmp	r3, #48	; 0x30
 800cf00:	d0f9      	beq.n	800cef6 <_strtod_l+0x12e>
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d09b      	beq.n	800ce3e <_strtod_l+0x76>
 800cf06:	2301      	movs	r3, #1
 800cf08:	f04f 0a00 	mov.w	sl, #0
 800cf0c:	9304      	str	r3, [sp, #16]
 800cf0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf10:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf12:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cf16:	46d3      	mov	fp, sl
 800cf18:	220a      	movs	r2, #10
 800cf1a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cf1c:	7806      	ldrb	r6, [r0, #0]
 800cf1e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cf22:	b2d9      	uxtb	r1, r3
 800cf24:	2909      	cmp	r1, #9
 800cf26:	d926      	bls.n	800cf76 <_strtod_l+0x1ae>
 800cf28:	494c      	ldr	r1, [pc, #304]	; (800d05c <_strtod_l+0x294>)
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f000 ffe6 	bl	800defc <strncmp>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d030      	beq.n	800cf96 <_strtod_l+0x1ce>
 800cf34:	2000      	movs	r0, #0
 800cf36:	4632      	mov	r2, r6
 800cf38:	9005      	str	r0, [sp, #20]
 800cf3a:	465e      	mov	r6, fp
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2a65      	cmp	r2, #101	; 0x65
 800cf40:	d001      	beq.n	800cf46 <_strtod_l+0x17e>
 800cf42:	2a45      	cmp	r2, #69	; 0x45
 800cf44:	d113      	bne.n	800cf6e <_strtod_l+0x1a6>
 800cf46:	b91e      	cbnz	r6, 800cf50 <_strtod_l+0x188>
 800cf48:	9a04      	ldr	r2, [sp, #16]
 800cf4a:	4302      	orrs	r2, r0
 800cf4c:	d094      	beq.n	800ce78 <_strtod_l+0xb0>
 800cf4e:	2600      	movs	r6, #0
 800cf50:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cf52:	1c6a      	adds	r2, r5, #1
 800cf54:	9215      	str	r2, [sp, #84]	; 0x54
 800cf56:	786a      	ldrb	r2, [r5, #1]
 800cf58:	2a2b      	cmp	r2, #43	; 0x2b
 800cf5a:	d074      	beq.n	800d046 <_strtod_l+0x27e>
 800cf5c:	2a2d      	cmp	r2, #45	; 0x2d
 800cf5e:	d078      	beq.n	800d052 <_strtod_l+0x28a>
 800cf60:	f04f 0c00 	mov.w	ip, #0
 800cf64:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cf68:	2909      	cmp	r1, #9
 800cf6a:	d97f      	bls.n	800d06c <_strtod_l+0x2a4>
 800cf6c:	9515      	str	r5, [sp, #84]	; 0x54
 800cf6e:	2700      	movs	r7, #0
 800cf70:	e09e      	b.n	800d0b0 <_strtod_l+0x2e8>
 800cf72:	2300      	movs	r3, #0
 800cf74:	e7c8      	b.n	800cf08 <_strtod_l+0x140>
 800cf76:	f1bb 0f08 	cmp.w	fp, #8
 800cf7a:	bfd8      	it	le
 800cf7c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cf7e:	f100 0001 	add.w	r0, r0, #1
 800cf82:	bfda      	itte	le
 800cf84:	fb02 3301 	mlale	r3, r2, r1, r3
 800cf88:	9309      	strle	r3, [sp, #36]	; 0x24
 800cf8a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800cf8e:	f10b 0b01 	add.w	fp, fp, #1
 800cf92:	9015      	str	r0, [sp, #84]	; 0x54
 800cf94:	e7c1      	b.n	800cf1a <_strtod_l+0x152>
 800cf96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf98:	1c5a      	adds	r2, r3, #1
 800cf9a:	9215      	str	r2, [sp, #84]	; 0x54
 800cf9c:	785a      	ldrb	r2, [r3, #1]
 800cf9e:	f1bb 0f00 	cmp.w	fp, #0
 800cfa2:	d037      	beq.n	800d014 <_strtod_l+0x24c>
 800cfa4:	9005      	str	r0, [sp, #20]
 800cfa6:	465e      	mov	r6, fp
 800cfa8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cfac:	2b09      	cmp	r3, #9
 800cfae:	d912      	bls.n	800cfd6 <_strtod_l+0x20e>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e7c4      	b.n	800cf3e <_strtod_l+0x176>
 800cfb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfb6:	1c5a      	adds	r2, r3, #1
 800cfb8:	9215      	str	r2, [sp, #84]	; 0x54
 800cfba:	785a      	ldrb	r2, [r3, #1]
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	2a30      	cmp	r2, #48	; 0x30
 800cfc0:	d0f8      	beq.n	800cfb4 <_strtod_l+0x1ec>
 800cfc2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cfc6:	2b08      	cmp	r3, #8
 800cfc8:	f200 84c1 	bhi.w	800d94e <_strtod_l+0xb86>
 800cfcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfce:	9005      	str	r0, [sp, #20]
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	3a30      	subs	r2, #48	; 0x30
 800cfd8:	f100 0301 	add.w	r3, r0, #1
 800cfdc:	d014      	beq.n	800d008 <_strtod_l+0x240>
 800cfde:	9905      	ldr	r1, [sp, #20]
 800cfe0:	4419      	add	r1, r3
 800cfe2:	9105      	str	r1, [sp, #20]
 800cfe4:	4633      	mov	r3, r6
 800cfe6:	eb00 0c06 	add.w	ip, r0, r6
 800cfea:	210a      	movs	r1, #10
 800cfec:	4563      	cmp	r3, ip
 800cfee:	d113      	bne.n	800d018 <_strtod_l+0x250>
 800cff0:	1833      	adds	r3, r6, r0
 800cff2:	2b08      	cmp	r3, #8
 800cff4:	f106 0601 	add.w	r6, r6, #1
 800cff8:	4406      	add	r6, r0
 800cffa:	dc1a      	bgt.n	800d032 <_strtod_l+0x26a>
 800cffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cffe:	230a      	movs	r3, #10
 800d000:	fb03 2301 	mla	r3, r3, r1, r2
 800d004:	9309      	str	r3, [sp, #36]	; 0x24
 800d006:	2300      	movs	r3, #0
 800d008:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d00a:	1c51      	adds	r1, r2, #1
 800d00c:	9115      	str	r1, [sp, #84]	; 0x54
 800d00e:	7852      	ldrb	r2, [r2, #1]
 800d010:	4618      	mov	r0, r3
 800d012:	e7c9      	b.n	800cfa8 <_strtod_l+0x1e0>
 800d014:	4658      	mov	r0, fp
 800d016:	e7d2      	b.n	800cfbe <_strtod_l+0x1f6>
 800d018:	2b08      	cmp	r3, #8
 800d01a:	f103 0301 	add.w	r3, r3, #1
 800d01e:	dc03      	bgt.n	800d028 <_strtod_l+0x260>
 800d020:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d022:	434f      	muls	r7, r1
 800d024:	9709      	str	r7, [sp, #36]	; 0x24
 800d026:	e7e1      	b.n	800cfec <_strtod_l+0x224>
 800d028:	2b10      	cmp	r3, #16
 800d02a:	bfd8      	it	le
 800d02c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800d030:	e7dc      	b.n	800cfec <_strtod_l+0x224>
 800d032:	2e10      	cmp	r6, #16
 800d034:	bfdc      	itt	le
 800d036:	230a      	movle	r3, #10
 800d038:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800d03c:	e7e3      	b.n	800d006 <_strtod_l+0x23e>
 800d03e:	2300      	movs	r3, #0
 800d040:	9305      	str	r3, [sp, #20]
 800d042:	2301      	movs	r3, #1
 800d044:	e780      	b.n	800cf48 <_strtod_l+0x180>
 800d046:	f04f 0c00 	mov.w	ip, #0
 800d04a:	1caa      	adds	r2, r5, #2
 800d04c:	9215      	str	r2, [sp, #84]	; 0x54
 800d04e:	78aa      	ldrb	r2, [r5, #2]
 800d050:	e788      	b.n	800cf64 <_strtod_l+0x19c>
 800d052:	f04f 0c01 	mov.w	ip, #1
 800d056:	e7f8      	b.n	800d04a <_strtod_l+0x282>
 800d058:	080120f8 	.word	0x080120f8
 800d05c:	080120f4 	.word	0x080120f4
 800d060:	7ff00000 	.word	0x7ff00000
 800d064:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d066:	1c51      	adds	r1, r2, #1
 800d068:	9115      	str	r1, [sp, #84]	; 0x54
 800d06a:	7852      	ldrb	r2, [r2, #1]
 800d06c:	2a30      	cmp	r2, #48	; 0x30
 800d06e:	d0f9      	beq.n	800d064 <_strtod_l+0x29c>
 800d070:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d074:	2908      	cmp	r1, #8
 800d076:	f63f af7a 	bhi.w	800cf6e <_strtod_l+0x1a6>
 800d07a:	3a30      	subs	r2, #48	; 0x30
 800d07c:	9208      	str	r2, [sp, #32]
 800d07e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d080:	920c      	str	r2, [sp, #48]	; 0x30
 800d082:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d084:	1c57      	adds	r7, r2, #1
 800d086:	9715      	str	r7, [sp, #84]	; 0x54
 800d088:	7852      	ldrb	r2, [r2, #1]
 800d08a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d08e:	f1be 0f09 	cmp.w	lr, #9
 800d092:	d938      	bls.n	800d106 <_strtod_l+0x33e>
 800d094:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d096:	1a7f      	subs	r7, r7, r1
 800d098:	2f08      	cmp	r7, #8
 800d09a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d09e:	dc03      	bgt.n	800d0a8 <_strtod_l+0x2e0>
 800d0a0:	9908      	ldr	r1, [sp, #32]
 800d0a2:	428f      	cmp	r7, r1
 800d0a4:	bfa8      	it	ge
 800d0a6:	460f      	movge	r7, r1
 800d0a8:	f1bc 0f00 	cmp.w	ip, #0
 800d0ac:	d000      	beq.n	800d0b0 <_strtod_l+0x2e8>
 800d0ae:	427f      	negs	r7, r7
 800d0b0:	2e00      	cmp	r6, #0
 800d0b2:	d14f      	bne.n	800d154 <_strtod_l+0x38c>
 800d0b4:	9904      	ldr	r1, [sp, #16]
 800d0b6:	4301      	orrs	r1, r0
 800d0b8:	f47f aec1 	bne.w	800ce3e <_strtod_l+0x76>
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f47f aedb 	bne.w	800ce78 <_strtod_l+0xb0>
 800d0c2:	2a69      	cmp	r2, #105	; 0x69
 800d0c4:	d029      	beq.n	800d11a <_strtod_l+0x352>
 800d0c6:	dc26      	bgt.n	800d116 <_strtod_l+0x34e>
 800d0c8:	2a49      	cmp	r2, #73	; 0x49
 800d0ca:	d026      	beq.n	800d11a <_strtod_l+0x352>
 800d0cc:	2a4e      	cmp	r2, #78	; 0x4e
 800d0ce:	f47f aed3 	bne.w	800ce78 <_strtod_l+0xb0>
 800d0d2:	499b      	ldr	r1, [pc, #620]	; (800d340 <_strtod_l+0x578>)
 800d0d4:	a815      	add	r0, sp, #84	; 0x54
 800d0d6:	f001 fa07 	bl	800e4e8 <__match>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	f43f aecc 	beq.w	800ce78 <_strtod_l+0xb0>
 800d0e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b28      	cmp	r3, #40	; 0x28
 800d0e6:	d12f      	bne.n	800d148 <_strtod_l+0x380>
 800d0e8:	4996      	ldr	r1, [pc, #600]	; (800d344 <_strtod_l+0x57c>)
 800d0ea:	aa18      	add	r2, sp, #96	; 0x60
 800d0ec:	a815      	add	r0, sp, #84	; 0x54
 800d0ee:	f001 fa0f 	bl	800e510 <__hexnan>
 800d0f2:	2805      	cmp	r0, #5
 800d0f4:	d128      	bne.n	800d148 <_strtod_l+0x380>
 800d0f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d0fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d100:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d104:	e69b      	b.n	800ce3e <_strtod_l+0x76>
 800d106:	9f08      	ldr	r7, [sp, #32]
 800d108:	210a      	movs	r1, #10
 800d10a:	fb01 2107 	mla	r1, r1, r7, r2
 800d10e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d112:	9208      	str	r2, [sp, #32]
 800d114:	e7b5      	b.n	800d082 <_strtod_l+0x2ba>
 800d116:	2a6e      	cmp	r2, #110	; 0x6e
 800d118:	e7d9      	b.n	800d0ce <_strtod_l+0x306>
 800d11a:	498b      	ldr	r1, [pc, #556]	; (800d348 <_strtod_l+0x580>)
 800d11c:	a815      	add	r0, sp, #84	; 0x54
 800d11e:	f001 f9e3 	bl	800e4e8 <__match>
 800d122:	2800      	cmp	r0, #0
 800d124:	f43f aea8 	beq.w	800ce78 <_strtod_l+0xb0>
 800d128:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d12a:	4988      	ldr	r1, [pc, #544]	; (800d34c <_strtod_l+0x584>)
 800d12c:	3b01      	subs	r3, #1
 800d12e:	a815      	add	r0, sp, #84	; 0x54
 800d130:	9315      	str	r3, [sp, #84]	; 0x54
 800d132:	f001 f9d9 	bl	800e4e8 <__match>
 800d136:	b910      	cbnz	r0, 800d13e <_strtod_l+0x376>
 800d138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d13a:	3301      	adds	r3, #1
 800d13c:	9315      	str	r3, [sp, #84]	; 0x54
 800d13e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d35c <_strtod_l+0x594>
 800d142:	f04f 0800 	mov.w	r8, #0
 800d146:	e67a      	b.n	800ce3e <_strtod_l+0x76>
 800d148:	4881      	ldr	r0, [pc, #516]	; (800d350 <_strtod_l+0x588>)
 800d14a:	f000 fee9 	bl	800df20 <nan>
 800d14e:	ec59 8b10 	vmov	r8, r9, d0
 800d152:	e674      	b.n	800ce3e <_strtod_l+0x76>
 800d154:	9b05      	ldr	r3, [sp, #20]
 800d156:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d158:	1afb      	subs	r3, r7, r3
 800d15a:	f1bb 0f00 	cmp.w	fp, #0
 800d15e:	bf08      	it	eq
 800d160:	46b3      	moveq	fp, r6
 800d162:	2e10      	cmp	r6, #16
 800d164:	9308      	str	r3, [sp, #32]
 800d166:	4635      	mov	r5, r6
 800d168:	bfa8      	it	ge
 800d16a:	2510      	movge	r5, #16
 800d16c:	f7f3 f9ca 	bl	8000504 <__aeabi_ui2d>
 800d170:	2e09      	cmp	r6, #9
 800d172:	4680      	mov	r8, r0
 800d174:	4689      	mov	r9, r1
 800d176:	dd13      	ble.n	800d1a0 <_strtod_l+0x3d8>
 800d178:	4b76      	ldr	r3, [pc, #472]	; (800d354 <_strtod_l+0x58c>)
 800d17a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d17e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d182:	f7f3 fa39 	bl	80005f8 <__aeabi_dmul>
 800d186:	4680      	mov	r8, r0
 800d188:	4650      	mov	r0, sl
 800d18a:	4689      	mov	r9, r1
 800d18c:	f7f3 f9ba 	bl	8000504 <__aeabi_ui2d>
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	4640      	mov	r0, r8
 800d196:	4649      	mov	r1, r9
 800d198:	f7f3 f878 	bl	800028c <__adddf3>
 800d19c:	4680      	mov	r8, r0
 800d19e:	4689      	mov	r9, r1
 800d1a0:	2e0f      	cmp	r6, #15
 800d1a2:	dc38      	bgt.n	800d216 <_strtod_l+0x44e>
 800d1a4:	9b08      	ldr	r3, [sp, #32]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f43f ae49 	beq.w	800ce3e <_strtod_l+0x76>
 800d1ac:	dd24      	ble.n	800d1f8 <_strtod_l+0x430>
 800d1ae:	2b16      	cmp	r3, #22
 800d1b0:	dc0b      	bgt.n	800d1ca <_strtod_l+0x402>
 800d1b2:	4968      	ldr	r1, [pc, #416]	; (800d354 <_strtod_l+0x58c>)
 800d1b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1bc:	4642      	mov	r2, r8
 800d1be:	464b      	mov	r3, r9
 800d1c0:	f7f3 fa1a 	bl	80005f8 <__aeabi_dmul>
 800d1c4:	4680      	mov	r8, r0
 800d1c6:	4689      	mov	r9, r1
 800d1c8:	e639      	b.n	800ce3e <_strtod_l+0x76>
 800d1ca:	9a08      	ldr	r2, [sp, #32]
 800d1cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	db20      	blt.n	800d216 <_strtod_l+0x44e>
 800d1d4:	4c5f      	ldr	r4, [pc, #380]	; (800d354 <_strtod_l+0x58c>)
 800d1d6:	f1c6 060f 	rsb	r6, r6, #15
 800d1da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d1de:	4642      	mov	r2, r8
 800d1e0:	464b      	mov	r3, r9
 800d1e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1e6:	f7f3 fa07 	bl	80005f8 <__aeabi_dmul>
 800d1ea:	9b08      	ldr	r3, [sp, #32]
 800d1ec:	1b9e      	subs	r6, r3, r6
 800d1ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d1f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d1f6:	e7e3      	b.n	800d1c0 <_strtod_l+0x3f8>
 800d1f8:	9b08      	ldr	r3, [sp, #32]
 800d1fa:	3316      	adds	r3, #22
 800d1fc:	db0b      	blt.n	800d216 <_strtod_l+0x44e>
 800d1fe:	9b05      	ldr	r3, [sp, #20]
 800d200:	1bdf      	subs	r7, r3, r7
 800d202:	4b54      	ldr	r3, [pc, #336]	; (800d354 <_strtod_l+0x58c>)
 800d204:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d20c:	4640      	mov	r0, r8
 800d20e:	4649      	mov	r1, r9
 800d210:	f7f3 fb1c 	bl	800084c <__aeabi_ddiv>
 800d214:	e7d6      	b.n	800d1c4 <_strtod_l+0x3fc>
 800d216:	9b08      	ldr	r3, [sp, #32]
 800d218:	1b75      	subs	r5, r6, r5
 800d21a:	441d      	add	r5, r3
 800d21c:	2d00      	cmp	r5, #0
 800d21e:	dd70      	ble.n	800d302 <_strtod_l+0x53a>
 800d220:	f015 030f 	ands.w	r3, r5, #15
 800d224:	d00a      	beq.n	800d23c <_strtod_l+0x474>
 800d226:	494b      	ldr	r1, [pc, #300]	; (800d354 <_strtod_l+0x58c>)
 800d228:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d22c:	4642      	mov	r2, r8
 800d22e:	464b      	mov	r3, r9
 800d230:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d234:	f7f3 f9e0 	bl	80005f8 <__aeabi_dmul>
 800d238:	4680      	mov	r8, r0
 800d23a:	4689      	mov	r9, r1
 800d23c:	f035 050f 	bics.w	r5, r5, #15
 800d240:	d04d      	beq.n	800d2de <_strtod_l+0x516>
 800d242:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d246:	dd22      	ble.n	800d28e <_strtod_l+0x4c6>
 800d248:	2500      	movs	r5, #0
 800d24a:	46ab      	mov	fp, r5
 800d24c:	9509      	str	r5, [sp, #36]	; 0x24
 800d24e:	9505      	str	r5, [sp, #20]
 800d250:	2322      	movs	r3, #34	; 0x22
 800d252:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d35c <_strtod_l+0x594>
 800d256:	6023      	str	r3, [r4, #0]
 800d258:	f04f 0800 	mov.w	r8, #0
 800d25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f43f aded 	beq.w	800ce3e <_strtod_l+0x76>
 800d264:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d266:	4620      	mov	r0, r4
 800d268:	f7ff f924 	bl	800c4b4 <_Bfree>
 800d26c:	9905      	ldr	r1, [sp, #20]
 800d26e:	4620      	mov	r0, r4
 800d270:	f7ff f920 	bl	800c4b4 <_Bfree>
 800d274:	4659      	mov	r1, fp
 800d276:	4620      	mov	r0, r4
 800d278:	f7ff f91c 	bl	800c4b4 <_Bfree>
 800d27c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d27e:	4620      	mov	r0, r4
 800d280:	f7ff f918 	bl	800c4b4 <_Bfree>
 800d284:	4629      	mov	r1, r5
 800d286:	4620      	mov	r0, r4
 800d288:	f7ff f914 	bl	800c4b4 <_Bfree>
 800d28c:	e5d7      	b.n	800ce3e <_strtod_l+0x76>
 800d28e:	4b32      	ldr	r3, [pc, #200]	; (800d358 <_strtod_l+0x590>)
 800d290:	9304      	str	r3, [sp, #16]
 800d292:	2300      	movs	r3, #0
 800d294:	112d      	asrs	r5, r5, #4
 800d296:	4640      	mov	r0, r8
 800d298:	4649      	mov	r1, r9
 800d29a:	469a      	mov	sl, r3
 800d29c:	2d01      	cmp	r5, #1
 800d29e:	dc21      	bgt.n	800d2e4 <_strtod_l+0x51c>
 800d2a0:	b10b      	cbz	r3, 800d2a6 <_strtod_l+0x4de>
 800d2a2:	4680      	mov	r8, r0
 800d2a4:	4689      	mov	r9, r1
 800d2a6:	492c      	ldr	r1, [pc, #176]	; (800d358 <_strtod_l+0x590>)
 800d2a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d2ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d2b0:	4642      	mov	r2, r8
 800d2b2:	464b      	mov	r3, r9
 800d2b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2b8:	f7f3 f99e 	bl	80005f8 <__aeabi_dmul>
 800d2bc:	4b27      	ldr	r3, [pc, #156]	; (800d35c <_strtod_l+0x594>)
 800d2be:	460a      	mov	r2, r1
 800d2c0:	400b      	ands	r3, r1
 800d2c2:	4927      	ldr	r1, [pc, #156]	; (800d360 <_strtod_l+0x598>)
 800d2c4:	428b      	cmp	r3, r1
 800d2c6:	4680      	mov	r8, r0
 800d2c8:	d8be      	bhi.n	800d248 <_strtod_l+0x480>
 800d2ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d2ce:	428b      	cmp	r3, r1
 800d2d0:	bf86      	itte	hi
 800d2d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d364 <_strtod_l+0x59c>
 800d2d6:	f04f 38ff 	movhi.w	r8, #4294967295
 800d2da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d2de:	2300      	movs	r3, #0
 800d2e0:	9304      	str	r3, [sp, #16]
 800d2e2:	e07b      	b.n	800d3dc <_strtod_l+0x614>
 800d2e4:	07ea      	lsls	r2, r5, #31
 800d2e6:	d505      	bpl.n	800d2f4 <_strtod_l+0x52c>
 800d2e8:	9b04      	ldr	r3, [sp, #16]
 800d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ee:	f7f3 f983 	bl	80005f8 <__aeabi_dmul>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	9a04      	ldr	r2, [sp, #16]
 800d2f6:	3208      	adds	r2, #8
 800d2f8:	f10a 0a01 	add.w	sl, sl, #1
 800d2fc:	106d      	asrs	r5, r5, #1
 800d2fe:	9204      	str	r2, [sp, #16]
 800d300:	e7cc      	b.n	800d29c <_strtod_l+0x4d4>
 800d302:	d0ec      	beq.n	800d2de <_strtod_l+0x516>
 800d304:	426d      	negs	r5, r5
 800d306:	f015 020f 	ands.w	r2, r5, #15
 800d30a:	d00a      	beq.n	800d322 <_strtod_l+0x55a>
 800d30c:	4b11      	ldr	r3, [pc, #68]	; (800d354 <_strtod_l+0x58c>)
 800d30e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d312:	4640      	mov	r0, r8
 800d314:	4649      	mov	r1, r9
 800d316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31a:	f7f3 fa97 	bl	800084c <__aeabi_ddiv>
 800d31e:	4680      	mov	r8, r0
 800d320:	4689      	mov	r9, r1
 800d322:	112d      	asrs	r5, r5, #4
 800d324:	d0db      	beq.n	800d2de <_strtod_l+0x516>
 800d326:	2d1f      	cmp	r5, #31
 800d328:	dd1e      	ble.n	800d368 <_strtod_l+0x5a0>
 800d32a:	2500      	movs	r5, #0
 800d32c:	46ab      	mov	fp, r5
 800d32e:	9509      	str	r5, [sp, #36]	; 0x24
 800d330:	9505      	str	r5, [sp, #20]
 800d332:	2322      	movs	r3, #34	; 0x22
 800d334:	f04f 0800 	mov.w	r8, #0
 800d338:	f04f 0900 	mov.w	r9, #0
 800d33c:	6023      	str	r3, [r4, #0]
 800d33e:	e78d      	b.n	800d25c <_strtod_l+0x494>
 800d340:	08011ee5 	.word	0x08011ee5
 800d344:	0801210c 	.word	0x0801210c
 800d348:	08011edd 	.word	0x08011edd
 800d34c:	08011f14 	.word	0x08011f14
 800d350:	0801229d 	.word	0x0801229d
 800d354:	08012020 	.word	0x08012020
 800d358:	08011ff8 	.word	0x08011ff8
 800d35c:	7ff00000 	.word	0x7ff00000
 800d360:	7ca00000 	.word	0x7ca00000
 800d364:	7fefffff 	.word	0x7fefffff
 800d368:	f015 0310 	ands.w	r3, r5, #16
 800d36c:	bf18      	it	ne
 800d36e:	236a      	movne	r3, #106	; 0x6a
 800d370:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d714 <_strtod_l+0x94c>
 800d374:	9304      	str	r3, [sp, #16]
 800d376:	4640      	mov	r0, r8
 800d378:	4649      	mov	r1, r9
 800d37a:	2300      	movs	r3, #0
 800d37c:	07ea      	lsls	r2, r5, #31
 800d37e:	d504      	bpl.n	800d38a <_strtod_l+0x5c2>
 800d380:	e9da 2300 	ldrd	r2, r3, [sl]
 800d384:	f7f3 f938 	bl	80005f8 <__aeabi_dmul>
 800d388:	2301      	movs	r3, #1
 800d38a:	106d      	asrs	r5, r5, #1
 800d38c:	f10a 0a08 	add.w	sl, sl, #8
 800d390:	d1f4      	bne.n	800d37c <_strtod_l+0x5b4>
 800d392:	b10b      	cbz	r3, 800d398 <_strtod_l+0x5d0>
 800d394:	4680      	mov	r8, r0
 800d396:	4689      	mov	r9, r1
 800d398:	9b04      	ldr	r3, [sp, #16]
 800d39a:	b1bb      	cbz	r3, 800d3cc <_strtod_l+0x604>
 800d39c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d3a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	dd10      	ble.n	800d3cc <_strtod_l+0x604>
 800d3aa:	2b1f      	cmp	r3, #31
 800d3ac:	f340 811e 	ble.w	800d5ec <_strtod_l+0x824>
 800d3b0:	2b34      	cmp	r3, #52	; 0x34
 800d3b2:	bfde      	ittt	le
 800d3b4:	f04f 33ff 	movle.w	r3, #4294967295
 800d3b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d3bc:	4093      	lslle	r3, r2
 800d3be:	f04f 0800 	mov.w	r8, #0
 800d3c2:	bfcc      	ite	gt
 800d3c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d3c8:	ea03 0901 	andle.w	r9, r3, r1
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	4640      	mov	r0, r8
 800d3d2:	4649      	mov	r1, r9
 800d3d4:	f7f3 fb78 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d1a6      	bne.n	800d32a <_strtod_l+0x562>
 800d3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3e2:	4633      	mov	r3, r6
 800d3e4:	465a      	mov	r2, fp
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f7ff f8cc 	bl	800c584 <__s2b>
 800d3ec:	9009      	str	r0, [sp, #36]	; 0x24
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	f43f af2a 	beq.w	800d248 <_strtod_l+0x480>
 800d3f4:	9a08      	ldr	r2, [sp, #32]
 800d3f6:	9b05      	ldr	r3, [sp, #20]
 800d3f8:	2a00      	cmp	r2, #0
 800d3fa:	eba3 0307 	sub.w	r3, r3, r7
 800d3fe:	bfa8      	it	ge
 800d400:	2300      	movge	r3, #0
 800d402:	930c      	str	r3, [sp, #48]	; 0x30
 800d404:	2500      	movs	r5, #0
 800d406:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d40a:	9312      	str	r3, [sp, #72]	; 0x48
 800d40c:	46ab      	mov	fp, r5
 800d40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d410:	4620      	mov	r0, r4
 800d412:	6859      	ldr	r1, [r3, #4]
 800d414:	f7ff f80e 	bl	800c434 <_Balloc>
 800d418:	9005      	str	r0, [sp, #20]
 800d41a:	2800      	cmp	r0, #0
 800d41c:	f43f af18 	beq.w	800d250 <_strtod_l+0x488>
 800d420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d422:	691a      	ldr	r2, [r3, #16]
 800d424:	3202      	adds	r2, #2
 800d426:	f103 010c 	add.w	r1, r3, #12
 800d42a:	0092      	lsls	r2, r2, #2
 800d42c:	300c      	adds	r0, #12
 800d42e:	f7fe f926 	bl	800b67e <memcpy>
 800d432:	ec49 8b10 	vmov	d0, r8, r9
 800d436:	aa18      	add	r2, sp, #96	; 0x60
 800d438:	a917      	add	r1, sp, #92	; 0x5c
 800d43a:	4620      	mov	r0, r4
 800d43c:	f7ff fbd6 	bl	800cbec <__d2b>
 800d440:	ec49 8b18 	vmov	d8, r8, r9
 800d444:	9016      	str	r0, [sp, #88]	; 0x58
 800d446:	2800      	cmp	r0, #0
 800d448:	f43f af02 	beq.w	800d250 <_strtod_l+0x488>
 800d44c:	2101      	movs	r1, #1
 800d44e:	4620      	mov	r0, r4
 800d450:	f7ff f930 	bl	800c6b4 <__i2b>
 800d454:	4683      	mov	fp, r0
 800d456:	2800      	cmp	r0, #0
 800d458:	f43f aefa 	beq.w	800d250 <_strtod_l+0x488>
 800d45c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d45e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d460:	2e00      	cmp	r6, #0
 800d462:	bfab      	itete	ge
 800d464:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d466:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d468:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d46a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d46e:	bfac      	ite	ge
 800d470:	eb06 0a03 	addge.w	sl, r6, r3
 800d474:	1b9f      	sublt	r7, r3, r6
 800d476:	9b04      	ldr	r3, [sp, #16]
 800d478:	1af6      	subs	r6, r6, r3
 800d47a:	4416      	add	r6, r2
 800d47c:	4ba0      	ldr	r3, [pc, #640]	; (800d700 <_strtod_l+0x938>)
 800d47e:	3e01      	subs	r6, #1
 800d480:	429e      	cmp	r6, r3
 800d482:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d486:	f280 80c4 	bge.w	800d612 <_strtod_l+0x84a>
 800d48a:	1b9b      	subs	r3, r3, r6
 800d48c:	2b1f      	cmp	r3, #31
 800d48e:	eba2 0203 	sub.w	r2, r2, r3
 800d492:	f04f 0101 	mov.w	r1, #1
 800d496:	f300 80b0 	bgt.w	800d5fa <_strtod_l+0x832>
 800d49a:	fa01 f303 	lsl.w	r3, r1, r3
 800d49e:	930e      	str	r3, [sp, #56]	; 0x38
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	930d      	str	r3, [sp, #52]	; 0x34
 800d4a4:	eb0a 0602 	add.w	r6, sl, r2
 800d4a8:	9b04      	ldr	r3, [sp, #16]
 800d4aa:	45b2      	cmp	sl, r6
 800d4ac:	4417      	add	r7, r2
 800d4ae:	441f      	add	r7, r3
 800d4b0:	4653      	mov	r3, sl
 800d4b2:	bfa8      	it	ge
 800d4b4:	4633      	movge	r3, r6
 800d4b6:	42bb      	cmp	r3, r7
 800d4b8:	bfa8      	it	ge
 800d4ba:	463b      	movge	r3, r7
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	bfc2      	ittt	gt
 800d4c0:	1af6      	subgt	r6, r6, r3
 800d4c2:	1aff      	subgt	r7, r7, r3
 800d4c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d4c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	dd17      	ble.n	800d4fe <_strtod_l+0x736>
 800d4ce:	4659      	mov	r1, fp
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f7ff f9ae 	bl	800c834 <__pow5mult>
 800d4d8:	4683      	mov	fp, r0
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	f43f aeb8 	beq.w	800d250 <_strtod_l+0x488>
 800d4e0:	4601      	mov	r1, r0
 800d4e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f7ff f8fb 	bl	800c6e0 <__multiply>
 800d4ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	f43f aeaf 	beq.w	800d250 <_strtod_l+0x488>
 800d4f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f7fe ffdd 	bl	800c4b4 <_Bfree>
 800d4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4fc:	9316      	str	r3, [sp, #88]	; 0x58
 800d4fe:	2e00      	cmp	r6, #0
 800d500:	f300 808c 	bgt.w	800d61c <_strtod_l+0x854>
 800d504:	9b08      	ldr	r3, [sp, #32]
 800d506:	2b00      	cmp	r3, #0
 800d508:	dd08      	ble.n	800d51c <_strtod_l+0x754>
 800d50a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d50c:	9905      	ldr	r1, [sp, #20]
 800d50e:	4620      	mov	r0, r4
 800d510:	f7ff f990 	bl	800c834 <__pow5mult>
 800d514:	9005      	str	r0, [sp, #20]
 800d516:	2800      	cmp	r0, #0
 800d518:	f43f ae9a 	beq.w	800d250 <_strtod_l+0x488>
 800d51c:	2f00      	cmp	r7, #0
 800d51e:	dd08      	ble.n	800d532 <_strtod_l+0x76a>
 800d520:	9905      	ldr	r1, [sp, #20]
 800d522:	463a      	mov	r2, r7
 800d524:	4620      	mov	r0, r4
 800d526:	f7ff f9df 	bl	800c8e8 <__lshift>
 800d52a:	9005      	str	r0, [sp, #20]
 800d52c:	2800      	cmp	r0, #0
 800d52e:	f43f ae8f 	beq.w	800d250 <_strtod_l+0x488>
 800d532:	f1ba 0f00 	cmp.w	sl, #0
 800d536:	dd08      	ble.n	800d54a <_strtod_l+0x782>
 800d538:	4659      	mov	r1, fp
 800d53a:	4652      	mov	r2, sl
 800d53c:	4620      	mov	r0, r4
 800d53e:	f7ff f9d3 	bl	800c8e8 <__lshift>
 800d542:	4683      	mov	fp, r0
 800d544:	2800      	cmp	r0, #0
 800d546:	f43f ae83 	beq.w	800d250 <_strtod_l+0x488>
 800d54a:	9a05      	ldr	r2, [sp, #20]
 800d54c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d54e:	4620      	mov	r0, r4
 800d550:	f7ff fa52 	bl	800c9f8 <__mdiff>
 800d554:	4605      	mov	r5, r0
 800d556:	2800      	cmp	r0, #0
 800d558:	f43f ae7a 	beq.w	800d250 <_strtod_l+0x488>
 800d55c:	68c3      	ldr	r3, [r0, #12]
 800d55e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d560:	2300      	movs	r3, #0
 800d562:	60c3      	str	r3, [r0, #12]
 800d564:	4659      	mov	r1, fp
 800d566:	f7ff fa2b 	bl	800c9c0 <__mcmp>
 800d56a:	2800      	cmp	r0, #0
 800d56c:	da60      	bge.n	800d630 <_strtod_l+0x868>
 800d56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d570:	ea53 0308 	orrs.w	r3, r3, r8
 800d574:	f040 8084 	bne.w	800d680 <_strtod_l+0x8b8>
 800d578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d17f      	bne.n	800d680 <_strtod_l+0x8b8>
 800d580:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d584:	0d1b      	lsrs	r3, r3, #20
 800d586:	051b      	lsls	r3, r3, #20
 800d588:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d58c:	d978      	bls.n	800d680 <_strtod_l+0x8b8>
 800d58e:	696b      	ldr	r3, [r5, #20]
 800d590:	b913      	cbnz	r3, 800d598 <_strtod_l+0x7d0>
 800d592:	692b      	ldr	r3, [r5, #16]
 800d594:	2b01      	cmp	r3, #1
 800d596:	dd73      	ble.n	800d680 <_strtod_l+0x8b8>
 800d598:	4629      	mov	r1, r5
 800d59a:	2201      	movs	r2, #1
 800d59c:	4620      	mov	r0, r4
 800d59e:	f7ff f9a3 	bl	800c8e8 <__lshift>
 800d5a2:	4659      	mov	r1, fp
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	f7ff fa0b 	bl	800c9c0 <__mcmp>
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	dd68      	ble.n	800d680 <_strtod_l+0x8b8>
 800d5ae:	9904      	ldr	r1, [sp, #16]
 800d5b0:	4a54      	ldr	r2, [pc, #336]	; (800d704 <_strtod_l+0x93c>)
 800d5b2:	464b      	mov	r3, r9
 800d5b4:	2900      	cmp	r1, #0
 800d5b6:	f000 8084 	beq.w	800d6c2 <_strtod_l+0x8fa>
 800d5ba:	ea02 0109 	and.w	r1, r2, r9
 800d5be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d5c2:	dc7e      	bgt.n	800d6c2 <_strtod_l+0x8fa>
 800d5c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d5c8:	f77f aeb3 	ble.w	800d332 <_strtod_l+0x56a>
 800d5cc:	4b4e      	ldr	r3, [pc, #312]	; (800d708 <_strtod_l+0x940>)
 800d5ce:	4640      	mov	r0, r8
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f7f3 f810 	bl	80005f8 <__aeabi_dmul>
 800d5d8:	4b4a      	ldr	r3, [pc, #296]	; (800d704 <_strtod_l+0x93c>)
 800d5da:	400b      	ands	r3, r1
 800d5dc:	4680      	mov	r8, r0
 800d5de:	4689      	mov	r9, r1
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f47f ae3f 	bne.w	800d264 <_strtod_l+0x49c>
 800d5e6:	2322      	movs	r3, #34	; 0x22
 800d5e8:	6023      	str	r3, [r4, #0]
 800d5ea:	e63b      	b.n	800d264 <_strtod_l+0x49c>
 800d5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5f4:	ea03 0808 	and.w	r8, r3, r8
 800d5f8:	e6e8      	b.n	800d3cc <_strtod_l+0x604>
 800d5fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d5fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d602:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d606:	36e2      	adds	r6, #226	; 0xe2
 800d608:	fa01 f306 	lsl.w	r3, r1, r6
 800d60c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d610:	e748      	b.n	800d4a4 <_strtod_l+0x6dc>
 800d612:	2100      	movs	r1, #0
 800d614:	2301      	movs	r3, #1
 800d616:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d61a:	e743      	b.n	800d4a4 <_strtod_l+0x6dc>
 800d61c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d61e:	4632      	mov	r2, r6
 800d620:	4620      	mov	r0, r4
 800d622:	f7ff f961 	bl	800c8e8 <__lshift>
 800d626:	9016      	str	r0, [sp, #88]	; 0x58
 800d628:	2800      	cmp	r0, #0
 800d62a:	f47f af6b 	bne.w	800d504 <_strtod_l+0x73c>
 800d62e:	e60f      	b.n	800d250 <_strtod_l+0x488>
 800d630:	46ca      	mov	sl, r9
 800d632:	d171      	bne.n	800d718 <_strtod_l+0x950>
 800d634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d636:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d63a:	b352      	cbz	r2, 800d692 <_strtod_l+0x8ca>
 800d63c:	4a33      	ldr	r2, [pc, #204]	; (800d70c <_strtod_l+0x944>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d12a      	bne.n	800d698 <_strtod_l+0x8d0>
 800d642:	9b04      	ldr	r3, [sp, #16]
 800d644:	4641      	mov	r1, r8
 800d646:	b1fb      	cbz	r3, 800d688 <_strtod_l+0x8c0>
 800d648:	4b2e      	ldr	r3, [pc, #184]	; (800d704 <_strtod_l+0x93c>)
 800d64a:	ea09 0303 	and.w	r3, r9, r3
 800d64e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d652:	f04f 32ff 	mov.w	r2, #4294967295
 800d656:	d81a      	bhi.n	800d68e <_strtod_l+0x8c6>
 800d658:	0d1b      	lsrs	r3, r3, #20
 800d65a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d65e:	fa02 f303 	lsl.w	r3, r2, r3
 800d662:	4299      	cmp	r1, r3
 800d664:	d118      	bne.n	800d698 <_strtod_l+0x8d0>
 800d666:	4b2a      	ldr	r3, [pc, #168]	; (800d710 <_strtod_l+0x948>)
 800d668:	459a      	cmp	sl, r3
 800d66a:	d102      	bne.n	800d672 <_strtod_l+0x8aa>
 800d66c:	3101      	adds	r1, #1
 800d66e:	f43f adef 	beq.w	800d250 <_strtod_l+0x488>
 800d672:	4b24      	ldr	r3, [pc, #144]	; (800d704 <_strtod_l+0x93c>)
 800d674:	ea0a 0303 	and.w	r3, sl, r3
 800d678:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d67c:	f04f 0800 	mov.w	r8, #0
 800d680:	9b04      	ldr	r3, [sp, #16]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1a2      	bne.n	800d5cc <_strtod_l+0x804>
 800d686:	e5ed      	b.n	800d264 <_strtod_l+0x49c>
 800d688:	f04f 33ff 	mov.w	r3, #4294967295
 800d68c:	e7e9      	b.n	800d662 <_strtod_l+0x89a>
 800d68e:	4613      	mov	r3, r2
 800d690:	e7e7      	b.n	800d662 <_strtod_l+0x89a>
 800d692:	ea53 0308 	orrs.w	r3, r3, r8
 800d696:	d08a      	beq.n	800d5ae <_strtod_l+0x7e6>
 800d698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d69a:	b1e3      	cbz	r3, 800d6d6 <_strtod_l+0x90e>
 800d69c:	ea13 0f0a 	tst.w	r3, sl
 800d6a0:	d0ee      	beq.n	800d680 <_strtod_l+0x8b8>
 800d6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6a4:	9a04      	ldr	r2, [sp, #16]
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	4649      	mov	r1, r9
 800d6aa:	b1c3      	cbz	r3, 800d6de <_strtod_l+0x916>
 800d6ac:	f7ff fb6f 	bl	800cd8e <sulp>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	ec51 0b18 	vmov	r0, r1, d8
 800d6b8:	f7f2 fde8 	bl	800028c <__adddf3>
 800d6bc:	4680      	mov	r8, r0
 800d6be:	4689      	mov	r9, r1
 800d6c0:	e7de      	b.n	800d680 <_strtod_l+0x8b8>
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d6c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d6cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d6d0:	f04f 38ff 	mov.w	r8, #4294967295
 800d6d4:	e7d4      	b.n	800d680 <_strtod_l+0x8b8>
 800d6d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6d8:	ea13 0f08 	tst.w	r3, r8
 800d6dc:	e7e0      	b.n	800d6a0 <_strtod_l+0x8d8>
 800d6de:	f7ff fb56 	bl	800cd8e <sulp>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	ec51 0b18 	vmov	r0, r1, d8
 800d6ea:	f7f2 fdcd 	bl	8000288 <__aeabi_dsub>
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	4680      	mov	r8, r0
 800d6f4:	4689      	mov	r9, r1
 800d6f6:	f7f3 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	d0c0      	beq.n	800d680 <_strtod_l+0x8b8>
 800d6fe:	e618      	b.n	800d332 <_strtod_l+0x56a>
 800d700:	fffffc02 	.word	0xfffffc02
 800d704:	7ff00000 	.word	0x7ff00000
 800d708:	39500000 	.word	0x39500000
 800d70c:	000fffff 	.word	0x000fffff
 800d710:	7fefffff 	.word	0x7fefffff
 800d714:	08012120 	.word	0x08012120
 800d718:	4659      	mov	r1, fp
 800d71a:	4628      	mov	r0, r5
 800d71c:	f7ff fac0 	bl	800cca0 <__ratio>
 800d720:	ec57 6b10 	vmov	r6, r7, d0
 800d724:	ee10 0a10 	vmov	r0, s0
 800d728:	2200      	movs	r2, #0
 800d72a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d72e:	4639      	mov	r1, r7
 800d730:	f7f3 f9de 	bl	8000af0 <__aeabi_dcmple>
 800d734:	2800      	cmp	r0, #0
 800d736:	d071      	beq.n	800d81c <_strtod_l+0xa54>
 800d738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d17c      	bne.n	800d838 <_strtod_l+0xa70>
 800d73e:	f1b8 0f00 	cmp.w	r8, #0
 800d742:	d15a      	bne.n	800d7fa <_strtod_l+0xa32>
 800d744:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d15d      	bne.n	800d808 <_strtod_l+0xa40>
 800d74c:	4b90      	ldr	r3, [pc, #576]	; (800d990 <_strtod_l+0xbc8>)
 800d74e:	2200      	movs	r2, #0
 800d750:	4630      	mov	r0, r6
 800d752:	4639      	mov	r1, r7
 800d754:	f7f3 f9c2 	bl	8000adc <__aeabi_dcmplt>
 800d758:	2800      	cmp	r0, #0
 800d75a:	d15c      	bne.n	800d816 <_strtod_l+0xa4e>
 800d75c:	4630      	mov	r0, r6
 800d75e:	4639      	mov	r1, r7
 800d760:	4b8c      	ldr	r3, [pc, #560]	; (800d994 <_strtod_l+0xbcc>)
 800d762:	2200      	movs	r2, #0
 800d764:	f7f2 ff48 	bl	80005f8 <__aeabi_dmul>
 800d768:	4606      	mov	r6, r0
 800d76a:	460f      	mov	r7, r1
 800d76c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d770:	9606      	str	r6, [sp, #24]
 800d772:	9307      	str	r3, [sp, #28]
 800d774:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d778:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d77c:	4b86      	ldr	r3, [pc, #536]	; (800d998 <_strtod_l+0xbd0>)
 800d77e:	ea0a 0303 	and.w	r3, sl, r3
 800d782:	930d      	str	r3, [sp, #52]	; 0x34
 800d784:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d786:	4b85      	ldr	r3, [pc, #532]	; (800d99c <_strtod_l+0xbd4>)
 800d788:	429a      	cmp	r2, r3
 800d78a:	f040 8090 	bne.w	800d8ae <_strtod_l+0xae6>
 800d78e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d792:	ec49 8b10 	vmov	d0, r8, r9
 800d796:	f7ff f9b9 	bl	800cb0c <__ulp>
 800d79a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d79e:	ec51 0b10 	vmov	r0, r1, d0
 800d7a2:	f7f2 ff29 	bl	80005f8 <__aeabi_dmul>
 800d7a6:	4642      	mov	r2, r8
 800d7a8:	464b      	mov	r3, r9
 800d7aa:	f7f2 fd6f 	bl	800028c <__adddf3>
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4979      	ldr	r1, [pc, #484]	; (800d998 <_strtod_l+0xbd0>)
 800d7b2:	4a7b      	ldr	r2, [pc, #492]	; (800d9a0 <_strtod_l+0xbd8>)
 800d7b4:	4019      	ands	r1, r3
 800d7b6:	4291      	cmp	r1, r2
 800d7b8:	4680      	mov	r8, r0
 800d7ba:	d944      	bls.n	800d846 <_strtod_l+0xa7e>
 800d7bc:	ee18 2a90 	vmov	r2, s17
 800d7c0:	4b78      	ldr	r3, [pc, #480]	; (800d9a4 <_strtod_l+0xbdc>)
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d104      	bne.n	800d7d0 <_strtod_l+0xa08>
 800d7c6:	ee18 3a10 	vmov	r3, s16
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	f43f ad40 	beq.w	800d250 <_strtod_l+0x488>
 800d7d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d9a4 <_strtod_l+0xbdc>
 800d7d4:	f04f 38ff 	mov.w	r8, #4294967295
 800d7d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f7fe fe6a 	bl	800c4b4 <_Bfree>
 800d7e0:	9905      	ldr	r1, [sp, #20]
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f7fe fe66 	bl	800c4b4 <_Bfree>
 800d7e8:	4659      	mov	r1, fp
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f7fe fe62 	bl	800c4b4 <_Bfree>
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f7fe fe5e 	bl	800c4b4 <_Bfree>
 800d7f8:	e609      	b.n	800d40e <_strtod_l+0x646>
 800d7fa:	f1b8 0f01 	cmp.w	r8, #1
 800d7fe:	d103      	bne.n	800d808 <_strtod_l+0xa40>
 800d800:	f1b9 0f00 	cmp.w	r9, #0
 800d804:	f43f ad95 	beq.w	800d332 <_strtod_l+0x56a>
 800d808:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d960 <_strtod_l+0xb98>
 800d80c:	4f60      	ldr	r7, [pc, #384]	; (800d990 <_strtod_l+0xbc8>)
 800d80e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d812:	2600      	movs	r6, #0
 800d814:	e7ae      	b.n	800d774 <_strtod_l+0x9ac>
 800d816:	4f5f      	ldr	r7, [pc, #380]	; (800d994 <_strtod_l+0xbcc>)
 800d818:	2600      	movs	r6, #0
 800d81a:	e7a7      	b.n	800d76c <_strtod_l+0x9a4>
 800d81c:	4b5d      	ldr	r3, [pc, #372]	; (800d994 <_strtod_l+0xbcc>)
 800d81e:	4630      	mov	r0, r6
 800d820:	4639      	mov	r1, r7
 800d822:	2200      	movs	r2, #0
 800d824:	f7f2 fee8 	bl	80005f8 <__aeabi_dmul>
 800d828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d82a:	4606      	mov	r6, r0
 800d82c:	460f      	mov	r7, r1
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d09c      	beq.n	800d76c <_strtod_l+0x9a4>
 800d832:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d836:	e79d      	b.n	800d774 <_strtod_l+0x9ac>
 800d838:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d968 <_strtod_l+0xba0>
 800d83c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d840:	ec57 6b17 	vmov	r6, r7, d7
 800d844:	e796      	b.n	800d774 <_strtod_l+0x9ac>
 800d846:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d84a:	9b04      	ldr	r3, [sp, #16]
 800d84c:	46ca      	mov	sl, r9
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d1c2      	bne.n	800d7d8 <_strtod_l+0xa10>
 800d852:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d856:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d858:	0d1b      	lsrs	r3, r3, #20
 800d85a:	051b      	lsls	r3, r3, #20
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d1bb      	bne.n	800d7d8 <_strtod_l+0xa10>
 800d860:	4630      	mov	r0, r6
 800d862:	4639      	mov	r1, r7
 800d864:	f7f3 fa28 	bl	8000cb8 <__aeabi_d2lz>
 800d868:	f7f2 fe98 	bl	800059c <__aeabi_l2d>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	4630      	mov	r0, r6
 800d872:	4639      	mov	r1, r7
 800d874:	f7f2 fd08 	bl	8000288 <__aeabi_dsub>
 800d878:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d87a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d87e:	ea43 0308 	orr.w	r3, r3, r8
 800d882:	4313      	orrs	r3, r2
 800d884:	4606      	mov	r6, r0
 800d886:	460f      	mov	r7, r1
 800d888:	d054      	beq.n	800d934 <_strtod_l+0xb6c>
 800d88a:	a339      	add	r3, pc, #228	; (adr r3, 800d970 <_strtod_l+0xba8>)
 800d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d890:	f7f3 f924 	bl	8000adc <__aeabi_dcmplt>
 800d894:	2800      	cmp	r0, #0
 800d896:	f47f ace5 	bne.w	800d264 <_strtod_l+0x49c>
 800d89a:	a337      	add	r3, pc, #220	; (adr r3, 800d978 <_strtod_l+0xbb0>)
 800d89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	4639      	mov	r1, r7
 800d8a4:	f7f3 f938 	bl	8000b18 <__aeabi_dcmpgt>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d095      	beq.n	800d7d8 <_strtod_l+0xa10>
 800d8ac:	e4da      	b.n	800d264 <_strtod_l+0x49c>
 800d8ae:	9b04      	ldr	r3, [sp, #16]
 800d8b0:	b333      	cbz	r3, 800d900 <_strtod_l+0xb38>
 800d8b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d8b8:	d822      	bhi.n	800d900 <_strtod_l+0xb38>
 800d8ba:	a331      	add	r3, pc, #196	; (adr r3, 800d980 <_strtod_l+0xbb8>)
 800d8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	f7f3 f914 	bl	8000af0 <__aeabi_dcmple>
 800d8c8:	b1a0      	cbz	r0, 800d8f4 <_strtod_l+0xb2c>
 800d8ca:	4639      	mov	r1, r7
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	f7f3 f96b 	bl	8000ba8 <__aeabi_d2uiz>
 800d8d2:	2801      	cmp	r0, #1
 800d8d4:	bf38      	it	cc
 800d8d6:	2001      	movcc	r0, #1
 800d8d8:	f7f2 fe14 	bl	8000504 <__aeabi_ui2d>
 800d8dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8de:	4606      	mov	r6, r0
 800d8e0:	460f      	mov	r7, r1
 800d8e2:	bb23      	cbnz	r3, 800d92e <_strtod_l+0xb66>
 800d8e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8e8:	9010      	str	r0, [sp, #64]	; 0x40
 800d8ea:	9311      	str	r3, [sp, #68]	; 0x44
 800d8ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d8f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d8f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d8fc:	1a9b      	subs	r3, r3, r2
 800d8fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800d900:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d904:	eeb0 0a48 	vmov.f32	s0, s16
 800d908:	eef0 0a68 	vmov.f32	s1, s17
 800d90c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d910:	f7ff f8fc 	bl	800cb0c <__ulp>
 800d914:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d918:	ec53 2b10 	vmov	r2, r3, d0
 800d91c:	f7f2 fe6c 	bl	80005f8 <__aeabi_dmul>
 800d920:	ec53 2b18 	vmov	r2, r3, d8
 800d924:	f7f2 fcb2 	bl	800028c <__adddf3>
 800d928:	4680      	mov	r8, r0
 800d92a:	4689      	mov	r9, r1
 800d92c:	e78d      	b.n	800d84a <_strtod_l+0xa82>
 800d92e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d932:	e7db      	b.n	800d8ec <_strtod_l+0xb24>
 800d934:	a314      	add	r3, pc, #80	; (adr r3, 800d988 <_strtod_l+0xbc0>)
 800d936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93a:	f7f3 f8cf 	bl	8000adc <__aeabi_dcmplt>
 800d93e:	e7b3      	b.n	800d8a8 <_strtod_l+0xae0>
 800d940:	2300      	movs	r3, #0
 800d942:	930a      	str	r3, [sp, #40]	; 0x28
 800d944:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d948:	6013      	str	r3, [r2, #0]
 800d94a:	f7ff ba7c 	b.w	800ce46 <_strtod_l+0x7e>
 800d94e:	2a65      	cmp	r2, #101	; 0x65
 800d950:	f43f ab75 	beq.w	800d03e <_strtod_l+0x276>
 800d954:	2a45      	cmp	r2, #69	; 0x45
 800d956:	f43f ab72 	beq.w	800d03e <_strtod_l+0x276>
 800d95a:	2301      	movs	r3, #1
 800d95c:	f7ff bbaa 	b.w	800d0b4 <_strtod_l+0x2ec>
 800d960:	00000000 	.word	0x00000000
 800d964:	bff00000 	.word	0xbff00000
 800d968:	00000000 	.word	0x00000000
 800d96c:	3ff00000 	.word	0x3ff00000
 800d970:	94a03595 	.word	0x94a03595
 800d974:	3fdfffff 	.word	0x3fdfffff
 800d978:	35afe535 	.word	0x35afe535
 800d97c:	3fe00000 	.word	0x3fe00000
 800d980:	ffc00000 	.word	0xffc00000
 800d984:	41dfffff 	.word	0x41dfffff
 800d988:	94a03595 	.word	0x94a03595
 800d98c:	3fcfffff 	.word	0x3fcfffff
 800d990:	3ff00000 	.word	0x3ff00000
 800d994:	3fe00000 	.word	0x3fe00000
 800d998:	7ff00000 	.word	0x7ff00000
 800d99c:	7fe00000 	.word	0x7fe00000
 800d9a0:	7c9fffff 	.word	0x7c9fffff
 800d9a4:	7fefffff 	.word	0x7fefffff

0800d9a8 <_strtod_r>:
 800d9a8:	4b01      	ldr	r3, [pc, #4]	; (800d9b0 <_strtod_r+0x8>)
 800d9aa:	f7ff ba0d 	b.w	800cdc8 <_strtod_l>
 800d9ae:	bf00      	nop
 800d9b0:	20000068 	.word	0x20000068

0800d9b4 <_strtol_l.constprop.0>:
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9ba:	d001      	beq.n	800d9c0 <_strtol_l.constprop.0+0xc>
 800d9bc:	2b24      	cmp	r3, #36	; 0x24
 800d9be:	d906      	bls.n	800d9ce <_strtol_l.constprop.0+0x1a>
 800d9c0:	f7fd fe30 	bl	800b624 <__errno>
 800d9c4:	2316      	movs	r3, #22
 800d9c6:	6003      	str	r3, [r0, #0]
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dab4 <_strtol_l.constprop.0+0x100>
 800d9d2:	460d      	mov	r5, r1
 800d9d4:	462e      	mov	r6, r5
 800d9d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9da:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d9de:	f017 0708 	ands.w	r7, r7, #8
 800d9e2:	d1f7      	bne.n	800d9d4 <_strtol_l.constprop.0+0x20>
 800d9e4:	2c2d      	cmp	r4, #45	; 0x2d
 800d9e6:	d132      	bne.n	800da4e <_strtol_l.constprop.0+0x9a>
 800d9e8:	782c      	ldrb	r4, [r5, #0]
 800d9ea:	2701      	movs	r7, #1
 800d9ec:	1cb5      	adds	r5, r6, #2
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d05b      	beq.n	800daaa <_strtol_l.constprop.0+0xf6>
 800d9f2:	2b10      	cmp	r3, #16
 800d9f4:	d109      	bne.n	800da0a <_strtol_l.constprop.0+0x56>
 800d9f6:	2c30      	cmp	r4, #48	; 0x30
 800d9f8:	d107      	bne.n	800da0a <_strtol_l.constprop.0+0x56>
 800d9fa:	782c      	ldrb	r4, [r5, #0]
 800d9fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800da00:	2c58      	cmp	r4, #88	; 0x58
 800da02:	d14d      	bne.n	800daa0 <_strtol_l.constprop.0+0xec>
 800da04:	786c      	ldrb	r4, [r5, #1]
 800da06:	2310      	movs	r3, #16
 800da08:	3502      	adds	r5, #2
 800da0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800da0e:	f108 38ff 	add.w	r8, r8, #4294967295
 800da12:	f04f 0e00 	mov.w	lr, #0
 800da16:	fbb8 f9f3 	udiv	r9, r8, r3
 800da1a:	4676      	mov	r6, lr
 800da1c:	fb03 8a19 	mls	sl, r3, r9, r8
 800da20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800da24:	f1bc 0f09 	cmp.w	ip, #9
 800da28:	d816      	bhi.n	800da58 <_strtol_l.constprop.0+0xa4>
 800da2a:	4664      	mov	r4, ip
 800da2c:	42a3      	cmp	r3, r4
 800da2e:	dd24      	ble.n	800da7a <_strtol_l.constprop.0+0xc6>
 800da30:	f1be 3fff 	cmp.w	lr, #4294967295
 800da34:	d008      	beq.n	800da48 <_strtol_l.constprop.0+0x94>
 800da36:	45b1      	cmp	r9, r6
 800da38:	d31c      	bcc.n	800da74 <_strtol_l.constprop.0+0xc0>
 800da3a:	d101      	bne.n	800da40 <_strtol_l.constprop.0+0x8c>
 800da3c:	45a2      	cmp	sl, r4
 800da3e:	db19      	blt.n	800da74 <_strtol_l.constprop.0+0xc0>
 800da40:	fb06 4603 	mla	r6, r6, r3, r4
 800da44:	f04f 0e01 	mov.w	lr, #1
 800da48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da4c:	e7e8      	b.n	800da20 <_strtol_l.constprop.0+0x6c>
 800da4e:	2c2b      	cmp	r4, #43	; 0x2b
 800da50:	bf04      	itt	eq
 800da52:	782c      	ldrbeq	r4, [r5, #0]
 800da54:	1cb5      	addeq	r5, r6, #2
 800da56:	e7ca      	b.n	800d9ee <_strtol_l.constprop.0+0x3a>
 800da58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800da5c:	f1bc 0f19 	cmp.w	ip, #25
 800da60:	d801      	bhi.n	800da66 <_strtol_l.constprop.0+0xb2>
 800da62:	3c37      	subs	r4, #55	; 0x37
 800da64:	e7e2      	b.n	800da2c <_strtol_l.constprop.0+0x78>
 800da66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800da6a:	f1bc 0f19 	cmp.w	ip, #25
 800da6e:	d804      	bhi.n	800da7a <_strtol_l.constprop.0+0xc6>
 800da70:	3c57      	subs	r4, #87	; 0x57
 800da72:	e7db      	b.n	800da2c <_strtol_l.constprop.0+0x78>
 800da74:	f04f 3eff 	mov.w	lr, #4294967295
 800da78:	e7e6      	b.n	800da48 <_strtol_l.constprop.0+0x94>
 800da7a:	f1be 3fff 	cmp.w	lr, #4294967295
 800da7e:	d105      	bne.n	800da8c <_strtol_l.constprop.0+0xd8>
 800da80:	2322      	movs	r3, #34	; 0x22
 800da82:	6003      	str	r3, [r0, #0]
 800da84:	4646      	mov	r6, r8
 800da86:	b942      	cbnz	r2, 800da9a <_strtol_l.constprop.0+0xe6>
 800da88:	4630      	mov	r0, r6
 800da8a:	e79e      	b.n	800d9ca <_strtol_l.constprop.0+0x16>
 800da8c:	b107      	cbz	r7, 800da90 <_strtol_l.constprop.0+0xdc>
 800da8e:	4276      	negs	r6, r6
 800da90:	2a00      	cmp	r2, #0
 800da92:	d0f9      	beq.n	800da88 <_strtol_l.constprop.0+0xd4>
 800da94:	f1be 0f00 	cmp.w	lr, #0
 800da98:	d000      	beq.n	800da9c <_strtol_l.constprop.0+0xe8>
 800da9a:	1e69      	subs	r1, r5, #1
 800da9c:	6011      	str	r1, [r2, #0]
 800da9e:	e7f3      	b.n	800da88 <_strtol_l.constprop.0+0xd4>
 800daa0:	2430      	movs	r4, #48	; 0x30
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1b1      	bne.n	800da0a <_strtol_l.constprop.0+0x56>
 800daa6:	2308      	movs	r3, #8
 800daa8:	e7af      	b.n	800da0a <_strtol_l.constprop.0+0x56>
 800daaa:	2c30      	cmp	r4, #48	; 0x30
 800daac:	d0a5      	beq.n	800d9fa <_strtol_l.constprop.0+0x46>
 800daae:	230a      	movs	r3, #10
 800dab0:	e7ab      	b.n	800da0a <_strtol_l.constprop.0+0x56>
 800dab2:	bf00      	nop
 800dab4:	08012149 	.word	0x08012149

0800dab8 <_strtol_r>:
 800dab8:	f7ff bf7c 	b.w	800d9b4 <_strtol_l.constprop.0>

0800dabc <__ssputs_r>:
 800dabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dac0:	688e      	ldr	r6, [r1, #8]
 800dac2:	461f      	mov	r7, r3
 800dac4:	42be      	cmp	r6, r7
 800dac6:	680b      	ldr	r3, [r1, #0]
 800dac8:	4682      	mov	sl, r0
 800daca:	460c      	mov	r4, r1
 800dacc:	4690      	mov	r8, r2
 800dace:	d82c      	bhi.n	800db2a <__ssputs_r+0x6e>
 800dad0:	898a      	ldrh	r2, [r1, #12]
 800dad2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dad6:	d026      	beq.n	800db26 <__ssputs_r+0x6a>
 800dad8:	6965      	ldr	r5, [r4, #20]
 800dada:	6909      	ldr	r1, [r1, #16]
 800dadc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dae0:	eba3 0901 	sub.w	r9, r3, r1
 800dae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dae8:	1c7b      	adds	r3, r7, #1
 800daea:	444b      	add	r3, r9
 800daec:	106d      	asrs	r5, r5, #1
 800daee:	429d      	cmp	r5, r3
 800daf0:	bf38      	it	cc
 800daf2:	461d      	movcc	r5, r3
 800daf4:	0553      	lsls	r3, r2, #21
 800daf6:	d527      	bpl.n	800db48 <__ssputs_r+0x8c>
 800daf8:	4629      	mov	r1, r5
 800dafa:	f7fc fd09 	bl	800a510 <_malloc_r>
 800dafe:	4606      	mov	r6, r0
 800db00:	b360      	cbz	r0, 800db5c <__ssputs_r+0xa0>
 800db02:	6921      	ldr	r1, [r4, #16]
 800db04:	464a      	mov	r2, r9
 800db06:	f7fd fdba 	bl	800b67e <memcpy>
 800db0a:	89a3      	ldrh	r3, [r4, #12]
 800db0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db14:	81a3      	strh	r3, [r4, #12]
 800db16:	6126      	str	r6, [r4, #16]
 800db18:	6165      	str	r5, [r4, #20]
 800db1a:	444e      	add	r6, r9
 800db1c:	eba5 0509 	sub.w	r5, r5, r9
 800db20:	6026      	str	r6, [r4, #0]
 800db22:	60a5      	str	r5, [r4, #8]
 800db24:	463e      	mov	r6, r7
 800db26:	42be      	cmp	r6, r7
 800db28:	d900      	bls.n	800db2c <__ssputs_r+0x70>
 800db2a:	463e      	mov	r6, r7
 800db2c:	6820      	ldr	r0, [r4, #0]
 800db2e:	4632      	mov	r2, r6
 800db30:	4641      	mov	r1, r8
 800db32:	f000 f9c9 	bl	800dec8 <memmove>
 800db36:	68a3      	ldr	r3, [r4, #8]
 800db38:	1b9b      	subs	r3, r3, r6
 800db3a:	60a3      	str	r3, [r4, #8]
 800db3c:	6823      	ldr	r3, [r4, #0]
 800db3e:	4433      	add	r3, r6
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	2000      	movs	r0, #0
 800db44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db48:	462a      	mov	r2, r5
 800db4a:	f000 fd8e 	bl	800e66a <_realloc_r>
 800db4e:	4606      	mov	r6, r0
 800db50:	2800      	cmp	r0, #0
 800db52:	d1e0      	bne.n	800db16 <__ssputs_r+0x5a>
 800db54:	6921      	ldr	r1, [r4, #16]
 800db56:	4650      	mov	r0, sl
 800db58:	f7fe fc20 	bl	800c39c <_free_r>
 800db5c:	230c      	movs	r3, #12
 800db5e:	f8ca 3000 	str.w	r3, [sl]
 800db62:	89a3      	ldrh	r3, [r4, #12]
 800db64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db68:	81a3      	strh	r3, [r4, #12]
 800db6a:	f04f 30ff 	mov.w	r0, #4294967295
 800db6e:	e7e9      	b.n	800db44 <__ssputs_r+0x88>

0800db70 <_svfiprintf_r>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	4698      	mov	r8, r3
 800db76:	898b      	ldrh	r3, [r1, #12]
 800db78:	061b      	lsls	r3, r3, #24
 800db7a:	b09d      	sub	sp, #116	; 0x74
 800db7c:	4607      	mov	r7, r0
 800db7e:	460d      	mov	r5, r1
 800db80:	4614      	mov	r4, r2
 800db82:	d50e      	bpl.n	800dba2 <_svfiprintf_r+0x32>
 800db84:	690b      	ldr	r3, [r1, #16]
 800db86:	b963      	cbnz	r3, 800dba2 <_svfiprintf_r+0x32>
 800db88:	2140      	movs	r1, #64	; 0x40
 800db8a:	f7fc fcc1 	bl	800a510 <_malloc_r>
 800db8e:	6028      	str	r0, [r5, #0]
 800db90:	6128      	str	r0, [r5, #16]
 800db92:	b920      	cbnz	r0, 800db9e <_svfiprintf_r+0x2e>
 800db94:	230c      	movs	r3, #12
 800db96:	603b      	str	r3, [r7, #0]
 800db98:	f04f 30ff 	mov.w	r0, #4294967295
 800db9c:	e0d0      	b.n	800dd40 <_svfiprintf_r+0x1d0>
 800db9e:	2340      	movs	r3, #64	; 0x40
 800dba0:	616b      	str	r3, [r5, #20]
 800dba2:	2300      	movs	r3, #0
 800dba4:	9309      	str	r3, [sp, #36]	; 0x24
 800dba6:	2320      	movs	r3, #32
 800dba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbac:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbb0:	2330      	movs	r3, #48	; 0x30
 800dbb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dd58 <_svfiprintf_r+0x1e8>
 800dbb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbba:	f04f 0901 	mov.w	r9, #1
 800dbbe:	4623      	mov	r3, r4
 800dbc0:	469a      	mov	sl, r3
 800dbc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbc6:	b10a      	cbz	r2, 800dbcc <_svfiprintf_r+0x5c>
 800dbc8:	2a25      	cmp	r2, #37	; 0x25
 800dbca:	d1f9      	bne.n	800dbc0 <_svfiprintf_r+0x50>
 800dbcc:	ebba 0b04 	subs.w	fp, sl, r4
 800dbd0:	d00b      	beq.n	800dbea <_svfiprintf_r+0x7a>
 800dbd2:	465b      	mov	r3, fp
 800dbd4:	4622      	mov	r2, r4
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	4638      	mov	r0, r7
 800dbda:	f7ff ff6f 	bl	800dabc <__ssputs_r>
 800dbde:	3001      	adds	r0, #1
 800dbe0:	f000 80a9 	beq.w	800dd36 <_svfiprintf_r+0x1c6>
 800dbe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbe6:	445a      	add	r2, fp
 800dbe8:	9209      	str	r2, [sp, #36]	; 0x24
 800dbea:	f89a 3000 	ldrb.w	r3, [sl]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	f000 80a1 	beq.w	800dd36 <_svfiprintf_r+0x1c6>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbfe:	f10a 0a01 	add.w	sl, sl, #1
 800dc02:	9304      	str	r3, [sp, #16]
 800dc04:	9307      	str	r3, [sp, #28]
 800dc06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc0a:	931a      	str	r3, [sp, #104]	; 0x68
 800dc0c:	4654      	mov	r4, sl
 800dc0e:	2205      	movs	r2, #5
 800dc10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc14:	4850      	ldr	r0, [pc, #320]	; (800dd58 <_svfiprintf_r+0x1e8>)
 800dc16:	f7f2 fadb 	bl	80001d0 <memchr>
 800dc1a:	9a04      	ldr	r2, [sp, #16]
 800dc1c:	b9d8      	cbnz	r0, 800dc56 <_svfiprintf_r+0xe6>
 800dc1e:	06d0      	lsls	r0, r2, #27
 800dc20:	bf44      	itt	mi
 800dc22:	2320      	movmi	r3, #32
 800dc24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc28:	0711      	lsls	r1, r2, #28
 800dc2a:	bf44      	itt	mi
 800dc2c:	232b      	movmi	r3, #43	; 0x2b
 800dc2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc32:	f89a 3000 	ldrb.w	r3, [sl]
 800dc36:	2b2a      	cmp	r3, #42	; 0x2a
 800dc38:	d015      	beq.n	800dc66 <_svfiprintf_r+0xf6>
 800dc3a:	9a07      	ldr	r2, [sp, #28]
 800dc3c:	4654      	mov	r4, sl
 800dc3e:	2000      	movs	r0, #0
 800dc40:	f04f 0c0a 	mov.w	ip, #10
 800dc44:	4621      	mov	r1, r4
 800dc46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc4a:	3b30      	subs	r3, #48	; 0x30
 800dc4c:	2b09      	cmp	r3, #9
 800dc4e:	d94d      	bls.n	800dcec <_svfiprintf_r+0x17c>
 800dc50:	b1b0      	cbz	r0, 800dc80 <_svfiprintf_r+0x110>
 800dc52:	9207      	str	r2, [sp, #28]
 800dc54:	e014      	b.n	800dc80 <_svfiprintf_r+0x110>
 800dc56:	eba0 0308 	sub.w	r3, r0, r8
 800dc5a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	9304      	str	r3, [sp, #16]
 800dc62:	46a2      	mov	sl, r4
 800dc64:	e7d2      	b.n	800dc0c <_svfiprintf_r+0x9c>
 800dc66:	9b03      	ldr	r3, [sp, #12]
 800dc68:	1d19      	adds	r1, r3, #4
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	9103      	str	r1, [sp, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	bfbb      	ittet	lt
 800dc72:	425b      	neglt	r3, r3
 800dc74:	f042 0202 	orrlt.w	r2, r2, #2
 800dc78:	9307      	strge	r3, [sp, #28]
 800dc7a:	9307      	strlt	r3, [sp, #28]
 800dc7c:	bfb8      	it	lt
 800dc7e:	9204      	strlt	r2, [sp, #16]
 800dc80:	7823      	ldrb	r3, [r4, #0]
 800dc82:	2b2e      	cmp	r3, #46	; 0x2e
 800dc84:	d10c      	bne.n	800dca0 <_svfiprintf_r+0x130>
 800dc86:	7863      	ldrb	r3, [r4, #1]
 800dc88:	2b2a      	cmp	r3, #42	; 0x2a
 800dc8a:	d134      	bne.n	800dcf6 <_svfiprintf_r+0x186>
 800dc8c:	9b03      	ldr	r3, [sp, #12]
 800dc8e:	1d1a      	adds	r2, r3, #4
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	9203      	str	r2, [sp, #12]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	bfb8      	it	lt
 800dc98:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc9c:	3402      	adds	r4, #2
 800dc9e:	9305      	str	r3, [sp, #20]
 800dca0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dd68 <_svfiprintf_r+0x1f8>
 800dca4:	7821      	ldrb	r1, [r4, #0]
 800dca6:	2203      	movs	r2, #3
 800dca8:	4650      	mov	r0, sl
 800dcaa:	f7f2 fa91 	bl	80001d0 <memchr>
 800dcae:	b138      	cbz	r0, 800dcc0 <_svfiprintf_r+0x150>
 800dcb0:	9b04      	ldr	r3, [sp, #16]
 800dcb2:	eba0 000a 	sub.w	r0, r0, sl
 800dcb6:	2240      	movs	r2, #64	; 0x40
 800dcb8:	4082      	lsls	r2, r0
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	3401      	adds	r4, #1
 800dcbe:	9304      	str	r3, [sp, #16]
 800dcc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcc4:	4825      	ldr	r0, [pc, #148]	; (800dd5c <_svfiprintf_r+0x1ec>)
 800dcc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcca:	2206      	movs	r2, #6
 800dccc:	f7f2 fa80 	bl	80001d0 <memchr>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	d038      	beq.n	800dd46 <_svfiprintf_r+0x1d6>
 800dcd4:	4b22      	ldr	r3, [pc, #136]	; (800dd60 <_svfiprintf_r+0x1f0>)
 800dcd6:	bb1b      	cbnz	r3, 800dd20 <_svfiprintf_r+0x1b0>
 800dcd8:	9b03      	ldr	r3, [sp, #12]
 800dcda:	3307      	adds	r3, #7
 800dcdc:	f023 0307 	bic.w	r3, r3, #7
 800dce0:	3308      	adds	r3, #8
 800dce2:	9303      	str	r3, [sp, #12]
 800dce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce6:	4433      	add	r3, r6
 800dce8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcea:	e768      	b.n	800dbbe <_svfiprintf_r+0x4e>
 800dcec:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcf0:	460c      	mov	r4, r1
 800dcf2:	2001      	movs	r0, #1
 800dcf4:	e7a6      	b.n	800dc44 <_svfiprintf_r+0xd4>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	3401      	adds	r4, #1
 800dcfa:	9305      	str	r3, [sp, #20]
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	f04f 0c0a 	mov.w	ip, #10
 800dd02:	4620      	mov	r0, r4
 800dd04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd08:	3a30      	subs	r2, #48	; 0x30
 800dd0a:	2a09      	cmp	r2, #9
 800dd0c:	d903      	bls.n	800dd16 <_svfiprintf_r+0x1a6>
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d0c6      	beq.n	800dca0 <_svfiprintf_r+0x130>
 800dd12:	9105      	str	r1, [sp, #20]
 800dd14:	e7c4      	b.n	800dca0 <_svfiprintf_r+0x130>
 800dd16:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e7f0      	b.n	800dd02 <_svfiprintf_r+0x192>
 800dd20:	ab03      	add	r3, sp, #12
 800dd22:	9300      	str	r3, [sp, #0]
 800dd24:	462a      	mov	r2, r5
 800dd26:	4b0f      	ldr	r3, [pc, #60]	; (800dd64 <_svfiprintf_r+0x1f4>)
 800dd28:	a904      	add	r1, sp, #16
 800dd2a:	4638      	mov	r0, r7
 800dd2c:	f7fc fd1c 	bl	800a768 <_printf_float>
 800dd30:	1c42      	adds	r2, r0, #1
 800dd32:	4606      	mov	r6, r0
 800dd34:	d1d6      	bne.n	800dce4 <_svfiprintf_r+0x174>
 800dd36:	89ab      	ldrh	r3, [r5, #12]
 800dd38:	065b      	lsls	r3, r3, #25
 800dd3a:	f53f af2d 	bmi.w	800db98 <_svfiprintf_r+0x28>
 800dd3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd40:	b01d      	add	sp, #116	; 0x74
 800dd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd46:	ab03      	add	r3, sp, #12
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	462a      	mov	r2, r5
 800dd4c:	4b05      	ldr	r3, [pc, #20]	; (800dd64 <_svfiprintf_r+0x1f4>)
 800dd4e:	a904      	add	r1, sp, #16
 800dd50:	4638      	mov	r0, r7
 800dd52:	f7fc ffad 	bl	800acb0 <_printf_i>
 800dd56:	e7eb      	b.n	800dd30 <_svfiprintf_r+0x1c0>
 800dd58:	08012249 	.word	0x08012249
 800dd5c:	08012253 	.word	0x08012253
 800dd60:	0800a769 	.word	0x0800a769
 800dd64:	0800dabd 	.word	0x0800dabd
 800dd68:	0801224f 	.word	0x0801224f

0800dd6c <__sflush_r>:
 800dd6c:	898a      	ldrh	r2, [r1, #12]
 800dd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd72:	4605      	mov	r5, r0
 800dd74:	0710      	lsls	r0, r2, #28
 800dd76:	460c      	mov	r4, r1
 800dd78:	d458      	bmi.n	800de2c <__sflush_r+0xc0>
 800dd7a:	684b      	ldr	r3, [r1, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	dc05      	bgt.n	800dd8c <__sflush_r+0x20>
 800dd80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	dc02      	bgt.n	800dd8c <__sflush_r+0x20>
 800dd86:	2000      	movs	r0, #0
 800dd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd8e:	2e00      	cmp	r6, #0
 800dd90:	d0f9      	beq.n	800dd86 <__sflush_r+0x1a>
 800dd92:	2300      	movs	r3, #0
 800dd94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd98:	682f      	ldr	r7, [r5, #0]
 800dd9a:	6a21      	ldr	r1, [r4, #32]
 800dd9c:	602b      	str	r3, [r5, #0]
 800dd9e:	d032      	beq.n	800de06 <__sflush_r+0x9a>
 800dda0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dda2:	89a3      	ldrh	r3, [r4, #12]
 800dda4:	075a      	lsls	r2, r3, #29
 800dda6:	d505      	bpl.n	800ddb4 <__sflush_r+0x48>
 800dda8:	6863      	ldr	r3, [r4, #4]
 800ddaa:	1ac0      	subs	r0, r0, r3
 800ddac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddae:	b10b      	cbz	r3, 800ddb4 <__sflush_r+0x48>
 800ddb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddb2:	1ac0      	subs	r0, r0, r3
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddba:	6a21      	ldr	r1, [r4, #32]
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	47b0      	blx	r6
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	89a3      	ldrh	r3, [r4, #12]
 800ddc4:	d106      	bne.n	800ddd4 <__sflush_r+0x68>
 800ddc6:	6829      	ldr	r1, [r5, #0]
 800ddc8:	291d      	cmp	r1, #29
 800ddca:	d82b      	bhi.n	800de24 <__sflush_r+0xb8>
 800ddcc:	4a29      	ldr	r2, [pc, #164]	; (800de74 <__sflush_r+0x108>)
 800ddce:	410a      	asrs	r2, r1
 800ddd0:	07d6      	lsls	r6, r2, #31
 800ddd2:	d427      	bmi.n	800de24 <__sflush_r+0xb8>
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	6062      	str	r2, [r4, #4]
 800ddd8:	04d9      	lsls	r1, r3, #19
 800ddda:	6922      	ldr	r2, [r4, #16]
 800dddc:	6022      	str	r2, [r4, #0]
 800ddde:	d504      	bpl.n	800ddea <__sflush_r+0x7e>
 800dde0:	1c42      	adds	r2, r0, #1
 800dde2:	d101      	bne.n	800dde8 <__sflush_r+0x7c>
 800dde4:	682b      	ldr	r3, [r5, #0]
 800dde6:	b903      	cbnz	r3, 800ddea <__sflush_r+0x7e>
 800dde8:	6560      	str	r0, [r4, #84]	; 0x54
 800ddea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddec:	602f      	str	r7, [r5, #0]
 800ddee:	2900      	cmp	r1, #0
 800ddf0:	d0c9      	beq.n	800dd86 <__sflush_r+0x1a>
 800ddf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddf6:	4299      	cmp	r1, r3
 800ddf8:	d002      	beq.n	800de00 <__sflush_r+0x94>
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	f7fe face 	bl	800c39c <_free_r>
 800de00:	2000      	movs	r0, #0
 800de02:	6360      	str	r0, [r4, #52]	; 0x34
 800de04:	e7c0      	b.n	800dd88 <__sflush_r+0x1c>
 800de06:	2301      	movs	r3, #1
 800de08:	4628      	mov	r0, r5
 800de0a:	47b0      	blx	r6
 800de0c:	1c41      	adds	r1, r0, #1
 800de0e:	d1c8      	bne.n	800dda2 <__sflush_r+0x36>
 800de10:	682b      	ldr	r3, [r5, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0c5      	beq.n	800dda2 <__sflush_r+0x36>
 800de16:	2b1d      	cmp	r3, #29
 800de18:	d001      	beq.n	800de1e <__sflush_r+0xb2>
 800de1a:	2b16      	cmp	r3, #22
 800de1c:	d101      	bne.n	800de22 <__sflush_r+0xb6>
 800de1e:	602f      	str	r7, [r5, #0]
 800de20:	e7b1      	b.n	800dd86 <__sflush_r+0x1a>
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de28:	81a3      	strh	r3, [r4, #12]
 800de2a:	e7ad      	b.n	800dd88 <__sflush_r+0x1c>
 800de2c:	690f      	ldr	r7, [r1, #16]
 800de2e:	2f00      	cmp	r7, #0
 800de30:	d0a9      	beq.n	800dd86 <__sflush_r+0x1a>
 800de32:	0793      	lsls	r3, r2, #30
 800de34:	680e      	ldr	r6, [r1, #0]
 800de36:	bf08      	it	eq
 800de38:	694b      	ldreq	r3, [r1, #20]
 800de3a:	600f      	str	r7, [r1, #0]
 800de3c:	bf18      	it	ne
 800de3e:	2300      	movne	r3, #0
 800de40:	eba6 0807 	sub.w	r8, r6, r7
 800de44:	608b      	str	r3, [r1, #8]
 800de46:	f1b8 0f00 	cmp.w	r8, #0
 800de4a:	dd9c      	ble.n	800dd86 <__sflush_r+0x1a>
 800de4c:	6a21      	ldr	r1, [r4, #32]
 800de4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de50:	4643      	mov	r3, r8
 800de52:	463a      	mov	r2, r7
 800de54:	4628      	mov	r0, r5
 800de56:	47b0      	blx	r6
 800de58:	2800      	cmp	r0, #0
 800de5a:	dc06      	bgt.n	800de6a <__sflush_r+0xfe>
 800de5c:	89a3      	ldrh	r3, [r4, #12]
 800de5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de62:	81a3      	strh	r3, [r4, #12]
 800de64:	f04f 30ff 	mov.w	r0, #4294967295
 800de68:	e78e      	b.n	800dd88 <__sflush_r+0x1c>
 800de6a:	4407      	add	r7, r0
 800de6c:	eba8 0800 	sub.w	r8, r8, r0
 800de70:	e7e9      	b.n	800de46 <__sflush_r+0xda>
 800de72:	bf00      	nop
 800de74:	dfbffffe 	.word	0xdfbffffe

0800de78 <_fflush_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	690b      	ldr	r3, [r1, #16]
 800de7c:	4605      	mov	r5, r0
 800de7e:	460c      	mov	r4, r1
 800de80:	b913      	cbnz	r3, 800de88 <_fflush_r+0x10>
 800de82:	2500      	movs	r5, #0
 800de84:	4628      	mov	r0, r5
 800de86:	bd38      	pop	{r3, r4, r5, pc}
 800de88:	b118      	cbz	r0, 800de92 <_fflush_r+0x1a>
 800de8a:	6a03      	ldr	r3, [r0, #32]
 800de8c:	b90b      	cbnz	r3, 800de92 <_fflush_r+0x1a>
 800de8e:	f7fd facd 	bl	800b42c <__sinit>
 800de92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d0f3      	beq.n	800de82 <_fflush_r+0xa>
 800de9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de9c:	07d0      	lsls	r0, r2, #31
 800de9e:	d404      	bmi.n	800deaa <_fflush_r+0x32>
 800dea0:	0599      	lsls	r1, r3, #22
 800dea2:	d402      	bmi.n	800deaa <_fflush_r+0x32>
 800dea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dea6:	f7fd fbe8 	bl	800b67a <__retarget_lock_acquire_recursive>
 800deaa:	4628      	mov	r0, r5
 800deac:	4621      	mov	r1, r4
 800deae:	f7ff ff5d 	bl	800dd6c <__sflush_r>
 800deb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800deb4:	07da      	lsls	r2, r3, #31
 800deb6:	4605      	mov	r5, r0
 800deb8:	d4e4      	bmi.n	800de84 <_fflush_r+0xc>
 800deba:	89a3      	ldrh	r3, [r4, #12]
 800debc:	059b      	lsls	r3, r3, #22
 800debe:	d4e1      	bmi.n	800de84 <_fflush_r+0xc>
 800dec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dec2:	f7fd fbdb 	bl	800b67c <__retarget_lock_release_recursive>
 800dec6:	e7dd      	b.n	800de84 <_fflush_r+0xc>

0800dec8 <memmove>:
 800dec8:	4288      	cmp	r0, r1
 800deca:	b510      	push	{r4, lr}
 800decc:	eb01 0402 	add.w	r4, r1, r2
 800ded0:	d902      	bls.n	800ded8 <memmove+0x10>
 800ded2:	4284      	cmp	r4, r0
 800ded4:	4623      	mov	r3, r4
 800ded6:	d807      	bhi.n	800dee8 <memmove+0x20>
 800ded8:	1e43      	subs	r3, r0, #1
 800deda:	42a1      	cmp	r1, r4
 800dedc:	d008      	beq.n	800def0 <memmove+0x28>
 800dede:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dee6:	e7f8      	b.n	800deda <memmove+0x12>
 800dee8:	4402      	add	r2, r0
 800deea:	4601      	mov	r1, r0
 800deec:	428a      	cmp	r2, r1
 800deee:	d100      	bne.n	800def2 <memmove+0x2a>
 800def0:	bd10      	pop	{r4, pc}
 800def2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800def6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800defa:	e7f7      	b.n	800deec <memmove+0x24>

0800defc <strncmp>:
 800defc:	b510      	push	{r4, lr}
 800defe:	b16a      	cbz	r2, 800df1c <strncmp+0x20>
 800df00:	3901      	subs	r1, #1
 800df02:	1884      	adds	r4, r0, r2
 800df04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df08:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d103      	bne.n	800df18 <strncmp+0x1c>
 800df10:	42a0      	cmp	r0, r4
 800df12:	d001      	beq.n	800df18 <strncmp+0x1c>
 800df14:	2a00      	cmp	r2, #0
 800df16:	d1f5      	bne.n	800df04 <strncmp+0x8>
 800df18:	1ad0      	subs	r0, r2, r3
 800df1a:	bd10      	pop	{r4, pc}
 800df1c:	4610      	mov	r0, r2
 800df1e:	e7fc      	b.n	800df1a <strncmp+0x1e>

0800df20 <nan>:
 800df20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df28 <nan+0x8>
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	00000000 	.word	0x00000000
 800df2c:	7ff80000 	.word	0x7ff80000

0800df30 <__assert_func>:
 800df30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df32:	4614      	mov	r4, r2
 800df34:	461a      	mov	r2, r3
 800df36:	4b09      	ldr	r3, [pc, #36]	; (800df5c <__assert_func+0x2c>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4605      	mov	r5, r0
 800df3c:	68d8      	ldr	r0, [r3, #12]
 800df3e:	b14c      	cbz	r4, 800df54 <__assert_func+0x24>
 800df40:	4b07      	ldr	r3, [pc, #28]	; (800df60 <__assert_func+0x30>)
 800df42:	9100      	str	r1, [sp, #0]
 800df44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df48:	4906      	ldr	r1, [pc, #24]	; (800df64 <__assert_func+0x34>)
 800df4a:	462b      	mov	r3, r5
 800df4c:	f000 fbca 	bl	800e6e4 <fiprintf>
 800df50:	f000 fbda 	bl	800e708 <abort>
 800df54:	4b04      	ldr	r3, [pc, #16]	; (800df68 <__assert_func+0x38>)
 800df56:	461c      	mov	r4, r3
 800df58:	e7f3      	b.n	800df42 <__assert_func+0x12>
 800df5a:	bf00      	nop
 800df5c:	20000064 	.word	0x20000064
 800df60:	08012262 	.word	0x08012262
 800df64:	0801226f 	.word	0x0801226f
 800df68:	0801229d 	.word	0x0801229d

0800df6c <_calloc_r>:
 800df6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df6e:	fba1 2402 	umull	r2, r4, r1, r2
 800df72:	b94c      	cbnz	r4, 800df88 <_calloc_r+0x1c>
 800df74:	4611      	mov	r1, r2
 800df76:	9201      	str	r2, [sp, #4]
 800df78:	f7fc faca 	bl	800a510 <_malloc_r>
 800df7c:	9a01      	ldr	r2, [sp, #4]
 800df7e:	4605      	mov	r5, r0
 800df80:	b930      	cbnz	r0, 800df90 <_calloc_r+0x24>
 800df82:	4628      	mov	r0, r5
 800df84:	b003      	add	sp, #12
 800df86:	bd30      	pop	{r4, r5, pc}
 800df88:	220c      	movs	r2, #12
 800df8a:	6002      	str	r2, [r0, #0]
 800df8c:	2500      	movs	r5, #0
 800df8e:	e7f8      	b.n	800df82 <_calloc_r+0x16>
 800df90:	4621      	mov	r1, r4
 800df92:	f7fd fae4 	bl	800b55e <memset>
 800df96:	e7f4      	b.n	800df82 <_calloc_r+0x16>

0800df98 <rshift>:
 800df98:	6903      	ldr	r3, [r0, #16]
 800df9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800df9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfa2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dfa6:	f100 0414 	add.w	r4, r0, #20
 800dfaa:	dd45      	ble.n	800e038 <rshift+0xa0>
 800dfac:	f011 011f 	ands.w	r1, r1, #31
 800dfb0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dfb4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dfb8:	d10c      	bne.n	800dfd4 <rshift+0x3c>
 800dfba:	f100 0710 	add.w	r7, r0, #16
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	42b1      	cmp	r1, r6
 800dfc2:	d334      	bcc.n	800e02e <rshift+0x96>
 800dfc4:	1a9b      	subs	r3, r3, r2
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	1eea      	subs	r2, r5, #3
 800dfca:	4296      	cmp	r6, r2
 800dfcc:	bf38      	it	cc
 800dfce:	2300      	movcc	r3, #0
 800dfd0:	4423      	add	r3, r4
 800dfd2:	e015      	b.n	800e000 <rshift+0x68>
 800dfd4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dfd8:	f1c1 0820 	rsb	r8, r1, #32
 800dfdc:	40cf      	lsrs	r7, r1
 800dfde:	f105 0e04 	add.w	lr, r5, #4
 800dfe2:	46a1      	mov	r9, r4
 800dfe4:	4576      	cmp	r6, lr
 800dfe6:	46f4      	mov	ip, lr
 800dfe8:	d815      	bhi.n	800e016 <rshift+0x7e>
 800dfea:	1a9a      	subs	r2, r3, r2
 800dfec:	0092      	lsls	r2, r2, #2
 800dfee:	3a04      	subs	r2, #4
 800dff0:	3501      	adds	r5, #1
 800dff2:	42ae      	cmp	r6, r5
 800dff4:	bf38      	it	cc
 800dff6:	2200      	movcc	r2, #0
 800dff8:	18a3      	adds	r3, r4, r2
 800dffa:	50a7      	str	r7, [r4, r2]
 800dffc:	b107      	cbz	r7, 800e000 <rshift+0x68>
 800dffe:	3304      	adds	r3, #4
 800e000:	1b1a      	subs	r2, r3, r4
 800e002:	42a3      	cmp	r3, r4
 800e004:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e008:	bf08      	it	eq
 800e00a:	2300      	moveq	r3, #0
 800e00c:	6102      	str	r2, [r0, #16]
 800e00e:	bf08      	it	eq
 800e010:	6143      	streq	r3, [r0, #20]
 800e012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e016:	f8dc c000 	ldr.w	ip, [ip]
 800e01a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e01e:	ea4c 0707 	orr.w	r7, ip, r7
 800e022:	f849 7b04 	str.w	r7, [r9], #4
 800e026:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e02a:	40cf      	lsrs	r7, r1
 800e02c:	e7da      	b.n	800dfe4 <rshift+0x4c>
 800e02e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e032:	f847 cf04 	str.w	ip, [r7, #4]!
 800e036:	e7c3      	b.n	800dfc0 <rshift+0x28>
 800e038:	4623      	mov	r3, r4
 800e03a:	e7e1      	b.n	800e000 <rshift+0x68>

0800e03c <__hexdig_fun>:
 800e03c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e040:	2b09      	cmp	r3, #9
 800e042:	d802      	bhi.n	800e04a <__hexdig_fun+0xe>
 800e044:	3820      	subs	r0, #32
 800e046:	b2c0      	uxtb	r0, r0
 800e048:	4770      	bx	lr
 800e04a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e04e:	2b05      	cmp	r3, #5
 800e050:	d801      	bhi.n	800e056 <__hexdig_fun+0x1a>
 800e052:	3847      	subs	r0, #71	; 0x47
 800e054:	e7f7      	b.n	800e046 <__hexdig_fun+0xa>
 800e056:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e05a:	2b05      	cmp	r3, #5
 800e05c:	d801      	bhi.n	800e062 <__hexdig_fun+0x26>
 800e05e:	3827      	subs	r0, #39	; 0x27
 800e060:	e7f1      	b.n	800e046 <__hexdig_fun+0xa>
 800e062:	2000      	movs	r0, #0
 800e064:	4770      	bx	lr
	...

0800e068 <__gethex>:
 800e068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e06c:	4617      	mov	r7, r2
 800e06e:	680a      	ldr	r2, [r1, #0]
 800e070:	b085      	sub	sp, #20
 800e072:	f102 0b02 	add.w	fp, r2, #2
 800e076:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e07a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e07e:	4681      	mov	r9, r0
 800e080:	468a      	mov	sl, r1
 800e082:	9302      	str	r3, [sp, #8]
 800e084:	32fe      	adds	r2, #254	; 0xfe
 800e086:	eb02 030b 	add.w	r3, r2, fp
 800e08a:	46d8      	mov	r8, fp
 800e08c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e090:	9301      	str	r3, [sp, #4]
 800e092:	2830      	cmp	r0, #48	; 0x30
 800e094:	d0f7      	beq.n	800e086 <__gethex+0x1e>
 800e096:	f7ff ffd1 	bl	800e03c <__hexdig_fun>
 800e09a:	4604      	mov	r4, r0
 800e09c:	2800      	cmp	r0, #0
 800e09e:	d138      	bne.n	800e112 <__gethex+0xaa>
 800e0a0:	49a7      	ldr	r1, [pc, #668]	; (800e340 <__gethex+0x2d8>)
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	f7ff ff29 	bl	800defc <strncmp>
 800e0aa:	4606      	mov	r6, r0
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d169      	bne.n	800e184 <__gethex+0x11c>
 800e0b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e0b4:	465d      	mov	r5, fp
 800e0b6:	f7ff ffc1 	bl	800e03c <__hexdig_fun>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	d064      	beq.n	800e188 <__gethex+0x120>
 800e0be:	465a      	mov	r2, fp
 800e0c0:	7810      	ldrb	r0, [r2, #0]
 800e0c2:	2830      	cmp	r0, #48	; 0x30
 800e0c4:	4690      	mov	r8, r2
 800e0c6:	f102 0201 	add.w	r2, r2, #1
 800e0ca:	d0f9      	beq.n	800e0c0 <__gethex+0x58>
 800e0cc:	f7ff ffb6 	bl	800e03c <__hexdig_fun>
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	fab0 f480 	clz	r4, r0
 800e0d6:	0964      	lsrs	r4, r4, #5
 800e0d8:	465e      	mov	r6, fp
 800e0da:	9301      	str	r3, [sp, #4]
 800e0dc:	4642      	mov	r2, r8
 800e0de:	4615      	mov	r5, r2
 800e0e0:	3201      	adds	r2, #1
 800e0e2:	7828      	ldrb	r0, [r5, #0]
 800e0e4:	f7ff ffaa 	bl	800e03c <__hexdig_fun>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d1f8      	bne.n	800e0de <__gethex+0x76>
 800e0ec:	4994      	ldr	r1, [pc, #592]	; (800e340 <__gethex+0x2d8>)
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f7ff ff03 	bl	800defc <strncmp>
 800e0f6:	b978      	cbnz	r0, 800e118 <__gethex+0xb0>
 800e0f8:	b946      	cbnz	r6, 800e10c <__gethex+0xa4>
 800e0fa:	1c6e      	adds	r6, r5, #1
 800e0fc:	4632      	mov	r2, r6
 800e0fe:	4615      	mov	r5, r2
 800e100:	3201      	adds	r2, #1
 800e102:	7828      	ldrb	r0, [r5, #0]
 800e104:	f7ff ff9a 	bl	800e03c <__hexdig_fun>
 800e108:	2800      	cmp	r0, #0
 800e10a:	d1f8      	bne.n	800e0fe <__gethex+0x96>
 800e10c:	1b73      	subs	r3, r6, r5
 800e10e:	009e      	lsls	r6, r3, #2
 800e110:	e004      	b.n	800e11c <__gethex+0xb4>
 800e112:	2400      	movs	r4, #0
 800e114:	4626      	mov	r6, r4
 800e116:	e7e1      	b.n	800e0dc <__gethex+0x74>
 800e118:	2e00      	cmp	r6, #0
 800e11a:	d1f7      	bne.n	800e10c <__gethex+0xa4>
 800e11c:	782b      	ldrb	r3, [r5, #0]
 800e11e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e122:	2b50      	cmp	r3, #80	; 0x50
 800e124:	d13d      	bne.n	800e1a2 <__gethex+0x13a>
 800e126:	786b      	ldrb	r3, [r5, #1]
 800e128:	2b2b      	cmp	r3, #43	; 0x2b
 800e12a:	d02f      	beq.n	800e18c <__gethex+0x124>
 800e12c:	2b2d      	cmp	r3, #45	; 0x2d
 800e12e:	d031      	beq.n	800e194 <__gethex+0x12c>
 800e130:	1c69      	adds	r1, r5, #1
 800e132:	f04f 0b00 	mov.w	fp, #0
 800e136:	7808      	ldrb	r0, [r1, #0]
 800e138:	f7ff ff80 	bl	800e03c <__hexdig_fun>
 800e13c:	1e42      	subs	r2, r0, #1
 800e13e:	b2d2      	uxtb	r2, r2
 800e140:	2a18      	cmp	r2, #24
 800e142:	d82e      	bhi.n	800e1a2 <__gethex+0x13a>
 800e144:	f1a0 0210 	sub.w	r2, r0, #16
 800e148:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e14c:	f7ff ff76 	bl	800e03c <__hexdig_fun>
 800e150:	f100 3cff 	add.w	ip, r0, #4294967295
 800e154:	fa5f fc8c 	uxtb.w	ip, ip
 800e158:	f1bc 0f18 	cmp.w	ip, #24
 800e15c:	d91d      	bls.n	800e19a <__gethex+0x132>
 800e15e:	f1bb 0f00 	cmp.w	fp, #0
 800e162:	d000      	beq.n	800e166 <__gethex+0xfe>
 800e164:	4252      	negs	r2, r2
 800e166:	4416      	add	r6, r2
 800e168:	f8ca 1000 	str.w	r1, [sl]
 800e16c:	b1dc      	cbz	r4, 800e1a6 <__gethex+0x13e>
 800e16e:	9b01      	ldr	r3, [sp, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	bf14      	ite	ne
 800e174:	f04f 0800 	movne.w	r8, #0
 800e178:	f04f 0806 	moveq.w	r8, #6
 800e17c:	4640      	mov	r0, r8
 800e17e:	b005      	add	sp, #20
 800e180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e184:	4645      	mov	r5, r8
 800e186:	4626      	mov	r6, r4
 800e188:	2401      	movs	r4, #1
 800e18a:	e7c7      	b.n	800e11c <__gethex+0xb4>
 800e18c:	f04f 0b00 	mov.w	fp, #0
 800e190:	1ca9      	adds	r1, r5, #2
 800e192:	e7d0      	b.n	800e136 <__gethex+0xce>
 800e194:	f04f 0b01 	mov.w	fp, #1
 800e198:	e7fa      	b.n	800e190 <__gethex+0x128>
 800e19a:	230a      	movs	r3, #10
 800e19c:	fb03 0002 	mla	r0, r3, r2, r0
 800e1a0:	e7d0      	b.n	800e144 <__gethex+0xdc>
 800e1a2:	4629      	mov	r1, r5
 800e1a4:	e7e0      	b.n	800e168 <__gethex+0x100>
 800e1a6:	eba5 0308 	sub.w	r3, r5, r8
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	4621      	mov	r1, r4
 800e1ae:	2b07      	cmp	r3, #7
 800e1b0:	dc0a      	bgt.n	800e1c8 <__gethex+0x160>
 800e1b2:	4648      	mov	r0, r9
 800e1b4:	f7fe f93e 	bl	800c434 <_Balloc>
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	b940      	cbnz	r0, 800e1ce <__gethex+0x166>
 800e1bc:	4b61      	ldr	r3, [pc, #388]	; (800e344 <__gethex+0x2dc>)
 800e1be:	4602      	mov	r2, r0
 800e1c0:	21e4      	movs	r1, #228	; 0xe4
 800e1c2:	4861      	ldr	r0, [pc, #388]	; (800e348 <__gethex+0x2e0>)
 800e1c4:	f7ff feb4 	bl	800df30 <__assert_func>
 800e1c8:	3101      	adds	r1, #1
 800e1ca:	105b      	asrs	r3, r3, #1
 800e1cc:	e7ef      	b.n	800e1ae <__gethex+0x146>
 800e1ce:	f100 0a14 	add.w	sl, r0, #20
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	495a      	ldr	r1, [pc, #360]	; (800e340 <__gethex+0x2d8>)
 800e1d6:	f8cd a004 	str.w	sl, [sp, #4]
 800e1da:	469b      	mov	fp, r3
 800e1dc:	45a8      	cmp	r8, r5
 800e1de:	d342      	bcc.n	800e266 <__gethex+0x1fe>
 800e1e0:	9801      	ldr	r0, [sp, #4]
 800e1e2:	f840 bb04 	str.w	fp, [r0], #4
 800e1e6:	eba0 000a 	sub.w	r0, r0, sl
 800e1ea:	1080      	asrs	r0, r0, #2
 800e1ec:	6120      	str	r0, [r4, #16]
 800e1ee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e1f2:	4658      	mov	r0, fp
 800e1f4:	f7fe fa10 	bl	800c618 <__hi0bits>
 800e1f8:	683d      	ldr	r5, [r7, #0]
 800e1fa:	eba8 0000 	sub.w	r0, r8, r0
 800e1fe:	42a8      	cmp	r0, r5
 800e200:	dd59      	ble.n	800e2b6 <__gethex+0x24e>
 800e202:	eba0 0805 	sub.w	r8, r0, r5
 800e206:	4641      	mov	r1, r8
 800e208:	4620      	mov	r0, r4
 800e20a:	f7fe fd9f 	bl	800cd4c <__any_on>
 800e20e:	4683      	mov	fp, r0
 800e210:	b1b8      	cbz	r0, 800e242 <__gethex+0x1da>
 800e212:	f108 33ff 	add.w	r3, r8, #4294967295
 800e216:	1159      	asrs	r1, r3, #5
 800e218:	f003 021f 	and.w	r2, r3, #31
 800e21c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e220:	f04f 0b01 	mov.w	fp, #1
 800e224:	fa0b f202 	lsl.w	r2, fp, r2
 800e228:	420a      	tst	r2, r1
 800e22a:	d00a      	beq.n	800e242 <__gethex+0x1da>
 800e22c:	455b      	cmp	r3, fp
 800e22e:	dd06      	ble.n	800e23e <__gethex+0x1d6>
 800e230:	f1a8 0102 	sub.w	r1, r8, #2
 800e234:	4620      	mov	r0, r4
 800e236:	f7fe fd89 	bl	800cd4c <__any_on>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d138      	bne.n	800e2b0 <__gethex+0x248>
 800e23e:	f04f 0b02 	mov.w	fp, #2
 800e242:	4641      	mov	r1, r8
 800e244:	4620      	mov	r0, r4
 800e246:	f7ff fea7 	bl	800df98 <rshift>
 800e24a:	4446      	add	r6, r8
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	42b3      	cmp	r3, r6
 800e250:	da41      	bge.n	800e2d6 <__gethex+0x26e>
 800e252:	4621      	mov	r1, r4
 800e254:	4648      	mov	r0, r9
 800e256:	f7fe f92d 	bl	800c4b4 <_Bfree>
 800e25a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e25c:	2300      	movs	r3, #0
 800e25e:	6013      	str	r3, [r2, #0]
 800e260:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e264:	e78a      	b.n	800e17c <__gethex+0x114>
 800e266:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e26a:	2a2e      	cmp	r2, #46	; 0x2e
 800e26c:	d014      	beq.n	800e298 <__gethex+0x230>
 800e26e:	2b20      	cmp	r3, #32
 800e270:	d106      	bne.n	800e280 <__gethex+0x218>
 800e272:	9b01      	ldr	r3, [sp, #4]
 800e274:	f843 bb04 	str.w	fp, [r3], #4
 800e278:	f04f 0b00 	mov.w	fp, #0
 800e27c:	9301      	str	r3, [sp, #4]
 800e27e:	465b      	mov	r3, fp
 800e280:	7828      	ldrb	r0, [r5, #0]
 800e282:	9303      	str	r3, [sp, #12]
 800e284:	f7ff feda 	bl	800e03c <__hexdig_fun>
 800e288:	9b03      	ldr	r3, [sp, #12]
 800e28a:	f000 000f 	and.w	r0, r0, #15
 800e28e:	4098      	lsls	r0, r3
 800e290:	ea4b 0b00 	orr.w	fp, fp, r0
 800e294:	3304      	adds	r3, #4
 800e296:	e7a1      	b.n	800e1dc <__gethex+0x174>
 800e298:	45a8      	cmp	r8, r5
 800e29a:	d8e8      	bhi.n	800e26e <__gethex+0x206>
 800e29c:	2201      	movs	r2, #1
 800e29e:	4628      	mov	r0, r5
 800e2a0:	9303      	str	r3, [sp, #12]
 800e2a2:	f7ff fe2b 	bl	800defc <strncmp>
 800e2a6:	4926      	ldr	r1, [pc, #152]	; (800e340 <__gethex+0x2d8>)
 800e2a8:	9b03      	ldr	r3, [sp, #12]
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	d1df      	bne.n	800e26e <__gethex+0x206>
 800e2ae:	e795      	b.n	800e1dc <__gethex+0x174>
 800e2b0:	f04f 0b03 	mov.w	fp, #3
 800e2b4:	e7c5      	b.n	800e242 <__gethex+0x1da>
 800e2b6:	da0b      	bge.n	800e2d0 <__gethex+0x268>
 800e2b8:	eba5 0800 	sub.w	r8, r5, r0
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4642      	mov	r2, r8
 800e2c0:	4648      	mov	r0, r9
 800e2c2:	f7fe fb11 	bl	800c8e8 <__lshift>
 800e2c6:	eba6 0608 	sub.w	r6, r6, r8
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	f100 0a14 	add.w	sl, r0, #20
 800e2d0:	f04f 0b00 	mov.w	fp, #0
 800e2d4:	e7ba      	b.n	800e24c <__gethex+0x1e4>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	42b3      	cmp	r3, r6
 800e2da:	dd73      	ble.n	800e3c4 <__gethex+0x35c>
 800e2dc:	1b9e      	subs	r6, r3, r6
 800e2de:	42b5      	cmp	r5, r6
 800e2e0:	dc34      	bgt.n	800e34c <__gethex+0x2e4>
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b02      	cmp	r3, #2
 800e2e6:	d023      	beq.n	800e330 <__gethex+0x2c8>
 800e2e8:	2b03      	cmp	r3, #3
 800e2ea:	d025      	beq.n	800e338 <__gethex+0x2d0>
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d115      	bne.n	800e31c <__gethex+0x2b4>
 800e2f0:	42b5      	cmp	r5, r6
 800e2f2:	d113      	bne.n	800e31c <__gethex+0x2b4>
 800e2f4:	2d01      	cmp	r5, #1
 800e2f6:	d10b      	bne.n	800e310 <__gethex+0x2a8>
 800e2f8:	9a02      	ldr	r2, [sp, #8]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6013      	str	r3, [r2, #0]
 800e2fe:	2301      	movs	r3, #1
 800e300:	6123      	str	r3, [r4, #16]
 800e302:	f8ca 3000 	str.w	r3, [sl]
 800e306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e308:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e30c:	601c      	str	r4, [r3, #0]
 800e30e:	e735      	b.n	800e17c <__gethex+0x114>
 800e310:	1e69      	subs	r1, r5, #1
 800e312:	4620      	mov	r0, r4
 800e314:	f7fe fd1a 	bl	800cd4c <__any_on>
 800e318:	2800      	cmp	r0, #0
 800e31a:	d1ed      	bne.n	800e2f8 <__gethex+0x290>
 800e31c:	4621      	mov	r1, r4
 800e31e:	4648      	mov	r0, r9
 800e320:	f7fe f8c8 	bl	800c4b4 <_Bfree>
 800e324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e326:	2300      	movs	r3, #0
 800e328:	6013      	str	r3, [r2, #0]
 800e32a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e32e:	e725      	b.n	800e17c <__gethex+0x114>
 800e330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1f2      	bne.n	800e31c <__gethex+0x2b4>
 800e336:	e7df      	b.n	800e2f8 <__gethex+0x290>
 800e338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1dc      	bne.n	800e2f8 <__gethex+0x290>
 800e33e:	e7ed      	b.n	800e31c <__gethex+0x2b4>
 800e340:	080120f4 	.word	0x080120f4
 800e344:	08011f8d 	.word	0x08011f8d
 800e348:	0801229e 	.word	0x0801229e
 800e34c:	f106 38ff 	add.w	r8, r6, #4294967295
 800e350:	f1bb 0f00 	cmp.w	fp, #0
 800e354:	d133      	bne.n	800e3be <__gethex+0x356>
 800e356:	f1b8 0f00 	cmp.w	r8, #0
 800e35a:	d004      	beq.n	800e366 <__gethex+0x2fe>
 800e35c:	4641      	mov	r1, r8
 800e35e:	4620      	mov	r0, r4
 800e360:	f7fe fcf4 	bl	800cd4c <__any_on>
 800e364:	4683      	mov	fp, r0
 800e366:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e36a:	2301      	movs	r3, #1
 800e36c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e370:	f008 081f 	and.w	r8, r8, #31
 800e374:	fa03 f308 	lsl.w	r3, r3, r8
 800e378:	4213      	tst	r3, r2
 800e37a:	4631      	mov	r1, r6
 800e37c:	4620      	mov	r0, r4
 800e37e:	bf18      	it	ne
 800e380:	f04b 0b02 	orrne.w	fp, fp, #2
 800e384:	1bad      	subs	r5, r5, r6
 800e386:	f7ff fe07 	bl	800df98 <rshift>
 800e38a:	687e      	ldr	r6, [r7, #4]
 800e38c:	f04f 0802 	mov.w	r8, #2
 800e390:	f1bb 0f00 	cmp.w	fp, #0
 800e394:	d04a      	beq.n	800e42c <__gethex+0x3c4>
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2b02      	cmp	r3, #2
 800e39a:	d016      	beq.n	800e3ca <__gethex+0x362>
 800e39c:	2b03      	cmp	r3, #3
 800e39e:	d018      	beq.n	800e3d2 <__gethex+0x36a>
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d109      	bne.n	800e3b8 <__gethex+0x350>
 800e3a4:	f01b 0f02 	tst.w	fp, #2
 800e3a8:	d006      	beq.n	800e3b8 <__gethex+0x350>
 800e3aa:	f8da 3000 	ldr.w	r3, [sl]
 800e3ae:	ea4b 0b03 	orr.w	fp, fp, r3
 800e3b2:	f01b 0f01 	tst.w	fp, #1
 800e3b6:	d10f      	bne.n	800e3d8 <__gethex+0x370>
 800e3b8:	f048 0810 	orr.w	r8, r8, #16
 800e3bc:	e036      	b.n	800e42c <__gethex+0x3c4>
 800e3be:	f04f 0b01 	mov.w	fp, #1
 800e3c2:	e7d0      	b.n	800e366 <__gethex+0x2fe>
 800e3c4:	f04f 0801 	mov.w	r8, #1
 800e3c8:	e7e2      	b.n	800e390 <__gethex+0x328>
 800e3ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3cc:	f1c3 0301 	rsb	r3, r3, #1
 800e3d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d0ef      	beq.n	800e3b8 <__gethex+0x350>
 800e3d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e3dc:	f104 0214 	add.w	r2, r4, #20
 800e3e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e3e4:	9301      	str	r3, [sp, #4]
 800e3e6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	4694      	mov	ip, r2
 800e3ee:	f852 1b04 	ldr.w	r1, [r2], #4
 800e3f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e3f6:	d01e      	beq.n	800e436 <__gethex+0x3ce>
 800e3f8:	3101      	adds	r1, #1
 800e3fa:	f8cc 1000 	str.w	r1, [ip]
 800e3fe:	f1b8 0f02 	cmp.w	r8, #2
 800e402:	f104 0214 	add.w	r2, r4, #20
 800e406:	d13d      	bne.n	800e484 <__gethex+0x41c>
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	3b01      	subs	r3, #1
 800e40c:	42ab      	cmp	r3, r5
 800e40e:	d10b      	bne.n	800e428 <__gethex+0x3c0>
 800e410:	1169      	asrs	r1, r5, #5
 800e412:	2301      	movs	r3, #1
 800e414:	f005 051f 	and.w	r5, r5, #31
 800e418:	fa03 f505 	lsl.w	r5, r3, r5
 800e41c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e420:	421d      	tst	r5, r3
 800e422:	bf18      	it	ne
 800e424:	f04f 0801 	movne.w	r8, #1
 800e428:	f048 0820 	orr.w	r8, r8, #32
 800e42c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e42e:	601c      	str	r4, [r3, #0]
 800e430:	9b02      	ldr	r3, [sp, #8]
 800e432:	601e      	str	r6, [r3, #0]
 800e434:	e6a2      	b.n	800e17c <__gethex+0x114>
 800e436:	4290      	cmp	r0, r2
 800e438:	f842 3c04 	str.w	r3, [r2, #-4]
 800e43c:	d8d6      	bhi.n	800e3ec <__gethex+0x384>
 800e43e:	68a2      	ldr	r2, [r4, #8]
 800e440:	4593      	cmp	fp, r2
 800e442:	db17      	blt.n	800e474 <__gethex+0x40c>
 800e444:	6861      	ldr	r1, [r4, #4]
 800e446:	4648      	mov	r0, r9
 800e448:	3101      	adds	r1, #1
 800e44a:	f7fd fff3 	bl	800c434 <_Balloc>
 800e44e:	4682      	mov	sl, r0
 800e450:	b918      	cbnz	r0, 800e45a <__gethex+0x3f2>
 800e452:	4b1b      	ldr	r3, [pc, #108]	; (800e4c0 <__gethex+0x458>)
 800e454:	4602      	mov	r2, r0
 800e456:	2184      	movs	r1, #132	; 0x84
 800e458:	e6b3      	b.n	800e1c2 <__gethex+0x15a>
 800e45a:	6922      	ldr	r2, [r4, #16]
 800e45c:	3202      	adds	r2, #2
 800e45e:	f104 010c 	add.w	r1, r4, #12
 800e462:	0092      	lsls	r2, r2, #2
 800e464:	300c      	adds	r0, #12
 800e466:	f7fd f90a 	bl	800b67e <memcpy>
 800e46a:	4621      	mov	r1, r4
 800e46c:	4648      	mov	r0, r9
 800e46e:	f7fe f821 	bl	800c4b4 <_Bfree>
 800e472:	4654      	mov	r4, sl
 800e474:	6922      	ldr	r2, [r4, #16]
 800e476:	1c51      	adds	r1, r2, #1
 800e478:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e47c:	6121      	str	r1, [r4, #16]
 800e47e:	2101      	movs	r1, #1
 800e480:	6151      	str	r1, [r2, #20]
 800e482:	e7bc      	b.n	800e3fe <__gethex+0x396>
 800e484:	6921      	ldr	r1, [r4, #16]
 800e486:	4559      	cmp	r1, fp
 800e488:	dd0b      	ble.n	800e4a2 <__gethex+0x43a>
 800e48a:	2101      	movs	r1, #1
 800e48c:	4620      	mov	r0, r4
 800e48e:	f7ff fd83 	bl	800df98 <rshift>
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	3601      	adds	r6, #1
 800e496:	42b3      	cmp	r3, r6
 800e498:	f6ff aedb 	blt.w	800e252 <__gethex+0x1ea>
 800e49c:	f04f 0801 	mov.w	r8, #1
 800e4a0:	e7c2      	b.n	800e428 <__gethex+0x3c0>
 800e4a2:	f015 051f 	ands.w	r5, r5, #31
 800e4a6:	d0f9      	beq.n	800e49c <__gethex+0x434>
 800e4a8:	9b01      	ldr	r3, [sp, #4]
 800e4aa:	441a      	add	r2, r3
 800e4ac:	f1c5 0520 	rsb	r5, r5, #32
 800e4b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e4b4:	f7fe f8b0 	bl	800c618 <__hi0bits>
 800e4b8:	42a8      	cmp	r0, r5
 800e4ba:	dbe6      	blt.n	800e48a <__gethex+0x422>
 800e4bc:	e7ee      	b.n	800e49c <__gethex+0x434>
 800e4be:	bf00      	nop
 800e4c0:	08011f8d 	.word	0x08011f8d

0800e4c4 <L_shift>:
 800e4c4:	f1c2 0208 	rsb	r2, r2, #8
 800e4c8:	0092      	lsls	r2, r2, #2
 800e4ca:	b570      	push	{r4, r5, r6, lr}
 800e4cc:	f1c2 0620 	rsb	r6, r2, #32
 800e4d0:	6843      	ldr	r3, [r0, #4]
 800e4d2:	6804      	ldr	r4, [r0, #0]
 800e4d4:	fa03 f506 	lsl.w	r5, r3, r6
 800e4d8:	432c      	orrs	r4, r5
 800e4da:	40d3      	lsrs	r3, r2
 800e4dc:	6004      	str	r4, [r0, #0]
 800e4de:	f840 3f04 	str.w	r3, [r0, #4]!
 800e4e2:	4288      	cmp	r0, r1
 800e4e4:	d3f4      	bcc.n	800e4d0 <L_shift+0xc>
 800e4e6:	bd70      	pop	{r4, r5, r6, pc}

0800e4e8 <__match>:
 800e4e8:	b530      	push	{r4, r5, lr}
 800e4ea:	6803      	ldr	r3, [r0, #0]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4f2:	b914      	cbnz	r4, 800e4fa <__match+0x12>
 800e4f4:	6003      	str	r3, [r0, #0]
 800e4f6:	2001      	movs	r0, #1
 800e4f8:	bd30      	pop	{r4, r5, pc}
 800e4fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e502:	2d19      	cmp	r5, #25
 800e504:	bf98      	it	ls
 800e506:	3220      	addls	r2, #32
 800e508:	42a2      	cmp	r2, r4
 800e50a:	d0f0      	beq.n	800e4ee <__match+0x6>
 800e50c:	2000      	movs	r0, #0
 800e50e:	e7f3      	b.n	800e4f8 <__match+0x10>

0800e510 <__hexnan>:
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	680b      	ldr	r3, [r1, #0]
 800e516:	6801      	ldr	r1, [r0, #0]
 800e518:	115e      	asrs	r6, r3, #5
 800e51a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e51e:	f013 031f 	ands.w	r3, r3, #31
 800e522:	b087      	sub	sp, #28
 800e524:	bf18      	it	ne
 800e526:	3604      	addne	r6, #4
 800e528:	2500      	movs	r5, #0
 800e52a:	1f37      	subs	r7, r6, #4
 800e52c:	4682      	mov	sl, r0
 800e52e:	4690      	mov	r8, r2
 800e530:	9301      	str	r3, [sp, #4]
 800e532:	f846 5c04 	str.w	r5, [r6, #-4]
 800e536:	46b9      	mov	r9, r7
 800e538:	463c      	mov	r4, r7
 800e53a:	9502      	str	r5, [sp, #8]
 800e53c:	46ab      	mov	fp, r5
 800e53e:	784a      	ldrb	r2, [r1, #1]
 800e540:	1c4b      	adds	r3, r1, #1
 800e542:	9303      	str	r3, [sp, #12]
 800e544:	b342      	cbz	r2, 800e598 <__hexnan+0x88>
 800e546:	4610      	mov	r0, r2
 800e548:	9105      	str	r1, [sp, #20]
 800e54a:	9204      	str	r2, [sp, #16]
 800e54c:	f7ff fd76 	bl	800e03c <__hexdig_fun>
 800e550:	2800      	cmp	r0, #0
 800e552:	d14f      	bne.n	800e5f4 <__hexnan+0xe4>
 800e554:	9a04      	ldr	r2, [sp, #16]
 800e556:	9905      	ldr	r1, [sp, #20]
 800e558:	2a20      	cmp	r2, #32
 800e55a:	d818      	bhi.n	800e58e <__hexnan+0x7e>
 800e55c:	9b02      	ldr	r3, [sp, #8]
 800e55e:	459b      	cmp	fp, r3
 800e560:	dd13      	ble.n	800e58a <__hexnan+0x7a>
 800e562:	454c      	cmp	r4, r9
 800e564:	d206      	bcs.n	800e574 <__hexnan+0x64>
 800e566:	2d07      	cmp	r5, #7
 800e568:	dc04      	bgt.n	800e574 <__hexnan+0x64>
 800e56a:	462a      	mov	r2, r5
 800e56c:	4649      	mov	r1, r9
 800e56e:	4620      	mov	r0, r4
 800e570:	f7ff ffa8 	bl	800e4c4 <L_shift>
 800e574:	4544      	cmp	r4, r8
 800e576:	d950      	bls.n	800e61a <__hexnan+0x10a>
 800e578:	2300      	movs	r3, #0
 800e57a:	f1a4 0904 	sub.w	r9, r4, #4
 800e57e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e582:	f8cd b008 	str.w	fp, [sp, #8]
 800e586:	464c      	mov	r4, r9
 800e588:	461d      	mov	r5, r3
 800e58a:	9903      	ldr	r1, [sp, #12]
 800e58c:	e7d7      	b.n	800e53e <__hexnan+0x2e>
 800e58e:	2a29      	cmp	r2, #41	; 0x29
 800e590:	d155      	bne.n	800e63e <__hexnan+0x12e>
 800e592:	3102      	adds	r1, #2
 800e594:	f8ca 1000 	str.w	r1, [sl]
 800e598:	f1bb 0f00 	cmp.w	fp, #0
 800e59c:	d04f      	beq.n	800e63e <__hexnan+0x12e>
 800e59e:	454c      	cmp	r4, r9
 800e5a0:	d206      	bcs.n	800e5b0 <__hexnan+0xa0>
 800e5a2:	2d07      	cmp	r5, #7
 800e5a4:	dc04      	bgt.n	800e5b0 <__hexnan+0xa0>
 800e5a6:	462a      	mov	r2, r5
 800e5a8:	4649      	mov	r1, r9
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f7ff ff8a 	bl	800e4c4 <L_shift>
 800e5b0:	4544      	cmp	r4, r8
 800e5b2:	d934      	bls.n	800e61e <__hexnan+0x10e>
 800e5b4:	f1a8 0204 	sub.w	r2, r8, #4
 800e5b8:	4623      	mov	r3, r4
 800e5ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800e5be:	f842 1f04 	str.w	r1, [r2, #4]!
 800e5c2:	429f      	cmp	r7, r3
 800e5c4:	d2f9      	bcs.n	800e5ba <__hexnan+0xaa>
 800e5c6:	1b3b      	subs	r3, r7, r4
 800e5c8:	f023 0303 	bic.w	r3, r3, #3
 800e5cc:	3304      	adds	r3, #4
 800e5ce:	3e03      	subs	r6, #3
 800e5d0:	3401      	adds	r4, #1
 800e5d2:	42a6      	cmp	r6, r4
 800e5d4:	bf38      	it	cc
 800e5d6:	2304      	movcc	r3, #4
 800e5d8:	4443      	add	r3, r8
 800e5da:	2200      	movs	r2, #0
 800e5dc:	f843 2b04 	str.w	r2, [r3], #4
 800e5e0:	429f      	cmp	r7, r3
 800e5e2:	d2fb      	bcs.n	800e5dc <__hexnan+0xcc>
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	b91b      	cbnz	r3, 800e5f0 <__hexnan+0xe0>
 800e5e8:	4547      	cmp	r7, r8
 800e5ea:	d126      	bne.n	800e63a <__hexnan+0x12a>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	603b      	str	r3, [r7, #0]
 800e5f0:	2005      	movs	r0, #5
 800e5f2:	e025      	b.n	800e640 <__hexnan+0x130>
 800e5f4:	3501      	adds	r5, #1
 800e5f6:	2d08      	cmp	r5, #8
 800e5f8:	f10b 0b01 	add.w	fp, fp, #1
 800e5fc:	dd06      	ble.n	800e60c <__hexnan+0xfc>
 800e5fe:	4544      	cmp	r4, r8
 800e600:	d9c3      	bls.n	800e58a <__hexnan+0x7a>
 800e602:	2300      	movs	r3, #0
 800e604:	f844 3c04 	str.w	r3, [r4, #-4]
 800e608:	2501      	movs	r5, #1
 800e60a:	3c04      	subs	r4, #4
 800e60c:	6822      	ldr	r2, [r4, #0]
 800e60e:	f000 000f 	and.w	r0, r0, #15
 800e612:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e616:	6020      	str	r0, [r4, #0]
 800e618:	e7b7      	b.n	800e58a <__hexnan+0x7a>
 800e61a:	2508      	movs	r5, #8
 800e61c:	e7b5      	b.n	800e58a <__hexnan+0x7a>
 800e61e:	9b01      	ldr	r3, [sp, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d0df      	beq.n	800e5e4 <__hexnan+0xd4>
 800e624:	f1c3 0320 	rsb	r3, r3, #32
 800e628:	f04f 32ff 	mov.w	r2, #4294967295
 800e62c:	40da      	lsrs	r2, r3
 800e62e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e632:	4013      	ands	r3, r2
 800e634:	f846 3c04 	str.w	r3, [r6, #-4]
 800e638:	e7d4      	b.n	800e5e4 <__hexnan+0xd4>
 800e63a:	3f04      	subs	r7, #4
 800e63c:	e7d2      	b.n	800e5e4 <__hexnan+0xd4>
 800e63e:	2004      	movs	r0, #4
 800e640:	b007      	add	sp, #28
 800e642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e646 <__ascii_mbtowc>:
 800e646:	b082      	sub	sp, #8
 800e648:	b901      	cbnz	r1, 800e64c <__ascii_mbtowc+0x6>
 800e64a:	a901      	add	r1, sp, #4
 800e64c:	b142      	cbz	r2, 800e660 <__ascii_mbtowc+0x1a>
 800e64e:	b14b      	cbz	r3, 800e664 <__ascii_mbtowc+0x1e>
 800e650:	7813      	ldrb	r3, [r2, #0]
 800e652:	600b      	str	r3, [r1, #0]
 800e654:	7812      	ldrb	r2, [r2, #0]
 800e656:	1e10      	subs	r0, r2, #0
 800e658:	bf18      	it	ne
 800e65a:	2001      	movne	r0, #1
 800e65c:	b002      	add	sp, #8
 800e65e:	4770      	bx	lr
 800e660:	4610      	mov	r0, r2
 800e662:	e7fb      	b.n	800e65c <__ascii_mbtowc+0x16>
 800e664:	f06f 0001 	mvn.w	r0, #1
 800e668:	e7f8      	b.n	800e65c <__ascii_mbtowc+0x16>

0800e66a <_realloc_r>:
 800e66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e66e:	4680      	mov	r8, r0
 800e670:	4614      	mov	r4, r2
 800e672:	460e      	mov	r6, r1
 800e674:	b921      	cbnz	r1, 800e680 <_realloc_r+0x16>
 800e676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e67a:	4611      	mov	r1, r2
 800e67c:	f7fb bf48 	b.w	800a510 <_malloc_r>
 800e680:	b92a      	cbnz	r2, 800e68e <_realloc_r+0x24>
 800e682:	f7fd fe8b 	bl	800c39c <_free_r>
 800e686:	4625      	mov	r5, r4
 800e688:	4628      	mov	r0, r5
 800e68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e68e:	f000 f842 	bl	800e716 <_malloc_usable_size_r>
 800e692:	4284      	cmp	r4, r0
 800e694:	4607      	mov	r7, r0
 800e696:	d802      	bhi.n	800e69e <_realloc_r+0x34>
 800e698:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e69c:	d812      	bhi.n	800e6c4 <_realloc_r+0x5a>
 800e69e:	4621      	mov	r1, r4
 800e6a0:	4640      	mov	r0, r8
 800e6a2:	f7fb ff35 	bl	800a510 <_malloc_r>
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	d0ed      	beq.n	800e688 <_realloc_r+0x1e>
 800e6ac:	42bc      	cmp	r4, r7
 800e6ae:	4622      	mov	r2, r4
 800e6b0:	4631      	mov	r1, r6
 800e6b2:	bf28      	it	cs
 800e6b4:	463a      	movcs	r2, r7
 800e6b6:	f7fc ffe2 	bl	800b67e <memcpy>
 800e6ba:	4631      	mov	r1, r6
 800e6bc:	4640      	mov	r0, r8
 800e6be:	f7fd fe6d 	bl	800c39c <_free_r>
 800e6c2:	e7e1      	b.n	800e688 <_realloc_r+0x1e>
 800e6c4:	4635      	mov	r5, r6
 800e6c6:	e7df      	b.n	800e688 <_realloc_r+0x1e>

0800e6c8 <__ascii_wctomb>:
 800e6c8:	b149      	cbz	r1, 800e6de <__ascii_wctomb+0x16>
 800e6ca:	2aff      	cmp	r2, #255	; 0xff
 800e6cc:	bf85      	ittet	hi
 800e6ce:	238a      	movhi	r3, #138	; 0x8a
 800e6d0:	6003      	strhi	r3, [r0, #0]
 800e6d2:	700a      	strbls	r2, [r1, #0]
 800e6d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e6d8:	bf98      	it	ls
 800e6da:	2001      	movls	r0, #1
 800e6dc:	4770      	bx	lr
 800e6de:	4608      	mov	r0, r1
 800e6e0:	4770      	bx	lr
	...

0800e6e4 <fiprintf>:
 800e6e4:	b40e      	push	{r1, r2, r3}
 800e6e6:	b503      	push	{r0, r1, lr}
 800e6e8:	4601      	mov	r1, r0
 800e6ea:	ab03      	add	r3, sp, #12
 800e6ec:	4805      	ldr	r0, [pc, #20]	; (800e704 <fiprintf+0x20>)
 800e6ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6f2:	6800      	ldr	r0, [r0, #0]
 800e6f4:	9301      	str	r3, [sp, #4]
 800e6f6:	f000 f83f 	bl	800e778 <_vfiprintf_r>
 800e6fa:	b002      	add	sp, #8
 800e6fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e700:	b003      	add	sp, #12
 800e702:	4770      	bx	lr
 800e704:	20000064 	.word	0x20000064

0800e708 <abort>:
 800e708:	b508      	push	{r3, lr}
 800e70a:	2006      	movs	r0, #6
 800e70c:	f000 fa0c 	bl	800eb28 <raise>
 800e710:	2001      	movs	r0, #1
 800e712:	f7f6 fb43 	bl	8004d9c <_exit>

0800e716 <_malloc_usable_size_r>:
 800e716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e71a:	1f18      	subs	r0, r3, #4
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	bfbc      	itt	lt
 800e720:	580b      	ldrlt	r3, [r1, r0]
 800e722:	18c0      	addlt	r0, r0, r3
 800e724:	4770      	bx	lr

0800e726 <__sfputc_r>:
 800e726:	6893      	ldr	r3, [r2, #8]
 800e728:	3b01      	subs	r3, #1
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	b410      	push	{r4}
 800e72e:	6093      	str	r3, [r2, #8]
 800e730:	da08      	bge.n	800e744 <__sfputc_r+0x1e>
 800e732:	6994      	ldr	r4, [r2, #24]
 800e734:	42a3      	cmp	r3, r4
 800e736:	db01      	blt.n	800e73c <__sfputc_r+0x16>
 800e738:	290a      	cmp	r1, #10
 800e73a:	d103      	bne.n	800e744 <__sfputc_r+0x1e>
 800e73c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e740:	f000 b934 	b.w	800e9ac <__swbuf_r>
 800e744:	6813      	ldr	r3, [r2, #0]
 800e746:	1c58      	adds	r0, r3, #1
 800e748:	6010      	str	r0, [r2, #0]
 800e74a:	7019      	strb	r1, [r3, #0]
 800e74c:	4608      	mov	r0, r1
 800e74e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <__sfputs_r>:
 800e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e756:	4606      	mov	r6, r0
 800e758:	460f      	mov	r7, r1
 800e75a:	4614      	mov	r4, r2
 800e75c:	18d5      	adds	r5, r2, r3
 800e75e:	42ac      	cmp	r4, r5
 800e760:	d101      	bne.n	800e766 <__sfputs_r+0x12>
 800e762:	2000      	movs	r0, #0
 800e764:	e007      	b.n	800e776 <__sfputs_r+0x22>
 800e766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e76a:	463a      	mov	r2, r7
 800e76c:	4630      	mov	r0, r6
 800e76e:	f7ff ffda 	bl	800e726 <__sfputc_r>
 800e772:	1c43      	adds	r3, r0, #1
 800e774:	d1f3      	bne.n	800e75e <__sfputs_r+0xa>
 800e776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e778 <_vfiprintf_r>:
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77c:	460d      	mov	r5, r1
 800e77e:	b09d      	sub	sp, #116	; 0x74
 800e780:	4614      	mov	r4, r2
 800e782:	4698      	mov	r8, r3
 800e784:	4606      	mov	r6, r0
 800e786:	b118      	cbz	r0, 800e790 <_vfiprintf_r+0x18>
 800e788:	6a03      	ldr	r3, [r0, #32]
 800e78a:	b90b      	cbnz	r3, 800e790 <_vfiprintf_r+0x18>
 800e78c:	f7fc fe4e 	bl	800b42c <__sinit>
 800e790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e792:	07d9      	lsls	r1, r3, #31
 800e794:	d405      	bmi.n	800e7a2 <_vfiprintf_r+0x2a>
 800e796:	89ab      	ldrh	r3, [r5, #12]
 800e798:	059a      	lsls	r2, r3, #22
 800e79a:	d402      	bmi.n	800e7a2 <_vfiprintf_r+0x2a>
 800e79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e79e:	f7fc ff6c 	bl	800b67a <__retarget_lock_acquire_recursive>
 800e7a2:	89ab      	ldrh	r3, [r5, #12]
 800e7a4:	071b      	lsls	r3, r3, #28
 800e7a6:	d501      	bpl.n	800e7ac <_vfiprintf_r+0x34>
 800e7a8:	692b      	ldr	r3, [r5, #16]
 800e7aa:	b99b      	cbnz	r3, 800e7d4 <_vfiprintf_r+0x5c>
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	f000 f93a 	bl	800ea28 <__swsetup_r>
 800e7b4:	b170      	cbz	r0, 800e7d4 <_vfiprintf_r+0x5c>
 800e7b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7b8:	07dc      	lsls	r4, r3, #31
 800e7ba:	d504      	bpl.n	800e7c6 <_vfiprintf_r+0x4e>
 800e7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c0:	b01d      	add	sp, #116	; 0x74
 800e7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c6:	89ab      	ldrh	r3, [r5, #12]
 800e7c8:	0598      	lsls	r0, r3, #22
 800e7ca:	d4f7      	bmi.n	800e7bc <_vfiprintf_r+0x44>
 800e7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7ce:	f7fc ff55 	bl	800b67c <__retarget_lock_release_recursive>
 800e7d2:	e7f3      	b.n	800e7bc <_vfiprintf_r+0x44>
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e7d8:	2320      	movs	r3, #32
 800e7da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7de:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7e2:	2330      	movs	r3, #48	; 0x30
 800e7e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e998 <_vfiprintf_r+0x220>
 800e7e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7ec:	f04f 0901 	mov.w	r9, #1
 800e7f0:	4623      	mov	r3, r4
 800e7f2:	469a      	mov	sl, r3
 800e7f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7f8:	b10a      	cbz	r2, 800e7fe <_vfiprintf_r+0x86>
 800e7fa:	2a25      	cmp	r2, #37	; 0x25
 800e7fc:	d1f9      	bne.n	800e7f2 <_vfiprintf_r+0x7a>
 800e7fe:	ebba 0b04 	subs.w	fp, sl, r4
 800e802:	d00b      	beq.n	800e81c <_vfiprintf_r+0xa4>
 800e804:	465b      	mov	r3, fp
 800e806:	4622      	mov	r2, r4
 800e808:	4629      	mov	r1, r5
 800e80a:	4630      	mov	r0, r6
 800e80c:	f7ff ffa2 	bl	800e754 <__sfputs_r>
 800e810:	3001      	adds	r0, #1
 800e812:	f000 80a9 	beq.w	800e968 <_vfiprintf_r+0x1f0>
 800e816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e818:	445a      	add	r2, fp
 800e81a:	9209      	str	r2, [sp, #36]	; 0x24
 800e81c:	f89a 3000 	ldrb.w	r3, [sl]
 800e820:	2b00      	cmp	r3, #0
 800e822:	f000 80a1 	beq.w	800e968 <_vfiprintf_r+0x1f0>
 800e826:	2300      	movs	r3, #0
 800e828:	f04f 32ff 	mov.w	r2, #4294967295
 800e82c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e830:	f10a 0a01 	add.w	sl, sl, #1
 800e834:	9304      	str	r3, [sp, #16]
 800e836:	9307      	str	r3, [sp, #28]
 800e838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e83c:	931a      	str	r3, [sp, #104]	; 0x68
 800e83e:	4654      	mov	r4, sl
 800e840:	2205      	movs	r2, #5
 800e842:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e846:	4854      	ldr	r0, [pc, #336]	; (800e998 <_vfiprintf_r+0x220>)
 800e848:	f7f1 fcc2 	bl	80001d0 <memchr>
 800e84c:	9a04      	ldr	r2, [sp, #16]
 800e84e:	b9d8      	cbnz	r0, 800e888 <_vfiprintf_r+0x110>
 800e850:	06d1      	lsls	r1, r2, #27
 800e852:	bf44      	itt	mi
 800e854:	2320      	movmi	r3, #32
 800e856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e85a:	0713      	lsls	r3, r2, #28
 800e85c:	bf44      	itt	mi
 800e85e:	232b      	movmi	r3, #43	; 0x2b
 800e860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e864:	f89a 3000 	ldrb.w	r3, [sl]
 800e868:	2b2a      	cmp	r3, #42	; 0x2a
 800e86a:	d015      	beq.n	800e898 <_vfiprintf_r+0x120>
 800e86c:	9a07      	ldr	r2, [sp, #28]
 800e86e:	4654      	mov	r4, sl
 800e870:	2000      	movs	r0, #0
 800e872:	f04f 0c0a 	mov.w	ip, #10
 800e876:	4621      	mov	r1, r4
 800e878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e87c:	3b30      	subs	r3, #48	; 0x30
 800e87e:	2b09      	cmp	r3, #9
 800e880:	d94d      	bls.n	800e91e <_vfiprintf_r+0x1a6>
 800e882:	b1b0      	cbz	r0, 800e8b2 <_vfiprintf_r+0x13a>
 800e884:	9207      	str	r2, [sp, #28]
 800e886:	e014      	b.n	800e8b2 <_vfiprintf_r+0x13a>
 800e888:	eba0 0308 	sub.w	r3, r0, r8
 800e88c:	fa09 f303 	lsl.w	r3, r9, r3
 800e890:	4313      	orrs	r3, r2
 800e892:	9304      	str	r3, [sp, #16]
 800e894:	46a2      	mov	sl, r4
 800e896:	e7d2      	b.n	800e83e <_vfiprintf_r+0xc6>
 800e898:	9b03      	ldr	r3, [sp, #12]
 800e89a:	1d19      	adds	r1, r3, #4
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	9103      	str	r1, [sp, #12]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	bfbb      	ittet	lt
 800e8a4:	425b      	neglt	r3, r3
 800e8a6:	f042 0202 	orrlt.w	r2, r2, #2
 800e8aa:	9307      	strge	r3, [sp, #28]
 800e8ac:	9307      	strlt	r3, [sp, #28]
 800e8ae:	bfb8      	it	lt
 800e8b0:	9204      	strlt	r2, [sp, #16]
 800e8b2:	7823      	ldrb	r3, [r4, #0]
 800e8b4:	2b2e      	cmp	r3, #46	; 0x2e
 800e8b6:	d10c      	bne.n	800e8d2 <_vfiprintf_r+0x15a>
 800e8b8:	7863      	ldrb	r3, [r4, #1]
 800e8ba:	2b2a      	cmp	r3, #42	; 0x2a
 800e8bc:	d134      	bne.n	800e928 <_vfiprintf_r+0x1b0>
 800e8be:	9b03      	ldr	r3, [sp, #12]
 800e8c0:	1d1a      	adds	r2, r3, #4
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	9203      	str	r2, [sp, #12]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	bfb8      	it	lt
 800e8ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8ce:	3402      	adds	r4, #2
 800e8d0:	9305      	str	r3, [sp, #20]
 800e8d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e9a8 <_vfiprintf_r+0x230>
 800e8d6:	7821      	ldrb	r1, [r4, #0]
 800e8d8:	2203      	movs	r2, #3
 800e8da:	4650      	mov	r0, sl
 800e8dc:	f7f1 fc78 	bl	80001d0 <memchr>
 800e8e0:	b138      	cbz	r0, 800e8f2 <_vfiprintf_r+0x17a>
 800e8e2:	9b04      	ldr	r3, [sp, #16]
 800e8e4:	eba0 000a 	sub.w	r0, r0, sl
 800e8e8:	2240      	movs	r2, #64	; 0x40
 800e8ea:	4082      	lsls	r2, r0
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	3401      	adds	r4, #1
 800e8f0:	9304      	str	r3, [sp, #16]
 800e8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8f6:	4829      	ldr	r0, [pc, #164]	; (800e99c <_vfiprintf_r+0x224>)
 800e8f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8fc:	2206      	movs	r2, #6
 800e8fe:	f7f1 fc67 	bl	80001d0 <memchr>
 800e902:	2800      	cmp	r0, #0
 800e904:	d03f      	beq.n	800e986 <_vfiprintf_r+0x20e>
 800e906:	4b26      	ldr	r3, [pc, #152]	; (800e9a0 <_vfiprintf_r+0x228>)
 800e908:	bb1b      	cbnz	r3, 800e952 <_vfiprintf_r+0x1da>
 800e90a:	9b03      	ldr	r3, [sp, #12]
 800e90c:	3307      	adds	r3, #7
 800e90e:	f023 0307 	bic.w	r3, r3, #7
 800e912:	3308      	adds	r3, #8
 800e914:	9303      	str	r3, [sp, #12]
 800e916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e918:	443b      	add	r3, r7
 800e91a:	9309      	str	r3, [sp, #36]	; 0x24
 800e91c:	e768      	b.n	800e7f0 <_vfiprintf_r+0x78>
 800e91e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e922:	460c      	mov	r4, r1
 800e924:	2001      	movs	r0, #1
 800e926:	e7a6      	b.n	800e876 <_vfiprintf_r+0xfe>
 800e928:	2300      	movs	r3, #0
 800e92a:	3401      	adds	r4, #1
 800e92c:	9305      	str	r3, [sp, #20]
 800e92e:	4619      	mov	r1, r3
 800e930:	f04f 0c0a 	mov.w	ip, #10
 800e934:	4620      	mov	r0, r4
 800e936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e93a:	3a30      	subs	r2, #48	; 0x30
 800e93c:	2a09      	cmp	r2, #9
 800e93e:	d903      	bls.n	800e948 <_vfiprintf_r+0x1d0>
 800e940:	2b00      	cmp	r3, #0
 800e942:	d0c6      	beq.n	800e8d2 <_vfiprintf_r+0x15a>
 800e944:	9105      	str	r1, [sp, #20]
 800e946:	e7c4      	b.n	800e8d2 <_vfiprintf_r+0x15a>
 800e948:	fb0c 2101 	mla	r1, ip, r1, r2
 800e94c:	4604      	mov	r4, r0
 800e94e:	2301      	movs	r3, #1
 800e950:	e7f0      	b.n	800e934 <_vfiprintf_r+0x1bc>
 800e952:	ab03      	add	r3, sp, #12
 800e954:	9300      	str	r3, [sp, #0]
 800e956:	462a      	mov	r2, r5
 800e958:	4b12      	ldr	r3, [pc, #72]	; (800e9a4 <_vfiprintf_r+0x22c>)
 800e95a:	a904      	add	r1, sp, #16
 800e95c:	4630      	mov	r0, r6
 800e95e:	f7fb ff03 	bl	800a768 <_printf_float>
 800e962:	4607      	mov	r7, r0
 800e964:	1c78      	adds	r0, r7, #1
 800e966:	d1d6      	bne.n	800e916 <_vfiprintf_r+0x19e>
 800e968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e96a:	07d9      	lsls	r1, r3, #31
 800e96c:	d405      	bmi.n	800e97a <_vfiprintf_r+0x202>
 800e96e:	89ab      	ldrh	r3, [r5, #12]
 800e970:	059a      	lsls	r2, r3, #22
 800e972:	d402      	bmi.n	800e97a <_vfiprintf_r+0x202>
 800e974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e976:	f7fc fe81 	bl	800b67c <__retarget_lock_release_recursive>
 800e97a:	89ab      	ldrh	r3, [r5, #12]
 800e97c:	065b      	lsls	r3, r3, #25
 800e97e:	f53f af1d 	bmi.w	800e7bc <_vfiprintf_r+0x44>
 800e982:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e984:	e71c      	b.n	800e7c0 <_vfiprintf_r+0x48>
 800e986:	ab03      	add	r3, sp, #12
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	462a      	mov	r2, r5
 800e98c:	4b05      	ldr	r3, [pc, #20]	; (800e9a4 <_vfiprintf_r+0x22c>)
 800e98e:	a904      	add	r1, sp, #16
 800e990:	4630      	mov	r0, r6
 800e992:	f7fc f98d 	bl	800acb0 <_printf_i>
 800e996:	e7e4      	b.n	800e962 <_vfiprintf_r+0x1ea>
 800e998:	08012249 	.word	0x08012249
 800e99c:	08012253 	.word	0x08012253
 800e9a0:	0800a769 	.word	0x0800a769
 800e9a4:	0800e755 	.word	0x0800e755
 800e9a8:	0801224f 	.word	0x0801224f

0800e9ac <__swbuf_r>:
 800e9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ae:	460e      	mov	r6, r1
 800e9b0:	4614      	mov	r4, r2
 800e9b2:	4605      	mov	r5, r0
 800e9b4:	b118      	cbz	r0, 800e9be <__swbuf_r+0x12>
 800e9b6:	6a03      	ldr	r3, [r0, #32]
 800e9b8:	b90b      	cbnz	r3, 800e9be <__swbuf_r+0x12>
 800e9ba:	f7fc fd37 	bl	800b42c <__sinit>
 800e9be:	69a3      	ldr	r3, [r4, #24]
 800e9c0:	60a3      	str	r3, [r4, #8]
 800e9c2:	89a3      	ldrh	r3, [r4, #12]
 800e9c4:	071a      	lsls	r2, r3, #28
 800e9c6:	d525      	bpl.n	800ea14 <__swbuf_r+0x68>
 800e9c8:	6923      	ldr	r3, [r4, #16]
 800e9ca:	b31b      	cbz	r3, 800ea14 <__swbuf_r+0x68>
 800e9cc:	6823      	ldr	r3, [r4, #0]
 800e9ce:	6922      	ldr	r2, [r4, #16]
 800e9d0:	1a98      	subs	r0, r3, r2
 800e9d2:	6963      	ldr	r3, [r4, #20]
 800e9d4:	b2f6      	uxtb	r6, r6
 800e9d6:	4283      	cmp	r3, r0
 800e9d8:	4637      	mov	r7, r6
 800e9da:	dc04      	bgt.n	800e9e6 <__swbuf_r+0x3a>
 800e9dc:	4621      	mov	r1, r4
 800e9de:	4628      	mov	r0, r5
 800e9e0:	f7ff fa4a 	bl	800de78 <_fflush_r>
 800e9e4:	b9e0      	cbnz	r0, 800ea20 <__swbuf_r+0x74>
 800e9e6:	68a3      	ldr	r3, [r4, #8]
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	60a3      	str	r3, [r4, #8]
 800e9ec:	6823      	ldr	r3, [r4, #0]
 800e9ee:	1c5a      	adds	r2, r3, #1
 800e9f0:	6022      	str	r2, [r4, #0]
 800e9f2:	701e      	strb	r6, [r3, #0]
 800e9f4:	6962      	ldr	r2, [r4, #20]
 800e9f6:	1c43      	adds	r3, r0, #1
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d004      	beq.n	800ea06 <__swbuf_r+0x5a>
 800e9fc:	89a3      	ldrh	r3, [r4, #12]
 800e9fe:	07db      	lsls	r3, r3, #31
 800ea00:	d506      	bpl.n	800ea10 <__swbuf_r+0x64>
 800ea02:	2e0a      	cmp	r6, #10
 800ea04:	d104      	bne.n	800ea10 <__swbuf_r+0x64>
 800ea06:	4621      	mov	r1, r4
 800ea08:	4628      	mov	r0, r5
 800ea0a:	f7ff fa35 	bl	800de78 <_fflush_r>
 800ea0e:	b938      	cbnz	r0, 800ea20 <__swbuf_r+0x74>
 800ea10:	4638      	mov	r0, r7
 800ea12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea14:	4621      	mov	r1, r4
 800ea16:	4628      	mov	r0, r5
 800ea18:	f000 f806 	bl	800ea28 <__swsetup_r>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	d0d5      	beq.n	800e9cc <__swbuf_r+0x20>
 800ea20:	f04f 37ff 	mov.w	r7, #4294967295
 800ea24:	e7f4      	b.n	800ea10 <__swbuf_r+0x64>
	...

0800ea28 <__swsetup_r>:
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	4b2a      	ldr	r3, [pc, #168]	; (800ead4 <__swsetup_r+0xac>)
 800ea2c:	4605      	mov	r5, r0
 800ea2e:	6818      	ldr	r0, [r3, #0]
 800ea30:	460c      	mov	r4, r1
 800ea32:	b118      	cbz	r0, 800ea3c <__swsetup_r+0x14>
 800ea34:	6a03      	ldr	r3, [r0, #32]
 800ea36:	b90b      	cbnz	r3, 800ea3c <__swsetup_r+0x14>
 800ea38:	f7fc fcf8 	bl	800b42c <__sinit>
 800ea3c:	89a3      	ldrh	r3, [r4, #12]
 800ea3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea42:	0718      	lsls	r0, r3, #28
 800ea44:	d422      	bmi.n	800ea8c <__swsetup_r+0x64>
 800ea46:	06d9      	lsls	r1, r3, #27
 800ea48:	d407      	bmi.n	800ea5a <__swsetup_r+0x32>
 800ea4a:	2309      	movs	r3, #9
 800ea4c:	602b      	str	r3, [r5, #0]
 800ea4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea52:	81a3      	strh	r3, [r4, #12]
 800ea54:	f04f 30ff 	mov.w	r0, #4294967295
 800ea58:	e034      	b.n	800eac4 <__swsetup_r+0x9c>
 800ea5a:	0758      	lsls	r0, r3, #29
 800ea5c:	d512      	bpl.n	800ea84 <__swsetup_r+0x5c>
 800ea5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea60:	b141      	cbz	r1, 800ea74 <__swsetup_r+0x4c>
 800ea62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea66:	4299      	cmp	r1, r3
 800ea68:	d002      	beq.n	800ea70 <__swsetup_r+0x48>
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	f7fd fc96 	bl	800c39c <_free_r>
 800ea70:	2300      	movs	r3, #0
 800ea72:	6363      	str	r3, [r4, #52]	; 0x34
 800ea74:	89a3      	ldrh	r3, [r4, #12]
 800ea76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea7a:	81a3      	strh	r3, [r4, #12]
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	6063      	str	r3, [r4, #4]
 800ea80:	6923      	ldr	r3, [r4, #16]
 800ea82:	6023      	str	r3, [r4, #0]
 800ea84:	89a3      	ldrh	r3, [r4, #12]
 800ea86:	f043 0308 	orr.w	r3, r3, #8
 800ea8a:	81a3      	strh	r3, [r4, #12]
 800ea8c:	6923      	ldr	r3, [r4, #16]
 800ea8e:	b94b      	cbnz	r3, 800eaa4 <__swsetup_r+0x7c>
 800ea90:	89a3      	ldrh	r3, [r4, #12]
 800ea92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea9a:	d003      	beq.n	800eaa4 <__swsetup_r+0x7c>
 800ea9c:	4621      	mov	r1, r4
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f000 f884 	bl	800ebac <__smakebuf_r>
 800eaa4:	89a0      	ldrh	r0, [r4, #12]
 800eaa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eaaa:	f010 0301 	ands.w	r3, r0, #1
 800eaae:	d00a      	beq.n	800eac6 <__swsetup_r+0x9e>
 800eab0:	2300      	movs	r3, #0
 800eab2:	60a3      	str	r3, [r4, #8]
 800eab4:	6963      	ldr	r3, [r4, #20]
 800eab6:	425b      	negs	r3, r3
 800eab8:	61a3      	str	r3, [r4, #24]
 800eaba:	6923      	ldr	r3, [r4, #16]
 800eabc:	b943      	cbnz	r3, 800ead0 <__swsetup_r+0xa8>
 800eabe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eac2:	d1c4      	bne.n	800ea4e <__swsetup_r+0x26>
 800eac4:	bd38      	pop	{r3, r4, r5, pc}
 800eac6:	0781      	lsls	r1, r0, #30
 800eac8:	bf58      	it	pl
 800eaca:	6963      	ldrpl	r3, [r4, #20]
 800eacc:	60a3      	str	r3, [r4, #8]
 800eace:	e7f4      	b.n	800eaba <__swsetup_r+0x92>
 800ead0:	2000      	movs	r0, #0
 800ead2:	e7f7      	b.n	800eac4 <__swsetup_r+0x9c>
 800ead4:	20000064 	.word	0x20000064

0800ead8 <_raise_r>:
 800ead8:	291f      	cmp	r1, #31
 800eada:	b538      	push	{r3, r4, r5, lr}
 800eadc:	4604      	mov	r4, r0
 800eade:	460d      	mov	r5, r1
 800eae0:	d904      	bls.n	800eaec <_raise_r+0x14>
 800eae2:	2316      	movs	r3, #22
 800eae4:	6003      	str	r3, [r0, #0]
 800eae6:	f04f 30ff 	mov.w	r0, #4294967295
 800eaea:	bd38      	pop	{r3, r4, r5, pc}
 800eaec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eaee:	b112      	cbz	r2, 800eaf6 <_raise_r+0x1e>
 800eaf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eaf4:	b94b      	cbnz	r3, 800eb0a <_raise_r+0x32>
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f000 f830 	bl	800eb5c <_getpid_r>
 800eafc:	462a      	mov	r2, r5
 800eafe:	4601      	mov	r1, r0
 800eb00:	4620      	mov	r0, r4
 800eb02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb06:	f000 b817 	b.w	800eb38 <_kill_r>
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d00a      	beq.n	800eb24 <_raise_r+0x4c>
 800eb0e:	1c59      	adds	r1, r3, #1
 800eb10:	d103      	bne.n	800eb1a <_raise_r+0x42>
 800eb12:	2316      	movs	r3, #22
 800eb14:	6003      	str	r3, [r0, #0]
 800eb16:	2001      	movs	r0, #1
 800eb18:	e7e7      	b.n	800eaea <_raise_r+0x12>
 800eb1a:	2400      	movs	r4, #0
 800eb1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb20:	4628      	mov	r0, r5
 800eb22:	4798      	blx	r3
 800eb24:	2000      	movs	r0, #0
 800eb26:	e7e0      	b.n	800eaea <_raise_r+0x12>

0800eb28 <raise>:
 800eb28:	4b02      	ldr	r3, [pc, #8]	; (800eb34 <raise+0xc>)
 800eb2a:	4601      	mov	r1, r0
 800eb2c:	6818      	ldr	r0, [r3, #0]
 800eb2e:	f7ff bfd3 	b.w	800ead8 <_raise_r>
 800eb32:	bf00      	nop
 800eb34:	20000064 	.word	0x20000064

0800eb38 <_kill_r>:
 800eb38:	b538      	push	{r3, r4, r5, lr}
 800eb3a:	4d07      	ldr	r5, [pc, #28]	; (800eb58 <_kill_r+0x20>)
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	4604      	mov	r4, r0
 800eb40:	4608      	mov	r0, r1
 800eb42:	4611      	mov	r1, r2
 800eb44:	602b      	str	r3, [r5, #0]
 800eb46:	f7f6 f919 	bl	8004d7c <_kill>
 800eb4a:	1c43      	adds	r3, r0, #1
 800eb4c:	d102      	bne.n	800eb54 <_kill_r+0x1c>
 800eb4e:	682b      	ldr	r3, [r5, #0]
 800eb50:	b103      	cbz	r3, 800eb54 <_kill_r+0x1c>
 800eb52:	6023      	str	r3, [r4, #0]
 800eb54:	bd38      	pop	{r3, r4, r5, pc}
 800eb56:	bf00      	nop
 800eb58:	20000b3c 	.word	0x20000b3c

0800eb5c <_getpid_r>:
 800eb5c:	f7f6 b906 	b.w	8004d6c <_getpid>

0800eb60 <__swhatbuf_r>:
 800eb60:	b570      	push	{r4, r5, r6, lr}
 800eb62:	460c      	mov	r4, r1
 800eb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb68:	2900      	cmp	r1, #0
 800eb6a:	b096      	sub	sp, #88	; 0x58
 800eb6c:	4615      	mov	r5, r2
 800eb6e:	461e      	mov	r6, r3
 800eb70:	da0d      	bge.n	800eb8e <__swhatbuf_r+0x2e>
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eb78:	f04f 0100 	mov.w	r1, #0
 800eb7c:	bf0c      	ite	eq
 800eb7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800eb82:	2340      	movne	r3, #64	; 0x40
 800eb84:	2000      	movs	r0, #0
 800eb86:	6031      	str	r1, [r6, #0]
 800eb88:	602b      	str	r3, [r5, #0]
 800eb8a:	b016      	add	sp, #88	; 0x58
 800eb8c:	bd70      	pop	{r4, r5, r6, pc}
 800eb8e:	466a      	mov	r2, sp
 800eb90:	f000 f848 	bl	800ec24 <_fstat_r>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	dbec      	blt.n	800eb72 <__swhatbuf_r+0x12>
 800eb98:	9901      	ldr	r1, [sp, #4]
 800eb9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800eb9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eba2:	4259      	negs	r1, r3
 800eba4:	4159      	adcs	r1, r3
 800eba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebaa:	e7eb      	b.n	800eb84 <__swhatbuf_r+0x24>

0800ebac <__smakebuf_r>:
 800ebac:	898b      	ldrh	r3, [r1, #12]
 800ebae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ebb0:	079d      	lsls	r5, r3, #30
 800ebb2:	4606      	mov	r6, r0
 800ebb4:	460c      	mov	r4, r1
 800ebb6:	d507      	bpl.n	800ebc8 <__smakebuf_r+0x1c>
 800ebb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ebbc:	6023      	str	r3, [r4, #0]
 800ebbe:	6123      	str	r3, [r4, #16]
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	6163      	str	r3, [r4, #20]
 800ebc4:	b002      	add	sp, #8
 800ebc6:	bd70      	pop	{r4, r5, r6, pc}
 800ebc8:	ab01      	add	r3, sp, #4
 800ebca:	466a      	mov	r2, sp
 800ebcc:	f7ff ffc8 	bl	800eb60 <__swhatbuf_r>
 800ebd0:	9900      	ldr	r1, [sp, #0]
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	4630      	mov	r0, r6
 800ebd6:	f7fb fc9b 	bl	800a510 <_malloc_r>
 800ebda:	b948      	cbnz	r0, 800ebf0 <__smakebuf_r+0x44>
 800ebdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebe0:	059a      	lsls	r2, r3, #22
 800ebe2:	d4ef      	bmi.n	800ebc4 <__smakebuf_r+0x18>
 800ebe4:	f023 0303 	bic.w	r3, r3, #3
 800ebe8:	f043 0302 	orr.w	r3, r3, #2
 800ebec:	81a3      	strh	r3, [r4, #12]
 800ebee:	e7e3      	b.n	800ebb8 <__smakebuf_r+0xc>
 800ebf0:	89a3      	ldrh	r3, [r4, #12]
 800ebf2:	6020      	str	r0, [r4, #0]
 800ebf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebf8:	81a3      	strh	r3, [r4, #12]
 800ebfa:	9b00      	ldr	r3, [sp, #0]
 800ebfc:	6163      	str	r3, [r4, #20]
 800ebfe:	9b01      	ldr	r3, [sp, #4]
 800ec00:	6120      	str	r0, [r4, #16]
 800ec02:	b15b      	cbz	r3, 800ec1c <__smakebuf_r+0x70>
 800ec04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f000 f81d 	bl	800ec48 <_isatty_r>
 800ec0e:	b128      	cbz	r0, 800ec1c <__smakebuf_r+0x70>
 800ec10:	89a3      	ldrh	r3, [r4, #12]
 800ec12:	f023 0303 	bic.w	r3, r3, #3
 800ec16:	f043 0301 	orr.w	r3, r3, #1
 800ec1a:	81a3      	strh	r3, [r4, #12]
 800ec1c:	89a3      	ldrh	r3, [r4, #12]
 800ec1e:	431d      	orrs	r5, r3
 800ec20:	81a5      	strh	r5, [r4, #12]
 800ec22:	e7cf      	b.n	800ebc4 <__smakebuf_r+0x18>

0800ec24 <_fstat_r>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	4d07      	ldr	r5, [pc, #28]	; (800ec44 <_fstat_r+0x20>)
 800ec28:	2300      	movs	r3, #0
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	4608      	mov	r0, r1
 800ec2e:	4611      	mov	r1, r2
 800ec30:	602b      	str	r3, [r5, #0]
 800ec32:	f7f6 f902 	bl	8004e3a <_fstat>
 800ec36:	1c43      	adds	r3, r0, #1
 800ec38:	d102      	bne.n	800ec40 <_fstat_r+0x1c>
 800ec3a:	682b      	ldr	r3, [r5, #0]
 800ec3c:	b103      	cbz	r3, 800ec40 <_fstat_r+0x1c>
 800ec3e:	6023      	str	r3, [r4, #0]
 800ec40:	bd38      	pop	{r3, r4, r5, pc}
 800ec42:	bf00      	nop
 800ec44:	20000b3c 	.word	0x20000b3c

0800ec48 <_isatty_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	4d06      	ldr	r5, [pc, #24]	; (800ec64 <_isatty_r+0x1c>)
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	4604      	mov	r4, r0
 800ec50:	4608      	mov	r0, r1
 800ec52:	602b      	str	r3, [r5, #0]
 800ec54:	f7f6 f901 	bl	8004e5a <_isatty>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d102      	bne.n	800ec62 <_isatty_r+0x1a>
 800ec5c:	682b      	ldr	r3, [r5, #0]
 800ec5e:	b103      	cbz	r3, 800ec62 <_isatty_r+0x1a>
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	bd38      	pop	{r3, r4, r5, pc}
 800ec64:	20000b3c 	.word	0x20000b3c

0800ec68 <atan2>:
 800ec68:	f000 bda6 	b.w	800f7b8 <__ieee754_atan2>

0800ec6c <pow>:
 800ec6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec6e:	ed2d 8b02 	vpush	{d8}
 800ec72:	eeb0 8a40 	vmov.f32	s16, s0
 800ec76:	eef0 8a60 	vmov.f32	s17, s1
 800ec7a:	ec55 4b11 	vmov	r4, r5, d1
 800ec7e:	f000 fe63 	bl	800f948 <__ieee754_pow>
 800ec82:	4622      	mov	r2, r4
 800ec84:	462b      	mov	r3, r5
 800ec86:	4620      	mov	r0, r4
 800ec88:	4629      	mov	r1, r5
 800ec8a:	ec57 6b10 	vmov	r6, r7, d0
 800ec8e:	f7f1 ff4d 	bl	8000b2c <__aeabi_dcmpun>
 800ec92:	2800      	cmp	r0, #0
 800ec94:	d13b      	bne.n	800ed0e <pow+0xa2>
 800ec96:	ec51 0b18 	vmov	r0, r1, d8
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f7f1 ff13 	bl	8000ac8 <__aeabi_dcmpeq>
 800eca2:	b1b8      	cbz	r0, 800ecd4 <pow+0x68>
 800eca4:	2200      	movs	r2, #0
 800eca6:	2300      	movs	r3, #0
 800eca8:	4620      	mov	r0, r4
 800ecaa:	4629      	mov	r1, r5
 800ecac:	f7f1 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	d146      	bne.n	800ed42 <pow+0xd6>
 800ecb4:	ec45 4b10 	vmov	d0, r4, r5
 800ecb8:	f000 f902 	bl	800eec0 <finite>
 800ecbc:	b338      	cbz	r0, 800ed0e <pow+0xa2>
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	4629      	mov	r1, r5
 800ecc6:	f7f1 ff09 	bl	8000adc <__aeabi_dcmplt>
 800ecca:	b300      	cbz	r0, 800ed0e <pow+0xa2>
 800eccc:	f7fc fcaa 	bl	800b624 <__errno>
 800ecd0:	2322      	movs	r3, #34	; 0x22
 800ecd2:	e01b      	b.n	800ed0c <pow+0xa0>
 800ecd4:	ec47 6b10 	vmov	d0, r6, r7
 800ecd8:	f000 f8f2 	bl	800eec0 <finite>
 800ecdc:	b9e0      	cbnz	r0, 800ed18 <pow+0xac>
 800ecde:	eeb0 0a48 	vmov.f32	s0, s16
 800ece2:	eef0 0a68 	vmov.f32	s1, s17
 800ece6:	f000 f8eb 	bl	800eec0 <finite>
 800ecea:	b1a8      	cbz	r0, 800ed18 <pow+0xac>
 800ecec:	ec45 4b10 	vmov	d0, r4, r5
 800ecf0:	f000 f8e6 	bl	800eec0 <finite>
 800ecf4:	b180      	cbz	r0, 800ed18 <pow+0xac>
 800ecf6:	4632      	mov	r2, r6
 800ecf8:	463b      	mov	r3, r7
 800ecfa:	4630      	mov	r0, r6
 800ecfc:	4639      	mov	r1, r7
 800ecfe:	f7f1 ff15 	bl	8000b2c <__aeabi_dcmpun>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d0e2      	beq.n	800eccc <pow+0x60>
 800ed06:	f7fc fc8d 	bl	800b624 <__errno>
 800ed0a:	2321      	movs	r3, #33	; 0x21
 800ed0c:	6003      	str	r3, [r0, #0]
 800ed0e:	ecbd 8b02 	vpop	{d8}
 800ed12:	ec47 6b10 	vmov	d0, r6, r7
 800ed16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed18:	2200      	movs	r2, #0
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	4639      	mov	r1, r7
 800ed20:	f7f1 fed2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d0f2      	beq.n	800ed0e <pow+0xa2>
 800ed28:	eeb0 0a48 	vmov.f32	s0, s16
 800ed2c:	eef0 0a68 	vmov.f32	s1, s17
 800ed30:	f000 f8c6 	bl	800eec0 <finite>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d0ea      	beq.n	800ed0e <pow+0xa2>
 800ed38:	ec45 4b10 	vmov	d0, r4, r5
 800ed3c:	f000 f8c0 	bl	800eec0 <finite>
 800ed40:	e7c3      	b.n	800ecca <pow+0x5e>
 800ed42:	4f01      	ldr	r7, [pc, #4]	; (800ed48 <pow+0xdc>)
 800ed44:	2600      	movs	r6, #0
 800ed46:	e7e2      	b.n	800ed0e <pow+0xa2>
 800ed48:	3ff00000 	.word	0x3ff00000

0800ed4c <sqrt>:
 800ed4c:	b538      	push	{r3, r4, r5, lr}
 800ed4e:	ed2d 8b02 	vpush	{d8}
 800ed52:	ec55 4b10 	vmov	r4, r5, d0
 800ed56:	f000 f8bf 	bl	800eed8 <__ieee754_sqrt>
 800ed5a:	4622      	mov	r2, r4
 800ed5c:	462b      	mov	r3, r5
 800ed5e:	4620      	mov	r0, r4
 800ed60:	4629      	mov	r1, r5
 800ed62:	eeb0 8a40 	vmov.f32	s16, s0
 800ed66:	eef0 8a60 	vmov.f32	s17, s1
 800ed6a:	f7f1 fedf 	bl	8000b2c <__aeabi_dcmpun>
 800ed6e:	b990      	cbnz	r0, 800ed96 <sqrt+0x4a>
 800ed70:	2200      	movs	r2, #0
 800ed72:	2300      	movs	r3, #0
 800ed74:	4620      	mov	r0, r4
 800ed76:	4629      	mov	r1, r5
 800ed78:	f7f1 feb0 	bl	8000adc <__aeabi_dcmplt>
 800ed7c:	b158      	cbz	r0, 800ed96 <sqrt+0x4a>
 800ed7e:	f7fc fc51 	bl	800b624 <__errno>
 800ed82:	2321      	movs	r3, #33	; 0x21
 800ed84:	6003      	str	r3, [r0, #0]
 800ed86:	2200      	movs	r2, #0
 800ed88:	2300      	movs	r3, #0
 800ed8a:	4610      	mov	r0, r2
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	f7f1 fd5d 	bl	800084c <__aeabi_ddiv>
 800ed92:	ec41 0b18 	vmov	d8, r0, r1
 800ed96:	eeb0 0a48 	vmov.f32	s0, s16
 800ed9a:	eef0 0a68 	vmov.f32	s1, s17
 800ed9e:	ecbd 8b02 	vpop	{d8}
 800eda2:	bd38      	pop	{r3, r4, r5, pc}
 800eda4:	0000      	movs	r0, r0
	...

0800eda8 <sin>:
 800eda8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edaa:	ec53 2b10 	vmov	r2, r3, d0
 800edae:	4828      	ldr	r0, [pc, #160]	; (800ee50 <sin+0xa8>)
 800edb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800edb4:	4281      	cmp	r1, r0
 800edb6:	dc07      	bgt.n	800edc8 <sin+0x20>
 800edb8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ee48 <sin+0xa0>
 800edbc:	2000      	movs	r0, #0
 800edbe:	b005      	add	sp, #20
 800edc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800edc4:	f000 ba2c 	b.w	800f220 <__kernel_sin>
 800edc8:	4822      	ldr	r0, [pc, #136]	; (800ee54 <sin+0xac>)
 800edca:	4281      	cmp	r1, r0
 800edcc:	dd09      	ble.n	800ede2 <sin+0x3a>
 800edce:	ee10 0a10 	vmov	r0, s0
 800edd2:	4619      	mov	r1, r3
 800edd4:	f7f1 fa58 	bl	8000288 <__aeabi_dsub>
 800edd8:	ec41 0b10 	vmov	d0, r0, r1
 800eddc:	b005      	add	sp, #20
 800edde:	f85d fb04 	ldr.w	pc, [sp], #4
 800ede2:	4668      	mov	r0, sp
 800ede4:	f001 fadc 	bl	80103a0 <__ieee754_rem_pio2>
 800ede8:	f000 0003 	and.w	r0, r0, #3
 800edec:	2801      	cmp	r0, #1
 800edee:	d00c      	beq.n	800ee0a <sin+0x62>
 800edf0:	2802      	cmp	r0, #2
 800edf2:	d011      	beq.n	800ee18 <sin+0x70>
 800edf4:	b9f0      	cbnz	r0, 800ee34 <sin+0x8c>
 800edf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800edfa:	ed9d 0b00 	vldr	d0, [sp]
 800edfe:	2001      	movs	r0, #1
 800ee00:	f000 fa0e 	bl	800f220 <__kernel_sin>
 800ee04:	ec51 0b10 	vmov	r0, r1, d0
 800ee08:	e7e6      	b.n	800edd8 <sin+0x30>
 800ee0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ee0e:	ed9d 0b00 	vldr	d0, [sp]
 800ee12:	f000 f93d 	bl	800f090 <__kernel_cos>
 800ee16:	e7f5      	b.n	800ee04 <sin+0x5c>
 800ee18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ee1c:	ed9d 0b00 	vldr	d0, [sp]
 800ee20:	2001      	movs	r0, #1
 800ee22:	f000 f9fd 	bl	800f220 <__kernel_sin>
 800ee26:	ec53 2b10 	vmov	r2, r3, d0
 800ee2a:	ee10 0a10 	vmov	r0, s0
 800ee2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ee32:	e7d1      	b.n	800edd8 <sin+0x30>
 800ee34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ee38:	ed9d 0b00 	vldr	d0, [sp]
 800ee3c:	f000 f928 	bl	800f090 <__kernel_cos>
 800ee40:	e7f1      	b.n	800ee26 <sin+0x7e>
 800ee42:	bf00      	nop
 800ee44:	f3af 8000 	nop.w
	...
 800ee50:	3fe921fb 	.word	0x3fe921fb
 800ee54:	7fefffff 	.word	0x7fefffff

0800ee58 <tan>:
 800ee58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee5a:	ec53 2b10 	vmov	r2, r3, d0
 800ee5e:	4816      	ldr	r0, [pc, #88]	; (800eeb8 <tan+0x60>)
 800ee60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ee64:	4281      	cmp	r1, r0
 800ee66:	dc07      	bgt.n	800ee78 <tan+0x20>
 800ee68:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800eeb0 <tan+0x58>
 800ee6c:	2001      	movs	r0, #1
 800ee6e:	b005      	add	sp, #20
 800ee70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee74:	f000 ba94 	b.w	800f3a0 <__kernel_tan>
 800ee78:	4810      	ldr	r0, [pc, #64]	; (800eebc <tan+0x64>)
 800ee7a:	4281      	cmp	r1, r0
 800ee7c:	dd09      	ble.n	800ee92 <tan+0x3a>
 800ee7e:	ee10 0a10 	vmov	r0, s0
 800ee82:	4619      	mov	r1, r3
 800ee84:	f7f1 fa00 	bl	8000288 <__aeabi_dsub>
 800ee88:	ec41 0b10 	vmov	d0, r0, r1
 800ee8c:	b005      	add	sp, #20
 800ee8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee92:	4668      	mov	r0, sp
 800ee94:	f001 fa84 	bl	80103a0 <__ieee754_rem_pio2>
 800ee98:	0040      	lsls	r0, r0, #1
 800ee9a:	f000 0002 	and.w	r0, r0, #2
 800ee9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eea2:	ed9d 0b00 	vldr	d0, [sp]
 800eea6:	f1c0 0001 	rsb	r0, r0, #1
 800eeaa:	f000 fa79 	bl	800f3a0 <__kernel_tan>
 800eeae:	e7ed      	b.n	800ee8c <tan+0x34>
	...
 800eeb8:	3fe921fb 	.word	0x3fe921fb
 800eebc:	7fefffff 	.word	0x7fefffff

0800eec0 <finite>:
 800eec0:	b082      	sub	sp, #8
 800eec2:	ed8d 0b00 	vstr	d0, [sp]
 800eec6:	9801      	ldr	r0, [sp, #4]
 800eec8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800eecc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800eed0:	0fc0      	lsrs	r0, r0, #31
 800eed2:	b002      	add	sp, #8
 800eed4:	4770      	bx	lr
	...

0800eed8 <__ieee754_sqrt>:
 800eed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	ec55 4b10 	vmov	r4, r5, d0
 800eee0:	4e67      	ldr	r6, [pc, #412]	; (800f080 <__ieee754_sqrt+0x1a8>)
 800eee2:	43ae      	bics	r6, r5
 800eee4:	ee10 0a10 	vmov	r0, s0
 800eee8:	ee10 2a10 	vmov	r2, s0
 800eeec:	4629      	mov	r1, r5
 800eeee:	462b      	mov	r3, r5
 800eef0:	d10d      	bne.n	800ef0e <__ieee754_sqrt+0x36>
 800eef2:	f7f1 fb81 	bl	80005f8 <__aeabi_dmul>
 800eef6:	4602      	mov	r2, r0
 800eef8:	460b      	mov	r3, r1
 800eefa:	4620      	mov	r0, r4
 800eefc:	4629      	mov	r1, r5
 800eefe:	f7f1 f9c5 	bl	800028c <__adddf3>
 800ef02:	4604      	mov	r4, r0
 800ef04:	460d      	mov	r5, r1
 800ef06:	ec45 4b10 	vmov	d0, r4, r5
 800ef0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef0e:	2d00      	cmp	r5, #0
 800ef10:	dc0b      	bgt.n	800ef2a <__ieee754_sqrt+0x52>
 800ef12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ef16:	4326      	orrs	r6, r4
 800ef18:	d0f5      	beq.n	800ef06 <__ieee754_sqrt+0x2e>
 800ef1a:	b135      	cbz	r5, 800ef2a <__ieee754_sqrt+0x52>
 800ef1c:	f7f1 f9b4 	bl	8000288 <__aeabi_dsub>
 800ef20:	4602      	mov	r2, r0
 800ef22:	460b      	mov	r3, r1
 800ef24:	f7f1 fc92 	bl	800084c <__aeabi_ddiv>
 800ef28:	e7eb      	b.n	800ef02 <__ieee754_sqrt+0x2a>
 800ef2a:	1509      	asrs	r1, r1, #20
 800ef2c:	f000 808d 	beq.w	800f04a <__ieee754_sqrt+0x172>
 800ef30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef34:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ef38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef3c:	07c9      	lsls	r1, r1, #31
 800ef3e:	bf5c      	itt	pl
 800ef40:	005b      	lslpl	r3, r3, #1
 800ef42:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ef46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ef4a:	bf58      	it	pl
 800ef4c:	0052      	lslpl	r2, r2, #1
 800ef4e:	2500      	movs	r5, #0
 800ef50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ef54:	1076      	asrs	r6, r6, #1
 800ef56:	0052      	lsls	r2, r2, #1
 800ef58:	f04f 0e16 	mov.w	lr, #22
 800ef5c:	46ac      	mov	ip, r5
 800ef5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef62:	eb0c 0001 	add.w	r0, ip, r1
 800ef66:	4298      	cmp	r0, r3
 800ef68:	bfde      	ittt	le
 800ef6a:	1a1b      	suble	r3, r3, r0
 800ef6c:	eb00 0c01 	addle.w	ip, r0, r1
 800ef70:	186d      	addle	r5, r5, r1
 800ef72:	005b      	lsls	r3, r3, #1
 800ef74:	f1be 0e01 	subs.w	lr, lr, #1
 800ef78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ef7c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ef80:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ef84:	d1ed      	bne.n	800ef62 <__ieee754_sqrt+0x8a>
 800ef86:	4674      	mov	r4, lr
 800ef88:	2720      	movs	r7, #32
 800ef8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ef8e:	4563      	cmp	r3, ip
 800ef90:	eb01 000e 	add.w	r0, r1, lr
 800ef94:	dc02      	bgt.n	800ef9c <__ieee754_sqrt+0xc4>
 800ef96:	d113      	bne.n	800efc0 <__ieee754_sqrt+0xe8>
 800ef98:	4290      	cmp	r0, r2
 800ef9a:	d811      	bhi.n	800efc0 <__ieee754_sqrt+0xe8>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	eb00 0e01 	add.w	lr, r0, r1
 800efa2:	da57      	bge.n	800f054 <__ieee754_sqrt+0x17c>
 800efa4:	f1be 0f00 	cmp.w	lr, #0
 800efa8:	db54      	blt.n	800f054 <__ieee754_sqrt+0x17c>
 800efaa:	f10c 0801 	add.w	r8, ip, #1
 800efae:	eba3 030c 	sub.w	r3, r3, ip
 800efb2:	4290      	cmp	r0, r2
 800efb4:	bf88      	it	hi
 800efb6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800efba:	1a12      	subs	r2, r2, r0
 800efbc:	440c      	add	r4, r1
 800efbe:	46c4      	mov	ip, r8
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	3f01      	subs	r7, #1
 800efc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800efc8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800efcc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800efd0:	d1dd      	bne.n	800ef8e <__ieee754_sqrt+0xb6>
 800efd2:	4313      	orrs	r3, r2
 800efd4:	d01b      	beq.n	800f00e <__ieee754_sqrt+0x136>
 800efd6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f084 <__ieee754_sqrt+0x1ac>
 800efda:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f088 <__ieee754_sqrt+0x1b0>
 800efde:	e9da 0100 	ldrd	r0, r1, [sl]
 800efe2:	e9db 2300 	ldrd	r2, r3, [fp]
 800efe6:	f7f1 f94f 	bl	8000288 <__aeabi_dsub>
 800efea:	e9da 8900 	ldrd	r8, r9, [sl]
 800efee:	4602      	mov	r2, r0
 800eff0:	460b      	mov	r3, r1
 800eff2:	4640      	mov	r0, r8
 800eff4:	4649      	mov	r1, r9
 800eff6:	f7f1 fd7b 	bl	8000af0 <__aeabi_dcmple>
 800effa:	b140      	cbz	r0, 800f00e <__ieee754_sqrt+0x136>
 800effc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f000:	e9da 0100 	ldrd	r0, r1, [sl]
 800f004:	e9db 2300 	ldrd	r2, r3, [fp]
 800f008:	d126      	bne.n	800f058 <__ieee754_sqrt+0x180>
 800f00a:	3501      	adds	r5, #1
 800f00c:	463c      	mov	r4, r7
 800f00e:	106a      	asrs	r2, r5, #1
 800f010:	0863      	lsrs	r3, r4, #1
 800f012:	07e9      	lsls	r1, r5, #31
 800f014:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f018:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f01c:	bf48      	it	mi
 800f01e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f022:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f026:	461c      	mov	r4, r3
 800f028:	e76d      	b.n	800ef06 <__ieee754_sqrt+0x2e>
 800f02a:	0ad3      	lsrs	r3, r2, #11
 800f02c:	3815      	subs	r0, #21
 800f02e:	0552      	lsls	r2, r2, #21
 800f030:	2b00      	cmp	r3, #0
 800f032:	d0fa      	beq.n	800f02a <__ieee754_sqrt+0x152>
 800f034:	02dc      	lsls	r4, r3, #11
 800f036:	d50a      	bpl.n	800f04e <__ieee754_sqrt+0x176>
 800f038:	f1c1 0420 	rsb	r4, r1, #32
 800f03c:	fa22 f404 	lsr.w	r4, r2, r4
 800f040:	1e4d      	subs	r5, r1, #1
 800f042:	408a      	lsls	r2, r1
 800f044:	4323      	orrs	r3, r4
 800f046:	1b41      	subs	r1, r0, r5
 800f048:	e772      	b.n	800ef30 <__ieee754_sqrt+0x58>
 800f04a:	4608      	mov	r0, r1
 800f04c:	e7f0      	b.n	800f030 <__ieee754_sqrt+0x158>
 800f04e:	005b      	lsls	r3, r3, #1
 800f050:	3101      	adds	r1, #1
 800f052:	e7ef      	b.n	800f034 <__ieee754_sqrt+0x15c>
 800f054:	46e0      	mov	r8, ip
 800f056:	e7aa      	b.n	800efae <__ieee754_sqrt+0xd6>
 800f058:	f7f1 f918 	bl	800028c <__adddf3>
 800f05c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f060:	4602      	mov	r2, r0
 800f062:	460b      	mov	r3, r1
 800f064:	4640      	mov	r0, r8
 800f066:	4649      	mov	r1, r9
 800f068:	f7f1 fd38 	bl	8000adc <__aeabi_dcmplt>
 800f06c:	b120      	cbz	r0, 800f078 <__ieee754_sqrt+0x1a0>
 800f06e:	1ca0      	adds	r0, r4, #2
 800f070:	bf08      	it	eq
 800f072:	3501      	addeq	r5, #1
 800f074:	3402      	adds	r4, #2
 800f076:	e7ca      	b.n	800f00e <__ieee754_sqrt+0x136>
 800f078:	3401      	adds	r4, #1
 800f07a:	f024 0401 	bic.w	r4, r4, #1
 800f07e:	e7c6      	b.n	800f00e <__ieee754_sqrt+0x136>
 800f080:	7ff00000 	.word	0x7ff00000
 800f084:	200001d8 	.word	0x200001d8
 800f088:	200001e0 	.word	0x200001e0
 800f08c:	00000000 	.word	0x00000000

0800f090 <__kernel_cos>:
 800f090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f094:	ec57 6b10 	vmov	r6, r7, d0
 800f098:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f09c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f0a0:	ed8d 1b00 	vstr	d1, [sp]
 800f0a4:	da07      	bge.n	800f0b6 <__kernel_cos+0x26>
 800f0a6:	ee10 0a10 	vmov	r0, s0
 800f0aa:	4639      	mov	r1, r7
 800f0ac:	f7f1 fd54 	bl	8000b58 <__aeabi_d2iz>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	f000 8088 	beq.w	800f1c6 <__kernel_cos+0x136>
 800f0b6:	4632      	mov	r2, r6
 800f0b8:	463b      	mov	r3, r7
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	4639      	mov	r1, r7
 800f0be:	f7f1 fa9b 	bl	80005f8 <__aeabi_dmul>
 800f0c2:	4b51      	ldr	r3, [pc, #324]	; (800f208 <__kernel_cos+0x178>)
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	460d      	mov	r5, r1
 800f0ca:	f7f1 fa95 	bl	80005f8 <__aeabi_dmul>
 800f0ce:	a340      	add	r3, pc, #256	; (adr r3, 800f1d0 <__kernel_cos+0x140>)
 800f0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d4:	4682      	mov	sl, r0
 800f0d6:	468b      	mov	fp, r1
 800f0d8:	4620      	mov	r0, r4
 800f0da:	4629      	mov	r1, r5
 800f0dc:	f7f1 fa8c 	bl	80005f8 <__aeabi_dmul>
 800f0e0:	a33d      	add	r3, pc, #244	; (adr r3, 800f1d8 <__kernel_cos+0x148>)
 800f0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e6:	f7f1 f8d1 	bl	800028c <__adddf3>
 800f0ea:	4622      	mov	r2, r4
 800f0ec:	462b      	mov	r3, r5
 800f0ee:	f7f1 fa83 	bl	80005f8 <__aeabi_dmul>
 800f0f2:	a33b      	add	r3, pc, #236	; (adr r3, 800f1e0 <__kernel_cos+0x150>)
 800f0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f8:	f7f1 f8c6 	bl	8000288 <__aeabi_dsub>
 800f0fc:	4622      	mov	r2, r4
 800f0fe:	462b      	mov	r3, r5
 800f100:	f7f1 fa7a 	bl	80005f8 <__aeabi_dmul>
 800f104:	a338      	add	r3, pc, #224	; (adr r3, 800f1e8 <__kernel_cos+0x158>)
 800f106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10a:	f7f1 f8bf 	bl	800028c <__adddf3>
 800f10e:	4622      	mov	r2, r4
 800f110:	462b      	mov	r3, r5
 800f112:	f7f1 fa71 	bl	80005f8 <__aeabi_dmul>
 800f116:	a336      	add	r3, pc, #216	; (adr r3, 800f1f0 <__kernel_cos+0x160>)
 800f118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11c:	f7f1 f8b4 	bl	8000288 <__aeabi_dsub>
 800f120:	4622      	mov	r2, r4
 800f122:	462b      	mov	r3, r5
 800f124:	f7f1 fa68 	bl	80005f8 <__aeabi_dmul>
 800f128:	a333      	add	r3, pc, #204	; (adr r3, 800f1f8 <__kernel_cos+0x168>)
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	f7f1 f8ad 	bl	800028c <__adddf3>
 800f132:	4622      	mov	r2, r4
 800f134:	462b      	mov	r3, r5
 800f136:	f7f1 fa5f 	bl	80005f8 <__aeabi_dmul>
 800f13a:	4622      	mov	r2, r4
 800f13c:	462b      	mov	r3, r5
 800f13e:	f7f1 fa5b 	bl	80005f8 <__aeabi_dmul>
 800f142:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f146:	4604      	mov	r4, r0
 800f148:	460d      	mov	r5, r1
 800f14a:	4630      	mov	r0, r6
 800f14c:	4639      	mov	r1, r7
 800f14e:	f7f1 fa53 	bl	80005f8 <__aeabi_dmul>
 800f152:	460b      	mov	r3, r1
 800f154:	4602      	mov	r2, r0
 800f156:	4629      	mov	r1, r5
 800f158:	4620      	mov	r0, r4
 800f15a:	f7f1 f895 	bl	8000288 <__aeabi_dsub>
 800f15e:	4b2b      	ldr	r3, [pc, #172]	; (800f20c <__kernel_cos+0x17c>)
 800f160:	4598      	cmp	r8, r3
 800f162:	4606      	mov	r6, r0
 800f164:	460f      	mov	r7, r1
 800f166:	dc10      	bgt.n	800f18a <__kernel_cos+0xfa>
 800f168:	4602      	mov	r2, r0
 800f16a:	460b      	mov	r3, r1
 800f16c:	4650      	mov	r0, sl
 800f16e:	4659      	mov	r1, fp
 800f170:	f7f1 f88a 	bl	8000288 <__aeabi_dsub>
 800f174:	460b      	mov	r3, r1
 800f176:	4926      	ldr	r1, [pc, #152]	; (800f210 <__kernel_cos+0x180>)
 800f178:	4602      	mov	r2, r0
 800f17a:	2000      	movs	r0, #0
 800f17c:	f7f1 f884 	bl	8000288 <__aeabi_dsub>
 800f180:	ec41 0b10 	vmov	d0, r0, r1
 800f184:	b003      	add	sp, #12
 800f186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f18a:	4b22      	ldr	r3, [pc, #136]	; (800f214 <__kernel_cos+0x184>)
 800f18c:	4920      	ldr	r1, [pc, #128]	; (800f210 <__kernel_cos+0x180>)
 800f18e:	4598      	cmp	r8, r3
 800f190:	bfcc      	ite	gt
 800f192:	4d21      	ldrgt	r5, [pc, #132]	; (800f218 <__kernel_cos+0x188>)
 800f194:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f198:	2400      	movs	r4, #0
 800f19a:	4622      	mov	r2, r4
 800f19c:	462b      	mov	r3, r5
 800f19e:	2000      	movs	r0, #0
 800f1a0:	f7f1 f872 	bl	8000288 <__aeabi_dsub>
 800f1a4:	4622      	mov	r2, r4
 800f1a6:	4680      	mov	r8, r0
 800f1a8:	4689      	mov	r9, r1
 800f1aa:	462b      	mov	r3, r5
 800f1ac:	4650      	mov	r0, sl
 800f1ae:	4659      	mov	r1, fp
 800f1b0:	f7f1 f86a 	bl	8000288 <__aeabi_dsub>
 800f1b4:	4632      	mov	r2, r6
 800f1b6:	463b      	mov	r3, r7
 800f1b8:	f7f1 f866 	bl	8000288 <__aeabi_dsub>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	460b      	mov	r3, r1
 800f1c0:	4640      	mov	r0, r8
 800f1c2:	4649      	mov	r1, r9
 800f1c4:	e7da      	b.n	800f17c <__kernel_cos+0xec>
 800f1c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f200 <__kernel_cos+0x170>
 800f1ca:	e7db      	b.n	800f184 <__kernel_cos+0xf4>
 800f1cc:	f3af 8000 	nop.w
 800f1d0:	be8838d4 	.word	0xbe8838d4
 800f1d4:	bda8fae9 	.word	0xbda8fae9
 800f1d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f1dc:	3e21ee9e 	.word	0x3e21ee9e
 800f1e0:	809c52ad 	.word	0x809c52ad
 800f1e4:	3e927e4f 	.word	0x3e927e4f
 800f1e8:	19cb1590 	.word	0x19cb1590
 800f1ec:	3efa01a0 	.word	0x3efa01a0
 800f1f0:	16c15177 	.word	0x16c15177
 800f1f4:	3f56c16c 	.word	0x3f56c16c
 800f1f8:	5555554c 	.word	0x5555554c
 800f1fc:	3fa55555 	.word	0x3fa55555
 800f200:	00000000 	.word	0x00000000
 800f204:	3ff00000 	.word	0x3ff00000
 800f208:	3fe00000 	.word	0x3fe00000
 800f20c:	3fd33332 	.word	0x3fd33332
 800f210:	3ff00000 	.word	0x3ff00000
 800f214:	3fe90000 	.word	0x3fe90000
 800f218:	3fd20000 	.word	0x3fd20000
 800f21c:	00000000 	.word	0x00000000

0800f220 <__kernel_sin>:
 800f220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f224:	ed2d 8b04 	vpush	{d8-d9}
 800f228:	eeb0 8a41 	vmov.f32	s16, s2
 800f22c:	eef0 8a61 	vmov.f32	s17, s3
 800f230:	ec55 4b10 	vmov	r4, r5, d0
 800f234:	b083      	sub	sp, #12
 800f236:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f23a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f23e:	9001      	str	r0, [sp, #4]
 800f240:	da06      	bge.n	800f250 <__kernel_sin+0x30>
 800f242:	ee10 0a10 	vmov	r0, s0
 800f246:	4629      	mov	r1, r5
 800f248:	f7f1 fc86 	bl	8000b58 <__aeabi_d2iz>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	d051      	beq.n	800f2f4 <__kernel_sin+0xd4>
 800f250:	4622      	mov	r2, r4
 800f252:	462b      	mov	r3, r5
 800f254:	4620      	mov	r0, r4
 800f256:	4629      	mov	r1, r5
 800f258:	f7f1 f9ce 	bl	80005f8 <__aeabi_dmul>
 800f25c:	4682      	mov	sl, r0
 800f25e:	468b      	mov	fp, r1
 800f260:	4602      	mov	r2, r0
 800f262:	460b      	mov	r3, r1
 800f264:	4620      	mov	r0, r4
 800f266:	4629      	mov	r1, r5
 800f268:	f7f1 f9c6 	bl	80005f8 <__aeabi_dmul>
 800f26c:	a341      	add	r3, pc, #260	; (adr r3, 800f374 <__kernel_sin+0x154>)
 800f26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f272:	4680      	mov	r8, r0
 800f274:	4689      	mov	r9, r1
 800f276:	4650      	mov	r0, sl
 800f278:	4659      	mov	r1, fp
 800f27a:	f7f1 f9bd 	bl	80005f8 <__aeabi_dmul>
 800f27e:	a33f      	add	r3, pc, #252	; (adr r3, 800f37c <__kernel_sin+0x15c>)
 800f280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f284:	f7f1 f800 	bl	8000288 <__aeabi_dsub>
 800f288:	4652      	mov	r2, sl
 800f28a:	465b      	mov	r3, fp
 800f28c:	f7f1 f9b4 	bl	80005f8 <__aeabi_dmul>
 800f290:	a33c      	add	r3, pc, #240	; (adr r3, 800f384 <__kernel_sin+0x164>)
 800f292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f296:	f7f0 fff9 	bl	800028c <__adddf3>
 800f29a:	4652      	mov	r2, sl
 800f29c:	465b      	mov	r3, fp
 800f29e:	f7f1 f9ab 	bl	80005f8 <__aeabi_dmul>
 800f2a2:	a33a      	add	r3, pc, #232	; (adr r3, 800f38c <__kernel_sin+0x16c>)
 800f2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a8:	f7f0 ffee 	bl	8000288 <__aeabi_dsub>
 800f2ac:	4652      	mov	r2, sl
 800f2ae:	465b      	mov	r3, fp
 800f2b0:	f7f1 f9a2 	bl	80005f8 <__aeabi_dmul>
 800f2b4:	a337      	add	r3, pc, #220	; (adr r3, 800f394 <__kernel_sin+0x174>)
 800f2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ba:	f7f0 ffe7 	bl	800028c <__adddf3>
 800f2be:	9b01      	ldr	r3, [sp, #4]
 800f2c0:	4606      	mov	r6, r0
 800f2c2:	460f      	mov	r7, r1
 800f2c4:	b9eb      	cbnz	r3, 800f302 <__kernel_sin+0xe2>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	4650      	mov	r0, sl
 800f2cc:	4659      	mov	r1, fp
 800f2ce:	f7f1 f993 	bl	80005f8 <__aeabi_dmul>
 800f2d2:	a325      	add	r3, pc, #148	; (adr r3, 800f368 <__kernel_sin+0x148>)
 800f2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d8:	f7f0 ffd6 	bl	8000288 <__aeabi_dsub>
 800f2dc:	4642      	mov	r2, r8
 800f2de:	464b      	mov	r3, r9
 800f2e0:	f7f1 f98a 	bl	80005f8 <__aeabi_dmul>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	4629      	mov	r1, r5
 800f2ec:	f7f0 ffce 	bl	800028c <__adddf3>
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	460d      	mov	r5, r1
 800f2f4:	ec45 4b10 	vmov	d0, r4, r5
 800f2f8:	b003      	add	sp, #12
 800f2fa:	ecbd 8b04 	vpop	{d8-d9}
 800f2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f302:	4b1b      	ldr	r3, [pc, #108]	; (800f370 <__kernel_sin+0x150>)
 800f304:	ec51 0b18 	vmov	r0, r1, d8
 800f308:	2200      	movs	r2, #0
 800f30a:	f7f1 f975 	bl	80005f8 <__aeabi_dmul>
 800f30e:	4632      	mov	r2, r6
 800f310:	ec41 0b19 	vmov	d9, r0, r1
 800f314:	463b      	mov	r3, r7
 800f316:	4640      	mov	r0, r8
 800f318:	4649      	mov	r1, r9
 800f31a:	f7f1 f96d 	bl	80005f8 <__aeabi_dmul>
 800f31e:	4602      	mov	r2, r0
 800f320:	460b      	mov	r3, r1
 800f322:	ec51 0b19 	vmov	r0, r1, d9
 800f326:	f7f0 ffaf 	bl	8000288 <__aeabi_dsub>
 800f32a:	4652      	mov	r2, sl
 800f32c:	465b      	mov	r3, fp
 800f32e:	f7f1 f963 	bl	80005f8 <__aeabi_dmul>
 800f332:	ec53 2b18 	vmov	r2, r3, d8
 800f336:	f7f0 ffa7 	bl	8000288 <__aeabi_dsub>
 800f33a:	a30b      	add	r3, pc, #44	; (adr r3, 800f368 <__kernel_sin+0x148>)
 800f33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f340:	4606      	mov	r6, r0
 800f342:	460f      	mov	r7, r1
 800f344:	4640      	mov	r0, r8
 800f346:	4649      	mov	r1, r9
 800f348:	f7f1 f956 	bl	80005f8 <__aeabi_dmul>
 800f34c:	4602      	mov	r2, r0
 800f34e:	460b      	mov	r3, r1
 800f350:	4630      	mov	r0, r6
 800f352:	4639      	mov	r1, r7
 800f354:	f7f0 ff9a 	bl	800028c <__adddf3>
 800f358:	4602      	mov	r2, r0
 800f35a:	460b      	mov	r3, r1
 800f35c:	4620      	mov	r0, r4
 800f35e:	4629      	mov	r1, r5
 800f360:	f7f0 ff92 	bl	8000288 <__aeabi_dsub>
 800f364:	e7c4      	b.n	800f2f0 <__kernel_sin+0xd0>
 800f366:	bf00      	nop
 800f368:	55555549 	.word	0x55555549
 800f36c:	3fc55555 	.word	0x3fc55555
 800f370:	3fe00000 	.word	0x3fe00000
 800f374:	5acfd57c 	.word	0x5acfd57c
 800f378:	3de5d93a 	.word	0x3de5d93a
 800f37c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f380:	3e5ae5e6 	.word	0x3e5ae5e6
 800f384:	57b1fe7d 	.word	0x57b1fe7d
 800f388:	3ec71de3 	.word	0x3ec71de3
 800f38c:	19c161d5 	.word	0x19c161d5
 800f390:	3f2a01a0 	.word	0x3f2a01a0
 800f394:	1110f8a6 	.word	0x1110f8a6
 800f398:	3f811111 	.word	0x3f811111
 800f39c:	00000000 	.word	0x00000000

0800f3a0 <__kernel_tan>:
 800f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a4:	ed2d 8b06 	vpush	{d8-d10}
 800f3a8:	ec5b ab10 	vmov	sl, fp, d0
 800f3ac:	4be0      	ldr	r3, [pc, #896]	; (800f730 <__kernel_tan+0x390>)
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800f3b4:	429f      	cmp	r7, r3
 800f3b6:	ec59 8b11 	vmov	r8, r9, d1
 800f3ba:	4606      	mov	r6, r0
 800f3bc:	f8cd b000 	str.w	fp, [sp]
 800f3c0:	dc61      	bgt.n	800f486 <__kernel_tan+0xe6>
 800f3c2:	ee10 0a10 	vmov	r0, s0
 800f3c6:	4659      	mov	r1, fp
 800f3c8:	f7f1 fbc6 	bl	8000b58 <__aeabi_d2iz>
 800f3cc:	4605      	mov	r5, r0
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	f040 8083 	bne.w	800f4da <__kernel_tan+0x13a>
 800f3d4:	1c73      	adds	r3, r6, #1
 800f3d6:	4652      	mov	r2, sl
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	433b      	orrs	r3, r7
 800f3dc:	d112      	bne.n	800f404 <__kernel_tan+0x64>
 800f3de:	ec4b ab10 	vmov	d0, sl, fp
 800f3e2:	f001 fb85 	bl	8010af0 <fabs>
 800f3e6:	49d3      	ldr	r1, [pc, #844]	; (800f734 <__kernel_tan+0x394>)
 800f3e8:	ec53 2b10 	vmov	r2, r3, d0
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	f7f1 fa2d 	bl	800084c <__aeabi_ddiv>
 800f3f2:	4682      	mov	sl, r0
 800f3f4:	468b      	mov	fp, r1
 800f3f6:	ec4b ab10 	vmov	d0, sl, fp
 800f3fa:	b003      	add	sp, #12
 800f3fc:	ecbd 8b06 	vpop	{d8-d10}
 800f400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f404:	2e01      	cmp	r6, #1
 800f406:	d0f6      	beq.n	800f3f6 <__kernel_tan+0x56>
 800f408:	4642      	mov	r2, r8
 800f40a:	464b      	mov	r3, r9
 800f40c:	4650      	mov	r0, sl
 800f40e:	4659      	mov	r1, fp
 800f410:	f7f0 ff3c 	bl	800028c <__adddf3>
 800f414:	4602      	mov	r2, r0
 800f416:	460b      	mov	r3, r1
 800f418:	460f      	mov	r7, r1
 800f41a:	2000      	movs	r0, #0
 800f41c:	49c6      	ldr	r1, [pc, #792]	; (800f738 <__kernel_tan+0x398>)
 800f41e:	f7f1 fa15 	bl	800084c <__aeabi_ddiv>
 800f422:	e9cd 0100 	strd	r0, r1, [sp]
 800f426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f42a:	462e      	mov	r6, r5
 800f42c:	4652      	mov	r2, sl
 800f42e:	462c      	mov	r4, r5
 800f430:	4630      	mov	r0, r6
 800f432:	461d      	mov	r5, r3
 800f434:	4639      	mov	r1, r7
 800f436:	465b      	mov	r3, fp
 800f438:	f7f0 ff26 	bl	8000288 <__aeabi_dsub>
 800f43c:	4602      	mov	r2, r0
 800f43e:	460b      	mov	r3, r1
 800f440:	4640      	mov	r0, r8
 800f442:	4649      	mov	r1, r9
 800f444:	f7f0 ff20 	bl	8000288 <__aeabi_dsub>
 800f448:	4632      	mov	r2, r6
 800f44a:	462b      	mov	r3, r5
 800f44c:	f7f1 f8d4 	bl	80005f8 <__aeabi_dmul>
 800f450:	4632      	mov	r2, r6
 800f452:	4680      	mov	r8, r0
 800f454:	4689      	mov	r9, r1
 800f456:	462b      	mov	r3, r5
 800f458:	4630      	mov	r0, r6
 800f45a:	4639      	mov	r1, r7
 800f45c:	f7f1 f8cc 	bl	80005f8 <__aeabi_dmul>
 800f460:	4bb4      	ldr	r3, [pc, #720]	; (800f734 <__kernel_tan+0x394>)
 800f462:	2200      	movs	r2, #0
 800f464:	f7f0 ff12 	bl	800028c <__adddf3>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
 800f46c:	4640      	mov	r0, r8
 800f46e:	4649      	mov	r1, r9
 800f470:	f7f0 ff0c 	bl	800028c <__adddf3>
 800f474:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f478:	f7f1 f8be 	bl	80005f8 <__aeabi_dmul>
 800f47c:	4622      	mov	r2, r4
 800f47e:	462b      	mov	r3, r5
 800f480:	f7f0 ff04 	bl	800028c <__adddf3>
 800f484:	e7b5      	b.n	800f3f2 <__kernel_tan+0x52>
 800f486:	4bad      	ldr	r3, [pc, #692]	; (800f73c <__kernel_tan+0x39c>)
 800f488:	429f      	cmp	r7, r3
 800f48a:	dd26      	ble.n	800f4da <__kernel_tan+0x13a>
 800f48c:	9b00      	ldr	r3, [sp, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	da09      	bge.n	800f4a6 <__kernel_tan+0x106>
 800f492:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f496:	469b      	mov	fp, r3
 800f498:	ee10 aa10 	vmov	sl, s0
 800f49c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f4a0:	ee11 8a10 	vmov	r8, s2
 800f4a4:	4699      	mov	r9, r3
 800f4a6:	4652      	mov	r2, sl
 800f4a8:	465b      	mov	r3, fp
 800f4aa:	a183      	add	r1, pc, #524	; (adr r1, 800f6b8 <__kernel_tan+0x318>)
 800f4ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4b0:	f7f0 feea 	bl	8000288 <__aeabi_dsub>
 800f4b4:	4642      	mov	r2, r8
 800f4b6:	464b      	mov	r3, r9
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	460d      	mov	r5, r1
 800f4bc:	a180      	add	r1, pc, #512	; (adr r1, 800f6c0 <__kernel_tan+0x320>)
 800f4be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4c2:	f7f0 fee1 	bl	8000288 <__aeabi_dsub>
 800f4c6:	4622      	mov	r2, r4
 800f4c8:	462b      	mov	r3, r5
 800f4ca:	f7f0 fedf 	bl	800028c <__adddf3>
 800f4ce:	f04f 0800 	mov.w	r8, #0
 800f4d2:	4682      	mov	sl, r0
 800f4d4:	468b      	mov	fp, r1
 800f4d6:	f04f 0900 	mov.w	r9, #0
 800f4da:	4652      	mov	r2, sl
 800f4dc:	465b      	mov	r3, fp
 800f4de:	4650      	mov	r0, sl
 800f4e0:	4659      	mov	r1, fp
 800f4e2:	f7f1 f889 	bl	80005f8 <__aeabi_dmul>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	ec43 2b18 	vmov	d8, r2, r3
 800f4ee:	f7f1 f883 	bl	80005f8 <__aeabi_dmul>
 800f4f2:	ec53 2b18 	vmov	r2, r3, d8
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	460d      	mov	r5, r1
 800f4fa:	4650      	mov	r0, sl
 800f4fc:	4659      	mov	r1, fp
 800f4fe:	f7f1 f87b 	bl	80005f8 <__aeabi_dmul>
 800f502:	a371      	add	r3, pc, #452	; (adr r3, 800f6c8 <__kernel_tan+0x328>)
 800f504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f508:	ec41 0b19 	vmov	d9, r0, r1
 800f50c:	4620      	mov	r0, r4
 800f50e:	4629      	mov	r1, r5
 800f510:	f7f1 f872 	bl	80005f8 <__aeabi_dmul>
 800f514:	a36e      	add	r3, pc, #440	; (adr r3, 800f6d0 <__kernel_tan+0x330>)
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	f7f0 feb7 	bl	800028c <__adddf3>
 800f51e:	4622      	mov	r2, r4
 800f520:	462b      	mov	r3, r5
 800f522:	f7f1 f869 	bl	80005f8 <__aeabi_dmul>
 800f526:	a36c      	add	r3, pc, #432	; (adr r3, 800f6d8 <__kernel_tan+0x338>)
 800f528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52c:	f7f0 feae 	bl	800028c <__adddf3>
 800f530:	4622      	mov	r2, r4
 800f532:	462b      	mov	r3, r5
 800f534:	f7f1 f860 	bl	80005f8 <__aeabi_dmul>
 800f538:	a369      	add	r3, pc, #420	; (adr r3, 800f6e0 <__kernel_tan+0x340>)
 800f53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53e:	f7f0 fea5 	bl	800028c <__adddf3>
 800f542:	4622      	mov	r2, r4
 800f544:	462b      	mov	r3, r5
 800f546:	f7f1 f857 	bl	80005f8 <__aeabi_dmul>
 800f54a:	a367      	add	r3, pc, #412	; (adr r3, 800f6e8 <__kernel_tan+0x348>)
 800f54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f550:	f7f0 fe9c 	bl	800028c <__adddf3>
 800f554:	4622      	mov	r2, r4
 800f556:	462b      	mov	r3, r5
 800f558:	f7f1 f84e 	bl	80005f8 <__aeabi_dmul>
 800f55c:	a364      	add	r3, pc, #400	; (adr r3, 800f6f0 <__kernel_tan+0x350>)
 800f55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f562:	f7f0 fe93 	bl	800028c <__adddf3>
 800f566:	ec53 2b18 	vmov	r2, r3, d8
 800f56a:	f7f1 f845 	bl	80005f8 <__aeabi_dmul>
 800f56e:	a362      	add	r3, pc, #392	; (adr r3, 800f6f8 <__kernel_tan+0x358>)
 800f570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f574:	ec41 0b1a 	vmov	d10, r0, r1
 800f578:	4620      	mov	r0, r4
 800f57a:	4629      	mov	r1, r5
 800f57c:	f7f1 f83c 	bl	80005f8 <__aeabi_dmul>
 800f580:	a35f      	add	r3, pc, #380	; (adr r3, 800f700 <__kernel_tan+0x360>)
 800f582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f586:	f7f0 fe81 	bl	800028c <__adddf3>
 800f58a:	4622      	mov	r2, r4
 800f58c:	462b      	mov	r3, r5
 800f58e:	f7f1 f833 	bl	80005f8 <__aeabi_dmul>
 800f592:	a35d      	add	r3, pc, #372	; (adr r3, 800f708 <__kernel_tan+0x368>)
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	f7f0 fe78 	bl	800028c <__adddf3>
 800f59c:	4622      	mov	r2, r4
 800f59e:	462b      	mov	r3, r5
 800f5a0:	f7f1 f82a 	bl	80005f8 <__aeabi_dmul>
 800f5a4:	a35a      	add	r3, pc, #360	; (adr r3, 800f710 <__kernel_tan+0x370>)
 800f5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5aa:	f7f0 fe6f 	bl	800028c <__adddf3>
 800f5ae:	4622      	mov	r2, r4
 800f5b0:	462b      	mov	r3, r5
 800f5b2:	f7f1 f821 	bl	80005f8 <__aeabi_dmul>
 800f5b6:	a358      	add	r3, pc, #352	; (adr r3, 800f718 <__kernel_tan+0x378>)
 800f5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5bc:	f7f0 fe66 	bl	800028c <__adddf3>
 800f5c0:	4622      	mov	r2, r4
 800f5c2:	462b      	mov	r3, r5
 800f5c4:	f7f1 f818 	bl	80005f8 <__aeabi_dmul>
 800f5c8:	a355      	add	r3, pc, #340	; (adr r3, 800f720 <__kernel_tan+0x380>)
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	f7f0 fe5d 	bl	800028c <__adddf3>
 800f5d2:	4602      	mov	r2, r0
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	ec51 0b1a 	vmov	r0, r1, d10
 800f5da:	f7f0 fe57 	bl	800028c <__adddf3>
 800f5de:	ec53 2b19 	vmov	r2, r3, d9
 800f5e2:	f7f1 f809 	bl	80005f8 <__aeabi_dmul>
 800f5e6:	4642      	mov	r2, r8
 800f5e8:	464b      	mov	r3, r9
 800f5ea:	f7f0 fe4f 	bl	800028c <__adddf3>
 800f5ee:	ec53 2b18 	vmov	r2, r3, d8
 800f5f2:	f7f1 f801 	bl	80005f8 <__aeabi_dmul>
 800f5f6:	4642      	mov	r2, r8
 800f5f8:	464b      	mov	r3, r9
 800f5fa:	f7f0 fe47 	bl	800028c <__adddf3>
 800f5fe:	a34a      	add	r3, pc, #296	; (adr r3, 800f728 <__kernel_tan+0x388>)
 800f600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f604:	4604      	mov	r4, r0
 800f606:	460d      	mov	r5, r1
 800f608:	ec51 0b19 	vmov	r0, r1, d9
 800f60c:	f7f0 fff4 	bl	80005f8 <__aeabi_dmul>
 800f610:	4622      	mov	r2, r4
 800f612:	462b      	mov	r3, r5
 800f614:	f7f0 fe3a 	bl	800028c <__adddf3>
 800f618:	460b      	mov	r3, r1
 800f61a:	ec41 0b18 	vmov	d8, r0, r1
 800f61e:	4602      	mov	r2, r0
 800f620:	4659      	mov	r1, fp
 800f622:	4650      	mov	r0, sl
 800f624:	f7f0 fe32 	bl	800028c <__adddf3>
 800f628:	4b44      	ldr	r3, [pc, #272]	; (800f73c <__kernel_tan+0x39c>)
 800f62a:	429f      	cmp	r7, r3
 800f62c:	4604      	mov	r4, r0
 800f62e:	460d      	mov	r5, r1
 800f630:	f340 8086 	ble.w	800f740 <__kernel_tan+0x3a0>
 800f634:	4630      	mov	r0, r6
 800f636:	f7f0 ff75 	bl	8000524 <__aeabi_i2d>
 800f63a:	4622      	mov	r2, r4
 800f63c:	4680      	mov	r8, r0
 800f63e:	4689      	mov	r9, r1
 800f640:	462b      	mov	r3, r5
 800f642:	4620      	mov	r0, r4
 800f644:	4629      	mov	r1, r5
 800f646:	f7f0 ffd7 	bl	80005f8 <__aeabi_dmul>
 800f64a:	4642      	mov	r2, r8
 800f64c:	4606      	mov	r6, r0
 800f64e:	460f      	mov	r7, r1
 800f650:	464b      	mov	r3, r9
 800f652:	4620      	mov	r0, r4
 800f654:	4629      	mov	r1, r5
 800f656:	f7f0 fe19 	bl	800028c <__adddf3>
 800f65a:	4602      	mov	r2, r0
 800f65c:	460b      	mov	r3, r1
 800f65e:	4630      	mov	r0, r6
 800f660:	4639      	mov	r1, r7
 800f662:	f7f1 f8f3 	bl	800084c <__aeabi_ddiv>
 800f666:	ec53 2b18 	vmov	r2, r3, d8
 800f66a:	f7f0 fe0d 	bl	8000288 <__aeabi_dsub>
 800f66e:	4602      	mov	r2, r0
 800f670:	460b      	mov	r3, r1
 800f672:	4650      	mov	r0, sl
 800f674:	4659      	mov	r1, fp
 800f676:	f7f0 fe07 	bl	8000288 <__aeabi_dsub>
 800f67a:	4602      	mov	r2, r0
 800f67c:	460b      	mov	r3, r1
 800f67e:	f7f0 fe05 	bl	800028c <__adddf3>
 800f682:	4602      	mov	r2, r0
 800f684:	460b      	mov	r3, r1
 800f686:	4640      	mov	r0, r8
 800f688:	4649      	mov	r1, r9
 800f68a:	f7f0 fdfd 	bl	8000288 <__aeabi_dsub>
 800f68e:	9b00      	ldr	r3, [sp, #0]
 800f690:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800f694:	f00a 0a02 	and.w	sl, sl, #2
 800f698:	4604      	mov	r4, r0
 800f69a:	f1ca 0001 	rsb	r0, sl, #1
 800f69e:	460d      	mov	r5, r1
 800f6a0:	f7f0 ff40 	bl	8000524 <__aeabi_i2d>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	4629      	mov	r1, r5
 800f6ac:	f7f0 ffa4 	bl	80005f8 <__aeabi_dmul>
 800f6b0:	e69f      	b.n	800f3f2 <__kernel_tan+0x52>
 800f6b2:	bf00      	nop
 800f6b4:	f3af 8000 	nop.w
 800f6b8:	54442d18 	.word	0x54442d18
 800f6bc:	3fe921fb 	.word	0x3fe921fb
 800f6c0:	33145c07 	.word	0x33145c07
 800f6c4:	3c81a626 	.word	0x3c81a626
 800f6c8:	74bf7ad4 	.word	0x74bf7ad4
 800f6cc:	3efb2a70 	.word	0x3efb2a70
 800f6d0:	32f0a7e9 	.word	0x32f0a7e9
 800f6d4:	3f12b80f 	.word	0x3f12b80f
 800f6d8:	1a8d1068 	.word	0x1a8d1068
 800f6dc:	3f3026f7 	.word	0x3f3026f7
 800f6e0:	fee08315 	.word	0xfee08315
 800f6e4:	3f57dbc8 	.word	0x3f57dbc8
 800f6e8:	e96e8493 	.word	0xe96e8493
 800f6ec:	3f8226e3 	.word	0x3f8226e3
 800f6f0:	1bb341fe 	.word	0x1bb341fe
 800f6f4:	3faba1ba 	.word	0x3faba1ba
 800f6f8:	db605373 	.word	0xdb605373
 800f6fc:	bef375cb 	.word	0xbef375cb
 800f700:	a03792a6 	.word	0xa03792a6
 800f704:	3f147e88 	.word	0x3f147e88
 800f708:	f2f26501 	.word	0xf2f26501
 800f70c:	3f4344d8 	.word	0x3f4344d8
 800f710:	c9560328 	.word	0xc9560328
 800f714:	3f6d6d22 	.word	0x3f6d6d22
 800f718:	8406d637 	.word	0x8406d637
 800f71c:	3f9664f4 	.word	0x3f9664f4
 800f720:	1110fe7a 	.word	0x1110fe7a
 800f724:	3fc11111 	.word	0x3fc11111
 800f728:	55555563 	.word	0x55555563
 800f72c:	3fd55555 	.word	0x3fd55555
 800f730:	3e2fffff 	.word	0x3e2fffff
 800f734:	3ff00000 	.word	0x3ff00000
 800f738:	bff00000 	.word	0xbff00000
 800f73c:	3fe59427 	.word	0x3fe59427
 800f740:	2e01      	cmp	r6, #1
 800f742:	d02f      	beq.n	800f7a4 <__kernel_tan+0x404>
 800f744:	460f      	mov	r7, r1
 800f746:	4602      	mov	r2, r0
 800f748:	460b      	mov	r3, r1
 800f74a:	4689      	mov	r9, r1
 800f74c:	2000      	movs	r0, #0
 800f74e:	4917      	ldr	r1, [pc, #92]	; (800f7ac <__kernel_tan+0x40c>)
 800f750:	f7f1 f87c 	bl	800084c <__aeabi_ddiv>
 800f754:	2600      	movs	r6, #0
 800f756:	e9cd 0100 	strd	r0, r1, [sp]
 800f75a:	4652      	mov	r2, sl
 800f75c:	465b      	mov	r3, fp
 800f75e:	4630      	mov	r0, r6
 800f760:	4639      	mov	r1, r7
 800f762:	f7f0 fd91 	bl	8000288 <__aeabi_dsub>
 800f766:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f76a:	4602      	mov	r2, r0
 800f76c:	460b      	mov	r3, r1
 800f76e:	ec51 0b18 	vmov	r0, r1, d8
 800f772:	f7f0 fd89 	bl	8000288 <__aeabi_dsub>
 800f776:	4632      	mov	r2, r6
 800f778:	462b      	mov	r3, r5
 800f77a:	f7f0 ff3d 	bl	80005f8 <__aeabi_dmul>
 800f77e:	46b0      	mov	r8, r6
 800f780:	460f      	mov	r7, r1
 800f782:	4642      	mov	r2, r8
 800f784:	462b      	mov	r3, r5
 800f786:	4634      	mov	r4, r6
 800f788:	4649      	mov	r1, r9
 800f78a:	4606      	mov	r6, r0
 800f78c:	4640      	mov	r0, r8
 800f78e:	f7f0 ff33 	bl	80005f8 <__aeabi_dmul>
 800f792:	4b07      	ldr	r3, [pc, #28]	; (800f7b0 <__kernel_tan+0x410>)
 800f794:	2200      	movs	r2, #0
 800f796:	f7f0 fd79 	bl	800028c <__adddf3>
 800f79a:	4602      	mov	r2, r0
 800f79c:	460b      	mov	r3, r1
 800f79e:	4630      	mov	r0, r6
 800f7a0:	4639      	mov	r1, r7
 800f7a2:	e665      	b.n	800f470 <__kernel_tan+0xd0>
 800f7a4:	4682      	mov	sl, r0
 800f7a6:	468b      	mov	fp, r1
 800f7a8:	e625      	b.n	800f3f6 <__kernel_tan+0x56>
 800f7aa:	bf00      	nop
 800f7ac:	bff00000 	.word	0xbff00000
 800f7b0:	3ff00000 	.word	0x3ff00000
 800f7b4:	00000000 	.word	0x00000000

0800f7b8 <__ieee754_atan2>:
 800f7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7bc:	ec57 6b11 	vmov	r6, r7, d1
 800f7c0:	4273      	negs	r3, r6
 800f7c2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800f940 <__ieee754_atan2+0x188>
 800f7c6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f7ca:	4333      	orrs	r3, r6
 800f7cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f7d0:	4543      	cmp	r3, r8
 800f7d2:	ec51 0b10 	vmov	r0, r1, d0
 800f7d6:	ee11 5a10 	vmov	r5, s2
 800f7da:	d80a      	bhi.n	800f7f2 <__ieee754_atan2+0x3a>
 800f7dc:	4244      	negs	r4, r0
 800f7de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f7e2:	4304      	orrs	r4, r0
 800f7e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f7e8:	4544      	cmp	r4, r8
 800f7ea:	ee10 9a10 	vmov	r9, s0
 800f7ee:	468e      	mov	lr, r1
 800f7f0:	d907      	bls.n	800f802 <__ieee754_atan2+0x4a>
 800f7f2:	4632      	mov	r2, r6
 800f7f4:	463b      	mov	r3, r7
 800f7f6:	f7f0 fd49 	bl	800028c <__adddf3>
 800f7fa:	ec41 0b10 	vmov	d0, r0, r1
 800f7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f802:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f806:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f80a:	4334      	orrs	r4, r6
 800f80c:	d103      	bne.n	800f816 <__ieee754_atan2+0x5e>
 800f80e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f812:	f000 bfcd 	b.w	80107b0 <atan>
 800f816:	17bc      	asrs	r4, r7, #30
 800f818:	f004 0402 	and.w	r4, r4, #2
 800f81c:	ea53 0909 	orrs.w	r9, r3, r9
 800f820:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f824:	d107      	bne.n	800f836 <__ieee754_atan2+0x7e>
 800f826:	2c02      	cmp	r4, #2
 800f828:	d05f      	beq.n	800f8ea <__ieee754_atan2+0x132>
 800f82a:	2c03      	cmp	r4, #3
 800f82c:	d1e5      	bne.n	800f7fa <__ieee754_atan2+0x42>
 800f82e:	a140      	add	r1, pc, #256	; (adr r1, 800f930 <__ieee754_atan2+0x178>)
 800f830:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f834:	e7e1      	b.n	800f7fa <__ieee754_atan2+0x42>
 800f836:	4315      	orrs	r5, r2
 800f838:	d106      	bne.n	800f848 <__ieee754_atan2+0x90>
 800f83a:	f1be 0f00 	cmp.w	lr, #0
 800f83e:	da5f      	bge.n	800f900 <__ieee754_atan2+0x148>
 800f840:	a13d      	add	r1, pc, #244	; (adr r1, 800f938 <__ieee754_atan2+0x180>)
 800f842:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f846:	e7d8      	b.n	800f7fa <__ieee754_atan2+0x42>
 800f848:	4542      	cmp	r2, r8
 800f84a:	d10f      	bne.n	800f86c <__ieee754_atan2+0xb4>
 800f84c:	4293      	cmp	r3, r2
 800f84e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f852:	d107      	bne.n	800f864 <__ieee754_atan2+0xac>
 800f854:	2c02      	cmp	r4, #2
 800f856:	d84c      	bhi.n	800f8f2 <__ieee754_atan2+0x13a>
 800f858:	4b33      	ldr	r3, [pc, #204]	; (800f928 <__ieee754_atan2+0x170>)
 800f85a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f85e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f862:	e7ca      	b.n	800f7fa <__ieee754_atan2+0x42>
 800f864:	2c02      	cmp	r4, #2
 800f866:	d848      	bhi.n	800f8fa <__ieee754_atan2+0x142>
 800f868:	4b30      	ldr	r3, [pc, #192]	; (800f92c <__ieee754_atan2+0x174>)
 800f86a:	e7f6      	b.n	800f85a <__ieee754_atan2+0xa2>
 800f86c:	4543      	cmp	r3, r8
 800f86e:	d0e4      	beq.n	800f83a <__ieee754_atan2+0x82>
 800f870:	1a9b      	subs	r3, r3, r2
 800f872:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f876:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f87a:	da1e      	bge.n	800f8ba <__ieee754_atan2+0x102>
 800f87c:	2f00      	cmp	r7, #0
 800f87e:	da01      	bge.n	800f884 <__ieee754_atan2+0xcc>
 800f880:	323c      	adds	r2, #60	; 0x3c
 800f882:	db1e      	blt.n	800f8c2 <__ieee754_atan2+0x10a>
 800f884:	4632      	mov	r2, r6
 800f886:	463b      	mov	r3, r7
 800f888:	f7f0 ffe0 	bl	800084c <__aeabi_ddiv>
 800f88c:	ec41 0b10 	vmov	d0, r0, r1
 800f890:	f001 f92e 	bl	8010af0 <fabs>
 800f894:	f000 ff8c 	bl	80107b0 <atan>
 800f898:	ec51 0b10 	vmov	r0, r1, d0
 800f89c:	2c01      	cmp	r4, #1
 800f89e:	d013      	beq.n	800f8c8 <__ieee754_atan2+0x110>
 800f8a0:	2c02      	cmp	r4, #2
 800f8a2:	d015      	beq.n	800f8d0 <__ieee754_atan2+0x118>
 800f8a4:	2c00      	cmp	r4, #0
 800f8a6:	d0a8      	beq.n	800f7fa <__ieee754_atan2+0x42>
 800f8a8:	a317      	add	r3, pc, #92	; (adr r3, 800f908 <__ieee754_atan2+0x150>)
 800f8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ae:	f7f0 fceb 	bl	8000288 <__aeabi_dsub>
 800f8b2:	a317      	add	r3, pc, #92	; (adr r3, 800f910 <__ieee754_atan2+0x158>)
 800f8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b8:	e014      	b.n	800f8e4 <__ieee754_atan2+0x12c>
 800f8ba:	a117      	add	r1, pc, #92	; (adr r1, 800f918 <__ieee754_atan2+0x160>)
 800f8bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8c0:	e7ec      	b.n	800f89c <__ieee754_atan2+0xe4>
 800f8c2:	2000      	movs	r0, #0
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	e7e9      	b.n	800f89c <__ieee754_atan2+0xe4>
 800f8c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	e794      	b.n	800f7fa <__ieee754_atan2+0x42>
 800f8d0:	a30d      	add	r3, pc, #52	; (adr r3, 800f908 <__ieee754_atan2+0x150>)
 800f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d6:	f7f0 fcd7 	bl	8000288 <__aeabi_dsub>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	460b      	mov	r3, r1
 800f8de:	a10c      	add	r1, pc, #48	; (adr r1, 800f910 <__ieee754_atan2+0x158>)
 800f8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8e4:	f7f0 fcd0 	bl	8000288 <__aeabi_dsub>
 800f8e8:	e787      	b.n	800f7fa <__ieee754_atan2+0x42>
 800f8ea:	a109      	add	r1, pc, #36	; (adr r1, 800f910 <__ieee754_atan2+0x158>)
 800f8ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8f0:	e783      	b.n	800f7fa <__ieee754_atan2+0x42>
 800f8f2:	a10b      	add	r1, pc, #44	; (adr r1, 800f920 <__ieee754_atan2+0x168>)
 800f8f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8f8:	e77f      	b.n	800f7fa <__ieee754_atan2+0x42>
 800f8fa:	2000      	movs	r0, #0
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	e77c      	b.n	800f7fa <__ieee754_atan2+0x42>
 800f900:	a105      	add	r1, pc, #20	; (adr r1, 800f918 <__ieee754_atan2+0x160>)
 800f902:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f906:	e778      	b.n	800f7fa <__ieee754_atan2+0x42>
 800f908:	33145c07 	.word	0x33145c07
 800f90c:	3ca1a626 	.word	0x3ca1a626
 800f910:	54442d18 	.word	0x54442d18
 800f914:	400921fb 	.word	0x400921fb
 800f918:	54442d18 	.word	0x54442d18
 800f91c:	3ff921fb 	.word	0x3ff921fb
 800f920:	54442d18 	.word	0x54442d18
 800f924:	3fe921fb 	.word	0x3fe921fb
 800f928:	08012300 	.word	0x08012300
 800f92c:	08012318 	.word	0x08012318
 800f930:	54442d18 	.word	0x54442d18
 800f934:	c00921fb 	.word	0xc00921fb
 800f938:	54442d18 	.word	0x54442d18
 800f93c:	bff921fb 	.word	0xbff921fb
 800f940:	7ff00000 	.word	0x7ff00000
 800f944:	00000000 	.word	0x00000000

0800f948 <__ieee754_pow>:
 800f948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94c:	ed2d 8b06 	vpush	{d8-d10}
 800f950:	b089      	sub	sp, #36	; 0x24
 800f952:	ed8d 1b00 	vstr	d1, [sp]
 800f956:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f95a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f95e:	ea58 0102 	orrs.w	r1, r8, r2
 800f962:	ec57 6b10 	vmov	r6, r7, d0
 800f966:	d115      	bne.n	800f994 <__ieee754_pow+0x4c>
 800f968:	19b3      	adds	r3, r6, r6
 800f96a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f96e:	4152      	adcs	r2, r2
 800f970:	4299      	cmp	r1, r3
 800f972:	4b89      	ldr	r3, [pc, #548]	; (800fb98 <__ieee754_pow+0x250>)
 800f974:	4193      	sbcs	r3, r2
 800f976:	f080 84d1 	bcs.w	801031c <__ieee754_pow+0x9d4>
 800f97a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f97e:	4630      	mov	r0, r6
 800f980:	4639      	mov	r1, r7
 800f982:	f7f0 fc83 	bl	800028c <__adddf3>
 800f986:	ec41 0b10 	vmov	d0, r0, r1
 800f98a:	b009      	add	sp, #36	; 0x24
 800f98c:	ecbd 8b06 	vpop	{d8-d10}
 800f990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f994:	4b81      	ldr	r3, [pc, #516]	; (800fb9c <__ieee754_pow+0x254>)
 800f996:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f99a:	429c      	cmp	r4, r3
 800f99c:	ee10 aa10 	vmov	sl, s0
 800f9a0:	463d      	mov	r5, r7
 800f9a2:	dc06      	bgt.n	800f9b2 <__ieee754_pow+0x6a>
 800f9a4:	d101      	bne.n	800f9aa <__ieee754_pow+0x62>
 800f9a6:	2e00      	cmp	r6, #0
 800f9a8:	d1e7      	bne.n	800f97a <__ieee754_pow+0x32>
 800f9aa:	4598      	cmp	r8, r3
 800f9ac:	dc01      	bgt.n	800f9b2 <__ieee754_pow+0x6a>
 800f9ae:	d10f      	bne.n	800f9d0 <__ieee754_pow+0x88>
 800f9b0:	b172      	cbz	r2, 800f9d0 <__ieee754_pow+0x88>
 800f9b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f9b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f9ba:	ea55 050a 	orrs.w	r5, r5, sl
 800f9be:	d1dc      	bne.n	800f97a <__ieee754_pow+0x32>
 800f9c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f9c4:	18db      	adds	r3, r3, r3
 800f9c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f9ca:	4152      	adcs	r2, r2
 800f9cc:	429d      	cmp	r5, r3
 800f9ce:	e7d0      	b.n	800f972 <__ieee754_pow+0x2a>
 800f9d0:	2d00      	cmp	r5, #0
 800f9d2:	da3b      	bge.n	800fa4c <__ieee754_pow+0x104>
 800f9d4:	4b72      	ldr	r3, [pc, #456]	; (800fba0 <__ieee754_pow+0x258>)
 800f9d6:	4598      	cmp	r8, r3
 800f9d8:	dc51      	bgt.n	800fa7e <__ieee754_pow+0x136>
 800f9da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f9de:	4598      	cmp	r8, r3
 800f9e0:	f340 84ab 	ble.w	801033a <__ieee754_pow+0x9f2>
 800f9e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f9e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f9ec:	2b14      	cmp	r3, #20
 800f9ee:	dd0f      	ble.n	800fa10 <__ieee754_pow+0xc8>
 800f9f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f9f4:	fa22 f103 	lsr.w	r1, r2, r3
 800f9f8:	fa01 f303 	lsl.w	r3, r1, r3
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	f040 849c 	bne.w	801033a <__ieee754_pow+0x9f2>
 800fa02:	f001 0101 	and.w	r1, r1, #1
 800fa06:	f1c1 0302 	rsb	r3, r1, #2
 800fa0a:	9304      	str	r3, [sp, #16]
 800fa0c:	b182      	cbz	r2, 800fa30 <__ieee754_pow+0xe8>
 800fa0e:	e05f      	b.n	800fad0 <__ieee754_pow+0x188>
 800fa10:	2a00      	cmp	r2, #0
 800fa12:	d15b      	bne.n	800facc <__ieee754_pow+0x184>
 800fa14:	f1c3 0314 	rsb	r3, r3, #20
 800fa18:	fa48 f103 	asr.w	r1, r8, r3
 800fa1c:	fa01 f303 	lsl.w	r3, r1, r3
 800fa20:	4543      	cmp	r3, r8
 800fa22:	f040 8487 	bne.w	8010334 <__ieee754_pow+0x9ec>
 800fa26:	f001 0101 	and.w	r1, r1, #1
 800fa2a:	f1c1 0302 	rsb	r3, r1, #2
 800fa2e:	9304      	str	r3, [sp, #16]
 800fa30:	4b5c      	ldr	r3, [pc, #368]	; (800fba4 <__ieee754_pow+0x25c>)
 800fa32:	4598      	cmp	r8, r3
 800fa34:	d132      	bne.n	800fa9c <__ieee754_pow+0x154>
 800fa36:	f1b9 0f00 	cmp.w	r9, #0
 800fa3a:	f280 8477 	bge.w	801032c <__ieee754_pow+0x9e4>
 800fa3e:	4959      	ldr	r1, [pc, #356]	; (800fba4 <__ieee754_pow+0x25c>)
 800fa40:	4632      	mov	r2, r6
 800fa42:	463b      	mov	r3, r7
 800fa44:	2000      	movs	r0, #0
 800fa46:	f7f0 ff01 	bl	800084c <__aeabi_ddiv>
 800fa4a:	e79c      	b.n	800f986 <__ieee754_pow+0x3e>
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	9304      	str	r3, [sp, #16]
 800fa50:	2a00      	cmp	r2, #0
 800fa52:	d13d      	bne.n	800fad0 <__ieee754_pow+0x188>
 800fa54:	4b51      	ldr	r3, [pc, #324]	; (800fb9c <__ieee754_pow+0x254>)
 800fa56:	4598      	cmp	r8, r3
 800fa58:	d1ea      	bne.n	800fa30 <__ieee754_pow+0xe8>
 800fa5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fa5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fa62:	ea53 030a 	orrs.w	r3, r3, sl
 800fa66:	f000 8459 	beq.w	801031c <__ieee754_pow+0x9d4>
 800fa6a:	4b4f      	ldr	r3, [pc, #316]	; (800fba8 <__ieee754_pow+0x260>)
 800fa6c:	429c      	cmp	r4, r3
 800fa6e:	dd08      	ble.n	800fa82 <__ieee754_pow+0x13a>
 800fa70:	f1b9 0f00 	cmp.w	r9, #0
 800fa74:	f2c0 8456 	blt.w	8010324 <__ieee754_pow+0x9dc>
 800fa78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa7c:	e783      	b.n	800f986 <__ieee754_pow+0x3e>
 800fa7e:	2302      	movs	r3, #2
 800fa80:	e7e5      	b.n	800fa4e <__ieee754_pow+0x106>
 800fa82:	f1b9 0f00 	cmp.w	r9, #0
 800fa86:	f04f 0000 	mov.w	r0, #0
 800fa8a:	f04f 0100 	mov.w	r1, #0
 800fa8e:	f6bf af7a 	bge.w	800f986 <__ieee754_pow+0x3e>
 800fa92:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fa96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fa9a:	e774      	b.n	800f986 <__ieee754_pow+0x3e>
 800fa9c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800faa0:	d106      	bne.n	800fab0 <__ieee754_pow+0x168>
 800faa2:	4632      	mov	r2, r6
 800faa4:	463b      	mov	r3, r7
 800faa6:	4630      	mov	r0, r6
 800faa8:	4639      	mov	r1, r7
 800faaa:	f7f0 fda5 	bl	80005f8 <__aeabi_dmul>
 800faae:	e76a      	b.n	800f986 <__ieee754_pow+0x3e>
 800fab0:	4b3e      	ldr	r3, [pc, #248]	; (800fbac <__ieee754_pow+0x264>)
 800fab2:	4599      	cmp	r9, r3
 800fab4:	d10c      	bne.n	800fad0 <__ieee754_pow+0x188>
 800fab6:	2d00      	cmp	r5, #0
 800fab8:	db0a      	blt.n	800fad0 <__ieee754_pow+0x188>
 800faba:	ec47 6b10 	vmov	d0, r6, r7
 800fabe:	b009      	add	sp, #36	; 0x24
 800fac0:	ecbd 8b06 	vpop	{d8-d10}
 800fac4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac8:	f7ff ba06 	b.w	800eed8 <__ieee754_sqrt>
 800facc:	2300      	movs	r3, #0
 800face:	9304      	str	r3, [sp, #16]
 800fad0:	ec47 6b10 	vmov	d0, r6, r7
 800fad4:	f001 f80c 	bl	8010af0 <fabs>
 800fad8:	ec51 0b10 	vmov	r0, r1, d0
 800fadc:	f1ba 0f00 	cmp.w	sl, #0
 800fae0:	d129      	bne.n	800fb36 <__ieee754_pow+0x1ee>
 800fae2:	b124      	cbz	r4, 800faee <__ieee754_pow+0x1a6>
 800fae4:	4b2f      	ldr	r3, [pc, #188]	; (800fba4 <__ieee754_pow+0x25c>)
 800fae6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800faea:	429a      	cmp	r2, r3
 800faec:	d123      	bne.n	800fb36 <__ieee754_pow+0x1ee>
 800faee:	f1b9 0f00 	cmp.w	r9, #0
 800faf2:	da05      	bge.n	800fb00 <__ieee754_pow+0x1b8>
 800faf4:	4602      	mov	r2, r0
 800faf6:	460b      	mov	r3, r1
 800faf8:	2000      	movs	r0, #0
 800fafa:	492a      	ldr	r1, [pc, #168]	; (800fba4 <__ieee754_pow+0x25c>)
 800fafc:	f7f0 fea6 	bl	800084c <__aeabi_ddiv>
 800fb00:	2d00      	cmp	r5, #0
 800fb02:	f6bf af40 	bge.w	800f986 <__ieee754_pow+0x3e>
 800fb06:	9b04      	ldr	r3, [sp, #16]
 800fb08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fb0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fb10:	431c      	orrs	r4, r3
 800fb12:	d108      	bne.n	800fb26 <__ieee754_pow+0x1de>
 800fb14:	4602      	mov	r2, r0
 800fb16:	460b      	mov	r3, r1
 800fb18:	4610      	mov	r0, r2
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	f7f0 fbb4 	bl	8000288 <__aeabi_dsub>
 800fb20:	4602      	mov	r2, r0
 800fb22:	460b      	mov	r3, r1
 800fb24:	e78f      	b.n	800fa46 <__ieee754_pow+0xfe>
 800fb26:	9b04      	ldr	r3, [sp, #16]
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	f47f af2c 	bne.w	800f986 <__ieee754_pow+0x3e>
 800fb2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb32:	4619      	mov	r1, r3
 800fb34:	e727      	b.n	800f986 <__ieee754_pow+0x3e>
 800fb36:	0feb      	lsrs	r3, r5, #31
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	9306      	str	r3, [sp, #24]
 800fb3c:	9a06      	ldr	r2, [sp, #24]
 800fb3e:	9b04      	ldr	r3, [sp, #16]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	d102      	bne.n	800fb4a <__ieee754_pow+0x202>
 800fb44:	4632      	mov	r2, r6
 800fb46:	463b      	mov	r3, r7
 800fb48:	e7e6      	b.n	800fb18 <__ieee754_pow+0x1d0>
 800fb4a:	4b19      	ldr	r3, [pc, #100]	; (800fbb0 <__ieee754_pow+0x268>)
 800fb4c:	4598      	cmp	r8, r3
 800fb4e:	f340 80fb 	ble.w	800fd48 <__ieee754_pow+0x400>
 800fb52:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fb56:	4598      	cmp	r8, r3
 800fb58:	4b13      	ldr	r3, [pc, #76]	; (800fba8 <__ieee754_pow+0x260>)
 800fb5a:	dd0c      	ble.n	800fb76 <__ieee754_pow+0x22e>
 800fb5c:	429c      	cmp	r4, r3
 800fb5e:	dc0f      	bgt.n	800fb80 <__ieee754_pow+0x238>
 800fb60:	f1b9 0f00 	cmp.w	r9, #0
 800fb64:	da0f      	bge.n	800fb86 <__ieee754_pow+0x23e>
 800fb66:	2000      	movs	r0, #0
 800fb68:	b009      	add	sp, #36	; 0x24
 800fb6a:	ecbd 8b06 	vpop	{d8-d10}
 800fb6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb72:	f001 b86e 	b.w	8010c52 <__math_oflow>
 800fb76:	429c      	cmp	r4, r3
 800fb78:	dbf2      	blt.n	800fb60 <__ieee754_pow+0x218>
 800fb7a:	4b0a      	ldr	r3, [pc, #40]	; (800fba4 <__ieee754_pow+0x25c>)
 800fb7c:	429c      	cmp	r4, r3
 800fb7e:	dd19      	ble.n	800fbb4 <__ieee754_pow+0x26c>
 800fb80:	f1b9 0f00 	cmp.w	r9, #0
 800fb84:	dcef      	bgt.n	800fb66 <__ieee754_pow+0x21e>
 800fb86:	2000      	movs	r0, #0
 800fb88:	b009      	add	sp, #36	; 0x24
 800fb8a:	ecbd 8b06 	vpop	{d8-d10}
 800fb8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb92:	f001 b855 	b.w	8010c40 <__math_uflow>
 800fb96:	bf00      	nop
 800fb98:	fff00000 	.word	0xfff00000
 800fb9c:	7ff00000 	.word	0x7ff00000
 800fba0:	433fffff 	.word	0x433fffff
 800fba4:	3ff00000 	.word	0x3ff00000
 800fba8:	3fefffff 	.word	0x3fefffff
 800fbac:	3fe00000 	.word	0x3fe00000
 800fbb0:	41e00000 	.word	0x41e00000
 800fbb4:	4b60      	ldr	r3, [pc, #384]	; (800fd38 <__ieee754_pow+0x3f0>)
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	f7f0 fb66 	bl	8000288 <__aeabi_dsub>
 800fbbc:	a354      	add	r3, pc, #336	; (adr r3, 800fd10 <__ieee754_pow+0x3c8>)
 800fbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	460d      	mov	r5, r1
 800fbc6:	f7f0 fd17 	bl	80005f8 <__aeabi_dmul>
 800fbca:	a353      	add	r3, pc, #332	; (adr r3, 800fd18 <__ieee754_pow+0x3d0>)
 800fbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd0:	4606      	mov	r6, r0
 800fbd2:	460f      	mov	r7, r1
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	4629      	mov	r1, r5
 800fbd8:	f7f0 fd0e 	bl	80005f8 <__aeabi_dmul>
 800fbdc:	4b57      	ldr	r3, [pc, #348]	; (800fd3c <__ieee754_pow+0x3f4>)
 800fbde:	4682      	mov	sl, r0
 800fbe0:	468b      	mov	fp, r1
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	4629      	mov	r1, r5
 800fbe8:	f7f0 fd06 	bl	80005f8 <__aeabi_dmul>
 800fbec:	4602      	mov	r2, r0
 800fbee:	460b      	mov	r3, r1
 800fbf0:	a14b      	add	r1, pc, #300	; (adr r1, 800fd20 <__ieee754_pow+0x3d8>)
 800fbf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbf6:	f7f0 fb47 	bl	8000288 <__aeabi_dsub>
 800fbfa:	4622      	mov	r2, r4
 800fbfc:	462b      	mov	r3, r5
 800fbfe:	f7f0 fcfb 	bl	80005f8 <__aeabi_dmul>
 800fc02:	4602      	mov	r2, r0
 800fc04:	460b      	mov	r3, r1
 800fc06:	2000      	movs	r0, #0
 800fc08:	494d      	ldr	r1, [pc, #308]	; (800fd40 <__ieee754_pow+0x3f8>)
 800fc0a:	f7f0 fb3d 	bl	8000288 <__aeabi_dsub>
 800fc0e:	4622      	mov	r2, r4
 800fc10:	4680      	mov	r8, r0
 800fc12:	4689      	mov	r9, r1
 800fc14:	462b      	mov	r3, r5
 800fc16:	4620      	mov	r0, r4
 800fc18:	4629      	mov	r1, r5
 800fc1a:	f7f0 fced 	bl	80005f8 <__aeabi_dmul>
 800fc1e:	4602      	mov	r2, r0
 800fc20:	460b      	mov	r3, r1
 800fc22:	4640      	mov	r0, r8
 800fc24:	4649      	mov	r1, r9
 800fc26:	f7f0 fce7 	bl	80005f8 <__aeabi_dmul>
 800fc2a:	a33f      	add	r3, pc, #252	; (adr r3, 800fd28 <__ieee754_pow+0x3e0>)
 800fc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc30:	f7f0 fce2 	bl	80005f8 <__aeabi_dmul>
 800fc34:	4602      	mov	r2, r0
 800fc36:	460b      	mov	r3, r1
 800fc38:	4650      	mov	r0, sl
 800fc3a:	4659      	mov	r1, fp
 800fc3c:	f7f0 fb24 	bl	8000288 <__aeabi_dsub>
 800fc40:	4602      	mov	r2, r0
 800fc42:	460b      	mov	r3, r1
 800fc44:	4680      	mov	r8, r0
 800fc46:	4689      	mov	r9, r1
 800fc48:	4630      	mov	r0, r6
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	f7f0 fb1e 	bl	800028c <__adddf3>
 800fc50:	2000      	movs	r0, #0
 800fc52:	4632      	mov	r2, r6
 800fc54:	463b      	mov	r3, r7
 800fc56:	4604      	mov	r4, r0
 800fc58:	460d      	mov	r5, r1
 800fc5a:	f7f0 fb15 	bl	8000288 <__aeabi_dsub>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	460b      	mov	r3, r1
 800fc62:	4640      	mov	r0, r8
 800fc64:	4649      	mov	r1, r9
 800fc66:	f7f0 fb0f 	bl	8000288 <__aeabi_dsub>
 800fc6a:	9b04      	ldr	r3, [sp, #16]
 800fc6c:	9a06      	ldr	r2, [sp, #24]
 800fc6e:	3b01      	subs	r3, #1
 800fc70:	4313      	orrs	r3, r2
 800fc72:	4682      	mov	sl, r0
 800fc74:	468b      	mov	fp, r1
 800fc76:	f040 81e7 	bne.w	8010048 <__ieee754_pow+0x700>
 800fc7a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fd30 <__ieee754_pow+0x3e8>
 800fc7e:	eeb0 8a47 	vmov.f32	s16, s14
 800fc82:	eef0 8a67 	vmov.f32	s17, s15
 800fc86:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fc8a:	2600      	movs	r6, #0
 800fc8c:	4632      	mov	r2, r6
 800fc8e:	463b      	mov	r3, r7
 800fc90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc94:	f7f0 faf8 	bl	8000288 <__aeabi_dsub>
 800fc98:	4622      	mov	r2, r4
 800fc9a:	462b      	mov	r3, r5
 800fc9c:	f7f0 fcac 	bl	80005f8 <__aeabi_dmul>
 800fca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fca4:	4680      	mov	r8, r0
 800fca6:	4689      	mov	r9, r1
 800fca8:	4650      	mov	r0, sl
 800fcaa:	4659      	mov	r1, fp
 800fcac:	f7f0 fca4 	bl	80005f8 <__aeabi_dmul>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	4640      	mov	r0, r8
 800fcb6:	4649      	mov	r1, r9
 800fcb8:	f7f0 fae8 	bl	800028c <__adddf3>
 800fcbc:	4632      	mov	r2, r6
 800fcbe:	463b      	mov	r3, r7
 800fcc0:	4680      	mov	r8, r0
 800fcc2:	4689      	mov	r9, r1
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	4629      	mov	r1, r5
 800fcc8:	f7f0 fc96 	bl	80005f8 <__aeabi_dmul>
 800fccc:	460b      	mov	r3, r1
 800fcce:	4604      	mov	r4, r0
 800fcd0:	460d      	mov	r5, r1
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	4649      	mov	r1, r9
 800fcd6:	4640      	mov	r0, r8
 800fcd8:	f7f0 fad8 	bl	800028c <__adddf3>
 800fcdc:	4b19      	ldr	r3, [pc, #100]	; (800fd44 <__ieee754_pow+0x3fc>)
 800fcde:	4299      	cmp	r1, r3
 800fce0:	ec45 4b19 	vmov	d9, r4, r5
 800fce4:	4606      	mov	r6, r0
 800fce6:	460f      	mov	r7, r1
 800fce8:	468b      	mov	fp, r1
 800fcea:	f340 82f0 	ble.w	80102ce <__ieee754_pow+0x986>
 800fcee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fcf2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fcf6:	4303      	orrs	r3, r0
 800fcf8:	f000 81e4 	beq.w	80100c4 <__ieee754_pow+0x77c>
 800fcfc:	ec51 0b18 	vmov	r0, r1, d8
 800fd00:	2200      	movs	r2, #0
 800fd02:	2300      	movs	r3, #0
 800fd04:	f7f0 feea 	bl	8000adc <__aeabi_dcmplt>
 800fd08:	3800      	subs	r0, #0
 800fd0a:	bf18      	it	ne
 800fd0c:	2001      	movne	r0, #1
 800fd0e:	e72b      	b.n	800fb68 <__ieee754_pow+0x220>
 800fd10:	60000000 	.word	0x60000000
 800fd14:	3ff71547 	.word	0x3ff71547
 800fd18:	f85ddf44 	.word	0xf85ddf44
 800fd1c:	3e54ae0b 	.word	0x3e54ae0b
 800fd20:	55555555 	.word	0x55555555
 800fd24:	3fd55555 	.word	0x3fd55555
 800fd28:	652b82fe 	.word	0x652b82fe
 800fd2c:	3ff71547 	.word	0x3ff71547
 800fd30:	00000000 	.word	0x00000000
 800fd34:	bff00000 	.word	0xbff00000
 800fd38:	3ff00000 	.word	0x3ff00000
 800fd3c:	3fd00000 	.word	0x3fd00000
 800fd40:	3fe00000 	.word	0x3fe00000
 800fd44:	408fffff 	.word	0x408fffff
 800fd48:	4bd5      	ldr	r3, [pc, #852]	; (80100a0 <__ieee754_pow+0x758>)
 800fd4a:	402b      	ands	r3, r5
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	b92b      	cbnz	r3, 800fd5c <__ieee754_pow+0x414>
 800fd50:	4bd4      	ldr	r3, [pc, #848]	; (80100a4 <__ieee754_pow+0x75c>)
 800fd52:	f7f0 fc51 	bl	80005f8 <__aeabi_dmul>
 800fd56:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fd5a:	460c      	mov	r4, r1
 800fd5c:	1523      	asrs	r3, r4, #20
 800fd5e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fd62:	4413      	add	r3, r2
 800fd64:	9305      	str	r3, [sp, #20]
 800fd66:	4bd0      	ldr	r3, [pc, #832]	; (80100a8 <__ieee754_pow+0x760>)
 800fd68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fd6c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fd70:	429c      	cmp	r4, r3
 800fd72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fd76:	dd08      	ble.n	800fd8a <__ieee754_pow+0x442>
 800fd78:	4bcc      	ldr	r3, [pc, #816]	; (80100ac <__ieee754_pow+0x764>)
 800fd7a:	429c      	cmp	r4, r3
 800fd7c:	f340 8162 	ble.w	8010044 <__ieee754_pow+0x6fc>
 800fd80:	9b05      	ldr	r3, [sp, #20]
 800fd82:	3301      	adds	r3, #1
 800fd84:	9305      	str	r3, [sp, #20]
 800fd86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fd8a:	2400      	movs	r4, #0
 800fd8c:	00e3      	lsls	r3, r4, #3
 800fd8e:	9307      	str	r3, [sp, #28]
 800fd90:	4bc7      	ldr	r3, [pc, #796]	; (80100b0 <__ieee754_pow+0x768>)
 800fd92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd96:	ed93 7b00 	vldr	d7, [r3]
 800fd9a:	4629      	mov	r1, r5
 800fd9c:	ec53 2b17 	vmov	r2, r3, d7
 800fda0:	eeb0 9a47 	vmov.f32	s18, s14
 800fda4:	eef0 9a67 	vmov.f32	s19, s15
 800fda8:	4682      	mov	sl, r0
 800fdaa:	f7f0 fa6d 	bl	8000288 <__aeabi_dsub>
 800fdae:	4652      	mov	r2, sl
 800fdb0:	4606      	mov	r6, r0
 800fdb2:	460f      	mov	r7, r1
 800fdb4:	462b      	mov	r3, r5
 800fdb6:	ec51 0b19 	vmov	r0, r1, d9
 800fdba:	f7f0 fa67 	bl	800028c <__adddf3>
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	460b      	mov	r3, r1
 800fdc2:	2000      	movs	r0, #0
 800fdc4:	49bb      	ldr	r1, [pc, #748]	; (80100b4 <__ieee754_pow+0x76c>)
 800fdc6:	f7f0 fd41 	bl	800084c <__aeabi_ddiv>
 800fdca:	ec41 0b1a 	vmov	d10, r0, r1
 800fdce:	4602      	mov	r2, r0
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	f7f0 fc0f 	bl	80005f8 <__aeabi_dmul>
 800fdda:	2300      	movs	r3, #0
 800fddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fde0:	9302      	str	r3, [sp, #8]
 800fde2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fde6:	46ab      	mov	fp, r5
 800fde8:	106d      	asrs	r5, r5, #1
 800fdea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fdee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fdf2:	ec41 0b18 	vmov	d8, r0, r1
 800fdf6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	4640      	mov	r0, r8
 800fdfe:	4649      	mov	r1, r9
 800fe00:	4614      	mov	r4, r2
 800fe02:	461d      	mov	r5, r3
 800fe04:	f7f0 fbf8 	bl	80005f8 <__aeabi_dmul>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	460b      	mov	r3, r1
 800fe0c:	4630      	mov	r0, r6
 800fe0e:	4639      	mov	r1, r7
 800fe10:	f7f0 fa3a 	bl	8000288 <__aeabi_dsub>
 800fe14:	ec53 2b19 	vmov	r2, r3, d9
 800fe18:	4606      	mov	r6, r0
 800fe1a:	460f      	mov	r7, r1
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	4629      	mov	r1, r5
 800fe20:	f7f0 fa32 	bl	8000288 <__aeabi_dsub>
 800fe24:	4602      	mov	r2, r0
 800fe26:	460b      	mov	r3, r1
 800fe28:	4650      	mov	r0, sl
 800fe2a:	4659      	mov	r1, fp
 800fe2c:	f7f0 fa2c 	bl	8000288 <__aeabi_dsub>
 800fe30:	4642      	mov	r2, r8
 800fe32:	464b      	mov	r3, r9
 800fe34:	f7f0 fbe0 	bl	80005f8 <__aeabi_dmul>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	460b      	mov	r3, r1
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	4639      	mov	r1, r7
 800fe40:	f7f0 fa22 	bl	8000288 <__aeabi_dsub>
 800fe44:	ec53 2b1a 	vmov	r2, r3, d10
 800fe48:	f7f0 fbd6 	bl	80005f8 <__aeabi_dmul>
 800fe4c:	ec53 2b18 	vmov	r2, r3, d8
 800fe50:	ec41 0b19 	vmov	d9, r0, r1
 800fe54:	ec51 0b18 	vmov	r0, r1, d8
 800fe58:	f7f0 fbce 	bl	80005f8 <__aeabi_dmul>
 800fe5c:	a37c      	add	r3, pc, #496	; (adr r3, 8010050 <__ieee754_pow+0x708>)
 800fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe62:	4604      	mov	r4, r0
 800fe64:	460d      	mov	r5, r1
 800fe66:	f7f0 fbc7 	bl	80005f8 <__aeabi_dmul>
 800fe6a:	a37b      	add	r3, pc, #492	; (adr r3, 8010058 <__ieee754_pow+0x710>)
 800fe6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe70:	f7f0 fa0c 	bl	800028c <__adddf3>
 800fe74:	4622      	mov	r2, r4
 800fe76:	462b      	mov	r3, r5
 800fe78:	f7f0 fbbe 	bl	80005f8 <__aeabi_dmul>
 800fe7c:	a378      	add	r3, pc, #480	; (adr r3, 8010060 <__ieee754_pow+0x718>)
 800fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe82:	f7f0 fa03 	bl	800028c <__adddf3>
 800fe86:	4622      	mov	r2, r4
 800fe88:	462b      	mov	r3, r5
 800fe8a:	f7f0 fbb5 	bl	80005f8 <__aeabi_dmul>
 800fe8e:	a376      	add	r3, pc, #472	; (adr r3, 8010068 <__ieee754_pow+0x720>)
 800fe90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe94:	f7f0 f9fa 	bl	800028c <__adddf3>
 800fe98:	4622      	mov	r2, r4
 800fe9a:	462b      	mov	r3, r5
 800fe9c:	f7f0 fbac 	bl	80005f8 <__aeabi_dmul>
 800fea0:	a373      	add	r3, pc, #460	; (adr r3, 8010070 <__ieee754_pow+0x728>)
 800fea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea6:	f7f0 f9f1 	bl	800028c <__adddf3>
 800feaa:	4622      	mov	r2, r4
 800feac:	462b      	mov	r3, r5
 800feae:	f7f0 fba3 	bl	80005f8 <__aeabi_dmul>
 800feb2:	a371      	add	r3, pc, #452	; (adr r3, 8010078 <__ieee754_pow+0x730>)
 800feb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb8:	f7f0 f9e8 	bl	800028c <__adddf3>
 800febc:	4622      	mov	r2, r4
 800febe:	4606      	mov	r6, r0
 800fec0:	460f      	mov	r7, r1
 800fec2:	462b      	mov	r3, r5
 800fec4:	4620      	mov	r0, r4
 800fec6:	4629      	mov	r1, r5
 800fec8:	f7f0 fb96 	bl	80005f8 <__aeabi_dmul>
 800fecc:	4602      	mov	r2, r0
 800fece:	460b      	mov	r3, r1
 800fed0:	4630      	mov	r0, r6
 800fed2:	4639      	mov	r1, r7
 800fed4:	f7f0 fb90 	bl	80005f8 <__aeabi_dmul>
 800fed8:	4642      	mov	r2, r8
 800feda:	4604      	mov	r4, r0
 800fedc:	460d      	mov	r5, r1
 800fede:	464b      	mov	r3, r9
 800fee0:	ec51 0b18 	vmov	r0, r1, d8
 800fee4:	f7f0 f9d2 	bl	800028c <__adddf3>
 800fee8:	ec53 2b19 	vmov	r2, r3, d9
 800feec:	f7f0 fb84 	bl	80005f8 <__aeabi_dmul>
 800fef0:	4622      	mov	r2, r4
 800fef2:	462b      	mov	r3, r5
 800fef4:	f7f0 f9ca 	bl	800028c <__adddf3>
 800fef8:	4642      	mov	r2, r8
 800fefa:	4682      	mov	sl, r0
 800fefc:	468b      	mov	fp, r1
 800fefe:	464b      	mov	r3, r9
 800ff00:	4640      	mov	r0, r8
 800ff02:	4649      	mov	r1, r9
 800ff04:	f7f0 fb78 	bl	80005f8 <__aeabi_dmul>
 800ff08:	4b6b      	ldr	r3, [pc, #428]	; (80100b8 <__ieee754_pow+0x770>)
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	4606      	mov	r6, r0
 800ff0e:	460f      	mov	r7, r1
 800ff10:	f7f0 f9bc 	bl	800028c <__adddf3>
 800ff14:	4652      	mov	r2, sl
 800ff16:	465b      	mov	r3, fp
 800ff18:	f7f0 f9b8 	bl	800028c <__adddf3>
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	4604      	mov	r4, r0
 800ff20:	460d      	mov	r5, r1
 800ff22:	4602      	mov	r2, r0
 800ff24:	460b      	mov	r3, r1
 800ff26:	4640      	mov	r0, r8
 800ff28:	4649      	mov	r1, r9
 800ff2a:	f7f0 fb65 	bl	80005f8 <__aeabi_dmul>
 800ff2e:	4b62      	ldr	r3, [pc, #392]	; (80100b8 <__ieee754_pow+0x770>)
 800ff30:	4680      	mov	r8, r0
 800ff32:	4689      	mov	r9, r1
 800ff34:	2200      	movs	r2, #0
 800ff36:	4620      	mov	r0, r4
 800ff38:	4629      	mov	r1, r5
 800ff3a:	f7f0 f9a5 	bl	8000288 <__aeabi_dsub>
 800ff3e:	4632      	mov	r2, r6
 800ff40:	463b      	mov	r3, r7
 800ff42:	f7f0 f9a1 	bl	8000288 <__aeabi_dsub>
 800ff46:	4602      	mov	r2, r0
 800ff48:	460b      	mov	r3, r1
 800ff4a:	4650      	mov	r0, sl
 800ff4c:	4659      	mov	r1, fp
 800ff4e:	f7f0 f99b 	bl	8000288 <__aeabi_dsub>
 800ff52:	ec53 2b18 	vmov	r2, r3, d8
 800ff56:	f7f0 fb4f 	bl	80005f8 <__aeabi_dmul>
 800ff5a:	4622      	mov	r2, r4
 800ff5c:	4606      	mov	r6, r0
 800ff5e:	460f      	mov	r7, r1
 800ff60:	462b      	mov	r3, r5
 800ff62:	ec51 0b19 	vmov	r0, r1, d9
 800ff66:	f7f0 fb47 	bl	80005f8 <__aeabi_dmul>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	4630      	mov	r0, r6
 800ff70:	4639      	mov	r1, r7
 800ff72:	f7f0 f98b 	bl	800028c <__adddf3>
 800ff76:	4606      	mov	r6, r0
 800ff78:	460f      	mov	r7, r1
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	4640      	mov	r0, r8
 800ff80:	4649      	mov	r1, r9
 800ff82:	f7f0 f983 	bl	800028c <__adddf3>
 800ff86:	a33e      	add	r3, pc, #248	; (adr r3, 8010080 <__ieee754_pow+0x738>)
 800ff88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	4604      	mov	r4, r0
 800ff90:	460d      	mov	r5, r1
 800ff92:	f7f0 fb31 	bl	80005f8 <__aeabi_dmul>
 800ff96:	4642      	mov	r2, r8
 800ff98:	ec41 0b18 	vmov	d8, r0, r1
 800ff9c:	464b      	mov	r3, r9
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	4629      	mov	r1, r5
 800ffa2:	f7f0 f971 	bl	8000288 <__aeabi_dsub>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	460b      	mov	r3, r1
 800ffaa:	4630      	mov	r0, r6
 800ffac:	4639      	mov	r1, r7
 800ffae:	f7f0 f96b 	bl	8000288 <__aeabi_dsub>
 800ffb2:	a335      	add	r3, pc, #212	; (adr r3, 8010088 <__ieee754_pow+0x740>)
 800ffb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb8:	f7f0 fb1e 	bl	80005f8 <__aeabi_dmul>
 800ffbc:	a334      	add	r3, pc, #208	; (adr r3, 8010090 <__ieee754_pow+0x748>)
 800ffbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc2:	4606      	mov	r6, r0
 800ffc4:	460f      	mov	r7, r1
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	4629      	mov	r1, r5
 800ffca:	f7f0 fb15 	bl	80005f8 <__aeabi_dmul>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	4630      	mov	r0, r6
 800ffd4:	4639      	mov	r1, r7
 800ffd6:	f7f0 f959 	bl	800028c <__adddf3>
 800ffda:	9a07      	ldr	r2, [sp, #28]
 800ffdc:	4b37      	ldr	r3, [pc, #220]	; (80100bc <__ieee754_pow+0x774>)
 800ffde:	4413      	add	r3, r2
 800ffe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe4:	f7f0 f952 	bl	800028c <__adddf3>
 800ffe8:	4682      	mov	sl, r0
 800ffea:	9805      	ldr	r0, [sp, #20]
 800ffec:	468b      	mov	fp, r1
 800ffee:	f7f0 fa99 	bl	8000524 <__aeabi_i2d>
 800fff2:	9a07      	ldr	r2, [sp, #28]
 800fff4:	4b32      	ldr	r3, [pc, #200]	; (80100c0 <__ieee754_pow+0x778>)
 800fff6:	4413      	add	r3, r2
 800fff8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fffc:	4606      	mov	r6, r0
 800fffe:	460f      	mov	r7, r1
 8010000:	4652      	mov	r2, sl
 8010002:	465b      	mov	r3, fp
 8010004:	ec51 0b18 	vmov	r0, r1, d8
 8010008:	f7f0 f940 	bl	800028c <__adddf3>
 801000c:	4642      	mov	r2, r8
 801000e:	464b      	mov	r3, r9
 8010010:	f7f0 f93c 	bl	800028c <__adddf3>
 8010014:	4632      	mov	r2, r6
 8010016:	463b      	mov	r3, r7
 8010018:	f7f0 f938 	bl	800028c <__adddf3>
 801001c:	2000      	movs	r0, #0
 801001e:	4632      	mov	r2, r6
 8010020:	463b      	mov	r3, r7
 8010022:	4604      	mov	r4, r0
 8010024:	460d      	mov	r5, r1
 8010026:	f7f0 f92f 	bl	8000288 <__aeabi_dsub>
 801002a:	4642      	mov	r2, r8
 801002c:	464b      	mov	r3, r9
 801002e:	f7f0 f92b 	bl	8000288 <__aeabi_dsub>
 8010032:	ec53 2b18 	vmov	r2, r3, d8
 8010036:	f7f0 f927 	bl	8000288 <__aeabi_dsub>
 801003a:	4602      	mov	r2, r0
 801003c:	460b      	mov	r3, r1
 801003e:	4650      	mov	r0, sl
 8010040:	4659      	mov	r1, fp
 8010042:	e610      	b.n	800fc66 <__ieee754_pow+0x31e>
 8010044:	2401      	movs	r4, #1
 8010046:	e6a1      	b.n	800fd8c <__ieee754_pow+0x444>
 8010048:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010098 <__ieee754_pow+0x750>
 801004c:	e617      	b.n	800fc7e <__ieee754_pow+0x336>
 801004e:	bf00      	nop
 8010050:	4a454eef 	.word	0x4a454eef
 8010054:	3fca7e28 	.word	0x3fca7e28
 8010058:	93c9db65 	.word	0x93c9db65
 801005c:	3fcd864a 	.word	0x3fcd864a
 8010060:	a91d4101 	.word	0xa91d4101
 8010064:	3fd17460 	.word	0x3fd17460
 8010068:	518f264d 	.word	0x518f264d
 801006c:	3fd55555 	.word	0x3fd55555
 8010070:	db6fabff 	.word	0xdb6fabff
 8010074:	3fdb6db6 	.word	0x3fdb6db6
 8010078:	33333303 	.word	0x33333303
 801007c:	3fe33333 	.word	0x3fe33333
 8010080:	e0000000 	.word	0xe0000000
 8010084:	3feec709 	.word	0x3feec709
 8010088:	dc3a03fd 	.word	0xdc3a03fd
 801008c:	3feec709 	.word	0x3feec709
 8010090:	145b01f5 	.word	0x145b01f5
 8010094:	be3e2fe0 	.word	0xbe3e2fe0
 8010098:	00000000 	.word	0x00000000
 801009c:	3ff00000 	.word	0x3ff00000
 80100a0:	7ff00000 	.word	0x7ff00000
 80100a4:	43400000 	.word	0x43400000
 80100a8:	0003988e 	.word	0x0003988e
 80100ac:	000bb679 	.word	0x000bb679
 80100b0:	08012330 	.word	0x08012330
 80100b4:	3ff00000 	.word	0x3ff00000
 80100b8:	40080000 	.word	0x40080000
 80100bc:	08012350 	.word	0x08012350
 80100c0:	08012340 	.word	0x08012340
 80100c4:	a3b3      	add	r3, pc, #716	; (adr r3, 8010394 <__ieee754_pow+0xa4c>)
 80100c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ca:	4640      	mov	r0, r8
 80100cc:	4649      	mov	r1, r9
 80100ce:	f7f0 f8dd 	bl	800028c <__adddf3>
 80100d2:	4622      	mov	r2, r4
 80100d4:	ec41 0b1a 	vmov	d10, r0, r1
 80100d8:	462b      	mov	r3, r5
 80100da:	4630      	mov	r0, r6
 80100dc:	4639      	mov	r1, r7
 80100de:	f7f0 f8d3 	bl	8000288 <__aeabi_dsub>
 80100e2:	4602      	mov	r2, r0
 80100e4:	460b      	mov	r3, r1
 80100e6:	ec51 0b1a 	vmov	r0, r1, d10
 80100ea:	f7f0 fd15 	bl	8000b18 <__aeabi_dcmpgt>
 80100ee:	2800      	cmp	r0, #0
 80100f0:	f47f ae04 	bne.w	800fcfc <__ieee754_pow+0x3b4>
 80100f4:	4aa2      	ldr	r2, [pc, #648]	; (8010380 <__ieee754_pow+0xa38>)
 80100f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100fa:	4293      	cmp	r3, r2
 80100fc:	f340 8107 	ble.w	801030e <__ieee754_pow+0x9c6>
 8010100:	151b      	asrs	r3, r3, #20
 8010102:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010106:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801010a:	fa4a fa03 	asr.w	sl, sl, r3
 801010e:	44da      	add	sl, fp
 8010110:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010114:	489b      	ldr	r0, [pc, #620]	; (8010384 <__ieee754_pow+0xa3c>)
 8010116:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801011a:	4108      	asrs	r0, r1
 801011c:	ea00 030a 	and.w	r3, r0, sl
 8010120:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010124:	f1c1 0114 	rsb	r1, r1, #20
 8010128:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801012c:	fa4a fa01 	asr.w	sl, sl, r1
 8010130:	f1bb 0f00 	cmp.w	fp, #0
 8010134:	f04f 0200 	mov.w	r2, #0
 8010138:	4620      	mov	r0, r4
 801013a:	4629      	mov	r1, r5
 801013c:	bfb8      	it	lt
 801013e:	f1ca 0a00 	rsblt	sl, sl, #0
 8010142:	f7f0 f8a1 	bl	8000288 <__aeabi_dsub>
 8010146:	ec41 0b19 	vmov	d9, r0, r1
 801014a:	4642      	mov	r2, r8
 801014c:	464b      	mov	r3, r9
 801014e:	ec51 0b19 	vmov	r0, r1, d9
 8010152:	f7f0 f89b 	bl	800028c <__adddf3>
 8010156:	a37a      	add	r3, pc, #488	; (adr r3, 8010340 <__ieee754_pow+0x9f8>)
 8010158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015c:	2000      	movs	r0, #0
 801015e:	4604      	mov	r4, r0
 8010160:	460d      	mov	r5, r1
 8010162:	f7f0 fa49 	bl	80005f8 <__aeabi_dmul>
 8010166:	ec53 2b19 	vmov	r2, r3, d9
 801016a:	4606      	mov	r6, r0
 801016c:	460f      	mov	r7, r1
 801016e:	4620      	mov	r0, r4
 8010170:	4629      	mov	r1, r5
 8010172:	f7f0 f889 	bl	8000288 <__aeabi_dsub>
 8010176:	4602      	mov	r2, r0
 8010178:	460b      	mov	r3, r1
 801017a:	4640      	mov	r0, r8
 801017c:	4649      	mov	r1, r9
 801017e:	f7f0 f883 	bl	8000288 <__aeabi_dsub>
 8010182:	a371      	add	r3, pc, #452	; (adr r3, 8010348 <__ieee754_pow+0xa00>)
 8010184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010188:	f7f0 fa36 	bl	80005f8 <__aeabi_dmul>
 801018c:	a370      	add	r3, pc, #448	; (adr r3, 8010350 <__ieee754_pow+0xa08>)
 801018e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010192:	4680      	mov	r8, r0
 8010194:	4689      	mov	r9, r1
 8010196:	4620      	mov	r0, r4
 8010198:	4629      	mov	r1, r5
 801019a:	f7f0 fa2d 	bl	80005f8 <__aeabi_dmul>
 801019e:	4602      	mov	r2, r0
 80101a0:	460b      	mov	r3, r1
 80101a2:	4640      	mov	r0, r8
 80101a4:	4649      	mov	r1, r9
 80101a6:	f7f0 f871 	bl	800028c <__adddf3>
 80101aa:	4604      	mov	r4, r0
 80101ac:	460d      	mov	r5, r1
 80101ae:	4602      	mov	r2, r0
 80101b0:	460b      	mov	r3, r1
 80101b2:	4630      	mov	r0, r6
 80101b4:	4639      	mov	r1, r7
 80101b6:	f7f0 f869 	bl	800028c <__adddf3>
 80101ba:	4632      	mov	r2, r6
 80101bc:	463b      	mov	r3, r7
 80101be:	4680      	mov	r8, r0
 80101c0:	4689      	mov	r9, r1
 80101c2:	f7f0 f861 	bl	8000288 <__aeabi_dsub>
 80101c6:	4602      	mov	r2, r0
 80101c8:	460b      	mov	r3, r1
 80101ca:	4620      	mov	r0, r4
 80101cc:	4629      	mov	r1, r5
 80101ce:	f7f0 f85b 	bl	8000288 <__aeabi_dsub>
 80101d2:	4642      	mov	r2, r8
 80101d4:	4606      	mov	r6, r0
 80101d6:	460f      	mov	r7, r1
 80101d8:	464b      	mov	r3, r9
 80101da:	4640      	mov	r0, r8
 80101dc:	4649      	mov	r1, r9
 80101de:	f7f0 fa0b 	bl	80005f8 <__aeabi_dmul>
 80101e2:	a35d      	add	r3, pc, #372	; (adr r3, 8010358 <__ieee754_pow+0xa10>)
 80101e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e8:	4604      	mov	r4, r0
 80101ea:	460d      	mov	r5, r1
 80101ec:	f7f0 fa04 	bl	80005f8 <__aeabi_dmul>
 80101f0:	a35b      	add	r3, pc, #364	; (adr r3, 8010360 <__ieee754_pow+0xa18>)
 80101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f6:	f7f0 f847 	bl	8000288 <__aeabi_dsub>
 80101fa:	4622      	mov	r2, r4
 80101fc:	462b      	mov	r3, r5
 80101fe:	f7f0 f9fb 	bl	80005f8 <__aeabi_dmul>
 8010202:	a359      	add	r3, pc, #356	; (adr r3, 8010368 <__ieee754_pow+0xa20>)
 8010204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010208:	f7f0 f840 	bl	800028c <__adddf3>
 801020c:	4622      	mov	r2, r4
 801020e:	462b      	mov	r3, r5
 8010210:	f7f0 f9f2 	bl	80005f8 <__aeabi_dmul>
 8010214:	a356      	add	r3, pc, #344	; (adr r3, 8010370 <__ieee754_pow+0xa28>)
 8010216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021a:	f7f0 f835 	bl	8000288 <__aeabi_dsub>
 801021e:	4622      	mov	r2, r4
 8010220:	462b      	mov	r3, r5
 8010222:	f7f0 f9e9 	bl	80005f8 <__aeabi_dmul>
 8010226:	a354      	add	r3, pc, #336	; (adr r3, 8010378 <__ieee754_pow+0xa30>)
 8010228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022c:	f7f0 f82e 	bl	800028c <__adddf3>
 8010230:	4622      	mov	r2, r4
 8010232:	462b      	mov	r3, r5
 8010234:	f7f0 f9e0 	bl	80005f8 <__aeabi_dmul>
 8010238:	4602      	mov	r2, r0
 801023a:	460b      	mov	r3, r1
 801023c:	4640      	mov	r0, r8
 801023e:	4649      	mov	r1, r9
 8010240:	f7f0 f822 	bl	8000288 <__aeabi_dsub>
 8010244:	4604      	mov	r4, r0
 8010246:	460d      	mov	r5, r1
 8010248:	4602      	mov	r2, r0
 801024a:	460b      	mov	r3, r1
 801024c:	4640      	mov	r0, r8
 801024e:	4649      	mov	r1, r9
 8010250:	f7f0 f9d2 	bl	80005f8 <__aeabi_dmul>
 8010254:	2200      	movs	r2, #0
 8010256:	ec41 0b19 	vmov	d9, r0, r1
 801025a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801025e:	4620      	mov	r0, r4
 8010260:	4629      	mov	r1, r5
 8010262:	f7f0 f811 	bl	8000288 <__aeabi_dsub>
 8010266:	4602      	mov	r2, r0
 8010268:	460b      	mov	r3, r1
 801026a:	ec51 0b19 	vmov	r0, r1, d9
 801026e:	f7f0 faed 	bl	800084c <__aeabi_ddiv>
 8010272:	4632      	mov	r2, r6
 8010274:	4604      	mov	r4, r0
 8010276:	460d      	mov	r5, r1
 8010278:	463b      	mov	r3, r7
 801027a:	4640      	mov	r0, r8
 801027c:	4649      	mov	r1, r9
 801027e:	f7f0 f9bb 	bl	80005f8 <__aeabi_dmul>
 8010282:	4632      	mov	r2, r6
 8010284:	463b      	mov	r3, r7
 8010286:	f7f0 f801 	bl	800028c <__adddf3>
 801028a:	4602      	mov	r2, r0
 801028c:	460b      	mov	r3, r1
 801028e:	4620      	mov	r0, r4
 8010290:	4629      	mov	r1, r5
 8010292:	f7ef fff9 	bl	8000288 <__aeabi_dsub>
 8010296:	4642      	mov	r2, r8
 8010298:	464b      	mov	r3, r9
 801029a:	f7ef fff5 	bl	8000288 <__aeabi_dsub>
 801029e:	460b      	mov	r3, r1
 80102a0:	4602      	mov	r2, r0
 80102a2:	4939      	ldr	r1, [pc, #228]	; (8010388 <__ieee754_pow+0xa40>)
 80102a4:	2000      	movs	r0, #0
 80102a6:	f7ef ffef 	bl	8000288 <__aeabi_dsub>
 80102aa:	ec41 0b10 	vmov	d0, r0, r1
 80102ae:	ee10 3a90 	vmov	r3, s1
 80102b2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80102b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102ba:	da2b      	bge.n	8010314 <__ieee754_pow+0x9cc>
 80102bc:	4650      	mov	r0, sl
 80102be:	f000 fc23 	bl	8010b08 <scalbn>
 80102c2:	ec51 0b10 	vmov	r0, r1, d0
 80102c6:	ec53 2b18 	vmov	r2, r3, d8
 80102ca:	f7ff bbee 	b.w	800faaa <__ieee754_pow+0x162>
 80102ce:	4b2f      	ldr	r3, [pc, #188]	; (801038c <__ieee754_pow+0xa44>)
 80102d0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80102d4:	429e      	cmp	r6, r3
 80102d6:	f77f af0d 	ble.w	80100f4 <__ieee754_pow+0x7ac>
 80102da:	4b2d      	ldr	r3, [pc, #180]	; (8010390 <__ieee754_pow+0xa48>)
 80102dc:	440b      	add	r3, r1
 80102de:	4303      	orrs	r3, r0
 80102e0:	d009      	beq.n	80102f6 <__ieee754_pow+0x9ae>
 80102e2:	ec51 0b18 	vmov	r0, r1, d8
 80102e6:	2200      	movs	r2, #0
 80102e8:	2300      	movs	r3, #0
 80102ea:	f7f0 fbf7 	bl	8000adc <__aeabi_dcmplt>
 80102ee:	3800      	subs	r0, #0
 80102f0:	bf18      	it	ne
 80102f2:	2001      	movne	r0, #1
 80102f4:	e448      	b.n	800fb88 <__ieee754_pow+0x240>
 80102f6:	4622      	mov	r2, r4
 80102f8:	462b      	mov	r3, r5
 80102fa:	f7ef ffc5 	bl	8000288 <__aeabi_dsub>
 80102fe:	4642      	mov	r2, r8
 8010300:	464b      	mov	r3, r9
 8010302:	f7f0 fbff 	bl	8000b04 <__aeabi_dcmpge>
 8010306:	2800      	cmp	r0, #0
 8010308:	f43f aef4 	beq.w	80100f4 <__ieee754_pow+0x7ac>
 801030c:	e7e9      	b.n	80102e2 <__ieee754_pow+0x99a>
 801030e:	f04f 0a00 	mov.w	sl, #0
 8010312:	e71a      	b.n	801014a <__ieee754_pow+0x802>
 8010314:	ec51 0b10 	vmov	r0, r1, d0
 8010318:	4619      	mov	r1, r3
 801031a:	e7d4      	b.n	80102c6 <__ieee754_pow+0x97e>
 801031c:	491a      	ldr	r1, [pc, #104]	; (8010388 <__ieee754_pow+0xa40>)
 801031e:	2000      	movs	r0, #0
 8010320:	f7ff bb31 	b.w	800f986 <__ieee754_pow+0x3e>
 8010324:	2000      	movs	r0, #0
 8010326:	2100      	movs	r1, #0
 8010328:	f7ff bb2d 	b.w	800f986 <__ieee754_pow+0x3e>
 801032c:	4630      	mov	r0, r6
 801032e:	4639      	mov	r1, r7
 8010330:	f7ff bb29 	b.w	800f986 <__ieee754_pow+0x3e>
 8010334:	9204      	str	r2, [sp, #16]
 8010336:	f7ff bb7b 	b.w	800fa30 <__ieee754_pow+0xe8>
 801033a:	2300      	movs	r3, #0
 801033c:	f7ff bb65 	b.w	800fa0a <__ieee754_pow+0xc2>
 8010340:	00000000 	.word	0x00000000
 8010344:	3fe62e43 	.word	0x3fe62e43
 8010348:	fefa39ef 	.word	0xfefa39ef
 801034c:	3fe62e42 	.word	0x3fe62e42
 8010350:	0ca86c39 	.word	0x0ca86c39
 8010354:	be205c61 	.word	0xbe205c61
 8010358:	72bea4d0 	.word	0x72bea4d0
 801035c:	3e663769 	.word	0x3e663769
 8010360:	c5d26bf1 	.word	0xc5d26bf1
 8010364:	3ebbbd41 	.word	0x3ebbbd41
 8010368:	af25de2c 	.word	0xaf25de2c
 801036c:	3f11566a 	.word	0x3f11566a
 8010370:	16bebd93 	.word	0x16bebd93
 8010374:	3f66c16c 	.word	0x3f66c16c
 8010378:	5555553e 	.word	0x5555553e
 801037c:	3fc55555 	.word	0x3fc55555
 8010380:	3fe00000 	.word	0x3fe00000
 8010384:	fff00000 	.word	0xfff00000
 8010388:	3ff00000 	.word	0x3ff00000
 801038c:	4090cbff 	.word	0x4090cbff
 8010390:	3f6f3400 	.word	0x3f6f3400
 8010394:	652b82fe 	.word	0x652b82fe
 8010398:	3c971547 	.word	0x3c971547
 801039c:	00000000 	.word	0x00000000

080103a0 <__ieee754_rem_pio2>:
 80103a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a4:	ed2d 8b02 	vpush	{d8}
 80103a8:	ec55 4b10 	vmov	r4, r5, d0
 80103ac:	4bca      	ldr	r3, [pc, #808]	; (80106d8 <__ieee754_rem_pio2+0x338>)
 80103ae:	b08b      	sub	sp, #44	; 0x2c
 80103b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80103b4:	4598      	cmp	r8, r3
 80103b6:	4682      	mov	sl, r0
 80103b8:	9502      	str	r5, [sp, #8]
 80103ba:	dc08      	bgt.n	80103ce <__ieee754_rem_pio2+0x2e>
 80103bc:	2200      	movs	r2, #0
 80103be:	2300      	movs	r3, #0
 80103c0:	ed80 0b00 	vstr	d0, [r0]
 80103c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80103c8:	f04f 0b00 	mov.w	fp, #0
 80103cc:	e028      	b.n	8010420 <__ieee754_rem_pio2+0x80>
 80103ce:	4bc3      	ldr	r3, [pc, #780]	; (80106dc <__ieee754_rem_pio2+0x33c>)
 80103d0:	4598      	cmp	r8, r3
 80103d2:	dc78      	bgt.n	80104c6 <__ieee754_rem_pio2+0x126>
 80103d4:	9b02      	ldr	r3, [sp, #8]
 80103d6:	4ec2      	ldr	r6, [pc, #776]	; (80106e0 <__ieee754_rem_pio2+0x340>)
 80103d8:	2b00      	cmp	r3, #0
 80103da:	ee10 0a10 	vmov	r0, s0
 80103de:	a3b0      	add	r3, pc, #704	; (adr r3, 80106a0 <__ieee754_rem_pio2+0x300>)
 80103e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e4:	4629      	mov	r1, r5
 80103e6:	dd39      	ble.n	801045c <__ieee754_rem_pio2+0xbc>
 80103e8:	f7ef ff4e 	bl	8000288 <__aeabi_dsub>
 80103ec:	45b0      	cmp	r8, r6
 80103ee:	4604      	mov	r4, r0
 80103f0:	460d      	mov	r5, r1
 80103f2:	d01b      	beq.n	801042c <__ieee754_rem_pio2+0x8c>
 80103f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80106a8 <__ieee754_rem_pio2+0x308>)
 80103f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fa:	f7ef ff45 	bl	8000288 <__aeabi_dsub>
 80103fe:	4602      	mov	r2, r0
 8010400:	460b      	mov	r3, r1
 8010402:	e9ca 2300 	strd	r2, r3, [sl]
 8010406:	4620      	mov	r0, r4
 8010408:	4629      	mov	r1, r5
 801040a:	f7ef ff3d 	bl	8000288 <__aeabi_dsub>
 801040e:	a3a6      	add	r3, pc, #664	; (adr r3, 80106a8 <__ieee754_rem_pio2+0x308>)
 8010410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010414:	f7ef ff38 	bl	8000288 <__aeabi_dsub>
 8010418:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801041c:	f04f 0b01 	mov.w	fp, #1
 8010420:	4658      	mov	r0, fp
 8010422:	b00b      	add	sp, #44	; 0x2c
 8010424:	ecbd 8b02 	vpop	{d8}
 8010428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801042c:	a3a0      	add	r3, pc, #640	; (adr r3, 80106b0 <__ieee754_rem_pio2+0x310>)
 801042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010432:	f7ef ff29 	bl	8000288 <__aeabi_dsub>
 8010436:	a3a0      	add	r3, pc, #640	; (adr r3, 80106b8 <__ieee754_rem_pio2+0x318>)
 8010438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043c:	4604      	mov	r4, r0
 801043e:	460d      	mov	r5, r1
 8010440:	f7ef ff22 	bl	8000288 <__aeabi_dsub>
 8010444:	4602      	mov	r2, r0
 8010446:	460b      	mov	r3, r1
 8010448:	e9ca 2300 	strd	r2, r3, [sl]
 801044c:	4620      	mov	r0, r4
 801044e:	4629      	mov	r1, r5
 8010450:	f7ef ff1a 	bl	8000288 <__aeabi_dsub>
 8010454:	a398      	add	r3, pc, #608	; (adr r3, 80106b8 <__ieee754_rem_pio2+0x318>)
 8010456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045a:	e7db      	b.n	8010414 <__ieee754_rem_pio2+0x74>
 801045c:	f7ef ff16 	bl	800028c <__adddf3>
 8010460:	45b0      	cmp	r8, r6
 8010462:	4604      	mov	r4, r0
 8010464:	460d      	mov	r5, r1
 8010466:	d016      	beq.n	8010496 <__ieee754_rem_pio2+0xf6>
 8010468:	a38f      	add	r3, pc, #572	; (adr r3, 80106a8 <__ieee754_rem_pio2+0x308>)
 801046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046e:	f7ef ff0d 	bl	800028c <__adddf3>
 8010472:	4602      	mov	r2, r0
 8010474:	460b      	mov	r3, r1
 8010476:	e9ca 2300 	strd	r2, r3, [sl]
 801047a:	4620      	mov	r0, r4
 801047c:	4629      	mov	r1, r5
 801047e:	f7ef ff03 	bl	8000288 <__aeabi_dsub>
 8010482:	a389      	add	r3, pc, #548	; (adr r3, 80106a8 <__ieee754_rem_pio2+0x308>)
 8010484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010488:	f7ef ff00 	bl	800028c <__adddf3>
 801048c:	f04f 3bff 	mov.w	fp, #4294967295
 8010490:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010494:	e7c4      	b.n	8010420 <__ieee754_rem_pio2+0x80>
 8010496:	a386      	add	r3, pc, #536	; (adr r3, 80106b0 <__ieee754_rem_pio2+0x310>)
 8010498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049c:	f7ef fef6 	bl	800028c <__adddf3>
 80104a0:	a385      	add	r3, pc, #532	; (adr r3, 80106b8 <__ieee754_rem_pio2+0x318>)
 80104a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a6:	4604      	mov	r4, r0
 80104a8:	460d      	mov	r5, r1
 80104aa:	f7ef feef 	bl	800028c <__adddf3>
 80104ae:	4602      	mov	r2, r0
 80104b0:	460b      	mov	r3, r1
 80104b2:	e9ca 2300 	strd	r2, r3, [sl]
 80104b6:	4620      	mov	r0, r4
 80104b8:	4629      	mov	r1, r5
 80104ba:	f7ef fee5 	bl	8000288 <__aeabi_dsub>
 80104be:	a37e      	add	r3, pc, #504	; (adr r3, 80106b8 <__ieee754_rem_pio2+0x318>)
 80104c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c4:	e7e0      	b.n	8010488 <__ieee754_rem_pio2+0xe8>
 80104c6:	4b87      	ldr	r3, [pc, #540]	; (80106e4 <__ieee754_rem_pio2+0x344>)
 80104c8:	4598      	cmp	r8, r3
 80104ca:	f300 80d8 	bgt.w	801067e <__ieee754_rem_pio2+0x2de>
 80104ce:	f000 fb0f 	bl	8010af0 <fabs>
 80104d2:	ec55 4b10 	vmov	r4, r5, d0
 80104d6:	ee10 0a10 	vmov	r0, s0
 80104da:	a379      	add	r3, pc, #484	; (adr r3, 80106c0 <__ieee754_rem_pio2+0x320>)
 80104dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e0:	4629      	mov	r1, r5
 80104e2:	f7f0 f889 	bl	80005f8 <__aeabi_dmul>
 80104e6:	4b80      	ldr	r3, [pc, #512]	; (80106e8 <__ieee754_rem_pio2+0x348>)
 80104e8:	2200      	movs	r2, #0
 80104ea:	f7ef fecf 	bl	800028c <__adddf3>
 80104ee:	f7f0 fb33 	bl	8000b58 <__aeabi_d2iz>
 80104f2:	4683      	mov	fp, r0
 80104f4:	f7f0 f816 	bl	8000524 <__aeabi_i2d>
 80104f8:	4602      	mov	r2, r0
 80104fa:	460b      	mov	r3, r1
 80104fc:	ec43 2b18 	vmov	d8, r2, r3
 8010500:	a367      	add	r3, pc, #412	; (adr r3, 80106a0 <__ieee754_rem_pio2+0x300>)
 8010502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010506:	f7f0 f877 	bl	80005f8 <__aeabi_dmul>
 801050a:	4602      	mov	r2, r0
 801050c:	460b      	mov	r3, r1
 801050e:	4620      	mov	r0, r4
 8010510:	4629      	mov	r1, r5
 8010512:	f7ef feb9 	bl	8000288 <__aeabi_dsub>
 8010516:	a364      	add	r3, pc, #400	; (adr r3, 80106a8 <__ieee754_rem_pio2+0x308>)
 8010518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051c:	4606      	mov	r6, r0
 801051e:	460f      	mov	r7, r1
 8010520:	ec51 0b18 	vmov	r0, r1, d8
 8010524:	f7f0 f868 	bl	80005f8 <__aeabi_dmul>
 8010528:	f1bb 0f1f 	cmp.w	fp, #31
 801052c:	4604      	mov	r4, r0
 801052e:	460d      	mov	r5, r1
 8010530:	dc0d      	bgt.n	801054e <__ieee754_rem_pio2+0x1ae>
 8010532:	4b6e      	ldr	r3, [pc, #440]	; (80106ec <__ieee754_rem_pio2+0x34c>)
 8010534:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801053c:	4543      	cmp	r3, r8
 801053e:	d006      	beq.n	801054e <__ieee754_rem_pio2+0x1ae>
 8010540:	4622      	mov	r2, r4
 8010542:	462b      	mov	r3, r5
 8010544:	4630      	mov	r0, r6
 8010546:	4639      	mov	r1, r7
 8010548:	f7ef fe9e 	bl	8000288 <__aeabi_dsub>
 801054c:	e00e      	b.n	801056c <__ieee754_rem_pio2+0x1cc>
 801054e:	462b      	mov	r3, r5
 8010550:	4622      	mov	r2, r4
 8010552:	4630      	mov	r0, r6
 8010554:	4639      	mov	r1, r7
 8010556:	f7ef fe97 	bl	8000288 <__aeabi_dsub>
 801055a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801055e:	9303      	str	r3, [sp, #12]
 8010560:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010564:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010568:	2b10      	cmp	r3, #16
 801056a:	dc02      	bgt.n	8010572 <__ieee754_rem_pio2+0x1d2>
 801056c:	e9ca 0100 	strd	r0, r1, [sl]
 8010570:	e039      	b.n	80105e6 <__ieee754_rem_pio2+0x246>
 8010572:	a34f      	add	r3, pc, #316	; (adr r3, 80106b0 <__ieee754_rem_pio2+0x310>)
 8010574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010578:	ec51 0b18 	vmov	r0, r1, d8
 801057c:	f7f0 f83c 	bl	80005f8 <__aeabi_dmul>
 8010580:	4604      	mov	r4, r0
 8010582:	460d      	mov	r5, r1
 8010584:	4602      	mov	r2, r0
 8010586:	460b      	mov	r3, r1
 8010588:	4630      	mov	r0, r6
 801058a:	4639      	mov	r1, r7
 801058c:	f7ef fe7c 	bl	8000288 <__aeabi_dsub>
 8010590:	4602      	mov	r2, r0
 8010592:	460b      	mov	r3, r1
 8010594:	4680      	mov	r8, r0
 8010596:	4689      	mov	r9, r1
 8010598:	4630      	mov	r0, r6
 801059a:	4639      	mov	r1, r7
 801059c:	f7ef fe74 	bl	8000288 <__aeabi_dsub>
 80105a0:	4622      	mov	r2, r4
 80105a2:	462b      	mov	r3, r5
 80105a4:	f7ef fe70 	bl	8000288 <__aeabi_dsub>
 80105a8:	a343      	add	r3, pc, #268	; (adr r3, 80106b8 <__ieee754_rem_pio2+0x318>)
 80105aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ae:	4604      	mov	r4, r0
 80105b0:	460d      	mov	r5, r1
 80105b2:	ec51 0b18 	vmov	r0, r1, d8
 80105b6:	f7f0 f81f 	bl	80005f8 <__aeabi_dmul>
 80105ba:	4622      	mov	r2, r4
 80105bc:	462b      	mov	r3, r5
 80105be:	f7ef fe63 	bl	8000288 <__aeabi_dsub>
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	4604      	mov	r4, r0
 80105c8:	460d      	mov	r5, r1
 80105ca:	4640      	mov	r0, r8
 80105cc:	4649      	mov	r1, r9
 80105ce:	f7ef fe5b 	bl	8000288 <__aeabi_dsub>
 80105d2:	9a03      	ldr	r2, [sp, #12]
 80105d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80105d8:	1ad3      	subs	r3, r2, r3
 80105da:	2b31      	cmp	r3, #49	; 0x31
 80105dc:	dc24      	bgt.n	8010628 <__ieee754_rem_pio2+0x288>
 80105de:	e9ca 0100 	strd	r0, r1, [sl]
 80105e2:	4646      	mov	r6, r8
 80105e4:	464f      	mov	r7, r9
 80105e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80105ea:	4630      	mov	r0, r6
 80105ec:	4642      	mov	r2, r8
 80105ee:	464b      	mov	r3, r9
 80105f0:	4639      	mov	r1, r7
 80105f2:	f7ef fe49 	bl	8000288 <__aeabi_dsub>
 80105f6:	462b      	mov	r3, r5
 80105f8:	4622      	mov	r2, r4
 80105fa:	f7ef fe45 	bl	8000288 <__aeabi_dsub>
 80105fe:	9b02      	ldr	r3, [sp, #8]
 8010600:	2b00      	cmp	r3, #0
 8010602:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010606:	f6bf af0b 	bge.w	8010420 <__ieee754_rem_pio2+0x80>
 801060a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801060e:	f8ca 3004 	str.w	r3, [sl, #4]
 8010612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010616:	f8ca 8000 	str.w	r8, [sl]
 801061a:	f8ca 0008 	str.w	r0, [sl, #8]
 801061e:	f8ca 300c 	str.w	r3, [sl, #12]
 8010622:	f1cb 0b00 	rsb	fp, fp, #0
 8010626:	e6fb      	b.n	8010420 <__ieee754_rem_pio2+0x80>
 8010628:	a327      	add	r3, pc, #156	; (adr r3, 80106c8 <__ieee754_rem_pio2+0x328>)
 801062a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062e:	ec51 0b18 	vmov	r0, r1, d8
 8010632:	f7ef ffe1 	bl	80005f8 <__aeabi_dmul>
 8010636:	4604      	mov	r4, r0
 8010638:	460d      	mov	r5, r1
 801063a:	4602      	mov	r2, r0
 801063c:	460b      	mov	r3, r1
 801063e:	4640      	mov	r0, r8
 8010640:	4649      	mov	r1, r9
 8010642:	f7ef fe21 	bl	8000288 <__aeabi_dsub>
 8010646:	4602      	mov	r2, r0
 8010648:	460b      	mov	r3, r1
 801064a:	4606      	mov	r6, r0
 801064c:	460f      	mov	r7, r1
 801064e:	4640      	mov	r0, r8
 8010650:	4649      	mov	r1, r9
 8010652:	f7ef fe19 	bl	8000288 <__aeabi_dsub>
 8010656:	4622      	mov	r2, r4
 8010658:	462b      	mov	r3, r5
 801065a:	f7ef fe15 	bl	8000288 <__aeabi_dsub>
 801065e:	a31c      	add	r3, pc, #112	; (adr r3, 80106d0 <__ieee754_rem_pio2+0x330>)
 8010660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010664:	4604      	mov	r4, r0
 8010666:	460d      	mov	r5, r1
 8010668:	ec51 0b18 	vmov	r0, r1, d8
 801066c:	f7ef ffc4 	bl	80005f8 <__aeabi_dmul>
 8010670:	4622      	mov	r2, r4
 8010672:	462b      	mov	r3, r5
 8010674:	f7ef fe08 	bl	8000288 <__aeabi_dsub>
 8010678:	4604      	mov	r4, r0
 801067a:	460d      	mov	r5, r1
 801067c:	e760      	b.n	8010540 <__ieee754_rem_pio2+0x1a0>
 801067e:	4b1c      	ldr	r3, [pc, #112]	; (80106f0 <__ieee754_rem_pio2+0x350>)
 8010680:	4598      	cmp	r8, r3
 8010682:	dd37      	ble.n	80106f4 <__ieee754_rem_pio2+0x354>
 8010684:	ee10 2a10 	vmov	r2, s0
 8010688:	462b      	mov	r3, r5
 801068a:	4620      	mov	r0, r4
 801068c:	4629      	mov	r1, r5
 801068e:	f7ef fdfb 	bl	8000288 <__aeabi_dsub>
 8010692:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010696:	e9ca 0100 	strd	r0, r1, [sl]
 801069a:	e695      	b.n	80103c8 <__ieee754_rem_pio2+0x28>
 801069c:	f3af 8000 	nop.w
 80106a0:	54400000 	.word	0x54400000
 80106a4:	3ff921fb 	.word	0x3ff921fb
 80106a8:	1a626331 	.word	0x1a626331
 80106ac:	3dd0b461 	.word	0x3dd0b461
 80106b0:	1a600000 	.word	0x1a600000
 80106b4:	3dd0b461 	.word	0x3dd0b461
 80106b8:	2e037073 	.word	0x2e037073
 80106bc:	3ba3198a 	.word	0x3ba3198a
 80106c0:	6dc9c883 	.word	0x6dc9c883
 80106c4:	3fe45f30 	.word	0x3fe45f30
 80106c8:	2e000000 	.word	0x2e000000
 80106cc:	3ba3198a 	.word	0x3ba3198a
 80106d0:	252049c1 	.word	0x252049c1
 80106d4:	397b839a 	.word	0x397b839a
 80106d8:	3fe921fb 	.word	0x3fe921fb
 80106dc:	4002d97b 	.word	0x4002d97b
 80106e0:	3ff921fb 	.word	0x3ff921fb
 80106e4:	413921fb 	.word	0x413921fb
 80106e8:	3fe00000 	.word	0x3fe00000
 80106ec:	08012360 	.word	0x08012360
 80106f0:	7fefffff 	.word	0x7fefffff
 80106f4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80106f8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80106fc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010700:	4620      	mov	r0, r4
 8010702:	460d      	mov	r5, r1
 8010704:	f7f0 fa28 	bl	8000b58 <__aeabi_d2iz>
 8010708:	f7ef ff0c 	bl	8000524 <__aeabi_i2d>
 801070c:	4602      	mov	r2, r0
 801070e:	460b      	mov	r3, r1
 8010710:	4620      	mov	r0, r4
 8010712:	4629      	mov	r1, r5
 8010714:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010718:	f7ef fdb6 	bl	8000288 <__aeabi_dsub>
 801071c:	4b21      	ldr	r3, [pc, #132]	; (80107a4 <__ieee754_rem_pio2+0x404>)
 801071e:	2200      	movs	r2, #0
 8010720:	f7ef ff6a 	bl	80005f8 <__aeabi_dmul>
 8010724:	460d      	mov	r5, r1
 8010726:	4604      	mov	r4, r0
 8010728:	f7f0 fa16 	bl	8000b58 <__aeabi_d2iz>
 801072c:	f7ef fefa 	bl	8000524 <__aeabi_i2d>
 8010730:	4602      	mov	r2, r0
 8010732:	460b      	mov	r3, r1
 8010734:	4620      	mov	r0, r4
 8010736:	4629      	mov	r1, r5
 8010738:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801073c:	f7ef fda4 	bl	8000288 <__aeabi_dsub>
 8010740:	4b18      	ldr	r3, [pc, #96]	; (80107a4 <__ieee754_rem_pio2+0x404>)
 8010742:	2200      	movs	r2, #0
 8010744:	f7ef ff58 	bl	80005f8 <__aeabi_dmul>
 8010748:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801074c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010750:	2703      	movs	r7, #3
 8010752:	2400      	movs	r4, #0
 8010754:	2500      	movs	r5, #0
 8010756:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801075a:	4622      	mov	r2, r4
 801075c:	462b      	mov	r3, r5
 801075e:	46b9      	mov	r9, r7
 8010760:	3f01      	subs	r7, #1
 8010762:	f7f0 f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 8010766:	2800      	cmp	r0, #0
 8010768:	d1f5      	bne.n	8010756 <__ieee754_rem_pio2+0x3b6>
 801076a:	4b0f      	ldr	r3, [pc, #60]	; (80107a8 <__ieee754_rem_pio2+0x408>)
 801076c:	9301      	str	r3, [sp, #4]
 801076e:	2302      	movs	r3, #2
 8010770:	9300      	str	r3, [sp, #0]
 8010772:	4632      	mov	r2, r6
 8010774:	464b      	mov	r3, r9
 8010776:	4651      	mov	r1, sl
 8010778:	a804      	add	r0, sp, #16
 801077a:	f000 fa75 	bl	8010c68 <__kernel_rem_pio2>
 801077e:	9b02      	ldr	r3, [sp, #8]
 8010780:	2b00      	cmp	r3, #0
 8010782:	4683      	mov	fp, r0
 8010784:	f6bf ae4c 	bge.w	8010420 <__ieee754_rem_pio2+0x80>
 8010788:	e9da 2100 	ldrd	r2, r1, [sl]
 801078c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010790:	e9ca 2300 	strd	r2, r3, [sl]
 8010794:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010798:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801079c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80107a0:	e73f      	b.n	8010622 <__ieee754_rem_pio2+0x282>
 80107a2:	bf00      	nop
 80107a4:	41700000 	.word	0x41700000
 80107a8:	080123e0 	.word	0x080123e0
 80107ac:	00000000 	.word	0x00000000

080107b0 <atan>:
 80107b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b4:	ec55 4b10 	vmov	r4, r5, d0
 80107b8:	4bc3      	ldr	r3, [pc, #780]	; (8010ac8 <atan+0x318>)
 80107ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80107be:	429e      	cmp	r6, r3
 80107c0:	46ab      	mov	fp, r5
 80107c2:	dd18      	ble.n	80107f6 <atan+0x46>
 80107c4:	4bc1      	ldr	r3, [pc, #772]	; (8010acc <atan+0x31c>)
 80107c6:	429e      	cmp	r6, r3
 80107c8:	dc01      	bgt.n	80107ce <atan+0x1e>
 80107ca:	d109      	bne.n	80107e0 <atan+0x30>
 80107cc:	b144      	cbz	r4, 80107e0 <atan+0x30>
 80107ce:	4622      	mov	r2, r4
 80107d0:	462b      	mov	r3, r5
 80107d2:	4620      	mov	r0, r4
 80107d4:	4629      	mov	r1, r5
 80107d6:	f7ef fd59 	bl	800028c <__adddf3>
 80107da:	4604      	mov	r4, r0
 80107dc:	460d      	mov	r5, r1
 80107de:	e006      	b.n	80107ee <atan+0x3e>
 80107e0:	f1bb 0f00 	cmp.w	fp, #0
 80107e4:	f300 8131 	bgt.w	8010a4a <atan+0x29a>
 80107e8:	a59b      	add	r5, pc, #620	; (adr r5, 8010a58 <atan+0x2a8>)
 80107ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80107ee:	ec45 4b10 	vmov	d0, r4, r5
 80107f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f6:	4bb6      	ldr	r3, [pc, #728]	; (8010ad0 <atan+0x320>)
 80107f8:	429e      	cmp	r6, r3
 80107fa:	dc14      	bgt.n	8010826 <atan+0x76>
 80107fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010800:	429e      	cmp	r6, r3
 8010802:	dc0d      	bgt.n	8010820 <atan+0x70>
 8010804:	a396      	add	r3, pc, #600	; (adr r3, 8010a60 <atan+0x2b0>)
 8010806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080a:	ee10 0a10 	vmov	r0, s0
 801080e:	4629      	mov	r1, r5
 8010810:	f7ef fd3c 	bl	800028c <__adddf3>
 8010814:	4baf      	ldr	r3, [pc, #700]	; (8010ad4 <atan+0x324>)
 8010816:	2200      	movs	r2, #0
 8010818:	f7f0 f97e 	bl	8000b18 <__aeabi_dcmpgt>
 801081c:	2800      	cmp	r0, #0
 801081e:	d1e6      	bne.n	80107ee <atan+0x3e>
 8010820:	f04f 3aff 	mov.w	sl, #4294967295
 8010824:	e02b      	b.n	801087e <atan+0xce>
 8010826:	f000 f963 	bl	8010af0 <fabs>
 801082a:	4bab      	ldr	r3, [pc, #684]	; (8010ad8 <atan+0x328>)
 801082c:	429e      	cmp	r6, r3
 801082e:	ec55 4b10 	vmov	r4, r5, d0
 8010832:	f300 80bf 	bgt.w	80109b4 <atan+0x204>
 8010836:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801083a:	429e      	cmp	r6, r3
 801083c:	f300 80a0 	bgt.w	8010980 <atan+0x1d0>
 8010840:	ee10 2a10 	vmov	r2, s0
 8010844:	ee10 0a10 	vmov	r0, s0
 8010848:	462b      	mov	r3, r5
 801084a:	4629      	mov	r1, r5
 801084c:	f7ef fd1e 	bl	800028c <__adddf3>
 8010850:	4ba0      	ldr	r3, [pc, #640]	; (8010ad4 <atan+0x324>)
 8010852:	2200      	movs	r2, #0
 8010854:	f7ef fd18 	bl	8000288 <__aeabi_dsub>
 8010858:	2200      	movs	r2, #0
 801085a:	4606      	mov	r6, r0
 801085c:	460f      	mov	r7, r1
 801085e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010862:	4620      	mov	r0, r4
 8010864:	4629      	mov	r1, r5
 8010866:	f7ef fd11 	bl	800028c <__adddf3>
 801086a:	4602      	mov	r2, r0
 801086c:	460b      	mov	r3, r1
 801086e:	4630      	mov	r0, r6
 8010870:	4639      	mov	r1, r7
 8010872:	f7ef ffeb 	bl	800084c <__aeabi_ddiv>
 8010876:	f04f 0a00 	mov.w	sl, #0
 801087a:	4604      	mov	r4, r0
 801087c:	460d      	mov	r5, r1
 801087e:	4622      	mov	r2, r4
 8010880:	462b      	mov	r3, r5
 8010882:	4620      	mov	r0, r4
 8010884:	4629      	mov	r1, r5
 8010886:	f7ef feb7 	bl	80005f8 <__aeabi_dmul>
 801088a:	4602      	mov	r2, r0
 801088c:	460b      	mov	r3, r1
 801088e:	4680      	mov	r8, r0
 8010890:	4689      	mov	r9, r1
 8010892:	f7ef feb1 	bl	80005f8 <__aeabi_dmul>
 8010896:	a374      	add	r3, pc, #464	; (adr r3, 8010a68 <atan+0x2b8>)
 8010898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089c:	4606      	mov	r6, r0
 801089e:	460f      	mov	r7, r1
 80108a0:	f7ef feaa 	bl	80005f8 <__aeabi_dmul>
 80108a4:	a372      	add	r3, pc, #456	; (adr r3, 8010a70 <atan+0x2c0>)
 80108a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108aa:	f7ef fcef 	bl	800028c <__adddf3>
 80108ae:	4632      	mov	r2, r6
 80108b0:	463b      	mov	r3, r7
 80108b2:	f7ef fea1 	bl	80005f8 <__aeabi_dmul>
 80108b6:	a370      	add	r3, pc, #448	; (adr r3, 8010a78 <atan+0x2c8>)
 80108b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108bc:	f7ef fce6 	bl	800028c <__adddf3>
 80108c0:	4632      	mov	r2, r6
 80108c2:	463b      	mov	r3, r7
 80108c4:	f7ef fe98 	bl	80005f8 <__aeabi_dmul>
 80108c8:	a36d      	add	r3, pc, #436	; (adr r3, 8010a80 <atan+0x2d0>)
 80108ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ce:	f7ef fcdd 	bl	800028c <__adddf3>
 80108d2:	4632      	mov	r2, r6
 80108d4:	463b      	mov	r3, r7
 80108d6:	f7ef fe8f 	bl	80005f8 <__aeabi_dmul>
 80108da:	a36b      	add	r3, pc, #428	; (adr r3, 8010a88 <atan+0x2d8>)
 80108dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e0:	f7ef fcd4 	bl	800028c <__adddf3>
 80108e4:	4632      	mov	r2, r6
 80108e6:	463b      	mov	r3, r7
 80108e8:	f7ef fe86 	bl	80005f8 <__aeabi_dmul>
 80108ec:	a368      	add	r3, pc, #416	; (adr r3, 8010a90 <atan+0x2e0>)
 80108ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f2:	f7ef fccb 	bl	800028c <__adddf3>
 80108f6:	4642      	mov	r2, r8
 80108f8:	464b      	mov	r3, r9
 80108fa:	f7ef fe7d 	bl	80005f8 <__aeabi_dmul>
 80108fe:	a366      	add	r3, pc, #408	; (adr r3, 8010a98 <atan+0x2e8>)
 8010900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010904:	4680      	mov	r8, r0
 8010906:	4689      	mov	r9, r1
 8010908:	4630      	mov	r0, r6
 801090a:	4639      	mov	r1, r7
 801090c:	f7ef fe74 	bl	80005f8 <__aeabi_dmul>
 8010910:	a363      	add	r3, pc, #396	; (adr r3, 8010aa0 <atan+0x2f0>)
 8010912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010916:	f7ef fcb7 	bl	8000288 <__aeabi_dsub>
 801091a:	4632      	mov	r2, r6
 801091c:	463b      	mov	r3, r7
 801091e:	f7ef fe6b 	bl	80005f8 <__aeabi_dmul>
 8010922:	a361      	add	r3, pc, #388	; (adr r3, 8010aa8 <atan+0x2f8>)
 8010924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010928:	f7ef fcae 	bl	8000288 <__aeabi_dsub>
 801092c:	4632      	mov	r2, r6
 801092e:	463b      	mov	r3, r7
 8010930:	f7ef fe62 	bl	80005f8 <__aeabi_dmul>
 8010934:	a35e      	add	r3, pc, #376	; (adr r3, 8010ab0 <atan+0x300>)
 8010936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093a:	f7ef fca5 	bl	8000288 <__aeabi_dsub>
 801093e:	4632      	mov	r2, r6
 8010940:	463b      	mov	r3, r7
 8010942:	f7ef fe59 	bl	80005f8 <__aeabi_dmul>
 8010946:	a35c      	add	r3, pc, #368	; (adr r3, 8010ab8 <atan+0x308>)
 8010948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094c:	f7ef fc9c 	bl	8000288 <__aeabi_dsub>
 8010950:	4632      	mov	r2, r6
 8010952:	463b      	mov	r3, r7
 8010954:	f7ef fe50 	bl	80005f8 <__aeabi_dmul>
 8010958:	4602      	mov	r2, r0
 801095a:	460b      	mov	r3, r1
 801095c:	4640      	mov	r0, r8
 801095e:	4649      	mov	r1, r9
 8010960:	f7ef fc94 	bl	800028c <__adddf3>
 8010964:	4622      	mov	r2, r4
 8010966:	462b      	mov	r3, r5
 8010968:	f7ef fe46 	bl	80005f8 <__aeabi_dmul>
 801096c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010970:	4602      	mov	r2, r0
 8010972:	460b      	mov	r3, r1
 8010974:	d14b      	bne.n	8010a0e <atan+0x25e>
 8010976:	4620      	mov	r0, r4
 8010978:	4629      	mov	r1, r5
 801097a:	f7ef fc85 	bl	8000288 <__aeabi_dsub>
 801097e:	e72c      	b.n	80107da <atan+0x2a>
 8010980:	ee10 0a10 	vmov	r0, s0
 8010984:	4b53      	ldr	r3, [pc, #332]	; (8010ad4 <atan+0x324>)
 8010986:	2200      	movs	r2, #0
 8010988:	4629      	mov	r1, r5
 801098a:	f7ef fc7d 	bl	8000288 <__aeabi_dsub>
 801098e:	4b51      	ldr	r3, [pc, #324]	; (8010ad4 <atan+0x324>)
 8010990:	4606      	mov	r6, r0
 8010992:	460f      	mov	r7, r1
 8010994:	2200      	movs	r2, #0
 8010996:	4620      	mov	r0, r4
 8010998:	4629      	mov	r1, r5
 801099a:	f7ef fc77 	bl	800028c <__adddf3>
 801099e:	4602      	mov	r2, r0
 80109a0:	460b      	mov	r3, r1
 80109a2:	4630      	mov	r0, r6
 80109a4:	4639      	mov	r1, r7
 80109a6:	f7ef ff51 	bl	800084c <__aeabi_ddiv>
 80109aa:	f04f 0a01 	mov.w	sl, #1
 80109ae:	4604      	mov	r4, r0
 80109b0:	460d      	mov	r5, r1
 80109b2:	e764      	b.n	801087e <atan+0xce>
 80109b4:	4b49      	ldr	r3, [pc, #292]	; (8010adc <atan+0x32c>)
 80109b6:	429e      	cmp	r6, r3
 80109b8:	da1d      	bge.n	80109f6 <atan+0x246>
 80109ba:	ee10 0a10 	vmov	r0, s0
 80109be:	4b48      	ldr	r3, [pc, #288]	; (8010ae0 <atan+0x330>)
 80109c0:	2200      	movs	r2, #0
 80109c2:	4629      	mov	r1, r5
 80109c4:	f7ef fc60 	bl	8000288 <__aeabi_dsub>
 80109c8:	4b45      	ldr	r3, [pc, #276]	; (8010ae0 <atan+0x330>)
 80109ca:	4606      	mov	r6, r0
 80109cc:	460f      	mov	r7, r1
 80109ce:	2200      	movs	r2, #0
 80109d0:	4620      	mov	r0, r4
 80109d2:	4629      	mov	r1, r5
 80109d4:	f7ef fe10 	bl	80005f8 <__aeabi_dmul>
 80109d8:	4b3e      	ldr	r3, [pc, #248]	; (8010ad4 <atan+0x324>)
 80109da:	2200      	movs	r2, #0
 80109dc:	f7ef fc56 	bl	800028c <__adddf3>
 80109e0:	4602      	mov	r2, r0
 80109e2:	460b      	mov	r3, r1
 80109e4:	4630      	mov	r0, r6
 80109e6:	4639      	mov	r1, r7
 80109e8:	f7ef ff30 	bl	800084c <__aeabi_ddiv>
 80109ec:	f04f 0a02 	mov.w	sl, #2
 80109f0:	4604      	mov	r4, r0
 80109f2:	460d      	mov	r5, r1
 80109f4:	e743      	b.n	801087e <atan+0xce>
 80109f6:	462b      	mov	r3, r5
 80109f8:	ee10 2a10 	vmov	r2, s0
 80109fc:	4939      	ldr	r1, [pc, #228]	; (8010ae4 <atan+0x334>)
 80109fe:	2000      	movs	r0, #0
 8010a00:	f7ef ff24 	bl	800084c <__aeabi_ddiv>
 8010a04:	f04f 0a03 	mov.w	sl, #3
 8010a08:	4604      	mov	r4, r0
 8010a0a:	460d      	mov	r5, r1
 8010a0c:	e737      	b.n	801087e <atan+0xce>
 8010a0e:	4b36      	ldr	r3, [pc, #216]	; (8010ae8 <atan+0x338>)
 8010a10:	4e36      	ldr	r6, [pc, #216]	; (8010aec <atan+0x33c>)
 8010a12:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1a:	f7ef fc35 	bl	8000288 <__aeabi_dsub>
 8010a1e:	4622      	mov	r2, r4
 8010a20:	462b      	mov	r3, r5
 8010a22:	f7ef fc31 	bl	8000288 <__aeabi_dsub>
 8010a26:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010a32:	f7ef fc29 	bl	8000288 <__aeabi_dsub>
 8010a36:	f1bb 0f00 	cmp.w	fp, #0
 8010a3a:	4604      	mov	r4, r0
 8010a3c:	460d      	mov	r5, r1
 8010a3e:	f6bf aed6 	bge.w	80107ee <atan+0x3e>
 8010a42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a46:	461d      	mov	r5, r3
 8010a48:	e6d1      	b.n	80107ee <atan+0x3e>
 8010a4a:	a51d      	add	r5, pc, #116	; (adr r5, 8010ac0 <atan+0x310>)
 8010a4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010a50:	e6cd      	b.n	80107ee <atan+0x3e>
 8010a52:	bf00      	nop
 8010a54:	f3af 8000 	nop.w
 8010a58:	54442d18 	.word	0x54442d18
 8010a5c:	bff921fb 	.word	0xbff921fb
 8010a60:	8800759c 	.word	0x8800759c
 8010a64:	7e37e43c 	.word	0x7e37e43c
 8010a68:	e322da11 	.word	0xe322da11
 8010a6c:	3f90ad3a 	.word	0x3f90ad3a
 8010a70:	24760deb 	.word	0x24760deb
 8010a74:	3fa97b4b 	.word	0x3fa97b4b
 8010a78:	a0d03d51 	.word	0xa0d03d51
 8010a7c:	3fb10d66 	.word	0x3fb10d66
 8010a80:	c54c206e 	.word	0xc54c206e
 8010a84:	3fb745cd 	.word	0x3fb745cd
 8010a88:	920083ff 	.word	0x920083ff
 8010a8c:	3fc24924 	.word	0x3fc24924
 8010a90:	5555550d 	.word	0x5555550d
 8010a94:	3fd55555 	.word	0x3fd55555
 8010a98:	2c6a6c2f 	.word	0x2c6a6c2f
 8010a9c:	bfa2b444 	.word	0xbfa2b444
 8010aa0:	52defd9a 	.word	0x52defd9a
 8010aa4:	3fadde2d 	.word	0x3fadde2d
 8010aa8:	af749a6d 	.word	0xaf749a6d
 8010aac:	3fb3b0f2 	.word	0x3fb3b0f2
 8010ab0:	fe231671 	.word	0xfe231671
 8010ab4:	3fbc71c6 	.word	0x3fbc71c6
 8010ab8:	9998ebc4 	.word	0x9998ebc4
 8010abc:	3fc99999 	.word	0x3fc99999
 8010ac0:	54442d18 	.word	0x54442d18
 8010ac4:	3ff921fb 	.word	0x3ff921fb
 8010ac8:	440fffff 	.word	0x440fffff
 8010acc:	7ff00000 	.word	0x7ff00000
 8010ad0:	3fdbffff 	.word	0x3fdbffff
 8010ad4:	3ff00000 	.word	0x3ff00000
 8010ad8:	3ff2ffff 	.word	0x3ff2ffff
 8010adc:	40038000 	.word	0x40038000
 8010ae0:	3ff80000 	.word	0x3ff80000
 8010ae4:	bff00000 	.word	0xbff00000
 8010ae8:	08012508 	.word	0x08012508
 8010aec:	080124e8 	.word	0x080124e8

08010af0 <fabs>:
 8010af0:	ec51 0b10 	vmov	r0, r1, d0
 8010af4:	ee10 2a10 	vmov	r2, s0
 8010af8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010afc:	ec43 2b10 	vmov	d0, r2, r3
 8010b00:	4770      	bx	lr
 8010b02:	0000      	movs	r0, r0
 8010b04:	0000      	movs	r0, r0
	...

08010b08 <scalbn>:
 8010b08:	b570      	push	{r4, r5, r6, lr}
 8010b0a:	ec55 4b10 	vmov	r4, r5, d0
 8010b0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010b12:	4606      	mov	r6, r0
 8010b14:	462b      	mov	r3, r5
 8010b16:	b999      	cbnz	r1, 8010b40 <scalbn+0x38>
 8010b18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010b1c:	4323      	orrs	r3, r4
 8010b1e:	d03f      	beq.n	8010ba0 <scalbn+0x98>
 8010b20:	4b35      	ldr	r3, [pc, #212]	; (8010bf8 <scalbn+0xf0>)
 8010b22:	4629      	mov	r1, r5
 8010b24:	ee10 0a10 	vmov	r0, s0
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f7ef fd65 	bl	80005f8 <__aeabi_dmul>
 8010b2e:	4b33      	ldr	r3, [pc, #204]	; (8010bfc <scalbn+0xf4>)
 8010b30:	429e      	cmp	r6, r3
 8010b32:	4604      	mov	r4, r0
 8010b34:	460d      	mov	r5, r1
 8010b36:	da10      	bge.n	8010b5a <scalbn+0x52>
 8010b38:	a327      	add	r3, pc, #156	; (adr r3, 8010bd8 <scalbn+0xd0>)
 8010b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b3e:	e01f      	b.n	8010b80 <scalbn+0x78>
 8010b40:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010b44:	4291      	cmp	r1, r2
 8010b46:	d10c      	bne.n	8010b62 <scalbn+0x5a>
 8010b48:	ee10 2a10 	vmov	r2, s0
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	4629      	mov	r1, r5
 8010b50:	f7ef fb9c 	bl	800028c <__adddf3>
 8010b54:	4604      	mov	r4, r0
 8010b56:	460d      	mov	r5, r1
 8010b58:	e022      	b.n	8010ba0 <scalbn+0x98>
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010b60:	3936      	subs	r1, #54	; 0x36
 8010b62:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010b66:	4296      	cmp	r6, r2
 8010b68:	dd0d      	ble.n	8010b86 <scalbn+0x7e>
 8010b6a:	2d00      	cmp	r5, #0
 8010b6c:	a11c      	add	r1, pc, #112	; (adr r1, 8010be0 <scalbn+0xd8>)
 8010b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b72:	da02      	bge.n	8010b7a <scalbn+0x72>
 8010b74:	a11c      	add	r1, pc, #112	; (adr r1, 8010be8 <scalbn+0xe0>)
 8010b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b7a:	a319      	add	r3, pc, #100	; (adr r3, 8010be0 <scalbn+0xd8>)
 8010b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b80:	f7ef fd3a 	bl	80005f8 <__aeabi_dmul>
 8010b84:	e7e6      	b.n	8010b54 <scalbn+0x4c>
 8010b86:	1872      	adds	r2, r6, r1
 8010b88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010b8c:	428a      	cmp	r2, r1
 8010b8e:	dcec      	bgt.n	8010b6a <scalbn+0x62>
 8010b90:	2a00      	cmp	r2, #0
 8010b92:	dd08      	ble.n	8010ba6 <scalbn+0x9e>
 8010b94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010b98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010b9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010ba0:	ec45 4b10 	vmov	d0, r4, r5
 8010ba4:	bd70      	pop	{r4, r5, r6, pc}
 8010ba6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010baa:	da08      	bge.n	8010bbe <scalbn+0xb6>
 8010bac:	2d00      	cmp	r5, #0
 8010bae:	a10a      	add	r1, pc, #40	; (adr r1, 8010bd8 <scalbn+0xd0>)
 8010bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bb4:	dac0      	bge.n	8010b38 <scalbn+0x30>
 8010bb6:	a10e      	add	r1, pc, #56	; (adr r1, 8010bf0 <scalbn+0xe8>)
 8010bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bbc:	e7bc      	b.n	8010b38 <scalbn+0x30>
 8010bbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010bc2:	3236      	adds	r2, #54	; 0x36
 8010bc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010bc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010bcc:	4620      	mov	r0, r4
 8010bce:	4b0c      	ldr	r3, [pc, #48]	; (8010c00 <scalbn+0xf8>)
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	e7d5      	b.n	8010b80 <scalbn+0x78>
 8010bd4:	f3af 8000 	nop.w
 8010bd8:	c2f8f359 	.word	0xc2f8f359
 8010bdc:	01a56e1f 	.word	0x01a56e1f
 8010be0:	8800759c 	.word	0x8800759c
 8010be4:	7e37e43c 	.word	0x7e37e43c
 8010be8:	8800759c 	.word	0x8800759c
 8010bec:	fe37e43c 	.word	0xfe37e43c
 8010bf0:	c2f8f359 	.word	0xc2f8f359
 8010bf4:	81a56e1f 	.word	0x81a56e1f
 8010bf8:	43500000 	.word	0x43500000
 8010bfc:	ffff3cb0 	.word	0xffff3cb0
 8010c00:	3c900000 	.word	0x3c900000

08010c04 <with_errno>:
 8010c04:	b570      	push	{r4, r5, r6, lr}
 8010c06:	4604      	mov	r4, r0
 8010c08:	460d      	mov	r5, r1
 8010c0a:	4616      	mov	r6, r2
 8010c0c:	f7fa fd0a 	bl	800b624 <__errno>
 8010c10:	4629      	mov	r1, r5
 8010c12:	6006      	str	r6, [r0, #0]
 8010c14:	4620      	mov	r0, r4
 8010c16:	bd70      	pop	{r4, r5, r6, pc}

08010c18 <xflow>:
 8010c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c1a:	4614      	mov	r4, r2
 8010c1c:	461d      	mov	r5, r3
 8010c1e:	b108      	cbz	r0, 8010c24 <xflow+0xc>
 8010c20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010c24:	e9cd 2300 	strd	r2, r3, [sp]
 8010c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	4629      	mov	r1, r5
 8010c30:	f7ef fce2 	bl	80005f8 <__aeabi_dmul>
 8010c34:	2222      	movs	r2, #34	; 0x22
 8010c36:	b003      	add	sp, #12
 8010c38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c3c:	f7ff bfe2 	b.w	8010c04 <with_errno>

08010c40 <__math_uflow>:
 8010c40:	b508      	push	{r3, lr}
 8010c42:	2200      	movs	r2, #0
 8010c44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010c48:	f7ff ffe6 	bl	8010c18 <xflow>
 8010c4c:	ec41 0b10 	vmov	d0, r0, r1
 8010c50:	bd08      	pop	{r3, pc}

08010c52 <__math_oflow>:
 8010c52:	b508      	push	{r3, lr}
 8010c54:	2200      	movs	r2, #0
 8010c56:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010c5a:	f7ff ffdd 	bl	8010c18 <xflow>
 8010c5e:	ec41 0b10 	vmov	d0, r0, r1
 8010c62:	bd08      	pop	{r3, pc}
 8010c64:	0000      	movs	r0, r0
	...

08010c68 <__kernel_rem_pio2>:
 8010c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6c:	ed2d 8b02 	vpush	{d8}
 8010c70:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010c74:	f112 0f14 	cmn.w	r2, #20
 8010c78:	9306      	str	r3, [sp, #24]
 8010c7a:	9104      	str	r1, [sp, #16]
 8010c7c:	4bc2      	ldr	r3, [pc, #776]	; (8010f88 <__kernel_rem_pio2+0x320>)
 8010c7e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010c80:	9009      	str	r0, [sp, #36]	; 0x24
 8010c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c86:	9300      	str	r3, [sp, #0]
 8010c88:	9b06      	ldr	r3, [sp, #24]
 8010c8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c8e:	bfa8      	it	ge
 8010c90:	1ed4      	subge	r4, r2, #3
 8010c92:	9305      	str	r3, [sp, #20]
 8010c94:	bfb2      	itee	lt
 8010c96:	2400      	movlt	r4, #0
 8010c98:	2318      	movge	r3, #24
 8010c9a:	fb94 f4f3 	sdivge	r4, r4, r3
 8010c9e:	f06f 0317 	mvn.w	r3, #23
 8010ca2:	fb04 3303 	mla	r3, r4, r3, r3
 8010ca6:	eb03 0a02 	add.w	sl, r3, r2
 8010caa:	9b00      	ldr	r3, [sp, #0]
 8010cac:	9a05      	ldr	r2, [sp, #20]
 8010cae:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8010f78 <__kernel_rem_pio2+0x310>
 8010cb2:	eb03 0802 	add.w	r8, r3, r2
 8010cb6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010cb8:	1aa7      	subs	r7, r4, r2
 8010cba:	ae20      	add	r6, sp, #128	; 0x80
 8010cbc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010cc0:	2500      	movs	r5, #0
 8010cc2:	4545      	cmp	r5, r8
 8010cc4:	dd13      	ble.n	8010cee <__kernel_rem_pio2+0x86>
 8010cc6:	9b06      	ldr	r3, [sp, #24]
 8010cc8:	aa20      	add	r2, sp, #128	; 0x80
 8010cca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010cce:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010cd2:	f04f 0800 	mov.w	r8, #0
 8010cd6:	9b00      	ldr	r3, [sp, #0]
 8010cd8:	4598      	cmp	r8, r3
 8010cda:	dc31      	bgt.n	8010d40 <__kernel_rem_pio2+0xd8>
 8010cdc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8010f78 <__kernel_rem_pio2+0x310>
 8010ce0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010ce4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ce8:	462f      	mov	r7, r5
 8010cea:	2600      	movs	r6, #0
 8010cec:	e01b      	b.n	8010d26 <__kernel_rem_pio2+0xbe>
 8010cee:	42ef      	cmn	r7, r5
 8010cf0:	d407      	bmi.n	8010d02 <__kernel_rem_pio2+0x9a>
 8010cf2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010cf6:	f7ef fc15 	bl	8000524 <__aeabi_i2d>
 8010cfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010cfe:	3501      	adds	r5, #1
 8010d00:	e7df      	b.n	8010cc2 <__kernel_rem_pio2+0x5a>
 8010d02:	ec51 0b18 	vmov	r0, r1, d8
 8010d06:	e7f8      	b.n	8010cfa <__kernel_rem_pio2+0x92>
 8010d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010d10:	f7ef fc72 	bl	80005f8 <__aeabi_dmul>
 8010d14:	4602      	mov	r2, r0
 8010d16:	460b      	mov	r3, r1
 8010d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d1c:	f7ef fab6 	bl	800028c <__adddf3>
 8010d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d24:	3601      	adds	r6, #1
 8010d26:	9b05      	ldr	r3, [sp, #20]
 8010d28:	429e      	cmp	r6, r3
 8010d2a:	f1a7 0708 	sub.w	r7, r7, #8
 8010d2e:	ddeb      	ble.n	8010d08 <__kernel_rem_pio2+0xa0>
 8010d30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d34:	f108 0801 	add.w	r8, r8, #1
 8010d38:	ecab 7b02 	vstmia	fp!, {d7}
 8010d3c:	3508      	adds	r5, #8
 8010d3e:	e7ca      	b.n	8010cd6 <__kernel_rem_pio2+0x6e>
 8010d40:	9b00      	ldr	r3, [sp, #0]
 8010d42:	aa0c      	add	r2, sp, #48	; 0x30
 8010d44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d48:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d4a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010d4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010d50:	9c00      	ldr	r4, [sp, #0]
 8010d52:	930a      	str	r3, [sp, #40]	; 0x28
 8010d54:	00e3      	lsls	r3, r4, #3
 8010d56:	9308      	str	r3, [sp, #32]
 8010d58:	ab98      	add	r3, sp, #608	; 0x260
 8010d5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010d5e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010d62:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8010d66:	ab70      	add	r3, sp, #448	; 0x1c0
 8010d68:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010d6c:	46c3      	mov	fp, r8
 8010d6e:	46a1      	mov	r9, r4
 8010d70:	f1b9 0f00 	cmp.w	r9, #0
 8010d74:	f1a5 0508 	sub.w	r5, r5, #8
 8010d78:	dc77      	bgt.n	8010e6a <__kernel_rem_pio2+0x202>
 8010d7a:	ec47 6b10 	vmov	d0, r6, r7
 8010d7e:	4650      	mov	r0, sl
 8010d80:	f7ff fec2 	bl	8010b08 <scalbn>
 8010d84:	ec57 6b10 	vmov	r6, r7, d0
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010d8e:	ee10 0a10 	vmov	r0, s0
 8010d92:	4639      	mov	r1, r7
 8010d94:	f7ef fc30 	bl	80005f8 <__aeabi_dmul>
 8010d98:	ec41 0b10 	vmov	d0, r0, r1
 8010d9c:	f000 fab4 	bl	8011308 <floor>
 8010da0:	4b7a      	ldr	r3, [pc, #488]	; (8010f8c <__kernel_rem_pio2+0x324>)
 8010da2:	ec51 0b10 	vmov	r0, r1, d0
 8010da6:	2200      	movs	r2, #0
 8010da8:	f7ef fc26 	bl	80005f8 <__aeabi_dmul>
 8010dac:	4602      	mov	r2, r0
 8010dae:	460b      	mov	r3, r1
 8010db0:	4630      	mov	r0, r6
 8010db2:	4639      	mov	r1, r7
 8010db4:	f7ef fa68 	bl	8000288 <__aeabi_dsub>
 8010db8:	460f      	mov	r7, r1
 8010dba:	4606      	mov	r6, r0
 8010dbc:	f7ef fecc 	bl	8000b58 <__aeabi_d2iz>
 8010dc0:	9002      	str	r0, [sp, #8]
 8010dc2:	f7ef fbaf 	bl	8000524 <__aeabi_i2d>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	460b      	mov	r3, r1
 8010dca:	4630      	mov	r0, r6
 8010dcc:	4639      	mov	r1, r7
 8010dce:	f7ef fa5b 	bl	8000288 <__aeabi_dsub>
 8010dd2:	f1ba 0f00 	cmp.w	sl, #0
 8010dd6:	4606      	mov	r6, r0
 8010dd8:	460f      	mov	r7, r1
 8010dda:	dd6d      	ble.n	8010eb8 <__kernel_rem_pio2+0x250>
 8010ddc:	1e61      	subs	r1, r4, #1
 8010dde:	ab0c      	add	r3, sp, #48	; 0x30
 8010de0:	9d02      	ldr	r5, [sp, #8]
 8010de2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010de6:	f1ca 0018 	rsb	r0, sl, #24
 8010dea:	fa43 f200 	asr.w	r2, r3, r0
 8010dee:	4415      	add	r5, r2
 8010df0:	4082      	lsls	r2, r0
 8010df2:	1a9b      	subs	r3, r3, r2
 8010df4:	aa0c      	add	r2, sp, #48	; 0x30
 8010df6:	9502      	str	r5, [sp, #8]
 8010df8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010dfc:	f1ca 0217 	rsb	r2, sl, #23
 8010e00:	fa43 fb02 	asr.w	fp, r3, r2
 8010e04:	f1bb 0f00 	cmp.w	fp, #0
 8010e08:	dd65      	ble.n	8010ed6 <__kernel_rem_pio2+0x26e>
 8010e0a:	9b02      	ldr	r3, [sp, #8]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	3301      	adds	r3, #1
 8010e10:	9302      	str	r3, [sp, #8]
 8010e12:	4615      	mov	r5, r2
 8010e14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010e18:	4294      	cmp	r4, r2
 8010e1a:	f300 809f 	bgt.w	8010f5c <__kernel_rem_pio2+0x2f4>
 8010e1e:	f1ba 0f00 	cmp.w	sl, #0
 8010e22:	dd07      	ble.n	8010e34 <__kernel_rem_pio2+0x1cc>
 8010e24:	f1ba 0f01 	cmp.w	sl, #1
 8010e28:	f000 80c1 	beq.w	8010fae <__kernel_rem_pio2+0x346>
 8010e2c:	f1ba 0f02 	cmp.w	sl, #2
 8010e30:	f000 80c7 	beq.w	8010fc2 <__kernel_rem_pio2+0x35a>
 8010e34:	f1bb 0f02 	cmp.w	fp, #2
 8010e38:	d14d      	bne.n	8010ed6 <__kernel_rem_pio2+0x26e>
 8010e3a:	4632      	mov	r2, r6
 8010e3c:	463b      	mov	r3, r7
 8010e3e:	4954      	ldr	r1, [pc, #336]	; (8010f90 <__kernel_rem_pio2+0x328>)
 8010e40:	2000      	movs	r0, #0
 8010e42:	f7ef fa21 	bl	8000288 <__aeabi_dsub>
 8010e46:	4606      	mov	r6, r0
 8010e48:	460f      	mov	r7, r1
 8010e4a:	2d00      	cmp	r5, #0
 8010e4c:	d043      	beq.n	8010ed6 <__kernel_rem_pio2+0x26e>
 8010e4e:	4650      	mov	r0, sl
 8010e50:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8010f80 <__kernel_rem_pio2+0x318>
 8010e54:	f7ff fe58 	bl	8010b08 <scalbn>
 8010e58:	4630      	mov	r0, r6
 8010e5a:	4639      	mov	r1, r7
 8010e5c:	ec53 2b10 	vmov	r2, r3, d0
 8010e60:	f7ef fa12 	bl	8000288 <__aeabi_dsub>
 8010e64:	4606      	mov	r6, r0
 8010e66:	460f      	mov	r7, r1
 8010e68:	e035      	b.n	8010ed6 <__kernel_rem_pio2+0x26e>
 8010e6a:	4b4a      	ldr	r3, [pc, #296]	; (8010f94 <__kernel_rem_pio2+0x32c>)
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	4630      	mov	r0, r6
 8010e70:	4639      	mov	r1, r7
 8010e72:	f7ef fbc1 	bl	80005f8 <__aeabi_dmul>
 8010e76:	f7ef fe6f 	bl	8000b58 <__aeabi_d2iz>
 8010e7a:	f7ef fb53 	bl	8000524 <__aeabi_i2d>
 8010e7e:	4602      	mov	r2, r0
 8010e80:	460b      	mov	r3, r1
 8010e82:	ec43 2b18 	vmov	d8, r2, r3
 8010e86:	4b44      	ldr	r3, [pc, #272]	; (8010f98 <__kernel_rem_pio2+0x330>)
 8010e88:	2200      	movs	r2, #0
 8010e8a:	f7ef fbb5 	bl	80005f8 <__aeabi_dmul>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	460b      	mov	r3, r1
 8010e92:	4630      	mov	r0, r6
 8010e94:	4639      	mov	r1, r7
 8010e96:	f7ef f9f7 	bl	8000288 <__aeabi_dsub>
 8010e9a:	f7ef fe5d 	bl	8000b58 <__aeabi_d2iz>
 8010e9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010ea2:	f84b 0b04 	str.w	r0, [fp], #4
 8010ea6:	ec51 0b18 	vmov	r0, r1, d8
 8010eaa:	f7ef f9ef 	bl	800028c <__adddf3>
 8010eae:	f109 39ff 	add.w	r9, r9, #4294967295
 8010eb2:	4606      	mov	r6, r0
 8010eb4:	460f      	mov	r7, r1
 8010eb6:	e75b      	b.n	8010d70 <__kernel_rem_pio2+0x108>
 8010eb8:	d106      	bne.n	8010ec8 <__kernel_rem_pio2+0x260>
 8010eba:	1e63      	subs	r3, r4, #1
 8010ebc:	aa0c      	add	r2, sp, #48	; 0x30
 8010ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ec2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8010ec6:	e79d      	b.n	8010e04 <__kernel_rem_pio2+0x19c>
 8010ec8:	4b34      	ldr	r3, [pc, #208]	; (8010f9c <__kernel_rem_pio2+0x334>)
 8010eca:	2200      	movs	r2, #0
 8010ecc:	f7ef fe1a 	bl	8000b04 <__aeabi_dcmpge>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	d140      	bne.n	8010f56 <__kernel_rem_pio2+0x2ee>
 8010ed4:	4683      	mov	fp, r0
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	2300      	movs	r3, #0
 8010eda:	4630      	mov	r0, r6
 8010edc:	4639      	mov	r1, r7
 8010ede:	f7ef fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ee2:	2800      	cmp	r0, #0
 8010ee4:	f000 80c1 	beq.w	801106a <__kernel_rem_pio2+0x402>
 8010ee8:	1e65      	subs	r5, r4, #1
 8010eea:	462b      	mov	r3, r5
 8010eec:	2200      	movs	r2, #0
 8010eee:	9900      	ldr	r1, [sp, #0]
 8010ef0:	428b      	cmp	r3, r1
 8010ef2:	da6d      	bge.n	8010fd0 <__kernel_rem_pio2+0x368>
 8010ef4:	2a00      	cmp	r2, #0
 8010ef6:	f000 808a 	beq.w	801100e <__kernel_rem_pio2+0x3a6>
 8010efa:	ab0c      	add	r3, sp, #48	; 0x30
 8010efc:	f1aa 0a18 	sub.w	sl, sl, #24
 8010f00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	f000 80ae 	beq.w	8011066 <__kernel_rem_pio2+0x3fe>
 8010f0a:	4650      	mov	r0, sl
 8010f0c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8010f80 <__kernel_rem_pio2+0x318>
 8010f10:	f7ff fdfa 	bl	8010b08 <scalbn>
 8010f14:	1c6b      	adds	r3, r5, #1
 8010f16:	00da      	lsls	r2, r3, #3
 8010f18:	9205      	str	r2, [sp, #20]
 8010f1a:	ec57 6b10 	vmov	r6, r7, d0
 8010f1e:	aa70      	add	r2, sp, #448	; 0x1c0
 8010f20:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8010f94 <__kernel_rem_pio2+0x32c>
 8010f24:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8010f28:	462c      	mov	r4, r5
 8010f2a:	f04f 0800 	mov.w	r8, #0
 8010f2e:	2c00      	cmp	r4, #0
 8010f30:	f280 80d4 	bge.w	80110dc <__kernel_rem_pio2+0x474>
 8010f34:	462c      	mov	r4, r5
 8010f36:	2c00      	cmp	r4, #0
 8010f38:	f2c0 8102 	blt.w	8011140 <__kernel_rem_pio2+0x4d8>
 8010f3c:	4b18      	ldr	r3, [pc, #96]	; (8010fa0 <__kernel_rem_pio2+0x338>)
 8010f3e:	461e      	mov	r6, r3
 8010f40:	ab70      	add	r3, sp, #448	; 0x1c0
 8010f42:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8010f46:	1b2b      	subs	r3, r5, r4
 8010f48:	f04f 0900 	mov.w	r9, #0
 8010f4c:	f04f 0a00 	mov.w	sl, #0
 8010f50:	2700      	movs	r7, #0
 8010f52:	9306      	str	r3, [sp, #24]
 8010f54:	e0e6      	b.n	8011124 <__kernel_rem_pio2+0x4bc>
 8010f56:	f04f 0b02 	mov.w	fp, #2
 8010f5a:	e756      	b.n	8010e0a <__kernel_rem_pio2+0x1a2>
 8010f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8010f60:	bb05      	cbnz	r5, 8010fa4 <__kernel_rem_pio2+0x33c>
 8010f62:	b123      	cbz	r3, 8010f6e <__kernel_rem_pio2+0x306>
 8010f64:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010f68:	f8c8 3000 	str.w	r3, [r8]
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	3201      	adds	r2, #1
 8010f70:	f108 0804 	add.w	r8, r8, #4
 8010f74:	461d      	mov	r5, r3
 8010f76:	e74f      	b.n	8010e18 <__kernel_rem_pio2+0x1b0>
	...
 8010f84:	3ff00000 	.word	0x3ff00000
 8010f88:	08012568 	.word	0x08012568
 8010f8c:	40200000 	.word	0x40200000
 8010f90:	3ff00000 	.word	0x3ff00000
 8010f94:	3e700000 	.word	0x3e700000
 8010f98:	41700000 	.word	0x41700000
 8010f9c:	3fe00000 	.word	0x3fe00000
 8010fa0:	08012528 	.word	0x08012528
 8010fa4:	1acb      	subs	r3, r1, r3
 8010fa6:	f8c8 3000 	str.w	r3, [r8]
 8010faa:	462b      	mov	r3, r5
 8010fac:	e7df      	b.n	8010f6e <__kernel_rem_pio2+0x306>
 8010fae:	1e62      	subs	r2, r4, #1
 8010fb0:	ab0c      	add	r3, sp, #48	; 0x30
 8010fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010fba:	a90c      	add	r1, sp, #48	; 0x30
 8010fbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010fc0:	e738      	b.n	8010e34 <__kernel_rem_pio2+0x1cc>
 8010fc2:	1e62      	subs	r2, r4, #1
 8010fc4:	ab0c      	add	r3, sp, #48	; 0x30
 8010fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010fce:	e7f4      	b.n	8010fba <__kernel_rem_pio2+0x352>
 8010fd0:	a90c      	add	r1, sp, #48	; 0x30
 8010fd2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010fd6:	3b01      	subs	r3, #1
 8010fd8:	430a      	orrs	r2, r1
 8010fda:	e788      	b.n	8010eee <__kernel_rem_pio2+0x286>
 8010fdc:	3301      	adds	r3, #1
 8010fde:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010fe2:	2900      	cmp	r1, #0
 8010fe4:	d0fa      	beq.n	8010fdc <__kernel_rem_pio2+0x374>
 8010fe6:	9a08      	ldr	r2, [sp, #32]
 8010fe8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8010fec:	446a      	add	r2, sp
 8010fee:	3a98      	subs	r2, #152	; 0x98
 8010ff0:	9208      	str	r2, [sp, #32]
 8010ff2:	9a06      	ldr	r2, [sp, #24]
 8010ff4:	a920      	add	r1, sp, #128	; 0x80
 8010ff6:	18a2      	adds	r2, r4, r2
 8010ff8:	18e3      	adds	r3, r4, r3
 8010ffa:	f104 0801 	add.w	r8, r4, #1
 8010ffe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8011002:	9302      	str	r3, [sp, #8]
 8011004:	9b02      	ldr	r3, [sp, #8]
 8011006:	4543      	cmp	r3, r8
 8011008:	da04      	bge.n	8011014 <__kernel_rem_pio2+0x3ac>
 801100a:	461c      	mov	r4, r3
 801100c:	e6a2      	b.n	8010d54 <__kernel_rem_pio2+0xec>
 801100e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011010:	2301      	movs	r3, #1
 8011012:	e7e4      	b.n	8010fde <__kernel_rem_pio2+0x376>
 8011014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011016:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801101a:	f7ef fa83 	bl	8000524 <__aeabi_i2d>
 801101e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011024:	46ab      	mov	fp, r5
 8011026:	461c      	mov	r4, r3
 8011028:	f04f 0900 	mov.w	r9, #0
 801102c:	2600      	movs	r6, #0
 801102e:	2700      	movs	r7, #0
 8011030:	9b05      	ldr	r3, [sp, #20]
 8011032:	4599      	cmp	r9, r3
 8011034:	dd06      	ble.n	8011044 <__kernel_rem_pio2+0x3dc>
 8011036:	9b08      	ldr	r3, [sp, #32]
 8011038:	e8e3 6702 	strd	r6, r7, [r3], #8
 801103c:	f108 0801 	add.w	r8, r8, #1
 8011040:	9308      	str	r3, [sp, #32]
 8011042:	e7df      	b.n	8011004 <__kernel_rem_pio2+0x39c>
 8011044:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011048:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801104c:	f7ef fad4 	bl	80005f8 <__aeabi_dmul>
 8011050:	4602      	mov	r2, r0
 8011052:	460b      	mov	r3, r1
 8011054:	4630      	mov	r0, r6
 8011056:	4639      	mov	r1, r7
 8011058:	f7ef f918 	bl	800028c <__adddf3>
 801105c:	f109 0901 	add.w	r9, r9, #1
 8011060:	4606      	mov	r6, r0
 8011062:	460f      	mov	r7, r1
 8011064:	e7e4      	b.n	8011030 <__kernel_rem_pio2+0x3c8>
 8011066:	3d01      	subs	r5, #1
 8011068:	e747      	b.n	8010efa <__kernel_rem_pio2+0x292>
 801106a:	ec47 6b10 	vmov	d0, r6, r7
 801106e:	f1ca 0000 	rsb	r0, sl, #0
 8011072:	f7ff fd49 	bl	8010b08 <scalbn>
 8011076:	ec57 6b10 	vmov	r6, r7, d0
 801107a:	4ba0      	ldr	r3, [pc, #640]	; (80112fc <__kernel_rem_pio2+0x694>)
 801107c:	ee10 0a10 	vmov	r0, s0
 8011080:	2200      	movs	r2, #0
 8011082:	4639      	mov	r1, r7
 8011084:	f7ef fd3e 	bl	8000b04 <__aeabi_dcmpge>
 8011088:	b1f8      	cbz	r0, 80110ca <__kernel_rem_pio2+0x462>
 801108a:	4b9d      	ldr	r3, [pc, #628]	; (8011300 <__kernel_rem_pio2+0x698>)
 801108c:	2200      	movs	r2, #0
 801108e:	4630      	mov	r0, r6
 8011090:	4639      	mov	r1, r7
 8011092:	f7ef fab1 	bl	80005f8 <__aeabi_dmul>
 8011096:	f7ef fd5f 	bl	8000b58 <__aeabi_d2iz>
 801109a:	4680      	mov	r8, r0
 801109c:	f7ef fa42 	bl	8000524 <__aeabi_i2d>
 80110a0:	4b96      	ldr	r3, [pc, #600]	; (80112fc <__kernel_rem_pio2+0x694>)
 80110a2:	2200      	movs	r2, #0
 80110a4:	f7ef faa8 	bl	80005f8 <__aeabi_dmul>
 80110a8:	460b      	mov	r3, r1
 80110aa:	4602      	mov	r2, r0
 80110ac:	4639      	mov	r1, r7
 80110ae:	4630      	mov	r0, r6
 80110b0:	f7ef f8ea 	bl	8000288 <__aeabi_dsub>
 80110b4:	f7ef fd50 	bl	8000b58 <__aeabi_d2iz>
 80110b8:	1c65      	adds	r5, r4, #1
 80110ba:	ab0c      	add	r3, sp, #48	; 0x30
 80110bc:	f10a 0a18 	add.w	sl, sl, #24
 80110c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80110c4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80110c8:	e71f      	b.n	8010f0a <__kernel_rem_pio2+0x2a2>
 80110ca:	4630      	mov	r0, r6
 80110cc:	4639      	mov	r1, r7
 80110ce:	f7ef fd43 	bl	8000b58 <__aeabi_d2iz>
 80110d2:	ab0c      	add	r3, sp, #48	; 0x30
 80110d4:	4625      	mov	r5, r4
 80110d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80110da:	e716      	b.n	8010f0a <__kernel_rem_pio2+0x2a2>
 80110dc:	ab0c      	add	r3, sp, #48	; 0x30
 80110de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80110e2:	f7ef fa1f 	bl	8000524 <__aeabi_i2d>
 80110e6:	4632      	mov	r2, r6
 80110e8:	463b      	mov	r3, r7
 80110ea:	f7ef fa85 	bl	80005f8 <__aeabi_dmul>
 80110ee:	4642      	mov	r2, r8
 80110f0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80110f4:	464b      	mov	r3, r9
 80110f6:	4630      	mov	r0, r6
 80110f8:	4639      	mov	r1, r7
 80110fa:	f7ef fa7d 	bl	80005f8 <__aeabi_dmul>
 80110fe:	3c01      	subs	r4, #1
 8011100:	4606      	mov	r6, r0
 8011102:	460f      	mov	r7, r1
 8011104:	e713      	b.n	8010f2e <__kernel_rem_pio2+0x2c6>
 8011106:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801110a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801110e:	f7ef fa73 	bl	80005f8 <__aeabi_dmul>
 8011112:	4602      	mov	r2, r0
 8011114:	460b      	mov	r3, r1
 8011116:	4648      	mov	r0, r9
 8011118:	4651      	mov	r1, sl
 801111a:	f7ef f8b7 	bl	800028c <__adddf3>
 801111e:	3701      	adds	r7, #1
 8011120:	4681      	mov	r9, r0
 8011122:	468a      	mov	sl, r1
 8011124:	9b00      	ldr	r3, [sp, #0]
 8011126:	429f      	cmp	r7, r3
 8011128:	dc02      	bgt.n	8011130 <__kernel_rem_pio2+0x4c8>
 801112a:	9b06      	ldr	r3, [sp, #24]
 801112c:	429f      	cmp	r7, r3
 801112e:	ddea      	ble.n	8011106 <__kernel_rem_pio2+0x49e>
 8011130:	9a06      	ldr	r2, [sp, #24]
 8011132:	ab48      	add	r3, sp, #288	; 0x120
 8011134:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8011138:	e9c6 9a00 	strd	r9, sl, [r6]
 801113c:	3c01      	subs	r4, #1
 801113e:	e6fa      	b.n	8010f36 <__kernel_rem_pio2+0x2ce>
 8011140:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011142:	2b02      	cmp	r3, #2
 8011144:	dc0b      	bgt.n	801115e <__kernel_rem_pio2+0x4f6>
 8011146:	2b00      	cmp	r3, #0
 8011148:	dc39      	bgt.n	80111be <__kernel_rem_pio2+0x556>
 801114a:	d05d      	beq.n	8011208 <__kernel_rem_pio2+0x5a0>
 801114c:	9b02      	ldr	r3, [sp, #8]
 801114e:	f003 0007 	and.w	r0, r3, #7
 8011152:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011156:	ecbd 8b02 	vpop	{d8}
 801115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011160:	2b03      	cmp	r3, #3
 8011162:	d1f3      	bne.n	801114c <__kernel_rem_pio2+0x4e4>
 8011164:	9b05      	ldr	r3, [sp, #20]
 8011166:	9500      	str	r5, [sp, #0]
 8011168:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801116c:	eb0d 0403 	add.w	r4, sp, r3
 8011170:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8011174:	46a2      	mov	sl, r4
 8011176:	9b00      	ldr	r3, [sp, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	f1aa 0a08 	sub.w	sl, sl, #8
 801117e:	dc69      	bgt.n	8011254 <__kernel_rem_pio2+0x5ec>
 8011180:	46aa      	mov	sl, r5
 8011182:	f1ba 0f01 	cmp.w	sl, #1
 8011186:	f1a4 0408 	sub.w	r4, r4, #8
 801118a:	f300 8083 	bgt.w	8011294 <__kernel_rem_pio2+0x62c>
 801118e:	9c05      	ldr	r4, [sp, #20]
 8011190:	ab48      	add	r3, sp, #288	; 0x120
 8011192:	441c      	add	r4, r3
 8011194:	2000      	movs	r0, #0
 8011196:	2100      	movs	r1, #0
 8011198:	2d01      	cmp	r5, #1
 801119a:	f300 809a 	bgt.w	80112d2 <__kernel_rem_pio2+0x66a>
 801119e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80111a2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80111a6:	f1bb 0f00 	cmp.w	fp, #0
 80111aa:	f040 8098 	bne.w	80112de <__kernel_rem_pio2+0x676>
 80111ae:	9b04      	ldr	r3, [sp, #16]
 80111b0:	e9c3 7800 	strd	r7, r8, [r3]
 80111b4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80111b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80111bc:	e7c6      	b.n	801114c <__kernel_rem_pio2+0x4e4>
 80111be:	9e05      	ldr	r6, [sp, #20]
 80111c0:	ab48      	add	r3, sp, #288	; 0x120
 80111c2:	441e      	add	r6, r3
 80111c4:	462c      	mov	r4, r5
 80111c6:	2000      	movs	r0, #0
 80111c8:	2100      	movs	r1, #0
 80111ca:	2c00      	cmp	r4, #0
 80111cc:	da33      	bge.n	8011236 <__kernel_rem_pio2+0x5ce>
 80111ce:	f1bb 0f00 	cmp.w	fp, #0
 80111d2:	d036      	beq.n	8011242 <__kernel_rem_pio2+0x5da>
 80111d4:	4602      	mov	r2, r0
 80111d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111da:	9c04      	ldr	r4, [sp, #16]
 80111dc:	e9c4 2300 	strd	r2, r3, [r4]
 80111e0:	4602      	mov	r2, r0
 80111e2:	460b      	mov	r3, r1
 80111e4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80111e8:	f7ef f84e 	bl	8000288 <__aeabi_dsub>
 80111ec:	ae4a      	add	r6, sp, #296	; 0x128
 80111ee:	2401      	movs	r4, #1
 80111f0:	42a5      	cmp	r5, r4
 80111f2:	da29      	bge.n	8011248 <__kernel_rem_pio2+0x5e0>
 80111f4:	f1bb 0f00 	cmp.w	fp, #0
 80111f8:	d002      	beq.n	8011200 <__kernel_rem_pio2+0x598>
 80111fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111fe:	4619      	mov	r1, r3
 8011200:	9b04      	ldr	r3, [sp, #16]
 8011202:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011206:	e7a1      	b.n	801114c <__kernel_rem_pio2+0x4e4>
 8011208:	9c05      	ldr	r4, [sp, #20]
 801120a:	ab48      	add	r3, sp, #288	; 0x120
 801120c:	441c      	add	r4, r3
 801120e:	2000      	movs	r0, #0
 8011210:	2100      	movs	r1, #0
 8011212:	2d00      	cmp	r5, #0
 8011214:	da09      	bge.n	801122a <__kernel_rem_pio2+0x5c2>
 8011216:	f1bb 0f00 	cmp.w	fp, #0
 801121a:	d002      	beq.n	8011222 <__kernel_rem_pio2+0x5ba>
 801121c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011220:	4619      	mov	r1, r3
 8011222:	9b04      	ldr	r3, [sp, #16]
 8011224:	e9c3 0100 	strd	r0, r1, [r3]
 8011228:	e790      	b.n	801114c <__kernel_rem_pio2+0x4e4>
 801122a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801122e:	f7ef f82d 	bl	800028c <__adddf3>
 8011232:	3d01      	subs	r5, #1
 8011234:	e7ed      	b.n	8011212 <__kernel_rem_pio2+0x5aa>
 8011236:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801123a:	f7ef f827 	bl	800028c <__adddf3>
 801123e:	3c01      	subs	r4, #1
 8011240:	e7c3      	b.n	80111ca <__kernel_rem_pio2+0x562>
 8011242:	4602      	mov	r2, r0
 8011244:	460b      	mov	r3, r1
 8011246:	e7c8      	b.n	80111da <__kernel_rem_pio2+0x572>
 8011248:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801124c:	f7ef f81e 	bl	800028c <__adddf3>
 8011250:	3401      	adds	r4, #1
 8011252:	e7cd      	b.n	80111f0 <__kernel_rem_pio2+0x588>
 8011254:	e9da 8900 	ldrd	r8, r9, [sl]
 8011258:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801125c:	9b00      	ldr	r3, [sp, #0]
 801125e:	3b01      	subs	r3, #1
 8011260:	9300      	str	r3, [sp, #0]
 8011262:	4632      	mov	r2, r6
 8011264:	463b      	mov	r3, r7
 8011266:	4640      	mov	r0, r8
 8011268:	4649      	mov	r1, r9
 801126a:	f7ef f80f 	bl	800028c <__adddf3>
 801126e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011272:	4602      	mov	r2, r0
 8011274:	460b      	mov	r3, r1
 8011276:	4640      	mov	r0, r8
 8011278:	4649      	mov	r1, r9
 801127a:	f7ef f805 	bl	8000288 <__aeabi_dsub>
 801127e:	4632      	mov	r2, r6
 8011280:	463b      	mov	r3, r7
 8011282:	f7ef f803 	bl	800028c <__adddf3>
 8011286:	ed9d 7b06 	vldr	d7, [sp, #24]
 801128a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801128e:	ed8a 7b00 	vstr	d7, [sl]
 8011292:	e770      	b.n	8011176 <__kernel_rem_pio2+0x50e>
 8011294:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011298:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801129c:	4640      	mov	r0, r8
 801129e:	4632      	mov	r2, r6
 80112a0:	463b      	mov	r3, r7
 80112a2:	4649      	mov	r1, r9
 80112a4:	f7ee fff2 	bl	800028c <__adddf3>
 80112a8:	e9cd 0100 	strd	r0, r1, [sp]
 80112ac:	4602      	mov	r2, r0
 80112ae:	460b      	mov	r3, r1
 80112b0:	4640      	mov	r0, r8
 80112b2:	4649      	mov	r1, r9
 80112b4:	f7ee ffe8 	bl	8000288 <__aeabi_dsub>
 80112b8:	4632      	mov	r2, r6
 80112ba:	463b      	mov	r3, r7
 80112bc:	f7ee ffe6 	bl	800028c <__adddf3>
 80112c0:	ed9d 7b00 	vldr	d7, [sp]
 80112c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80112c8:	ed84 7b00 	vstr	d7, [r4]
 80112cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112d0:	e757      	b.n	8011182 <__kernel_rem_pio2+0x51a>
 80112d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80112d6:	f7ee ffd9 	bl	800028c <__adddf3>
 80112da:	3d01      	subs	r5, #1
 80112dc:	e75c      	b.n	8011198 <__kernel_rem_pio2+0x530>
 80112de:	9b04      	ldr	r3, [sp, #16]
 80112e0:	9a04      	ldr	r2, [sp, #16]
 80112e2:	601f      	str	r7, [r3, #0]
 80112e4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80112e8:	605c      	str	r4, [r3, #4]
 80112ea:	609d      	str	r5, [r3, #8]
 80112ec:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80112f0:	60d3      	str	r3, [r2, #12]
 80112f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112f6:	6110      	str	r0, [r2, #16]
 80112f8:	6153      	str	r3, [r2, #20]
 80112fa:	e727      	b.n	801114c <__kernel_rem_pio2+0x4e4>
 80112fc:	41700000 	.word	0x41700000
 8011300:	3e700000 	.word	0x3e700000
 8011304:	00000000 	.word	0x00000000

08011308 <floor>:
 8011308:	ec51 0b10 	vmov	r0, r1, d0
 801130c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011314:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8011318:	2e13      	cmp	r6, #19
 801131a:	ee10 5a10 	vmov	r5, s0
 801131e:	ee10 8a10 	vmov	r8, s0
 8011322:	460c      	mov	r4, r1
 8011324:	dc31      	bgt.n	801138a <floor+0x82>
 8011326:	2e00      	cmp	r6, #0
 8011328:	da14      	bge.n	8011354 <floor+0x4c>
 801132a:	a333      	add	r3, pc, #204	; (adr r3, 80113f8 <floor+0xf0>)
 801132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011330:	f7ee ffac 	bl	800028c <__adddf3>
 8011334:	2200      	movs	r2, #0
 8011336:	2300      	movs	r3, #0
 8011338:	f7ef fbee 	bl	8000b18 <__aeabi_dcmpgt>
 801133c:	b138      	cbz	r0, 801134e <floor+0x46>
 801133e:	2c00      	cmp	r4, #0
 8011340:	da53      	bge.n	80113ea <floor+0xe2>
 8011342:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011346:	4325      	orrs	r5, r4
 8011348:	d052      	beq.n	80113f0 <floor+0xe8>
 801134a:	4c2d      	ldr	r4, [pc, #180]	; (8011400 <floor+0xf8>)
 801134c:	2500      	movs	r5, #0
 801134e:	4621      	mov	r1, r4
 8011350:	4628      	mov	r0, r5
 8011352:	e024      	b.n	801139e <floor+0x96>
 8011354:	4f2b      	ldr	r7, [pc, #172]	; (8011404 <floor+0xfc>)
 8011356:	4137      	asrs	r7, r6
 8011358:	ea01 0307 	and.w	r3, r1, r7
 801135c:	4303      	orrs	r3, r0
 801135e:	d01e      	beq.n	801139e <floor+0x96>
 8011360:	a325      	add	r3, pc, #148	; (adr r3, 80113f8 <floor+0xf0>)
 8011362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011366:	f7ee ff91 	bl	800028c <__adddf3>
 801136a:	2200      	movs	r2, #0
 801136c:	2300      	movs	r3, #0
 801136e:	f7ef fbd3 	bl	8000b18 <__aeabi_dcmpgt>
 8011372:	2800      	cmp	r0, #0
 8011374:	d0eb      	beq.n	801134e <floor+0x46>
 8011376:	2c00      	cmp	r4, #0
 8011378:	bfbe      	ittt	lt
 801137a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801137e:	4133      	asrlt	r3, r6
 8011380:	18e4      	addlt	r4, r4, r3
 8011382:	ea24 0407 	bic.w	r4, r4, r7
 8011386:	2500      	movs	r5, #0
 8011388:	e7e1      	b.n	801134e <floor+0x46>
 801138a:	2e33      	cmp	r6, #51	; 0x33
 801138c:	dd0b      	ble.n	80113a6 <floor+0x9e>
 801138e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011392:	d104      	bne.n	801139e <floor+0x96>
 8011394:	ee10 2a10 	vmov	r2, s0
 8011398:	460b      	mov	r3, r1
 801139a:	f7ee ff77 	bl	800028c <__adddf3>
 801139e:	ec41 0b10 	vmov	d0, r0, r1
 80113a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113a6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80113aa:	f04f 37ff 	mov.w	r7, #4294967295
 80113ae:	40df      	lsrs	r7, r3
 80113b0:	4238      	tst	r0, r7
 80113b2:	d0f4      	beq.n	801139e <floor+0x96>
 80113b4:	a310      	add	r3, pc, #64	; (adr r3, 80113f8 <floor+0xf0>)
 80113b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ba:	f7ee ff67 	bl	800028c <__adddf3>
 80113be:	2200      	movs	r2, #0
 80113c0:	2300      	movs	r3, #0
 80113c2:	f7ef fba9 	bl	8000b18 <__aeabi_dcmpgt>
 80113c6:	2800      	cmp	r0, #0
 80113c8:	d0c1      	beq.n	801134e <floor+0x46>
 80113ca:	2c00      	cmp	r4, #0
 80113cc:	da0a      	bge.n	80113e4 <floor+0xdc>
 80113ce:	2e14      	cmp	r6, #20
 80113d0:	d101      	bne.n	80113d6 <floor+0xce>
 80113d2:	3401      	adds	r4, #1
 80113d4:	e006      	b.n	80113e4 <floor+0xdc>
 80113d6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80113da:	2301      	movs	r3, #1
 80113dc:	40b3      	lsls	r3, r6
 80113de:	441d      	add	r5, r3
 80113e0:	45a8      	cmp	r8, r5
 80113e2:	d8f6      	bhi.n	80113d2 <floor+0xca>
 80113e4:	ea25 0507 	bic.w	r5, r5, r7
 80113e8:	e7b1      	b.n	801134e <floor+0x46>
 80113ea:	2500      	movs	r5, #0
 80113ec:	462c      	mov	r4, r5
 80113ee:	e7ae      	b.n	801134e <floor+0x46>
 80113f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80113f4:	e7ab      	b.n	801134e <floor+0x46>
 80113f6:	bf00      	nop
 80113f8:	8800759c 	.word	0x8800759c
 80113fc:	7e37e43c 	.word	0x7e37e43c
 8011400:	bff00000 	.word	0xbff00000
 8011404:	000fffff 	.word	0x000fffff

08011408 <_init>:
 8011408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801140a:	bf00      	nop
 801140c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801140e:	bc08      	pop	{r3}
 8011410:	469e      	mov	lr, r3
 8011412:	4770      	bx	lr

08011414 <_fini>:
 8011414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011416:	bf00      	nop
 8011418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801141a:	bc08      	pop	{r3}
 801141c:	469e      	mov	lr, r3
 801141e:	4770      	bx	lr
