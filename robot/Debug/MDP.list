
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e518  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001118  0800e6a8  0800e6a8  0001e6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7c0  0800f7c0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7c0  0800f7c0  0001f7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7c8  0800f7c8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7c8  0800f7c8  0001f7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7cc  0800f7cc  0001f7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f7d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          0000082c  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a14  20000a14  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014d8b  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000335b  00000000  00000000  00034fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001368  00000000  00000000  00038348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f2f  00000000  00000000  000396b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000248fc  00000000  00000000  0003a5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001910d  00000000  00000000  0005eedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d30a2  00000000  00000000  00077fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a20  00000000  00000000  0014b08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00151aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e690 	.word	0x0800e690

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e690 	.word	0x0800e690

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_ICM20948_SelectUserBank>:

#include "ICM20948.h"

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	b2db      	uxtb	r3, r3
 800100a:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <_ICM20948_SelectUserBank+0x26>
 8001012:	2368      	movs	r3, #104	; 0x68
 8001014:	e000      	b.n	8001018 <_ICM20948_SelectUserBank+0x28>
 8001016:	2369      	movs	r3, #105	; 0x69
 8001018:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800101a:	7dbb      	ldrb	r3, [r7, #22]
 800101c:	b29b      	uxth	r3, r3
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b299      	uxth	r1, r3
 8001022:	230a      	movs	r3, #10
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2301      	movs	r3, #1
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 0315 	add.w	r3, r7, #21
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	227f      	movs	r2, #127	; 0x7f
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f003 fbc1 	bl	80047bc <HAL_I2C_Mem_Write>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4603      	mov	r3, r0
 8001058:	70fb      	strb	r3, [r7, #3]
 800105a:	460b      	mov	r3, r1
 800105c:	70bb      	strb	r3, [r7, #2]
 800105e:	4613      	mov	r3, r2
 8001060:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <_ICM20948_WriteByte+0x28>
 800106c:	2368      	movs	r3, #104	; 0x68
 800106e:	e000      	b.n	8001072 <_ICM20948_WriteByte+0x2a>
 8001070:	2369      	movs	r3, #105	; 0x69
 8001072:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	b29b      	uxth	r3, r3
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b299      	uxth	r1, r3
 800107c:	78bb      	ldrb	r3, [r7, #2]
 800107e:	b29a      	uxth	r2, r3
 8001080:	230a      	movs	r3, #10
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1c7b      	adds	r3, r7, #1
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f003 fb94 	bl	80047bc <HAL_I2C_Mem_Write>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b088      	sub	sp, #32
 80010a6:	af04      	add	r7, sp, #16
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	70fb      	strb	r3, [r7, #3]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70bb      	strb	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <_ICM20948_BrustRead+0x28>
 80010c6:	2368      	movs	r3, #104	; 0x68
 80010c8:	e000      	b.n	80010cc <_ICM20948_BrustRead+0x2a>
 80010ca:	2369      	movs	r3, #105	; 0x69
 80010cc:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b299      	uxth	r1, r3
 80010d6:	78bb      	ldrb	r3, [r7, #2]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	230a      	movs	r3, #10
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	883b      	ldrh	r3, [r7, #0]
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f003 fc61 	bl	80049b0 <HAL_I2C_Mem_Read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	b29a      	uxth	r2, r3
 8001114:	230a      	movs	r3, #10
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	1cbb      	adds	r3, r7, #2
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2118      	movs	r1, #24
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f003 fb49 	bl	80047bc <HAL_I2C_Mem_Write>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_AK09916_ReadByte>:

HAL_StatusTypeDef _AK09916_ReadByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t *readData) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af04      	add	r7, sp, #16
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	460b      	mov	r3, r1
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	b29a      	uxth	r2, r3
 800114e:	230a      	movs	r3, #10
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	2118      	movs	r1, #24
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f003 fc26 	bl	80049b0 <HAL_I2C_Mem_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001168:	7dfb      	ldrb	r3, [r7, #23]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_AK09916_BrustRead>:

HAL_StatusTypeDef _AK09916_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b08a      	sub	sp, #40	; 0x28
 8001176:	af04      	add	r7, sp, #16
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	72fb      	strb	r3, [r7, #11]
 8001180:	4613      	mov	r3, r2
 8001182:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	b29a      	uxth	r2, r3
 800118c:	230a      	movs	r3, #10
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	893b      	ldrh	r3, [r7, #8]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2118      	movs	r1, #24
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f003 fc07 	bl	80049b0 <HAL_I2C_Mem_Read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	70fb      	strb	r3, [r7, #3]
 80011c2:	460b      	mov	r3, r1
 80011c4:	70bb      	strb	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff0b 	bl	8000ff0 <_ICM20948_SelectUserBank>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 80011de:	78f9      	ldrb	r1, [r7, #3]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	2206      	movs	r2, #6
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff2f 	bl	8001048 <_ICM20948_WriteByte>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 80011ee:	20c8      	movs	r0, #200	; 0xc8
 80011f0:	f002 fe22 	bl	8003e38 <HAL_Delay>

	status = _ICM20948_WriteByte(
 80011f4:	78f9      	ldrb	r1, [r7, #3]
 80011f6:	2301      	movs	r3, #1
 80011f8:	2206      	movs	r2, #6
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff24 	bl	8001048 <_ICM20948_WriteByte>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8001204:	78f9      	ldrb	r1, [r7, #3]
 8001206:	2300      	movs	r3, #0
 8001208:	2207      	movs	r2, #7
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff1c 	bl	8001048 <_ICM20948_WriteByte>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2202      	movs	r2, #2
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fee8 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8001230:	b2db      	uxtb	r3, r3
 8001232:	78f9      	ldrb	r1, [r7, #3]
 8001234:	2201      	movs	r2, #1
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff06 	bl	8001048 <_ICM20948_WriteByte>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8001240:	78f9      	ldrb	r1, [r7, #3]
 8001242:	2304      	movs	r3, #4
 8001244:	2200      	movs	r2, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fefe 	bl	8001048 <_ICM20948_WriteByte>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			4 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	b25b      	sxtb	r3, r3
 8001256:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800125a:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800125c:	b2db      	uxtb	r3, r3
 800125e:	78f9      	ldrb	r1, [r7, #3]
 8001260:	2214      	movs	r2, #20
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fef0 	bl	8001048 <_ICM20948_WriteByte>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 800126c:	78f9      	ldrb	r1, [r7, #3]
 800126e:	2304      	movs	r3, #4
 8001270:	2211      	movs	r2, #17
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fee8 	bl	8001048 <_ICM20948_WriteByte>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff feb4 	bl	8000ff0 <_ICM20948_SelectUserBank>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800128c:	78f9      	ldrb	r1, [r7, #3]
 800128e:	2302      	movs	r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fed8 	bl	8001048 <_ICM20948_WriteByte>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 800129c:	2208      	movs	r2, #8
 800129e:	2131      	movs	r1, #49	; 0x31
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff2b 	bl	80010fc <_AK09916_WriteByte>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	0000      	movs	r0, r0
 80012b4:	0000      	movs	r0, r0
	...

080012b8 <ICM20948_readGyroscope_Z>:

void ICM20948_readGyroscope_Z(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float *gyroZ) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	72fb      	strb	r3, [r7, #11]
 80012c6:	4613      	mov	r3, r2
 80012c8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[2];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_ZOUT_H__REGISTER, 2, readData);
 80012ca:	7af9      	ldrb	r1, [r7, #11]
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2302      	movs	r3, #2
 80012d4:	2237      	movs	r2, #55	; 0x37
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff fee3 	bl	80010a2 <_ICM20948_BrustRead>

	int16_t reading = readData[0]<<8 | readData[1];
 80012dc:	7d3b      	ldrb	r3, [r7, #20]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	7d7b      	ldrb	r3, [r7, #21]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	82fb      	strh	r3, [r7, #22]
	*gyroZ = (float) -reading;
 80012ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012ee:	425b      	negs	r3, r3
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edc3 7a00 	vstr	s15, [r3]
	switch (selectGyroSensitivity) {
 80012fe:	7abb      	ldrb	r3, [r7, #10]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d849      	bhi.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <ICM20948_readGyroscope_Z+0x54>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001333 	.word	0x08001333
 8001314:	08001349 	.word	0x08001349
 8001318:	08001371 	.word	0x08001371
		case GYRO_FULL_SCALE_250DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	eddf 6a23 	vldr	s13, [pc, #140]	; 80013b0 <ICM20948_readGyroscope_Z+0xf8>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001330:	e032      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_500DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80013b4 <ICM20948_readGyroscope_Z+0xfc>
 800133c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001346:	e027      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_1000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8fb 	bl	8000548 <__aeabi_f2d>
 8001352:	a313      	add	r3, pc, #76	; (adr r3, 80013a0 <ICM20948_readGyroscope_Z+0xe8>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff fa78 	bl	800084c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc40 	bl	8000be8 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	601a      	str	r2, [r3, #0]
			break;
 800136e:	e013      	b.n	8001398 <ICM20948_readGyroscope_Z+0xe0>
		case GYRO_FULL_SCALE_2000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	a30b      	add	r3, pc, #44	; (adr r3, 80013a8 <ICM20948_readGyroscope_Z+0xf0>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fa64 	bl	800084c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc2c 	bl	8000be8 <__aeabi_d2f>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
			break;
 8001396:	bf00      	nop
	}

}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	66666666 	.word	0x66666666
 80013a4:	40406666 	.word	0x40406666
 80013a8:	66666666 	.word	0x66666666
 80013ac:	40306666 	.word	0x40306666
 80013b0:	43030000 	.word	0x43030000
 80013b4:	42830000 	.word	0x42830000

080013b8 <ICM20948_readAccelerometer_all>:

void ICM20948_readAccelerometer_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, float readings[3]) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af02      	add	r7, sp, #8
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	72fb      	strb	r3, [r7, #11]
 80013c6:	4613      	mov	r3, r2
 80013c8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 80013ca:	7af9      	ldrb	r1, [r7, #11]
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2306      	movs	r3, #6
 80013d4:	222d      	movs	r2, #45	; 0x2d
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff fe63 	bl	80010a2 <_ICM20948_BrustRead>


	int16_t rD[3];
	rD[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 80013dc:	7e3b      	ldrb	r3, [r7, #24]
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	7e7b      	ldrb	r3, [r7, #25]
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	823b      	strh	r3, [r7, #16]
	rD[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 80013ec:	7ebb      	ldrb	r3, [r7, #26]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	7efb      	ldrb	r3, [r7, #27]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	827b      	strh	r3, [r7, #18]
	rD[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 80013fc:	7f3b      	ldrb	r3, [r7, #28]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	7f7b      	ldrb	r3, [r7, #29]
 8001404:	b21b      	sxth	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b21b      	sxth	r3, r3
 800140a:	82bb      	strh	r3, [r7, #20]


	switch (selectAccelSensitivity) {
 800140c:	7abb      	ldrb	r3, [r7, #10]
 800140e:	2b03      	cmp	r3, #3
 8001410:	f200 80d2 	bhi.w	80015b8 <ICM20948_readAccelerometer_all+0x200>
 8001414:	a201      	add	r2, pc, #4	; (adr r2, 800141c <ICM20948_readAccelerometer_all+0x64>)
 8001416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141a:	bf00      	nop
 800141c:	0800142d 	.word	0x0800142d
 8001420:	08001493 	.word	0x08001493
 8001424:	080014f9 	.word	0x080014f9
 8001428:	08001559 	.word	0x08001559
		case ACCEL_FULL_SCALE_2G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800142c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	da02      	bge.n	800143a <ICM20948_readAccelerometer_all+0x82>
 8001434:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001438:	333f      	adds	r3, #63	; 0x3f
 800143a:	139b      	asrs	r3, r3, #14
 800143c:	b21b      	sxth	r3, r3
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800144c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001450:	2b00      	cmp	r3, #0
 8001452:	da02      	bge.n	800145a <ICM20948_readAccelerometer_all+0xa2>
 8001454:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001458:	333f      	adds	r3, #63	; 0x3f
 800145a:	139b      	asrs	r3, r3, #14
 800145c:	b21a      	sxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3304      	adds	r3, #4
 8001462:	ee07 2a90 	vmov	s15, r2
 8001466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146a:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800146e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001472:	2b00      	cmp	r3, #0
 8001474:	da02      	bge.n	800147c <ICM20948_readAccelerometer_all+0xc4>
 8001476:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800147a:	333f      	adds	r3, #63	; 0x3f
 800147c:	139b      	asrs	r3, r3, #14
 800147e:	b21a      	sxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3308      	adds	r3, #8
 8001484:	ee07 2a90 	vmov	s15, r2
 8001488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001490:	e092      	b.n	80015b8 <ICM20948_readAccelerometer_all+0x200>
		case ACCEL_FULL_SCALE_4G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8001492:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001496:	2b00      	cmp	r3, #0
 8001498:	da02      	bge.n	80014a0 <ICM20948_readAccelerometer_all+0xe8>
 800149a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800149e:	331f      	adds	r3, #31
 80014a0:	135b      	asrs	r3, r3, #13
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	da02      	bge.n	80014c0 <ICM20948_readAccelerometer_all+0x108>
 80014ba:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80014be:	331f      	adds	r3, #31
 80014c0:	135b      	asrs	r3, r3, #13
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3304      	adds	r3, #4
 80014c8:	ee07 2a90 	vmov	s15, r2
 80014cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d0:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 80014d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da02      	bge.n	80014e2 <ICM20948_readAccelerometer_all+0x12a>
 80014dc:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80014e0:	331f      	adds	r3, #31
 80014e2:	135b      	asrs	r3, r3, #13
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3308      	adds	r3, #8
 80014ea:	ee07 2a90 	vmov	s15, r2
 80014ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014f6:	e05f      	b.n	80015b8 <ICM20948_readAccelerometer_all+0x200>
		case ACCEL_FULL_SCALE_8G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 80014f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	da01      	bge.n	8001504 <ICM20948_readAccelerometer_all+0x14c>
 8001500:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001504:	131b      	asrs	r3, r3, #12
 8001506:	b21b      	sxth	r3, r3
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8001516:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800151a:	2b00      	cmp	r3, #0
 800151c:	da01      	bge.n	8001522 <ICM20948_readAccelerometer_all+0x16a>
 800151e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001522:	131b      	asrs	r3, r3, #12
 8001524:	b21a      	sxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3304      	adds	r3, #4
 800152a:	ee07 2a90 	vmov	s15, r2
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8001536:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	da01      	bge.n	8001542 <ICM20948_readAccelerometer_all+0x18a>
 800153e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001542:	131b      	asrs	r3, r3, #12
 8001544:	b21a      	sxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3308      	adds	r3, #8
 800154a:	ee07 2a90 	vmov	s15, r2
 800154e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001552:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001556:	e02f      	b.n	80015b8 <ICM20948_readAccelerometer_all+0x200>
		case ACCEL_FULL_SCALE_16G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8001558:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	da01      	bge.n	8001564 <ICM20948_readAccelerometer_all+0x1ac>
 8001560:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001564:	12db      	asrs	r3, r3, #11
 8001566:	b21b      	sxth	r3, r3
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8001576:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800157a:	2b00      	cmp	r3, #0
 800157c:	da01      	bge.n	8001582 <ICM20948_readAccelerometer_all+0x1ca>
 800157e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001582:	12db      	asrs	r3, r3, #11
 8001584:	b21a      	sxth	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3304      	adds	r3, #4
 800158a:	ee07 2a90 	vmov	s15, r2
 800158e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001592:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8001596:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	da01      	bge.n	80015a2 <ICM20948_readAccelerometer_all+0x1ea>
 800159e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80015a2:	12db      	asrs	r3, r3, #11
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3308      	adds	r3, #8
 80015aa:	ee07 2a90 	vmov	s15, r2
 80015ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80015b6:	bf00      	nop
	}
}
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <ICM20948_readMagnetometer_XY>:

void ICM20948_readMagnetometer_XY(I2C_HandleTypeDef * hi2c, float magXY[2]) {
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	uint8_t readData[4];
	_AK09916_BrustRead(hi2c, AK09916__XOUT_L__REGISTER, 4, readData);
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	2204      	movs	r2, #4
 80015d0:	2111      	movs	r1, #17
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fdcd 	bl	8001172 <_AK09916_BrustRead>

	//read status register to mark end of data read.
	uint8_t st2;
	_AK09916_ReadByte(hi2c, AK09916__ST2__REGISTER, &st2);
 80015d8:	f107 030f 	add.w	r3, r7, #15
 80015dc:	461a      	mov	r2, r3
 80015de:	2118      	movs	r1, #24
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fda9 	bl	8001138 <_AK09916_ReadByte>
	int16_t reading;
	for (uint8_t i = 0; i < 2; i++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]
 80015ea:	e02a      	b.n	8001642 <ICM20948_readMagnetometer_XY+0x82>
		reading = readData[1+2*i]<<8|readData[2*i];
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	3301      	adds	r3, #1
 80015f2:	3318      	adds	r3, #24
 80015f4:	443b      	add	r3, r7
 80015f6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	3318      	adds	r3, #24
 8001604:	443b      	add	r3, r7
 8001606:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	82bb      	strh	r3, [r7, #20]
		magXY[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
 8001610:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff85 	bl	8000524 <__aeabi_i2d>
 800161a:	a30f      	add	r3, pc, #60	; (adr r3, 8001658 <ICM20948_readMagnetometer_XY+0x98>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7fe ffea 	bl	80005f8 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	18d4      	adds	r4, r2, r3
 8001634:	f7ff fad8 	bl	8000be8 <__aeabi_d2f>
 8001638:	4603      	mov	r3, r0
 800163a:	6023      	str	r3, [r4, #0]
	for (uint8_t i = 0; i < 2; i++) {
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	3301      	adds	r3, #1
 8001640:	75fb      	strb	r3, [r7, #23]
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d9d1      	bls.n	80015ec <ICM20948_readMagnetometer_XY+0x2c>
	}
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	33333333 	.word	0x33333333
 800165c:	3fc33333 	.word	0x3fc33333

08001660 <get_new_cmd>:
#include "commands.h"

static Command *cur = NULL;

static Command *get_new_cmd() {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	Command *new = (Command *) malloc(sizeof(Command));
 8001666:	2014      	movs	r0, #20
 8001668:	f006 fe06 	bl	8008278 <malloc>
 800166c:	4603      	mov	r3, r0
 800166e:	607b      	str	r3, [r7, #4]
	new->dir = 0;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
	new->speed = 0;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	705a      	strb	r2, [r3, #1]
	new->steeringAngle = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
	new->dist = 0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
	new->distType = TARGET;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	721a      	strb	r2, [r3, #8]
	new->next = NULL;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]

	return new;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <commands_process>:

void commands_process(uint8_t *buf, uint8_t size) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
	Command *next = get_new_cmd();
 80016b0:	f7ff ffd6 	bl	8001660 <get_new_cmd>
 80016b4:	60f8      	str	r0, [r7, #12]

	uint8_t c = *buf;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	72fb      	strb	r3, [r7, #11]

	//first byte: command flag
	switch (c) {
 80016bc:	7afb      	ldrb	r3, [r7, #11]
 80016be:	3b53      	subs	r3, #83	; 0x53
 80016c0:	2b24      	cmp	r3, #36	; 0x24
 80016c2:	f200 80b0 	bhi.w	8001826 <commands_process+0x182>
 80016c6:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <commands_process+0x28>)
 80016c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016cc:	08001761 	.word	0x08001761
 80016d0:	08001769 	.word	0x08001769
 80016d4:	08001827 	.word	0x08001827
 80016d8:	08001827 	.word	0x08001827
 80016dc:	08001777 	.word	0x08001777
 80016e0:	08001827 	.word	0x08001827
 80016e4:	08001827 	.word	0x08001827
 80016e8:	08001827 	.word	0x08001827
 80016ec:	08001827 	.word	0x08001827
 80016f0:	08001827 	.word	0x08001827
 80016f4:	08001827 	.word	0x08001827
 80016f8:	08001827 	.word	0x08001827
 80016fc:	08001827 	.word	0x08001827
 8001700:	08001827 	.word	0x08001827
 8001704:	08001827 	.word	0x08001827
 8001708:	08001827 	.word	0x08001827
 800170c:	08001827 	.word	0x08001827
 8001710:	08001827 	.word	0x08001827
 8001714:	08001827 	.word	0x08001827
 8001718:	08001827 	.word	0x08001827
 800171c:	08001827 	.word	0x08001827
 8001720:	08001827 	.word	0x08001827
 8001724:	08001827 	.word	0x08001827
 8001728:	08001827 	.word	0x08001827
 800172c:	08001827 	.word	0x08001827
 8001730:	08001827 	.word	0x08001827
 8001734:	08001827 	.word	0x08001827
 8001738:	08001827 	.word	0x08001827
 800173c:	08001827 	.word	0x08001827
 8001740:	08001827 	.word	0x08001827
 8001744:	08001827 	.word	0x08001827
 8001748:	08001827 	.word	0x08001827
 800174c:	08001827 	.word	0x08001827
 8001750:	08001785 	.word	0x08001785
 8001754:	08001827 	.word	0x08001827
 8001758:	08001827 	.word	0x08001827
 800175c:	08001793 	.word	0x08001793
		case CMD_FULL_STOP:
			next->dir = 0;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
			break;
 8001766:	e01b      	b.n	80017a0 <commands_process+0xfc>

		case CMD_FORWARD_DIST_TARGET:
			next->dir = 1;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]
			next->distType = TARGET;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	721a      	strb	r2, [r3, #8]
			break;
 8001774:	e014      	b.n	80017a0 <commands_process+0xfc>

		case CMD_FORWARD_DIST_WITHIN:
			next->dir = 1;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
			next->distType = STOP_WITHIN;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	721a      	strb	r2, [r3, #8]
			break;
 8001782:	e00d      	b.n	80017a0 <commands_process+0xfc>

		case CMD_BACKWARD_DIST_TARGET:
			next->dir = -1;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	22ff      	movs	r2, #255	; 0xff
 8001788:	701a      	strb	r2, [r3, #0]
			next->distType = TARGET;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	721a      	strb	r2, [r3, #8]
			break;
 8001790:	e006      	b.n	80017a0 <commands_process+0xfc>

		case CMD_BACKWARD_DIST_WITHIN:
			next->dir = -1;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	22ff      	movs	r2, #255	; 0xff
 8001796:	701a      	strb	r2, [r3, #0]
			next->distType = STOP_WITHIN;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	721a      	strb	r2, [r3, #8]
			break;
 800179e:	bf00      	nop
		default:
			//invalid command, return.
			return;
	}

	if (c != CMD_FULL_STOP) {
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	2b53      	cmp	r3, #83	; 0x53
 80017a4:	d028      	beq.n	80017f8 <commands_process+0x154>
		buf++;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3301      	adds	r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
		next->speed = parse_uint16_t_until(&buf, CMD_SEP, 3);
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2203      	movs	r2, #3
 80017b0:	217c      	movs	r1, #124	; 0x7c
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f856 	bl	8001864 <parse_uint16_t_until>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	705a      	strb	r2, [r3, #1]
		buf++;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3301      	adds	r3, #1
 80017c4:	607b      	str	r3, [r7, #4]
		next->steeringAngle = parse_float_until(&buf, CMD_SEP, 6);
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2206      	movs	r2, #6
 80017ca:	217c      	movs	r1, #124	; 0x7c
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 f887 	bl	80018e0 <parse_float_until>
 80017d2:	eef0 7a40 	vmov.f32	s15, s0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	edc3 7a01 	vstr	s15, [r3, #4]
		buf++;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3301      	adds	r3, #1
 80017e0:	607b      	str	r3, [r7, #4]
		next->dist = parse_float_until(&buf, CMD_END, 6);
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2206      	movs	r2, #6
 80017e6:	210a      	movs	r1, #10
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 f879 	bl	80018e0 <parse_float_until>
 80017ee:	eef0 7a40 	vmov.f32	s15, s0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	if (cur == NULL) {
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <commands_process+0x18c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d108      	bne.n	8001812 <commands_process+0x16e>
		cur = next;
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <commands_process+0x18c>)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6013      	str	r3, [r2, #0]
		return;
 8001806:	e00f      	b.n	8001828 <commands_process+0x184>
	}

	while (cur->next != NULL) cur = cur->next;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <commands_process+0x18c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <commands_process+0x18c>)
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <commands_process+0x18c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f5      	bne.n	8001808 <commands_process+0x164>
	cur->next = next;
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <commands_process+0x18c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	e000      	b.n	8001828 <commands_process+0x184>
			return;
 8001826:	bf00      	nop
}
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000204 	.word	0x20000204

08001834 <commands_pop>:

Command *commands_pop() {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
	Command *ret = cur;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <commands_pop+0x2c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	607b      	str	r3, [r7, #4]
	if (cur != NULL) cur = cur->next;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <commands_pop+0x2c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <commands_pop+0x1e>
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <commands_pop+0x2c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <commands_pop+0x2c>)
 8001850:	6013      	str	r3, [r2, #0]
	return ret;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	20000204 	.word	0x20000204

08001864 <parse_uint16_t_until>:

	return ret;
}

//get a uint16_t from a string until terminating character.
uint16_t parse_uint16_t_until(uint8_t **buf_ptr, uint8_t until, uint8_t sizeExpected) {
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]
 8001870:	4613      	mov	r3, r2
 8001872:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, c = **buf_ptr;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	73bb      	strb	r3, [r7, #14]
	uint16_t res = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	81bb      	strh	r3, [r7, #12]

	while (i < sizeExpected && c != until) {
 8001884:	e01d      	b.n	80018c2 <parse_uint16_t_until+0x5e>
		if (c <= '9' && c >= '0') res = res * 10 + (c - '0');
 8001886:	7bbb      	ldrb	r3, [r7, #14]
 8001888:	2b39      	cmp	r3, #57	; 0x39
 800188a:	d80e      	bhi.n	80018aa <parse_uint16_t_until+0x46>
 800188c:	7bbb      	ldrb	r3, [r7, #14]
 800188e:	2b2f      	cmp	r3, #47	; 0x2f
 8001890:	d90b      	bls.n	80018aa <parse_uint16_t_until+0x46>
 8001892:	89bb      	ldrh	r3, [r7, #12]
 8001894:	461a      	mov	r2, r3
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4413      	add	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	7bbb      	ldrb	r3, [r7, #14]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3b30      	subs	r3, #48	; 0x30
 80018a8:	81bb      	strh	r3, [r7, #12]

		c = *(++(*buf_ptr)); i++;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	73bb      	strb	r3, [r7, #14]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	3301      	adds	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
	while (i < sizeExpected && c != until) {
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	78bb      	ldrb	r3, [r7, #2]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d203      	bcs.n	80018d2 <parse_uint16_t_until+0x6e>
 80018ca:	7bba      	ldrb	r2, [r7, #14]
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d1d9      	bne.n	8001886 <parse_uint16_t_until+0x22>
	}

	return res;
 80018d2:	89bb      	ldrh	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <parse_float_until>:

//get a float from a string until terminating character.
float parse_float_until(uint8_t **buf_ptr, uint8_t until, uint8_t sizeExpected) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
 80018ec:	4613      	mov	r3, r2
 80018ee:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, c = **buf_ptr, isFrac = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	77fb      	strb	r3, [r7, #31]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	77bb      	strb	r3, [r7, #30]
 80018fc:	2300      	movs	r3, #0
 80018fe:	777b      	strb	r3, [r7, #29]
	int8_t sign = 1;
 8001900:	2301      	movs	r3, #1
 8001902:	773b      	strb	r3, [r7, #28]
	uint32_t whole = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
	float frac = 0, div = 0.1;
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <parse_float_until+0x120>)
 8001910:	613b      	str	r3, [r7, #16]

	while (i < sizeExpected && c != until) {
 8001912:	e051      	b.n	80019b8 <parse_float_until+0xd8>
		if (i == 0 && c == '-') sign *= -1;
 8001914:	7ffb      	ldrb	r3, [r7, #31]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d107      	bne.n	800192a <parse_float_until+0x4a>
 800191a:	7fbb      	ldrb	r3, [r7, #30]
 800191c:	2b2d      	cmp	r3, #45	; 0x2d
 800191e:	d104      	bne.n	800192a <parse_float_until+0x4a>
 8001920:	7f3b      	ldrb	r3, [r7, #28]
 8001922:	425b      	negs	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	773b      	strb	r3, [r7, #28]
 8001928:	e03a      	b.n	80019a0 <parse_float_until+0xc0>
		else if (c == '.') isFrac = 1;
 800192a:	7fbb      	ldrb	r3, [r7, #30]
 800192c:	2b2e      	cmp	r3, #46	; 0x2e
 800192e:	d102      	bne.n	8001936 <parse_float_until+0x56>
 8001930:	2301      	movs	r3, #1
 8001932:	777b      	strb	r3, [r7, #29]
 8001934:	e034      	b.n	80019a0 <parse_float_until+0xc0>
		else if (c <= '9' && c >= '0') {
 8001936:	7fbb      	ldrb	r3, [r7, #30]
 8001938:	2b39      	cmp	r3, #57	; 0x39
 800193a:	d831      	bhi.n	80019a0 <parse_float_until+0xc0>
 800193c:	7fbb      	ldrb	r3, [r7, #30]
 800193e:	2b2f      	cmp	r3, #47	; 0x2f
 8001940:	d92e      	bls.n	80019a0 <parse_float_until+0xc0>
			uint8_t d = c - '0';
 8001942:	7fbb      	ldrb	r3, [r7, #30]
 8001944:	3b30      	subs	r3, #48	; 0x30
 8001946:	73fb      	strb	r3, [r7, #15]
			if (isFrac) {
 8001948:	7f7b      	ldrb	r3, [r7, #29]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d01f      	beq.n	800198e <parse_float_until+0xae>
				frac += div * d;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001958:	edd7 7a04 	vldr	s15, [r7, #16]
 800195c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001960:	ed97 7a05 	vldr	s14, [r7, #20]
 8001964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001968:	edc7 7a05 	vstr	s15, [r7, #20]
				div *= 0.1;
 800196c:	6938      	ldr	r0, [r7, #16]
 800196e:	f7fe fdeb 	bl	8000548 <__aeabi_f2d>
 8001972:	a321      	add	r3, pc, #132	; (adr r3, 80019f8 <parse_float_until+0x118>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe3e 	bl	80005f8 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	f7ff f930 	bl	8000be8 <__aeabi_d2f>
 8001988:	4603      	mov	r3, r0
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	e008      	b.n	80019a0 <parse_float_until+0xc0>
			}
			else whole = whole * 10 + d;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	461a      	mov	r2, r3
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	4413      	add	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
		}

		c = *(++(*buf_ptr)); i++;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	77bb      	strb	r3, [r7, #30]
 80019b2:	7ffb      	ldrb	r3, [r7, #31]
 80019b4:	3301      	adds	r3, #1
 80019b6:	77fb      	strb	r3, [r7, #31]
	while (i < sizeExpected && c != until) {
 80019b8:	7ffa      	ldrb	r2, [r7, #31]
 80019ba:	78bb      	ldrb	r3, [r7, #2]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d203      	bcs.n	80019c8 <parse_float_until+0xe8>
 80019c0:	7fba      	ldrb	r2, [r7, #30]
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1a5      	bne.n	8001914 <parse_float_until+0x34>
	}

	return (whole + frac) * sign;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80019d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019da:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80019ea:	eeb0 0a67 	vmov.f32	s0, s15
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	f3af 8000 	nop.w
 80019f8:	9999999a 	.word	0x9999999a
 80019fc:	3fb99999 	.word	0x3fb99999
 8001a00:	3dcccccd 	.word	0x3dcccccd
 8001a04:	00000000 	.word	0x00000000

08001a08 <get_turning_r_steer_cm>:


static float get_turning_r_steer_cm(float steeringAngle) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	ed87 0a01 	vstr	s0, [r7, #4]
	return CHASSIS_CM / sin(steeringAngle * M_PI / 180);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7fe fd98 	bl	8000548 <__aeabi_f2d>
 8001a18:	a319      	add	r3, pc, #100	; (adr r3, 8001a80 <get_turning_r_steer_cm+0x78>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fdeb 	bl	80005f8 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <get_turning_r_steer_cm+0x70>)
 8001a30:	f7fe ff0c 	bl	800084c <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	ec43 2b17 	vmov	d7, r2, r3
 8001a3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a40:	eef0 0a67 	vmov.f32	s1, s15
 8001a44:	f00b f85c 	bl	800cb00 <sin>
 8001a48:	ec53 2b10 	vmov	r2, r3, d0
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	490a      	ldr	r1, [pc, #40]	; (8001a7c <get_turning_r_steer_cm+0x74>)
 8001a52:	f7fe fefb 	bl	800084c <__aeabi_ddiv>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff f8c3 	bl	8000be8 <__aeabi_d2f>
 8001a62:	4603      	mov	r3, r0
 8001a64:	ee07 3a90 	vmov	s15, r3
}
 8001a68:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	f3af 8000 	nop.w
 8001a78:	40668000 	.word	0x40668000
 8001a7c:	402d0000 	.word	0x402d0000
 8001a80:	54442d18 	.word	0x54442d18
 8001a84:	400921fb 	.word	0x400921fb

08001a88 <get_turning_r_back_cm>:
float get_turning_r_back_cm(float steeringAngle) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	ed87 0a01 	vstr	s0, [r7, #4]
	return CHASSIS_CM / tan(steeringAngle * M_PI / 180);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7fe fd58 	bl	8000548 <__aeabi_f2d>
 8001a98:	a319      	add	r3, pc, #100	; (adr r3, 8001b00 <get_turning_r_back_cm+0x78>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fdab 	bl	80005f8 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <get_turning_r_back_cm+0x70>)
 8001ab0:	f7fe fecc 	bl	800084c <__aeabi_ddiv>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	ec43 2b17 	vmov	d7, r2, r3
 8001abc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac0:	eef0 0a67 	vmov.f32	s1, s15
 8001ac4:	f00b f874 	bl	800cbb0 <tan>
 8001ac8:	ec53 2b10 	vmov	r2, r3, d0
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	490a      	ldr	r1, [pc, #40]	; (8001afc <get_turning_r_back_cm+0x74>)
 8001ad2:	f7fe febb 	bl	800084c <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f883 	bl	8000be8 <__aeabi_d2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	ee07 3a90 	vmov	s15, r3
}
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	40668000 	.word	0x40668000
 8001afc:	402d0000 	.word	0x402d0000
 8001b00:	54442d18 	.word	0x54442d18
 8001b04:	400921fb 	.word	0x400921fb

08001b08 <get_turning_r_robot_cm>:
float get_turning_r_robot_cm(float steeringAngle) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	ed87 0a01 	vstr	s0, [r7, #4]
	float r_steer = get_turning_r_steer_cm(steeringAngle);
 8001b12:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b16:	f7ff ff77 	bl	8001a08 <get_turning_r_steer_cm>
 8001b1a:	ed87 0a04 	vstr	s0, [r7, #16]
	float L2 = CHASSIS_CM / 2;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <get_turning_r_robot_cm+0x7c>)
 8001b20:	60fb      	str	r3, [r7, #12]
	float r = sqrt(r_steer * r_steer + L2 * L2);
 8001b22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b26:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b36:	ee17 0a90 	vmov	r0, s15
 8001b3a:	f7fe fd05 	bl	8000548 <__aeabi_f2d>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	ec43 2b10 	vmov	d0, r2, r3
 8001b46:	f00a ffad 	bl	800caa4 <sqrt>
 8001b4a:	ec53 2b10 	vmov	r2, r3, d0
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7ff f849 	bl	8000be8 <__aeabi_d2f>
 8001b56:	4603      	mov	r3, r0
 8001b58:	617b      	str	r3, [r7, #20]
	if (steeringAngle < 0) r = -r;
 8001b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	d505      	bpl.n	8001b74 <get_turning_r_robot_cm+0x6c>
 8001b68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b6c:	eef1 7a67 	vneg.f32	s15, s15
 8001b70:	edc7 7a05 	vstr	s15, [r7, #20]
	return r;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	ee07 3a90 	vmov	s15, r3
}
 8001b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40e80000 	.word	0x40e80000

08001b88 <get_w_ms>:

//angular velocity.
float get_w_ms(float speed, float turning_r_robot_cm) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b92:	edc7 0a00 	vstr	s1, [r7]
	return 90.5f * MOTOR_PWM_MAX / MOTOR_PWM_PERIOD * speed / 100 / turning_r_robot_cm *  180 / M_PI / 1000;
 8001b96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b9a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001c08 <get_w_ms+0x80>
 8001b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001c0c <get_w_ms+0x84>
 8001ba6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001baa:	ed97 7a00 	vldr	s14, [r7]
 8001bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001c10 <get_w_ms+0x88>
 8001bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bba:	ee17 0a90 	vmov	r0, s15
 8001bbe:	f7fe fcc3 	bl	8000548 <__aeabi_f2d>
 8001bc2:	a30f      	add	r3, pc, #60	; (adr r3, 8001c00 <get_w_ms+0x78>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	f7fe fe40 	bl	800084c <__aeabi_ddiv>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <get_w_ms+0x8c>)
 8001bda:	f7fe fe37 	bl	800084c <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe ffff 	bl	8000be8 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	ee07 3a90 	vmov	s15, r3
}
 8001bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	f3af 8000 	nop.w
 8001c00:	54442d18 	.word	0x54442d18
 8001c04:	400921fb 	.word	0x400921fb
 8001c08:	4296d555 	.word	0x4296d555
 8001c0c:	42c80000 	.word	0x42c80000
 8001c10:	43340000 	.word	0x43340000
 8001c14:	408f4000 	.word	0x408f4000

08001c18 <get_distance_cm>:

float angle_diff(float a1, float a2) {
	return mod_360(a1 - a2);
}

float get_distance_cm(uint16_t pulses) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
	return ((float) pulses) / MOTOR_PPR * 2 * M_PI * WHEEL_R_CM;
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c2c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001c80 <get_distance_cm+0x68>
 8001c30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c38:	ee17 0a90 	vmov	r0, s15
 8001c3c:	f7fe fc84 	bl	8000548 <__aeabi_f2d>
 8001c40:	a30d      	add	r3, pc, #52	; (adr r3, 8001c78 <get_distance_cm+0x60>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fcd7 	bl	80005f8 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <get_distance_cm+0x6c>)
 8001c58:	f7fe fcce 	bl	80005f8 <__aeabi_dmul>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f7fe ffc0 	bl	8000be8 <__aeabi_d2f>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	ee07 3a90 	vmov	s15, r3
}
 8001c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	54442d18 	.word	0x54442d18
 8001c7c:	400921fb 	.word	0x400921fb
 8001c80:	44410000 	.word	0x44410000
 8001c84:	400a0000 	.word	0x400a0000

08001c88 <magcal_preload>:
#include "mag_cal.h"

static I2C_HandleTypeDef *hi2c;
static MagCalParams *params;

static void magcal_preload(MagCalParams *params_ptr) {
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	params_ptr->offset_HI[0] = -3.6;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <magcal_preload+0x38>)
 8001c94:	601a      	str	r2, [r3, #0]
	params_ptr->offset_HI[1] = -17.55;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <magcal_preload+0x3c>)
 8001c9a:	605a      	str	r2, [r3, #4]

	params_ptr->matrix_SI[0][0] = 1.024;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <magcal_preload+0x40>)
 8001ca0:	609a      	str	r2, [r3, #8]
	params_ptr->matrix_SI[0][1] = -0.0665;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <magcal_preload+0x44>)
 8001ca6:	60da      	str	r2, [r3, #12]
	params_ptr->matrix_SI[1][0] = 0.0965;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <magcal_preload+0x48>)
 8001cac:	611a      	str	r2, [r3, #16]
	params_ptr->matrix_SI[1][1] = 1.4856;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <magcal_preload+0x4c>)
 8001cb2:	615a      	str	r2, [r3, #20]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	c0666666 	.word	0xc0666666
 8001cc4:	c18c6666 	.word	0xc18c6666
 8001cc8:	3f83126f 	.word	0x3f83126f
 8001ccc:	bd883127 	.word	0xbd883127
 8001cd0:	3dc5a1cb 	.word	0x3dc5a1cb
 8001cd4:	3fbe2824 	.word	0x3fbe2824

08001cd8 <magcal_init>:

void magcal_init(I2C_HandleTypeDef *hi2c_ptr, MagCalParams *params_ptr) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	hi2c = hi2c_ptr;
 8001ce2:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <magcal_init+0x24>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6013      	str	r3, [r2, #0]
	params = params_ptr;
 8001ce8:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <magcal_init+0x28>)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6013      	str	r3, [r2, #0]

	magcal_preload(params_ptr);
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	f7ff ffca 	bl	8001c88 <magcal_preload>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000208 	.word	0x20000208
 8001d00:	2000020c 	.word	0x2000020c

08001d04 <magcal_adjust>:

	OLED_Clear();
	OLED_Refresh_Gram();
}

void magcal_adjust(float magXY[2]) {
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	float x = magXY[0] - params->offset_HI[0], y = magXY[1] - params->offset_HI[1];
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <magcal_adjust+0x98>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	ed93 7a00 	vldr	s14, [r3]
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <magcal_adjust+0x98>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d36:	edc7 7a02 	vstr	s15, [r7, #8]
	magXY[0] = params->matrix_SI[0][0] * x + params->matrix_SI[0][1] * y;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <magcal_adjust+0x98>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <magcal_adjust+0x98>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	edc3 7a00 	vstr	s15, [r3]
	magXY[1] = params->matrix_SI[1][0] * x + params->matrix_SI[1][1] * y;
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <magcal_adjust+0x98>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <magcal_adjust+0x98>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	edd3 6a05 	vldr	s13, [r3, #20]
 8001d7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8c:	edc3 7a00 	vstr	s15, [r3]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	2000020c 	.word	0x2000020c

08001da0 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//paced loop.
volatile uint8_t newTick = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	//16MHz / 48000 = 3ms frame.
	newTick = 1;
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	2000046d 	.word	0x2000046d

08001dc0 <HAL_UART_RxCpltCallback>:

//serial in.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &byte_serial, 1);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4910      	ldr	r1, [pc, #64]	; (8001e0c <HAL_UART_RxCpltCallback+0x4c>)
 8001dcc:	4810      	ldr	r0, [pc, #64]	; (8001e10 <HAL_UART_RxCpltCallback+0x50>)
 8001dce:	f005 fb2f 	bl	8007430 <HAL_UART_Receive_IT>
	buf_serial[buf_i++] = byte_serial;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_UART_RxCpltCallback+0x54>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	b2d1      	uxtb	r1, r2
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_UART_RxCpltCallback+0x54>)
 8001ddc:	7011      	strb	r1, [r2, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_UART_RxCpltCallback+0x4c>)
 8001de2:	7819      	ldrb	r1, [r3, #0]
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_UART_RxCpltCallback+0x58>)
 8001de6:	5499      	strb	r1, [r3, r2]

	if (byte_serial == CMD_END) {
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_UART_RxCpltCallback+0x4c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b0a      	cmp	r3, #10
 8001dee:	d108      	bne.n	8001e02 <HAL_UART_RxCpltCallback+0x42>
		commands_process(buf_serial, buf_i);
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_UART_RxCpltCallback+0x54>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4808      	ldr	r0, [pc, #32]	; (8001e18 <HAL_UART_RxCpltCallback+0x58>)
 8001df8:	f7ff fc54 	bl	80016a4 <commands_process>
		buf_i = 0;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_UART_RxCpltCallback+0x54>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
	}
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000046c 	.word	0x2000046c
 8001e10:	200003cc 	.word	0x200003cc
 8001e14:	20000454 	.word	0x20000454
 8001e18:	20000458 	.word	0x20000458

08001e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	ed2d 8b02 	vpush	{d8}
 8001e22:	b092      	sub	sp, #72	; 0x48
 8001e24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e26:	f001 ff95 	bl	8003d54 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e2a:	f000 f977 	bl	800211c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e2e:	f000 fc93 	bl	8002758 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001e32:	f000 fc67 	bl	8002704 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001e36:	f000 f9cf 	bl	80021d8 <MX_I2C1_Init>
  MX_TIM8_Init();
 8001e3a:	f000 fbb7 	bl	80025ac <MX_TIM8_Init>
  MX_TIM2_Init();
 8001e3e:	f000 fa99 	bl	8002374 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e42:	f000 faeb 	bl	800241c <MX_TIM3_Init>
  MX_TIM1_Init();
 8001e46:	f000 f9f5 	bl	8002234 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001e4a:	f000 fb3b 	bl	80024c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* ----- Start: Initialize libraries ----- */
  OLED_Init();							//initialize OLED display.
 8001e4e:	f001 f963 	bl	8003118 <OLED_Init>
  magcal_init(&hi2c1, &magCalParams);	//initialize magnetometer calibration.
 8001e52:	49a1      	ldr	r1, [pc, #644]	; (80020d8 <main+0x2bc>)
 8001e54:	48a1      	ldr	r0, [pc, #644]	; (80020dc <main+0x2c0>)
 8001e56:	f7ff ff3f 	bl	8001cd8 <magcal_init>
  sensors_init(&hi2c1, &sensors); 		//initialize motion sensors.
 8001e5a:	49a1      	ldr	r1, [pc, #644]	; (80020e0 <main+0x2c4>)
 8001e5c:	489f      	ldr	r0, [pc, #636]	; (80020dc <main+0x2c0>)
 8001e5e:	f001 fa73 	bl	8003348 <sensors_init>
  motor_init(&htim8, &htim2, &htim3); 	//initialize motor PWM and encoders.
 8001e62:	4aa0      	ldr	r2, [pc, #640]	; (80020e4 <main+0x2c8>)
 8001e64:	49a0      	ldr	r1, [pc, #640]	; (80020e8 <main+0x2cc>)
 8001e66:	48a1      	ldr	r0, [pc, #644]	; (80020ec <main+0x2d0>)
 8001e68:	f000 fd26 	bl	80028b8 <motor_init>
  servo_init(&htim1); 					//initialize servo PWM.
 8001e6c:	48a0      	ldr	r0, [pc, #640]	; (80020f0 <main+0x2d4>)
 8001e6e:	f001 fba1 	bl	80035b4 <servo_init>

  /* ----- Start: Car setup ----- */
//  magcal_calc_params();

  //reset car.
  servo_setAngle(0);
 8001e72:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80020f4 <main+0x2d8>
 8001e76:	f001 fbc1 	bl	80035fc <servo_setAngle>
  motor_setDrive(0, 0);
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 ff5b 	bl	8002d38 <motor_setDrive>

  OLED_ShowString(0, 0, "Press USER when ready...");
 8001e82:	4a9d      	ldr	r2, [pc, #628]	; (80020f8 <main+0x2dc>)
 8001e84:	2100      	movs	r1, #0
 8001e86:	2000      	movs	r0, #0
 8001e88:	f001 f914 	bl	80030b4 <OLED_ShowString>
  OLED_Refresh_Gram();
 8001e8c:	f000 ffe8 	bl	8002e60 <OLED_Refresh_Gram>
//  while (!user_is_pressed());	//wait for user to place car.

  sensors_set_bias(500); 		// set initial bias.
 8001e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e94:	f001 fb30 	bl	80034f8 <sensors_set_bias>
  OLED_Clear();
 8001e98:	f001 f81a 	bl	8002ed0 <OLED_Clear>
  OLED_ShowString(0, 0, "Active.");
 8001e9c:	4a97      	ldr	r2, [pc, #604]	; (80020fc <main+0x2e0>)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f001 f907 	bl	80030b4 <OLED_ShowString>
  OLED_Refresh_Gram();
 8001ea6:	f000 ffdb 	bl	8002e60 <OLED_Refresh_Gram>
  /* ----- End: Car setup ----- */

  /* ----- Start: OS Parameters ----- */
  Command *cmd = NULL;					//current command.
 8001eaa:	2300      	movs	r3, #0
 8001eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  float distDiff = 0, brakingDist = 0; 	//current distance difference.
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
  float wDiff = 0, wTarget = 0;			//current angular velocity difference and target.
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  float rBack = 0, rRobot = 0;			//turning radii at the back and centre of robot.
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  /* ----- End: OS Parameters ----- */

  /* ----- Start: Interrupts ----- */
  HAL_UART_Receive_IT(&huart3, &byte_serial, 1);	//start receiving serial.
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	498a      	ldr	r1, [pc, #552]	; (8002100 <main+0x2e4>)
 8001ed6:	488b      	ldr	r0, [pc, #556]	; (8002104 <main+0x2e8>)
 8001ed8:	f005 faaa 	bl	8007430 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim4);					//start paced loop timer.
 8001edc:	488a      	ldr	r0, [pc, #552]	; (8002108 <main+0x2ec>)
 8001ede:	f004 f81d 	bl	8005f1c <HAL_TIM_Base_Start_IT>
  /* ----- End: Interrupts ----- */

  uint8_t buf[20];
  float gyroZ_total = 0;
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t gyroZ_count = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* ----- Start: Get next command (if any) ----- */
	if (cmd == NULL) {
 8001eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d16e      	bne.n	8001fd0 <main+0x1b4>
		cmd = commands_pop();
 8001ef2:	f7ff fc9f 	bl	8001834 <commands_pop>
 8001ef6:	63f8      	str	r0, [r7, #60]	; 0x3c

		if (cmd != NULL) {
 8001ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d068      	beq.n	8001fd0 <main+0x1b4>
			motor_setDrive(cmd->dir, cmd->speed);
 8001efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f00:	f993 2000 	ldrsb.w	r2, [r3]
 8001f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f06:	785b      	ldrb	r3, [r3, #1]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f000 ff14 	bl	8002d38 <motor_setDrive>
			if (cmd->dir != 0) {
 8001f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f12:	f993 3000 	ldrsb.w	r3, [r3]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d055      	beq.n	8001fc6 <main+0x1aa>
				brakingDist = MOTOR_BRAKING_DIST_CM * cmd->speed / 100;
 8001f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f1c:	785b      	ldrb	r3, [r3, #1]
 8001f1e:	4a7b      	ldr	r2, [pc, #492]	; (800210c <main+0x2f0>)
 8001f20:	fb82 1203 	smull	r1, r2, r2, r3
 8001f24:	1052      	asrs	r2, r2, #1
 8001f26:	17db      	asrs	r3, r3, #31
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f32:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

				float steeringAngle = cmd->steeringAngle;
 8001f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	61bb      	str	r3, [r7, #24]
				servo_setAngle(steeringAngle);
 8001f3c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001f40:	f001 fb5c 	bl	80035fc <servo_setAngle>
				if (steeringAngle != 0) {
 8001f44:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f50:	d02f      	beq.n	8001fb2 <main+0x196>
					rBack = get_turning_r_back_cm(steeringAngle);
 8001f52:	ed97 0a06 	vldr	s0, [r7, #24]
 8001f56:	f7ff fd97 	bl	8001a88 <get_turning_r_back_cm>
 8001f5a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
					rRobot = get_turning_r_robot_cm(steeringAngle);
 8001f5e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001f62:	f7ff fdd1 	bl	8001b08 <get_turning_r_robot_cm>
 8001f66:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
					wTarget = get_w_ms(cmd->speed, rRobot);
 8001f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f76:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7e:	f7ff fe03 	bl	8001b88 <get_w_ms>
 8001f82:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

					gyroZ_total = 0;
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
					snprintf(buf, 20, "%.6f", wTarget);
 8001f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f8e:	f7fe fadb 	bl	8000548 <__aeabi_f2d>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	1d38      	adds	r0, r7, #4
 8001f98:	e9cd 2300 	strd	r2, r3, [sp]
 8001f9c:	4a5c      	ldr	r2, [pc, #368]	; (8002110 <main+0x2f4>)
 8001f9e:	2114      	movs	r1, #20
 8001fa0:	f007 f95e 	bl	8009260 <sniprintf>
					OLED_ShowString(0, 0, buf);
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2000      	movs	r0, #0
 8001fac:	f001 f882 	bl	80030b4 <OLED_ShowString>
 8001fb0:	e00e      	b.n	8001fd0 <main+0x1b4>
				} else {
					rBack = 0;
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					rRobot = 0;
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
					wTarget = 0;
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8001fc4:	e004      	b.n	8001fd0 <main+0x1b4>
				}
			} else {
				free(cmd);
 8001fc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001fc8:	f006 f95e 	bl	8008288 <free>
				cmd = NULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
	}
	/* ----- End: Get next command (if any) ----- */

	/* ----- Start: Drive PID Control ----- */
	if (cmd != NULL && cmd->dir != 0) {
 8001fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d075      	beq.n	80020c2 <main+0x2a6>
 8001fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d070      	beq.n	80020c2 <main+0x2a6>
		sensors_read_gyroZ();
 8001fe0:	f001 f9dc 	bl	800339c <sensors_read_gyroZ>
		gyroZ_total += sensors.gyroZ;
 8001fe4:	4b3e      	ldr	r3, [pc, #248]	; (80020e0 <main+0x2c4>)
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		gyroZ_count++;
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	623b      	str	r3, [r7, #32]
		wDiff = (sensors.gyroZ - wTarget) * MS_FRAME;
 8001ffc:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <main+0x2c4>)
 8001ffe:	ed93 7a00 	vldr	s14, [r3]
 8002002:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800200e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002012:	edc7 7a07 	vstr	s15, [r7, #28]
//		wDiff = 0;

		switch (cmd->distType) {
 8002016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002018:	7a1b      	ldrb	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <main+0x208>
 800201e:	2b01      	cmp	r3, #1
 8002020:	d00c      	beq.n	800203c <main+0x220>
 8002022:	e00f      	b.n	8002044 <main+0x228>
			case TARGET:
				distDiff = cmd->dist - motor_getDist();
 8002024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002026:	ed93 8a03 	vldr	s16, [r3, #12]
 800202a:	f000 fcef 	bl	8002a0c <motor_getDist>
 800202e:	eef0 7a40 	vmov.f32	s15, s0
 8002032:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002036:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				break;
 800203a:	e006      	b.n	800204a <main+0x22e>
			case STOP_WITHIN:
				distDiff = cmd->dist;
 800203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
 8002042:	e002      	b.n	800204a <main+0x22e>
			default:
				distDiff = 10;
 8002044:	4b33      	ldr	r3, [pc, #204]	; (8002114 <main+0x2f8>)
 8002046:	63bb      	str	r3, [r7, #56]	; 0x38
				break;
 8002048:	bf00      	nop
		}

		motor_pwmCorrection(cmd->dir, wDiff, rBack, rRobot, distDiff, brakingDist); //motor correction.
 800204a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204c:	f993 3000 	ldrsb.w	r3, [r3]
 8002050:	ed97 2a0d 	vldr	s4, [r7, #52]	; 0x34
 8002054:	edd7 1a0e 	vldr	s3, [r7, #56]	; 0x38
 8002058:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 800205c:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002060:	ed97 0a07 	vldr	s0, [r7, #28]
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fd09 	bl	8002a7c <motor_pwmCorrection>

		if (distDiff <= 1) {
 800206a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800206e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	d822      	bhi.n	80020c2 <main+0x2a6>
			//target achieved; move to next command.
			free(cmd);
 800207c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800207e:	f006 f903 	bl	8008288 <free>
			cmd = NULL;
 8002082:	2300      	movs	r3, #0
 8002084:	63fb      	str	r3, [r7, #60]	; 0x3c

			snprintf(buf, 20, "%.6f", gyroZ_total / gyroZ_count);
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002090:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002094:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002098:	ee16 0a90 	vmov	r0, s13
 800209c:	f7fe fa54 	bl	8000548 <__aeabi_f2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	1d38      	adds	r0, r7, #4
 80020a6:	e9cd 2300 	strd	r2, r3, [sp]
 80020aa:	4a19      	ldr	r2, [pc, #100]	; (8002110 <main+0x2f4>)
 80020ac:	2114      	movs	r1, #20
 80020ae:	f007 f8d7 	bl	8009260 <sniprintf>
			OLED_ShowString(0, 10, buf);
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	461a      	mov	r2, r3
 80020b6:	210a      	movs	r1, #10
 80020b8:	2000      	movs	r0, #0
 80020ba:	f000 fffb 	bl	80030b4 <OLED_ShowString>
			OLED_Refresh_Gram();
 80020be:	f000 fecf 	bl	8002e60 <OLED_Refresh_Gram>
		}
	}
	/* ----- End: Drive PID Control ----- */

	/* ----- Start: Paced Loop Control ----- */
	while (!newTick);		//wait for new tick.
 80020c2:	bf00      	nop
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <main+0x2fc>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0fa      	beq.n	80020c4 <main+0x2a8>
	newTick = 0;			//acknowledge flag.
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <main+0x2fc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
	if (cmd == NULL) {
 80020d4:	e70a      	b.n	8001eec <main+0xd0>
 80020d6:	bf00      	nop
 80020d8:	2000043c 	.word	0x2000043c
 80020dc:	20000210 	.word	0x20000210
 80020e0:	20000414 	.word	0x20000414
 80020e4:	200002f4 	.word	0x200002f4
 80020e8:	200002ac 	.word	0x200002ac
 80020ec:	20000384 	.word	0x20000384
 80020f0:	20000264 	.word	0x20000264
 80020f4:	00000000 	.word	0x00000000
 80020f8:	0800e6a8 	.word	0x0800e6a8
 80020fc:	0800e6c4 	.word	0x0800e6c4
 8002100:	2000046c 	.word	0x2000046c
 8002104:	200003cc 	.word	0x200003cc
 8002108:	2000033c 	.word	0x2000033c
 800210c:	66666667 	.word	0x66666667
 8002110:	0800e6cc 	.word	0x0800e6cc
 8002114:	41200000 	.word	0x41200000
 8002118:	2000046d 	.word	0x2000046d

0800211c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b094      	sub	sp, #80	; 0x50
 8002120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002122:	f107 0320 	add.w	r3, r7, #32
 8002126:	2230      	movs	r2, #48	; 0x30
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f007 f92f 	bl	800938e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <SystemClock_Config+0xb4>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <SystemClock_Config+0xb4>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214e:	6413      	str	r3, [r2, #64]	; 0x40
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <SystemClock_Config+0xb4>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <SystemClock_Config+0xb8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <SystemClock_Config+0xb8>)
 8002166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <SystemClock_Config+0xb8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002178:	2302      	movs	r3, #2
 800217a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800217c:	2301      	movs	r3, #1
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002180:	2310      	movs	r3, #16
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002184:	2300      	movs	r3, #0
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002188:	f107 0320 	add.w	r3, r7, #32
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fa1d 	bl	80055cc <HAL_RCC_OscConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002198:	f000 fb88 	bl	80028ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219c:	230f      	movs	r3, #15
 800219e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 fc80 	bl	8005abc <HAL_RCC_ClockConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80021c2:	f000 fb73 	bl	80028ac <Error_Handler>
  }
}
 80021c6:	bf00      	nop
 80021c8:	3750      	adds	r7, #80	; 0x50
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40007000 	.word	0x40007000

080021d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <MX_I2C1_Init+0x50>)
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <MX_I2C1_Init+0x54>)
 80021e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_I2C1_Init+0x50>)
 80021e4:	4a12      	ldr	r2, [pc, #72]	; (8002230 <MX_I2C1_Init+0x58>)
 80021e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <MX_I2C1_Init+0x50>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_I2C1_Init+0x50>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_I2C1_Init+0x50>)
 80021f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <MX_I2C1_Init+0x50>)
 80021fe:	2200      	movs	r2, #0
 8002200:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_I2C1_Init+0x50>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <MX_I2C1_Init+0x50>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_I2C1_Init+0x50>)
 8002210:	2200      	movs	r2, #0
 8002212:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <MX_I2C1_Init+0x50>)
 8002216:	f002 f98d 	bl	8004534 <HAL_I2C_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002220:	f000 fb44 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000210 	.word	0x20000210
 800222c:	40005400 	.word	0x40005400
 8002230:	000186a0 	.word	0x000186a0

08002234 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b096      	sub	sp, #88	; 0x58
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002248:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]
 8002262:	615a      	str	r2, [r3, #20]
 8002264:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2220      	movs	r2, #32
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f007 f88e 	bl	800938e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002272:	4b3e      	ldr	r3, [pc, #248]	; (800236c <MX_TIM1_Init+0x138>)
 8002274:	4a3e      	ldr	r2, [pc, #248]	; (8002370 <MX_TIM1_Init+0x13c>)
 8002276:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8002278:	4b3c      	ldr	r3, [pc, #240]	; (800236c <MX_TIM1_Init+0x138>)
 800227a:	2204      	movs	r2, #4
 800227c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227e:	4b3b      	ldr	r3, [pc, #236]	; (800236c <MX_TIM1_Init+0x138>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 8002284:	4b39      	ldr	r3, [pc, #228]	; (800236c <MX_TIM1_Init+0x138>)
 8002286:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800228a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228c:	4b37      	ldr	r3, [pc, #220]	; (800236c <MX_TIM1_Init+0x138>)
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002292:	4b36      	ldr	r3, [pc, #216]	; (800236c <MX_TIM1_Init+0x138>)
 8002294:	2200      	movs	r2, #0
 8002296:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002298:	4b34      	ldr	r3, [pc, #208]	; (800236c <MX_TIM1_Init+0x138>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800229e:	4833      	ldr	r0, [pc, #204]	; (800236c <MX_TIM1_Init+0x138>)
 80022a0:	f003 fdec 	bl	8005e7c <HAL_TIM_Base_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80022aa:	f000 faff 	bl	80028ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022b8:	4619      	mov	r1, r3
 80022ba:	482c      	ldr	r0, [pc, #176]	; (800236c <MX_TIM1_Init+0x138>)
 80022bc:	f004 fb7a 	bl	80069b4 <HAL_TIM_ConfigClockSource>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022c6:	f000 faf1 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022ca:	4828      	ldr	r0, [pc, #160]	; (800236c <MX_TIM1_Init+0x138>)
 80022cc:	f003 feef 	bl	80060ae <HAL_TIM_PWM_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80022d6:	f000 fae9 	bl	80028ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022e6:	4619      	mov	r1, r3
 80022e8:	4820      	ldr	r0, [pc, #128]	; (800236c <MX_TIM1_Init+0x138>)
 80022ea:	f004 ff6f 	bl	80071cc <HAL_TIMEx_MasterConfigSynchronization>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80022f4:	f000 fada 	bl	80028ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f8:	2360      	movs	r3, #96	; 0x60
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002304:	2300      	movs	r3, #0
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002310:	2300      	movs	r3, #0
 8002312:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	2200      	movs	r2, #0
 800231a:	4619      	mov	r1, r3
 800231c:	4813      	ldr	r0, [pc, #76]	; (800236c <MX_TIM1_Init+0x138>)
 800231e:	f004 fa87 	bl	8006830 <HAL_TIM_PWM_ConfigChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002328:	f000 fac0 	bl	80028ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002344:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	4619      	mov	r1, r3
 800234e:	4807      	ldr	r0, [pc, #28]	; (800236c <MX_TIM1_Init+0x138>)
 8002350:	f004 ffb8 	bl	80072c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800235a:	f000 faa7 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800235e:	4803      	ldr	r0, [pc, #12]	; (800236c <MX_TIM1_Init+0x138>)
 8002360:	f001 fb06 	bl	8003970 <HAL_TIM_MspPostInit>

}
 8002364:	bf00      	nop
 8002366:	3758      	adds	r7, #88	; 0x58
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000264 	.word	0x20000264
 8002370:	40010000 	.word	0x40010000

08002374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08c      	sub	sp, #48	; 0x30
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800237a:	f107 030c 	add.w	r3, r7, #12
 800237e:	2224      	movs	r2, #36	; 0x24
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f007 f803 	bl	800938e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <MX_TIM2_Init+0xa4>)
 8002392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002398:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <MX_TIM2_Init+0xa4>)
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <MX_TIM2_Init+0xa4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80023a4:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <MX_TIM2_Init+0xa4>)
 80023a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <MX_TIM2_Init+0xa4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b2:	4b19      	ldr	r3, [pc, #100]	; (8002418 <MX_TIM2_Init+0xa4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023b8:	2303      	movs	r3, #3
 80023ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80023bc:	2302      	movs	r3, #2
 80023be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023c0:	2301      	movs	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80023cc:	2302      	movs	r3, #2
 80023ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023d0:	2301      	movs	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	4619      	mov	r1, r3
 80023e2:	480d      	ldr	r0, [pc, #52]	; (8002418 <MX_TIM2_Init+0xa4>)
 80023e4:	f003 ff84 	bl	80062f0 <HAL_TIM_Encoder_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80023ee:	f000 fa5d 	bl	80028ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	4619      	mov	r1, r3
 80023fe:	4806      	ldr	r0, [pc, #24]	; (8002418 <MX_TIM2_Init+0xa4>)
 8002400:	f004 fee4 	bl	80071cc <HAL_TIMEx_MasterConfigSynchronization>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800240a:	f000 fa4f 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	3730      	adds	r7, #48	; 0x30
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200002ac 	.word	0x200002ac

0800241c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	; 0x30
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	2224      	movs	r2, #36	; 0x24
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f006 ffaf 	bl	800938e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002438:	4b20      	ldr	r3, [pc, #128]	; (80024bc <MX_TIM3_Init+0xa0>)
 800243a:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <MX_TIM3_Init+0xa4>)
 800243c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <MX_TIM3_Init+0xa0>)
 8002440:	2200      	movs	r2, #0
 8002442:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <MX_TIM3_Init+0xa0>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <MX_TIM3_Init+0xa0>)
 800244c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002450:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <MX_TIM3_Init+0xa0>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <MX_TIM3_Init+0xa0>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800245e:	2303      	movs	r3, #3
 8002460:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002462:	2302      	movs	r3, #2
 8002464:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002466:	2301      	movs	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800246e:	230a      	movs	r3, #10
 8002470:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002472:	2302      	movs	r3, #2
 8002474:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002476:	2301      	movs	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800247e:	230a      	movs	r3, #10
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	4619      	mov	r1, r3
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <MX_TIM3_Init+0xa0>)
 800248a:	f003 ff31 	bl	80062f0 <HAL_TIM_Encoder_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002494:	f000 fa0a 	bl	80028ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_TIM3_Init+0xa0>)
 80024a6:	f004 fe91 	bl	80071cc <HAL_TIMEx_MasterConfigSynchronization>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80024b0:	f000 f9fc 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	3730      	adds	r7, #48	; 0x30
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200002f4 	.word	0x200002f4
 80024c0:	40000400 	.word	0x40000400

080024c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08e      	sub	sp, #56	; 0x38
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
 80024f0:	615a      	str	r2, [r3, #20]
 80024f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <MX_TIM4_Init+0xe0>)
 80024f6:	4a2c      	ldr	r2, [pc, #176]	; (80025a8 <MX_TIM4_Init+0xe4>)
 80024f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1-1;
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <MX_TIM4_Init+0xe0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <MX_TIM4_Init+0xe0>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48000-1;
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <MX_TIM4_Init+0xe0>)
 8002508:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800250c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250e:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <MX_TIM4_Init+0xe0>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <MX_TIM4_Init+0xe0>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800251a:	4822      	ldr	r0, [pc, #136]	; (80025a4 <MX_TIM4_Init+0xe0>)
 800251c:	f003 fcae 	bl	8005e7c <HAL_TIM_Base_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002526:	f000 f9c1 	bl	80028ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002534:	4619      	mov	r1, r3
 8002536:	481b      	ldr	r0, [pc, #108]	; (80025a4 <MX_TIM4_Init+0xe0>)
 8002538:	f004 fa3c 	bl	80069b4 <HAL_TIM_ConfigClockSource>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002542:	f000 f9b3 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002546:	4817      	ldr	r0, [pc, #92]	; (80025a4 <MX_TIM4_Init+0xe0>)
 8002548:	f003 fd58 	bl	8005ffc <HAL_TIM_OC_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002552:	f000 f9ab 	bl	80028ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800255e:	f107 0320 	add.w	r3, r7, #32
 8002562:	4619      	mov	r1, r3
 8002564:	480f      	ldr	r0, [pc, #60]	; (80025a4 <MX_TIM4_Init+0xe0>)
 8002566:	f004 fe31 	bl	80071cc <HAL_TIMEx_MasterConfigSynchronization>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002570:	f000 f99c 	bl	80028ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002574:	2300      	movs	r3, #0
 8002576:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	2200      	movs	r2, #0
 8002588:	4619      	mov	r1, r3
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <MX_TIM4_Init+0xe0>)
 800258c:	f004 f8f4 	bl	8006778 <HAL_TIM_OC_ConfigChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002596:	f000 f989 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800259a:	bf00      	nop
 800259c:	3738      	adds	r7, #56	; 0x38
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000033c 	.word	0x2000033c
 80025a8:	40000800 	.word	0x40000800

080025ac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b096      	sub	sp, #88	; 0x58
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	611a      	str	r2, [r3, #16]
 80025da:	615a      	str	r2, [r3, #20]
 80025dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	2220      	movs	r2, #32
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f006 fed2 	bl	800938e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025ea:	4b44      	ldr	r3, [pc, #272]	; (80026fc <MX_TIM8_Init+0x150>)
 80025ec:	4a44      	ldr	r2, [pc, #272]	; (8002700 <MX_TIM8_Init+0x154>)
 80025ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80025f0:	4b42      	ldr	r3, [pc, #264]	; (80026fc <MX_TIM8_Init+0x150>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <MX_TIM8_Init+0x150>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80025fc:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <MX_TIM8_Init+0x150>)
 80025fe:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002602:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002604:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <MX_TIM8_Init+0x150>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800260a:	4b3c      	ldr	r3, [pc, #240]	; (80026fc <MX_TIM8_Init+0x150>)
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002610:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <MX_TIM8_Init+0x150>)
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002616:	4839      	ldr	r0, [pc, #228]	; (80026fc <MX_TIM8_Init+0x150>)
 8002618:	f003 fc30 	bl	8005e7c <HAL_TIM_Base_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002622:	f000 f943 	bl	80028ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800262a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800262c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002630:	4619      	mov	r1, r3
 8002632:	4832      	ldr	r0, [pc, #200]	; (80026fc <MX_TIM8_Init+0x150>)
 8002634:	f004 f9be 	bl	80069b4 <HAL_TIM_ConfigClockSource>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800263e:	f000 f935 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002642:	482e      	ldr	r0, [pc, #184]	; (80026fc <MX_TIM8_Init+0x150>)
 8002644:	f003 fd33 	bl	80060ae <HAL_TIM_PWM_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800264e:	f000 f92d 	bl	80028ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800265a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800265e:	4619      	mov	r1, r3
 8002660:	4826      	ldr	r0, [pc, #152]	; (80026fc <MX_TIM8_Init+0x150>)
 8002662:	f004 fdb3 	bl	80071cc <HAL_TIMEx_MasterConfigSynchronization>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800266c:	f000 f91e 	bl	80028ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002670:	2360      	movs	r3, #96	; 0x60
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002678:	2300      	movs	r3, #0
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800267c:	2300      	movs	r3, #0
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800268c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002690:	2200      	movs	r2, #0
 8002692:	4619      	mov	r1, r3
 8002694:	4819      	ldr	r0, [pc, #100]	; (80026fc <MX_TIM8_Init+0x150>)
 8002696:	f004 f8cb 	bl	8006830 <HAL_TIM_PWM_ConfigChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80026a0:	f000 f904 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a8:	2204      	movs	r2, #4
 80026aa:	4619      	mov	r1, r3
 80026ac:	4813      	ldr	r0, [pc, #76]	; (80026fc <MX_TIM8_Init+0x150>)
 80026ae:	f004 f8bf 	bl	8006830 <HAL_TIM_PWM_ConfigChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80026b8:	f000 f8f8 	bl	80028ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	4619      	mov	r1, r3
 80026de:	4807      	ldr	r0, [pc, #28]	; (80026fc <MX_TIM8_Init+0x150>)
 80026e0:	f004 fdf0 	bl	80072c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80026ea:	f000 f8df 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80026ee:	4803      	ldr	r0, [pc, #12]	; (80026fc <MX_TIM8_Init+0x150>)
 80026f0:	f001 f93e 	bl	8003970 <HAL_TIM_MspPostInit>

}
 80026f4:	bf00      	nop
 80026f6:	3758      	adds	r7, #88	; 0x58
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000384 	.word	0x20000384
 8002700:	40010400 	.word	0x40010400

08002704 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <MX_USART3_UART_Init+0x4c>)
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <MX_USART3_UART_Init+0x50>)
 800270c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <MX_USART3_UART_Init+0x4c>)
 8002710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <MX_USART3_UART_Init+0x4c>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <MX_USART3_UART_Init+0x4c>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <MX_USART3_UART_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <MX_USART3_UART_Init+0x4c>)
 800272a:	220c      	movs	r2, #12
 800272c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <MX_USART3_UART_Init+0x4c>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <MX_USART3_UART_Init+0x4c>)
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <MX_USART3_UART_Init+0x4c>)
 800273c:	f004 fe28 	bl	8007390 <HAL_UART_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002746:	f000 f8b1 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200003cc 	.word	0x200003cc
 8002754:	40004800 	.word	0x40004800

08002758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	; 0x28
 800275c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	4b49      	ldr	r3, [pc, #292]	; (8002898 <MX_GPIO_Init+0x140>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a48      	ldr	r2, [pc, #288]	; (8002898 <MX_GPIO_Init+0x140>)
 8002778:	f043 0310 	orr.w	r3, r3, #16
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b46      	ldr	r3, [pc, #280]	; (8002898 <MX_GPIO_Init+0x140>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b42      	ldr	r3, [pc, #264]	; (8002898 <MX_GPIO_Init+0x140>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a41      	ldr	r2, [pc, #260]	; (8002898 <MX_GPIO_Init+0x140>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <MX_GPIO_Init+0x140>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <MX_GPIO_Init+0x140>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a3a      	ldr	r2, [pc, #232]	; (8002898 <MX_GPIO_Init+0x140>)
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b38      	ldr	r3, [pc, #224]	; (8002898 <MX_GPIO_Init+0x140>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	4b34      	ldr	r3, [pc, #208]	; (8002898 <MX_GPIO_Init+0x140>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a33      	ldr	r2, [pc, #204]	; (8002898 <MX_GPIO_Init+0x140>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b31      	ldr	r3, [pc, #196]	; (8002898 <MX_GPIO_Init+0x140>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <MX_GPIO_Init+0x140>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a2c      	ldr	r2, [pc, #176]	; (8002898 <MX_GPIO_Init+0x140>)
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <MX_GPIO_Init+0x140>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin, GPIO_PIN_RESET);
 80027fa:	2200      	movs	r2, #0
 80027fc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002800:	4826      	ldr	r0, [pc, #152]	; (800289c <MX_GPIO_Init+0x144>)
 8002802:	f001 fe7d 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8002806:	2200      	movs	r2, #0
 8002808:	213c      	movs	r1, #60	; 0x3c
 800280a:	4825      	ldr	r0, [pc, #148]	; (80028a0 <MX_GPIO_Init+0x148>)
 800280c:	f001 fe78 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002810:	2200      	movs	r2, #0
 8002812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002816:	4823      	ldr	r0, [pc, #140]	; (80028a4 <MX_GPIO_Init+0x14c>)
 8002818:	f001 fe72 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET__Pin OLED_DATA_COMMAND__Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin;
 800281c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002822:	2301      	movs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4819      	ldr	r0, [pc, #100]	; (800289c <MX_GPIO_Init+0x144>)
 8002836:	f001 fcc7 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTORA_IN2_Pin MOTORA_IN1_Pin MOTORB_IN1_Pin MOTORB_IN2_Pin */
  GPIO_InitStruct.Pin = MOTORA_IN2_Pin|MOTORA_IN1_Pin|MOTORB_IN1_Pin|MOTORB_IN2_Pin;
 800283a:	233c      	movs	r3, #60	; 0x3c
 800283c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283e:	2301      	movs	r3, #1
 8002840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	4813      	ldr	r0, [pc, #76]	; (80028a0 <MX_GPIO_Init+0x148>)
 8002852:	f001 fcb9 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800285a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285c:	2301      	movs	r3, #1
 800285e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	480d      	ldr	r0, [pc, #52]	; (80028a4 <MX_GPIO_Init+0x14c>)
 8002870:	f001 fcaa 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8002874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800287e:	2301      	movs	r3, #1
 8002880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	4807      	ldr	r0, [pc, #28]	; (80028a8 <MX_GPIO_Init+0x150>)
 800288a:	f001 fc9d 	bl	80041c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	; 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40021000 	.word	0x40021000
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40020c00 	.word	0x40020c00

080028ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b0:	b672      	cpsid	i
}
 80028b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <Error_Handler+0x8>
	...

080028b8 <motor_init>:
static PidDef pidDist;
const static float Kp_dist = 0.47;
const static float Ki_dist = 0;
const static float Kd_dist = 0.05;

void motor_init(TIM_HandleTypeDef *pwm, TIM_HandleTypeDef *l_enc, TIM_HandleTypeDef *r_enc) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
	//assign timer pointers.
	motor_pwm_tim = pwm;
 80028c4:	4a1d      	ldr	r2, [pc, #116]	; (800293c <motor_init+0x84>)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6013      	str	r3, [r2, #0]
	l_enc_tim = l_enc;
 80028ca:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <motor_init+0x88>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	6013      	str	r3, [r2, #0]
	r_enc_tim = r_enc;
 80028d0:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <motor_init+0x8c>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]

	//start Encoders and PWM for L, R motors.
	HAL_TIM_Encoder_Start_IT(l_enc, TIM_CHANNEL_ALL);
 80028d6:	213c      	movs	r1, #60	; 0x3c
 80028d8:	68b8      	ldr	r0, [r7, #8]
 80028da:	f003 fdaf 	bl	800643c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(r_enc, TIM_CHANNEL_ALL);
 80028de:	213c      	movs	r1, #60	; 0x3c
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f003 fdab 	bl	800643c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(pwm, L_CHANNEL);
 80028e6:	2100      	movs	r1, #0
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f003 fc39 	bl	8006160 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm, R_CHANNEL);
 80028ee:	2104      	movs	r1, #4
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f003 fc35 	bl	8006160 <HAL_TIM_PWM_Start>

	//initialize PID values.
	pid_init(&pidMatch, Kp_match, Ki_match, Kd_match);
 80028f6:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 80028fa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002948 <motor_init+0x90>
 80028fe:	eddf 6a13 	vldr	s13, [pc, #76]	; 800294c <motor_init+0x94>
 8002902:	eeb0 1a66 	vmov.f32	s2, s13
 8002906:	eef0 0a47 	vmov.f32	s1, s14
 800290a:	eeb0 0a67 	vmov.f32	s0, s15
 800290e:	4810      	ldr	r0, [pc, #64]	; (8002950 <motor_init+0x98>)
 8002910:	f000 fca0 	bl	8003254 <pid_init>
	pid_init(&pidDist, Kp_dist, Ki_dist, Kd_dist);
 8002914:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002954 <motor_init+0x9c>
 8002918:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002958 <motor_init+0xa0>
 800291c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800295c <motor_init+0xa4>
 8002920:	eeb0 1a66 	vmov.f32	s2, s13
 8002924:	eef0 0a47 	vmov.f32	s1, s14
 8002928:	eeb0 0a67 	vmov.f32	s0, s15
 800292c:	480c      	ldr	r0, [pc, #48]	; (8002960 <motor_init+0xa8>)
 800292e:	f000 fc91 	bl	8003254 <pid_init>
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000470 	.word	0x20000470
 8002940:	20000474 	.word	0x20000474
 8002944:	20000478 	.word	0x20000478
 8002948:	3cf5c28f 	.word	0x3cf5c28f
 800294c:	3ca3d70a 	.word	0x3ca3d70a
 8002950:	20000484 	.word	0x20000484
 8002954:	3ef0a3d7 	.word	0x3ef0a3d7
 8002958:	00000000 	.word	0x00000000
 800295c:	3d4ccccd 	.word	0x3d4ccccd
 8002960:	20000498 	.word	0x20000498

08002964 <timer_reset>:

static void timer_reset(TIM_HandleTypeDef *htim) {
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim, 0);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2200      	movs	r2, #0
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <setPwmLR>:

static void setPwmLR() {
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
	//set L, R channels.
	__HAL_TIM_SetCompare(motor_pwm_tim, L_CHANNEL,
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <setPwmLR+0x40>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	f241 7270 	movw	r2, #6000	; 0x1770
 800298c:	4293      	cmp	r3, r2
 800298e:	bf28      	it	cs
 8002990:	4613      	movcs	r3, r2
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <setPwmLR+0x44>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	635a      	str	r2, [r3, #52]	; 0x34
		lPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: lPwmVal);
	__HAL_TIM_SetCompare(motor_pwm_tim, R_CHANNEL,
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <setPwmLR+0x48>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	f241 7270 	movw	r2, #6000	; 0x1770
 80029a4:	4293      	cmp	r3, r2
 80029a6:	bf28      	it	cs
 80029a8:	4613      	movcs	r3, r2
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <setPwmLR+0x44>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	639a      	str	r2, [r3, #56]	; 0x38
		rPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: rPwmVal);
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000480 	.word	0x20000480
 80029c4:	20000470 	.word	0x20000470
 80029c8:	20000482 	.word	0x20000482

080029cc <resetPwmParams>:

static void resetPwmParams() {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
	pid_reset(&pidMatch);
 80029d0:	4803      	ldr	r0, [pc, #12]	; (80029e0 <resetPwmParams+0x14>)
 80029d2:	f000 fc2d 	bl	8003230 <pid_reset>
	pid_reset(&pidDist);
 80029d6:	4803      	ldr	r0, [pc, #12]	; (80029e4 <resetPwmParams+0x18>)
 80029d8:	f000 fc2a 	bl	8003230 <pid_reset>
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000484 	.word	0x20000484
 80029e4:	20000498 	.word	0x20000498

080029e8 <resetEncoders>:

static void resetEncoders() {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
	timer_reset(l_enc_tim);
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <resetEncoders+0x1c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ffb7 	bl	8002964 <timer_reset>
	timer_reset(r_enc_tim);
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <resetEncoders+0x20>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ffb2 	bl	8002964 <timer_reset>
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000474 	.word	0x20000474
 8002a08:	20000478 	.word	0x20000478

08002a0c <motor_getDist>:

float motor_getDist() {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
	uint32_t lCounter = __HAL_TIM_GET_COUNTER(l_enc_tim),
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <motor_getDist+0x68>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	60bb      	str	r3, [r7, #8]
			rCounter = __HAL_TIM_GET_COUNTER(r_enc_tim);
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <motor_getDist+0x6c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	607b      	str	r3, [r7, #4]
	int16_t lCount = (int16_t) lCounter,
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	81fb      	strh	r3, [r7, #14]
			rCount = (int16_t) rCounter;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	81bb      	strh	r3, [r7, #12]
	if (lCount < 0) lCount = -lCount;
 8002a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	da03      	bge.n	8002a3e <motor_getDist+0x32>
 8002a36:	89fb      	ldrh	r3, [r7, #14]
 8002a38:	425b      	negs	r3, r3
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	81fb      	strh	r3, [r7, #14]
	if (rCount < 0) rCount = -rCount;
 8002a3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da03      	bge.n	8002a4e <motor_getDist+0x42>
 8002a46:	89bb      	ldrh	r3, [r7, #12]
 8002a48:	425b      	negs	r3, r3
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	81bb      	strh	r3, [r7, #12]

	uint16_t pulses = ((uint16_t) lCount) + ((uint16_t) rCount);
 8002a4e:	89fa      	ldrh	r2, [r7, #14]
 8002a50:	89bb      	ldrh	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	807b      	strh	r3, [r7, #2]
	pulses >>= 2;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	807b      	strh	r3, [r7, #2]

	return get_distance_cm(pulses);
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f8da 	bl	8001c18 <get_distance_cm>
 8002a64:	eef0 7a40 	vmov.f32	s15, s0
}
 8002a68:	eeb0 0a67 	vmov.f32	s0, s15
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000474 	.word	0x20000474
 8002a78:	20000478 	.word	0x20000478

08002a7c <motor_pwmCorrection>:

//PWM at fixed intervals.
void motor_pwmCorrection(int8_t dir, float wDiff, float rBack, float rRobot, float distDiff, float brakingDist) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	ed87 0a04 	vstr	s0, [r7, #16]
 8002a88:	edc7 0a03 	vstr	s1, [r7, #12]
 8002a8c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002a90:	edc7 1a01 	vstr	s3, [r7, #4]
 8002a94:	ed87 2a00 	vstr	s4, [r7]
 8002a98:	75fb      	strb	r3, [r7, #23]
	//adjust speed based on distance to drive.
	if (distDiff < brakingDist) {
 8002a9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a9e:	edd7 7a00 	vldr	s15, [r7]
 8002aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aaa:	d51f      	bpl.n	8002aec <motor_pwmCorrection+0x70>
		pwmValAccel = MOTOR_PWM_MIN + pid_adjust(&pidDist, distDiff) / brakingDist * (pwmValTarget - MOTOR_PWM_MIN);
 8002aac:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ab0:	4870      	ldr	r0, [pc, #448]	; (8002c74 <motor_pwmCorrection+0x1f8>)
 8002ab2:	f000 fbe9 	bl	8003288 <pid_adjust>
 8002ab6:	eef0 6a40 	vmov.f32	s13, s0
 8002aba:	edd7 7a00 	vldr	s15, [r7]
 8002abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ac2:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <motor_pwmCorrection+0x1fc>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	3bfa      	subs	r3, #250	; 0xfa
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002c7c <motor_pwmCorrection+0x200>
 8002ad8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae0:	ee17 3a90 	vmov	r3, s15
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	4b66      	ldr	r3, [pc, #408]	; (8002c80 <motor_pwmCorrection+0x204>)
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	e00b      	b.n	8002b04 <motor_pwmCorrection+0x88>
	} else if (pwmValAccel < pwmValTarget) pwmValAccel += MOTOR_PWM_ACCEL;
 8002aec:	4b64      	ldr	r3, [pc, #400]	; (8002c80 <motor_pwmCorrection+0x204>)
 8002aee:	881a      	ldrh	r2, [r3, #0]
 8002af0:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <motor_pwmCorrection+0x1fc>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d205      	bcs.n	8002b04 <motor_pwmCorrection+0x88>
 8002af8:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <motor_pwmCorrection+0x204>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	330f      	adds	r3, #15
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	4b5f      	ldr	r3, [pc, #380]	; (8002c80 <motor_pwmCorrection+0x204>)
 8002b02:	801a      	strh	r2, [r3, #0]
	if (pwmValAccel > pwmValTarget) pwmValAccel = pwmValTarget;
 8002b04:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <motor_pwmCorrection+0x204>)
 8002b06:	881a      	ldrh	r2, [r3, #0]
 8002b08:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <motor_pwmCorrection+0x1fc>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d903      	bls.n	8002b18 <motor_pwmCorrection+0x9c>
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <motor_pwmCorrection+0x1fc>)
 8002b12:	881a      	ldrh	r2, [r3, #0]
 8002b14:	4b5a      	ldr	r3, [pc, #360]	; (8002c80 <motor_pwmCorrection+0x204>)
 8002b16:	801a      	strh	r2, [r3, #0]

	float offset = pid_adjust(&pidMatch, wDiff) * pwmValAccel / pwmValTarget;
 8002b18:	ed97 0a04 	vldr	s0, [r7, #16]
 8002b1c:	4859      	ldr	r0, [pc, #356]	; (8002c84 <motor_pwmCorrection+0x208>)
 8002b1e:	f000 fbb3 	bl	8003288 <pid_adjust>
 8002b22:	eeb0 7a40 	vmov.f32	s14, s0
 8002b26:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <motor_pwmCorrection+0x204>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b32:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b36:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <motor_pwmCorrection+0x1fc>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//	float offset = 0;
	float lScale = 1, rScale = 1;
 8002b4a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b54:	61fb      	str	r3, [r7, #28]

	if (rBack != 0 && rRobot != 0) {
 8002b56:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b62:	d04d      	beq.n	8002c00 <motor_pwmCorrection+0x184>
 8002b64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b70:	d046      	beq.n	8002c00 <motor_pwmCorrection+0x184>
		float B2 = WHEELBASE_CM / 2;
 8002b72:	4b45      	ldr	r3, [pc, #276]	; (8002c88 <motor_pwmCorrection+0x20c>)
 8002b74:	61bb      	str	r3, [r7, #24]

		if (rBack < 0 && rRobot < 0) {
 8002b76:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b82:	d525      	bpl.n	8002bd0 <motor_pwmCorrection+0x154>
 8002b84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b90:	d51e      	bpl.n	8002bd0 <motor_pwmCorrection+0x154>
			lScale = (-rBack - B2) / -rRobot;
 8002b92:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b96:	eeb1 7a67 	vneg.f32	s14, s15
 8002b9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba2:	eef1 6a67 	vneg.f32	s13, s15
 8002ba6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bae:	edc7 7a08 	vstr	s15, [r7, #32]
			rScale = (-rBack + B2) / -rRobot;
 8002bb2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bbe:	eef1 6a67 	vneg.f32	s13, s15
 8002bc2:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bca:	edc7 7a07 	vstr	s15, [r7, #28]
 8002bce:	e017      	b.n	8002c00 <motor_pwmCorrection+0x184>
		} else {
			lScale = (rBack + B2) / rRobot;
 8002bd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bd8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002bdc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002be4:	edc7 7a08 	vstr	s15, [r7, #32]
			rScale = (rBack - B2) / rRobot;
 8002be8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bec:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bf0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002bf4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bfc:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}

	if (dir < 0) {
 8002c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	da05      	bge.n	8002c14 <motor_pwmCorrection+0x198>
		offset = -offset;
 8002c08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c0c:	eef1 7a67 	vneg.f32	s15, s15
 8002c10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	lPwmVal = pwmValAccel * lScale - offset;
 8002c14:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <motor_pwmCorrection+0x204>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c20:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c34:	ee17 3a90 	vmov	r3, s15
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <motor_pwmCorrection+0x210>)
 8002c3c:	801a      	strh	r2, [r3, #0]
	rPwmVal = pwmValAccel * rScale + offset;
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <motor_pwmCorrection+0x204>)
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c5e:	ee17 3a90 	vmov	r3, s15
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <motor_pwmCorrection+0x214>)
 8002c66:	801a      	strh	r2, [r3, #0]

	setPwmLR();
 8002c68:	f7ff fe8a 	bl	8002980 <setPwmLR>
}
 8002c6c:	bf00      	nop
 8002c6e:	3728      	adds	r7, #40	; 0x28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000498 	.word	0x20000498
 8002c78:	2000047e 	.word	0x2000047e
 8002c7c:	437a0000 	.word	0x437a0000
 8002c80:	2000047c 	.word	0x2000047c
 8002c84:	20000484 	.word	0x20000484
 8002c88:	4101999a 	.word	0x4101999a
 8002c8c:	20000480 	.word	0x20000480
 8002c90:	20000482 	.word	0x20000482

08002c94 <setDriveDir>:

static void setDriveDir(int8_t dir) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
	if (dir > 0) {
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	dd14      	ble.n	8002cd0 <setDriveDir+0x3c>
		//forward.
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_SET);
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	2108      	movs	r1, #8
 8002caa:	4822      	ldr	r0, [pc, #136]	; (8002d34 <setDriveDir+0xa0>)
 8002cac:	f001 fc28 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2104      	movs	r1, #4
 8002cb4:	481f      	ldr	r0, [pc, #124]	; (8002d34 <setDriveDir+0xa0>)
 8002cb6:	f001 fc23 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_SET);
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2110      	movs	r1, #16
 8002cbe:	481d      	ldr	r0, [pc, #116]	; (8002d34 <setDriveDir+0xa0>)
 8002cc0:	f001 fc1e 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2120      	movs	r1, #32
 8002cc8:	481a      	ldr	r0, [pc, #104]	; (8002d34 <setDriveDir+0xa0>)
 8002cca:	f001 fc19 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
	}
}
 8002cce:	e02c      	b.n	8002d2a <setDriveDir+0x96>
	} else if (dir < 0) {
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	da14      	bge.n	8002d02 <setDriveDir+0x6e>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2108      	movs	r1, #8
 8002cdc:	4815      	ldr	r0, [pc, #84]	; (8002d34 <setDriveDir+0xa0>)
 8002cde:	f001 fc0f 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_SET);
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	2104      	movs	r1, #4
 8002ce6:	4813      	ldr	r0, [pc, #76]	; (8002d34 <setDriveDir+0xa0>)
 8002ce8:	f001 fc0a 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2110      	movs	r1, #16
 8002cf0:	4810      	ldr	r0, [pc, #64]	; (8002d34 <setDriveDir+0xa0>)
 8002cf2:	f001 fc05 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_SET);
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	2120      	movs	r1, #32
 8002cfa:	480e      	ldr	r0, [pc, #56]	; (8002d34 <setDriveDir+0xa0>)
 8002cfc:	f001 fc00 	bl	8004500 <HAL_GPIO_WritePin>
}
 8002d00:	e013      	b.n	8002d2a <setDriveDir+0x96>
		HAL_GPIO_WritePin(MOTORA_IN1_GPIO_Port, MOTORA_IN1_Pin, GPIO_PIN_RESET);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2108      	movs	r1, #8
 8002d06:	480b      	ldr	r0, [pc, #44]	; (8002d34 <setDriveDir+0xa0>)
 8002d08:	f001 fbfa 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORA_IN2_GPIO_Port, MOTORA_IN2_Pin, GPIO_PIN_RESET);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2104      	movs	r1, #4
 8002d10:	4808      	ldr	r0, [pc, #32]	; (8002d34 <setDriveDir+0xa0>)
 8002d12:	f001 fbf5 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN1_GPIO_Port, MOTORB_IN1_Pin, GPIO_PIN_RESET);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2110      	movs	r1, #16
 8002d1a:	4806      	ldr	r0, [pc, #24]	; (8002d34 <setDriveDir+0xa0>)
 8002d1c:	f001 fbf0 	bl	8004500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORB_IN2_GPIO_Port, MOTORB_IN2_Pin, GPIO_PIN_RESET);
 8002d20:	2200      	movs	r2, #0
 8002d22:	2120      	movs	r1, #32
 8002d24:	4803      	ldr	r0, [pc, #12]	; (8002d34 <setDriveDir+0xa0>)
 8002d26:	f001 fbeb 	bl	8004500 <HAL_GPIO_WritePin>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40020000 	.word	0x40020000

08002d38 <motor_setDrive>:

//speed: 0 - 100
void motor_setDrive(int8_t dir, uint8_t speed) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	460a      	mov	r2, r1
 8002d42:	71fb      	strb	r3, [r7, #7]
 8002d44:	4613      	mov	r3, r2
 8002d46:	71bb      	strb	r3, [r7, #6]
	if (dir == 0) {
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d103      	bne.n	8002d58 <motor_setDrive+0x20>
		setDriveDir(0);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7ff ff9f 	bl	8002c94 <setDriveDir>
		return;
 8002d56:	e02d      	b.n	8002db4 <motor_setDrive+0x7c>
	}

	//derive PWM value.
	pwmValTarget = MOTOR_PWM_MAX / 100 * speed;
 8002d58:	79bb      	ldrb	r3, [r7, #6]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <motor_setDrive+0x84>)
 8002d68:	801a      	strh	r2, [r3, #0]
	if (pwmValTarget > 0) pwmValTarget--;
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <motor_setDrive+0x84>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <motor_setDrive+0x46>
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <motor_setDrive+0x84>)
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <motor_setDrive+0x84>)
 8002d7c:	801a      	strh	r2, [r3, #0]

	pwmValAccel = speed > 0
 8002d7e:	79bb      	ldrb	r3, [r7, #6]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <motor_setDrive+0x50>
 8002d84:	22fa      	movs	r2, #250	; 0xfa
 8002d86:	e000      	b.n	8002d8a <motor_setDrive+0x52>
 8002d88:	2200      	movs	r2, #0
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <motor_setDrive+0x88>)
 8002d8c:	801a      	strh	r2, [r3, #0]
		? MOTOR_PWM_MIN
		: 0;
	lPwmVal = rPwmVal = pwmValAccel;
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <motor_setDrive+0x88>)
 8002d90:	881a      	ldrh	r2, [r3, #0]
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <motor_setDrive+0x8c>)
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <motor_setDrive+0x8c>)
 8002d98:	881a      	ldrh	r2, [r3, #0]
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <motor_setDrive+0x90>)
 8002d9c:	801a      	strh	r2, [r3, #0]

	//reset.
	resetEncoders();
 8002d9e:	f7ff fe23 	bl	80029e8 <resetEncoders>
	resetPwmParams();
 8002da2:	f7ff fe13 	bl	80029cc <resetPwmParams>

	setDriveDir(dir);
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff72 	bl	8002c94 <setDriveDir>
	setPwmLR();
 8002db0:	f7ff fde6 	bl	8002980 <setPwmLR>
}
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000047e 	.word	0x2000047e
 8002dc0:	2000047c 	.word	0x2000047c
 8002dc4:	20000482 	.word	0x20000482
 8002dc8:	20000480 	.word	0x20000480

08002dcc <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	460a      	mov	r2, r1
 8002dd6:	71fb      	strb	r3, [r7, #7]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 8002ddc:	79bb      	ldrb	r3, [r7, #6]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d106      	bne.n	8002df0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 8002de2:	2201      	movs	r2, #1
 8002de4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002de8:	481c      	ldr	r0, [pc, #112]	; (8002e5c <OLED_WR_Byte+0x90>)
 8002dea:	f001 fb89 	bl	8004500 <HAL_GPIO_WritePin>
 8002dee:	e005      	b.n	8002dfc <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 8002df0:	2200      	movs	r2, #0
 8002df2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002df6:	4819      	ldr	r0, [pc, #100]	; (8002e5c <OLED_WR_Byte+0x90>)
 8002df8:	f001 fb82 	bl	8004500 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e01f      	b.n	8002e42 <OLED_WR_Byte+0x76>
	{ // Complete the code below
		OLED_SCLK_Clr();
 8002e02:	2200      	movs	r2, #0
 8002e04:	2120      	movs	r1, #32
 8002e06:	4815      	ldr	r0, [pc, #84]	; (8002e5c <OLED_WR_Byte+0x90>)
 8002e08:	f001 fb7a 	bl	8004500 <HAL_GPIO_WritePin>
		if (dat & (0x80 >> i)) OLED_SDIN_Set();
 8002e0c:	79fa      	ldrb	r2, [r7, #7]
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	fa41 f303 	asr.w	r3, r1, r3
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <OLED_WR_Byte+0x5c>
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	2140      	movs	r1, #64	; 0x40
 8002e20:	480e      	ldr	r0, [pc, #56]	; (8002e5c <OLED_WR_Byte+0x90>)
 8002e22:	f001 fb6d 	bl	8004500 <HAL_GPIO_WritePin>
 8002e26:	e004      	b.n	8002e32 <OLED_WR_Byte+0x66>
		else OLED_SDIN_Clr();
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2140      	movs	r1, #64	; 0x40
 8002e2c:	480b      	ldr	r0, [pc, #44]	; (8002e5c <OLED_WR_Byte+0x90>)
 8002e2e:	f001 fb67 	bl	8004500 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8002e32:	2201      	movs	r2, #1
 8002e34:	2120      	movs	r1, #32
 8002e36:	4809      	ldr	r0, [pc, #36]	; (8002e5c <OLED_WR_Byte+0x90>)
 8002e38:	f001 fb62 	bl	8004500 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	2b07      	cmp	r3, #7
 8002e46:	d9dc      	bls.n	8002e02 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e4e:	4803      	ldr	r0, [pc, #12]	; (8002e5c <OLED_WR_Byte+0x90>)
 8002e50:	f001 fb56 	bl	8004500 <HAL_GPIO_WritePin>
} 
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000

08002e60 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	71fb      	strb	r3, [r7, #7]
 8002e6a:	e026      	b.n	8002eba <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	3b50      	subs	r3, #80	; 0x50
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ffa9 	bl	8002dcc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7ff ffa5 	bl	8002dcc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8002e82:	2100      	movs	r1, #0
 8002e84:	2010      	movs	r0, #16
 8002e86:	f7ff ffa1 	bl	8002dcc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	71bb      	strb	r3, [r7, #6]
 8002e8e:	e00d      	b.n	8002eac <OLED_Refresh_Gram+0x4c>
 8002e90:	79ba      	ldrb	r2, [r7, #6]
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	490d      	ldr	r1, [pc, #52]	; (8002ecc <OLED_Refresh_Gram+0x6c>)
 8002e96:	00d2      	lsls	r2, r2, #3
 8002e98:	440a      	add	r2, r1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff93 	bl	8002dcc <OLED_WR_Byte>
 8002ea6:	79bb      	ldrb	r3, [r7, #6]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	71bb      	strb	r3, [r7, #6]
 8002eac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	daed      	bge.n	8002e90 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	71fb      	strb	r3, [r7, #7]
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b07      	cmp	r3, #7
 8002ebe:	d9d5      	bls.n	8002e6c <OLED_Refresh_Gram+0xc>
	}
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200004ac 	.word	0x200004ac

08002ed0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	71fb      	strb	r3, [r7, #7]
 8002eda:	e014      	b.n	8002f06 <OLED_Clear+0x36>
 8002edc:	2300      	movs	r3, #0
 8002ede:	71bb      	strb	r3, [r7, #6]
 8002ee0:	e00a      	b.n	8002ef8 <OLED_Clear+0x28>
 8002ee2:	79ba      	ldrb	r2, [r7, #6]
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	490c      	ldr	r1, [pc, #48]	; (8002f18 <OLED_Clear+0x48>)
 8002ee8:	00d2      	lsls	r2, r2, #3
 8002eea:	440a      	add	r2, r1
 8002eec:	4413      	add	r3, r2
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	79bb      	ldrb	r3, [r7, #6]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	71bb      	strb	r3, [r7, #6]
 8002ef8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	daf0      	bge.n	8002ee2 <OLED_Clear+0x12>
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	3301      	adds	r3, #1
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	2b07      	cmp	r3, #7
 8002f0a:	d9e7      	bls.n	8002edc <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8002f0c:	f7ff ffa8 	bl	8002e60 <OLED_Refresh_Gram>
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	200004ac 	.word	0x200004ac

08002f1c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
 8002f26:	460b      	mov	r3, r1
 8002f28:	71bb      	strb	r3, [r7, #6]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db41      	blt.n	8002fbe <OLED_DrawPoint+0xa2>
 8002f3a:	79bb      	ldrb	r3, [r7, #6]
 8002f3c:	2b3f      	cmp	r3, #63	; 0x3f
 8002f3e:	d83e      	bhi.n	8002fbe <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8002f40:	79bb      	ldrb	r3, [r7, #6]
 8002f42:	08db      	lsrs	r3, r3, #3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f1c3 0307 	rsb	r3, r3, #7
 8002f4a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8002f4c:	79bb      	ldrb	r3, [r7, #6]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8002f54:	7b7b      	ldrb	r3, [r7, #13]
 8002f56:	f1c3 0307 	rsb	r3, r3, #7
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8002f62:	797b      	ldrb	r3, [r7, #5]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d012      	beq.n	8002f8e <OLED_DrawPoint+0x72>
 8002f68:	79fa      	ldrb	r2, [r7, #7]
 8002f6a:	7bbb      	ldrb	r3, [r7, #14]
 8002f6c:	4917      	ldr	r1, [pc, #92]	; (8002fcc <OLED_DrawPoint+0xb0>)
 8002f6e:	00d2      	lsls	r2, r2, #3
 8002f70:	440a      	add	r2, r1
 8002f72:	4413      	add	r3, r2
 8002f74:	7818      	ldrb	r0, [r3, #0]
 8002f76:	79fa      	ldrb	r2, [r7, #7]
 8002f78:	7bbb      	ldrb	r3, [r7, #14]
 8002f7a:	7bf9      	ldrb	r1, [r7, #15]
 8002f7c:	4301      	orrs	r1, r0
 8002f7e:	b2c8      	uxtb	r0, r1
 8002f80:	4912      	ldr	r1, [pc, #72]	; (8002fcc <OLED_DrawPoint+0xb0>)
 8002f82:	00d2      	lsls	r2, r2, #3
 8002f84:	440a      	add	r2, r1
 8002f86:	4413      	add	r3, r2
 8002f88:	4602      	mov	r2, r0
 8002f8a:	701a      	strb	r2, [r3, #0]
 8002f8c:	e018      	b.n	8002fc0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8002f8e:	79fa      	ldrb	r2, [r7, #7]
 8002f90:	7bbb      	ldrb	r3, [r7, #14]
 8002f92:	490e      	ldr	r1, [pc, #56]	; (8002fcc <OLED_DrawPoint+0xb0>)
 8002f94:	00d2      	lsls	r2, r2, #3
 8002f96:	440a      	add	r2, r1
 8002f98:	4413      	add	r3, r2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b25a      	sxtb	r2, r3
 8002f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	b25b      	sxtb	r3, r3
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	b259      	sxtb	r1, r3
 8002faa:	79fa      	ldrb	r2, [r7, #7]
 8002fac:	7bbb      	ldrb	r3, [r7, #14]
 8002fae:	b2c8      	uxtb	r0, r1
 8002fb0:	4906      	ldr	r1, [pc, #24]	; (8002fcc <OLED_DrawPoint+0xb0>)
 8002fb2:	00d2      	lsls	r2, r2, #3
 8002fb4:	440a      	add	r2, r1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4602      	mov	r2, r0
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e000      	b.n	8002fc0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8002fbe:	bf00      	nop
}
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	200004ac 	.word	0x200004ac

08002fd0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	71fb      	strb	r3, [r7, #7]
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71bb      	strb	r3, [r7, #6]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	717b      	strb	r3, [r7, #5]
 8002fea:	4613      	mov	r3, r2
 8002fec:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8002ff2:	797b      	ldrb	r3, [r7, #5]
 8002ff4:	3b20      	subs	r3, #32
 8002ff6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73bb      	strb	r3, [r7, #14]
 8002ffc:	e04d      	b.n	800309a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8002ffe:	793b      	ldrb	r3, [r7, #4]
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d10b      	bne.n	800301c <OLED_ShowChar+0x4c>
 8003004:	797a      	ldrb	r2, [r7, #5]
 8003006:	7bb9      	ldrb	r1, [r7, #14]
 8003008:	4828      	ldr	r0, [pc, #160]	; (80030ac <OLED_ShowChar+0xdc>)
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4403      	add	r3, r0
 8003014:	440b      	add	r3, r1
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	73fb      	strb	r3, [r7, #15]
 800301a:	e007      	b.n	800302c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800301c:	797a      	ldrb	r2, [r7, #5]
 800301e:	7bbb      	ldrb	r3, [r7, #14]
 8003020:	4923      	ldr	r1, [pc, #140]	; (80030b0 <OLED_ShowChar+0xe0>)
 8003022:	0112      	lsls	r2, r2, #4
 8003024:	440a      	add	r2, r1
 8003026:	4413      	add	r3, r2
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800302c:	2300      	movs	r3, #0
 800302e:	737b      	strb	r3, [r7, #13]
 8003030:	e02d      	b.n	800308e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	da07      	bge.n	800304a <OLED_ShowChar+0x7a>
 800303a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800303e:	79b9      	ldrb	r1, [r7, #6]
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff6a 	bl	8002f1c <OLED_DrawPoint>
 8003048:	e00c      	b.n	8003064 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800304a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf0c      	ite	eq
 8003052:	2301      	moveq	r3, #1
 8003054:	2300      	movne	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	79b9      	ldrb	r1, [r7, #6]
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff ff5c 	bl	8002f1c <OLED_DrawPoint>
			temp<<=1;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
			y++;
 800306a:	79bb      	ldrb	r3, [r7, #6]
 800306c:	3301      	adds	r3, #1
 800306e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003070:	79ba      	ldrb	r2, [r7, #6]
 8003072:	7b3b      	ldrb	r3, [r7, #12]
 8003074:	1ad2      	subs	r2, r2, r3
 8003076:	793b      	ldrb	r3, [r7, #4]
 8003078:	429a      	cmp	r2, r3
 800307a:	d105      	bne.n	8003088 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800307c:	7b3b      	ldrb	r3, [r7, #12]
 800307e:	71bb      	strb	r3, [r7, #6]
				x++;
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	3301      	adds	r3, #1
 8003084:	71fb      	strb	r3, [r7, #7]
				break;
 8003086:	e005      	b.n	8003094 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8003088:	7b7b      	ldrb	r3, [r7, #13]
 800308a:	3301      	adds	r3, #1
 800308c:	737b      	strb	r3, [r7, #13]
 800308e:	7b7b      	ldrb	r3, [r7, #13]
 8003090:	2b07      	cmp	r3, #7
 8003092:	d9ce      	bls.n	8003032 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8003094:	7bbb      	ldrb	r3, [r7, #14]
 8003096:	3301      	adds	r3, #1
 8003098:	73bb      	strb	r3, [r7, #14]
 800309a:	7bba      	ldrb	r2, [r7, #14]
 800309c:	793b      	ldrb	r3, [r7, #4]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d3ad      	bcc.n	8002ffe <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}
 80030ac:	0800e6d4 	.word	0x0800e6d4
 80030b0:	0800eb48 	.word	0x0800eb48

080030b4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	4603      	mov	r3, r0
 80030bc:	603a      	str	r2, [r7, #0]
 80030be:	71fb      	strb	r3, [r7, #7]
 80030c0:	460b      	mov	r3, r1
 80030c2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80030c4:	e01f      	b.n	8003106 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	2b7a      	cmp	r3, #122	; 0x7a
 80030ca:	d904      	bls.n	80030d6 <OLED_ShowString+0x22>
 80030cc:	2300      	movs	r3, #0
 80030ce:	71fb      	strb	r3, [r7, #7]
 80030d0:	79bb      	ldrb	r3, [r7, #6]
 80030d2:	3310      	adds	r3, #16
 80030d4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80030d6:	79bb      	ldrb	r3, [r7, #6]
 80030d8:	2b3a      	cmp	r3, #58	; 0x3a
 80030da:	d905      	bls.n	80030e8 <OLED_ShowString+0x34>
 80030dc:	2300      	movs	r3, #0
 80030de:	71fb      	strb	r3, [r7, #7]
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	71bb      	strb	r3, [r7, #6]
 80030e4:	f7ff fef4 	bl	8002ed0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	79b9      	ldrb	r1, [r7, #6]
 80030ee:	79f8      	ldrb	r0, [r7, #7]
 80030f0:	2301      	movs	r3, #1
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	230c      	movs	r3, #12
 80030f6:	f7ff ff6b 	bl	8002fd0 <OLED_ShowChar>
        x+=8;
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	3308      	adds	r3, #8
 80030fe:	71fb      	strb	r3, [r7, #7]
        p++;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1db      	bne.n	80030c6 <OLED_ShowString+0x12>
    }  
}	 
 800310e:	bf00      	nop
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <OLED_Init>:

void OLED_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800311c:	f002 fa2e 	bl	800557c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003120:	4b41      	ldr	r3, [pc, #260]	; (8003228 <OLED_Init+0x110>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4a40      	ldr	r2, [pc, #256]	; (8003228 <OLED_Init+0x110>)
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
 800312c:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <OLED_Init+0x110>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	4a3d      	ldr	r2, [pc, #244]	; (8003228 <OLED_Init+0x110>)
 8003132:	f023 0304 	bic.w	r3, r3, #4
 8003136:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8003138:	f002 fa34 	bl	80055a4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800313c:	2200      	movs	r2, #0
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	483a      	ldr	r0, [pc, #232]	; (800322c <OLED_Init+0x114>)
 8003142:	f001 f9dd 	bl	8004500 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003146:	2064      	movs	r0, #100	; 0x64
 8003148:	f000 fe76 	bl	8003e38 <HAL_Delay>
	OLED_RST_Set();
 800314c:	2201      	movs	r2, #1
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	4836      	ldr	r0, [pc, #216]	; (800322c <OLED_Init+0x114>)
 8003152:	f001 f9d5 	bl	8004500 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8003156:	2100      	movs	r1, #0
 8003158:	20ae      	movs	r0, #174	; 0xae
 800315a:	f7ff fe37 	bl	8002dcc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800315e:	2100      	movs	r1, #0
 8003160:	20d5      	movs	r0, #213	; 0xd5
 8003162:	f7ff fe33 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8003166:	2100      	movs	r1, #0
 8003168:	2050      	movs	r0, #80	; 0x50
 800316a:	f7ff fe2f 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800316e:	2100      	movs	r1, #0
 8003170:	20a8      	movs	r0, #168	; 0xa8
 8003172:	f7ff fe2b 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8003176:	2100      	movs	r1, #0
 8003178:	203f      	movs	r0, #63	; 0x3f
 800317a:	f7ff fe27 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800317e:	2100      	movs	r1, #0
 8003180:	20d3      	movs	r0, #211	; 0xd3
 8003182:	f7ff fe23 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8003186:	2100      	movs	r1, #0
 8003188:	2000      	movs	r0, #0
 800318a:	f7ff fe1f 	bl	8002dcc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800318e:	2100      	movs	r1, #0
 8003190:	2040      	movs	r0, #64	; 0x40
 8003192:	f7ff fe1b 	bl	8002dcc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8003196:	2100      	movs	r1, #0
 8003198:	208d      	movs	r0, #141	; 0x8d
 800319a:	f7ff fe17 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800319e:	2100      	movs	r1, #0
 80031a0:	2014      	movs	r0, #20
 80031a2:	f7ff fe13 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80031a6:	2100      	movs	r1, #0
 80031a8:	2020      	movs	r0, #32
 80031aa:	f7ff fe0f 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80031ae:	2100      	movs	r1, #0
 80031b0:	2002      	movs	r0, #2
 80031b2:	f7ff fe0b 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80031b6:	2100      	movs	r1, #0
 80031b8:	20a1      	movs	r0, #161	; 0xa1
 80031ba:	f7ff fe07 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80031be:	2100      	movs	r1, #0
 80031c0:	20c0      	movs	r0, #192	; 0xc0
 80031c2:	f7ff fe03 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80031c6:	2100      	movs	r1, #0
 80031c8:	20da      	movs	r0, #218	; 0xda
 80031ca:	f7ff fdff 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80031ce:	2100      	movs	r1, #0
 80031d0:	2012      	movs	r0, #18
 80031d2:	f7ff fdfb 	bl	8002dcc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80031d6:	2100      	movs	r1, #0
 80031d8:	2081      	movs	r0, #129	; 0x81
 80031da:	f7ff fdf7 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80031de:	2100      	movs	r1, #0
 80031e0:	20ef      	movs	r0, #239	; 0xef
 80031e2:	f7ff fdf3 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80031e6:	2100      	movs	r1, #0
 80031e8:	20d9      	movs	r0, #217	; 0xd9
 80031ea:	f7ff fdef 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80031ee:	2100      	movs	r1, #0
 80031f0:	20f1      	movs	r0, #241	; 0xf1
 80031f2:	f7ff fdeb 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80031f6:	2100      	movs	r1, #0
 80031f8:	20db      	movs	r0, #219	; 0xdb
 80031fa:	f7ff fde7 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80031fe:	2100      	movs	r1, #0
 8003200:	2030      	movs	r0, #48	; 0x30
 8003202:	f7ff fde3 	bl	8002dcc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8003206:	2100      	movs	r1, #0
 8003208:	20a4      	movs	r0, #164	; 0xa4
 800320a:	f7ff fddf 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800320e:	2100      	movs	r1, #0
 8003210:	20a6      	movs	r0, #166	; 0xa6
 8003212:	f7ff fddb 	bl	8002dcc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8003216:	2100      	movs	r1, #0
 8003218:	20af      	movs	r0, #175	; 0xaf
 800321a:	f7ff fdd7 	bl	8002dcc <OLED_WR_Byte>
	OLED_Clear(); 
 800321e:	f7ff fe57 	bl	8002ed0 <OLED_Clear>
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	40021000 	.word	0x40021000

08003230 <pid_reset>:
#include "pid.h"

void pid_reset(PidDef *def) {
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	def->errorArea = 0;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	605a      	str	r2, [r3, #4]
	def->errorOld = 0;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <pid_init>:

void pid_init(PidDef *def, float Kp, float Ki, float Kd) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003260:	edc7 0a01 	vstr	s1, [r7, #4]
 8003264:	ed87 1a00 	vstr	s2, [r7]
	pid_reset(def);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff ffe1 	bl	8003230 <pid_reset>

	def->Kp = Kp;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	609a      	str	r2, [r3, #8]
	def->Ki = Ki;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	60da      	str	r2, [r3, #12]
	def->Kd = Kd;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	611a      	str	r2, [r3, #16]
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <pid_adjust>:

float pid_adjust(PidDef *def, float error) {
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	ed87 0a00 	vstr	s0, [r7]
	def->errorArea += error;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	ed93 7a01 	vldr	s14, [r3, #4]
 800329a:	edd7 7a00 	vldr	s15, [r7]
 800329e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	edc3 7a01 	vstr	s15, [r3, #4]
	float errorRate = (error - def->errorOld);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	edd3 7a00 	vldr	s15, [r3]
 80032ae:	ed97 7a00 	vldr	s14, [r7]
 80032b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b6:	edc7 7a03 	vstr	s15, [r7, #12]
	def->errorOld = error;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	601a      	str	r2, [r3, #0]

	return error * def->Kp + def->errorArea * def->Ki + errorRate * def->Kd;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80032c6:	edd7 7a00 	vldr	s15, [r7]
 80032ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80032da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	edd3 6a04 	vldr	s13, [r3, #16]
 80032e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80032ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80032f4:	eeb0 0a67 	vmov.f32	s0, s15
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <lpf>:
static const float a_heading = 0.65;
static const float a_mag = 0.9;
static float magOld[2];
static float headingRaw, headingOld;

static float lpf(float a, float old, float new) {
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	ed87 0a03 	vstr	s0, [r7, #12]
 800330c:	edc7 0a02 	vstr	s1, [r7, #8]
 8003310:	ed87 1a01 	vstr	s2, [r7, #4]
	return a * old + (1 - a) * new;
 8003314:	ed97 7a03 	vldr	s14, [r7, #12]
 8003318:	edd7 7a02 	vldr	s15, [r7, #8]
 800331c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003324:	edd7 7a03 	vldr	s15, [r7, #12]
 8003328:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800332c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003334:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003338:	eeb0 0a67 	vmov.f32	s0, s15
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <sensors_init>:

static I2C_HandleTypeDef *hi2c1_ptr;
static Sensors *sensors_ptr;

void sensors_init(I2C_HandleTypeDef *i2c_ptr, Sensors *sens_ptr) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
	hi2c1_ptr = i2c_ptr;
 8003352:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <sensors_init+0x48>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6013      	str	r3, [r2, #0]
	sensors_ptr = sens_ptr;
 8003358:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <sensors_init+0x4c>)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6013      	str	r3, [r2, #0]

	ICM20948_init(hi2c1_ptr, ICM_I2C_ADDR, GYRO_SENS, ACCEL_SENS);
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <sensors_init+0x48>)
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	2203      	movs	r2, #3
 8003364:	2303      	movs	r3, #3
 8003366:	2100      	movs	r1, #0
 8003368:	f7fd ff22 	bl	80011b0 <ICM20948_init>
	ICM20948_readMagnetometer_XY(hi2c1_ptr, magOld); //pre-load magOld values.
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <sensors_init+0x48>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4909      	ldr	r1, [pc, #36]	; (8003398 <sensors_init+0x50>)
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe f924 	bl	80015c0 <ICM20948_readMagnetometer_XY>

	sens_ptr->gyroZ_bias = 0;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	615a      	str	r2, [r3, #20]
	sens_ptr->heading_bias = 0;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200008b4 	.word	0x200008b4
 8003394:	200008b8 	.word	0x200008b8
 8003398:	200008ac 	.word	0x200008ac

0800339c <sensors_read_gyroZ>:


void sensors_read_gyroZ() {
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
	float val;
	ICM20948_readGyroscope_Z(hi2c1_ptr, ICM_I2C_ADDR, GYRO_SENS, &val);
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <sensors_read_gyroZ+0x3c>)
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	2203      	movs	r2, #3
 80033a8:	1d3b      	adds	r3, r7, #4
 80033aa:	2100      	movs	r1, #0
 80033ac:	f7fd ff84 	bl	80012b8 <ICM20948_readGyroscope_Z>
	sensors_ptr->gyroZ = (val - sensors_ptr->gyroZ_bias) / 1000; //convert to ms
 80033b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <sensors_read_gyroZ+0x40>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80033bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <sensors_read_gyroZ+0x40>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	eddf 6a06 	vldr	s13, [pc, #24]	; 80033e0 <sensors_read_gyroZ+0x44>
 80033c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033cc:	edc3 7a00 	vstr	s15, [r3]
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	200008b4 	.word	0x200008b4
 80033dc:	200008b8 	.word	0x200008b8
 80033e0:	447a0000 	.word	0x447a0000
 80033e4:	00000000 	.word	0x00000000

080033e8 <read_mag_angle>:
			accel_new[i] - sensors_ptr->accel_bias[i]
		);
	}
}

static float read_mag_angle() {
 80033e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
	//Calculate angle from X and Y
	float mag[2];
	ICM20948_readMagnetometer_XY(hi2c1_ptr, mag);
 80033f0:	4b3d      	ldr	r3, [pc, #244]	; (80034e8 <read_mag_angle+0x100>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	1d3a      	adds	r2, r7, #4
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe f8e1 	bl	80015c0 <ICM20948_readMagnetometer_XY>
	for (uint8_t i = 0; i < 2; i++) {
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e02d      	b.n	8003460 <read_mag_angle+0x78>
		mag[i] = lpf(a_mag, magOld[i], mag[i]);
 8003404:	eddf 6a39 	vldr	s13, [pc, #228]	; 80034ec <read_mag_angle+0x104>
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	4a39      	ldr	r2, [pc, #228]	; (80034f0 <read_mag_angle+0x108>)
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	3310      	adds	r3, #16
 800341a:	443b      	add	r3, r7
 800341c:	3b0c      	subs	r3, #12
 800341e:	ed93 7a00 	vldr	s14, [r3]
 8003422:	7bfe      	ldrb	r6, [r7, #15]
 8003424:	eeb0 1a47 	vmov.f32	s2, s14
 8003428:	eef0 0a67 	vmov.f32	s1, s15
 800342c:	eeb0 0a66 	vmov.f32	s0, s13
 8003430:	f7ff ff67 	bl	8003302 <lpf>
 8003434:	eef0 7a40 	vmov.f32	s15, s0
 8003438:	00b3      	lsls	r3, r6, #2
 800343a:	3310      	adds	r3, #16
 800343c:	443b      	add	r3, r7
 800343e:	3b0c      	subs	r3, #12
 8003440:	edc3 7a00 	vstr	s15, [r3]
		magOld[i] = mag[i];
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	0092      	lsls	r2, r2, #2
 800344a:	3210      	adds	r2, #16
 800344c:	443a      	add	r2, r7
 800344e:	3a0c      	subs	r2, #12
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	4927      	ldr	r1, [pc, #156]	; (80034f0 <read_mag_angle+0x108>)
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 2; i++) {
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	3301      	adds	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d9ce      	bls.n	8003404 <read_mag_angle+0x1c>
	}
	magcal_adjust(mag);
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe fc4b 	bl	8001d04 <magcal_adjust>
	return -atan2(mag[1], mag[0]) * 180 / M_PI;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd f869 	bl	8000548 <__aeabi_f2d>
 8003476:	4680      	mov	r8, r0
 8003478:	4689      	mov	r9, r1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd f863 	bl	8000548 <__aeabi_f2d>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	ec43 2b11 	vmov	d1, r2, r3
 800348a:	ec49 8b10 	vmov	d0, r8, r9
 800348e:	f009 fb07 	bl	800caa0 <atan2>
 8003492:	ec53 2b10 	vmov	r2, r3, d0
 8003496:	4614      	mov	r4, r2
 8003498:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <read_mag_angle+0x10c>)
 80034a2:	4620      	mov	r0, r4
 80034a4:	4629      	mov	r1, r5
 80034a6:	f7fd f8a7 	bl	80005f8 <__aeabi_dmul>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	a30b      	add	r3, pc, #44	; (adr r3, 80034e0 <read_mag_angle+0xf8>)
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	f7fd f9c8 	bl	800084c <__aeabi_ddiv>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	f7fd fb90 	bl	8000be8 <__aeabi_d2f>
 80034c8:	4603      	mov	r3, r0
 80034ca:	ee07 3a90 	vmov	s15, r3
}
 80034ce:	eeb0 0a67 	vmov.f32	s0, s15
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034da:	bf00      	nop
 80034dc:	f3af 8000 	nop.w
 80034e0:	54442d18 	.word	0x54442d18
 80034e4:	400921fb 	.word	0x400921fb
 80034e8:	200008b4 	.word	0x200008b4
 80034ec:	3f666666 	.word	0x3f666666
 80034f0:	200008ac 	.word	0x200008ac
 80034f4:	40668000 	.word	0x40668000

080034f8 <sensors_set_bias>:

	if (sensors_ptr->heading < -180) sensors_ptr->heading += 360;
	else if (sensors_ptr->heading > 180) sensors_ptr->heading -= 360;
}

void sensors_set_bias(uint16_t count) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
	float gyroZTotal = 0, gyroZ = 0, headingTotal = 0;
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0; i < count; i++) {
 8003514:	2300      	movs	r3, #0
 8003516:	81fb      	strh	r3, [r7, #14]
 8003518:	e025      	b.n	8003566 <sensors_set_bias+0x6e>
		ICM20948_readGyroscope_Z(hi2c1_ptr, ICM_I2C_ADDR, GYRO_SENS, &gyroZ); //gyroscope bias
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <sensors_set_bias+0xb4>)
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	2203      	movs	r2, #3
 8003520:	f107 0308 	add.w	r3, r7, #8
 8003524:	2100      	movs	r1, #0
 8003526:	f7fd fec7 	bl	80012b8 <ICM20948_readGyroscope_Z>
		gyroZTotal += gyroZ;
 800352a:	edd7 7a02 	vldr	s15, [r7, #8]
 800352e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003536:	edc7 7a05 	vstr	s15, [r7, #20]
		ICM20948_readAccelerometer_all(hi2c1_ptr, ICM_I2C_ADDR, ACCEL_SENS, sensors_ptr->accel_bias); //accelerometer bias
 800353a:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <sensors_set_bias+0xb4>)
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	2203      	movs	r2, #3
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <sensors_set_bias+0xb8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3318      	adds	r3, #24
 8003546:	2100      	movs	r1, #0
 8003548:	f7fd ff36 	bl	80013b8 <ICM20948_readAccelerometer_all>
		headingTotal += read_mag_angle(); //heading bias
 800354c:	f7ff ff4c 	bl	80033e8 <read_mag_angle>
 8003550:	eeb0 7a40 	vmov.f32	s14, s0
 8003554:	edd7 7a04 	vldr	s15, [r7, #16]
 8003558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800355c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (uint16_t i = 0; i < count; i++) {
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	3301      	adds	r3, #1
 8003564:	81fb      	strh	r3, [r7, #14]
 8003566:	89fa      	ldrh	r2, [r7, #14]
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	429a      	cmp	r2, r3
 800356c:	d3d5      	bcc.n	800351a <sensors_set_bias+0x22>
	}

	sensors_ptr->gyroZ_bias = gyroZTotal / count;
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003578:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <sensors_set_bias+0xb8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	edd7 6a05 	vldr	s13, [r7, #20]
 8003580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003584:	edc3 7a05 	vstr	s15, [r3, #20]
	sensors_ptr->heading_bias = headingTotal / count;
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003592:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <sensors_set_bias+0xb8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	edd7 6a04 	vldr	s13, [r7, #16]
 800359a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800359e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80035a2:	bf00      	nop
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200008b4 	.word	0x200008b4
 80035b0:	200008b8 	.word	0x200008b8

080035b4 <servo_init>:
#include "servo.h"

static TIM_HandleTypeDef *pwm_tim;

void servo_init(TIM_HandleTypeDef *pwm) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	pwm_tim = pwm;
 80035bc:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <servo_init+0x20>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm, SERVO_PWM_CHANNEL);
 80035c2:	2100      	movs	r1, #0
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f002 fdcb 	bl	8006160 <HAL_TIM_PWM_Start>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200008bc 	.word	0x200008bc

080035d8 <setServoVal>:

static void setServoVal(uint32_t val) {
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	pwm_tim->Instance->CCR1 = val;
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <setServoVal+0x20>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	200008bc 	.word	0x200008bc

080035fc <servo_setAngle>:

void servo_setAngle(float angle) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	ed87 0a01 	vstr	s0, [r7, #4]
	//clamp angle to within width.
	if (angle < -SERVO_WIDTH) angle = -SERVO_WIDTH;
 8003606:	edd7 7a01 	vldr	s15, [r7, #4]
 800360a:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
 800360e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003616:	d502      	bpl.n	800361e <servo_setAngle+0x22>
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <servo_setAngle+0xa4>)
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	e00a      	b.n	8003634 <servo_setAngle+0x38>
	else if (angle > SERVO_WIDTH) angle = SERVO_WIDTH;
 800361e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003622:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	dd01      	ble.n	8003634 <servo_setAngle+0x38>
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <servo_setAngle+0xa8>)
 8003632:	607b      	str	r3, [r7, #4]

	uint32_t val;
	if (angle < 0) {
 8003634:	edd7 7a01 	vldr	s15, [r7, #4]
 8003638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003640:	d513      	bpl.n	800366a <servo_setAngle+0x6e>
		val = SERVO_PULSE_0 + (SERVO_PULSE_0 - SERVO_PULSE_L) * angle / SERVO_WIDTH;
 8003642:	edd7 7a01 	vldr	s15, [r7, #4]
 8003646:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80036a8 <servo_setAngle+0xac>
 800364a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800364e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003656:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80036ac <servo_setAngle+0xb0>
 800365a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800365e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003662:	ee17 3a90 	vmov	r3, s15
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e012      	b.n	8003690 <servo_setAngle+0x94>
	} else {
		val = SERVO_PULSE_0 + (SERVO_PULSE_R - SERVO_PULSE_0) * angle / SERVO_WIDTH;
 800366a:	edd7 7a01 	vldr	s15, [r7, #4]
 800366e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80036b0 <servo_setAngle+0xb4>
 8003672:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003676:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800367a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800367e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80036ac <servo_setAngle+0xb0>
 8003682:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800368a:	ee17 3a90 	vmov	r3, s15
 800368e:	60fb      	str	r3, [r7, #12]
	}

	setServoVal(val);
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff ffa1 	bl	80035d8 <setServoVal>
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	c1c80000 	.word	0xc1c80000
 80036a4:	41c80000 	.word	0x41c80000
 80036a8:	449c4000 	.word	0x449c4000
 80036ac:	45979000 	.word	0x45979000
 80036b0:	4512e000 	.word	0x4512e000

080036b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_MspInit+0x4c>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	4a0f      	ldr	r2, [pc, #60]	; (8003700 <HAL_MspInit+0x4c>)
 80036c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ca:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_MspInit+0x4c>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_MspInit+0x4c>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	4a08      	ldr	r2, [pc, #32]	; (8003700 <HAL_MspInit+0x4c>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_MspInit+0x4c>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800

08003704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	f107 0314 	add.w	r3, r7, #20
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
 800371a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a19      	ldr	r2, [pc, #100]	; (8003788 <HAL_I2C_MspInit+0x84>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d12c      	bne.n	8003780 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	4b18      	ldr	r3, [pc, #96]	; (800378c <HAL_I2C_MspInit+0x88>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <HAL_I2C_MspInit+0x88>)
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <HAL_I2C_MspInit+0x88>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 8003742:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003748:	2312      	movs	r3, #18
 800374a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003750:	2303      	movs	r3, #3
 8003752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003754:	2304      	movs	r3, #4
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003758:	f107 0314 	add.w	r3, r7, #20
 800375c:	4619      	mov	r1, r3
 800375e:	480c      	ldr	r0, [pc, #48]	; (8003790 <HAL_I2C_MspInit+0x8c>)
 8003760:	f000 fd32 	bl	80041c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	4b08      	ldr	r3, [pc, #32]	; (800378c <HAL_I2C_MspInit+0x88>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	4a07      	ldr	r2, [pc, #28]	; (800378c <HAL_I2C_MspInit+0x88>)
 800376e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003772:	6413      	str	r3, [r2, #64]	; 0x40
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_I2C_MspInit+0x88>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003780:	bf00      	nop
 8003782:	3728      	adds	r7, #40	; 0x28
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40005400 	.word	0x40005400
 800378c:	40023800 	.word	0x40023800
 8003790:	40020400 	.word	0x40020400

08003794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a22      	ldr	r2, [pc, #136]	; (800382c <HAL_TIM_Base_MspInit+0x98>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10e      	bne.n	80037c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	4b21      	ldr	r3, [pc, #132]	; (8003830 <HAL_TIM_Base_MspInit+0x9c>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4a20      	ldr	r2, [pc, #128]	; (8003830 <HAL_TIM_Base_MspInit+0x9c>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
 80037b6:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <HAL_TIM_Base_MspInit+0x9c>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80037c2:	e02e      	b.n	8003822 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1a      	ldr	r2, [pc, #104]	; (8003834 <HAL_TIM_Base_MspInit+0xa0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d116      	bne.n	80037fc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <HAL_TIM_Base_MspInit+0x9c>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	4a16      	ldr	r2, [pc, #88]	; (8003830 <HAL_TIM_Base_MspInit+0x9c>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	6413      	str	r3, [r2, #64]	; 0x40
 80037de:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_TIM_Base_MspInit+0x9c>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80037ea:	2200      	movs	r2, #0
 80037ec:	2100      	movs	r1, #0
 80037ee:	201e      	movs	r0, #30
 80037f0:	f000 fc21 	bl	8004036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037f4:	201e      	movs	r0, #30
 80037f6:	f000 fc3a 	bl	800406e <HAL_NVIC_EnableIRQ>
}
 80037fa:	e012      	b.n	8003822 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <HAL_TIM_Base_MspInit+0xa4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10d      	bne.n	8003822 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_TIM_Base_MspInit+0x9c>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	4a08      	ldr	r2, [pc, #32]	; (8003830 <HAL_TIM_Base_MspInit+0x9c>)
 8003810:	f043 0302 	orr.w	r3, r3, #2
 8003814:	6453      	str	r3, [r2, #68]	; 0x44
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_TIM_Base_MspInit+0x9c>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
}
 8003822:	bf00      	nop
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40010000 	.word	0x40010000
 8003830:	40023800 	.word	0x40023800
 8003834:	40000800 	.word	0x40000800
 8003838:	40010400 	.word	0x40010400

0800383c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	; 0x30
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003844:	f107 031c 	add.w	r3, r7, #28
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385c:	d14b      	bne.n	80038f6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	4a3e      	ldr	r2, [pc, #248]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6413      	str	r3, [r2, #64]	; 0x40
 800386e:	4b3c      	ldr	r3, [pc, #240]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	4b38      	ldr	r3, [pc, #224]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4a37      	ldr	r2, [pc, #220]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6313      	str	r3, [r2, #48]	; 0x30
 800388a:	4b35      	ldr	r3, [pc, #212]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	4b31      	ldr	r3, [pc, #196]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	4a30      	ldr	r2, [pc, #192]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 80038a0:	f043 0302 	orr.w	r3, r3, #2
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
 80038a6:	4b2e      	ldr	r3, [pc, #184]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTORA_CH1_Pin;
 80038b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b8:	2302      	movs	r3, #2
 80038ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c0:	2300      	movs	r3, #0
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038c4:	2301      	movs	r3, #1
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH1_GPIO_Port, &GPIO_InitStruct);
 80038c8:	f107 031c 	add.w	r3, r7, #28
 80038cc:	4619      	mov	r1, r3
 80038ce:	4825      	ldr	r0, [pc, #148]	; (8003964 <HAL_TIM_Encoder_MspInit+0x128>)
 80038d0:	f000 fc7a 	bl	80041c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTORA_CH2_Pin;
 80038d4:	2308      	movs	r3, #8
 80038d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d8:	2302      	movs	r3, #2
 80038da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038e4:	2301      	movs	r3, #1
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOTORA_CH2_GPIO_Port, &GPIO_InitStruct);
 80038e8:	f107 031c 	add.w	r3, r7, #28
 80038ec:	4619      	mov	r1, r3
 80038ee:	481e      	ldr	r0, [pc, #120]	; (8003968 <HAL_TIM_Encoder_MspInit+0x12c>)
 80038f0:	f000 fc6a 	bl	80041c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038f4:	e030      	b.n	8003958 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1c      	ldr	r2, [pc, #112]	; (800396c <HAL_TIM_Encoder_MspInit+0x130>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d12b      	bne.n	8003958 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	4b16      	ldr	r3, [pc, #88]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	4a15      	ldr	r2, [pc, #84]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 800390a:	f043 0302 	orr.w	r3, r3, #2
 800390e:	6413      	str	r3, [r2, #64]	; 0x40
 8003910:	4b13      	ldr	r3, [pc, #76]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	4a0e      	ldr	r2, [pc, #56]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6313      	str	r3, [r2, #48]	; 0x30
 800392c:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <HAL_TIM_Encoder_MspInit+0x124>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTORB_CH1_Pin|MOTORB_CH2_Pin;
 8003938:	23c0      	movs	r3, #192	; 0xc0
 800393a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003944:	2300      	movs	r3, #0
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003948:	2302      	movs	r3, #2
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394c:	f107 031c 	add.w	r3, r7, #28
 8003950:	4619      	mov	r1, r3
 8003952:	4804      	ldr	r0, [pc, #16]	; (8003964 <HAL_TIM_Encoder_MspInit+0x128>)
 8003954:	f000 fc38 	bl	80041c8 <HAL_GPIO_Init>
}
 8003958:	bf00      	nop
 800395a:	3730      	adds	r7, #48	; 0x30
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	40020000 	.word	0x40020000
 8003968:	40020400 	.word	0x40020400
 800396c:	40000400 	.word	0x40000400

08003970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <HAL_TIM_MspPostInit+0xb0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d11f      	bne.n	80039d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <HAL_TIM_MspPostInit+0xb4>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <HAL_TIM_MspPostInit+0xb4>)
 800399c:	f043 0310 	orr.w	r3, r3, #16
 80039a0:	6313      	str	r3, [r2, #48]	; 0x30
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_TIM_MspPostInit+0xb4>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 80039ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	2302      	movs	r3, #2
 80039b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039bc:	2300      	movs	r3, #0
 80039be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039c0:	2301      	movs	r3, #1
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4619      	mov	r1, r3
 80039ca:	4817      	ldr	r0, [pc, #92]	; (8003a28 <HAL_TIM_MspPostInit+0xb8>)
 80039cc:	f000 fbfc 	bl	80041c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80039d0:	e022      	b.n	8003a18 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <HAL_TIM_MspPostInit+0xbc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d11d      	bne.n	8003a18 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_TIM_MspPostInit+0xb4>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <HAL_TIM_MspPostInit+0xb4>)
 80039e6:	f043 0304 	orr.w	r3, r3, #4
 80039ea:	6313      	str	r3, [r2, #48]	; 0x30
 80039ec:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_TIM_MspPostInit+0xb4>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTORA_PWM_Pin|MOTORB_PWM_Pin;
 80039f8:	23c0      	movs	r3, #192	; 0xc0
 80039fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a04:	2300      	movs	r3, #0
 8003a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	4619      	mov	r1, r3
 8003a12:	4807      	ldr	r0, [pc, #28]	; (8003a30 <HAL_TIM_MspPostInit+0xc0>)
 8003a14:	f000 fbd8 	bl	80041c8 <HAL_GPIO_Init>
}
 8003a18:	bf00      	nop
 8003a1a:	3728      	adds	r7, #40	; 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40010400 	.word	0x40010400
 8003a30:	40020800 	.word	0x40020800

08003a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08a      	sub	sp, #40	; 0x28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a3c:	f107 0314 	add.w	r3, r7, #20
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	60da      	str	r2, [r3, #12]
 8003a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_UART_MspInit+0x94>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d134      	bne.n	8003ac0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <HAL_UART_MspInit+0x98>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <HAL_UART_MspInit+0x98>)
 8003a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_UART_MspInit+0x98>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <HAL_UART_MspInit+0x98>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	4a14      	ldr	r2, [pc, #80]	; (8003acc <HAL_UART_MspInit+0x98>)
 8003a7c:	f043 0304 	orr.w	r3, r3, #4
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_UART_MspInit+0x98>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003a8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003aa0:	2307      	movs	r3, #7
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4809      	ldr	r0, [pc, #36]	; (8003ad0 <HAL_UART_MspInit+0x9c>)
 8003aac:	f000 fb8c 	bl	80041c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	2027      	movs	r0, #39	; 0x27
 8003ab6:	f000 fabe 	bl	8004036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003aba:	2027      	movs	r0, #39	; 0x27
 8003abc:	f000 fad7 	bl	800406e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ac0:	bf00      	nop
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40004800 	.word	0x40004800
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40020800 	.word	0x40020800

08003ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ad8:	e7fe      	b.n	8003ad8 <NMI_Handler+0x4>

08003ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ade:	e7fe      	b.n	8003ade <HardFault_Handler+0x4>

08003ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae4:	e7fe      	b.n	8003ae4 <MemManage_Handler+0x4>

08003ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aea:	e7fe      	b.n	8003aea <BusFault_Handler+0x4>

08003aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003af0:	e7fe      	b.n	8003af0 <UsageFault_Handler+0x4>

08003af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b20:	f000 f96a 	bl	8003df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b24:	bf00      	nop
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <TIM4_IRQHandler+0x10>)
 8003b2e:	f002 fd33 	bl	8006598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	2000033c 	.word	0x2000033c

08003b3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <USART3_IRQHandler+0x10>)
 8003b42:	f003 fc9b 	bl	800747c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200003cc 	.word	0x200003cc

08003b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return 1;
 8003b54:	2301      	movs	r3, #1
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <_kill>:

int _kill(int pid, int sig)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b6a:	f005 fc73 	bl	8009454 <__errno>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2216      	movs	r2, #22
 8003b72:	601a      	str	r2, [r3, #0]
  return -1;
 8003b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <_exit>:

void _exit (int status)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b88:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ffe7 	bl	8003b60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b92:	e7fe      	b.n	8003b92 <_exit+0x12>

08003b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e00a      	b.n	8003bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ba6:	f3af 8000 	nop.w
 8003baa:	4601      	mov	r1, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	60ba      	str	r2, [r7, #8]
 8003bb2:	b2ca      	uxtb	r2, r1
 8003bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	dbf0      	blt.n	8003ba6 <_read+0x12>
  }

  return len;
 8003bc4:	687b      	ldr	r3, [r7, #4]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e009      	b.n	8003bf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	60ba      	str	r2, [r7, #8]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	dbf1      	blt.n	8003be0 <_write+0x12>
  }
  return len;
 8003bfc:	687b      	ldr	r3, [r7, #4]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <_close>:

int _close(int file)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c2e:	605a      	str	r2, [r3, #4]
  return 0;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <_isatty>:

int _isatty(int file)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c46:	2301      	movs	r3, #1
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <_sbrk+0x5c>)
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <_sbrk+0x60>)
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <_sbrk+0x64>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <_sbrk+0x64>)
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <_sbrk+0x68>)
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <_sbrk+0x64>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d207      	bcs.n	8003cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca0:	f005 fbd8 	bl	8009454 <__errno>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	220c      	movs	r2, #12
 8003ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e009      	b.n	8003cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <_sbrk+0x64>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <_sbrk+0x64>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <_sbrk+0x64>)
 8003cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20020000 	.word	0x20020000
 8003cd0:	00000400 	.word	0x00000400
 8003cd4:	200008c0 	.word	0x200008c0
 8003cd8:	20000a18 	.word	0x20000a18

08003cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <SystemInit+0x20>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <SystemInit+0x20>)
 8003ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d04:	f7ff ffea 	bl	8003cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d08:	480c      	ldr	r0, [pc, #48]	; (8003d3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d0a:	490d      	ldr	r1, [pc, #52]	; (8003d40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d0c:	4a0d      	ldr	r2, [pc, #52]	; (8003d44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d10:	e002      	b.n	8003d18 <LoopCopyDataInit>

08003d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d16:	3304      	adds	r3, #4

08003d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d1c:	d3f9      	bcc.n	8003d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d20:	4c0a      	ldr	r4, [pc, #40]	; (8003d4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d24:	e001      	b.n	8003d2a <LoopFillZerobss>

08003d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d28:	3204      	adds	r2, #4

08003d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d2c:	d3fb      	bcc.n	8003d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d2e:	f005 fb97 	bl	8009460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d32:	f7fe f873 	bl	8001e1c <main>
  bx  lr    
 8003d36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d40:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003d44:	0800f7d0 	.word	0x0800f7d0
  ldr r2, =_sbss
 8003d48:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003d4c:	20000a14 	.word	0x20000a14

08003d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d50:	e7fe      	b.n	8003d50 <ADC_IRQHandler>
	...

08003d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d58:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <HAL_Init+0x40>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0d      	ldr	r2, [pc, #52]	; (8003d94 <HAL_Init+0x40>)
 8003d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_Init+0x40>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <HAL_Init+0x40>)
 8003d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_Init+0x40>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a07      	ldr	r2, [pc, #28]	; (8003d94 <HAL_Init+0x40>)
 8003d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d7c:	2003      	movs	r0, #3
 8003d7e:	f000 f94f 	bl	8004020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d82:	200f      	movs	r0, #15
 8003d84:	f000 f808 	bl	8003d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d88:	f7ff fc94 	bl	80036b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40023c00 	.word	0x40023c00

08003d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_InitTick+0x54>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <HAL_InitTick+0x58>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	4619      	mov	r1, r3
 8003daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f967 	bl	800408a <HAL_SYSTICK_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e00e      	b.n	8003de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b0f      	cmp	r3, #15
 8003dca:	d80a      	bhi.n	8003de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	f000 f92f 	bl	8004036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dd8:	4a06      	ldr	r2, [pc, #24]	; (8003df4 <HAL_InitTick+0x5c>)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e000      	b.n	8003de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000000 	.word	0x20000000
 8003df0:	20000008 	.word	0x20000008
 8003df4:	20000004 	.word	0x20000004

08003df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_IncTick+0x20>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_IncTick+0x24>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4413      	add	r3, r2
 8003e08:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <HAL_IncTick+0x24>)
 8003e0a:	6013      	str	r3, [r2, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000008 	.word	0x20000008
 8003e1c:	200008c4 	.word	0x200008c4

08003e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return uwTick;
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_GetTick+0x14>)
 8003e26:	681b      	ldr	r3, [r3, #0]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	200008c4 	.word	0x200008c4

08003e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e40:	f7ff ffee 	bl	8003e20 <HAL_GetTick>
 8003e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d005      	beq.n	8003e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_Delay+0x44>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e5e:	bf00      	nop
 8003e60:	f7ff ffde 	bl	8003e20 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d8f7      	bhi.n	8003e60 <HAL_Delay+0x28>
  {
  }
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000008 	.word	0x20000008

08003e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	60d3      	str	r3, [r2, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 0307 	and.w	r3, r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db0b      	blt.n	8003f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4907      	ldr	r1, [pc, #28]	; (8003f1c <__NVIC_EnableIRQ+0x38>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	db0a      	blt.n	8003f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	490c      	ldr	r1, [pc, #48]	; (8003f6c <__NVIC_SetPriority+0x4c>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	0112      	lsls	r2, r2, #4
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	440b      	add	r3, r1
 8003f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f48:	e00a      	b.n	8003f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4908      	ldr	r1, [pc, #32]	; (8003f70 <__NVIC_SetPriority+0x50>)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3b04      	subs	r3, #4
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	761a      	strb	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b089      	sub	sp, #36	; 0x24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	bf28      	it	cs
 8003f92:	2304      	movcs	r3, #4
 8003f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d902      	bls.n	8003fa4 <NVIC_EncodePriority+0x30>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3b03      	subs	r3, #3
 8003fa2:	e000      	b.n	8003fa6 <NVIC_EncodePriority+0x32>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43d9      	mvns	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	4313      	orrs	r3, r2
         );
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fec:	d301      	bcc.n	8003ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e00f      	b.n	8004012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <SysTick_Config+0x40>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffa:	210f      	movs	r1, #15
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	f7ff ff8e 	bl	8003f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <SysTick_Config+0x40>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400a:	4b04      	ldr	r3, [pc, #16]	; (800401c <SysTick_Config+0x40>)
 800400c:	2207      	movs	r2, #7
 800400e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	e000e010 	.word	0xe000e010

08004020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff29 	bl	8003e80 <__NVIC_SetPriorityGrouping>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004048:	f7ff ff3e 	bl	8003ec8 <__NVIC_GetPriorityGrouping>
 800404c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7ff ff8e 	bl	8003f74 <NVIC_EncodePriority>
 8004058:	4602      	mov	r2, r0
 800405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff5d 	bl	8003f20 <__NVIC_SetPriority>
}
 8004066:	bf00      	nop
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	4603      	mov	r3, r0
 8004076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff31 	bl	8003ee4 <__NVIC_EnableIRQ>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ffa2 	bl	8003fdc <SysTick_Config>
 8004098:	4603      	mov	r3, r0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040b0:	f7ff feb6 	bl	8003e20 <HAL_GetTick>
 80040b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d008      	beq.n	80040d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2280      	movs	r2, #128	; 0x80
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e052      	b.n	800417a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0216 	bic.w	r2, r2, #22
 80040e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d103      	bne.n	8004104 <HAL_DMA_Abort+0x62>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0208 	bic.w	r2, r2, #8
 8004112:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004124:	e013      	b.n	800414e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004126:	f7ff fe7b 	bl	8003e20 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b05      	cmp	r3, #5
 8004132:	d90c      	bls.n	800414e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2203      	movs	r2, #3
 800413e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e015      	b.n	800417a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e4      	bne.n	8004126 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	223f      	movs	r2, #63	; 0x3f
 8004162:	409a      	lsls	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d004      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2280      	movs	r2, #128	; 0x80
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e00c      	b.n	80041ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2205      	movs	r2, #5
 80041a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	; 0x24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e16b      	b.n	80044bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e4:	2201      	movs	r2, #1
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	f040 815a 	bne.w	80044b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d005      	beq.n	800421a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004216:	2b02      	cmp	r3, #2
 8004218:	d130      	bne.n	800427c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	2203      	movs	r2, #3
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4313      	orrs	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004250:	2201      	movs	r2, #1
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 0201 	and.w	r2, r3, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b03      	cmp	r3, #3
 8004286:	d017      	beq.n	80042b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	2203      	movs	r2, #3
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d123      	bne.n	800430c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	08da      	lsrs	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3208      	adds	r2, #8
 80042cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	220f      	movs	r2, #15
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	08da      	lsrs	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3208      	adds	r2, #8
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2203      	movs	r2, #3
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0203 	and.w	r2, r3, #3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80b4 	beq.w	80044b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	4b60      	ldr	r3, [pc, #384]	; (80044d4 <HAL_GPIO_Init+0x30c>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	4a5f      	ldr	r2, [pc, #380]	; (80044d4 <HAL_GPIO_Init+0x30c>)
 8004358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800435c:	6453      	str	r3, [r2, #68]	; 0x44
 800435e:	4b5d      	ldr	r3, [pc, #372]	; (80044d4 <HAL_GPIO_Init+0x30c>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436a:	4a5b      	ldr	r2, [pc, #364]	; (80044d8 <HAL_GPIO_Init+0x310>)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	3302      	adds	r3, #2
 8004372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	220f      	movs	r2, #15
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a52      	ldr	r2, [pc, #328]	; (80044dc <HAL_GPIO_Init+0x314>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d02b      	beq.n	80043ee <HAL_GPIO_Init+0x226>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a51      	ldr	r2, [pc, #324]	; (80044e0 <HAL_GPIO_Init+0x318>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d025      	beq.n	80043ea <HAL_GPIO_Init+0x222>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a50      	ldr	r2, [pc, #320]	; (80044e4 <HAL_GPIO_Init+0x31c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01f      	beq.n	80043e6 <HAL_GPIO_Init+0x21e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a4f      	ldr	r2, [pc, #316]	; (80044e8 <HAL_GPIO_Init+0x320>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d019      	beq.n	80043e2 <HAL_GPIO_Init+0x21a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a4e      	ldr	r2, [pc, #312]	; (80044ec <HAL_GPIO_Init+0x324>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_GPIO_Init+0x216>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4d      	ldr	r2, [pc, #308]	; (80044f0 <HAL_GPIO_Init+0x328>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00d      	beq.n	80043da <HAL_GPIO_Init+0x212>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4c      	ldr	r2, [pc, #304]	; (80044f4 <HAL_GPIO_Init+0x32c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <HAL_GPIO_Init+0x20e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4b      	ldr	r2, [pc, #300]	; (80044f8 <HAL_GPIO_Init+0x330>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_GPIO_Init+0x20a>
 80043ce:	2307      	movs	r3, #7
 80043d0:	e00e      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043d2:	2308      	movs	r3, #8
 80043d4:	e00c      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043d6:	2306      	movs	r3, #6
 80043d8:	e00a      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043da:	2305      	movs	r3, #5
 80043dc:	e008      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043de:	2304      	movs	r3, #4
 80043e0:	e006      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043e2:	2303      	movs	r3, #3
 80043e4:	e004      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e002      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <HAL_GPIO_Init+0x228>
 80043ee:	2300      	movs	r3, #0
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	f002 0203 	and.w	r2, r2, #3
 80043f6:	0092      	lsls	r2, r2, #2
 80043f8:	4093      	lsls	r3, r2
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004400:	4935      	ldr	r1, [pc, #212]	; (80044d8 <HAL_GPIO_Init+0x310>)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	3302      	adds	r3, #2
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_GPIO_Init+0x334>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	43db      	mvns	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004432:	4a32      	ldr	r2, [pc, #200]	; (80044fc <HAL_GPIO_Init+0x334>)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004438:	4b30      	ldr	r3, [pc, #192]	; (80044fc <HAL_GPIO_Init+0x334>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800445c:	4a27      	ldr	r2, [pc, #156]	; (80044fc <HAL_GPIO_Init+0x334>)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004462:	4b26      	ldr	r3, [pc, #152]	; (80044fc <HAL_GPIO_Init+0x334>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004486:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <HAL_GPIO_Init+0x334>)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800448c:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_GPIO_Init+0x334>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044b0:	4a12      	ldr	r2, [pc, #72]	; (80044fc <HAL_GPIO_Init+0x334>)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	3301      	adds	r3, #1
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	2b0f      	cmp	r3, #15
 80044c0:	f67f ae90 	bls.w	80041e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	3724      	adds	r7, #36	; 0x24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40013800 	.word	0x40013800
 80044dc:	40020000 	.word	0x40020000
 80044e0:	40020400 	.word	0x40020400
 80044e4:	40020800 	.word	0x40020800
 80044e8:	40020c00 	.word	0x40020c00
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40021400 	.word	0x40021400
 80044f4:	40021800 	.word	0x40021800
 80044f8:	40021c00 	.word	0x40021c00
 80044fc:	40013c00 	.word	0x40013c00

08004500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	807b      	strh	r3, [r7, #2]
 800450c:	4613      	mov	r3, r2
 800450e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004510:	787b      	ldrb	r3, [r7, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004516:	887a      	ldrh	r2, [r7, #2]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800451c:	e003      	b.n	8004526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800451e:	887b      	ldrh	r3, [r7, #2]
 8004520:	041a      	lsls	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	619a      	str	r2, [r3, #24]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e12b      	b.n	800479e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff f8d2 	bl	8003704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004586:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004596:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004598:	f001 fc48 	bl	8005e2c <HAL_RCC_GetPCLK1Freq>
 800459c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a81      	ldr	r2, [pc, #516]	; (80047a8 <HAL_I2C_Init+0x274>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d807      	bhi.n	80045b8 <HAL_I2C_Init+0x84>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a80      	ldr	r2, [pc, #512]	; (80047ac <HAL_I2C_Init+0x278>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bf94      	ite	ls
 80045b0:	2301      	movls	r3, #1
 80045b2:	2300      	movhi	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e006      	b.n	80045c6 <HAL_I2C_Init+0x92>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a7d      	ldr	r2, [pc, #500]	; (80047b0 <HAL_I2C_Init+0x27c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	bf94      	ite	ls
 80045c0:	2301      	movls	r3, #1
 80045c2:	2300      	movhi	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0e7      	b.n	800479e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a78      	ldr	r2, [pc, #480]	; (80047b4 <HAL_I2C_Init+0x280>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	0c9b      	lsrs	r3, r3, #18
 80045d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a6a      	ldr	r2, [pc, #424]	; (80047a8 <HAL_I2C_Init+0x274>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d802      	bhi.n	8004608 <HAL_I2C_Init+0xd4>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3301      	adds	r3, #1
 8004606:	e009      	b.n	800461c <HAL_I2C_Init+0xe8>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	4a69      	ldr	r2, [pc, #420]	; (80047b8 <HAL_I2C_Init+0x284>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	099b      	lsrs	r3, r3, #6
 800461a:	3301      	adds	r3, #1
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	430b      	orrs	r3, r1
 8004622:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800462e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	495c      	ldr	r1, [pc, #368]	; (80047a8 <HAL_I2C_Init+0x274>)
 8004638:	428b      	cmp	r3, r1
 800463a:	d819      	bhi.n	8004670 <HAL_I2C_Init+0x13c>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1e59      	subs	r1, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fbb1 f3f3 	udiv	r3, r1, r3
 800464a:	1c59      	adds	r1, r3, #1
 800464c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004650:	400b      	ands	r3, r1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_I2C_Init+0x138>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1e59      	subs	r1, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fbb1 f3f3 	udiv	r3, r1, r3
 8004664:	3301      	adds	r3, #1
 8004666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466a:	e051      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 800466c:	2304      	movs	r3, #4
 800466e:	e04f      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d111      	bne.n	800469c <HAL_I2C_Init+0x168>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1e58      	subs	r0, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	440b      	add	r3, r1
 8004686:	fbb0 f3f3 	udiv	r3, r0, r3
 800468a:	3301      	adds	r3, #1
 800468c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e012      	b.n	80046c2 <HAL_I2C_Init+0x18e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e58      	subs	r0, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	0099      	lsls	r1, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b2:	3301      	adds	r3, #1
 80046b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf0c      	ite	eq
 80046bc:	2301      	moveq	r3, #1
 80046be:	2300      	movne	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_I2C_Init+0x196>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e022      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10e      	bne.n	80046f0 <HAL_I2C_Init+0x1bc>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1e58      	subs	r0, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	440b      	add	r3, r1
 80046e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e4:	3301      	adds	r3, #1
 80046e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ee:	e00f      	b.n	8004710 <HAL_I2C_Init+0x1dc>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1e58      	subs	r0, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	0099      	lsls	r1, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	fbb0 f3f3 	udiv	r3, r0, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	6809      	ldr	r1, [r1, #0]
 8004714:	4313      	orrs	r3, r2
 8004716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800473e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6911      	ldr	r1, [r2, #16]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68d2      	ldr	r2, [r2, #12]
 800474a:	4311      	orrs	r1, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	430b      	orrs	r3, r1
 8004752:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	000186a0 	.word	0x000186a0
 80047ac:	001e847f 	.word	0x001e847f
 80047b0:	003d08ff 	.word	0x003d08ff
 80047b4:	431bde83 	.word	0x431bde83
 80047b8:	10624dd3 	.word	0x10624dd3

080047bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	4608      	mov	r0, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	817b      	strh	r3, [r7, #10]
 80047ce:	460b      	mov	r3, r1
 80047d0:	813b      	strh	r3, [r7, #8]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047d6:	f7ff fb23 	bl	8003e20 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	f040 80d9 	bne.w	800499c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	2319      	movs	r3, #25
 80047f0:	2201      	movs	r2, #1
 80047f2:	496d      	ldr	r1, [pc, #436]	; (80049a8 <HAL_I2C_Mem_Write+0x1ec>)
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fc8b 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
 8004802:	e0cc      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_I2C_Mem_Write+0x56>
 800480e:	2302      	movs	r3, #2
 8004810:	e0c5      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b01      	cmp	r3, #1
 8004826:	d007      	beq.n	8004838 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004846:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2221      	movs	r2, #33	; 0x21
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2240      	movs	r2, #64	; 0x40
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004868:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a4d      	ldr	r2, [pc, #308]	; (80049ac <HAL_I2C_Mem_Write+0x1f0>)
 8004878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800487a:	88f8      	ldrh	r0, [r7, #6]
 800487c:	893a      	ldrh	r2, [r7, #8]
 800487e:	8979      	ldrh	r1, [r7, #10]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	4603      	mov	r3, r0
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 fac2 	bl	8004e14 <I2C_RequestMemoryWrite>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d052      	beq.n	800493c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e081      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fd50 	bl	8005344 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d107      	bne.n	80048c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e06b      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	781a      	ldrb	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b04      	cmp	r3, #4
 8004902:	d11b      	bne.n	800493c <HAL_I2C_Mem_Write+0x180>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	2b00      	cmp	r3, #0
 800490a:	d017      	beq.n	800493c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1aa      	bne.n	800489a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fd43 	bl	80053d4 <I2C_WaitOnBTFFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	2b04      	cmp	r3, #4
 800495a:	d107      	bne.n	800496c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e016      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e000      	b.n	800499e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	00100002 	.word	0x00100002
 80049ac:	ffff0000 	.word	0xffff0000

080049b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08c      	sub	sp, #48	; 0x30
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	817b      	strh	r3, [r7, #10]
 80049c2:	460b      	mov	r3, r1
 80049c4:	813b      	strh	r3, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ca:	f7ff fa29 	bl	8003e20 <HAL_GetTick>
 80049ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b20      	cmp	r3, #32
 80049da:	f040 8214 	bne.w	8004e06 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2319      	movs	r3, #25
 80049e4:	2201      	movs	r2, #1
 80049e6:	497b      	ldr	r1, [pc, #492]	; (8004bd4 <HAL_I2C_Mem_Read+0x224>)
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fb91 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
 80049f6:	e207      	b.n	8004e08 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_I2C_Mem_Read+0x56>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e200      	b.n	8004e08 <HAL_I2C_Mem_Read+0x458>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d007      	beq.n	8004a2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2222      	movs	r2, #34	; 0x22
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2240      	movs	r2, #64	; 0x40
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a5b      	ldr	r2, [pc, #364]	; (8004bd8 <HAL_I2C_Mem_Read+0x228>)
 8004a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a6e:	88f8      	ldrh	r0, [r7, #6]
 8004a70:	893a      	ldrh	r2, [r7, #8]
 8004a72:	8979      	ldrh	r1, [r7, #10]
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 fa5e 	bl	8004f40 <I2C_RequestMemoryRead>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e1bc      	b.n	8004e08 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d113      	bne.n	8004abe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2300      	movs	r3, #0
 8004a98:	623b      	str	r3, [r7, #32]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	623b      	str	r3, [r7, #32]
 8004aaa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e190      	b.n	8004de0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d11b      	bne.n	8004afe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e170      	b.n	8004de0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d11b      	bne.n	8004b3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b26:	2300      	movs	r3, #0
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	e150      	b.n	8004de0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b54:	e144      	b.n	8004de0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	f200 80f1 	bhi.w	8004d42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d123      	bne.n	8004bb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fc79 	bl	8005464 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e145      	b.n	8004e08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bae:	e117      	b.n	8004de0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d14e      	bne.n	8004c56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	4906      	ldr	r1, [pc, #24]	; (8004bdc <HAL_I2C_Mem_Read+0x22c>)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 faa4 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e11a      	b.n	8004e08 <HAL_I2C_Mem_Read+0x458>
 8004bd2:	bf00      	nop
 8004bd4:	00100002 	.word	0x00100002
 8004bd8:	ffff0000 	.word	0xffff0000
 8004bdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c54:	e0c4      	b.n	8004de0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	496c      	ldr	r1, [pc, #432]	; (8004e10 <HAL_I2C_Mem_Read+0x460>)
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fa55 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0cb      	b.n	8004e08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	2200      	movs	r2, #0
 8004cba:	4955      	ldr	r1, [pc, #340]	; (8004e10 <HAL_I2C_Mem_Read+0x460>)
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fa27 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e09d      	b.n	8004e08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d40:	e04e      	b.n	8004de0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fb8c 	bl	8005464 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e058      	b.n	8004e08 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d124      	bne.n	8004de0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d107      	bne.n	8004dae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f47f aeb6 	bne.w	8004b56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e000      	b.n	8004e08 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004e06:	2302      	movs	r3, #2
  }
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3728      	adds	r7, #40	; 0x28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	00010004 	.word	0x00010004

08004e14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	4611      	mov	r1, r2
 8004e20:	461a      	mov	r2, r3
 8004e22:	4603      	mov	r3, r0
 8004e24:	817b      	strh	r3, [r7, #10]
 8004e26:	460b      	mov	r3, r1
 8004e28:	813b      	strh	r3, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f960 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e64:	d103      	bne.n	8004e6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e05f      	b.n	8004f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e72:	897b      	ldrh	r3, [r7, #10]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	6a3a      	ldr	r2, [r7, #32]
 8004e86:	492d      	ldr	r1, [pc, #180]	; (8004f3c <I2C_RequestMemoryWrite+0x128>)
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f9bb 	bl	8005204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e04c      	b.n	8004f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb0:	6a39      	ldr	r1, [r7, #32]
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fa46 	bl	8005344 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00d      	beq.n	8004eda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d107      	bne.n	8004ed6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e02b      	b.n	8004f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d105      	bne.n	8004eec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ee0:	893b      	ldrh	r3, [r7, #8]
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	611a      	str	r2, [r3, #16]
 8004eea:	e021      	b.n	8004f30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004eec:	893b      	ldrh	r3, [r7, #8]
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efc:	6a39      	ldr	r1, [r7, #32]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 fa20 	bl	8005344 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00d      	beq.n	8004f26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d107      	bne.n	8004f22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e005      	b.n	8004f32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f26:	893b      	ldrh	r3, [r7, #8]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	00010002 	.word	0x00010002

08004f40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	4608      	mov	r0, r1
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4603      	mov	r3, r0
 8004f50:	817b      	strh	r3, [r7, #10]
 8004f52:	460b      	mov	r3, r1
 8004f54:	813b      	strh	r3, [r7, #8]
 8004f56:	4613      	mov	r3, r2
 8004f58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f8c2 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00d      	beq.n	8004fae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa0:	d103      	bne.n	8004faa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e0aa      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fae:	897b      	ldrh	r3, [r7, #10]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	6a3a      	ldr	r2, [r7, #32]
 8004fc2:	4952      	ldr	r1, [pc, #328]	; (800510c <I2C_RequestMemoryRead+0x1cc>)
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f91d 	bl	8005204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e097      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	6a39      	ldr	r1, [r7, #32]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f9a8 	bl	8005344 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00d      	beq.n	8005016 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d107      	bne.n	8005012 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005010:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e076      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d105      	bne.n	8005028 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800501c:	893b      	ldrh	r3, [r7, #8]
 800501e:	b2da      	uxtb	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	611a      	str	r2, [r3, #16]
 8005026:	e021      	b.n	800506c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005028:	893b      	ldrh	r3, [r7, #8]
 800502a:	0a1b      	lsrs	r3, r3, #8
 800502c:	b29b      	uxth	r3, r3
 800502e:	b2da      	uxtb	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005038:	6a39      	ldr	r1, [r7, #32]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 f982 	bl	8005344 <I2C_WaitOnTXEFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00d      	beq.n	8005062 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	2b04      	cmp	r3, #4
 800504c:	d107      	bne.n	800505e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e050      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005062:	893b      	ldrh	r3, [r7, #8]
 8005064:	b2da      	uxtb	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800506c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506e:	6a39      	ldr	r1, [r7, #32]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f967 	bl	8005344 <I2C_WaitOnTXEFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	2b04      	cmp	r3, #4
 8005082:	d107      	bne.n	8005094 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005092:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e035      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f82b 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00d      	beq.n	80050dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ce:	d103      	bne.n	80050d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e013      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050dc:	897b      	ldrh	r3, [r7, #10]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	6a3a      	ldr	r2, [r7, #32]
 80050f0:	4906      	ldr	r1, [pc, #24]	; (800510c <I2C_RequestMemoryRead+0x1cc>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f886 	bl	8005204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	00010002 	.word	0x00010002

08005110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005120:	e048      	b.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d044      	beq.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512a:	f7fe fe79 	bl	8003e20 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d302      	bcc.n	8005140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d139      	bne.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	0c1b      	lsrs	r3, r3, #16
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	d10d      	bne.n	8005166 <I2C_WaitOnFlagUntilTimeout+0x56>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	43da      	mvns	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4013      	ands	r3, r2
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	bf0c      	ite	eq
 800515c:	2301      	moveq	r3, #1
 800515e:	2300      	movne	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	e00c      	b.n	8005180 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	43da      	mvns	r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4013      	ands	r3, r2
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	429a      	cmp	r2, r3
 8005184:	d116      	bne.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	f043 0220 	orr.w	r2, r3, #32
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e023      	b.n	80051fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	0c1b      	lsrs	r3, r3, #16
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10d      	bne.n	80051da <I2C_WaitOnFlagUntilTimeout+0xca>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	43da      	mvns	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4013      	ands	r3, r2
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bf0c      	ite	eq
 80051d0:	2301      	moveq	r3, #1
 80051d2:	2300      	movne	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	e00c      	b.n	80051f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	43da      	mvns	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4013      	ands	r3, r2
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d093      	beq.n	8005122 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005212:	e071      	b.n	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005222:	d123      	bne.n	800526c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005232:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800523c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	f043 0204 	orr.w	r2, r3, #4
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e067      	b.n	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d041      	beq.n	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005274:	f7fe fdd4 	bl	8003e20 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	429a      	cmp	r2, r3
 8005282:	d302      	bcc.n	800528a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d136      	bne.n	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	0c1b      	lsrs	r3, r3, #16
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b01      	cmp	r3, #1
 8005292:	d10c      	bne.n	80052ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	43da      	mvns	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4013      	ands	r3, r2
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bf14      	ite	ne
 80052a6:	2301      	movne	r3, #1
 80052a8:	2300      	moveq	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	e00b      	b.n	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	43da      	mvns	r2, r3
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4013      	ands	r3, r2
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d016      	beq.n	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	f043 0220 	orr.w	r2, r3, #32
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e021      	b.n	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d10c      	bne.n	800531c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	43da      	mvns	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4013      	ands	r3, r2
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e00b      	b.n	8005334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	43da      	mvns	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4013      	ands	r3, r2
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	f47f af6d 	bne.w	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005350:	e034      	b.n	80053bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f8e3 	bl	800551e <I2C_IsAcknowledgeFailed>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e034      	b.n	80053cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d028      	beq.n	80053bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fe fd59 	bl	8003e20 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d11d      	bne.n	80053bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d016      	beq.n	80053bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	f043 0220 	orr.w	r2, r3, #32
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e007      	b.n	80053cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c6:	2b80      	cmp	r3, #128	; 0x80
 80053c8:	d1c3      	bne.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053e0:	e034      	b.n	800544c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f89b 	bl	800551e <I2C_IsAcknowledgeFailed>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e034      	b.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d028      	beq.n	800544c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fa:	f7fe fd11 	bl	8003e20 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	429a      	cmp	r2, r3
 8005408:	d302      	bcc.n	8005410 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d11d      	bne.n	800544c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b04      	cmp	r3, #4
 800541c:	d016      	beq.n	800544c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e007      	b.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b04      	cmp	r3, #4
 8005458:	d1c3      	bne.n	80053e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005470:	e049      	b.n	8005506 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b10      	cmp	r3, #16
 800547e:	d119      	bne.n	80054b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0210 	mvn.w	r2, #16
 8005488:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e030      	b.n	8005516 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b4:	f7fe fcb4 	bl	8003e20 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d302      	bcc.n	80054ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d11d      	bne.n	8005506 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d016      	beq.n	8005506 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f043 0220 	orr.w	r2, r3, #32
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e007      	b.n	8005516 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d1ae      	bne.n	8005472 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005534:	d11b      	bne.n	800556e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800553e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f043 0204 	orr.w	r2, r3, #4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_PWR_EnableBkUpAccess+0x20>)
 8005584:	2201      	movs	r2, #1
 8005586:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005588:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <HAL_PWR_EnableBkUpAccess+0x24>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800558e:	687b      	ldr	r3, [r7, #4]
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	420e0020 	.word	0x420e0020
 80055a0:	40007000 	.word	0x40007000

080055a4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <HAL_PWR_DisableBkUpAccess+0x20>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_PWR_DisableBkUpAccess+0x24>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80055b6:	687b      	ldr	r3, [r7, #4]
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	420e0020 	.word	0x420e0020
 80055c8:	40007000 	.word	0x40007000

080055cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e267      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d075      	beq.n	80056d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ea:	4b88      	ldr	r3, [pc, #544]	; (800580c <HAL_RCC_OscConfig+0x240>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d00c      	beq.n	8005610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055f6:	4b85      	ldr	r3, [pc, #532]	; (800580c <HAL_RCC_OscConfig+0x240>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d112      	bne.n	8005628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005602:	4b82      	ldr	r3, [pc, #520]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800560e:	d10b      	bne.n	8005628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005610:	4b7e      	ldr	r3, [pc, #504]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d05b      	beq.n	80056d4 <HAL_RCC_OscConfig+0x108>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d157      	bne.n	80056d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e242      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005630:	d106      	bne.n	8005640 <HAL_RCC_OscConfig+0x74>
 8005632:	4b76      	ldr	r3, [pc, #472]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a75      	ldr	r2, [pc, #468]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	e01d      	b.n	800567c <HAL_RCC_OscConfig+0xb0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005648:	d10c      	bne.n	8005664 <HAL_RCC_OscConfig+0x98>
 800564a:	4b70      	ldr	r3, [pc, #448]	; (800580c <HAL_RCC_OscConfig+0x240>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a6f      	ldr	r2, [pc, #444]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	4b6d      	ldr	r3, [pc, #436]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a6c      	ldr	r2, [pc, #432]	; (800580c <HAL_RCC_OscConfig+0x240>)
 800565c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e00b      	b.n	800567c <HAL_RCC_OscConfig+0xb0>
 8005664:	4b69      	ldr	r3, [pc, #420]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a68      	ldr	r2, [pc, #416]	; (800580c <HAL_RCC_OscConfig+0x240>)
 800566a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	4b66      	ldr	r3, [pc, #408]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a65      	ldr	r2, [pc, #404]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800567a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d013      	beq.n	80056ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005684:	f7fe fbcc 	bl	8003e20 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800568c:	f7fe fbc8 	bl	8003e20 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b64      	cmp	r3, #100	; 0x64
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e207      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569e:	4b5b      	ldr	r3, [pc, #364]	; (800580c <HAL_RCC_OscConfig+0x240>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0xc0>
 80056aa:	e014      	b.n	80056d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fe fbb8 	bl	8003e20 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b4:	f7fe fbb4 	bl	8003e20 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b64      	cmp	r3, #100	; 0x64
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e1f3      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056c6:	4b51      	ldr	r3, [pc, #324]	; (800580c <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0xe8>
 80056d2:	e000      	b.n	80056d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d063      	beq.n	80057aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056e2:	4b4a      	ldr	r3, [pc, #296]	; (800580c <HAL_RCC_OscConfig+0x240>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 030c 	and.w	r3, r3, #12
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ee:	4b47      	ldr	r3, [pc, #284]	; (800580c <HAL_RCC_OscConfig+0x240>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d11c      	bne.n	8005734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056fa:	4b44      	ldr	r3, [pc, #272]	; (800580c <HAL_RCC_OscConfig+0x240>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d116      	bne.n	8005734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005706:	4b41      	ldr	r3, [pc, #260]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_RCC_OscConfig+0x152>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d001      	beq.n	800571e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e1c7      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571e:	4b3b      	ldr	r3, [pc, #236]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	4937      	ldr	r1, [pc, #220]	; (800580c <HAL_RCC_OscConfig+0x240>)
 800572e:	4313      	orrs	r3, r2
 8005730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005732:	e03a      	b.n	80057aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d020      	beq.n	800577e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800573c:	4b34      	ldr	r3, [pc, #208]	; (8005810 <HAL_RCC_OscConfig+0x244>)
 800573e:	2201      	movs	r2, #1
 8005740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005742:	f7fe fb6d 	bl	8003e20 <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800574a:	f7fe fb69 	bl	8003e20 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e1a8      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575c:	4b2b      	ldr	r3, [pc, #172]	; (800580c <HAL_RCC_OscConfig+0x240>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0f0      	beq.n	800574a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005768:	4b28      	ldr	r3, [pc, #160]	; (800580c <HAL_RCC_OscConfig+0x240>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	4925      	ldr	r1, [pc, #148]	; (800580c <HAL_RCC_OscConfig+0x240>)
 8005778:	4313      	orrs	r3, r2
 800577a:	600b      	str	r3, [r1, #0]
 800577c:	e015      	b.n	80057aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800577e:	4b24      	ldr	r3, [pc, #144]	; (8005810 <HAL_RCC_OscConfig+0x244>)
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7fe fb4c 	bl	8003e20 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800578c:	f7fe fb48 	bl	8003e20 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e187      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800579e:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_RCC_OscConfig+0x240>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d036      	beq.n	8005824 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d016      	beq.n	80057ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057be:	4b15      	ldr	r3, [pc, #84]	; (8005814 <HAL_RCC_OscConfig+0x248>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c4:	f7fe fb2c 	bl	8003e20 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057cc:	f7fe fb28 	bl	8003e20 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e167      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057de:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_RCC_OscConfig+0x240>)
 80057e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x200>
 80057ea:	e01b      	b.n	8005824 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <HAL_RCC_OscConfig+0x248>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f2:	f7fe fb15 	bl	8003e20 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f8:	e00e      	b.n	8005818 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057fa:	f7fe fb11 	bl	8003e20 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d907      	bls.n	8005818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e150      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
 800580c:	40023800 	.word	0x40023800
 8005810:	42470000 	.word	0x42470000
 8005814:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005818:	4b88      	ldr	r3, [pc, #544]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 800581a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1ea      	bne.n	80057fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8097 	beq.w	8005960 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005832:	2300      	movs	r3, #0
 8005834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005836:	4b81      	ldr	r3, [pc, #516]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10f      	bne.n	8005862 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005842:	2300      	movs	r3, #0
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	4b7d      	ldr	r3, [pc, #500]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	4a7c      	ldr	r2, [pc, #496]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 800584c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005850:	6413      	str	r3, [r2, #64]	; 0x40
 8005852:	4b7a      	ldr	r3, [pc, #488]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585a:	60bb      	str	r3, [r7, #8]
 800585c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800585e:	2301      	movs	r3, #1
 8005860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005862:	4b77      	ldr	r3, [pc, #476]	; (8005a40 <HAL_RCC_OscConfig+0x474>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586a:	2b00      	cmp	r3, #0
 800586c:	d118      	bne.n	80058a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800586e:	4b74      	ldr	r3, [pc, #464]	; (8005a40 <HAL_RCC_OscConfig+0x474>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a73      	ldr	r2, [pc, #460]	; (8005a40 <HAL_RCC_OscConfig+0x474>)
 8005874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800587a:	f7fe fad1 	bl	8003e20 <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005880:	e008      	b.n	8005894 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005882:	f7fe facd 	bl	8003e20 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e10c      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005894:	4b6a      	ldr	r3, [pc, #424]	; (8005a40 <HAL_RCC_OscConfig+0x474>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f0      	beq.n	8005882 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d106      	bne.n	80058b6 <HAL_RCC_OscConfig+0x2ea>
 80058a8:	4b64      	ldr	r3, [pc, #400]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	4a63      	ldr	r2, [pc, #396]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	6713      	str	r3, [r2, #112]	; 0x70
 80058b4:	e01c      	b.n	80058f0 <HAL_RCC_OscConfig+0x324>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b05      	cmp	r3, #5
 80058bc:	d10c      	bne.n	80058d8 <HAL_RCC_OscConfig+0x30c>
 80058be:	4b5f      	ldr	r3, [pc, #380]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80058c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c2:	4a5e      	ldr	r2, [pc, #376]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80058c4:	f043 0304 	orr.w	r3, r3, #4
 80058c8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ca:	4b5c      	ldr	r3, [pc, #368]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ce:	4a5b      	ldr	r2, [pc, #364]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	6713      	str	r3, [r2, #112]	; 0x70
 80058d6:	e00b      	b.n	80058f0 <HAL_RCC_OscConfig+0x324>
 80058d8:	4b58      	ldr	r3, [pc, #352]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80058da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058dc:	4a57      	ldr	r2, [pc, #348]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	6713      	str	r3, [r2, #112]	; 0x70
 80058e4:	4b55      	ldr	r3, [pc, #340]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	4a54      	ldr	r2, [pc, #336]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80058ea:	f023 0304 	bic.w	r3, r3, #4
 80058ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d015      	beq.n	8005924 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f8:	f7fe fa92 	bl	8003e20 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058fe:	e00a      	b.n	8005916 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005900:	f7fe fa8e 	bl	8003e20 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	f241 3288 	movw	r2, #5000	; 0x1388
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e0cb      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005916:	4b49      	ldr	r3, [pc, #292]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 8005918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0ee      	beq.n	8005900 <HAL_RCC_OscConfig+0x334>
 8005922:	e014      	b.n	800594e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005924:	f7fe fa7c 	bl	8003e20 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800592a:	e00a      	b.n	8005942 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800592c:	f7fe fa78 	bl	8003e20 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	f241 3288 	movw	r2, #5000	; 0x1388
 800593a:	4293      	cmp	r3, r2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e0b5      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005942:	4b3e      	ldr	r3, [pc, #248]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1ee      	bne.n	800592c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800594e:	7dfb      	ldrb	r3, [r7, #23]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005954:	4b39      	ldr	r3, [pc, #228]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	4a38      	ldr	r2, [pc, #224]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 800595a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 80a1 	beq.w	8005aac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800596a:	4b34      	ldr	r3, [pc, #208]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 030c 	and.w	r3, r3, #12
 8005972:	2b08      	cmp	r3, #8
 8005974:	d05c      	beq.n	8005a30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d141      	bne.n	8005a02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597e:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <HAL_RCC_OscConfig+0x478>)
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005984:	f7fe fa4c 	bl	8003e20 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800598c:	f7fe fa48 	bl	8003e20 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e087      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599e:	4b27      	ldr	r3, [pc, #156]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69da      	ldr	r2, [r3, #28]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	019b      	lsls	r3, r3, #6
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	085b      	lsrs	r3, r3, #1
 80059c2:	3b01      	subs	r3, #1
 80059c4:	041b      	lsls	r3, r3, #16
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	061b      	lsls	r3, r3, #24
 80059ce:	491b      	ldr	r1, [pc, #108]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d4:	4b1b      	ldr	r3, [pc, #108]	; (8005a44 <HAL_RCC_OscConfig+0x478>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059da:	f7fe fa21 	bl	8003e20 <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e2:	f7fe fa1d 	bl	8003e20 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e05c      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f4:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0f0      	beq.n	80059e2 <HAL_RCC_OscConfig+0x416>
 8005a00:	e054      	b.n	8005aac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a02:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <HAL_RCC_OscConfig+0x478>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a08:	f7fe fa0a 	bl	8003e20 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a10:	f7fe fa06 	bl	8003e20 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e045      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <HAL_RCC_OscConfig+0x470>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x444>
 8005a2e:	e03d      	b.n	8005aac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d107      	bne.n	8005a48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e038      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	40007000 	.word	0x40007000
 8005a44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a48:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <HAL_RCC_OscConfig+0x4ec>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d028      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d121      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d11a      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a78:	4013      	ands	r3, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d111      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	3b01      	subs	r3, #1
 8005a92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d107      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d001      	beq.n	8005aac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40023800 	.word	0x40023800

08005abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0cc      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ad0:	4b68      	ldr	r3, [pc, #416]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d90c      	bls.n	8005af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ade:	4b65      	ldr	r3, [pc, #404]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae6:	4b63      	ldr	r3, [pc, #396]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d001      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0b8      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d020      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b10:	4b59      	ldr	r3, [pc, #356]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4a58      	ldr	r2, [pc, #352]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b28:	4b53      	ldr	r3, [pc, #332]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	4a52      	ldr	r2, [pc, #328]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b34:	4b50      	ldr	r3, [pc, #320]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	494d      	ldr	r1, [pc, #308]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d044      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d107      	bne.n	8005b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5a:	4b47      	ldr	r3, [pc, #284]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d119      	bne.n	8005b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e07f      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d003      	beq.n	8005b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d107      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b7a:	4b3f      	ldr	r3, [pc, #252]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e06f      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b8a:	4b3b      	ldr	r3, [pc, #236]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e067      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b9a:	4b37      	ldr	r3, [pc, #220]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f023 0203 	bic.w	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	4934      	ldr	r1, [pc, #208]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bac:	f7fe f938 	bl	8003e20 <HAL_GetTick>
 8005bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb2:	e00a      	b.n	8005bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb4:	f7fe f934 	bl	8003e20 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e04f      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bca:	4b2b      	ldr	r3, [pc, #172]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 020c 	and.w	r2, r3, #12
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d1eb      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bdc:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d20c      	bcs.n	8005c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bea:	4b22      	ldr	r3, [pc, #136]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b20      	ldr	r3, [pc, #128]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e032      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c10:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4916      	ldr	r1, [pc, #88]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c2e:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	490e      	ldr	r1, [pc, #56]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c42:	f000 f821 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8005c46:	4602      	mov	r2, r0
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	490a      	ldr	r1, [pc, #40]	; (8005c7c <HAL_RCC_ClockConfig+0x1c0>)
 8005c54:	5ccb      	ldrb	r3, [r1, r3]
 8005c56:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5a:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c5e:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <HAL_RCC_ClockConfig+0x1c8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe f898 	bl	8003d98 <HAL_InitTick>

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40023c00 	.word	0x40023c00
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	0800f138 	.word	0x0800f138
 8005c80:	20000000 	.word	0x20000000
 8005c84:	20000004 	.word	0x20000004

08005c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c8c:	b090      	sub	sp, #64	; 0x40
 8005c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	637b      	str	r3, [r7, #52]	; 0x34
 8005c94:	2300      	movs	r3, #0
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c98:	2300      	movs	r3, #0
 8005c9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ca0:	4b59      	ldr	r3, [pc, #356]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 030c 	and.w	r3, r3, #12
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d00d      	beq.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	f200 80a1 	bhi.w	8005df4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_RCC_GetSysClockFreq+0x34>
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d003      	beq.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cba:	e09b      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cbc:	4b53      	ldr	r3, [pc, #332]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8005cbe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005cc0:	e09b      	b.n	8005dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cc2:	4b53      	ldr	r3, [pc, #332]	; (8005e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cc6:	e098      	b.n	8005dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cc8:	4b4f      	ldr	r3, [pc, #316]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cd2:	4b4d      	ldr	r3, [pc, #308]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d028      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cde:	4b4a      	ldr	r3, [pc, #296]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	099b      	lsrs	r3, r3, #6
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	623b      	str	r3, [r7, #32]
 8005ce8:	627a      	str	r2, [r7, #36]	; 0x24
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4b47      	ldr	r3, [pc, #284]	; (8005e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cf4:	fb03 f201 	mul.w	r2, r3, r1
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	fb00 f303 	mul.w	r3, r0, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	4a43      	ldr	r2, [pc, #268]	; (8005e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d02:	fba0 1202 	umull	r1, r2, r0, r2
 8005d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d08:	460a      	mov	r2, r1
 8005d0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d0e:	4413      	add	r3, r2
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d14:	2200      	movs	r2, #0
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	61fa      	str	r2, [r7, #28]
 8005d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d22:	f7fa ffb1 	bl	8000c88 <__aeabi_uldivmod>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d2e:	e053      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d30:	4b35      	ldr	r3, [pc, #212]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	099b      	lsrs	r3, r3, #6
 8005d36:	2200      	movs	r2, #0
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	617a      	str	r2, [r7, #20]
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d42:	f04f 0b00 	mov.w	fp, #0
 8005d46:	4652      	mov	r2, sl
 8005d48:	465b      	mov	r3, fp
 8005d4a:	f04f 0000 	mov.w	r0, #0
 8005d4e:	f04f 0100 	mov.w	r1, #0
 8005d52:	0159      	lsls	r1, r3, #5
 8005d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d58:	0150      	lsls	r0, r2, #5
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	ebb2 080a 	subs.w	r8, r2, sl
 8005d62:	eb63 090b 	sbc.w	r9, r3, fp
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	f04f 0300 	mov.w	r3, #0
 8005d6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d7a:	ebb2 0408 	subs.w	r4, r2, r8
 8005d7e:	eb63 0509 	sbc.w	r5, r3, r9
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	00eb      	lsls	r3, r5, #3
 8005d8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d90:	00e2      	lsls	r2, r4, #3
 8005d92:	4614      	mov	r4, r2
 8005d94:	461d      	mov	r5, r3
 8005d96:	eb14 030a 	adds.w	r3, r4, sl
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	eb45 030b 	adc.w	r3, r5, fp
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dae:	4629      	mov	r1, r5
 8005db0:	028b      	lsls	r3, r1, #10
 8005db2:	4621      	mov	r1, r4
 8005db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005db8:	4621      	mov	r1, r4
 8005dba:	028a      	lsls	r2, r1, #10
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	60fa      	str	r2, [r7, #12]
 8005dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dcc:	f7fa ff5c 	bl	8000c88 <__aeabi_uldivmod>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	0c1b      	lsrs	r3, r3, #16
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	3301      	adds	r3, #1
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005df2:	e002      	b.n	8005dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005df4:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8005df6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3740      	adds	r7, #64	; 0x40
 8005e00:	46bd      	mov	sp, r7
 8005e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e06:	bf00      	nop
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	00f42400 	.word	0x00f42400
 8005e10:	017d7840 	.word	0x017d7840

08005e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e18:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20000000 	.word	0x20000000

08005e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e30:	f7ff fff0 	bl	8005e14 <HAL_RCC_GetHCLKFreq>
 8005e34:	4602      	mov	r2, r0
 8005e36:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	0a9b      	lsrs	r3, r3, #10
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	4903      	ldr	r1, [pc, #12]	; (8005e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e42:	5ccb      	ldrb	r3, [r1, r3]
 8005e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	0800f148 	.word	0x0800f148

08005e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e58:	f7ff ffdc 	bl	8005e14 <HAL_RCC_GetHCLKFreq>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	0b5b      	lsrs	r3, r3, #13
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	4903      	ldr	r1, [pc, #12]	; (8005e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e6a:	5ccb      	ldrb	r3, [r1, r3]
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40023800 	.word	0x40023800
 8005e78:	0800f148 	.word	0x0800f148

08005e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e041      	b.n	8005f12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fd fc76 	bl	8003794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f000 fe6a 	bl	8006b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d001      	beq.n	8005f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e04e      	b.n	8005fd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a23      	ldr	r2, [pc, #140]	; (8005fe0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d022      	beq.n	8005f9c <HAL_TIM_Base_Start_IT+0x80>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5e:	d01d      	beq.n	8005f9c <HAL_TIM_Base_Start_IT+0x80>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1f      	ldr	r2, [pc, #124]	; (8005fe4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d018      	beq.n	8005f9c <HAL_TIM_Base_Start_IT+0x80>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1e      	ldr	r2, [pc, #120]	; (8005fe8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d013      	beq.n	8005f9c <HAL_TIM_Base_Start_IT+0x80>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1c      	ldr	r2, [pc, #112]	; (8005fec <HAL_TIM_Base_Start_IT+0xd0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00e      	beq.n	8005f9c <HAL_TIM_Base_Start_IT+0x80>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1b      	ldr	r2, [pc, #108]	; (8005ff0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d009      	beq.n	8005f9c <HAL_TIM_Base_Start_IT+0x80>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a19      	ldr	r2, [pc, #100]	; (8005ff4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d004      	beq.n	8005f9c <HAL_TIM_Base_Start_IT+0x80>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a18      	ldr	r2, [pc, #96]	; (8005ff8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d111      	bne.n	8005fc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b06      	cmp	r3, #6
 8005fac:	d010      	beq.n	8005fd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0201 	orr.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fbe:	e007      	b.n	8005fd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40000800 	.word	0x40000800
 8005fec:	40000c00 	.word	0x40000c00
 8005ff0:	40010400 	.word	0x40010400
 8005ff4:	40014000 	.word	0x40014000
 8005ff8:	40001800 	.word	0x40001800

08005ffc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e041      	b.n	8006092 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f839 	bl	800609a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f000 fdaa 	bl	8006b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e041      	b.n	8006144 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f839 	bl	800614c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3304      	adds	r3, #4
 80060ea:	4619      	mov	r1, r3
 80060ec:	4610      	mov	r0, r2
 80060ee:	f000 fd51 	bl	8006b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d109      	bne.n	8006184 <HAL_TIM_PWM_Start+0x24>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b01      	cmp	r3, #1
 800617a:	bf14      	ite	ne
 800617c:	2301      	movne	r3, #1
 800617e:	2300      	moveq	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	e022      	b.n	80061ca <HAL_TIM_PWM_Start+0x6a>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b04      	cmp	r3, #4
 8006188:	d109      	bne.n	800619e <HAL_TIM_PWM_Start+0x3e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b01      	cmp	r3, #1
 8006194:	bf14      	ite	ne
 8006196:	2301      	movne	r3, #1
 8006198:	2300      	moveq	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	e015      	b.n	80061ca <HAL_TIM_PWM_Start+0x6a>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d109      	bne.n	80061b8 <HAL_TIM_PWM_Start+0x58>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	bf14      	ite	ne
 80061b0:	2301      	movne	r3, #1
 80061b2:	2300      	moveq	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	e008      	b.n	80061ca <HAL_TIM_PWM_Start+0x6a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	bf14      	ite	ne
 80061c4:	2301      	movne	r3, #1
 80061c6:	2300      	moveq	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e07c      	b.n	80062cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_PWM_Start+0x82>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e0:	e013      	b.n	800620a <HAL_TIM_PWM_Start+0xaa>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_PWM_Start+0x92>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f0:	e00b      	b.n	800620a <HAL_TIM_PWM_Start+0xaa>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d104      	bne.n	8006202 <HAL_TIM_PWM_Start+0xa2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006200:	e003      	b.n	800620a <HAL_TIM_PWM_Start+0xaa>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2202      	movs	r2, #2
 8006206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2201      	movs	r2, #1
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 ffb4 	bl	8007180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a2d      	ldr	r2, [pc, #180]	; (80062d4 <HAL_TIM_PWM_Start+0x174>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d004      	beq.n	800622c <HAL_TIM_PWM_Start+0xcc>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a2c      	ldr	r2, [pc, #176]	; (80062d8 <HAL_TIM_PWM_Start+0x178>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d101      	bne.n	8006230 <HAL_TIM_PWM_Start+0xd0>
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <HAL_TIM_PWM_Start+0xd2>
 8006230:	2300      	movs	r3, #0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d007      	beq.n	8006246 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006244:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <HAL_TIM_PWM_Start+0x174>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d022      	beq.n	8006296 <HAL_TIM_PWM_Start+0x136>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006258:	d01d      	beq.n	8006296 <HAL_TIM_PWM_Start+0x136>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1f      	ldr	r2, [pc, #124]	; (80062dc <HAL_TIM_PWM_Start+0x17c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d018      	beq.n	8006296 <HAL_TIM_PWM_Start+0x136>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1d      	ldr	r2, [pc, #116]	; (80062e0 <HAL_TIM_PWM_Start+0x180>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_TIM_PWM_Start+0x136>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1c      	ldr	r2, [pc, #112]	; (80062e4 <HAL_TIM_PWM_Start+0x184>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_TIM_PWM_Start+0x136>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a16      	ldr	r2, [pc, #88]	; (80062d8 <HAL_TIM_PWM_Start+0x178>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_TIM_PWM_Start+0x136>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a18      	ldr	r2, [pc, #96]	; (80062e8 <HAL_TIM_PWM_Start+0x188>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_TIM_PWM_Start+0x136>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a16      	ldr	r2, [pc, #88]	; (80062ec <HAL_TIM_PWM_Start+0x18c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d111      	bne.n	80062ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b06      	cmp	r3, #6
 80062a6:	d010      	beq.n	80062ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b8:	e007      	b.n	80062ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0201 	orr.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40010400 	.word	0x40010400
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000800 	.word	0x40000800
 80062e4:	40000c00 	.word	0x40000c00
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40001800 	.word	0x40001800

080062f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e097      	b.n	8006434 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d106      	bne.n	800631e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7fd fa8f 	bl	800383c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2202      	movs	r2, #2
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006334:	f023 0307 	bic.w	r3, r3, #7
 8006338:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3304      	adds	r3, #4
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f000 fc25 	bl	8006b94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	4313      	orrs	r3, r2
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006390:	f023 030c 	bic.w	r3, r3, #12
 8006394:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800639c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	4313      	orrs	r3, r2
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	011a      	lsls	r2, r3, #4
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	031b      	lsls	r3, r3, #12
 80063c0:	4313      	orrs	r3, r2
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80063ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	4313      	orrs	r3, r2
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800644c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006454:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800645c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006464:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d110      	bne.n	800648e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d102      	bne.n	8006478 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006472:	7b7b      	ldrb	r3, [r7, #13]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d001      	beq.n	800647c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e089      	b.n	8006590 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800648c:	e031      	b.n	80064f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b04      	cmp	r3, #4
 8006492:	d110      	bne.n	80064b6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d102      	bne.n	80064a0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800649a:	7b3b      	ldrb	r3, [r7, #12]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d001      	beq.n	80064a4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e075      	b.n	8006590 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064b4:	e01d      	b.n	80064f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d108      	bne.n	80064ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d105      	bne.n	80064ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064c2:	7b7b      	ldrb	r3, [r7, #13]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d102      	bne.n	80064ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064c8:	7b3b      	ldrb	r3, [r7, #12]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d001      	beq.n	80064d2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e05e      	b.n	8006590 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_TIM_Encoder_Start_IT+0xc4>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d010      	beq.n	8006520 <HAL_TIM_Encoder_Start_IT+0xe4>
 80064fe:	e01f      	b.n	8006540 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2201      	movs	r2, #1
 8006506:	2100      	movs	r1, #0
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fe39 	bl	8007180 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0202 	orr.w	r2, r2, #2
 800651c:	60da      	str	r2, [r3, #12]
      break;
 800651e:	e02e      	b.n	800657e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2201      	movs	r2, #1
 8006526:	2104      	movs	r1, #4
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fe29 	bl	8007180 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0204 	orr.w	r2, r2, #4
 800653c:	60da      	str	r2, [r3, #12]
      break;
 800653e:	e01e      	b.n	800657e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2201      	movs	r2, #1
 8006546:	2100      	movs	r1, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fe19 	bl	8007180 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2201      	movs	r2, #1
 8006554:	2104      	movs	r1, #4
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fe12 	bl	8007180 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0202 	orr.w	r2, r2, #2
 800656a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0204 	orr.w	r2, r2, #4
 800657a:	60da      	str	r2, [r3, #12]
      break;
 800657c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0201 	orr.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d020      	beq.n	80065fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01b      	beq.n	80065fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0202 	mvn.w	r2, #2
 80065cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fab7 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 80065e8:	e005      	b.n	80065f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 faa9 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 faba 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d020      	beq.n	8006648 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01b      	beq.n	8006648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0204 	mvn.w	r2, #4
 8006618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2202      	movs	r2, #2
 800661e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fa91 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 8006634:	e005      	b.n	8006642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa83 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fa94 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d020      	beq.n	8006694 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01b      	beq.n	8006694 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0208 	mvn.w	r2, #8
 8006664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2204      	movs	r2, #4
 800666a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fa6b 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa5d 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fa6e 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	d020      	beq.n	80066e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01b      	beq.n	80066e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0210 	mvn.w	r2, #16
 80066b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2208      	movs	r2, #8
 80066b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fa45 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 80066cc:	e005      	b.n	80066da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fa37 	bl	8006b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fa48 	bl	8006b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00c      	beq.n	8006704 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d007      	beq.n	8006704 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0201 	mvn.w	r2, #1
 80066fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fb fb4e 	bl	8001da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00c      	beq.n	8006728 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fe2a 	bl	800737c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00c      	beq.n	800674c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fa19 	bl	8006b7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00c      	beq.n	8006770 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0220 	mvn.w	r2, #32
 8006768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fdfc 	bl	8007368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006770:	bf00      	nop
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006792:	2302      	movs	r3, #2
 8006794:	e048      	b.n	8006828 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d839      	bhi.n	8006818 <HAL_TIM_OC_ConfigChannel+0xa0>
 80067a4:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	080067e1 	.word	0x080067e1
 80067b0:	08006819 	.word	0x08006819
 80067b4:	08006819 	.word	0x08006819
 80067b8:	08006819 	.word	0x08006819
 80067bc:	080067ef 	.word	0x080067ef
 80067c0:	08006819 	.word	0x08006819
 80067c4:	08006819 	.word	0x08006819
 80067c8:	08006819 	.word	0x08006819
 80067cc:	080067fd 	.word	0x080067fd
 80067d0:	08006819 	.word	0x08006819
 80067d4:	08006819 	.word	0x08006819
 80067d8:	08006819 	.word	0x08006819
 80067dc:	0800680b 	.word	0x0800680b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fa80 	bl	8006cec <TIM_OC1_SetConfig>
      break;
 80067ec:	e017      	b.n	800681e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fae9 	bl	8006dcc <TIM_OC2_SetConfig>
      break;
 80067fa:	e010      	b.n	800681e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fb58 	bl	8006eb8 <TIM_OC3_SetConfig>
      break;
 8006808:	e009      	b.n	800681e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fbc5 	bl	8006fa0 <TIM_OC4_SetConfig>
      break;
 8006816:	e002      	b.n	800681e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	75fb      	strb	r3, [r7, #23]
      break;
 800681c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800684a:	2302      	movs	r3, #2
 800684c:	e0ae      	b.n	80069ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b0c      	cmp	r3, #12
 800685a:	f200 809f 	bhi.w	800699c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800685e:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	08006899 	.word	0x08006899
 8006868:	0800699d 	.word	0x0800699d
 800686c:	0800699d 	.word	0x0800699d
 8006870:	0800699d 	.word	0x0800699d
 8006874:	080068d9 	.word	0x080068d9
 8006878:	0800699d 	.word	0x0800699d
 800687c:	0800699d 	.word	0x0800699d
 8006880:	0800699d 	.word	0x0800699d
 8006884:	0800691b 	.word	0x0800691b
 8006888:	0800699d 	.word	0x0800699d
 800688c:	0800699d 	.word	0x0800699d
 8006890:	0800699d 	.word	0x0800699d
 8006894:	0800695b 	.word	0x0800695b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fa24 	bl	8006cec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0208 	orr.w	r2, r2, #8
 80068b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0204 	bic.w	r2, r2, #4
 80068c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6999      	ldr	r1, [r3, #24]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	619a      	str	r2, [r3, #24]
      break;
 80068d6:	e064      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fa74 	bl	8006dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6999      	ldr	r1, [r3, #24]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	021a      	lsls	r2, r3, #8
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	619a      	str	r2, [r3, #24]
      break;
 8006918:	e043      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fac9 	bl	8006eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0208 	orr.w	r2, r2, #8
 8006934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69da      	ldr	r2, [r3, #28]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0204 	bic.w	r2, r2, #4
 8006944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69d9      	ldr	r1, [r3, #28]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	61da      	str	r2, [r3, #28]
      break;
 8006958:	e023      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fb1d 	bl	8006fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69d9      	ldr	r1, [r3, #28]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	021a      	lsls	r2, r3, #8
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	61da      	str	r2, [r3, #28]
      break;
 800699a:	e002      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	75fb      	strb	r3, [r7, #23]
      break;
 80069a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_TIM_ConfigClockSource+0x1c>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e0b4      	b.n	8006b3a <HAL_TIM_ConfigClockSource+0x186>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a08:	d03e      	beq.n	8006a88 <HAL_TIM_ConfigClockSource+0xd4>
 8006a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a0e:	f200 8087 	bhi.w	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a16:	f000 8086 	beq.w	8006b26 <HAL_TIM_ConfigClockSource+0x172>
 8006a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1e:	d87f      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a20:	2b70      	cmp	r3, #112	; 0x70
 8006a22:	d01a      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0xa6>
 8006a24:	2b70      	cmp	r3, #112	; 0x70
 8006a26:	d87b      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a28:	2b60      	cmp	r3, #96	; 0x60
 8006a2a:	d050      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0x11a>
 8006a2c:	2b60      	cmp	r3, #96	; 0x60
 8006a2e:	d877      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a30:	2b50      	cmp	r3, #80	; 0x50
 8006a32:	d03c      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0xfa>
 8006a34:	2b50      	cmp	r3, #80	; 0x50
 8006a36:	d873      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	d058      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x13a>
 8006a3c:	2b40      	cmp	r3, #64	; 0x40
 8006a3e:	d86f      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a40:	2b30      	cmp	r3, #48	; 0x30
 8006a42:	d064      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x15a>
 8006a44:	2b30      	cmp	r3, #48	; 0x30
 8006a46:	d86b      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d060      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x15a>
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d867      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d05c      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x15a>
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d05a      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x15a>
 8006a58:	e062      	b.n	8006b20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a6a:	f000 fb69 	bl	8007140 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	609a      	str	r2, [r3, #8]
      break;
 8006a86:	e04f      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a98:	f000 fb52 	bl	8007140 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aaa:	609a      	str	r2, [r3, #8]
      break;
 8006aac:	e03c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aba:	461a      	mov	r2, r3
 8006abc:	f000 fac6 	bl	800704c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2150      	movs	r1, #80	; 0x50
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fb1f 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006acc:	e02c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ada:	461a      	mov	r2, r3
 8006adc:	f000 fae5 	bl	80070aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2160      	movs	r1, #96	; 0x60
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fb0f 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006aec:	e01c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afa:	461a      	mov	r2, r3
 8006afc:	f000 faa6 	bl	800704c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2140      	movs	r1, #64	; 0x40
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 faff 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006b0c:	e00c      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f000 faf6 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006b1e:	e003      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	73fb      	strb	r3, [r7, #15]
      break;
 8006b24:	e000      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
	...

08006b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a46      	ldr	r2, [pc, #280]	; (8006cc0 <TIM_Base_SetConfig+0x12c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d013      	beq.n	8006bd4 <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb2:	d00f      	beq.n	8006bd4 <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a43      	ldr	r2, [pc, #268]	; (8006cc4 <TIM_Base_SetConfig+0x130>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00b      	beq.n	8006bd4 <TIM_Base_SetConfig+0x40>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a42      	ldr	r2, [pc, #264]	; (8006cc8 <TIM_Base_SetConfig+0x134>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d007      	beq.n	8006bd4 <TIM_Base_SetConfig+0x40>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a41      	ldr	r2, [pc, #260]	; (8006ccc <TIM_Base_SetConfig+0x138>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_Base_SetConfig+0x40>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a40      	ldr	r2, [pc, #256]	; (8006cd0 <TIM_Base_SetConfig+0x13c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d108      	bne.n	8006be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a35      	ldr	r2, [pc, #212]	; (8006cc0 <TIM_Base_SetConfig+0x12c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d02b      	beq.n	8006c46 <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf4:	d027      	beq.n	8006c46 <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a32      	ldr	r2, [pc, #200]	; (8006cc4 <TIM_Base_SetConfig+0x130>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d023      	beq.n	8006c46 <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a31      	ldr	r2, [pc, #196]	; (8006cc8 <TIM_Base_SetConfig+0x134>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01f      	beq.n	8006c46 <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a30      	ldr	r2, [pc, #192]	; (8006ccc <TIM_Base_SetConfig+0x138>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d01b      	beq.n	8006c46 <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2f      	ldr	r2, [pc, #188]	; (8006cd0 <TIM_Base_SetConfig+0x13c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d017      	beq.n	8006c46 <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a2e      	ldr	r2, [pc, #184]	; (8006cd4 <TIM_Base_SetConfig+0x140>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d013      	beq.n	8006c46 <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2d      	ldr	r2, [pc, #180]	; (8006cd8 <TIM_Base_SetConfig+0x144>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00f      	beq.n	8006c46 <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <TIM_Base_SetConfig+0x148>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00b      	beq.n	8006c46 <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a2b      	ldr	r2, [pc, #172]	; (8006ce0 <TIM_Base_SetConfig+0x14c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d007      	beq.n	8006c46 <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a2a      	ldr	r2, [pc, #168]	; (8006ce4 <TIM_Base_SetConfig+0x150>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d003      	beq.n	8006c46 <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a29      	ldr	r2, [pc, #164]	; (8006ce8 <TIM_Base_SetConfig+0x154>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d108      	bne.n	8006c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a10      	ldr	r2, [pc, #64]	; (8006cc0 <TIM_Base_SetConfig+0x12c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_Base_SetConfig+0xf8>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a12      	ldr	r2, [pc, #72]	; (8006cd0 <TIM_Base_SetConfig+0x13c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d103      	bne.n	8006c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d105      	bne.n	8006cb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f023 0201 	bic.w	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	611a      	str	r2, [r3, #16]
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40000400 	.word	0x40000400
 8006cc8:	40000800 	.word	0x40000800
 8006ccc:	40000c00 	.word	0x40000c00
 8006cd0:	40010400 	.word	0x40010400
 8006cd4:	40014000 	.word	0x40014000
 8006cd8:	40014400 	.word	0x40014400
 8006cdc:	40014800 	.word	0x40014800
 8006ce0:	40001800 	.word	0x40001800
 8006ce4:	40001c00 	.word	0x40001c00
 8006ce8:	40002000 	.word	0x40002000

08006cec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	f023 0201 	bic.w	r2, r3, #1
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0303 	bic.w	r3, r3, #3
 8006d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f023 0302 	bic.w	r3, r3, #2
 8006d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a20      	ldr	r2, [pc, #128]	; (8006dc4 <TIM_OC1_SetConfig+0xd8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d003      	beq.n	8006d50 <TIM_OC1_SetConfig+0x64>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a1f      	ldr	r2, [pc, #124]	; (8006dc8 <TIM_OC1_SetConfig+0xdc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10c      	bne.n	8006d6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0308 	bic.w	r3, r3, #8
 8006d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f023 0304 	bic.w	r3, r3, #4
 8006d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a15      	ldr	r2, [pc, #84]	; (8006dc4 <TIM_OC1_SetConfig+0xd8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_OC1_SetConfig+0x8e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a14      	ldr	r2, [pc, #80]	; (8006dc8 <TIM_OC1_SetConfig+0xdc>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d111      	bne.n	8006d9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	621a      	str	r2, [r3, #32]
}
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40010400 	.word	0x40010400

08006dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	f023 0210 	bic.w	r2, r3, #16
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 0320 	bic.w	r3, r3, #32
 8006e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <TIM_OC2_SetConfig+0xe4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_OC2_SetConfig+0x68>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a21      	ldr	r2, [pc, #132]	; (8006eb4 <TIM_OC2_SetConfig+0xe8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d10d      	bne.n	8006e50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a17      	ldr	r2, [pc, #92]	; (8006eb0 <TIM_OC2_SetConfig+0xe4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_OC2_SetConfig+0x94>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <TIM_OC2_SetConfig+0xe8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d113      	bne.n	8006e88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40010000 	.word	0x40010000
 8006eb4:	40010400 	.word	0x40010400

08006eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0303 	bic.w	r3, r3, #3
 8006eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a21      	ldr	r2, [pc, #132]	; (8006f98 <TIM_OC3_SetConfig+0xe0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d003      	beq.n	8006f1e <TIM_OC3_SetConfig+0x66>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a20      	ldr	r2, [pc, #128]	; (8006f9c <TIM_OC3_SetConfig+0xe4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d10d      	bne.n	8006f3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a16      	ldr	r2, [pc, #88]	; (8006f98 <TIM_OC3_SetConfig+0xe0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d003      	beq.n	8006f4a <TIM_OC3_SetConfig+0x92>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a15      	ldr	r2, [pc, #84]	; (8006f9c <TIM_OC3_SetConfig+0xe4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d113      	bne.n	8006f72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	011b      	lsls	r3, r3, #4
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	621a      	str	r2, [r3, #32]
}
 8006f8c:	bf00      	nop
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	40010000 	.word	0x40010000
 8006f9c:	40010400 	.word	0x40010400

08006fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	021b      	lsls	r3, r3, #8
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	031b      	lsls	r3, r3, #12
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a12      	ldr	r2, [pc, #72]	; (8007044 <TIM_OC4_SetConfig+0xa4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC4_SetConfig+0x68>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a11      	ldr	r2, [pc, #68]	; (8007048 <TIM_OC4_SetConfig+0xa8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d109      	bne.n	800701c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800700e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	019b      	lsls	r3, r3, #6
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40010400 	.word	0x40010400

0800704c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	f023 0201 	bic.w	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f023 030a 	bic.w	r3, r3, #10
 8007088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	f023 0210 	bic.w	r2, r3, #16
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	031b      	lsls	r3, r3, #12
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	621a      	str	r2, [r3, #32]
}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	f043 0307 	orr.w	r3, r3, #7
 800712c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	609a      	str	r2, [r3, #8]
}
 8007134:	bf00      	nop
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800715a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	021a      	lsls	r2, r3, #8
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	431a      	orrs	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4313      	orrs	r3, r2
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	609a      	str	r2, [r3, #8]
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f003 031f 	and.w	r3, r3, #31
 8007192:	2201      	movs	r2, #1
 8007194:	fa02 f303 	lsl.w	r3, r2, r3
 8007198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a1a      	ldr	r2, [r3, #32]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	43db      	mvns	r3, r3
 80071a2:	401a      	ands	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1a      	ldr	r2, [r3, #32]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	fa01 f303 	lsl.w	r3, r1, r3
 80071b8:	431a      	orrs	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	621a      	str	r2, [r3, #32]
}
 80071be:	bf00      	nop
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
	...

080071cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e05a      	b.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a21      	ldr	r2, [pc, #132]	; (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007230:	d01d      	beq.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1d      	ldr	r2, [pc, #116]	; (80072ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d018      	beq.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1b      	ldr	r2, [pc, #108]	; (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1a      	ldr	r2, [pc, #104]	; (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a18      	ldr	r2, [pc, #96]	; (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a17      	ldr	r2, [pc, #92]	; (80072bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a15      	ldr	r2, [pc, #84]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d10c      	bne.n	8007288 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	4313      	orrs	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40010000 	.word	0x40010000
 80072ac:	40000400 	.word	0x40000400
 80072b0:	40000800 	.word	0x40000800
 80072b4:	40000c00 	.word	0x40000c00
 80072b8:	40010400 	.word	0x40010400
 80072bc:	40014000 	.word	0x40014000
 80072c0:	40001800 	.word	0x40001800

080072c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072dc:	2302      	movs	r3, #2
 80072de:	e03d      	b.n	800735c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e042      	b.n	8007428 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fc fb3c 	bl	8003a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2224      	movs	r2, #36	; 0x24
 80073c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fcdb 	bl	8007d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	695a      	ldr	r2, [r3, #20]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2220      	movs	r2, #32
 8007414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2220      	movs	r2, #32
 800741c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b20      	cmp	r3, #32
 8007448:	d112      	bne.n	8007470 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_UART_Receive_IT+0x26>
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e00b      	b.n	8007472 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	461a      	mov	r2, r3
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 faba 	bl	80079e0 <UART_Start_Receive_IT>
 800746c:	4603      	mov	r3, r0
 800746e:	e000      	b.n	8007472 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007470:	2302      	movs	r3, #2
  }
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b0ba      	sub	sp, #232	; 0xe8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80074ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10f      	bne.n	80074e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <HAL_UART_IRQHandler+0x66>
 80074ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fb99 	bl	8007c12 <UART_Receive_IT>
      return;
 80074e0:	e25b      	b.n	800799a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 80de 	beq.w	80076a8 <HAL_UART_IRQHandler+0x22c>
 80074ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d106      	bne.n	8007506 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 80d1 	beq.w	80076a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00b      	beq.n	800752a <HAL_UART_IRQHandler+0xae>
 8007512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	f043 0201 	orr.w	r2, r3, #1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800752a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <HAL_UART_IRQHandler+0xd2>
 8007536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007546:	f043 0202 	orr.w	r2, r3, #2
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800754e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00b      	beq.n	8007572 <HAL_UART_IRQHandler+0xf6>
 800755a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756a:	f043 0204 	orr.w	r2, r3, #4
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d011      	beq.n	80075a2 <HAL_UART_IRQHandler+0x126>
 800757e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d105      	bne.n	8007596 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800758a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759a:	f043 0208 	orr.w	r2, r3, #8
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 81f2 	beq.w	8007990 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d008      	beq.n	80075ca <HAL_UART_IRQHandler+0x14e>
 80075b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fb24 	bl	8007c12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	bf0c      	ite	eq
 80075d8:	2301      	moveq	r3, #1
 80075da:	2300      	movne	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d103      	bne.n	80075f6 <HAL_UART_IRQHandler+0x17a>
 80075ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d04f      	beq.n	8007696 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa2c 	bl	8007a54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b40      	cmp	r3, #64	; 0x40
 8007608:	d141      	bne.n	800768e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3314      	adds	r3, #20
 8007610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3314      	adds	r3, #20
 8007632:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007636:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800763a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007642:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800764e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1d9      	bne.n	800760a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d013      	beq.n	8007686 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007662:	4a7e      	ldr	r2, [pc, #504]	; (800785c <HAL_UART_IRQHandler+0x3e0>)
 8007664:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766a:	4618      	mov	r0, r3
 800766c:	f7fc fd89 	bl	8004182 <HAL_DMA_Abort_IT>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d016      	beq.n	80076a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007680:	4610      	mov	r0, r2
 8007682:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007684:	e00e      	b.n	80076a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f994 	bl	80079b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768c:	e00a      	b.n	80076a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f990 	bl	80079b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007694:	e006      	b.n	80076a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f98c 	bl	80079b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80076a2:	e175      	b.n	8007990 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a4:	bf00      	nop
    return;
 80076a6:	e173      	b.n	8007990 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	f040 814f 	bne.w	8007950 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b6:	f003 0310 	and.w	r3, r3, #16
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 8148 	beq.w	8007950 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c4:	f003 0310 	and.w	r3, r3, #16
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8141 	beq.w	8007950 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60bb      	str	r3, [r7, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ee:	2b40      	cmp	r3, #64	; 0x40
 80076f0:	f040 80b6 	bne.w	8007860 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007700:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8145 	beq.w	8007994 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800770e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007712:	429a      	cmp	r2, r3
 8007714:	f080 813e 	bcs.w	8007994 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800771e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772a:	f000 8088 	beq.w	800783e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007744:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800774c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800775a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800775e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007766:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1d9      	bne.n	800772e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3314      	adds	r3, #20
 8007780:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800778a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3314      	adds	r3, #20
 800779a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800779e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e1      	bne.n	800777a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3314      	adds	r3, #20
 80077bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3314      	adds	r3, #20
 80077d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e3      	bne.n	80077b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	330c      	adds	r3, #12
 8007802:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800780c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800780e:	f023 0310 	bic.w	r3, r3, #16
 8007812:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	330c      	adds	r3, #12
 800781c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007820:	65ba      	str	r2, [r7, #88]	; 0x58
 8007822:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007826:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800782e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e3      	bne.n	80077fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007838:	4618      	mov	r0, r3
 800783a:	f7fc fc32 	bl	80040a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2202      	movs	r2, #2
 8007842:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800784c:	b29b      	uxth	r3, r3
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	b29b      	uxth	r3, r3
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f8b7 	bl	80079c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800785a:	e09b      	b.n	8007994 <HAL_UART_IRQHandler+0x518>
 800785c:	08007b1b 	.word	0x08007b1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007868:	b29b      	uxth	r3, r3
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007874:	b29b      	uxth	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 808e 	beq.w	8007998 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800787c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 8089 	beq.w	8007998 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	330c      	adds	r3, #12
 800788c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800789c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80078aa:	647a      	str	r2, [r7, #68]	; 0x44
 80078ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e3      	bne.n	8007886 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3314      	adds	r3, #20
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	623b      	str	r3, [r7, #32]
   return(result);
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	f023 0301 	bic.w	r3, r3, #1
 80078d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3314      	adds	r3, #20
 80078de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078e2:	633a      	str	r2, [r7, #48]	; 0x30
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e3      	bne.n	80078be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	330c      	adds	r3, #12
 800790a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	60fb      	str	r3, [r7, #12]
   return(result);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0310 	bic.w	r3, r3, #16
 800791a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	330c      	adds	r3, #12
 8007924:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007928:	61fa      	str	r2, [r7, #28]
 800792a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	69b9      	ldr	r1, [r7, #24]
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	617b      	str	r3, [r7, #20]
   return(result);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e3      	bne.n	8007904 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007942:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f83d 	bl	80079c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800794e:	e023      	b.n	8007998 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007958:	2b00      	cmp	r3, #0
 800795a:	d009      	beq.n	8007970 <HAL_UART_IRQHandler+0x4f4>
 800795c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f8ea 	bl	8007b42 <UART_Transmit_IT>
    return;
 800796e:	e014      	b.n	800799a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00e      	beq.n	800799a <HAL_UART_IRQHandler+0x51e>
 800797c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007984:	2b00      	cmp	r3, #0
 8007986:	d008      	beq.n	800799a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f92a 	bl	8007be2 <UART_EndTransmit_IT>
    return;
 800798e:	e004      	b.n	800799a <HAL_UART_IRQHandler+0x51e>
    return;
 8007990:	bf00      	nop
 8007992:	e002      	b.n	800799a <HAL_UART_IRQHandler+0x51e>
      return;
 8007994:	bf00      	nop
 8007996:	e000      	b.n	800799a <HAL_UART_IRQHandler+0x51e>
      return;
 8007998:	bf00      	nop
  }
}
 800799a:	37e8      	adds	r7, #232	; 0xe8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	88fa      	ldrh	r2, [r7, #6]
 80079f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	88fa      	ldrh	r2, [r7, #6]
 80079fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2222      	movs	r2, #34	; 0x22
 8007a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	695a      	ldr	r2, [r3, #20]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f042 0201 	orr.w	r2, r2, #1
 8007a34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0220 	orr.w	r2, r2, #32
 8007a44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b095      	sub	sp, #84	; 0x54
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a7c:	643a      	str	r2, [r7, #64]	; 0x40
 8007a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e5      	bne.n	8007a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3314      	adds	r3, #20
 8007a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	f023 0301 	bic.w	r3, r3, #1
 8007aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3314      	adds	r3, #20
 8007aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e5      	bne.n	8007a90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d119      	bne.n	8007b00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	330c      	adds	r3, #12
 8007ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f023 0310 	bic.w	r3, r3, #16
 8007ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aec:	61ba      	str	r2, [r7, #24]
 8007aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6979      	ldr	r1, [r7, #20]
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	613b      	str	r3, [r7, #16]
   return(result);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e5      	bne.n	8007acc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b0e:	bf00      	nop
 8007b10:	3754      	adds	r7, #84	; 0x54
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7ff ff3d 	bl	80079b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b3a:	bf00      	nop
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b21      	cmp	r3, #33	; 0x21
 8007b54:	d13e      	bne.n	8007bd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b5e:	d114      	bne.n	8007b8a <UART_Transmit_IT+0x48>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d110      	bne.n	8007b8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	1c9a      	adds	r2, r3, #2
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	621a      	str	r2, [r3, #32]
 8007b88:	e008      	b.n	8007b9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	1c59      	adds	r1, r3, #1
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6211      	str	r1, [r2, #32]
 8007b94:	781a      	ldrb	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10f      	bne.n	8007bd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	e000      	b.n	8007bd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bd4:	2302      	movs	r3, #2
  }
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff fecc 	bl	80079a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b08c      	sub	sp, #48	; 0x30
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b22      	cmp	r3, #34	; 0x22
 8007c24:	f040 80ae 	bne.w	8007d84 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c30:	d117      	bne.n	8007c62 <UART_Receive_IT+0x50>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d113      	bne.n	8007c62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	1c9a      	adds	r2, r3, #2
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8007c60:	e026      	b.n	8007cb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c74:	d007      	beq.n	8007c86 <UART_Receive_IT+0x74>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <UART_Receive_IT+0x82>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d106      	bne.n	8007c94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	701a      	strb	r2, [r3, #0]
 8007c92:	e008      	b.n	8007ca6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d15d      	bne.n	8007d80 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0220 	bic.w	r2, r2, #32
 8007cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	695a      	ldr	r2, [r3, #20]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0201 	bic.w	r2, r2, #1
 8007cf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d135      	bne.n	8007d76 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	330c      	adds	r3, #12
 8007d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f023 0310 	bic.w	r3, r3, #16
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	330c      	adds	r3, #12
 8007d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d30:	623a      	str	r2, [r7, #32]
 8007d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	69f9      	ldr	r1, [r7, #28]
 8007d36:	6a3a      	ldr	r2, [r7, #32]
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e5      	bne.n	8007d10 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	2b10      	cmp	r3, #16
 8007d50:	d10a      	bne.n	8007d68 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff fe2a 	bl	80079c8 <HAL_UARTEx_RxEventCallback>
 8007d74:	e002      	b.n	8007d7c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7fa f822 	bl	8001dc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e002      	b.n	8007d86 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d84:	2302      	movs	r3, #2
  }
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3730      	adds	r7, #48	; 0x30
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d94:	b0c0      	sub	sp, #256	; 0x100
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dac:	68d9      	ldr	r1, [r3, #12]
 8007dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	ea40 0301 	orr.w	r3, r0, r1
 8007db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007de8:	f021 010c 	bic.w	r1, r1, #12
 8007dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007df6:	430b      	orrs	r3, r1
 8007df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0a:	6999      	ldr	r1, [r3, #24]
 8007e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	ea40 0301 	orr.w	r3, r0, r1
 8007e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	4b8f      	ldr	r3, [pc, #572]	; (800805c <UART_SetConfig+0x2cc>)
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d005      	beq.n	8007e30 <UART_SetConfig+0xa0>
 8007e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	4b8d      	ldr	r3, [pc, #564]	; (8008060 <UART_SetConfig+0x2d0>)
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d104      	bne.n	8007e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e30:	f7fe f810 	bl	8005e54 <HAL_RCC_GetPCLK2Freq>
 8007e34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e38:	e003      	b.n	8007e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e3a:	f7fd fff7 	bl	8005e2c <HAL_RCC_GetPCLK1Freq>
 8007e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e4c:	f040 810c 	bne.w	8008068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e62:	4622      	mov	r2, r4
 8007e64:	462b      	mov	r3, r5
 8007e66:	1891      	adds	r1, r2, r2
 8007e68:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e6a:	415b      	adcs	r3, r3
 8007e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e72:	4621      	mov	r1, r4
 8007e74:	eb12 0801 	adds.w	r8, r2, r1
 8007e78:	4629      	mov	r1, r5
 8007e7a:	eb43 0901 	adc.w	r9, r3, r1
 8007e7e:	f04f 0200 	mov.w	r2, #0
 8007e82:	f04f 0300 	mov.w	r3, #0
 8007e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e92:	4690      	mov	r8, r2
 8007e94:	4699      	mov	r9, r3
 8007e96:	4623      	mov	r3, r4
 8007e98:	eb18 0303 	adds.w	r3, r8, r3
 8007e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	eb49 0303 	adc.w	r3, r9, r3
 8007ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	18db      	adds	r3, r3, r3
 8007ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	eb42 0303 	adc.w	r3, r2, r3
 8007eca:	657b      	str	r3, [r7, #84]	; 0x54
 8007ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ed4:	f7f8 fed8 	bl	8000c88 <__aeabi_uldivmod>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4b61      	ldr	r3, [pc, #388]	; (8008064 <UART_SetConfig+0x2d4>)
 8007ede:	fba3 2302 	umull	r2, r3, r3, r2
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	011c      	lsls	r4, r3, #4
 8007ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ef8:	4642      	mov	r2, r8
 8007efa:	464b      	mov	r3, r9
 8007efc:	1891      	adds	r1, r2, r2
 8007efe:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f00:	415b      	adcs	r3, r3
 8007f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f08:	4641      	mov	r1, r8
 8007f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8007f0e:	4649      	mov	r1, r9
 8007f10:	eb43 0b01 	adc.w	fp, r3, r1
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	f04f 0300 	mov.w	r3, #0
 8007f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f28:	4692      	mov	sl, r2
 8007f2a:	469b      	mov	fp, r3
 8007f2c:	4643      	mov	r3, r8
 8007f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8007f32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f36:	464b      	mov	r3, r9
 8007f38:	eb4b 0303 	adc.w	r3, fp, r3
 8007f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f54:	460b      	mov	r3, r1
 8007f56:	18db      	adds	r3, r3, r3
 8007f58:	643b      	str	r3, [r7, #64]	; 0x40
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	eb42 0303 	adc.w	r3, r2, r3
 8007f60:	647b      	str	r3, [r7, #68]	; 0x44
 8007f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f6a:	f7f8 fe8d 	bl	8000c88 <__aeabi_uldivmod>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4611      	mov	r1, r2
 8007f74:	4b3b      	ldr	r3, [pc, #236]	; (8008064 <UART_SetConfig+0x2d4>)
 8007f76:	fba3 2301 	umull	r2, r3, r3, r1
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	2264      	movs	r2, #100	; 0x64
 8007f7e:	fb02 f303 	mul.w	r3, r2, r3
 8007f82:	1acb      	subs	r3, r1, r3
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f8a:	4b36      	ldr	r3, [pc, #216]	; (8008064 <UART_SetConfig+0x2d4>)
 8007f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f90:	095b      	lsrs	r3, r3, #5
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f98:	441c      	add	r4, r3
 8007f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007fac:	4642      	mov	r2, r8
 8007fae:	464b      	mov	r3, r9
 8007fb0:	1891      	adds	r1, r2, r2
 8007fb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007fb4:	415b      	adcs	r3, r3
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fbc:	4641      	mov	r1, r8
 8007fbe:	1851      	adds	r1, r2, r1
 8007fc0:	6339      	str	r1, [r7, #48]	; 0x30
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	414b      	adcs	r3, r1
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007fd4:	4659      	mov	r1, fp
 8007fd6:	00cb      	lsls	r3, r1, #3
 8007fd8:	4651      	mov	r1, sl
 8007fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fde:	4651      	mov	r1, sl
 8007fe0:	00ca      	lsls	r2, r1, #3
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4642      	mov	r2, r8
 8007fea:	189b      	adds	r3, r3, r2
 8007fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ff0:	464b      	mov	r3, r9
 8007ff2:	460a      	mov	r2, r1
 8007ff4:	eb42 0303 	adc.w	r3, r2, r3
 8007ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008008:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800800c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008010:	460b      	mov	r3, r1
 8008012:	18db      	adds	r3, r3, r3
 8008014:	62bb      	str	r3, [r7, #40]	; 0x28
 8008016:	4613      	mov	r3, r2
 8008018:	eb42 0303 	adc.w	r3, r2, r3
 800801c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800801e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008026:	f7f8 fe2f 	bl	8000c88 <__aeabi_uldivmod>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <UART_SetConfig+0x2d4>)
 8008030:	fba3 1302 	umull	r1, r3, r3, r2
 8008034:	095b      	lsrs	r3, r3, #5
 8008036:	2164      	movs	r1, #100	; 0x64
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	3332      	adds	r3, #50	; 0x32
 8008042:	4a08      	ldr	r2, [pc, #32]	; (8008064 <UART_SetConfig+0x2d4>)
 8008044:	fba2 2303 	umull	r2, r3, r2, r3
 8008048:	095b      	lsrs	r3, r3, #5
 800804a:	f003 0207 	and.w	r2, r3, #7
 800804e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4422      	add	r2, r4
 8008056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008058:	e106      	b.n	8008268 <UART_SetConfig+0x4d8>
 800805a:	bf00      	nop
 800805c:	40011000 	.word	0x40011000
 8008060:	40011400 	.word	0x40011400
 8008064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800806c:	2200      	movs	r2, #0
 800806e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008072:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800807a:	4642      	mov	r2, r8
 800807c:	464b      	mov	r3, r9
 800807e:	1891      	adds	r1, r2, r2
 8008080:	6239      	str	r1, [r7, #32]
 8008082:	415b      	adcs	r3, r3
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
 8008086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800808a:	4641      	mov	r1, r8
 800808c:	1854      	adds	r4, r2, r1
 800808e:	4649      	mov	r1, r9
 8008090:	eb43 0501 	adc.w	r5, r3, r1
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	f04f 0300 	mov.w	r3, #0
 800809c:	00eb      	lsls	r3, r5, #3
 800809e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080a2:	00e2      	lsls	r2, r4, #3
 80080a4:	4614      	mov	r4, r2
 80080a6:	461d      	mov	r5, r3
 80080a8:	4643      	mov	r3, r8
 80080aa:	18e3      	adds	r3, r4, r3
 80080ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080b0:	464b      	mov	r3, r9
 80080b2:	eb45 0303 	adc.w	r3, r5, r3
 80080b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080ca:	f04f 0200 	mov.w	r2, #0
 80080ce:	f04f 0300 	mov.w	r3, #0
 80080d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80080d6:	4629      	mov	r1, r5
 80080d8:	008b      	lsls	r3, r1, #2
 80080da:	4621      	mov	r1, r4
 80080dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080e0:	4621      	mov	r1, r4
 80080e2:	008a      	lsls	r2, r1, #2
 80080e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080e8:	f7f8 fdce 	bl	8000c88 <__aeabi_uldivmod>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4b60      	ldr	r3, [pc, #384]	; (8008274 <UART_SetConfig+0x4e4>)
 80080f2:	fba3 2302 	umull	r2, r3, r3, r2
 80080f6:	095b      	lsrs	r3, r3, #5
 80080f8:	011c      	lsls	r4, r3, #4
 80080fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008104:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800810c:	4642      	mov	r2, r8
 800810e:	464b      	mov	r3, r9
 8008110:	1891      	adds	r1, r2, r2
 8008112:	61b9      	str	r1, [r7, #24]
 8008114:	415b      	adcs	r3, r3
 8008116:	61fb      	str	r3, [r7, #28]
 8008118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800811c:	4641      	mov	r1, r8
 800811e:	1851      	adds	r1, r2, r1
 8008120:	6139      	str	r1, [r7, #16]
 8008122:	4649      	mov	r1, r9
 8008124:	414b      	adcs	r3, r1
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	f04f 0200 	mov.w	r2, #0
 800812c:	f04f 0300 	mov.w	r3, #0
 8008130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008134:	4659      	mov	r1, fp
 8008136:	00cb      	lsls	r3, r1, #3
 8008138:	4651      	mov	r1, sl
 800813a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800813e:	4651      	mov	r1, sl
 8008140:	00ca      	lsls	r2, r1, #3
 8008142:	4610      	mov	r0, r2
 8008144:	4619      	mov	r1, r3
 8008146:	4603      	mov	r3, r0
 8008148:	4642      	mov	r2, r8
 800814a:	189b      	adds	r3, r3, r2
 800814c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008150:	464b      	mov	r3, r9
 8008152:	460a      	mov	r2, r1
 8008154:	eb42 0303 	adc.w	r3, r2, r3
 8008158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	67bb      	str	r3, [r7, #120]	; 0x78
 8008166:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008174:	4649      	mov	r1, r9
 8008176:	008b      	lsls	r3, r1, #2
 8008178:	4641      	mov	r1, r8
 800817a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800817e:	4641      	mov	r1, r8
 8008180:	008a      	lsls	r2, r1, #2
 8008182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008186:	f7f8 fd7f 	bl	8000c88 <__aeabi_uldivmod>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4611      	mov	r1, r2
 8008190:	4b38      	ldr	r3, [pc, #224]	; (8008274 <UART_SetConfig+0x4e4>)
 8008192:	fba3 2301 	umull	r2, r3, r3, r1
 8008196:	095b      	lsrs	r3, r3, #5
 8008198:	2264      	movs	r2, #100	; 0x64
 800819a:	fb02 f303 	mul.w	r3, r2, r3
 800819e:	1acb      	subs	r3, r1, r3
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	3332      	adds	r3, #50	; 0x32
 80081a4:	4a33      	ldr	r2, [pc, #204]	; (8008274 <UART_SetConfig+0x4e4>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081b0:	441c      	add	r4, r3
 80081b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081b6:	2200      	movs	r2, #0
 80081b8:	673b      	str	r3, [r7, #112]	; 0x70
 80081ba:	677a      	str	r2, [r7, #116]	; 0x74
 80081bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80081c0:	4642      	mov	r2, r8
 80081c2:	464b      	mov	r3, r9
 80081c4:	1891      	adds	r1, r2, r2
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	415b      	adcs	r3, r3
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081d0:	4641      	mov	r1, r8
 80081d2:	1851      	adds	r1, r2, r1
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	4649      	mov	r1, r9
 80081d8:	414b      	adcs	r3, r1
 80081da:	607b      	str	r3, [r7, #4]
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081e8:	4659      	mov	r1, fp
 80081ea:	00cb      	lsls	r3, r1, #3
 80081ec:	4651      	mov	r1, sl
 80081ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081f2:	4651      	mov	r1, sl
 80081f4:	00ca      	lsls	r2, r1, #3
 80081f6:	4610      	mov	r0, r2
 80081f8:	4619      	mov	r1, r3
 80081fa:	4603      	mov	r3, r0
 80081fc:	4642      	mov	r2, r8
 80081fe:	189b      	adds	r3, r3, r2
 8008200:	66bb      	str	r3, [r7, #104]	; 0x68
 8008202:	464b      	mov	r3, r9
 8008204:	460a      	mov	r2, r1
 8008206:	eb42 0303 	adc.w	r3, r2, r3
 800820a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	663b      	str	r3, [r7, #96]	; 0x60
 8008216:	667a      	str	r2, [r7, #100]	; 0x64
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008224:	4649      	mov	r1, r9
 8008226:	008b      	lsls	r3, r1, #2
 8008228:	4641      	mov	r1, r8
 800822a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800822e:	4641      	mov	r1, r8
 8008230:	008a      	lsls	r2, r1, #2
 8008232:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008236:	f7f8 fd27 	bl	8000c88 <__aeabi_uldivmod>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <UART_SetConfig+0x4e4>)
 8008240:	fba3 1302 	umull	r1, r3, r3, r2
 8008244:	095b      	lsrs	r3, r3, #5
 8008246:	2164      	movs	r1, #100	; 0x64
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	3332      	adds	r3, #50	; 0x32
 8008252:	4a08      	ldr	r2, [pc, #32]	; (8008274 <UART_SetConfig+0x4e4>)
 8008254:	fba2 2303 	umull	r2, r3, r2, r3
 8008258:	095b      	lsrs	r3, r3, #5
 800825a:	f003 020f 	and.w	r2, r3, #15
 800825e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4422      	add	r2, r4
 8008266:	609a      	str	r2, [r3, #8]
}
 8008268:	bf00      	nop
 800826a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800826e:	46bd      	mov	sp, r7
 8008270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008274:	51eb851f 	.word	0x51eb851f

08008278 <malloc>:
 8008278:	4b02      	ldr	r3, [pc, #8]	; (8008284 <malloc+0xc>)
 800827a:	4601      	mov	r1, r0
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	f000 b82b 	b.w	80082d8 <_malloc_r>
 8008282:	bf00      	nop
 8008284:	20000064 	.word	0x20000064

08008288 <free>:
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <free+0xc>)
 800828a:	4601      	mov	r1, r0
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	f001 bf91 	b.w	800a1b4 <_free_r>
 8008292:	bf00      	nop
 8008294:	20000064 	.word	0x20000064

08008298 <sbrk_aligned>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4e0e      	ldr	r6, [pc, #56]	; (80082d4 <sbrk_aligned+0x3c>)
 800829c:	460c      	mov	r4, r1
 800829e:	6831      	ldr	r1, [r6, #0]
 80082a0:	4605      	mov	r5, r0
 80082a2:	b911      	cbnz	r1, 80082aa <sbrk_aligned+0x12>
 80082a4:	f001 f8b4 	bl	8009410 <_sbrk_r>
 80082a8:	6030      	str	r0, [r6, #0]
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f001 f8af 	bl	8009410 <_sbrk_r>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	d00a      	beq.n	80082cc <sbrk_aligned+0x34>
 80082b6:	1cc4      	adds	r4, r0, #3
 80082b8:	f024 0403 	bic.w	r4, r4, #3
 80082bc:	42a0      	cmp	r0, r4
 80082be:	d007      	beq.n	80082d0 <sbrk_aligned+0x38>
 80082c0:	1a21      	subs	r1, r4, r0
 80082c2:	4628      	mov	r0, r5
 80082c4:	f001 f8a4 	bl	8009410 <_sbrk_r>
 80082c8:	3001      	adds	r0, #1
 80082ca:	d101      	bne.n	80082d0 <sbrk_aligned+0x38>
 80082cc:	f04f 34ff 	mov.w	r4, #4294967295
 80082d0:	4620      	mov	r0, r4
 80082d2:	bd70      	pop	{r4, r5, r6, pc}
 80082d4:	200008cc 	.word	0x200008cc

080082d8 <_malloc_r>:
 80082d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082dc:	1ccd      	adds	r5, r1, #3
 80082de:	f025 0503 	bic.w	r5, r5, #3
 80082e2:	3508      	adds	r5, #8
 80082e4:	2d0c      	cmp	r5, #12
 80082e6:	bf38      	it	cc
 80082e8:	250c      	movcc	r5, #12
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	4607      	mov	r7, r0
 80082ee:	db01      	blt.n	80082f4 <_malloc_r+0x1c>
 80082f0:	42a9      	cmp	r1, r5
 80082f2:	d905      	bls.n	8008300 <_malloc_r+0x28>
 80082f4:	230c      	movs	r3, #12
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	2600      	movs	r6, #0
 80082fa:	4630      	mov	r0, r6
 80082fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008300:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80083d4 <_malloc_r+0xfc>
 8008304:	f000 f868 	bl	80083d8 <__malloc_lock>
 8008308:	f8d8 3000 	ldr.w	r3, [r8]
 800830c:	461c      	mov	r4, r3
 800830e:	bb5c      	cbnz	r4, 8008368 <_malloc_r+0x90>
 8008310:	4629      	mov	r1, r5
 8008312:	4638      	mov	r0, r7
 8008314:	f7ff ffc0 	bl	8008298 <sbrk_aligned>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	4604      	mov	r4, r0
 800831c:	d155      	bne.n	80083ca <_malloc_r+0xf2>
 800831e:	f8d8 4000 	ldr.w	r4, [r8]
 8008322:	4626      	mov	r6, r4
 8008324:	2e00      	cmp	r6, #0
 8008326:	d145      	bne.n	80083b4 <_malloc_r+0xdc>
 8008328:	2c00      	cmp	r4, #0
 800832a:	d048      	beq.n	80083be <_malloc_r+0xe6>
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	4631      	mov	r1, r6
 8008330:	4638      	mov	r0, r7
 8008332:	eb04 0903 	add.w	r9, r4, r3
 8008336:	f001 f86b 	bl	8009410 <_sbrk_r>
 800833a:	4581      	cmp	r9, r0
 800833c:	d13f      	bne.n	80083be <_malloc_r+0xe6>
 800833e:	6821      	ldr	r1, [r4, #0]
 8008340:	1a6d      	subs	r5, r5, r1
 8008342:	4629      	mov	r1, r5
 8008344:	4638      	mov	r0, r7
 8008346:	f7ff ffa7 	bl	8008298 <sbrk_aligned>
 800834a:	3001      	adds	r0, #1
 800834c:	d037      	beq.n	80083be <_malloc_r+0xe6>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	442b      	add	r3, r5
 8008352:	6023      	str	r3, [r4, #0]
 8008354:	f8d8 3000 	ldr.w	r3, [r8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d038      	beq.n	80083ce <_malloc_r+0xf6>
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	42a2      	cmp	r2, r4
 8008360:	d12b      	bne.n	80083ba <_malloc_r+0xe2>
 8008362:	2200      	movs	r2, #0
 8008364:	605a      	str	r2, [r3, #4]
 8008366:	e00f      	b.n	8008388 <_malloc_r+0xb0>
 8008368:	6822      	ldr	r2, [r4, #0]
 800836a:	1b52      	subs	r2, r2, r5
 800836c:	d41f      	bmi.n	80083ae <_malloc_r+0xd6>
 800836e:	2a0b      	cmp	r2, #11
 8008370:	d917      	bls.n	80083a2 <_malloc_r+0xca>
 8008372:	1961      	adds	r1, r4, r5
 8008374:	42a3      	cmp	r3, r4
 8008376:	6025      	str	r5, [r4, #0]
 8008378:	bf18      	it	ne
 800837a:	6059      	strne	r1, [r3, #4]
 800837c:	6863      	ldr	r3, [r4, #4]
 800837e:	bf08      	it	eq
 8008380:	f8c8 1000 	streq.w	r1, [r8]
 8008384:	5162      	str	r2, [r4, r5]
 8008386:	604b      	str	r3, [r1, #4]
 8008388:	4638      	mov	r0, r7
 800838a:	f104 060b 	add.w	r6, r4, #11
 800838e:	f000 f829 	bl	80083e4 <__malloc_unlock>
 8008392:	f026 0607 	bic.w	r6, r6, #7
 8008396:	1d23      	adds	r3, r4, #4
 8008398:	1af2      	subs	r2, r6, r3
 800839a:	d0ae      	beq.n	80082fa <_malloc_r+0x22>
 800839c:	1b9b      	subs	r3, r3, r6
 800839e:	50a3      	str	r3, [r4, r2]
 80083a0:	e7ab      	b.n	80082fa <_malloc_r+0x22>
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	6862      	ldr	r2, [r4, #4]
 80083a6:	d1dd      	bne.n	8008364 <_malloc_r+0x8c>
 80083a8:	f8c8 2000 	str.w	r2, [r8]
 80083ac:	e7ec      	b.n	8008388 <_malloc_r+0xb0>
 80083ae:	4623      	mov	r3, r4
 80083b0:	6864      	ldr	r4, [r4, #4]
 80083b2:	e7ac      	b.n	800830e <_malloc_r+0x36>
 80083b4:	4634      	mov	r4, r6
 80083b6:	6876      	ldr	r6, [r6, #4]
 80083b8:	e7b4      	b.n	8008324 <_malloc_r+0x4c>
 80083ba:	4613      	mov	r3, r2
 80083bc:	e7cc      	b.n	8008358 <_malloc_r+0x80>
 80083be:	230c      	movs	r3, #12
 80083c0:	603b      	str	r3, [r7, #0]
 80083c2:	4638      	mov	r0, r7
 80083c4:	f000 f80e 	bl	80083e4 <__malloc_unlock>
 80083c8:	e797      	b.n	80082fa <_malloc_r+0x22>
 80083ca:	6025      	str	r5, [r4, #0]
 80083cc:	e7dc      	b.n	8008388 <_malloc_r+0xb0>
 80083ce:	605b      	str	r3, [r3, #4]
 80083d0:	deff      	udf	#255	; 0xff
 80083d2:	bf00      	nop
 80083d4:	200008c8 	.word	0x200008c8

080083d8 <__malloc_lock>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__malloc_lock+0x8>)
 80083da:	f001 b866 	b.w	80094aa <__retarget_lock_acquire_recursive>
 80083de:	bf00      	nop
 80083e0:	20000a10 	.word	0x20000a10

080083e4 <__malloc_unlock>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__malloc_unlock+0x8>)
 80083e6:	f001 b861 	b.w	80094ac <__retarget_lock_release_recursive>
 80083ea:	bf00      	nop
 80083ec:	20000a10 	.word	0x20000a10

080083f0 <__cvt>:
 80083f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f4:	ec55 4b10 	vmov	r4, r5, d0
 80083f8:	2d00      	cmp	r5, #0
 80083fa:	460e      	mov	r6, r1
 80083fc:	4619      	mov	r1, r3
 80083fe:	462b      	mov	r3, r5
 8008400:	bfbb      	ittet	lt
 8008402:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008406:	461d      	movlt	r5, r3
 8008408:	2300      	movge	r3, #0
 800840a:	232d      	movlt	r3, #45	; 0x2d
 800840c:	700b      	strb	r3, [r1, #0]
 800840e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008410:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008414:	4691      	mov	r9, r2
 8008416:	f023 0820 	bic.w	r8, r3, #32
 800841a:	bfbc      	itt	lt
 800841c:	4622      	movlt	r2, r4
 800841e:	4614      	movlt	r4, r2
 8008420:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008424:	d005      	beq.n	8008432 <__cvt+0x42>
 8008426:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800842a:	d100      	bne.n	800842e <__cvt+0x3e>
 800842c:	3601      	adds	r6, #1
 800842e:	2102      	movs	r1, #2
 8008430:	e000      	b.n	8008434 <__cvt+0x44>
 8008432:	2103      	movs	r1, #3
 8008434:	ab03      	add	r3, sp, #12
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	ab02      	add	r3, sp, #8
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	ec45 4b10 	vmov	d0, r4, r5
 8008440:	4653      	mov	r3, sl
 8008442:	4632      	mov	r2, r6
 8008444:	f001 f8c4 	bl	80095d0 <_dtoa_r>
 8008448:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800844c:	4607      	mov	r7, r0
 800844e:	d102      	bne.n	8008456 <__cvt+0x66>
 8008450:	f019 0f01 	tst.w	r9, #1
 8008454:	d022      	beq.n	800849c <__cvt+0xac>
 8008456:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800845a:	eb07 0906 	add.w	r9, r7, r6
 800845e:	d110      	bne.n	8008482 <__cvt+0x92>
 8008460:	783b      	ldrb	r3, [r7, #0]
 8008462:	2b30      	cmp	r3, #48	; 0x30
 8008464:	d10a      	bne.n	800847c <__cvt+0x8c>
 8008466:	2200      	movs	r2, #0
 8008468:	2300      	movs	r3, #0
 800846a:	4620      	mov	r0, r4
 800846c:	4629      	mov	r1, r5
 800846e:	f7f8 fb2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008472:	b918      	cbnz	r0, 800847c <__cvt+0x8c>
 8008474:	f1c6 0601 	rsb	r6, r6, #1
 8008478:	f8ca 6000 	str.w	r6, [sl]
 800847c:	f8da 3000 	ldr.w	r3, [sl]
 8008480:	4499      	add	r9, r3
 8008482:	2200      	movs	r2, #0
 8008484:	2300      	movs	r3, #0
 8008486:	4620      	mov	r0, r4
 8008488:	4629      	mov	r1, r5
 800848a:	f7f8 fb1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800848e:	b108      	cbz	r0, 8008494 <__cvt+0xa4>
 8008490:	f8cd 900c 	str.w	r9, [sp, #12]
 8008494:	2230      	movs	r2, #48	; 0x30
 8008496:	9b03      	ldr	r3, [sp, #12]
 8008498:	454b      	cmp	r3, r9
 800849a:	d307      	bcc.n	80084ac <__cvt+0xbc>
 800849c:	9b03      	ldr	r3, [sp, #12]
 800849e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084a0:	1bdb      	subs	r3, r3, r7
 80084a2:	4638      	mov	r0, r7
 80084a4:	6013      	str	r3, [r2, #0]
 80084a6:	b004      	add	sp, #16
 80084a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ac:	1c59      	adds	r1, r3, #1
 80084ae:	9103      	str	r1, [sp, #12]
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	e7f0      	b.n	8008496 <__cvt+0xa6>

080084b4 <__exponent>:
 80084b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084b6:	4603      	mov	r3, r0
 80084b8:	2900      	cmp	r1, #0
 80084ba:	bfb8      	it	lt
 80084bc:	4249      	neglt	r1, r1
 80084be:	f803 2b02 	strb.w	r2, [r3], #2
 80084c2:	bfb4      	ite	lt
 80084c4:	222d      	movlt	r2, #45	; 0x2d
 80084c6:	222b      	movge	r2, #43	; 0x2b
 80084c8:	2909      	cmp	r1, #9
 80084ca:	7042      	strb	r2, [r0, #1]
 80084cc:	dd2a      	ble.n	8008524 <__exponent+0x70>
 80084ce:	f10d 0207 	add.w	r2, sp, #7
 80084d2:	4617      	mov	r7, r2
 80084d4:	260a      	movs	r6, #10
 80084d6:	4694      	mov	ip, r2
 80084d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80084dc:	fb06 1415 	mls	r4, r6, r5, r1
 80084e0:	3430      	adds	r4, #48	; 0x30
 80084e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80084e6:	460c      	mov	r4, r1
 80084e8:	2c63      	cmp	r4, #99	; 0x63
 80084ea:	f102 32ff 	add.w	r2, r2, #4294967295
 80084ee:	4629      	mov	r1, r5
 80084f0:	dcf1      	bgt.n	80084d6 <__exponent+0x22>
 80084f2:	3130      	adds	r1, #48	; 0x30
 80084f4:	f1ac 0402 	sub.w	r4, ip, #2
 80084f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80084fc:	1c41      	adds	r1, r0, #1
 80084fe:	4622      	mov	r2, r4
 8008500:	42ba      	cmp	r2, r7
 8008502:	d30a      	bcc.n	800851a <__exponent+0x66>
 8008504:	f10d 0209 	add.w	r2, sp, #9
 8008508:	eba2 020c 	sub.w	r2, r2, ip
 800850c:	42bc      	cmp	r4, r7
 800850e:	bf88      	it	hi
 8008510:	2200      	movhi	r2, #0
 8008512:	4413      	add	r3, r2
 8008514:	1a18      	subs	r0, r3, r0
 8008516:	b003      	add	sp, #12
 8008518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800851a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800851e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008522:	e7ed      	b.n	8008500 <__exponent+0x4c>
 8008524:	2330      	movs	r3, #48	; 0x30
 8008526:	3130      	adds	r1, #48	; 0x30
 8008528:	7083      	strb	r3, [r0, #2]
 800852a:	70c1      	strb	r1, [r0, #3]
 800852c:	1d03      	adds	r3, r0, #4
 800852e:	e7f1      	b.n	8008514 <__exponent+0x60>

08008530 <_printf_float>:
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	ed2d 8b02 	vpush	{d8}
 8008538:	b08d      	sub	sp, #52	; 0x34
 800853a:	460c      	mov	r4, r1
 800853c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008540:	4616      	mov	r6, r2
 8008542:	461f      	mov	r7, r3
 8008544:	4605      	mov	r5, r0
 8008546:	f000 ff2b 	bl	80093a0 <_localeconv_r>
 800854a:	f8d0 a000 	ldr.w	sl, [r0]
 800854e:	4650      	mov	r0, sl
 8008550:	f7f7 fe8e 	bl	8000270 <strlen>
 8008554:	2300      	movs	r3, #0
 8008556:	930a      	str	r3, [sp, #40]	; 0x28
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	f8d8 3000 	ldr.w	r3, [r8]
 8008560:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008564:	3307      	adds	r3, #7
 8008566:	f023 0307 	bic.w	r3, r3, #7
 800856a:	f103 0208 	add.w	r2, r3, #8
 800856e:	f8c8 2000 	str.w	r2, [r8]
 8008572:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008576:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800857a:	9307      	str	r3, [sp, #28]
 800857c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008580:	ee08 0a10 	vmov	s16, r0
 8008584:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800858c:	4b9e      	ldr	r3, [pc, #632]	; (8008808 <_printf_float+0x2d8>)
 800858e:	f04f 32ff 	mov.w	r2, #4294967295
 8008592:	f7f8 facb 	bl	8000b2c <__aeabi_dcmpun>
 8008596:	bb88      	cbnz	r0, 80085fc <_printf_float+0xcc>
 8008598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800859c:	4b9a      	ldr	r3, [pc, #616]	; (8008808 <_printf_float+0x2d8>)
 800859e:	f04f 32ff 	mov.w	r2, #4294967295
 80085a2:	f7f8 faa5 	bl	8000af0 <__aeabi_dcmple>
 80085a6:	bb48      	cbnz	r0, 80085fc <_printf_float+0xcc>
 80085a8:	2200      	movs	r2, #0
 80085aa:	2300      	movs	r3, #0
 80085ac:	4640      	mov	r0, r8
 80085ae:	4649      	mov	r1, r9
 80085b0:	f7f8 fa94 	bl	8000adc <__aeabi_dcmplt>
 80085b4:	b110      	cbz	r0, 80085bc <_printf_float+0x8c>
 80085b6:	232d      	movs	r3, #45	; 0x2d
 80085b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085bc:	4a93      	ldr	r2, [pc, #588]	; (800880c <_printf_float+0x2dc>)
 80085be:	4b94      	ldr	r3, [pc, #592]	; (8008810 <_printf_float+0x2e0>)
 80085c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80085c4:	bf94      	ite	ls
 80085c6:	4690      	movls	r8, r2
 80085c8:	4698      	movhi	r8, r3
 80085ca:	2303      	movs	r3, #3
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	f023 0304 	bic.w	r3, r3, #4
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	f04f 0900 	mov.w	r9, #0
 80085da:	9700      	str	r7, [sp, #0]
 80085dc:	4633      	mov	r3, r6
 80085de:	aa0b      	add	r2, sp, #44	; 0x2c
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f9da 	bl	800899c <_printf_common>
 80085e8:	3001      	adds	r0, #1
 80085ea:	f040 8090 	bne.w	800870e <_printf_float+0x1de>
 80085ee:	f04f 30ff 	mov.w	r0, #4294967295
 80085f2:	b00d      	add	sp, #52	; 0x34
 80085f4:	ecbd 8b02 	vpop	{d8}
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	4642      	mov	r2, r8
 80085fe:	464b      	mov	r3, r9
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f8 fa92 	bl	8000b2c <__aeabi_dcmpun>
 8008608:	b140      	cbz	r0, 800861c <_printf_float+0xec>
 800860a:	464b      	mov	r3, r9
 800860c:	2b00      	cmp	r3, #0
 800860e:	bfbc      	itt	lt
 8008610:	232d      	movlt	r3, #45	; 0x2d
 8008612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008616:	4a7f      	ldr	r2, [pc, #508]	; (8008814 <_printf_float+0x2e4>)
 8008618:	4b7f      	ldr	r3, [pc, #508]	; (8008818 <_printf_float+0x2e8>)
 800861a:	e7d1      	b.n	80085c0 <_printf_float+0x90>
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008622:	9206      	str	r2, [sp, #24]
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	d13f      	bne.n	80086a8 <_printf_float+0x178>
 8008628:	2306      	movs	r3, #6
 800862a:	6063      	str	r3, [r4, #4]
 800862c:	9b05      	ldr	r3, [sp, #20]
 800862e:	6861      	ldr	r1, [r4, #4]
 8008630:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008634:	2300      	movs	r3, #0
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	ab0a      	add	r3, sp, #40	; 0x28
 800863a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800863e:	ab09      	add	r3, sp, #36	; 0x24
 8008640:	ec49 8b10 	vmov	d0, r8, r9
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	6022      	str	r2, [r4, #0]
 8008648:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800864c:	4628      	mov	r0, r5
 800864e:	f7ff fecf 	bl	80083f0 <__cvt>
 8008652:	9b06      	ldr	r3, [sp, #24]
 8008654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008656:	2b47      	cmp	r3, #71	; 0x47
 8008658:	4680      	mov	r8, r0
 800865a:	d108      	bne.n	800866e <_printf_float+0x13e>
 800865c:	1cc8      	adds	r0, r1, #3
 800865e:	db02      	blt.n	8008666 <_printf_float+0x136>
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	4299      	cmp	r1, r3
 8008664:	dd41      	ble.n	80086ea <_printf_float+0x1ba>
 8008666:	f1ab 0302 	sub.w	r3, fp, #2
 800866a:	fa5f fb83 	uxtb.w	fp, r3
 800866e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008672:	d820      	bhi.n	80086b6 <_printf_float+0x186>
 8008674:	3901      	subs	r1, #1
 8008676:	465a      	mov	r2, fp
 8008678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800867c:	9109      	str	r1, [sp, #36]	; 0x24
 800867e:	f7ff ff19 	bl	80084b4 <__exponent>
 8008682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008684:	1813      	adds	r3, r2, r0
 8008686:	2a01      	cmp	r2, #1
 8008688:	4681      	mov	r9, r0
 800868a:	6123      	str	r3, [r4, #16]
 800868c:	dc02      	bgt.n	8008694 <_printf_float+0x164>
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	07d2      	lsls	r2, r2, #31
 8008692:	d501      	bpl.n	8008698 <_printf_float+0x168>
 8008694:	3301      	adds	r3, #1
 8008696:	6123      	str	r3, [r4, #16]
 8008698:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800869c:	2b00      	cmp	r3, #0
 800869e:	d09c      	beq.n	80085da <_printf_float+0xaa>
 80086a0:	232d      	movs	r3, #45	; 0x2d
 80086a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a6:	e798      	b.n	80085da <_printf_float+0xaa>
 80086a8:	9a06      	ldr	r2, [sp, #24]
 80086aa:	2a47      	cmp	r2, #71	; 0x47
 80086ac:	d1be      	bne.n	800862c <_printf_float+0xfc>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1bc      	bne.n	800862c <_printf_float+0xfc>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e7b9      	b.n	800862a <_printf_float+0xfa>
 80086b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80086ba:	d118      	bne.n	80086ee <_printf_float+0x1be>
 80086bc:	2900      	cmp	r1, #0
 80086be:	6863      	ldr	r3, [r4, #4]
 80086c0:	dd0b      	ble.n	80086da <_printf_float+0x1aa>
 80086c2:	6121      	str	r1, [r4, #16]
 80086c4:	b913      	cbnz	r3, 80086cc <_printf_float+0x19c>
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	07d0      	lsls	r0, r2, #31
 80086ca:	d502      	bpl.n	80086d2 <_printf_float+0x1a2>
 80086cc:	3301      	adds	r3, #1
 80086ce:	440b      	add	r3, r1
 80086d0:	6123      	str	r3, [r4, #16]
 80086d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80086d4:	f04f 0900 	mov.w	r9, #0
 80086d8:	e7de      	b.n	8008698 <_printf_float+0x168>
 80086da:	b913      	cbnz	r3, 80086e2 <_printf_float+0x1b2>
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	07d2      	lsls	r2, r2, #31
 80086e0:	d501      	bpl.n	80086e6 <_printf_float+0x1b6>
 80086e2:	3302      	adds	r3, #2
 80086e4:	e7f4      	b.n	80086d0 <_printf_float+0x1a0>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e7f2      	b.n	80086d0 <_printf_float+0x1a0>
 80086ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f0:	4299      	cmp	r1, r3
 80086f2:	db05      	blt.n	8008700 <_printf_float+0x1d0>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	6121      	str	r1, [r4, #16]
 80086f8:	07d8      	lsls	r0, r3, #31
 80086fa:	d5ea      	bpl.n	80086d2 <_printf_float+0x1a2>
 80086fc:	1c4b      	adds	r3, r1, #1
 80086fe:	e7e7      	b.n	80086d0 <_printf_float+0x1a0>
 8008700:	2900      	cmp	r1, #0
 8008702:	bfd4      	ite	le
 8008704:	f1c1 0202 	rsble	r2, r1, #2
 8008708:	2201      	movgt	r2, #1
 800870a:	4413      	add	r3, r2
 800870c:	e7e0      	b.n	80086d0 <_printf_float+0x1a0>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	055a      	lsls	r2, r3, #21
 8008712:	d407      	bmi.n	8008724 <_printf_float+0x1f4>
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	4642      	mov	r2, r8
 8008718:	4631      	mov	r1, r6
 800871a:	4628      	mov	r0, r5
 800871c:	47b8      	blx	r7
 800871e:	3001      	adds	r0, #1
 8008720:	d12c      	bne.n	800877c <_printf_float+0x24c>
 8008722:	e764      	b.n	80085ee <_printf_float+0xbe>
 8008724:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008728:	f240 80e0 	bls.w	80088ec <_printf_float+0x3bc>
 800872c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008730:	2200      	movs	r2, #0
 8008732:	2300      	movs	r3, #0
 8008734:	f7f8 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008738:	2800      	cmp	r0, #0
 800873a:	d034      	beq.n	80087a6 <_printf_float+0x276>
 800873c:	4a37      	ldr	r2, [pc, #220]	; (800881c <_printf_float+0x2ec>)
 800873e:	2301      	movs	r3, #1
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f af51 	beq.w	80085ee <_printf_float+0xbe>
 800874c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008750:	429a      	cmp	r2, r3
 8008752:	db02      	blt.n	800875a <_printf_float+0x22a>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	07d8      	lsls	r0, r3, #31
 8008758:	d510      	bpl.n	800877c <_printf_float+0x24c>
 800875a:	ee18 3a10 	vmov	r3, s16
 800875e:	4652      	mov	r2, sl
 8008760:	4631      	mov	r1, r6
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	f43f af41 	beq.w	80085ee <_printf_float+0xbe>
 800876c:	f04f 0800 	mov.w	r8, #0
 8008770:	f104 091a 	add.w	r9, r4, #26
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	3b01      	subs	r3, #1
 8008778:	4543      	cmp	r3, r8
 800877a:	dc09      	bgt.n	8008790 <_printf_float+0x260>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	079b      	lsls	r3, r3, #30
 8008780:	f100 8107 	bmi.w	8008992 <_printf_float+0x462>
 8008784:	68e0      	ldr	r0, [r4, #12]
 8008786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008788:	4298      	cmp	r0, r3
 800878a:	bfb8      	it	lt
 800878c:	4618      	movlt	r0, r3
 800878e:	e730      	b.n	80085f2 <_printf_float+0xc2>
 8008790:	2301      	movs	r3, #1
 8008792:	464a      	mov	r2, r9
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f af27 	beq.w	80085ee <_printf_float+0xbe>
 80087a0:	f108 0801 	add.w	r8, r8, #1
 80087a4:	e7e6      	b.n	8008774 <_printf_float+0x244>
 80087a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dc39      	bgt.n	8008820 <_printf_float+0x2f0>
 80087ac:	4a1b      	ldr	r2, [pc, #108]	; (800881c <_printf_float+0x2ec>)
 80087ae:	2301      	movs	r3, #1
 80087b0:	4631      	mov	r1, r6
 80087b2:	4628      	mov	r0, r5
 80087b4:	47b8      	blx	r7
 80087b6:	3001      	adds	r0, #1
 80087b8:	f43f af19 	beq.w	80085ee <_printf_float+0xbe>
 80087bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80087c0:	4313      	orrs	r3, r2
 80087c2:	d102      	bne.n	80087ca <_printf_float+0x29a>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	07d9      	lsls	r1, r3, #31
 80087c8:	d5d8      	bpl.n	800877c <_printf_float+0x24c>
 80087ca:	ee18 3a10 	vmov	r3, s16
 80087ce:	4652      	mov	r2, sl
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	f43f af09 	beq.w	80085ee <_printf_float+0xbe>
 80087dc:	f04f 0900 	mov.w	r9, #0
 80087e0:	f104 0a1a 	add.w	sl, r4, #26
 80087e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e6:	425b      	negs	r3, r3
 80087e8:	454b      	cmp	r3, r9
 80087ea:	dc01      	bgt.n	80087f0 <_printf_float+0x2c0>
 80087ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ee:	e792      	b.n	8008716 <_printf_float+0x1e6>
 80087f0:	2301      	movs	r3, #1
 80087f2:	4652      	mov	r2, sl
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	f43f aef7 	beq.w	80085ee <_printf_float+0xbe>
 8008800:	f109 0901 	add.w	r9, r9, #1
 8008804:	e7ee      	b.n	80087e4 <_printf_float+0x2b4>
 8008806:	bf00      	nop
 8008808:	7fefffff 	.word	0x7fefffff
 800880c:	0800f150 	.word	0x0800f150
 8008810:	0800f154 	.word	0x0800f154
 8008814:	0800f158 	.word	0x0800f158
 8008818:	0800f15c 	.word	0x0800f15c
 800881c:	0800f160 	.word	0x0800f160
 8008820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008824:	429a      	cmp	r2, r3
 8008826:	bfa8      	it	ge
 8008828:	461a      	movge	r2, r3
 800882a:	2a00      	cmp	r2, #0
 800882c:	4691      	mov	r9, r2
 800882e:	dc37      	bgt.n	80088a0 <_printf_float+0x370>
 8008830:	f04f 0b00 	mov.w	fp, #0
 8008834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008838:	f104 021a 	add.w	r2, r4, #26
 800883c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800883e:	9305      	str	r3, [sp, #20]
 8008840:	eba3 0309 	sub.w	r3, r3, r9
 8008844:	455b      	cmp	r3, fp
 8008846:	dc33      	bgt.n	80088b0 <_printf_float+0x380>
 8008848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800884c:	429a      	cmp	r2, r3
 800884e:	db3b      	blt.n	80088c8 <_printf_float+0x398>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	07da      	lsls	r2, r3, #31
 8008854:	d438      	bmi.n	80088c8 <_printf_float+0x398>
 8008856:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800885a:	eba2 0903 	sub.w	r9, r2, r3
 800885e:	9b05      	ldr	r3, [sp, #20]
 8008860:	1ad2      	subs	r2, r2, r3
 8008862:	4591      	cmp	r9, r2
 8008864:	bfa8      	it	ge
 8008866:	4691      	movge	r9, r2
 8008868:	f1b9 0f00 	cmp.w	r9, #0
 800886c:	dc35      	bgt.n	80088da <_printf_float+0x3aa>
 800886e:	f04f 0800 	mov.w	r8, #0
 8008872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008876:	f104 0a1a 	add.w	sl, r4, #26
 800887a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	eba3 0309 	sub.w	r3, r3, r9
 8008884:	4543      	cmp	r3, r8
 8008886:	f77f af79 	ble.w	800877c <_printf_float+0x24c>
 800888a:	2301      	movs	r3, #1
 800888c:	4652      	mov	r2, sl
 800888e:	4631      	mov	r1, r6
 8008890:	4628      	mov	r0, r5
 8008892:	47b8      	blx	r7
 8008894:	3001      	adds	r0, #1
 8008896:	f43f aeaa 	beq.w	80085ee <_printf_float+0xbe>
 800889a:	f108 0801 	add.w	r8, r8, #1
 800889e:	e7ec      	b.n	800887a <_printf_float+0x34a>
 80088a0:	4613      	mov	r3, r2
 80088a2:	4631      	mov	r1, r6
 80088a4:	4642      	mov	r2, r8
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b8      	blx	r7
 80088aa:	3001      	adds	r0, #1
 80088ac:	d1c0      	bne.n	8008830 <_printf_float+0x300>
 80088ae:	e69e      	b.n	80085ee <_printf_float+0xbe>
 80088b0:	2301      	movs	r3, #1
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	9205      	str	r2, [sp, #20]
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f ae97 	beq.w	80085ee <_printf_float+0xbe>
 80088c0:	9a05      	ldr	r2, [sp, #20]
 80088c2:	f10b 0b01 	add.w	fp, fp, #1
 80088c6:	e7b9      	b.n	800883c <_printf_float+0x30c>
 80088c8:	ee18 3a10 	vmov	r3, s16
 80088cc:	4652      	mov	r2, sl
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d1be      	bne.n	8008856 <_printf_float+0x326>
 80088d8:	e689      	b.n	80085ee <_printf_float+0xbe>
 80088da:	9a05      	ldr	r2, [sp, #20]
 80088dc:	464b      	mov	r3, r9
 80088de:	4442      	add	r2, r8
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	d1c1      	bne.n	800886e <_printf_float+0x33e>
 80088ea:	e680      	b.n	80085ee <_printf_float+0xbe>
 80088ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ee:	2a01      	cmp	r2, #1
 80088f0:	dc01      	bgt.n	80088f6 <_printf_float+0x3c6>
 80088f2:	07db      	lsls	r3, r3, #31
 80088f4:	d53a      	bpl.n	800896c <_printf_float+0x43c>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4642      	mov	r2, r8
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f ae74 	beq.w	80085ee <_printf_float+0xbe>
 8008906:	ee18 3a10 	vmov	r3, s16
 800890a:	4652      	mov	r2, sl
 800890c:	4631      	mov	r1, r6
 800890e:	4628      	mov	r0, r5
 8008910:	47b8      	blx	r7
 8008912:	3001      	adds	r0, #1
 8008914:	f43f ae6b 	beq.w	80085ee <_printf_float+0xbe>
 8008918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800891c:	2200      	movs	r2, #0
 800891e:	2300      	movs	r3, #0
 8008920:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008924:	f7f8 f8d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008928:	b9d8      	cbnz	r0, 8008962 <_printf_float+0x432>
 800892a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800892e:	f108 0201 	add.w	r2, r8, #1
 8008932:	4631      	mov	r1, r6
 8008934:	4628      	mov	r0, r5
 8008936:	47b8      	blx	r7
 8008938:	3001      	adds	r0, #1
 800893a:	d10e      	bne.n	800895a <_printf_float+0x42a>
 800893c:	e657      	b.n	80085ee <_printf_float+0xbe>
 800893e:	2301      	movs	r3, #1
 8008940:	4652      	mov	r2, sl
 8008942:	4631      	mov	r1, r6
 8008944:	4628      	mov	r0, r5
 8008946:	47b8      	blx	r7
 8008948:	3001      	adds	r0, #1
 800894a:	f43f ae50 	beq.w	80085ee <_printf_float+0xbe>
 800894e:	f108 0801 	add.w	r8, r8, #1
 8008952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008954:	3b01      	subs	r3, #1
 8008956:	4543      	cmp	r3, r8
 8008958:	dcf1      	bgt.n	800893e <_printf_float+0x40e>
 800895a:	464b      	mov	r3, r9
 800895c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008960:	e6da      	b.n	8008718 <_printf_float+0x1e8>
 8008962:	f04f 0800 	mov.w	r8, #0
 8008966:	f104 0a1a 	add.w	sl, r4, #26
 800896a:	e7f2      	b.n	8008952 <_printf_float+0x422>
 800896c:	2301      	movs	r3, #1
 800896e:	4642      	mov	r2, r8
 8008970:	e7df      	b.n	8008932 <_printf_float+0x402>
 8008972:	2301      	movs	r3, #1
 8008974:	464a      	mov	r2, r9
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f ae36 	beq.w	80085ee <_printf_float+0xbe>
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	68e3      	ldr	r3, [r4, #12]
 8008988:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800898a:	1a5b      	subs	r3, r3, r1
 800898c:	4543      	cmp	r3, r8
 800898e:	dcf0      	bgt.n	8008972 <_printf_float+0x442>
 8008990:	e6f8      	b.n	8008784 <_printf_float+0x254>
 8008992:	f04f 0800 	mov.w	r8, #0
 8008996:	f104 0919 	add.w	r9, r4, #25
 800899a:	e7f4      	b.n	8008986 <_printf_float+0x456>

0800899c <_printf_common>:
 800899c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a0:	4616      	mov	r6, r2
 80089a2:	4699      	mov	r9, r3
 80089a4:	688a      	ldr	r2, [r1, #8]
 80089a6:	690b      	ldr	r3, [r1, #16]
 80089a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089ac:	4293      	cmp	r3, r2
 80089ae:	bfb8      	it	lt
 80089b0:	4613      	movlt	r3, r2
 80089b2:	6033      	str	r3, [r6, #0]
 80089b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089b8:	4607      	mov	r7, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	b10a      	cbz	r2, 80089c2 <_printf_common+0x26>
 80089be:	3301      	adds	r3, #1
 80089c0:	6033      	str	r3, [r6, #0]
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	0699      	lsls	r1, r3, #26
 80089c6:	bf42      	ittt	mi
 80089c8:	6833      	ldrmi	r3, [r6, #0]
 80089ca:	3302      	addmi	r3, #2
 80089cc:	6033      	strmi	r3, [r6, #0]
 80089ce:	6825      	ldr	r5, [r4, #0]
 80089d0:	f015 0506 	ands.w	r5, r5, #6
 80089d4:	d106      	bne.n	80089e4 <_printf_common+0x48>
 80089d6:	f104 0a19 	add.w	sl, r4, #25
 80089da:	68e3      	ldr	r3, [r4, #12]
 80089dc:	6832      	ldr	r2, [r6, #0]
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	42ab      	cmp	r3, r5
 80089e2:	dc26      	bgt.n	8008a32 <_printf_common+0x96>
 80089e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089e8:	1e13      	subs	r3, r2, #0
 80089ea:	6822      	ldr	r2, [r4, #0]
 80089ec:	bf18      	it	ne
 80089ee:	2301      	movne	r3, #1
 80089f0:	0692      	lsls	r2, r2, #26
 80089f2:	d42b      	bmi.n	8008a4c <_printf_common+0xb0>
 80089f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089f8:	4649      	mov	r1, r9
 80089fa:	4638      	mov	r0, r7
 80089fc:	47c0      	blx	r8
 80089fe:	3001      	adds	r0, #1
 8008a00:	d01e      	beq.n	8008a40 <_printf_common+0xa4>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	6922      	ldr	r2, [r4, #16]
 8008a06:	f003 0306 	and.w	r3, r3, #6
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	bf02      	ittt	eq
 8008a0e:	68e5      	ldreq	r5, [r4, #12]
 8008a10:	6833      	ldreq	r3, [r6, #0]
 8008a12:	1aed      	subeq	r5, r5, r3
 8008a14:	68a3      	ldr	r3, [r4, #8]
 8008a16:	bf0c      	ite	eq
 8008a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a1c:	2500      	movne	r5, #0
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	bfc4      	itt	gt
 8008a22:	1a9b      	subgt	r3, r3, r2
 8008a24:	18ed      	addgt	r5, r5, r3
 8008a26:	2600      	movs	r6, #0
 8008a28:	341a      	adds	r4, #26
 8008a2a:	42b5      	cmp	r5, r6
 8008a2c:	d11a      	bne.n	8008a64 <_printf_common+0xc8>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	e008      	b.n	8008a44 <_printf_common+0xa8>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4652      	mov	r2, sl
 8008a36:	4649      	mov	r1, r9
 8008a38:	4638      	mov	r0, r7
 8008a3a:	47c0      	blx	r8
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d103      	bne.n	8008a48 <_printf_common+0xac>
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a48:	3501      	adds	r5, #1
 8008a4a:	e7c6      	b.n	80089da <_printf_common+0x3e>
 8008a4c:	18e1      	adds	r1, r4, r3
 8008a4e:	1c5a      	adds	r2, r3, #1
 8008a50:	2030      	movs	r0, #48	; 0x30
 8008a52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a56:	4422      	add	r2, r4
 8008a58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a60:	3302      	adds	r3, #2
 8008a62:	e7c7      	b.n	80089f4 <_printf_common+0x58>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4622      	mov	r2, r4
 8008a68:	4649      	mov	r1, r9
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	47c0      	blx	r8
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d0e6      	beq.n	8008a40 <_printf_common+0xa4>
 8008a72:	3601      	adds	r6, #1
 8008a74:	e7d9      	b.n	8008a2a <_printf_common+0x8e>
	...

08008a78 <_printf_i>:
 8008a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7c:	7e0f      	ldrb	r7, [r1, #24]
 8008a7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a80:	2f78      	cmp	r7, #120	; 0x78
 8008a82:	4691      	mov	r9, r2
 8008a84:	4680      	mov	r8, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	469a      	mov	sl, r3
 8008a8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a8e:	d807      	bhi.n	8008aa0 <_printf_i+0x28>
 8008a90:	2f62      	cmp	r7, #98	; 0x62
 8008a92:	d80a      	bhi.n	8008aaa <_printf_i+0x32>
 8008a94:	2f00      	cmp	r7, #0
 8008a96:	f000 80d4 	beq.w	8008c42 <_printf_i+0x1ca>
 8008a9a:	2f58      	cmp	r7, #88	; 0x58
 8008a9c:	f000 80c0 	beq.w	8008c20 <_printf_i+0x1a8>
 8008aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008aa8:	e03a      	b.n	8008b20 <_printf_i+0xa8>
 8008aaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aae:	2b15      	cmp	r3, #21
 8008ab0:	d8f6      	bhi.n	8008aa0 <_printf_i+0x28>
 8008ab2:	a101      	add	r1, pc, #4	; (adr r1, 8008ab8 <_printf_i+0x40>)
 8008ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ab8:	08008b11 	.word	0x08008b11
 8008abc:	08008b25 	.word	0x08008b25
 8008ac0:	08008aa1 	.word	0x08008aa1
 8008ac4:	08008aa1 	.word	0x08008aa1
 8008ac8:	08008aa1 	.word	0x08008aa1
 8008acc:	08008aa1 	.word	0x08008aa1
 8008ad0:	08008b25 	.word	0x08008b25
 8008ad4:	08008aa1 	.word	0x08008aa1
 8008ad8:	08008aa1 	.word	0x08008aa1
 8008adc:	08008aa1 	.word	0x08008aa1
 8008ae0:	08008aa1 	.word	0x08008aa1
 8008ae4:	08008c29 	.word	0x08008c29
 8008ae8:	08008b51 	.word	0x08008b51
 8008aec:	08008be3 	.word	0x08008be3
 8008af0:	08008aa1 	.word	0x08008aa1
 8008af4:	08008aa1 	.word	0x08008aa1
 8008af8:	08008c4b 	.word	0x08008c4b
 8008afc:	08008aa1 	.word	0x08008aa1
 8008b00:	08008b51 	.word	0x08008b51
 8008b04:	08008aa1 	.word	0x08008aa1
 8008b08:	08008aa1 	.word	0x08008aa1
 8008b0c:	08008beb 	.word	0x08008beb
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	1d1a      	adds	r2, r3, #4
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	602a      	str	r2, [r5, #0]
 8008b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b20:	2301      	movs	r3, #1
 8008b22:	e09f      	b.n	8008c64 <_printf_i+0x1ec>
 8008b24:	6820      	ldr	r0, [r4, #0]
 8008b26:	682b      	ldr	r3, [r5, #0]
 8008b28:	0607      	lsls	r7, r0, #24
 8008b2a:	f103 0104 	add.w	r1, r3, #4
 8008b2e:	6029      	str	r1, [r5, #0]
 8008b30:	d501      	bpl.n	8008b36 <_printf_i+0xbe>
 8008b32:	681e      	ldr	r6, [r3, #0]
 8008b34:	e003      	b.n	8008b3e <_printf_i+0xc6>
 8008b36:	0646      	lsls	r6, r0, #25
 8008b38:	d5fb      	bpl.n	8008b32 <_printf_i+0xba>
 8008b3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008b3e:	2e00      	cmp	r6, #0
 8008b40:	da03      	bge.n	8008b4a <_printf_i+0xd2>
 8008b42:	232d      	movs	r3, #45	; 0x2d
 8008b44:	4276      	negs	r6, r6
 8008b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b4a:	485a      	ldr	r0, [pc, #360]	; (8008cb4 <_printf_i+0x23c>)
 8008b4c:	230a      	movs	r3, #10
 8008b4e:	e012      	b.n	8008b76 <_printf_i+0xfe>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	6820      	ldr	r0, [r4, #0]
 8008b54:	1d19      	adds	r1, r3, #4
 8008b56:	6029      	str	r1, [r5, #0]
 8008b58:	0605      	lsls	r5, r0, #24
 8008b5a:	d501      	bpl.n	8008b60 <_printf_i+0xe8>
 8008b5c:	681e      	ldr	r6, [r3, #0]
 8008b5e:	e002      	b.n	8008b66 <_printf_i+0xee>
 8008b60:	0641      	lsls	r1, r0, #25
 8008b62:	d5fb      	bpl.n	8008b5c <_printf_i+0xe4>
 8008b64:	881e      	ldrh	r6, [r3, #0]
 8008b66:	4853      	ldr	r0, [pc, #332]	; (8008cb4 <_printf_i+0x23c>)
 8008b68:	2f6f      	cmp	r7, #111	; 0x6f
 8008b6a:	bf0c      	ite	eq
 8008b6c:	2308      	moveq	r3, #8
 8008b6e:	230a      	movne	r3, #10
 8008b70:	2100      	movs	r1, #0
 8008b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b76:	6865      	ldr	r5, [r4, #4]
 8008b78:	60a5      	str	r5, [r4, #8]
 8008b7a:	2d00      	cmp	r5, #0
 8008b7c:	bfa2      	ittt	ge
 8008b7e:	6821      	ldrge	r1, [r4, #0]
 8008b80:	f021 0104 	bicge.w	r1, r1, #4
 8008b84:	6021      	strge	r1, [r4, #0]
 8008b86:	b90e      	cbnz	r6, 8008b8c <_printf_i+0x114>
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	d04b      	beq.n	8008c24 <_printf_i+0x1ac>
 8008b8c:	4615      	mov	r5, r2
 8008b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b92:	fb03 6711 	mls	r7, r3, r1, r6
 8008b96:	5dc7      	ldrb	r7, [r0, r7]
 8008b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b9c:	4637      	mov	r7, r6
 8008b9e:	42bb      	cmp	r3, r7
 8008ba0:	460e      	mov	r6, r1
 8008ba2:	d9f4      	bls.n	8008b8e <_printf_i+0x116>
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d10b      	bne.n	8008bc0 <_printf_i+0x148>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	07de      	lsls	r6, r3, #31
 8008bac:	d508      	bpl.n	8008bc0 <_printf_i+0x148>
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	6861      	ldr	r1, [r4, #4]
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	bfde      	ittt	le
 8008bb6:	2330      	movle	r3, #48	; 0x30
 8008bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bc0:	1b52      	subs	r2, r2, r5
 8008bc2:	6122      	str	r2, [r4, #16]
 8008bc4:	f8cd a000 	str.w	sl, [sp]
 8008bc8:	464b      	mov	r3, r9
 8008bca:	aa03      	add	r2, sp, #12
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4640      	mov	r0, r8
 8008bd0:	f7ff fee4 	bl	800899c <_printf_common>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d14a      	bne.n	8008c6e <_printf_i+0x1f6>
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	b004      	add	sp, #16
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	f043 0320 	orr.w	r3, r3, #32
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	4833      	ldr	r0, [pc, #204]	; (8008cb8 <_printf_i+0x240>)
 8008bec:	2778      	movs	r7, #120	; 0x78
 8008bee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	6829      	ldr	r1, [r5, #0]
 8008bf6:	061f      	lsls	r7, r3, #24
 8008bf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bfc:	d402      	bmi.n	8008c04 <_printf_i+0x18c>
 8008bfe:	065f      	lsls	r7, r3, #25
 8008c00:	bf48      	it	mi
 8008c02:	b2b6      	uxthmi	r6, r6
 8008c04:	07df      	lsls	r7, r3, #31
 8008c06:	bf48      	it	mi
 8008c08:	f043 0320 	orrmi.w	r3, r3, #32
 8008c0c:	6029      	str	r1, [r5, #0]
 8008c0e:	bf48      	it	mi
 8008c10:	6023      	strmi	r3, [r4, #0]
 8008c12:	b91e      	cbnz	r6, 8008c1c <_printf_i+0x1a4>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	f023 0320 	bic.w	r3, r3, #32
 8008c1a:	6023      	str	r3, [r4, #0]
 8008c1c:	2310      	movs	r3, #16
 8008c1e:	e7a7      	b.n	8008b70 <_printf_i+0xf8>
 8008c20:	4824      	ldr	r0, [pc, #144]	; (8008cb4 <_printf_i+0x23c>)
 8008c22:	e7e4      	b.n	8008bee <_printf_i+0x176>
 8008c24:	4615      	mov	r5, r2
 8008c26:	e7bd      	b.n	8008ba4 <_printf_i+0x12c>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	6826      	ldr	r6, [r4, #0]
 8008c2c:	6961      	ldr	r1, [r4, #20]
 8008c2e:	1d18      	adds	r0, r3, #4
 8008c30:	6028      	str	r0, [r5, #0]
 8008c32:	0635      	lsls	r5, r6, #24
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	d501      	bpl.n	8008c3c <_printf_i+0x1c4>
 8008c38:	6019      	str	r1, [r3, #0]
 8008c3a:	e002      	b.n	8008c42 <_printf_i+0x1ca>
 8008c3c:	0670      	lsls	r0, r6, #25
 8008c3e:	d5fb      	bpl.n	8008c38 <_printf_i+0x1c0>
 8008c40:	8019      	strh	r1, [r3, #0]
 8008c42:	2300      	movs	r3, #0
 8008c44:	6123      	str	r3, [r4, #16]
 8008c46:	4615      	mov	r5, r2
 8008c48:	e7bc      	b.n	8008bc4 <_printf_i+0x14c>
 8008c4a:	682b      	ldr	r3, [r5, #0]
 8008c4c:	1d1a      	adds	r2, r3, #4
 8008c4e:	602a      	str	r2, [r5, #0]
 8008c50:	681d      	ldr	r5, [r3, #0]
 8008c52:	6862      	ldr	r2, [r4, #4]
 8008c54:	2100      	movs	r1, #0
 8008c56:	4628      	mov	r0, r5
 8008c58:	f7f7 faba 	bl	80001d0 <memchr>
 8008c5c:	b108      	cbz	r0, 8008c62 <_printf_i+0x1ea>
 8008c5e:	1b40      	subs	r0, r0, r5
 8008c60:	6060      	str	r0, [r4, #4]
 8008c62:	6863      	ldr	r3, [r4, #4]
 8008c64:	6123      	str	r3, [r4, #16]
 8008c66:	2300      	movs	r3, #0
 8008c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c6c:	e7aa      	b.n	8008bc4 <_printf_i+0x14c>
 8008c6e:	6923      	ldr	r3, [r4, #16]
 8008c70:	462a      	mov	r2, r5
 8008c72:	4649      	mov	r1, r9
 8008c74:	4640      	mov	r0, r8
 8008c76:	47d0      	blx	sl
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d0ad      	beq.n	8008bd8 <_printf_i+0x160>
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	079b      	lsls	r3, r3, #30
 8008c80:	d413      	bmi.n	8008caa <_printf_i+0x232>
 8008c82:	68e0      	ldr	r0, [r4, #12]
 8008c84:	9b03      	ldr	r3, [sp, #12]
 8008c86:	4298      	cmp	r0, r3
 8008c88:	bfb8      	it	lt
 8008c8a:	4618      	movlt	r0, r3
 8008c8c:	e7a6      	b.n	8008bdc <_printf_i+0x164>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	4632      	mov	r2, r6
 8008c92:	4649      	mov	r1, r9
 8008c94:	4640      	mov	r0, r8
 8008c96:	47d0      	blx	sl
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d09d      	beq.n	8008bd8 <_printf_i+0x160>
 8008c9c:	3501      	adds	r5, #1
 8008c9e:	68e3      	ldr	r3, [r4, #12]
 8008ca0:	9903      	ldr	r1, [sp, #12]
 8008ca2:	1a5b      	subs	r3, r3, r1
 8008ca4:	42ab      	cmp	r3, r5
 8008ca6:	dcf2      	bgt.n	8008c8e <_printf_i+0x216>
 8008ca8:	e7eb      	b.n	8008c82 <_printf_i+0x20a>
 8008caa:	2500      	movs	r5, #0
 8008cac:	f104 0619 	add.w	r6, r4, #25
 8008cb0:	e7f5      	b.n	8008c9e <_printf_i+0x226>
 8008cb2:	bf00      	nop
 8008cb4:	0800f162 	.word	0x0800f162
 8008cb8:	0800f173 	.word	0x0800f173

08008cbc <_scanf_float>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	b087      	sub	sp, #28
 8008cc2:	4617      	mov	r7, r2
 8008cc4:	9303      	str	r3, [sp, #12]
 8008cc6:	688b      	ldr	r3, [r1, #8]
 8008cc8:	1e5a      	subs	r2, r3, #1
 8008cca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008cce:	bf83      	ittte	hi
 8008cd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008cd4:	195b      	addhi	r3, r3, r5
 8008cd6:	9302      	strhi	r3, [sp, #8]
 8008cd8:	2300      	movls	r3, #0
 8008cda:	bf86      	itte	hi
 8008cdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ce0:	608b      	strhi	r3, [r1, #8]
 8008ce2:	9302      	strls	r3, [sp, #8]
 8008ce4:	680b      	ldr	r3, [r1, #0]
 8008ce6:	468b      	mov	fp, r1
 8008ce8:	2500      	movs	r5, #0
 8008cea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008cee:	f84b 3b1c 	str.w	r3, [fp], #28
 8008cf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008cf6:	4680      	mov	r8, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	465e      	mov	r6, fp
 8008cfc:	46aa      	mov	sl, r5
 8008cfe:	46a9      	mov	r9, r5
 8008d00:	9501      	str	r5, [sp, #4]
 8008d02:	68a2      	ldr	r2, [r4, #8]
 8008d04:	b152      	cbz	r2, 8008d1c <_scanf_float+0x60>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b4e      	cmp	r3, #78	; 0x4e
 8008d0c:	d864      	bhi.n	8008dd8 <_scanf_float+0x11c>
 8008d0e:	2b40      	cmp	r3, #64	; 0x40
 8008d10:	d83c      	bhi.n	8008d8c <_scanf_float+0xd0>
 8008d12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008d16:	b2c8      	uxtb	r0, r1
 8008d18:	280e      	cmp	r0, #14
 8008d1a:	d93a      	bls.n	8008d92 <_scanf_float+0xd6>
 8008d1c:	f1b9 0f00 	cmp.w	r9, #0
 8008d20:	d003      	beq.n	8008d2a <_scanf_float+0x6e>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d2e:	f1ba 0f01 	cmp.w	sl, #1
 8008d32:	f200 8113 	bhi.w	8008f5c <_scanf_float+0x2a0>
 8008d36:	455e      	cmp	r6, fp
 8008d38:	f200 8105 	bhi.w	8008f46 <_scanf_float+0x28a>
 8008d3c:	2501      	movs	r5, #1
 8008d3e:	4628      	mov	r0, r5
 8008d40:	b007      	add	sp, #28
 8008d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008d4a:	2a0d      	cmp	r2, #13
 8008d4c:	d8e6      	bhi.n	8008d1c <_scanf_float+0x60>
 8008d4e:	a101      	add	r1, pc, #4	; (adr r1, 8008d54 <_scanf_float+0x98>)
 8008d50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d54:	08008e93 	.word	0x08008e93
 8008d58:	08008d1d 	.word	0x08008d1d
 8008d5c:	08008d1d 	.word	0x08008d1d
 8008d60:	08008d1d 	.word	0x08008d1d
 8008d64:	08008ef3 	.word	0x08008ef3
 8008d68:	08008ecb 	.word	0x08008ecb
 8008d6c:	08008d1d 	.word	0x08008d1d
 8008d70:	08008d1d 	.word	0x08008d1d
 8008d74:	08008ea1 	.word	0x08008ea1
 8008d78:	08008d1d 	.word	0x08008d1d
 8008d7c:	08008d1d 	.word	0x08008d1d
 8008d80:	08008d1d 	.word	0x08008d1d
 8008d84:	08008d1d 	.word	0x08008d1d
 8008d88:	08008e59 	.word	0x08008e59
 8008d8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008d90:	e7db      	b.n	8008d4a <_scanf_float+0x8e>
 8008d92:	290e      	cmp	r1, #14
 8008d94:	d8c2      	bhi.n	8008d1c <_scanf_float+0x60>
 8008d96:	a001      	add	r0, pc, #4	; (adr r0, 8008d9c <_scanf_float+0xe0>)
 8008d98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d9c:	08008e4b 	.word	0x08008e4b
 8008da0:	08008d1d 	.word	0x08008d1d
 8008da4:	08008e4b 	.word	0x08008e4b
 8008da8:	08008edf 	.word	0x08008edf
 8008dac:	08008d1d 	.word	0x08008d1d
 8008db0:	08008df9 	.word	0x08008df9
 8008db4:	08008e35 	.word	0x08008e35
 8008db8:	08008e35 	.word	0x08008e35
 8008dbc:	08008e35 	.word	0x08008e35
 8008dc0:	08008e35 	.word	0x08008e35
 8008dc4:	08008e35 	.word	0x08008e35
 8008dc8:	08008e35 	.word	0x08008e35
 8008dcc:	08008e35 	.word	0x08008e35
 8008dd0:	08008e35 	.word	0x08008e35
 8008dd4:	08008e35 	.word	0x08008e35
 8008dd8:	2b6e      	cmp	r3, #110	; 0x6e
 8008dda:	d809      	bhi.n	8008df0 <_scanf_float+0x134>
 8008ddc:	2b60      	cmp	r3, #96	; 0x60
 8008dde:	d8b2      	bhi.n	8008d46 <_scanf_float+0x8a>
 8008de0:	2b54      	cmp	r3, #84	; 0x54
 8008de2:	d077      	beq.n	8008ed4 <_scanf_float+0x218>
 8008de4:	2b59      	cmp	r3, #89	; 0x59
 8008de6:	d199      	bne.n	8008d1c <_scanf_float+0x60>
 8008de8:	2d07      	cmp	r5, #7
 8008dea:	d197      	bne.n	8008d1c <_scanf_float+0x60>
 8008dec:	2508      	movs	r5, #8
 8008dee:	e029      	b.n	8008e44 <_scanf_float+0x188>
 8008df0:	2b74      	cmp	r3, #116	; 0x74
 8008df2:	d06f      	beq.n	8008ed4 <_scanf_float+0x218>
 8008df4:	2b79      	cmp	r3, #121	; 0x79
 8008df6:	e7f6      	b.n	8008de6 <_scanf_float+0x12a>
 8008df8:	6821      	ldr	r1, [r4, #0]
 8008dfa:	05c8      	lsls	r0, r1, #23
 8008dfc:	d51a      	bpl.n	8008e34 <_scanf_float+0x178>
 8008dfe:	9b02      	ldr	r3, [sp, #8]
 8008e00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e04:	6021      	str	r1, [r4, #0]
 8008e06:	f109 0901 	add.w	r9, r9, #1
 8008e0a:	b11b      	cbz	r3, 8008e14 <_scanf_float+0x158>
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	3201      	adds	r2, #1
 8008e10:	9302      	str	r3, [sp, #8]
 8008e12:	60a2      	str	r2, [r4, #8]
 8008e14:	68a3      	ldr	r3, [r4, #8]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	60a3      	str	r3, [r4, #8]
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	6123      	str	r3, [r4, #16]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3b01      	subs	r3, #1
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	607b      	str	r3, [r7, #4]
 8008e28:	f340 8084 	ble.w	8008f34 <_scanf_float+0x278>
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	603b      	str	r3, [r7, #0]
 8008e32:	e766      	b.n	8008d02 <_scanf_float+0x46>
 8008e34:	eb1a 0f05 	cmn.w	sl, r5
 8008e38:	f47f af70 	bne.w	8008d1c <_scanf_float+0x60>
 8008e3c:	6822      	ldr	r2, [r4, #0]
 8008e3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008e42:	6022      	str	r2, [r4, #0]
 8008e44:	f806 3b01 	strb.w	r3, [r6], #1
 8008e48:	e7e4      	b.n	8008e14 <_scanf_float+0x158>
 8008e4a:	6822      	ldr	r2, [r4, #0]
 8008e4c:	0610      	lsls	r0, r2, #24
 8008e4e:	f57f af65 	bpl.w	8008d1c <_scanf_float+0x60>
 8008e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e56:	e7f4      	b.n	8008e42 <_scanf_float+0x186>
 8008e58:	f1ba 0f00 	cmp.w	sl, #0
 8008e5c:	d10e      	bne.n	8008e7c <_scanf_float+0x1c0>
 8008e5e:	f1b9 0f00 	cmp.w	r9, #0
 8008e62:	d10e      	bne.n	8008e82 <_scanf_float+0x1c6>
 8008e64:	6822      	ldr	r2, [r4, #0]
 8008e66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e6e:	d108      	bne.n	8008e82 <_scanf_float+0x1c6>
 8008e70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e74:	6022      	str	r2, [r4, #0]
 8008e76:	f04f 0a01 	mov.w	sl, #1
 8008e7a:	e7e3      	b.n	8008e44 <_scanf_float+0x188>
 8008e7c:	f1ba 0f02 	cmp.w	sl, #2
 8008e80:	d055      	beq.n	8008f2e <_scanf_float+0x272>
 8008e82:	2d01      	cmp	r5, #1
 8008e84:	d002      	beq.n	8008e8c <_scanf_float+0x1d0>
 8008e86:	2d04      	cmp	r5, #4
 8008e88:	f47f af48 	bne.w	8008d1c <_scanf_float+0x60>
 8008e8c:	3501      	adds	r5, #1
 8008e8e:	b2ed      	uxtb	r5, r5
 8008e90:	e7d8      	b.n	8008e44 <_scanf_float+0x188>
 8008e92:	f1ba 0f01 	cmp.w	sl, #1
 8008e96:	f47f af41 	bne.w	8008d1c <_scanf_float+0x60>
 8008e9a:	f04f 0a02 	mov.w	sl, #2
 8008e9e:	e7d1      	b.n	8008e44 <_scanf_float+0x188>
 8008ea0:	b97d      	cbnz	r5, 8008ec2 <_scanf_float+0x206>
 8008ea2:	f1b9 0f00 	cmp.w	r9, #0
 8008ea6:	f47f af3c 	bne.w	8008d22 <_scanf_float+0x66>
 8008eaa:	6822      	ldr	r2, [r4, #0]
 8008eac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008eb0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008eb4:	f47f af39 	bne.w	8008d2a <_scanf_float+0x6e>
 8008eb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ebc:	6022      	str	r2, [r4, #0]
 8008ebe:	2501      	movs	r5, #1
 8008ec0:	e7c0      	b.n	8008e44 <_scanf_float+0x188>
 8008ec2:	2d03      	cmp	r5, #3
 8008ec4:	d0e2      	beq.n	8008e8c <_scanf_float+0x1d0>
 8008ec6:	2d05      	cmp	r5, #5
 8008ec8:	e7de      	b.n	8008e88 <_scanf_float+0x1cc>
 8008eca:	2d02      	cmp	r5, #2
 8008ecc:	f47f af26 	bne.w	8008d1c <_scanf_float+0x60>
 8008ed0:	2503      	movs	r5, #3
 8008ed2:	e7b7      	b.n	8008e44 <_scanf_float+0x188>
 8008ed4:	2d06      	cmp	r5, #6
 8008ed6:	f47f af21 	bne.w	8008d1c <_scanf_float+0x60>
 8008eda:	2507      	movs	r5, #7
 8008edc:	e7b2      	b.n	8008e44 <_scanf_float+0x188>
 8008ede:	6822      	ldr	r2, [r4, #0]
 8008ee0:	0591      	lsls	r1, r2, #22
 8008ee2:	f57f af1b 	bpl.w	8008d1c <_scanf_float+0x60>
 8008ee6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008eea:	6022      	str	r2, [r4, #0]
 8008eec:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ef0:	e7a8      	b.n	8008e44 <_scanf_float+0x188>
 8008ef2:	6822      	ldr	r2, [r4, #0]
 8008ef4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008ef8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008efc:	d006      	beq.n	8008f0c <_scanf_float+0x250>
 8008efe:	0550      	lsls	r0, r2, #21
 8008f00:	f57f af0c 	bpl.w	8008d1c <_scanf_float+0x60>
 8008f04:	f1b9 0f00 	cmp.w	r9, #0
 8008f08:	f43f af0f 	beq.w	8008d2a <_scanf_float+0x6e>
 8008f0c:	0591      	lsls	r1, r2, #22
 8008f0e:	bf58      	it	pl
 8008f10:	9901      	ldrpl	r1, [sp, #4]
 8008f12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f16:	bf58      	it	pl
 8008f18:	eba9 0101 	subpl.w	r1, r9, r1
 8008f1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f20:	bf58      	it	pl
 8008f22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f26:	6022      	str	r2, [r4, #0]
 8008f28:	f04f 0900 	mov.w	r9, #0
 8008f2c:	e78a      	b.n	8008e44 <_scanf_float+0x188>
 8008f2e:	f04f 0a03 	mov.w	sl, #3
 8008f32:	e787      	b.n	8008e44 <_scanf_float+0x188>
 8008f34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f38:	4639      	mov	r1, r7
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	4798      	blx	r3
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	f43f aedf 	beq.w	8008d02 <_scanf_float+0x46>
 8008f44:	e6ea      	b.n	8008d1c <_scanf_float+0x60>
 8008f46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f4e:	463a      	mov	r2, r7
 8008f50:	4640      	mov	r0, r8
 8008f52:	4798      	blx	r3
 8008f54:	6923      	ldr	r3, [r4, #16]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	6123      	str	r3, [r4, #16]
 8008f5a:	e6ec      	b.n	8008d36 <_scanf_float+0x7a>
 8008f5c:	1e6b      	subs	r3, r5, #1
 8008f5e:	2b06      	cmp	r3, #6
 8008f60:	d825      	bhi.n	8008fae <_scanf_float+0x2f2>
 8008f62:	2d02      	cmp	r5, #2
 8008f64:	d836      	bhi.n	8008fd4 <_scanf_float+0x318>
 8008f66:	455e      	cmp	r6, fp
 8008f68:	f67f aee8 	bls.w	8008d3c <_scanf_float+0x80>
 8008f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f74:	463a      	mov	r2, r7
 8008f76:	4640      	mov	r0, r8
 8008f78:	4798      	blx	r3
 8008f7a:	6923      	ldr	r3, [r4, #16]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	6123      	str	r3, [r4, #16]
 8008f80:	e7f1      	b.n	8008f66 <_scanf_float+0x2aa>
 8008f82:	9802      	ldr	r0, [sp, #8]
 8008f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008f8c:	9002      	str	r0, [sp, #8]
 8008f8e:	463a      	mov	r2, r7
 8008f90:	4640      	mov	r0, r8
 8008f92:	4798      	blx	r3
 8008f94:	6923      	ldr	r3, [r4, #16]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	6123      	str	r3, [r4, #16]
 8008f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f9e:	fa5f fa8a 	uxtb.w	sl, sl
 8008fa2:	f1ba 0f02 	cmp.w	sl, #2
 8008fa6:	d1ec      	bne.n	8008f82 <_scanf_float+0x2c6>
 8008fa8:	3d03      	subs	r5, #3
 8008faa:	b2ed      	uxtb	r5, r5
 8008fac:	1b76      	subs	r6, r6, r5
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	05da      	lsls	r2, r3, #23
 8008fb2:	d52f      	bpl.n	8009014 <_scanf_float+0x358>
 8008fb4:	055b      	lsls	r3, r3, #21
 8008fb6:	d510      	bpl.n	8008fda <_scanf_float+0x31e>
 8008fb8:	455e      	cmp	r6, fp
 8008fba:	f67f aebf 	bls.w	8008d3c <_scanf_float+0x80>
 8008fbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fc6:	463a      	mov	r2, r7
 8008fc8:	4640      	mov	r0, r8
 8008fca:	4798      	blx	r3
 8008fcc:	6923      	ldr	r3, [r4, #16]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	6123      	str	r3, [r4, #16]
 8008fd2:	e7f1      	b.n	8008fb8 <_scanf_float+0x2fc>
 8008fd4:	46aa      	mov	sl, r5
 8008fd6:	9602      	str	r6, [sp, #8]
 8008fd8:	e7df      	b.n	8008f9a <_scanf_float+0x2de>
 8008fda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008fde:	6923      	ldr	r3, [r4, #16]
 8008fe0:	2965      	cmp	r1, #101	; 0x65
 8008fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fe6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	d00c      	beq.n	8009008 <_scanf_float+0x34c>
 8008fee:	2945      	cmp	r1, #69	; 0x45
 8008ff0:	d00a      	beq.n	8009008 <_scanf_float+0x34c>
 8008ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ff6:	463a      	mov	r2, r7
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	4798      	blx	r3
 8008ffc:	6923      	ldr	r3, [r4, #16]
 8008ffe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009002:	3b01      	subs	r3, #1
 8009004:	1eb5      	subs	r5, r6, #2
 8009006:	6123      	str	r3, [r4, #16]
 8009008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800900c:	463a      	mov	r2, r7
 800900e:	4640      	mov	r0, r8
 8009010:	4798      	blx	r3
 8009012:	462e      	mov	r6, r5
 8009014:	6825      	ldr	r5, [r4, #0]
 8009016:	f015 0510 	ands.w	r5, r5, #16
 800901a:	d158      	bne.n	80090ce <_scanf_float+0x412>
 800901c:	7035      	strb	r5, [r6, #0]
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009028:	d11c      	bne.n	8009064 <_scanf_float+0x3a8>
 800902a:	9b01      	ldr	r3, [sp, #4]
 800902c:	454b      	cmp	r3, r9
 800902e:	eba3 0209 	sub.w	r2, r3, r9
 8009032:	d124      	bne.n	800907e <_scanf_float+0x3c2>
 8009034:	2200      	movs	r2, #0
 8009036:	4659      	mov	r1, fp
 8009038:	4640      	mov	r0, r8
 800903a:	f002 fbc1 	bl	800b7c0 <_strtod_r>
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	6821      	ldr	r1, [r4, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f011 0f02 	tst.w	r1, #2
 8009048:	ec57 6b10 	vmov	r6, r7, d0
 800904c:	f103 0204 	add.w	r2, r3, #4
 8009050:	d020      	beq.n	8009094 <_scanf_float+0x3d8>
 8009052:	9903      	ldr	r1, [sp, #12]
 8009054:	600a      	str	r2, [r1, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	e9c3 6700 	strd	r6, r7, [r3]
 800905c:	68e3      	ldr	r3, [r4, #12]
 800905e:	3301      	adds	r3, #1
 8009060:	60e3      	str	r3, [r4, #12]
 8009062:	e66c      	b.n	8008d3e <_scanf_float+0x82>
 8009064:	9b04      	ldr	r3, [sp, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0e4      	beq.n	8009034 <_scanf_float+0x378>
 800906a:	9905      	ldr	r1, [sp, #20]
 800906c:	230a      	movs	r3, #10
 800906e:	462a      	mov	r2, r5
 8009070:	3101      	adds	r1, #1
 8009072:	4640      	mov	r0, r8
 8009074:	f002 fc2c 	bl	800b8d0 <_strtol_r>
 8009078:	9b04      	ldr	r3, [sp, #16]
 800907a:	9e05      	ldr	r6, [sp, #20]
 800907c:	1ac2      	subs	r2, r0, r3
 800907e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009082:	429e      	cmp	r6, r3
 8009084:	bf28      	it	cs
 8009086:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800908a:	4912      	ldr	r1, [pc, #72]	; (80090d4 <_scanf_float+0x418>)
 800908c:	4630      	mov	r0, r6
 800908e:	f000 f91b 	bl	80092c8 <siprintf>
 8009092:	e7cf      	b.n	8009034 <_scanf_float+0x378>
 8009094:	f011 0f04 	tst.w	r1, #4
 8009098:	9903      	ldr	r1, [sp, #12]
 800909a:	600a      	str	r2, [r1, #0]
 800909c:	d1db      	bne.n	8009056 <_scanf_float+0x39a>
 800909e:	f8d3 8000 	ldr.w	r8, [r3]
 80090a2:	ee10 2a10 	vmov	r2, s0
 80090a6:	ee10 0a10 	vmov	r0, s0
 80090aa:	463b      	mov	r3, r7
 80090ac:	4639      	mov	r1, r7
 80090ae:	f7f7 fd3d 	bl	8000b2c <__aeabi_dcmpun>
 80090b2:	b128      	cbz	r0, 80090c0 <_scanf_float+0x404>
 80090b4:	4808      	ldr	r0, [pc, #32]	; (80090d8 <_scanf_float+0x41c>)
 80090b6:	f000 f9fb 	bl	80094b0 <nanf>
 80090ba:	ed88 0a00 	vstr	s0, [r8]
 80090be:	e7cd      	b.n	800905c <_scanf_float+0x3a0>
 80090c0:	4630      	mov	r0, r6
 80090c2:	4639      	mov	r1, r7
 80090c4:	f7f7 fd90 	bl	8000be8 <__aeabi_d2f>
 80090c8:	f8c8 0000 	str.w	r0, [r8]
 80090cc:	e7c6      	b.n	800905c <_scanf_float+0x3a0>
 80090ce:	2500      	movs	r5, #0
 80090d0:	e635      	b.n	8008d3e <_scanf_float+0x82>
 80090d2:	bf00      	nop
 80090d4:	0800f184 	.word	0x0800f184
 80090d8:	0800f515 	.word	0x0800f515

080090dc <std>:
 80090dc:	2300      	movs	r3, #0
 80090de:	b510      	push	{r4, lr}
 80090e0:	4604      	mov	r4, r0
 80090e2:	e9c0 3300 	strd	r3, r3, [r0]
 80090e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090ea:	6083      	str	r3, [r0, #8]
 80090ec:	8181      	strh	r1, [r0, #12]
 80090ee:	6643      	str	r3, [r0, #100]	; 0x64
 80090f0:	81c2      	strh	r2, [r0, #14]
 80090f2:	6183      	str	r3, [r0, #24]
 80090f4:	4619      	mov	r1, r3
 80090f6:	2208      	movs	r2, #8
 80090f8:	305c      	adds	r0, #92	; 0x5c
 80090fa:	f000 f948 	bl	800938e <memset>
 80090fe:	4b0d      	ldr	r3, [pc, #52]	; (8009134 <std+0x58>)
 8009100:	6263      	str	r3, [r4, #36]	; 0x24
 8009102:	4b0d      	ldr	r3, [pc, #52]	; (8009138 <std+0x5c>)
 8009104:	62a3      	str	r3, [r4, #40]	; 0x28
 8009106:	4b0d      	ldr	r3, [pc, #52]	; (800913c <std+0x60>)
 8009108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800910a:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <std+0x64>)
 800910c:	6323      	str	r3, [r4, #48]	; 0x30
 800910e:	4b0d      	ldr	r3, [pc, #52]	; (8009144 <std+0x68>)
 8009110:	6224      	str	r4, [r4, #32]
 8009112:	429c      	cmp	r4, r3
 8009114:	d006      	beq.n	8009124 <std+0x48>
 8009116:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800911a:	4294      	cmp	r4, r2
 800911c:	d002      	beq.n	8009124 <std+0x48>
 800911e:	33d0      	adds	r3, #208	; 0xd0
 8009120:	429c      	cmp	r4, r3
 8009122:	d105      	bne.n	8009130 <std+0x54>
 8009124:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912c:	f000 b9bc 	b.w	80094a8 <__retarget_lock_init_recursive>
 8009130:	bd10      	pop	{r4, pc}
 8009132:	bf00      	nop
 8009134:	08009309 	.word	0x08009309
 8009138:	0800932b 	.word	0x0800932b
 800913c:	08009363 	.word	0x08009363
 8009140:	08009387 	.word	0x08009387
 8009144:	200008d0 	.word	0x200008d0

08009148 <stdio_exit_handler>:
 8009148:	4a02      	ldr	r2, [pc, #8]	; (8009154 <stdio_exit_handler+0xc>)
 800914a:	4903      	ldr	r1, [pc, #12]	; (8009158 <stdio_exit_handler+0x10>)
 800914c:	4803      	ldr	r0, [pc, #12]	; (800915c <stdio_exit_handler+0x14>)
 800914e:	f000 b869 	b.w	8009224 <_fwalk_sglue>
 8009152:	bf00      	nop
 8009154:	2000000c 	.word	0x2000000c
 8009158:	0800bc91 	.word	0x0800bc91
 800915c:	20000018 	.word	0x20000018

08009160 <cleanup_stdio>:
 8009160:	6841      	ldr	r1, [r0, #4]
 8009162:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <cleanup_stdio+0x34>)
 8009164:	4299      	cmp	r1, r3
 8009166:	b510      	push	{r4, lr}
 8009168:	4604      	mov	r4, r0
 800916a:	d001      	beq.n	8009170 <cleanup_stdio+0x10>
 800916c:	f002 fd90 	bl	800bc90 <_fflush_r>
 8009170:	68a1      	ldr	r1, [r4, #8]
 8009172:	4b09      	ldr	r3, [pc, #36]	; (8009198 <cleanup_stdio+0x38>)
 8009174:	4299      	cmp	r1, r3
 8009176:	d002      	beq.n	800917e <cleanup_stdio+0x1e>
 8009178:	4620      	mov	r0, r4
 800917a:	f002 fd89 	bl	800bc90 <_fflush_r>
 800917e:	68e1      	ldr	r1, [r4, #12]
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <cleanup_stdio+0x3c>)
 8009182:	4299      	cmp	r1, r3
 8009184:	d004      	beq.n	8009190 <cleanup_stdio+0x30>
 8009186:	4620      	mov	r0, r4
 8009188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800918c:	f002 bd80 	b.w	800bc90 <_fflush_r>
 8009190:	bd10      	pop	{r4, pc}
 8009192:	bf00      	nop
 8009194:	200008d0 	.word	0x200008d0
 8009198:	20000938 	.word	0x20000938
 800919c:	200009a0 	.word	0x200009a0

080091a0 <global_stdio_init.part.0>:
 80091a0:	b510      	push	{r4, lr}
 80091a2:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <global_stdio_init.part.0+0x30>)
 80091a4:	4c0b      	ldr	r4, [pc, #44]	; (80091d4 <global_stdio_init.part.0+0x34>)
 80091a6:	4a0c      	ldr	r2, [pc, #48]	; (80091d8 <global_stdio_init.part.0+0x38>)
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	4620      	mov	r0, r4
 80091ac:	2200      	movs	r2, #0
 80091ae:	2104      	movs	r1, #4
 80091b0:	f7ff ff94 	bl	80090dc <std>
 80091b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80091b8:	2201      	movs	r2, #1
 80091ba:	2109      	movs	r1, #9
 80091bc:	f7ff ff8e 	bl	80090dc <std>
 80091c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80091c4:	2202      	movs	r2, #2
 80091c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ca:	2112      	movs	r1, #18
 80091cc:	f7ff bf86 	b.w	80090dc <std>
 80091d0:	20000a08 	.word	0x20000a08
 80091d4:	200008d0 	.word	0x200008d0
 80091d8:	08009149 	.word	0x08009149

080091dc <__sfp_lock_acquire>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__sfp_lock_acquire+0x8>)
 80091de:	f000 b964 	b.w	80094aa <__retarget_lock_acquire_recursive>
 80091e2:	bf00      	nop
 80091e4:	20000a11 	.word	0x20000a11

080091e8 <__sfp_lock_release>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__sfp_lock_release+0x8>)
 80091ea:	f000 b95f 	b.w	80094ac <__retarget_lock_release_recursive>
 80091ee:	bf00      	nop
 80091f0:	20000a11 	.word	0x20000a11

080091f4 <__sinit>:
 80091f4:	b510      	push	{r4, lr}
 80091f6:	4604      	mov	r4, r0
 80091f8:	f7ff fff0 	bl	80091dc <__sfp_lock_acquire>
 80091fc:	6a23      	ldr	r3, [r4, #32]
 80091fe:	b11b      	cbz	r3, 8009208 <__sinit+0x14>
 8009200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009204:	f7ff bff0 	b.w	80091e8 <__sfp_lock_release>
 8009208:	4b04      	ldr	r3, [pc, #16]	; (800921c <__sinit+0x28>)
 800920a:	6223      	str	r3, [r4, #32]
 800920c:	4b04      	ldr	r3, [pc, #16]	; (8009220 <__sinit+0x2c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1f5      	bne.n	8009200 <__sinit+0xc>
 8009214:	f7ff ffc4 	bl	80091a0 <global_stdio_init.part.0>
 8009218:	e7f2      	b.n	8009200 <__sinit+0xc>
 800921a:	bf00      	nop
 800921c:	08009161 	.word	0x08009161
 8009220:	20000a08 	.word	0x20000a08

08009224 <_fwalk_sglue>:
 8009224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009228:	4607      	mov	r7, r0
 800922a:	4688      	mov	r8, r1
 800922c:	4614      	mov	r4, r2
 800922e:	2600      	movs	r6, #0
 8009230:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009234:	f1b9 0901 	subs.w	r9, r9, #1
 8009238:	d505      	bpl.n	8009246 <_fwalk_sglue+0x22>
 800923a:	6824      	ldr	r4, [r4, #0]
 800923c:	2c00      	cmp	r4, #0
 800923e:	d1f7      	bne.n	8009230 <_fwalk_sglue+0xc>
 8009240:	4630      	mov	r0, r6
 8009242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d907      	bls.n	800925c <_fwalk_sglue+0x38>
 800924c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009250:	3301      	adds	r3, #1
 8009252:	d003      	beq.n	800925c <_fwalk_sglue+0x38>
 8009254:	4629      	mov	r1, r5
 8009256:	4638      	mov	r0, r7
 8009258:	47c0      	blx	r8
 800925a:	4306      	orrs	r6, r0
 800925c:	3568      	adds	r5, #104	; 0x68
 800925e:	e7e9      	b.n	8009234 <_fwalk_sglue+0x10>

08009260 <sniprintf>:
 8009260:	b40c      	push	{r2, r3}
 8009262:	b530      	push	{r4, r5, lr}
 8009264:	4b17      	ldr	r3, [pc, #92]	; (80092c4 <sniprintf+0x64>)
 8009266:	1e0c      	subs	r4, r1, #0
 8009268:	681d      	ldr	r5, [r3, #0]
 800926a:	b09d      	sub	sp, #116	; 0x74
 800926c:	da08      	bge.n	8009280 <sniprintf+0x20>
 800926e:	238b      	movs	r3, #139	; 0x8b
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	f04f 30ff 	mov.w	r0, #4294967295
 8009276:	b01d      	add	sp, #116	; 0x74
 8009278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800927c:	b002      	add	sp, #8
 800927e:	4770      	bx	lr
 8009280:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009284:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009288:	bf14      	ite	ne
 800928a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800928e:	4623      	moveq	r3, r4
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	9307      	str	r3, [sp, #28]
 8009294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009298:	9002      	str	r0, [sp, #8]
 800929a:	9006      	str	r0, [sp, #24]
 800929c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092a2:	ab21      	add	r3, sp, #132	; 0x84
 80092a4:	a902      	add	r1, sp, #8
 80092a6:	4628      	mov	r0, r5
 80092a8:	9301      	str	r3, [sp, #4]
 80092aa:	f002 fb6d 	bl	800b988 <_svfiprintf_r>
 80092ae:	1c43      	adds	r3, r0, #1
 80092b0:	bfbc      	itt	lt
 80092b2:	238b      	movlt	r3, #139	; 0x8b
 80092b4:	602b      	strlt	r3, [r5, #0]
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	d0dd      	beq.n	8009276 <sniprintf+0x16>
 80092ba:	9b02      	ldr	r3, [sp, #8]
 80092bc:	2200      	movs	r2, #0
 80092be:	701a      	strb	r2, [r3, #0]
 80092c0:	e7d9      	b.n	8009276 <sniprintf+0x16>
 80092c2:	bf00      	nop
 80092c4:	20000064 	.word	0x20000064

080092c8 <siprintf>:
 80092c8:	b40e      	push	{r1, r2, r3}
 80092ca:	b500      	push	{lr}
 80092cc:	b09c      	sub	sp, #112	; 0x70
 80092ce:	ab1d      	add	r3, sp, #116	; 0x74
 80092d0:	9002      	str	r0, [sp, #8]
 80092d2:	9006      	str	r0, [sp, #24]
 80092d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092d8:	4809      	ldr	r0, [pc, #36]	; (8009300 <siprintf+0x38>)
 80092da:	9107      	str	r1, [sp, #28]
 80092dc:	9104      	str	r1, [sp, #16]
 80092de:	4909      	ldr	r1, [pc, #36]	; (8009304 <siprintf+0x3c>)
 80092e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e4:	9105      	str	r1, [sp, #20]
 80092e6:	6800      	ldr	r0, [r0, #0]
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	a902      	add	r1, sp, #8
 80092ec:	f002 fb4c 	bl	800b988 <_svfiprintf_r>
 80092f0:	9b02      	ldr	r3, [sp, #8]
 80092f2:	2200      	movs	r2, #0
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	b01c      	add	sp, #112	; 0x70
 80092f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092fc:	b003      	add	sp, #12
 80092fe:	4770      	bx	lr
 8009300:	20000064 	.word	0x20000064
 8009304:	ffff0208 	.word	0xffff0208

08009308 <__sread>:
 8009308:	b510      	push	{r4, lr}
 800930a:	460c      	mov	r4, r1
 800930c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009310:	f000 f86c 	bl	80093ec <_read_r>
 8009314:	2800      	cmp	r0, #0
 8009316:	bfab      	itete	ge
 8009318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800931a:	89a3      	ldrhlt	r3, [r4, #12]
 800931c:	181b      	addge	r3, r3, r0
 800931e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009322:	bfac      	ite	ge
 8009324:	6563      	strge	r3, [r4, #84]	; 0x54
 8009326:	81a3      	strhlt	r3, [r4, #12]
 8009328:	bd10      	pop	{r4, pc}

0800932a <__swrite>:
 800932a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932e:	461f      	mov	r7, r3
 8009330:	898b      	ldrh	r3, [r1, #12]
 8009332:	05db      	lsls	r3, r3, #23
 8009334:	4605      	mov	r5, r0
 8009336:	460c      	mov	r4, r1
 8009338:	4616      	mov	r6, r2
 800933a:	d505      	bpl.n	8009348 <__swrite+0x1e>
 800933c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009340:	2302      	movs	r3, #2
 8009342:	2200      	movs	r2, #0
 8009344:	f000 f840 	bl	80093c8 <_lseek_r>
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800934e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009352:	81a3      	strh	r3, [r4, #12]
 8009354:	4632      	mov	r2, r6
 8009356:	463b      	mov	r3, r7
 8009358:	4628      	mov	r0, r5
 800935a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800935e:	f000 b867 	b.w	8009430 <_write_r>

08009362 <__sseek>:
 8009362:	b510      	push	{r4, lr}
 8009364:	460c      	mov	r4, r1
 8009366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936a:	f000 f82d 	bl	80093c8 <_lseek_r>
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	bf15      	itete	ne
 8009374:	6560      	strne	r0, [r4, #84]	; 0x54
 8009376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800937a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800937e:	81a3      	strheq	r3, [r4, #12]
 8009380:	bf18      	it	ne
 8009382:	81a3      	strhne	r3, [r4, #12]
 8009384:	bd10      	pop	{r4, pc}

08009386 <__sclose>:
 8009386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938a:	f000 b80d 	b.w	80093a8 <_close_r>

0800938e <memset>:
 800938e:	4402      	add	r2, r0
 8009390:	4603      	mov	r3, r0
 8009392:	4293      	cmp	r3, r2
 8009394:	d100      	bne.n	8009398 <memset+0xa>
 8009396:	4770      	bx	lr
 8009398:	f803 1b01 	strb.w	r1, [r3], #1
 800939c:	e7f9      	b.n	8009392 <memset+0x4>
	...

080093a0 <_localeconv_r>:
 80093a0:	4800      	ldr	r0, [pc, #0]	; (80093a4 <_localeconv_r+0x4>)
 80093a2:	4770      	bx	lr
 80093a4:	20000158 	.word	0x20000158

080093a8 <_close_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4d06      	ldr	r5, [pc, #24]	; (80093c4 <_close_r+0x1c>)
 80093ac:	2300      	movs	r3, #0
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	f7fa fc27 	bl	8003c06 <_close>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_close_r+0x1a>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_close_r+0x1a>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	20000a0c 	.word	0x20000a0c

080093c8 <_lseek_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4d07      	ldr	r5, [pc, #28]	; (80093e8 <_lseek_r+0x20>)
 80093cc:	4604      	mov	r4, r0
 80093ce:	4608      	mov	r0, r1
 80093d0:	4611      	mov	r1, r2
 80093d2:	2200      	movs	r2, #0
 80093d4:	602a      	str	r2, [r5, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	f7fa fc3c 	bl	8003c54 <_lseek>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d102      	bne.n	80093e6 <_lseek_r+0x1e>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b103      	cbz	r3, 80093e6 <_lseek_r+0x1e>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	20000a0c 	.word	0x20000a0c

080093ec <_read_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4d07      	ldr	r5, [pc, #28]	; (800940c <_read_r+0x20>)
 80093f0:	4604      	mov	r4, r0
 80093f2:	4608      	mov	r0, r1
 80093f4:	4611      	mov	r1, r2
 80093f6:	2200      	movs	r2, #0
 80093f8:	602a      	str	r2, [r5, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	f7fa fbca 	bl	8003b94 <_read>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	d102      	bne.n	800940a <_read_r+0x1e>
 8009404:	682b      	ldr	r3, [r5, #0]
 8009406:	b103      	cbz	r3, 800940a <_read_r+0x1e>
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	bd38      	pop	{r3, r4, r5, pc}
 800940c:	20000a0c 	.word	0x20000a0c

08009410 <_sbrk_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d06      	ldr	r5, [pc, #24]	; (800942c <_sbrk_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7fa fc28 	bl	8003c70 <_sbrk>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_sbrk_r+0x1a>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_sbrk_r+0x1a>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000a0c 	.word	0x20000a0c

08009430 <_write_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4d07      	ldr	r5, [pc, #28]	; (8009450 <_write_r+0x20>)
 8009434:	4604      	mov	r4, r0
 8009436:	4608      	mov	r0, r1
 8009438:	4611      	mov	r1, r2
 800943a:	2200      	movs	r2, #0
 800943c:	602a      	str	r2, [r5, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	f7fa fbc5 	bl	8003bce <_write>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d102      	bne.n	800944e <_write_r+0x1e>
 8009448:	682b      	ldr	r3, [r5, #0]
 800944a:	b103      	cbz	r3, 800944e <_write_r+0x1e>
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	20000a0c 	.word	0x20000a0c

08009454 <__errno>:
 8009454:	4b01      	ldr	r3, [pc, #4]	; (800945c <__errno+0x8>)
 8009456:	6818      	ldr	r0, [r3, #0]
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	20000064 	.word	0x20000064

08009460 <__libc_init_array>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	4d0d      	ldr	r5, [pc, #52]	; (8009498 <__libc_init_array+0x38>)
 8009464:	4c0d      	ldr	r4, [pc, #52]	; (800949c <__libc_init_array+0x3c>)
 8009466:	1b64      	subs	r4, r4, r5
 8009468:	10a4      	asrs	r4, r4, #2
 800946a:	2600      	movs	r6, #0
 800946c:	42a6      	cmp	r6, r4
 800946e:	d109      	bne.n	8009484 <__libc_init_array+0x24>
 8009470:	4d0b      	ldr	r5, [pc, #44]	; (80094a0 <__libc_init_array+0x40>)
 8009472:	4c0c      	ldr	r4, [pc, #48]	; (80094a4 <__libc_init_array+0x44>)
 8009474:	f005 f90c 	bl	800e690 <_init>
 8009478:	1b64      	subs	r4, r4, r5
 800947a:	10a4      	asrs	r4, r4, #2
 800947c:	2600      	movs	r6, #0
 800947e:	42a6      	cmp	r6, r4
 8009480:	d105      	bne.n	800948e <__libc_init_array+0x2e>
 8009482:	bd70      	pop	{r4, r5, r6, pc}
 8009484:	f855 3b04 	ldr.w	r3, [r5], #4
 8009488:	4798      	blx	r3
 800948a:	3601      	adds	r6, #1
 800948c:	e7ee      	b.n	800946c <__libc_init_array+0xc>
 800948e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009492:	4798      	blx	r3
 8009494:	3601      	adds	r6, #1
 8009496:	e7f2      	b.n	800947e <__libc_init_array+0x1e>
 8009498:	0800f7c8 	.word	0x0800f7c8
 800949c:	0800f7c8 	.word	0x0800f7c8
 80094a0:	0800f7c8 	.word	0x0800f7c8
 80094a4:	0800f7cc 	.word	0x0800f7cc

080094a8 <__retarget_lock_init_recursive>:
 80094a8:	4770      	bx	lr

080094aa <__retarget_lock_acquire_recursive>:
 80094aa:	4770      	bx	lr

080094ac <__retarget_lock_release_recursive>:
 80094ac:	4770      	bx	lr
	...

080094b0 <nanf>:
 80094b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80094b8 <nanf+0x8>
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	7fc00000 	.word	0x7fc00000

080094bc <quorem>:
 80094bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c0:	6903      	ldr	r3, [r0, #16]
 80094c2:	690c      	ldr	r4, [r1, #16]
 80094c4:	42a3      	cmp	r3, r4
 80094c6:	4607      	mov	r7, r0
 80094c8:	db7e      	blt.n	80095c8 <quorem+0x10c>
 80094ca:	3c01      	subs	r4, #1
 80094cc:	f101 0814 	add.w	r8, r1, #20
 80094d0:	f100 0514 	add.w	r5, r0, #20
 80094d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094d8:	9301      	str	r3, [sp, #4]
 80094da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094e2:	3301      	adds	r3, #1
 80094e4:	429a      	cmp	r2, r3
 80094e6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80094f2:	d331      	bcc.n	8009558 <quorem+0x9c>
 80094f4:	f04f 0e00 	mov.w	lr, #0
 80094f8:	4640      	mov	r0, r8
 80094fa:	46ac      	mov	ip, r5
 80094fc:	46f2      	mov	sl, lr
 80094fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8009502:	b293      	uxth	r3, r2
 8009504:	fb06 e303 	mla	r3, r6, r3, lr
 8009508:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800950c:	0c1a      	lsrs	r2, r3, #16
 800950e:	b29b      	uxth	r3, r3
 8009510:	ebaa 0303 	sub.w	r3, sl, r3
 8009514:	f8dc a000 	ldr.w	sl, [ip]
 8009518:	fa13 f38a 	uxtah	r3, r3, sl
 800951c:	fb06 220e 	mla	r2, r6, lr, r2
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	9b00      	ldr	r3, [sp, #0]
 8009524:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009528:	b292      	uxth	r2, r2
 800952a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800952e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009532:	f8bd 3000 	ldrh.w	r3, [sp]
 8009536:	4581      	cmp	r9, r0
 8009538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800953c:	f84c 3b04 	str.w	r3, [ip], #4
 8009540:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009544:	d2db      	bcs.n	80094fe <quorem+0x42>
 8009546:	f855 300b 	ldr.w	r3, [r5, fp]
 800954a:	b92b      	cbnz	r3, 8009558 <quorem+0x9c>
 800954c:	9b01      	ldr	r3, [sp, #4]
 800954e:	3b04      	subs	r3, #4
 8009550:	429d      	cmp	r5, r3
 8009552:	461a      	mov	r2, r3
 8009554:	d32c      	bcc.n	80095b0 <quorem+0xf4>
 8009556:	613c      	str	r4, [r7, #16]
 8009558:	4638      	mov	r0, r7
 800955a:	f001 f93d 	bl	800a7d8 <__mcmp>
 800955e:	2800      	cmp	r0, #0
 8009560:	db22      	blt.n	80095a8 <quorem+0xec>
 8009562:	3601      	adds	r6, #1
 8009564:	4629      	mov	r1, r5
 8009566:	2000      	movs	r0, #0
 8009568:	f858 2b04 	ldr.w	r2, [r8], #4
 800956c:	f8d1 c000 	ldr.w	ip, [r1]
 8009570:	b293      	uxth	r3, r2
 8009572:	1ac3      	subs	r3, r0, r3
 8009574:	0c12      	lsrs	r2, r2, #16
 8009576:	fa13 f38c 	uxtah	r3, r3, ip
 800957a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800957e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009582:	b29b      	uxth	r3, r3
 8009584:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009588:	45c1      	cmp	r9, r8
 800958a:	f841 3b04 	str.w	r3, [r1], #4
 800958e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009592:	d2e9      	bcs.n	8009568 <quorem+0xac>
 8009594:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009598:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800959c:	b922      	cbnz	r2, 80095a8 <quorem+0xec>
 800959e:	3b04      	subs	r3, #4
 80095a0:	429d      	cmp	r5, r3
 80095a2:	461a      	mov	r2, r3
 80095a4:	d30a      	bcc.n	80095bc <quorem+0x100>
 80095a6:	613c      	str	r4, [r7, #16]
 80095a8:	4630      	mov	r0, r6
 80095aa:	b003      	add	sp, #12
 80095ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b0:	6812      	ldr	r2, [r2, #0]
 80095b2:	3b04      	subs	r3, #4
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	d1ce      	bne.n	8009556 <quorem+0x9a>
 80095b8:	3c01      	subs	r4, #1
 80095ba:	e7c9      	b.n	8009550 <quorem+0x94>
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	3b04      	subs	r3, #4
 80095c0:	2a00      	cmp	r2, #0
 80095c2:	d1f0      	bne.n	80095a6 <quorem+0xea>
 80095c4:	3c01      	subs	r4, #1
 80095c6:	e7eb      	b.n	80095a0 <quorem+0xe4>
 80095c8:	2000      	movs	r0, #0
 80095ca:	e7ee      	b.n	80095aa <quorem+0xee>
 80095cc:	0000      	movs	r0, r0
	...

080095d0 <_dtoa_r>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	ed2d 8b04 	vpush	{d8-d9}
 80095d8:	69c5      	ldr	r5, [r0, #28]
 80095da:	b093      	sub	sp, #76	; 0x4c
 80095dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80095e0:	ec57 6b10 	vmov	r6, r7, d0
 80095e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095e8:	9107      	str	r1, [sp, #28]
 80095ea:	4604      	mov	r4, r0
 80095ec:	920a      	str	r2, [sp, #40]	; 0x28
 80095ee:	930d      	str	r3, [sp, #52]	; 0x34
 80095f0:	b975      	cbnz	r5, 8009610 <_dtoa_r+0x40>
 80095f2:	2010      	movs	r0, #16
 80095f4:	f7fe fe40 	bl	8008278 <malloc>
 80095f8:	4602      	mov	r2, r0
 80095fa:	61e0      	str	r0, [r4, #28]
 80095fc:	b920      	cbnz	r0, 8009608 <_dtoa_r+0x38>
 80095fe:	4bae      	ldr	r3, [pc, #696]	; (80098b8 <_dtoa_r+0x2e8>)
 8009600:	21ef      	movs	r1, #239	; 0xef
 8009602:	48ae      	ldr	r0, [pc, #696]	; (80098bc <_dtoa_r+0x2ec>)
 8009604:	f002 fbb0 	bl	800bd68 <__assert_func>
 8009608:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800960c:	6005      	str	r5, [r0, #0]
 800960e:	60c5      	str	r5, [r0, #12]
 8009610:	69e3      	ldr	r3, [r4, #28]
 8009612:	6819      	ldr	r1, [r3, #0]
 8009614:	b151      	cbz	r1, 800962c <_dtoa_r+0x5c>
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	604a      	str	r2, [r1, #4]
 800961a:	2301      	movs	r3, #1
 800961c:	4093      	lsls	r3, r2
 800961e:	608b      	str	r3, [r1, #8]
 8009620:	4620      	mov	r0, r4
 8009622:	f000 fe53 	bl	800a2cc <_Bfree>
 8009626:	69e3      	ldr	r3, [r4, #28]
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	1e3b      	subs	r3, r7, #0
 800962e:	bfbb      	ittet	lt
 8009630:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009634:	9303      	strlt	r3, [sp, #12]
 8009636:	2300      	movge	r3, #0
 8009638:	2201      	movlt	r2, #1
 800963a:	bfac      	ite	ge
 800963c:	f8c8 3000 	strge.w	r3, [r8]
 8009640:	f8c8 2000 	strlt.w	r2, [r8]
 8009644:	4b9e      	ldr	r3, [pc, #632]	; (80098c0 <_dtoa_r+0x2f0>)
 8009646:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800964a:	ea33 0308 	bics.w	r3, r3, r8
 800964e:	d11b      	bne.n	8009688 <_dtoa_r+0xb8>
 8009650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009652:	f242 730f 	movw	r3, #9999	; 0x270f
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800965c:	4333      	orrs	r3, r6
 800965e:	f000 8593 	beq.w	800a188 <_dtoa_r+0xbb8>
 8009662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009664:	b963      	cbnz	r3, 8009680 <_dtoa_r+0xb0>
 8009666:	4b97      	ldr	r3, [pc, #604]	; (80098c4 <_dtoa_r+0x2f4>)
 8009668:	e027      	b.n	80096ba <_dtoa_r+0xea>
 800966a:	4b97      	ldr	r3, [pc, #604]	; (80098c8 <_dtoa_r+0x2f8>)
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	9800      	ldr	r0, [sp, #0]
 8009676:	b013      	add	sp, #76	; 0x4c
 8009678:	ecbd 8b04 	vpop	{d8-d9}
 800967c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009680:	4b90      	ldr	r3, [pc, #576]	; (80098c4 <_dtoa_r+0x2f4>)
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	3303      	adds	r3, #3
 8009686:	e7f3      	b.n	8009670 <_dtoa_r+0xa0>
 8009688:	ed9d 7b02 	vldr	d7, [sp, #8]
 800968c:	2200      	movs	r2, #0
 800968e:	ec51 0b17 	vmov	r0, r1, d7
 8009692:	eeb0 8a47 	vmov.f32	s16, s14
 8009696:	eef0 8a67 	vmov.f32	s17, s15
 800969a:	2300      	movs	r3, #0
 800969c:	f7f7 fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 80096a0:	4681      	mov	r9, r0
 80096a2:	b160      	cbz	r0, 80096be <_dtoa_r+0xee>
 80096a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096a6:	2301      	movs	r3, #1
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8568 	beq.w	800a182 <_dtoa_r+0xbb2>
 80096b2:	4b86      	ldr	r3, [pc, #536]	; (80098cc <_dtoa_r+0x2fc>)
 80096b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	e7da      	b.n	8009674 <_dtoa_r+0xa4>
 80096be:	aa10      	add	r2, sp, #64	; 0x40
 80096c0:	a911      	add	r1, sp, #68	; 0x44
 80096c2:	4620      	mov	r0, r4
 80096c4:	eeb0 0a48 	vmov.f32	s0, s16
 80096c8:	eef0 0a68 	vmov.f32	s1, s17
 80096cc:	f001 f99a 	bl	800aa04 <__d2b>
 80096d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80096d4:	4682      	mov	sl, r0
 80096d6:	2d00      	cmp	r5, #0
 80096d8:	d07f      	beq.n	80097da <_dtoa_r+0x20a>
 80096da:	ee18 3a90 	vmov	r3, s17
 80096de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80096e6:	ec51 0b18 	vmov	r0, r1, d8
 80096ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80096ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80096f6:	4619      	mov	r1, r3
 80096f8:	2200      	movs	r2, #0
 80096fa:	4b75      	ldr	r3, [pc, #468]	; (80098d0 <_dtoa_r+0x300>)
 80096fc:	f7f6 fdc4 	bl	8000288 <__aeabi_dsub>
 8009700:	a367      	add	r3, pc, #412	; (adr r3, 80098a0 <_dtoa_r+0x2d0>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 ff77 	bl	80005f8 <__aeabi_dmul>
 800970a:	a367      	add	r3, pc, #412	; (adr r3, 80098a8 <_dtoa_r+0x2d8>)
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	f7f6 fdbc 	bl	800028c <__adddf3>
 8009714:	4606      	mov	r6, r0
 8009716:	4628      	mov	r0, r5
 8009718:	460f      	mov	r7, r1
 800971a:	f7f6 ff03 	bl	8000524 <__aeabi_i2d>
 800971e:	a364      	add	r3, pc, #400	; (adr r3, 80098b0 <_dtoa_r+0x2e0>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f7f6 ff68 	bl	80005f8 <__aeabi_dmul>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4630      	mov	r0, r6
 800972e:	4639      	mov	r1, r7
 8009730:	f7f6 fdac 	bl	800028c <__adddf3>
 8009734:	4606      	mov	r6, r0
 8009736:	460f      	mov	r7, r1
 8009738:	f7f7 fa0e 	bl	8000b58 <__aeabi_d2iz>
 800973c:	2200      	movs	r2, #0
 800973e:	4683      	mov	fp, r0
 8009740:	2300      	movs	r3, #0
 8009742:	4630      	mov	r0, r6
 8009744:	4639      	mov	r1, r7
 8009746:	f7f7 f9c9 	bl	8000adc <__aeabi_dcmplt>
 800974a:	b148      	cbz	r0, 8009760 <_dtoa_r+0x190>
 800974c:	4658      	mov	r0, fp
 800974e:	f7f6 fee9 	bl	8000524 <__aeabi_i2d>
 8009752:	4632      	mov	r2, r6
 8009754:	463b      	mov	r3, r7
 8009756:	f7f7 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800975a:	b908      	cbnz	r0, 8009760 <_dtoa_r+0x190>
 800975c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009760:	f1bb 0f16 	cmp.w	fp, #22
 8009764:	d857      	bhi.n	8009816 <_dtoa_r+0x246>
 8009766:	4b5b      	ldr	r3, [pc, #364]	; (80098d4 <_dtoa_r+0x304>)
 8009768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	ec51 0b18 	vmov	r0, r1, d8
 8009774:	f7f7 f9b2 	bl	8000adc <__aeabi_dcmplt>
 8009778:	2800      	cmp	r0, #0
 800977a:	d04e      	beq.n	800981a <_dtoa_r+0x24a>
 800977c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009780:	2300      	movs	r3, #0
 8009782:	930c      	str	r3, [sp, #48]	; 0x30
 8009784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009786:	1b5b      	subs	r3, r3, r5
 8009788:	1e5a      	subs	r2, r3, #1
 800978a:	bf45      	ittet	mi
 800978c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009790:	9305      	strmi	r3, [sp, #20]
 8009792:	2300      	movpl	r3, #0
 8009794:	2300      	movmi	r3, #0
 8009796:	9206      	str	r2, [sp, #24]
 8009798:	bf54      	ite	pl
 800979a:	9305      	strpl	r3, [sp, #20]
 800979c:	9306      	strmi	r3, [sp, #24]
 800979e:	f1bb 0f00 	cmp.w	fp, #0
 80097a2:	db3c      	blt.n	800981e <_dtoa_r+0x24e>
 80097a4:	9b06      	ldr	r3, [sp, #24]
 80097a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80097aa:	445b      	add	r3, fp
 80097ac:	9306      	str	r3, [sp, #24]
 80097ae:	2300      	movs	r3, #0
 80097b0:	9308      	str	r3, [sp, #32]
 80097b2:	9b07      	ldr	r3, [sp, #28]
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d868      	bhi.n	800988a <_dtoa_r+0x2ba>
 80097b8:	2b05      	cmp	r3, #5
 80097ba:	bfc4      	itt	gt
 80097bc:	3b04      	subgt	r3, #4
 80097be:	9307      	strgt	r3, [sp, #28]
 80097c0:	9b07      	ldr	r3, [sp, #28]
 80097c2:	f1a3 0302 	sub.w	r3, r3, #2
 80097c6:	bfcc      	ite	gt
 80097c8:	2500      	movgt	r5, #0
 80097ca:	2501      	movle	r5, #1
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	f200 8085 	bhi.w	80098dc <_dtoa_r+0x30c>
 80097d2:	e8df f003 	tbb	[pc, r3]
 80097d6:	3b2e      	.short	0x3b2e
 80097d8:	5839      	.short	0x5839
 80097da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80097de:	441d      	add	r5, r3
 80097e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	bfc1      	itttt	gt
 80097e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80097f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80097f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80097f8:	bfd6      	itet	le
 80097fa:	f1c3 0320 	rsble	r3, r3, #32
 80097fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8009802:	fa06 f003 	lslle.w	r0, r6, r3
 8009806:	f7f6 fe7d 	bl	8000504 <__aeabi_ui2d>
 800980a:	2201      	movs	r2, #1
 800980c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009810:	3d01      	subs	r5, #1
 8009812:	920e      	str	r2, [sp, #56]	; 0x38
 8009814:	e76f      	b.n	80096f6 <_dtoa_r+0x126>
 8009816:	2301      	movs	r3, #1
 8009818:	e7b3      	b.n	8009782 <_dtoa_r+0x1b2>
 800981a:	900c      	str	r0, [sp, #48]	; 0x30
 800981c:	e7b2      	b.n	8009784 <_dtoa_r+0x1b4>
 800981e:	9b05      	ldr	r3, [sp, #20]
 8009820:	eba3 030b 	sub.w	r3, r3, fp
 8009824:	9305      	str	r3, [sp, #20]
 8009826:	f1cb 0300 	rsb	r3, fp, #0
 800982a:	9308      	str	r3, [sp, #32]
 800982c:	2300      	movs	r3, #0
 800982e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009830:	e7bf      	b.n	80097b2 <_dtoa_r+0x1e2>
 8009832:	2300      	movs	r3, #0
 8009834:	9309      	str	r3, [sp, #36]	; 0x24
 8009836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009838:	2b00      	cmp	r3, #0
 800983a:	dc52      	bgt.n	80098e2 <_dtoa_r+0x312>
 800983c:	2301      	movs	r3, #1
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	9304      	str	r3, [sp, #16]
 8009842:	461a      	mov	r2, r3
 8009844:	920a      	str	r2, [sp, #40]	; 0x28
 8009846:	e00b      	b.n	8009860 <_dtoa_r+0x290>
 8009848:	2301      	movs	r3, #1
 800984a:	e7f3      	b.n	8009834 <_dtoa_r+0x264>
 800984c:	2300      	movs	r3, #0
 800984e:	9309      	str	r3, [sp, #36]	; 0x24
 8009850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009852:	445b      	add	r3, fp
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	3301      	adds	r3, #1
 8009858:	2b01      	cmp	r3, #1
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	bfb8      	it	lt
 800985e:	2301      	movlt	r3, #1
 8009860:	69e0      	ldr	r0, [r4, #28]
 8009862:	2100      	movs	r1, #0
 8009864:	2204      	movs	r2, #4
 8009866:	f102 0614 	add.w	r6, r2, #20
 800986a:	429e      	cmp	r6, r3
 800986c:	d93d      	bls.n	80098ea <_dtoa_r+0x31a>
 800986e:	6041      	str	r1, [r0, #4]
 8009870:	4620      	mov	r0, r4
 8009872:	f000 fceb 	bl	800a24c <_Balloc>
 8009876:	9000      	str	r0, [sp, #0]
 8009878:	2800      	cmp	r0, #0
 800987a:	d139      	bne.n	80098f0 <_dtoa_r+0x320>
 800987c:	4b16      	ldr	r3, [pc, #88]	; (80098d8 <_dtoa_r+0x308>)
 800987e:	4602      	mov	r2, r0
 8009880:	f240 11af 	movw	r1, #431	; 0x1af
 8009884:	e6bd      	b.n	8009602 <_dtoa_r+0x32>
 8009886:	2301      	movs	r3, #1
 8009888:	e7e1      	b.n	800984e <_dtoa_r+0x27e>
 800988a:	2501      	movs	r5, #1
 800988c:	2300      	movs	r3, #0
 800988e:	9307      	str	r3, [sp, #28]
 8009890:	9509      	str	r5, [sp, #36]	; 0x24
 8009892:	f04f 33ff 	mov.w	r3, #4294967295
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	9304      	str	r3, [sp, #16]
 800989a:	2200      	movs	r2, #0
 800989c:	2312      	movs	r3, #18
 800989e:	e7d1      	b.n	8009844 <_dtoa_r+0x274>
 80098a0:	636f4361 	.word	0x636f4361
 80098a4:	3fd287a7 	.word	0x3fd287a7
 80098a8:	8b60c8b3 	.word	0x8b60c8b3
 80098ac:	3fc68a28 	.word	0x3fc68a28
 80098b0:	509f79fb 	.word	0x509f79fb
 80098b4:	3fd34413 	.word	0x3fd34413
 80098b8:	0800f196 	.word	0x0800f196
 80098bc:	0800f1ad 	.word	0x0800f1ad
 80098c0:	7ff00000 	.word	0x7ff00000
 80098c4:	0800f192 	.word	0x0800f192
 80098c8:	0800f189 	.word	0x0800f189
 80098cc:	0800f161 	.word	0x0800f161
 80098d0:	3ff80000 	.word	0x3ff80000
 80098d4:	0800f298 	.word	0x0800f298
 80098d8:	0800f205 	.word	0x0800f205
 80098dc:	2301      	movs	r3, #1
 80098de:	9309      	str	r3, [sp, #36]	; 0x24
 80098e0:	e7d7      	b.n	8009892 <_dtoa_r+0x2c2>
 80098e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	9304      	str	r3, [sp, #16]
 80098e8:	e7ba      	b.n	8009860 <_dtoa_r+0x290>
 80098ea:	3101      	adds	r1, #1
 80098ec:	0052      	lsls	r2, r2, #1
 80098ee:	e7ba      	b.n	8009866 <_dtoa_r+0x296>
 80098f0:	69e3      	ldr	r3, [r4, #28]
 80098f2:	9a00      	ldr	r2, [sp, #0]
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	9b04      	ldr	r3, [sp, #16]
 80098f8:	2b0e      	cmp	r3, #14
 80098fa:	f200 80a8 	bhi.w	8009a4e <_dtoa_r+0x47e>
 80098fe:	2d00      	cmp	r5, #0
 8009900:	f000 80a5 	beq.w	8009a4e <_dtoa_r+0x47e>
 8009904:	f1bb 0f00 	cmp.w	fp, #0
 8009908:	dd38      	ble.n	800997c <_dtoa_r+0x3ac>
 800990a:	4bc0      	ldr	r3, [pc, #768]	; (8009c0c <_dtoa_r+0x63c>)
 800990c:	f00b 020f 	and.w	r2, fp, #15
 8009910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009914:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009918:	e9d3 6700 	ldrd	r6, r7, [r3]
 800991c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009920:	d019      	beq.n	8009956 <_dtoa_r+0x386>
 8009922:	4bbb      	ldr	r3, [pc, #748]	; (8009c10 <_dtoa_r+0x640>)
 8009924:	ec51 0b18 	vmov	r0, r1, d8
 8009928:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800992c:	f7f6 ff8e 	bl	800084c <__aeabi_ddiv>
 8009930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009934:	f008 080f 	and.w	r8, r8, #15
 8009938:	2503      	movs	r5, #3
 800993a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009c10 <_dtoa_r+0x640>
 800993e:	f1b8 0f00 	cmp.w	r8, #0
 8009942:	d10a      	bne.n	800995a <_dtoa_r+0x38a>
 8009944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009948:	4632      	mov	r2, r6
 800994a:	463b      	mov	r3, r7
 800994c:	f7f6 ff7e 	bl	800084c <__aeabi_ddiv>
 8009950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009954:	e02b      	b.n	80099ae <_dtoa_r+0x3de>
 8009956:	2502      	movs	r5, #2
 8009958:	e7ef      	b.n	800993a <_dtoa_r+0x36a>
 800995a:	f018 0f01 	tst.w	r8, #1
 800995e:	d008      	beq.n	8009972 <_dtoa_r+0x3a2>
 8009960:	4630      	mov	r0, r6
 8009962:	4639      	mov	r1, r7
 8009964:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009968:	f7f6 fe46 	bl	80005f8 <__aeabi_dmul>
 800996c:	3501      	adds	r5, #1
 800996e:	4606      	mov	r6, r0
 8009970:	460f      	mov	r7, r1
 8009972:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009976:	f109 0908 	add.w	r9, r9, #8
 800997a:	e7e0      	b.n	800993e <_dtoa_r+0x36e>
 800997c:	f000 809f 	beq.w	8009abe <_dtoa_r+0x4ee>
 8009980:	f1cb 0600 	rsb	r6, fp, #0
 8009984:	4ba1      	ldr	r3, [pc, #644]	; (8009c0c <_dtoa_r+0x63c>)
 8009986:	4fa2      	ldr	r7, [pc, #648]	; (8009c10 <_dtoa_r+0x640>)
 8009988:	f006 020f 	and.w	r2, r6, #15
 800998c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	ec51 0b18 	vmov	r0, r1, d8
 8009998:	f7f6 fe2e 	bl	80005f8 <__aeabi_dmul>
 800999c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099a0:	1136      	asrs	r6, r6, #4
 80099a2:	2300      	movs	r3, #0
 80099a4:	2502      	movs	r5, #2
 80099a6:	2e00      	cmp	r6, #0
 80099a8:	d17e      	bne.n	8009aa8 <_dtoa_r+0x4d8>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1d0      	bne.n	8009950 <_dtoa_r+0x380>
 80099ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 8084 	beq.w	8009ac2 <_dtoa_r+0x4f2>
 80099ba:	4b96      	ldr	r3, [pc, #600]	; (8009c14 <_dtoa_r+0x644>)
 80099bc:	2200      	movs	r2, #0
 80099be:	4640      	mov	r0, r8
 80099c0:	4649      	mov	r1, r9
 80099c2:	f7f7 f88b 	bl	8000adc <__aeabi_dcmplt>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d07b      	beq.n	8009ac2 <_dtoa_r+0x4f2>
 80099ca:	9b04      	ldr	r3, [sp, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d078      	beq.n	8009ac2 <_dtoa_r+0x4f2>
 80099d0:	9b01      	ldr	r3, [sp, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	dd39      	ble.n	8009a4a <_dtoa_r+0x47a>
 80099d6:	4b90      	ldr	r3, [pc, #576]	; (8009c18 <_dtoa_r+0x648>)
 80099d8:	2200      	movs	r2, #0
 80099da:	4640      	mov	r0, r8
 80099dc:	4649      	mov	r1, r9
 80099de:	f7f6 fe0b 	bl	80005f8 <__aeabi_dmul>
 80099e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099e6:	9e01      	ldr	r6, [sp, #4]
 80099e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80099ec:	3501      	adds	r5, #1
 80099ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099f2:	4628      	mov	r0, r5
 80099f4:	f7f6 fd96 	bl	8000524 <__aeabi_i2d>
 80099f8:	4642      	mov	r2, r8
 80099fa:	464b      	mov	r3, r9
 80099fc:	f7f6 fdfc 	bl	80005f8 <__aeabi_dmul>
 8009a00:	4b86      	ldr	r3, [pc, #536]	; (8009c1c <_dtoa_r+0x64c>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	f7f6 fc42 	bl	800028c <__adddf3>
 8009a08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a10:	9303      	str	r3, [sp, #12]
 8009a12:	2e00      	cmp	r6, #0
 8009a14:	d158      	bne.n	8009ac8 <_dtoa_r+0x4f8>
 8009a16:	4b82      	ldr	r3, [pc, #520]	; (8009c20 <_dtoa_r+0x650>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	f7f6 fc33 	bl	8000288 <__aeabi_dsub>
 8009a22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a26:	4680      	mov	r8, r0
 8009a28:	4689      	mov	r9, r1
 8009a2a:	f7f7 f875 	bl	8000b18 <__aeabi_dcmpgt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f040 8296 	bne.w	8009f60 <_dtoa_r+0x990>
 8009a34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009a38:	4640      	mov	r0, r8
 8009a3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a3e:	4649      	mov	r1, r9
 8009a40:	f7f7 f84c 	bl	8000adc <__aeabi_dcmplt>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	f040 8289 	bne.w	8009f5c <_dtoa_r+0x98c>
 8009a4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f2c0 814e 	blt.w	8009cf2 <_dtoa_r+0x722>
 8009a56:	f1bb 0f0e 	cmp.w	fp, #14
 8009a5a:	f300 814a 	bgt.w	8009cf2 <_dtoa_r+0x722>
 8009a5e:	4b6b      	ldr	r3, [pc, #428]	; (8009c0c <_dtoa_r+0x63c>)
 8009a60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f280 80dc 	bge.w	8009c28 <_dtoa_r+0x658>
 8009a70:	9b04      	ldr	r3, [sp, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f300 80d8 	bgt.w	8009c28 <_dtoa_r+0x658>
 8009a78:	f040 826f 	bne.w	8009f5a <_dtoa_r+0x98a>
 8009a7c:	4b68      	ldr	r3, [pc, #416]	; (8009c20 <_dtoa_r+0x650>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	4640      	mov	r0, r8
 8009a82:	4649      	mov	r1, r9
 8009a84:	f7f6 fdb8 	bl	80005f8 <__aeabi_dmul>
 8009a88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a8c:	f7f7 f83a 	bl	8000b04 <__aeabi_dcmpge>
 8009a90:	9e04      	ldr	r6, [sp, #16]
 8009a92:	4637      	mov	r7, r6
 8009a94:	2800      	cmp	r0, #0
 8009a96:	f040 8245 	bne.w	8009f24 <_dtoa_r+0x954>
 8009a9a:	9d00      	ldr	r5, [sp, #0]
 8009a9c:	2331      	movs	r3, #49	; 0x31
 8009a9e:	f805 3b01 	strb.w	r3, [r5], #1
 8009aa2:	f10b 0b01 	add.w	fp, fp, #1
 8009aa6:	e241      	b.n	8009f2c <_dtoa_r+0x95c>
 8009aa8:	07f2      	lsls	r2, r6, #31
 8009aaa:	d505      	bpl.n	8009ab8 <_dtoa_r+0x4e8>
 8009aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ab0:	f7f6 fda2 	bl	80005f8 <__aeabi_dmul>
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	1076      	asrs	r6, r6, #1
 8009aba:	3708      	adds	r7, #8
 8009abc:	e773      	b.n	80099a6 <_dtoa_r+0x3d6>
 8009abe:	2502      	movs	r5, #2
 8009ac0:	e775      	b.n	80099ae <_dtoa_r+0x3de>
 8009ac2:	9e04      	ldr	r6, [sp, #16]
 8009ac4:	465f      	mov	r7, fp
 8009ac6:	e792      	b.n	80099ee <_dtoa_r+0x41e>
 8009ac8:	9900      	ldr	r1, [sp, #0]
 8009aca:	4b50      	ldr	r3, [pc, #320]	; (8009c0c <_dtoa_r+0x63c>)
 8009acc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ad0:	4431      	add	r1, r6
 8009ad2:	9102      	str	r1, [sp, #8]
 8009ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ad6:	eeb0 9a47 	vmov.f32	s18, s14
 8009ada:	eef0 9a67 	vmov.f32	s19, s15
 8009ade:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ae2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ae6:	2900      	cmp	r1, #0
 8009ae8:	d044      	beq.n	8009b74 <_dtoa_r+0x5a4>
 8009aea:	494e      	ldr	r1, [pc, #312]	; (8009c24 <_dtoa_r+0x654>)
 8009aec:	2000      	movs	r0, #0
 8009aee:	f7f6 fead 	bl	800084c <__aeabi_ddiv>
 8009af2:	ec53 2b19 	vmov	r2, r3, d9
 8009af6:	f7f6 fbc7 	bl	8000288 <__aeabi_dsub>
 8009afa:	9d00      	ldr	r5, [sp, #0]
 8009afc:	ec41 0b19 	vmov	d9, r0, r1
 8009b00:	4649      	mov	r1, r9
 8009b02:	4640      	mov	r0, r8
 8009b04:	f7f7 f828 	bl	8000b58 <__aeabi_d2iz>
 8009b08:	4606      	mov	r6, r0
 8009b0a:	f7f6 fd0b 	bl	8000524 <__aeabi_i2d>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	4640      	mov	r0, r8
 8009b14:	4649      	mov	r1, r9
 8009b16:	f7f6 fbb7 	bl	8000288 <__aeabi_dsub>
 8009b1a:	3630      	adds	r6, #48	; 0x30
 8009b1c:	f805 6b01 	strb.w	r6, [r5], #1
 8009b20:	ec53 2b19 	vmov	r2, r3, d9
 8009b24:	4680      	mov	r8, r0
 8009b26:	4689      	mov	r9, r1
 8009b28:	f7f6 ffd8 	bl	8000adc <__aeabi_dcmplt>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d164      	bne.n	8009bfa <_dtoa_r+0x62a>
 8009b30:	4642      	mov	r2, r8
 8009b32:	464b      	mov	r3, r9
 8009b34:	4937      	ldr	r1, [pc, #220]	; (8009c14 <_dtoa_r+0x644>)
 8009b36:	2000      	movs	r0, #0
 8009b38:	f7f6 fba6 	bl	8000288 <__aeabi_dsub>
 8009b3c:	ec53 2b19 	vmov	r2, r3, d9
 8009b40:	f7f6 ffcc 	bl	8000adc <__aeabi_dcmplt>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	f040 80b6 	bne.w	8009cb6 <_dtoa_r+0x6e6>
 8009b4a:	9b02      	ldr	r3, [sp, #8]
 8009b4c:	429d      	cmp	r5, r3
 8009b4e:	f43f af7c 	beq.w	8009a4a <_dtoa_r+0x47a>
 8009b52:	4b31      	ldr	r3, [pc, #196]	; (8009c18 <_dtoa_r+0x648>)
 8009b54:	ec51 0b19 	vmov	r0, r1, d9
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f7f6 fd4d 	bl	80005f8 <__aeabi_dmul>
 8009b5e:	4b2e      	ldr	r3, [pc, #184]	; (8009c18 <_dtoa_r+0x648>)
 8009b60:	ec41 0b19 	vmov	d9, r0, r1
 8009b64:	2200      	movs	r2, #0
 8009b66:	4640      	mov	r0, r8
 8009b68:	4649      	mov	r1, r9
 8009b6a:	f7f6 fd45 	bl	80005f8 <__aeabi_dmul>
 8009b6e:	4680      	mov	r8, r0
 8009b70:	4689      	mov	r9, r1
 8009b72:	e7c5      	b.n	8009b00 <_dtoa_r+0x530>
 8009b74:	ec51 0b17 	vmov	r0, r1, d7
 8009b78:	f7f6 fd3e 	bl	80005f8 <__aeabi_dmul>
 8009b7c:	9b02      	ldr	r3, [sp, #8]
 8009b7e:	9d00      	ldr	r5, [sp, #0]
 8009b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b82:	ec41 0b19 	vmov	d9, r0, r1
 8009b86:	4649      	mov	r1, r9
 8009b88:	4640      	mov	r0, r8
 8009b8a:	f7f6 ffe5 	bl	8000b58 <__aeabi_d2iz>
 8009b8e:	4606      	mov	r6, r0
 8009b90:	f7f6 fcc8 	bl	8000524 <__aeabi_i2d>
 8009b94:	3630      	adds	r6, #48	; 0x30
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	4640      	mov	r0, r8
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	f7f6 fb73 	bl	8000288 <__aeabi_dsub>
 8009ba2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ba6:	9b02      	ldr	r3, [sp, #8]
 8009ba8:	429d      	cmp	r5, r3
 8009baa:	4680      	mov	r8, r0
 8009bac:	4689      	mov	r9, r1
 8009bae:	f04f 0200 	mov.w	r2, #0
 8009bb2:	d124      	bne.n	8009bfe <_dtoa_r+0x62e>
 8009bb4:	4b1b      	ldr	r3, [pc, #108]	; (8009c24 <_dtoa_r+0x654>)
 8009bb6:	ec51 0b19 	vmov	r0, r1, d9
 8009bba:	f7f6 fb67 	bl	800028c <__adddf3>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	f7f6 ffa7 	bl	8000b18 <__aeabi_dcmpgt>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d173      	bne.n	8009cb6 <_dtoa_r+0x6e6>
 8009bce:	ec53 2b19 	vmov	r2, r3, d9
 8009bd2:	4914      	ldr	r1, [pc, #80]	; (8009c24 <_dtoa_r+0x654>)
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	f7f6 fb57 	bl	8000288 <__aeabi_dsub>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	460b      	mov	r3, r1
 8009bde:	4640      	mov	r0, r8
 8009be0:	4649      	mov	r1, r9
 8009be2:	f7f6 ff7b 	bl	8000adc <__aeabi_dcmplt>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	f43f af2f 	beq.w	8009a4a <_dtoa_r+0x47a>
 8009bec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bee:	1e6b      	subs	r3, r5, #1
 8009bf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bf6:	2b30      	cmp	r3, #48	; 0x30
 8009bf8:	d0f8      	beq.n	8009bec <_dtoa_r+0x61c>
 8009bfa:	46bb      	mov	fp, r7
 8009bfc:	e04a      	b.n	8009c94 <_dtoa_r+0x6c4>
 8009bfe:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <_dtoa_r+0x648>)
 8009c00:	f7f6 fcfa 	bl	80005f8 <__aeabi_dmul>
 8009c04:	4680      	mov	r8, r0
 8009c06:	4689      	mov	r9, r1
 8009c08:	e7bd      	b.n	8009b86 <_dtoa_r+0x5b6>
 8009c0a:	bf00      	nop
 8009c0c:	0800f298 	.word	0x0800f298
 8009c10:	0800f270 	.word	0x0800f270
 8009c14:	3ff00000 	.word	0x3ff00000
 8009c18:	40240000 	.word	0x40240000
 8009c1c:	401c0000 	.word	0x401c0000
 8009c20:	40140000 	.word	0x40140000
 8009c24:	3fe00000 	.word	0x3fe00000
 8009c28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c2c:	9d00      	ldr	r5, [sp, #0]
 8009c2e:	4642      	mov	r2, r8
 8009c30:	464b      	mov	r3, r9
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 fe09 	bl	800084c <__aeabi_ddiv>
 8009c3a:	f7f6 ff8d 	bl	8000b58 <__aeabi_d2iz>
 8009c3e:	9001      	str	r0, [sp, #4]
 8009c40:	f7f6 fc70 	bl	8000524 <__aeabi_i2d>
 8009c44:	4642      	mov	r2, r8
 8009c46:	464b      	mov	r3, r9
 8009c48:	f7f6 fcd6 	bl	80005f8 <__aeabi_dmul>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4630      	mov	r0, r6
 8009c52:	4639      	mov	r1, r7
 8009c54:	f7f6 fb18 	bl	8000288 <__aeabi_dsub>
 8009c58:	9e01      	ldr	r6, [sp, #4]
 8009c5a:	9f04      	ldr	r7, [sp, #16]
 8009c5c:	3630      	adds	r6, #48	; 0x30
 8009c5e:	f805 6b01 	strb.w	r6, [r5], #1
 8009c62:	9e00      	ldr	r6, [sp, #0]
 8009c64:	1bae      	subs	r6, r5, r6
 8009c66:	42b7      	cmp	r7, r6
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	d134      	bne.n	8009cd8 <_dtoa_r+0x708>
 8009c6e:	f7f6 fb0d 	bl	800028c <__adddf3>
 8009c72:	4642      	mov	r2, r8
 8009c74:	464b      	mov	r3, r9
 8009c76:	4606      	mov	r6, r0
 8009c78:	460f      	mov	r7, r1
 8009c7a:	f7f6 ff4d 	bl	8000b18 <__aeabi_dcmpgt>
 8009c7e:	b9c8      	cbnz	r0, 8009cb4 <_dtoa_r+0x6e4>
 8009c80:	4642      	mov	r2, r8
 8009c82:	464b      	mov	r3, r9
 8009c84:	4630      	mov	r0, r6
 8009c86:	4639      	mov	r1, r7
 8009c88:	f7f6 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c8c:	b110      	cbz	r0, 8009c94 <_dtoa_r+0x6c4>
 8009c8e:	9b01      	ldr	r3, [sp, #4]
 8009c90:	07db      	lsls	r3, r3, #31
 8009c92:	d40f      	bmi.n	8009cb4 <_dtoa_r+0x6e4>
 8009c94:	4651      	mov	r1, sl
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 fb18 	bl	800a2cc <_Bfree>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ca0:	702b      	strb	r3, [r5, #0]
 8009ca2:	f10b 0301 	add.w	r3, fp, #1
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f43f ace2 	beq.w	8009674 <_dtoa_r+0xa4>
 8009cb0:	601d      	str	r5, [r3, #0]
 8009cb2:	e4df      	b.n	8009674 <_dtoa_r+0xa4>
 8009cb4:	465f      	mov	r7, fp
 8009cb6:	462b      	mov	r3, r5
 8009cb8:	461d      	mov	r5, r3
 8009cba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cbe:	2a39      	cmp	r2, #57	; 0x39
 8009cc0:	d106      	bne.n	8009cd0 <_dtoa_r+0x700>
 8009cc2:	9a00      	ldr	r2, [sp, #0]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d1f7      	bne.n	8009cb8 <_dtoa_r+0x6e8>
 8009cc8:	9900      	ldr	r1, [sp, #0]
 8009cca:	2230      	movs	r2, #48	; 0x30
 8009ccc:	3701      	adds	r7, #1
 8009cce:	700a      	strb	r2, [r1, #0]
 8009cd0:	781a      	ldrb	r2, [r3, #0]
 8009cd2:	3201      	adds	r2, #1
 8009cd4:	701a      	strb	r2, [r3, #0]
 8009cd6:	e790      	b.n	8009bfa <_dtoa_r+0x62a>
 8009cd8:	4ba3      	ldr	r3, [pc, #652]	; (8009f68 <_dtoa_r+0x998>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f7f6 fc8c 	bl	80005f8 <__aeabi_dmul>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	460f      	mov	r7, r1
 8009ce8:	f7f6 feee 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d09e      	beq.n	8009c2e <_dtoa_r+0x65e>
 8009cf0:	e7d0      	b.n	8009c94 <_dtoa_r+0x6c4>
 8009cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cf4:	2a00      	cmp	r2, #0
 8009cf6:	f000 80ca 	beq.w	8009e8e <_dtoa_r+0x8be>
 8009cfa:	9a07      	ldr	r2, [sp, #28]
 8009cfc:	2a01      	cmp	r2, #1
 8009cfe:	f300 80ad 	bgt.w	8009e5c <_dtoa_r+0x88c>
 8009d02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d04:	2a00      	cmp	r2, #0
 8009d06:	f000 80a5 	beq.w	8009e54 <_dtoa_r+0x884>
 8009d0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d0e:	9e08      	ldr	r6, [sp, #32]
 8009d10:	9d05      	ldr	r5, [sp, #20]
 8009d12:	9a05      	ldr	r2, [sp, #20]
 8009d14:	441a      	add	r2, r3
 8009d16:	9205      	str	r2, [sp, #20]
 8009d18:	9a06      	ldr	r2, [sp, #24]
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	441a      	add	r2, r3
 8009d1e:	4620      	mov	r0, r4
 8009d20:	9206      	str	r2, [sp, #24]
 8009d22:	f000 fbd3 	bl	800a4cc <__i2b>
 8009d26:	4607      	mov	r7, r0
 8009d28:	b165      	cbz	r5, 8009d44 <_dtoa_r+0x774>
 8009d2a:	9b06      	ldr	r3, [sp, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dd09      	ble.n	8009d44 <_dtoa_r+0x774>
 8009d30:	42ab      	cmp	r3, r5
 8009d32:	9a05      	ldr	r2, [sp, #20]
 8009d34:	bfa8      	it	ge
 8009d36:	462b      	movge	r3, r5
 8009d38:	1ad2      	subs	r2, r2, r3
 8009d3a:	9205      	str	r2, [sp, #20]
 8009d3c:	9a06      	ldr	r2, [sp, #24]
 8009d3e:	1aed      	subs	r5, r5, r3
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	9306      	str	r3, [sp, #24]
 8009d44:	9b08      	ldr	r3, [sp, #32]
 8009d46:	b1f3      	cbz	r3, 8009d86 <_dtoa_r+0x7b6>
 8009d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 80a3 	beq.w	8009e96 <_dtoa_r+0x8c6>
 8009d50:	2e00      	cmp	r6, #0
 8009d52:	dd10      	ble.n	8009d76 <_dtoa_r+0x7a6>
 8009d54:	4639      	mov	r1, r7
 8009d56:	4632      	mov	r2, r6
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f000 fc77 	bl	800a64c <__pow5mult>
 8009d5e:	4652      	mov	r2, sl
 8009d60:	4601      	mov	r1, r0
 8009d62:	4607      	mov	r7, r0
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 fbc7 	bl	800a4f8 <__multiply>
 8009d6a:	4651      	mov	r1, sl
 8009d6c:	4680      	mov	r8, r0
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f000 faac 	bl	800a2cc <_Bfree>
 8009d74:	46c2      	mov	sl, r8
 8009d76:	9b08      	ldr	r3, [sp, #32]
 8009d78:	1b9a      	subs	r2, r3, r6
 8009d7a:	d004      	beq.n	8009d86 <_dtoa_r+0x7b6>
 8009d7c:	4651      	mov	r1, sl
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 fc64 	bl	800a64c <__pow5mult>
 8009d84:	4682      	mov	sl, r0
 8009d86:	2101      	movs	r1, #1
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 fb9f 	bl	800a4cc <__i2b>
 8009d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	4606      	mov	r6, r0
 8009d94:	f340 8081 	ble.w	8009e9a <_dtoa_r+0x8ca>
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 fc55 	bl	800a64c <__pow5mult>
 8009da2:	9b07      	ldr	r3, [sp, #28]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	4606      	mov	r6, r0
 8009da8:	dd7a      	ble.n	8009ea0 <_dtoa_r+0x8d0>
 8009daa:	f04f 0800 	mov.w	r8, #0
 8009dae:	6933      	ldr	r3, [r6, #16]
 8009db0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009db4:	6918      	ldr	r0, [r3, #16]
 8009db6:	f000 fb3b 	bl	800a430 <__hi0bits>
 8009dba:	f1c0 0020 	rsb	r0, r0, #32
 8009dbe:	9b06      	ldr	r3, [sp, #24]
 8009dc0:	4418      	add	r0, r3
 8009dc2:	f010 001f 	ands.w	r0, r0, #31
 8009dc6:	f000 8094 	beq.w	8009ef2 <_dtoa_r+0x922>
 8009dca:	f1c0 0320 	rsb	r3, r0, #32
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	f340 8085 	ble.w	8009ede <_dtoa_r+0x90e>
 8009dd4:	9b05      	ldr	r3, [sp, #20]
 8009dd6:	f1c0 001c 	rsb	r0, r0, #28
 8009dda:	4403      	add	r3, r0
 8009ddc:	9305      	str	r3, [sp, #20]
 8009dde:	9b06      	ldr	r3, [sp, #24]
 8009de0:	4403      	add	r3, r0
 8009de2:	4405      	add	r5, r0
 8009de4:	9306      	str	r3, [sp, #24]
 8009de6:	9b05      	ldr	r3, [sp, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	dd05      	ble.n	8009df8 <_dtoa_r+0x828>
 8009dec:	4651      	mov	r1, sl
 8009dee:	461a      	mov	r2, r3
 8009df0:	4620      	mov	r0, r4
 8009df2:	f000 fc85 	bl	800a700 <__lshift>
 8009df6:	4682      	mov	sl, r0
 8009df8:	9b06      	ldr	r3, [sp, #24]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	dd05      	ble.n	8009e0a <_dtoa_r+0x83a>
 8009dfe:	4631      	mov	r1, r6
 8009e00:	461a      	mov	r2, r3
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 fc7c 	bl	800a700 <__lshift>
 8009e08:	4606      	mov	r6, r0
 8009e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d072      	beq.n	8009ef6 <_dtoa_r+0x926>
 8009e10:	4631      	mov	r1, r6
 8009e12:	4650      	mov	r0, sl
 8009e14:	f000 fce0 	bl	800a7d8 <__mcmp>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	da6c      	bge.n	8009ef6 <_dtoa_r+0x926>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4651      	mov	r1, sl
 8009e20:	220a      	movs	r2, #10
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 fa74 	bl	800a310 <__multadd>
 8009e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e2e:	4682      	mov	sl, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 81b0 	beq.w	800a196 <_dtoa_r+0xbc6>
 8009e36:	2300      	movs	r3, #0
 8009e38:	4639      	mov	r1, r7
 8009e3a:	220a      	movs	r2, #10
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f000 fa67 	bl	800a310 <__multadd>
 8009e42:	9b01      	ldr	r3, [sp, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	4607      	mov	r7, r0
 8009e48:	f300 8096 	bgt.w	8009f78 <_dtoa_r+0x9a8>
 8009e4c:	9b07      	ldr	r3, [sp, #28]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	dc59      	bgt.n	8009f06 <_dtoa_r+0x936>
 8009e52:	e091      	b.n	8009f78 <_dtoa_r+0x9a8>
 8009e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e5a:	e758      	b.n	8009d0e <_dtoa_r+0x73e>
 8009e5c:	9b04      	ldr	r3, [sp, #16]
 8009e5e:	1e5e      	subs	r6, r3, #1
 8009e60:	9b08      	ldr	r3, [sp, #32]
 8009e62:	42b3      	cmp	r3, r6
 8009e64:	bfbf      	itttt	lt
 8009e66:	9b08      	ldrlt	r3, [sp, #32]
 8009e68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009e6a:	9608      	strlt	r6, [sp, #32]
 8009e6c:	1af3      	sublt	r3, r6, r3
 8009e6e:	bfb4      	ite	lt
 8009e70:	18d2      	addlt	r2, r2, r3
 8009e72:	1b9e      	subge	r6, r3, r6
 8009e74:	9b04      	ldr	r3, [sp, #16]
 8009e76:	bfbc      	itt	lt
 8009e78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009e7a:	2600      	movlt	r6, #0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bfb7      	itett	lt
 8009e80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009e84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009e88:	1a9d      	sublt	r5, r3, r2
 8009e8a:	2300      	movlt	r3, #0
 8009e8c:	e741      	b.n	8009d12 <_dtoa_r+0x742>
 8009e8e:	9e08      	ldr	r6, [sp, #32]
 8009e90:	9d05      	ldr	r5, [sp, #20]
 8009e92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e94:	e748      	b.n	8009d28 <_dtoa_r+0x758>
 8009e96:	9a08      	ldr	r2, [sp, #32]
 8009e98:	e770      	b.n	8009d7c <_dtoa_r+0x7ac>
 8009e9a:	9b07      	ldr	r3, [sp, #28]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	dc19      	bgt.n	8009ed4 <_dtoa_r+0x904>
 8009ea0:	9b02      	ldr	r3, [sp, #8]
 8009ea2:	b9bb      	cbnz	r3, 8009ed4 <_dtoa_r+0x904>
 8009ea4:	9b03      	ldr	r3, [sp, #12]
 8009ea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eaa:	b99b      	cbnz	r3, 8009ed4 <_dtoa_r+0x904>
 8009eac:	9b03      	ldr	r3, [sp, #12]
 8009eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009eb2:	0d1b      	lsrs	r3, r3, #20
 8009eb4:	051b      	lsls	r3, r3, #20
 8009eb6:	b183      	cbz	r3, 8009eda <_dtoa_r+0x90a>
 8009eb8:	9b05      	ldr	r3, [sp, #20]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	9b06      	ldr	r3, [sp, #24]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	9306      	str	r3, [sp, #24]
 8009ec4:	f04f 0801 	mov.w	r8, #1
 8009ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f47f af6f 	bne.w	8009dae <_dtoa_r+0x7de>
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	e774      	b.n	8009dbe <_dtoa_r+0x7ee>
 8009ed4:	f04f 0800 	mov.w	r8, #0
 8009ed8:	e7f6      	b.n	8009ec8 <_dtoa_r+0x8f8>
 8009eda:	4698      	mov	r8, r3
 8009edc:	e7f4      	b.n	8009ec8 <_dtoa_r+0x8f8>
 8009ede:	d082      	beq.n	8009de6 <_dtoa_r+0x816>
 8009ee0:	9a05      	ldr	r2, [sp, #20]
 8009ee2:	331c      	adds	r3, #28
 8009ee4:	441a      	add	r2, r3
 8009ee6:	9205      	str	r2, [sp, #20]
 8009ee8:	9a06      	ldr	r2, [sp, #24]
 8009eea:	441a      	add	r2, r3
 8009eec:	441d      	add	r5, r3
 8009eee:	9206      	str	r2, [sp, #24]
 8009ef0:	e779      	b.n	8009de6 <_dtoa_r+0x816>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	e7f4      	b.n	8009ee0 <_dtoa_r+0x910>
 8009ef6:	9b04      	ldr	r3, [sp, #16]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	dc37      	bgt.n	8009f6c <_dtoa_r+0x99c>
 8009efc:	9b07      	ldr	r3, [sp, #28]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	dd34      	ble.n	8009f6c <_dtoa_r+0x99c>
 8009f02:	9b04      	ldr	r3, [sp, #16]
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	9b01      	ldr	r3, [sp, #4]
 8009f08:	b963      	cbnz	r3, 8009f24 <_dtoa_r+0x954>
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	2205      	movs	r2, #5
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 f9fe 	bl	800a310 <__multadd>
 8009f14:	4601      	mov	r1, r0
 8009f16:	4606      	mov	r6, r0
 8009f18:	4650      	mov	r0, sl
 8009f1a:	f000 fc5d 	bl	800a7d8 <__mcmp>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f73f adbb 	bgt.w	8009a9a <_dtoa_r+0x4ca>
 8009f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f26:	9d00      	ldr	r5, [sp, #0]
 8009f28:	ea6f 0b03 	mvn.w	fp, r3
 8009f2c:	f04f 0800 	mov.w	r8, #0
 8009f30:	4631      	mov	r1, r6
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 f9ca 	bl	800a2cc <_Bfree>
 8009f38:	2f00      	cmp	r7, #0
 8009f3a:	f43f aeab 	beq.w	8009c94 <_dtoa_r+0x6c4>
 8009f3e:	f1b8 0f00 	cmp.w	r8, #0
 8009f42:	d005      	beq.n	8009f50 <_dtoa_r+0x980>
 8009f44:	45b8      	cmp	r8, r7
 8009f46:	d003      	beq.n	8009f50 <_dtoa_r+0x980>
 8009f48:	4641      	mov	r1, r8
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 f9be 	bl	800a2cc <_Bfree>
 8009f50:	4639      	mov	r1, r7
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 f9ba 	bl	800a2cc <_Bfree>
 8009f58:	e69c      	b.n	8009c94 <_dtoa_r+0x6c4>
 8009f5a:	2600      	movs	r6, #0
 8009f5c:	4637      	mov	r7, r6
 8009f5e:	e7e1      	b.n	8009f24 <_dtoa_r+0x954>
 8009f60:	46bb      	mov	fp, r7
 8009f62:	4637      	mov	r7, r6
 8009f64:	e599      	b.n	8009a9a <_dtoa_r+0x4ca>
 8009f66:	bf00      	nop
 8009f68:	40240000 	.word	0x40240000
 8009f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 80c8 	beq.w	800a104 <_dtoa_r+0xb34>
 8009f74:	9b04      	ldr	r3, [sp, #16]
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	2d00      	cmp	r5, #0
 8009f7a:	dd05      	ble.n	8009f88 <_dtoa_r+0x9b8>
 8009f7c:	4639      	mov	r1, r7
 8009f7e:	462a      	mov	r2, r5
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 fbbd 	bl	800a700 <__lshift>
 8009f86:	4607      	mov	r7, r0
 8009f88:	f1b8 0f00 	cmp.w	r8, #0
 8009f8c:	d05b      	beq.n	800a046 <_dtoa_r+0xa76>
 8009f8e:	6879      	ldr	r1, [r7, #4]
 8009f90:	4620      	mov	r0, r4
 8009f92:	f000 f95b 	bl	800a24c <_Balloc>
 8009f96:	4605      	mov	r5, r0
 8009f98:	b928      	cbnz	r0, 8009fa6 <_dtoa_r+0x9d6>
 8009f9a:	4b83      	ldr	r3, [pc, #524]	; (800a1a8 <_dtoa_r+0xbd8>)
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009fa2:	f7ff bb2e 	b.w	8009602 <_dtoa_r+0x32>
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	3202      	adds	r2, #2
 8009faa:	0092      	lsls	r2, r2, #2
 8009fac:	f107 010c 	add.w	r1, r7, #12
 8009fb0:	300c      	adds	r0, #12
 8009fb2:	f001 fec1 	bl	800bd38 <memcpy>
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f000 fba0 	bl	800a700 <__lshift>
 8009fc0:	9b00      	ldr	r3, [sp, #0]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	9304      	str	r3, [sp, #16]
 8009fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fca:	4413      	add	r3, r2
 8009fcc:	9308      	str	r3, [sp, #32]
 8009fce:	9b02      	ldr	r3, [sp, #8]
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	46b8      	mov	r8, r7
 8009fd6:	9306      	str	r3, [sp, #24]
 8009fd8:	4607      	mov	r7, r0
 8009fda:	9b04      	ldr	r3, [sp, #16]
 8009fdc:	4631      	mov	r1, r6
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	9301      	str	r3, [sp, #4]
 8009fe4:	f7ff fa6a 	bl	80094bc <quorem>
 8009fe8:	4641      	mov	r1, r8
 8009fea:	9002      	str	r0, [sp, #8]
 8009fec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ff0:	4650      	mov	r0, sl
 8009ff2:	f000 fbf1 	bl	800a7d8 <__mcmp>
 8009ff6:	463a      	mov	r2, r7
 8009ff8:	9005      	str	r0, [sp, #20]
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f000 fc07 	bl	800a810 <__mdiff>
 800a002:	68c2      	ldr	r2, [r0, #12]
 800a004:	4605      	mov	r5, r0
 800a006:	bb02      	cbnz	r2, 800a04a <_dtoa_r+0xa7a>
 800a008:	4601      	mov	r1, r0
 800a00a:	4650      	mov	r0, sl
 800a00c:	f000 fbe4 	bl	800a7d8 <__mcmp>
 800a010:	4602      	mov	r2, r0
 800a012:	4629      	mov	r1, r5
 800a014:	4620      	mov	r0, r4
 800a016:	9209      	str	r2, [sp, #36]	; 0x24
 800a018:	f000 f958 	bl	800a2cc <_Bfree>
 800a01c:	9b07      	ldr	r3, [sp, #28]
 800a01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a020:	9d04      	ldr	r5, [sp, #16]
 800a022:	ea43 0102 	orr.w	r1, r3, r2
 800a026:	9b06      	ldr	r3, [sp, #24]
 800a028:	4319      	orrs	r1, r3
 800a02a:	d110      	bne.n	800a04e <_dtoa_r+0xa7e>
 800a02c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a030:	d029      	beq.n	800a086 <_dtoa_r+0xab6>
 800a032:	9b05      	ldr	r3, [sp, #20]
 800a034:	2b00      	cmp	r3, #0
 800a036:	dd02      	ble.n	800a03e <_dtoa_r+0xa6e>
 800a038:	9b02      	ldr	r3, [sp, #8]
 800a03a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a03e:	9b01      	ldr	r3, [sp, #4]
 800a040:	f883 9000 	strb.w	r9, [r3]
 800a044:	e774      	b.n	8009f30 <_dtoa_r+0x960>
 800a046:	4638      	mov	r0, r7
 800a048:	e7ba      	b.n	8009fc0 <_dtoa_r+0x9f0>
 800a04a:	2201      	movs	r2, #1
 800a04c:	e7e1      	b.n	800a012 <_dtoa_r+0xa42>
 800a04e:	9b05      	ldr	r3, [sp, #20]
 800a050:	2b00      	cmp	r3, #0
 800a052:	db04      	blt.n	800a05e <_dtoa_r+0xa8e>
 800a054:	9907      	ldr	r1, [sp, #28]
 800a056:	430b      	orrs	r3, r1
 800a058:	9906      	ldr	r1, [sp, #24]
 800a05a:	430b      	orrs	r3, r1
 800a05c:	d120      	bne.n	800a0a0 <_dtoa_r+0xad0>
 800a05e:	2a00      	cmp	r2, #0
 800a060:	dded      	ble.n	800a03e <_dtoa_r+0xa6e>
 800a062:	4651      	mov	r1, sl
 800a064:	2201      	movs	r2, #1
 800a066:	4620      	mov	r0, r4
 800a068:	f000 fb4a 	bl	800a700 <__lshift>
 800a06c:	4631      	mov	r1, r6
 800a06e:	4682      	mov	sl, r0
 800a070:	f000 fbb2 	bl	800a7d8 <__mcmp>
 800a074:	2800      	cmp	r0, #0
 800a076:	dc03      	bgt.n	800a080 <_dtoa_r+0xab0>
 800a078:	d1e1      	bne.n	800a03e <_dtoa_r+0xa6e>
 800a07a:	f019 0f01 	tst.w	r9, #1
 800a07e:	d0de      	beq.n	800a03e <_dtoa_r+0xa6e>
 800a080:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a084:	d1d8      	bne.n	800a038 <_dtoa_r+0xa68>
 800a086:	9a01      	ldr	r2, [sp, #4]
 800a088:	2339      	movs	r3, #57	; 0x39
 800a08a:	7013      	strb	r3, [r2, #0]
 800a08c:	462b      	mov	r3, r5
 800a08e:	461d      	mov	r5, r3
 800a090:	3b01      	subs	r3, #1
 800a092:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a096:	2a39      	cmp	r2, #57	; 0x39
 800a098:	d06c      	beq.n	800a174 <_dtoa_r+0xba4>
 800a09a:	3201      	adds	r2, #1
 800a09c:	701a      	strb	r2, [r3, #0]
 800a09e:	e747      	b.n	8009f30 <_dtoa_r+0x960>
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	dd07      	ble.n	800a0b4 <_dtoa_r+0xae4>
 800a0a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0a8:	d0ed      	beq.n	800a086 <_dtoa_r+0xab6>
 800a0aa:	9a01      	ldr	r2, [sp, #4]
 800a0ac:	f109 0301 	add.w	r3, r9, #1
 800a0b0:	7013      	strb	r3, [r2, #0]
 800a0b2:	e73d      	b.n	8009f30 <_dtoa_r+0x960>
 800a0b4:	9b04      	ldr	r3, [sp, #16]
 800a0b6:	9a08      	ldr	r2, [sp, #32]
 800a0b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d043      	beq.n	800a148 <_dtoa_r+0xb78>
 800a0c0:	4651      	mov	r1, sl
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	220a      	movs	r2, #10
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 f922 	bl	800a310 <__multadd>
 800a0cc:	45b8      	cmp	r8, r7
 800a0ce:	4682      	mov	sl, r0
 800a0d0:	f04f 0300 	mov.w	r3, #0
 800a0d4:	f04f 020a 	mov.w	r2, #10
 800a0d8:	4641      	mov	r1, r8
 800a0da:	4620      	mov	r0, r4
 800a0dc:	d107      	bne.n	800a0ee <_dtoa_r+0xb1e>
 800a0de:	f000 f917 	bl	800a310 <__multadd>
 800a0e2:	4680      	mov	r8, r0
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	9b04      	ldr	r3, [sp, #16]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	e775      	b.n	8009fda <_dtoa_r+0xa0a>
 800a0ee:	f000 f90f 	bl	800a310 <__multadd>
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	220a      	movs	r2, #10
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f000 f908 	bl	800a310 <__multadd>
 800a100:	4607      	mov	r7, r0
 800a102:	e7f0      	b.n	800a0e6 <_dtoa_r+0xb16>
 800a104:	9b04      	ldr	r3, [sp, #16]
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	9d00      	ldr	r5, [sp, #0]
 800a10a:	4631      	mov	r1, r6
 800a10c:	4650      	mov	r0, sl
 800a10e:	f7ff f9d5 	bl	80094bc <quorem>
 800a112:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a116:	9b00      	ldr	r3, [sp, #0]
 800a118:	f805 9b01 	strb.w	r9, [r5], #1
 800a11c:	1aea      	subs	r2, r5, r3
 800a11e:	9b01      	ldr	r3, [sp, #4]
 800a120:	4293      	cmp	r3, r2
 800a122:	dd07      	ble.n	800a134 <_dtoa_r+0xb64>
 800a124:	4651      	mov	r1, sl
 800a126:	2300      	movs	r3, #0
 800a128:	220a      	movs	r2, #10
 800a12a:	4620      	mov	r0, r4
 800a12c:	f000 f8f0 	bl	800a310 <__multadd>
 800a130:	4682      	mov	sl, r0
 800a132:	e7ea      	b.n	800a10a <_dtoa_r+0xb3a>
 800a134:	9b01      	ldr	r3, [sp, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	bfc8      	it	gt
 800a13a:	461d      	movgt	r5, r3
 800a13c:	9b00      	ldr	r3, [sp, #0]
 800a13e:	bfd8      	it	le
 800a140:	2501      	movle	r5, #1
 800a142:	441d      	add	r5, r3
 800a144:	f04f 0800 	mov.w	r8, #0
 800a148:	4651      	mov	r1, sl
 800a14a:	2201      	movs	r2, #1
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 fad7 	bl	800a700 <__lshift>
 800a152:	4631      	mov	r1, r6
 800a154:	4682      	mov	sl, r0
 800a156:	f000 fb3f 	bl	800a7d8 <__mcmp>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	dc96      	bgt.n	800a08c <_dtoa_r+0xabc>
 800a15e:	d102      	bne.n	800a166 <_dtoa_r+0xb96>
 800a160:	f019 0f01 	tst.w	r9, #1
 800a164:	d192      	bne.n	800a08c <_dtoa_r+0xabc>
 800a166:	462b      	mov	r3, r5
 800a168:	461d      	mov	r5, r3
 800a16a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a16e:	2a30      	cmp	r2, #48	; 0x30
 800a170:	d0fa      	beq.n	800a168 <_dtoa_r+0xb98>
 800a172:	e6dd      	b.n	8009f30 <_dtoa_r+0x960>
 800a174:	9a00      	ldr	r2, [sp, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	d189      	bne.n	800a08e <_dtoa_r+0xabe>
 800a17a:	f10b 0b01 	add.w	fp, fp, #1
 800a17e:	2331      	movs	r3, #49	; 0x31
 800a180:	e796      	b.n	800a0b0 <_dtoa_r+0xae0>
 800a182:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <_dtoa_r+0xbdc>)
 800a184:	f7ff ba99 	b.w	80096ba <_dtoa_r+0xea>
 800a188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f47f aa6d 	bne.w	800966a <_dtoa_r+0x9a>
 800a190:	4b07      	ldr	r3, [pc, #28]	; (800a1b0 <_dtoa_r+0xbe0>)
 800a192:	f7ff ba92 	b.w	80096ba <_dtoa_r+0xea>
 800a196:	9b01      	ldr	r3, [sp, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	dcb5      	bgt.n	800a108 <_dtoa_r+0xb38>
 800a19c:	9b07      	ldr	r3, [sp, #28]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	f73f aeb1 	bgt.w	8009f06 <_dtoa_r+0x936>
 800a1a4:	e7b0      	b.n	800a108 <_dtoa_r+0xb38>
 800a1a6:	bf00      	nop
 800a1a8:	0800f205 	.word	0x0800f205
 800a1ac:	0800f160 	.word	0x0800f160
 800a1b0:	0800f189 	.word	0x0800f189

0800a1b4 <_free_r>:
 800a1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1b6:	2900      	cmp	r1, #0
 800a1b8:	d044      	beq.n	800a244 <_free_r+0x90>
 800a1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1be:	9001      	str	r0, [sp, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1c6:	bfb8      	it	lt
 800a1c8:	18e4      	addlt	r4, r4, r3
 800a1ca:	f7fe f905 	bl	80083d8 <__malloc_lock>
 800a1ce:	4a1e      	ldr	r2, [pc, #120]	; (800a248 <_free_r+0x94>)
 800a1d0:	9801      	ldr	r0, [sp, #4]
 800a1d2:	6813      	ldr	r3, [r2, #0]
 800a1d4:	b933      	cbnz	r3, 800a1e4 <_free_r+0x30>
 800a1d6:	6063      	str	r3, [r4, #4]
 800a1d8:	6014      	str	r4, [r2, #0]
 800a1da:	b003      	add	sp, #12
 800a1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1e0:	f7fe b900 	b.w	80083e4 <__malloc_unlock>
 800a1e4:	42a3      	cmp	r3, r4
 800a1e6:	d908      	bls.n	800a1fa <_free_r+0x46>
 800a1e8:	6825      	ldr	r5, [r4, #0]
 800a1ea:	1961      	adds	r1, r4, r5
 800a1ec:	428b      	cmp	r3, r1
 800a1ee:	bf01      	itttt	eq
 800a1f0:	6819      	ldreq	r1, [r3, #0]
 800a1f2:	685b      	ldreq	r3, [r3, #4]
 800a1f4:	1949      	addeq	r1, r1, r5
 800a1f6:	6021      	streq	r1, [r4, #0]
 800a1f8:	e7ed      	b.n	800a1d6 <_free_r+0x22>
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	b10b      	cbz	r3, 800a204 <_free_r+0x50>
 800a200:	42a3      	cmp	r3, r4
 800a202:	d9fa      	bls.n	800a1fa <_free_r+0x46>
 800a204:	6811      	ldr	r1, [r2, #0]
 800a206:	1855      	adds	r5, r2, r1
 800a208:	42a5      	cmp	r5, r4
 800a20a:	d10b      	bne.n	800a224 <_free_r+0x70>
 800a20c:	6824      	ldr	r4, [r4, #0]
 800a20e:	4421      	add	r1, r4
 800a210:	1854      	adds	r4, r2, r1
 800a212:	42a3      	cmp	r3, r4
 800a214:	6011      	str	r1, [r2, #0]
 800a216:	d1e0      	bne.n	800a1da <_free_r+0x26>
 800a218:	681c      	ldr	r4, [r3, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	6053      	str	r3, [r2, #4]
 800a21e:	440c      	add	r4, r1
 800a220:	6014      	str	r4, [r2, #0]
 800a222:	e7da      	b.n	800a1da <_free_r+0x26>
 800a224:	d902      	bls.n	800a22c <_free_r+0x78>
 800a226:	230c      	movs	r3, #12
 800a228:	6003      	str	r3, [r0, #0]
 800a22a:	e7d6      	b.n	800a1da <_free_r+0x26>
 800a22c:	6825      	ldr	r5, [r4, #0]
 800a22e:	1961      	adds	r1, r4, r5
 800a230:	428b      	cmp	r3, r1
 800a232:	bf04      	itt	eq
 800a234:	6819      	ldreq	r1, [r3, #0]
 800a236:	685b      	ldreq	r3, [r3, #4]
 800a238:	6063      	str	r3, [r4, #4]
 800a23a:	bf04      	itt	eq
 800a23c:	1949      	addeq	r1, r1, r5
 800a23e:	6021      	streq	r1, [r4, #0]
 800a240:	6054      	str	r4, [r2, #4]
 800a242:	e7ca      	b.n	800a1da <_free_r+0x26>
 800a244:	b003      	add	sp, #12
 800a246:	bd30      	pop	{r4, r5, pc}
 800a248:	200008c8 	.word	0x200008c8

0800a24c <_Balloc>:
 800a24c:	b570      	push	{r4, r5, r6, lr}
 800a24e:	69c6      	ldr	r6, [r0, #28]
 800a250:	4604      	mov	r4, r0
 800a252:	460d      	mov	r5, r1
 800a254:	b976      	cbnz	r6, 800a274 <_Balloc+0x28>
 800a256:	2010      	movs	r0, #16
 800a258:	f7fe f80e 	bl	8008278 <malloc>
 800a25c:	4602      	mov	r2, r0
 800a25e:	61e0      	str	r0, [r4, #28]
 800a260:	b920      	cbnz	r0, 800a26c <_Balloc+0x20>
 800a262:	4b18      	ldr	r3, [pc, #96]	; (800a2c4 <_Balloc+0x78>)
 800a264:	4818      	ldr	r0, [pc, #96]	; (800a2c8 <_Balloc+0x7c>)
 800a266:	216b      	movs	r1, #107	; 0x6b
 800a268:	f001 fd7e 	bl	800bd68 <__assert_func>
 800a26c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a270:	6006      	str	r6, [r0, #0]
 800a272:	60c6      	str	r6, [r0, #12]
 800a274:	69e6      	ldr	r6, [r4, #28]
 800a276:	68f3      	ldr	r3, [r6, #12]
 800a278:	b183      	cbz	r3, 800a29c <_Balloc+0x50>
 800a27a:	69e3      	ldr	r3, [r4, #28]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a282:	b9b8      	cbnz	r0, 800a2b4 <_Balloc+0x68>
 800a284:	2101      	movs	r1, #1
 800a286:	fa01 f605 	lsl.w	r6, r1, r5
 800a28a:	1d72      	adds	r2, r6, #5
 800a28c:	0092      	lsls	r2, r2, #2
 800a28e:	4620      	mov	r0, r4
 800a290:	f001 fd88 	bl	800bda4 <_calloc_r>
 800a294:	b160      	cbz	r0, 800a2b0 <_Balloc+0x64>
 800a296:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a29a:	e00e      	b.n	800a2ba <_Balloc+0x6e>
 800a29c:	2221      	movs	r2, #33	; 0x21
 800a29e:	2104      	movs	r1, #4
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f001 fd7f 	bl	800bda4 <_calloc_r>
 800a2a6:	69e3      	ldr	r3, [r4, #28]
 800a2a8:	60f0      	str	r0, [r6, #12]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1e4      	bne.n	800a27a <_Balloc+0x2e>
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	bd70      	pop	{r4, r5, r6, pc}
 800a2b4:	6802      	ldr	r2, [r0, #0]
 800a2b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2c0:	e7f7      	b.n	800a2b2 <_Balloc+0x66>
 800a2c2:	bf00      	nop
 800a2c4:	0800f196 	.word	0x0800f196
 800a2c8:	0800f216 	.word	0x0800f216

0800a2cc <_Bfree>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	69c6      	ldr	r6, [r0, #28]
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	b976      	cbnz	r6, 800a2f4 <_Bfree+0x28>
 800a2d6:	2010      	movs	r0, #16
 800a2d8:	f7fd ffce 	bl	8008278 <malloc>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	61e8      	str	r0, [r5, #28]
 800a2e0:	b920      	cbnz	r0, 800a2ec <_Bfree+0x20>
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <_Bfree+0x3c>)
 800a2e4:	4809      	ldr	r0, [pc, #36]	; (800a30c <_Bfree+0x40>)
 800a2e6:	218f      	movs	r1, #143	; 0x8f
 800a2e8:	f001 fd3e 	bl	800bd68 <__assert_func>
 800a2ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2f0:	6006      	str	r6, [r0, #0]
 800a2f2:	60c6      	str	r6, [r0, #12]
 800a2f4:	b13c      	cbz	r4, 800a306 <_Bfree+0x3a>
 800a2f6:	69eb      	ldr	r3, [r5, #28]
 800a2f8:	6862      	ldr	r2, [r4, #4]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a300:	6021      	str	r1, [r4, #0]
 800a302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a306:	bd70      	pop	{r4, r5, r6, pc}
 800a308:	0800f196 	.word	0x0800f196
 800a30c:	0800f216 	.word	0x0800f216

0800a310 <__multadd>:
 800a310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a314:	690d      	ldr	r5, [r1, #16]
 800a316:	4607      	mov	r7, r0
 800a318:	460c      	mov	r4, r1
 800a31a:	461e      	mov	r6, r3
 800a31c:	f101 0c14 	add.w	ip, r1, #20
 800a320:	2000      	movs	r0, #0
 800a322:	f8dc 3000 	ldr.w	r3, [ip]
 800a326:	b299      	uxth	r1, r3
 800a328:	fb02 6101 	mla	r1, r2, r1, r6
 800a32c:	0c1e      	lsrs	r6, r3, #16
 800a32e:	0c0b      	lsrs	r3, r1, #16
 800a330:	fb02 3306 	mla	r3, r2, r6, r3
 800a334:	b289      	uxth	r1, r1
 800a336:	3001      	adds	r0, #1
 800a338:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a33c:	4285      	cmp	r5, r0
 800a33e:	f84c 1b04 	str.w	r1, [ip], #4
 800a342:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a346:	dcec      	bgt.n	800a322 <__multadd+0x12>
 800a348:	b30e      	cbz	r6, 800a38e <__multadd+0x7e>
 800a34a:	68a3      	ldr	r3, [r4, #8]
 800a34c:	42ab      	cmp	r3, r5
 800a34e:	dc19      	bgt.n	800a384 <__multadd+0x74>
 800a350:	6861      	ldr	r1, [r4, #4]
 800a352:	4638      	mov	r0, r7
 800a354:	3101      	adds	r1, #1
 800a356:	f7ff ff79 	bl	800a24c <_Balloc>
 800a35a:	4680      	mov	r8, r0
 800a35c:	b928      	cbnz	r0, 800a36a <__multadd+0x5a>
 800a35e:	4602      	mov	r2, r0
 800a360:	4b0c      	ldr	r3, [pc, #48]	; (800a394 <__multadd+0x84>)
 800a362:	480d      	ldr	r0, [pc, #52]	; (800a398 <__multadd+0x88>)
 800a364:	21ba      	movs	r1, #186	; 0xba
 800a366:	f001 fcff 	bl	800bd68 <__assert_func>
 800a36a:	6922      	ldr	r2, [r4, #16]
 800a36c:	3202      	adds	r2, #2
 800a36e:	f104 010c 	add.w	r1, r4, #12
 800a372:	0092      	lsls	r2, r2, #2
 800a374:	300c      	adds	r0, #12
 800a376:	f001 fcdf 	bl	800bd38 <memcpy>
 800a37a:	4621      	mov	r1, r4
 800a37c:	4638      	mov	r0, r7
 800a37e:	f7ff ffa5 	bl	800a2cc <_Bfree>
 800a382:	4644      	mov	r4, r8
 800a384:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a388:	3501      	adds	r5, #1
 800a38a:	615e      	str	r6, [r3, #20]
 800a38c:	6125      	str	r5, [r4, #16]
 800a38e:	4620      	mov	r0, r4
 800a390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a394:	0800f205 	.word	0x0800f205
 800a398:	0800f216 	.word	0x0800f216

0800a39c <__s2b>:
 800a39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	4615      	mov	r5, r2
 800a3a4:	461f      	mov	r7, r3
 800a3a6:	2209      	movs	r2, #9
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	db09      	blt.n	800a3cc <__s2b+0x30>
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff ff47 	bl	800a24c <_Balloc>
 800a3be:	b940      	cbnz	r0, 800a3d2 <__s2b+0x36>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	4b19      	ldr	r3, [pc, #100]	; (800a428 <__s2b+0x8c>)
 800a3c4:	4819      	ldr	r0, [pc, #100]	; (800a42c <__s2b+0x90>)
 800a3c6:	21d3      	movs	r1, #211	; 0xd3
 800a3c8:	f001 fcce 	bl	800bd68 <__assert_func>
 800a3cc:	0052      	lsls	r2, r2, #1
 800a3ce:	3101      	adds	r1, #1
 800a3d0:	e7f0      	b.n	800a3b4 <__s2b+0x18>
 800a3d2:	9b08      	ldr	r3, [sp, #32]
 800a3d4:	6143      	str	r3, [r0, #20]
 800a3d6:	2d09      	cmp	r5, #9
 800a3d8:	f04f 0301 	mov.w	r3, #1
 800a3dc:	6103      	str	r3, [r0, #16]
 800a3de:	dd16      	ble.n	800a40e <__s2b+0x72>
 800a3e0:	f104 0909 	add.w	r9, r4, #9
 800a3e4:	46c8      	mov	r8, r9
 800a3e6:	442c      	add	r4, r5
 800a3e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3ec:	4601      	mov	r1, r0
 800a3ee:	3b30      	subs	r3, #48	; 0x30
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f7ff ff8c 	bl	800a310 <__multadd>
 800a3f8:	45a0      	cmp	r8, r4
 800a3fa:	d1f5      	bne.n	800a3e8 <__s2b+0x4c>
 800a3fc:	f1a5 0408 	sub.w	r4, r5, #8
 800a400:	444c      	add	r4, r9
 800a402:	1b2d      	subs	r5, r5, r4
 800a404:	1963      	adds	r3, r4, r5
 800a406:	42bb      	cmp	r3, r7
 800a408:	db04      	blt.n	800a414 <__s2b+0x78>
 800a40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a40e:	340a      	adds	r4, #10
 800a410:	2509      	movs	r5, #9
 800a412:	e7f6      	b.n	800a402 <__s2b+0x66>
 800a414:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a418:	4601      	mov	r1, r0
 800a41a:	3b30      	subs	r3, #48	; 0x30
 800a41c:	220a      	movs	r2, #10
 800a41e:	4630      	mov	r0, r6
 800a420:	f7ff ff76 	bl	800a310 <__multadd>
 800a424:	e7ee      	b.n	800a404 <__s2b+0x68>
 800a426:	bf00      	nop
 800a428:	0800f205 	.word	0x0800f205
 800a42c:	0800f216 	.word	0x0800f216

0800a430 <__hi0bits>:
 800a430:	0c03      	lsrs	r3, r0, #16
 800a432:	041b      	lsls	r3, r3, #16
 800a434:	b9d3      	cbnz	r3, 800a46c <__hi0bits+0x3c>
 800a436:	0400      	lsls	r0, r0, #16
 800a438:	2310      	movs	r3, #16
 800a43a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a43e:	bf04      	itt	eq
 800a440:	0200      	lsleq	r0, r0, #8
 800a442:	3308      	addeq	r3, #8
 800a444:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a448:	bf04      	itt	eq
 800a44a:	0100      	lsleq	r0, r0, #4
 800a44c:	3304      	addeq	r3, #4
 800a44e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a452:	bf04      	itt	eq
 800a454:	0080      	lsleq	r0, r0, #2
 800a456:	3302      	addeq	r3, #2
 800a458:	2800      	cmp	r0, #0
 800a45a:	db05      	blt.n	800a468 <__hi0bits+0x38>
 800a45c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a460:	f103 0301 	add.w	r3, r3, #1
 800a464:	bf08      	it	eq
 800a466:	2320      	moveq	r3, #32
 800a468:	4618      	mov	r0, r3
 800a46a:	4770      	bx	lr
 800a46c:	2300      	movs	r3, #0
 800a46e:	e7e4      	b.n	800a43a <__hi0bits+0xa>

0800a470 <__lo0bits>:
 800a470:	6803      	ldr	r3, [r0, #0]
 800a472:	f013 0207 	ands.w	r2, r3, #7
 800a476:	d00c      	beq.n	800a492 <__lo0bits+0x22>
 800a478:	07d9      	lsls	r1, r3, #31
 800a47a:	d422      	bmi.n	800a4c2 <__lo0bits+0x52>
 800a47c:	079a      	lsls	r2, r3, #30
 800a47e:	bf49      	itett	mi
 800a480:	085b      	lsrmi	r3, r3, #1
 800a482:	089b      	lsrpl	r3, r3, #2
 800a484:	6003      	strmi	r3, [r0, #0]
 800a486:	2201      	movmi	r2, #1
 800a488:	bf5c      	itt	pl
 800a48a:	6003      	strpl	r3, [r0, #0]
 800a48c:	2202      	movpl	r2, #2
 800a48e:	4610      	mov	r0, r2
 800a490:	4770      	bx	lr
 800a492:	b299      	uxth	r1, r3
 800a494:	b909      	cbnz	r1, 800a49a <__lo0bits+0x2a>
 800a496:	0c1b      	lsrs	r3, r3, #16
 800a498:	2210      	movs	r2, #16
 800a49a:	b2d9      	uxtb	r1, r3
 800a49c:	b909      	cbnz	r1, 800a4a2 <__lo0bits+0x32>
 800a49e:	3208      	adds	r2, #8
 800a4a0:	0a1b      	lsrs	r3, r3, #8
 800a4a2:	0719      	lsls	r1, r3, #28
 800a4a4:	bf04      	itt	eq
 800a4a6:	091b      	lsreq	r3, r3, #4
 800a4a8:	3204      	addeq	r2, #4
 800a4aa:	0799      	lsls	r1, r3, #30
 800a4ac:	bf04      	itt	eq
 800a4ae:	089b      	lsreq	r3, r3, #2
 800a4b0:	3202      	addeq	r2, #2
 800a4b2:	07d9      	lsls	r1, r3, #31
 800a4b4:	d403      	bmi.n	800a4be <__lo0bits+0x4e>
 800a4b6:	085b      	lsrs	r3, r3, #1
 800a4b8:	f102 0201 	add.w	r2, r2, #1
 800a4bc:	d003      	beq.n	800a4c6 <__lo0bits+0x56>
 800a4be:	6003      	str	r3, [r0, #0]
 800a4c0:	e7e5      	b.n	800a48e <__lo0bits+0x1e>
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	e7e3      	b.n	800a48e <__lo0bits+0x1e>
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	e7e1      	b.n	800a48e <__lo0bits+0x1e>
	...

0800a4cc <__i2b>:
 800a4cc:	b510      	push	{r4, lr}
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	f7ff febb 	bl	800a24c <_Balloc>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	b928      	cbnz	r0, 800a4e6 <__i2b+0x1a>
 800a4da:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <__i2b+0x24>)
 800a4dc:	4805      	ldr	r0, [pc, #20]	; (800a4f4 <__i2b+0x28>)
 800a4de:	f240 1145 	movw	r1, #325	; 0x145
 800a4e2:	f001 fc41 	bl	800bd68 <__assert_func>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	6144      	str	r4, [r0, #20]
 800a4ea:	6103      	str	r3, [r0, #16]
 800a4ec:	bd10      	pop	{r4, pc}
 800a4ee:	bf00      	nop
 800a4f0:	0800f205 	.word	0x0800f205
 800a4f4:	0800f216 	.word	0x0800f216

0800a4f8 <__multiply>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	4691      	mov	r9, r2
 800a4fe:	690a      	ldr	r2, [r1, #16]
 800a500:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a504:	429a      	cmp	r2, r3
 800a506:	bfb8      	it	lt
 800a508:	460b      	movlt	r3, r1
 800a50a:	460c      	mov	r4, r1
 800a50c:	bfbc      	itt	lt
 800a50e:	464c      	movlt	r4, r9
 800a510:	4699      	movlt	r9, r3
 800a512:	6927      	ldr	r7, [r4, #16]
 800a514:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a518:	68a3      	ldr	r3, [r4, #8]
 800a51a:	6861      	ldr	r1, [r4, #4]
 800a51c:	eb07 060a 	add.w	r6, r7, sl
 800a520:	42b3      	cmp	r3, r6
 800a522:	b085      	sub	sp, #20
 800a524:	bfb8      	it	lt
 800a526:	3101      	addlt	r1, #1
 800a528:	f7ff fe90 	bl	800a24c <_Balloc>
 800a52c:	b930      	cbnz	r0, 800a53c <__multiply+0x44>
 800a52e:	4602      	mov	r2, r0
 800a530:	4b44      	ldr	r3, [pc, #272]	; (800a644 <__multiply+0x14c>)
 800a532:	4845      	ldr	r0, [pc, #276]	; (800a648 <__multiply+0x150>)
 800a534:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a538:	f001 fc16 	bl	800bd68 <__assert_func>
 800a53c:	f100 0514 	add.w	r5, r0, #20
 800a540:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a544:	462b      	mov	r3, r5
 800a546:	2200      	movs	r2, #0
 800a548:	4543      	cmp	r3, r8
 800a54a:	d321      	bcc.n	800a590 <__multiply+0x98>
 800a54c:	f104 0314 	add.w	r3, r4, #20
 800a550:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a554:	f109 0314 	add.w	r3, r9, #20
 800a558:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a55c:	9202      	str	r2, [sp, #8]
 800a55e:	1b3a      	subs	r2, r7, r4
 800a560:	3a15      	subs	r2, #21
 800a562:	f022 0203 	bic.w	r2, r2, #3
 800a566:	3204      	adds	r2, #4
 800a568:	f104 0115 	add.w	r1, r4, #21
 800a56c:	428f      	cmp	r7, r1
 800a56e:	bf38      	it	cc
 800a570:	2204      	movcc	r2, #4
 800a572:	9201      	str	r2, [sp, #4]
 800a574:	9a02      	ldr	r2, [sp, #8]
 800a576:	9303      	str	r3, [sp, #12]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d80c      	bhi.n	800a596 <__multiply+0x9e>
 800a57c:	2e00      	cmp	r6, #0
 800a57e:	dd03      	ble.n	800a588 <__multiply+0x90>
 800a580:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a584:	2b00      	cmp	r3, #0
 800a586:	d05b      	beq.n	800a640 <__multiply+0x148>
 800a588:	6106      	str	r6, [r0, #16]
 800a58a:	b005      	add	sp, #20
 800a58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a590:	f843 2b04 	str.w	r2, [r3], #4
 800a594:	e7d8      	b.n	800a548 <__multiply+0x50>
 800a596:	f8b3 a000 	ldrh.w	sl, [r3]
 800a59a:	f1ba 0f00 	cmp.w	sl, #0
 800a59e:	d024      	beq.n	800a5ea <__multiply+0xf2>
 800a5a0:	f104 0e14 	add.w	lr, r4, #20
 800a5a4:	46a9      	mov	r9, r5
 800a5a6:	f04f 0c00 	mov.w	ip, #0
 800a5aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a5ae:	f8d9 1000 	ldr.w	r1, [r9]
 800a5b2:	fa1f fb82 	uxth.w	fp, r2
 800a5b6:	b289      	uxth	r1, r1
 800a5b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a5c4:	4461      	add	r1, ip
 800a5c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5d2:	b289      	uxth	r1, r1
 800a5d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5d8:	4577      	cmp	r7, lr
 800a5da:	f849 1b04 	str.w	r1, [r9], #4
 800a5de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5e2:	d8e2      	bhi.n	800a5aa <__multiply+0xb2>
 800a5e4:	9a01      	ldr	r2, [sp, #4]
 800a5e6:	f845 c002 	str.w	ip, [r5, r2]
 800a5ea:	9a03      	ldr	r2, [sp, #12]
 800a5ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	f1b9 0f00 	cmp.w	r9, #0
 800a5f6:	d021      	beq.n	800a63c <__multiply+0x144>
 800a5f8:	6829      	ldr	r1, [r5, #0]
 800a5fa:	f104 0c14 	add.w	ip, r4, #20
 800a5fe:	46ae      	mov	lr, r5
 800a600:	f04f 0a00 	mov.w	sl, #0
 800a604:	f8bc b000 	ldrh.w	fp, [ip]
 800a608:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a60c:	fb09 220b 	mla	r2, r9, fp, r2
 800a610:	4452      	add	r2, sl
 800a612:	b289      	uxth	r1, r1
 800a614:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a618:	f84e 1b04 	str.w	r1, [lr], #4
 800a61c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a620:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a624:	f8be 1000 	ldrh.w	r1, [lr]
 800a628:	fb09 110a 	mla	r1, r9, sl, r1
 800a62c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a630:	4567      	cmp	r7, ip
 800a632:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a636:	d8e5      	bhi.n	800a604 <__multiply+0x10c>
 800a638:	9a01      	ldr	r2, [sp, #4]
 800a63a:	50a9      	str	r1, [r5, r2]
 800a63c:	3504      	adds	r5, #4
 800a63e:	e799      	b.n	800a574 <__multiply+0x7c>
 800a640:	3e01      	subs	r6, #1
 800a642:	e79b      	b.n	800a57c <__multiply+0x84>
 800a644:	0800f205 	.word	0x0800f205
 800a648:	0800f216 	.word	0x0800f216

0800a64c <__pow5mult>:
 800a64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a650:	4615      	mov	r5, r2
 800a652:	f012 0203 	ands.w	r2, r2, #3
 800a656:	4606      	mov	r6, r0
 800a658:	460f      	mov	r7, r1
 800a65a:	d007      	beq.n	800a66c <__pow5mult+0x20>
 800a65c:	4c25      	ldr	r4, [pc, #148]	; (800a6f4 <__pow5mult+0xa8>)
 800a65e:	3a01      	subs	r2, #1
 800a660:	2300      	movs	r3, #0
 800a662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a666:	f7ff fe53 	bl	800a310 <__multadd>
 800a66a:	4607      	mov	r7, r0
 800a66c:	10ad      	asrs	r5, r5, #2
 800a66e:	d03d      	beq.n	800a6ec <__pow5mult+0xa0>
 800a670:	69f4      	ldr	r4, [r6, #28]
 800a672:	b97c      	cbnz	r4, 800a694 <__pow5mult+0x48>
 800a674:	2010      	movs	r0, #16
 800a676:	f7fd fdff 	bl	8008278 <malloc>
 800a67a:	4602      	mov	r2, r0
 800a67c:	61f0      	str	r0, [r6, #28]
 800a67e:	b928      	cbnz	r0, 800a68c <__pow5mult+0x40>
 800a680:	4b1d      	ldr	r3, [pc, #116]	; (800a6f8 <__pow5mult+0xac>)
 800a682:	481e      	ldr	r0, [pc, #120]	; (800a6fc <__pow5mult+0xb0>)
 800a684:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a688:	f001 fb6e 	bl	800bd68 <__assert_func>
 800a68c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a690:	6004      	str	r4, [r0, #0]
 800a692:	60c4      	str	r4, [r0, #12]
 800a694:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a69c:	b94c      	cbnz	r4, 800a6b2 <__pow5mult+0x66>
 800a69e:	f240 2171 	movw	r1, #625	; 0x271
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f7ff ff12 	bl	800a4cc <__i2b>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	6003      	str	r3, [r0, #0]
 800a6b2:	f04f 0900 	mov.w	r9, #0
 800a6b6:	07eb      	lsls	r3, r5, #31
 800a6b8:	d50a      	bpl.n	800a6d0 <__pow5mult+0x84>
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	4622      	mov	r2, r4
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f7ff ff1a 	bl	800a4f8 <__multiply>
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	4680      	mov	r8, r0
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f7ff fdff 	bl	800a2cc <_Bfree>
 800a6ce:	4647      	mov	r7, r8
 800a6d0:	106d      	asrs	r5, r5, #1
 800a6d2:	d00b      	beq.n	800a6ec <__pow5mult+0xa0>
 800a6d4:	6820      	ldr	r0, [r4, #0]
 800a6d6:	b938      	cbnz	r0, 800a6e8 <__pow5mult+0x9c>
 800a6d8:	4622      	mov	r2, r4
 800a6da:	4621      	mov	r1, r4
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f7ff ff0b 	bl	800a4f8 <__multiply>
 800a6e2:	6020      	str	r0, [r4, #0]
 800a6e4:	f8c0 9000 	str.w	r9, [r0]
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	e7e4      	b.n	800a6b6 <__pow5mult+0x6a>
 800a6ec:	4638      	mov	r0, r7
 800a6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f2:	bf00      	nop
 800a6f4:	0800f360 	.word	0x0800f360
 800a6f8:	0800f196 	.word	0x0800f196
 800a6fc:	0800f216 	.word	0x0800f216

0800a700 <__lshift>:
 800a700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a704:	460c      	mov	r4, r1
 800a706:	6849      	ldr	r1, [r1, #4]
 800a708:	6923      	ldr	r3, [r4, #16]
 800a70a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	4607      	mov	r7, r0
 800a712:	4691      	mov	r9, r2
 800a714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a718:	f108 0601 	add.w	r6, r8, #1
 800a71c:	42b3      	cmp	r3, r6
 800a71e:	db0b      	blt.n	800a738 <__lshift+0x38>
 800a720:	4638      	mov	r0, r7
 800a722:	f7ff fd93 	bl	800a24c <_Balloc>
 800a726:	4605      	mov	r5, r0
 800a728:	b948      	cbnz	r0, 800a73e <__lshift+0x3e>
 800a72a:	4602      	mov	r2, r0
 800a72c:	4b28      	ldr	r3, [pc, #160]	; (800a7d0 <__lshift+0xd0>)
 800a72e:	4829      	ldr	r0, [pc, #164]	; (800a7d4 <__lshift+0xd4>)
 800a730:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a734:	f001 fb18 	bl	800bd68 <__assert_func>
 800a738:	3101      	adds	r1, #1
 800a73a:	005b      	lsls	r3, r3, #1
 800a73c:	e7ee      	b.n	800a71c <__lshift+0x1c>
 800a73e:	2300      	movs	r3, #0
 800a740:	f100 0114 	add.w	r1, r0, #20
 800a744:	f100 0210 	add.w	r2, r0, #16
 800a748:	4618      	mov	r0, r3
 800a74a:	4553      	cmp	r3, sl
 800a74c:	db33      	blt.n	800a7b6 <__lshift+0xb6>
 800a74e:	6920      	ldr	r0, [r4, #16]
 800a750:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a754:	f104 0314 	add.w	r3, r4, #20
 800a758:	f019 091f 	ands.w	r9, r9, #31
 800a75c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a760:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a764:	d02b      	beq.n	800a7be <__lshift+0xbe>
 800a766:	f1c9 0e20 	rsb	lr, r9, #32
 800a76a:	468a      	mov	sl, r1
 800a76c:	2200      	movs	r2, #0
 800a76e:	6818      	ldr	r0, [r3, #0]
 800a770:	fa00 f009 	lsl.w	r0, r0, r9
 800a774:	4310      	orrs	r0, r2
 800a776:	f84a 0b04 	str.w	r0, [sl], #4
 800a77a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a77e:	459c      	cmp	ip, r3
 800a780:	fa22 f20e 	lsr.w	r2, r2, lr
 800a784:	d8f3      	bhi.n	800a76e <__lshift+0x6e>
 800a786:	ebac 0304 	sub.w	r3, ip, r4
 800a78a:	3b15      	subs	r3, #21
 800a78c:	f023 0303 	bic.w	r3, r3, #3
 800a790:	3304      	adds	r3, #4
 800a792:	f104 0015 	add.w	r0, r4, #21
 800a796:	4584      	cmp	ip, r0
 800a798:	bf38      	it	cc
 800a79a:	2304      	movcc	r3, #4
 800a79c:	50ca      	str	r2, [r1, r3]
 800a79e:	b10a      	cbz	r2, 800a7a4 <__lshift+0xa4>
 800a7a0:	f108 0602 	add.w	r6, r8, #2
 800a7a4:	3e01      	subs	r6, #1
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	612e      	str	r6, [r5, #16]
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	f7ff fd8e 	bl	800a2cc <_Bfree>
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	e7c5      	b.n	800a74a <__lshift+0x4a>
 800a7be:	3904      	subs	r1, #4
 800a7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7c8:	459c      	cmp	ip, r3
 800a7ca:	d8f9      	bhi.n	800a7c0 <__lshift+0xc0>
 800a7cc:	e7ea      	b.n	800a7a4 <__lshift+0xa4>
 800a7ce:	bf00      	nop
 800a7d0:	0800f205 	.word	0x0800f205
 800a7d4:	0800f216 	.word	0x0800f216

0800a7d8 <__mcmp>:
 800a7d8:	b530      	push	{r4, r5, lr}
 800a7da:	6902      	ldr	r2, [r0, #16]
 800a7dc:	690c      	ldr	r4, [r1, #16]
 800a7de:	1b12      	subs	r2, r2, r4
 800a7e0:	d10e      	bne.n	800a800 <__mcmp+0x28>
 800a7e2:	f100 0314 	add.w	r3, r0, #20
 800a7e6:	3114      	adds	r1, #20
 800a7e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7f8:	42a5      	cmp	r5, r4
 800a7fa:	d003      	beq.n	800a804 <__mcmp+0x2c>
 800a7fc:	d305      	bcc.n	800a80a <__mcmp+0x32>
 800a7fe:	2201      	movs	r2, #1
 800a800:	4610      	mov	r0, r2
 800a802:	bd30      	pop	{r4, r5, pc}
 800a804:	4283      	cmp	r3, r0
 800a806:	d3f3      	bcc.n	800a7f0 <__mcmp+0x18>
 800a808:	e7fa      	b.n	800a800 <__mcmp+0x28>
 800a80a:	f04f 32ff 	mov.w	r2, #4294967295
 800a80e:	e7f7      	b.n	800a800 <__mcmp+0x28>

0800a810 <__mdiff>:
 800a810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	460c      	mov	r4, r1
 800a816:	4606      	mov	r6, r0
 800a818:	4611      	mov	r1, r2
 800a81a:	4620      	mov	r0, r4
 800a81c:	4690      	mov	r8, r2
 800a81e:	f7ff ffdb 	bl	800a7d8 <__mcmp>
 800a822:	1e05      	subs	r5, r0, #0
 800a824:	d110      	bne.n	800a848 <__mdiff+0x38>
 800a826:	4629      	mov	r1, r5
 800a828:	4630      	mov	r0, r6
 800a82a:	f7ff fd0f 	bl	800a24c <_Balloc>
 800a82e:	b930      	cbnz	r0, 800a83e <__mdiff+0x2e>
 800a830:	4b3a      	ldr	r3, [pc, #232]	; (800a91c <__mdiff+0x10c>)
 800a832:	4602      	mov	r2, r0
 800a834:	f240 2137 	movw	r1, #567	; 0x237
 800a838:	4839      	ldr	r0, [pc, #228]	; (800a920 <__mdiff+0x110>)
 800a83a:	f001 fa95 	bl	800bd68 <__assert_func>
 800a83e:	2301      	movs	r3, #1
 800a840:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a848:	bfa4      	itt	ge
 800a84a:	4643      	movge	r3, r8
 800a84c:	46a0      	movge	r8, r4
 800a84e:	4630      	mov	r0, r6
 800a850:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a854:	bfa6      	itte	ge
 800a856:	461c      	movge	r4, r3
 800a858:	2500      	movge	r5, #0
 800a85a:	2501      	movlt	r5, #1
 800a85c:	f7ff fcf6 	bl	800a24c <_Balloc>
 800a860:	b920      	cbnz	r0, 800a86c <__mdiff+0x5c>
 800a862:	4b2e      	ldr	r3, [pc, #184]	; (800a91c <__mdiff+0x10c>)
 800a864:	4602      	mov	r2, r0
 800a866:	f240 2145 	movw	r1, #581	; 0x245
 800a86a:	e7e5      	b.n	800a838 <__mdiff+0x28>
 800a86c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a870:	6926      	ldr	r6, [r4, #16]
 800a872:	60c5      	str	r5, [r0, #12]
 800a874:	f104 0914 	add.w	r9, r4, #20
 800a878:	f108 0514 	add.w	r5, r8, #20
 800a87c:	f100 0e14 	add.w	lr, r0, #20
 800a880:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a884:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a888:	f108 0210 	add.w	r2, r8, #16
 800a88c:	46f2      	mov	sl, lr
 800a88e:	2100      	movs	r1, #0
 800a890:	f859 3b04 	ldr.w	r3, [r9], #4
 800a894:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a898:	fa11 f88b 	uxtah	r8, r1, fp
 800a89c:	b299      	uxth	r1, r3
 800a89e:	0c1b      	lsrs	r3, r3, #16
 800a8a0:	eba8 0801 	sub.w	r8, r8, r1
 800a8a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a8a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a8ac:	fa1f f888 	uxth.w	r8, r8
 800a8b0:	1419      	asrs	r1, r3, #16
 800a8b2:	454e      	cmp	r6, r9
 800a8b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8b8:	f84a 3b04 	str.w	r3, [sl], #4
 800a8bc:	d8e8      	bhi.n	800a890 <__mdiff+0x80>
 800a8be:	1b33      	subs	r3, r6, r4
 800a8c0:	3b15      	subs	r3, #21
 800a8c2:	f023 0303 	bic.w	r3, r3, #3
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	3415      	adds	r4, #21
 800a8ca:	42a6      	cmp	r6, r4
 800a8cc:	bf38      	it	cc
 800a8ce:	2304      	movcc	r3, #4
 800a8d0:	441d      	add	r5, r3
 800a8d2:	4473      	add	r3, lr
 800a8d4:	469e      	mov	lr, r3
 800a8d6:	462e      	mov	r6, r5
 800a8d8:	4566      	cmp	r6, ip
 800a8da:	d30e      	bcc.n	800a8fa <__mdiff+0xea>
 800a8dc:	f10c 0203 	add.w	r2, ip, #3
 800a8e0:	1b52      	subs	r2, r2, r5
 800a8e2:	f022 0203 	bic.w	r2, r2, #3
 800a8e6:	3d03      	subs	r5, #3
 800a8e8:	45ac      	cmp	ip, r5
 800a8ea:	bf38      	it	cc
 800a8ec:	2200      	movcc	r2, #0
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8f4:	b17a      	cbz	r2, 800a916 <__mdiff+0x106>
 800a8f6:	6107      	str	r7, [r0, #16]
 800a8f8:	e7a4      	b.n	800a844 <__mdiff+0x34>
 800a8fa:	f856 8b04 	ldr.w	r8, [r6], #4
 800a8fe:	fa11 f288 	uxtah	r2, r1, r8
 800a902:	1414      	asrs	r4, r2, #16
 800a904:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a908:	b292      	uxth	r2, r2
 800a90a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a90e:	f84e 2b04 	str.w	r2, [lr], #4
 800a912:	1421      	asrs	r1, r4, #16
 800a914:	e7e0      	b.n	800a8d8 <__mdiff+0xc8>
 800a916:	3f01      	subs	r7, #1
 800a918:	e7ea      	b.n	800a8f0 <__mdiff+0xe0>
 800a91a:	bf00      	nop
 800a91c:	0800f205 	.word	0x0800f205
 800a920:	0800f216 	.word	0x0800f216

0800a924 <__ulp>:
 800a924:	b082      	sub	sp, #8
 800a926:	ed8d 0b00 	vstr	d0, [sp]
 800a92a:	9a01      	ldr	r2, [sp, #4]
 800a92c:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <__ulp+0x48>)
 800a92e:	4013      	ands	r3, r2
 800a930:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a934:	2b00      	cmp	r3, #0
 800a936:	dc08      	bgt.n	800a94a <__ulp+0x26>
 800a938:	425b      	negs	r3, r3
 800a93a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a93e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a942:	da04      	bge.n	800a94e <__ulp+0x2a>
 800a944:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a948:	4113      	asrs	r3, r2
 800a94a:	2200      	movs	r2, #0
 800a94c:	e008      	b.n	800a960 <__ulp+0x3c>
 800a94e:	f1a2 0314 	sub.w	r3, r2, #20
 800a952:	2b1e      	cmp	r3, #30
 800a954:	bfda      	itte	le
 800a956:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a95a:	40da      	lsrle	r2, r3
 800a95c:	2201      	movgt	r2, #1
 800a95e:	2300      	movs	r3, #0
 800a960:	4619      	mov	r1, r3
 800a962:	4610      	mov	r0, r2
 800a964:	ec41 0b10 	vmov	d0, r0, r1
 800a968:	b002      	add	sp, #8
 800a96a:	4770      	bx	lr
 800a96c:	7ff00000 	.word	0x7ff00000

0800a970 <__b2d>:
 800a970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	6906      	ldr	r6, [r0, #16]
 800a976:	f100 0814 	add.w	r8, r0, #20
 800a97a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a97e:	1f37      	subs	r7, r6, #4
 800a980:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a984:	4610      	mov	r0, r2
 800a986:	f7ff fd53 	bl	800a430 <__hi0bits>
 800a98a:	f1c0 0320 	rsb	r3, r0, #32
 800a98e:	280a      	cmp	r0, #10
 800a990:	600b      	str	r3, [r1, #0]
 800a992:	491b      	ldr	r1, [pc, #108]	; (800aa00 <__b2d+0x90>)
 800a994:	dc15      	bgt.n	800a9c2 <__b2d+0x52>
 800a996:	f1c0 0c0b 	rsb	ip, r0, #11
 800a99a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a99e:	45b8      	cmp	r8, r7
 800a9a0:	ea43 0501 	orr.w	r5, r3, r1
 800a9a4:	bf34      	ite	cc
 800a9a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a9aa:	2300      	movcs	r3, #0
 800a9ac:	3015      	adds	r0, #21
 800a9ae:	fa02 f000 	lsl.w	r0, r2, r0
 800a9b2:	fa23 f30c 	lsr.w	r3, r3, ip
 800a9b6:	4303      	orrs	r3, r0
 800a9b8:	461c      	mov	r4, r3
 800a9ba:	ec45 4b10 	vmov	d0, r4, r5
 800a9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c2:	45b8      	cmp	r8, r7
 800a9c4:	bf3a      	itte	cc
 800a9c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a9ca:	f1a6 0708 	subcc.w	r7, r6, #8
 800a9ce:	2300      	movcs	r3, #0
 800a9d0:	380b      	subs	r0, #11
 800a9d2:	d012      	beq.n	800a9fa <__b2d+0x8a>
 800a9d4:	f1c0 0120 	rsb	r1, r0, #32
 800a9d8:	fa23 f401 	lsr.w	r4, r3, r1
 800a9dc:	4082      	lsls	r2, r0
 800a9de:	4322      	orrs	r2, r4
 800a9e0:	4547      	cmp	r7, r8
 800a9e2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a9e6:	bf8c      	ite	hi
 800a9e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a9ec:	2200      	movls	r2, #0
 800a9ee:	4083      	lsls	r3, r0
 800a9f0:	40ca      	lsrs	r2, r1
 800a9f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	e7de      	b.n	800a9b8 <__b2d+0x48>
 800a9fa:	ea42 0501 	orr.w	r5, r2, r1
 800a9fe:	e7db      	b.n	800a9b8 <__b2d+0x48>
 800aa00:	3ff00000 	.word	0x3ff00000

0800aa04 <__d2b>:
 800aa04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa08:	460f      	mov	r7, r1
 800aa0a:	2101      	movs	r1, #1
 800aa0c:	ec59 8b10 	vmov	r8, r9, d0
 800aa10:	4616      	mov	r6, r2
 800aa12:	f7ff fc1b 	bl	800a24c <_Balloc>
 800aa16:	4604      	mov	r4, r0
 800aa18:	b930      	cbnz	r0, 800aa28 <__d2b+0x24>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	4b24      	ldr	r3, [pc, #144]	; (800aab0 <__d2b+0xac>)
 800aa1e:	4825      	ldr	r0, [pc, #148]	; (800aab4 <__d2b+0xb0>)
 800aa20:	f240 310f 	movw	r1, #783	; 0x30f
 800aa24:	f001 f9a0 	bl	800bd68 <__assert_func>
 800aa28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa30:	bb2d      	cbnz	r5, 800aa7e <__d2b+0x7a>
 800aa32:	9301      	str	r3, [sp, #4]
 800aa34:	f1b8 0300 	subs.w	r3, r8, #0
 800aa38:	d026      	beq.n	800aa88 <__d2b+0x84>
 800aa3a:	4668      	mov	r0, sp
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	f7ff fd17 	bl	800a470 <__lo0bits>
 800aa42:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa46:	b1e8      	cbz	r0, 800aa84 <__d2b+0x80>
 800aa48:	f1c0 0320 	rsb	r3, r0, #32
 800aa4c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa50:	430b      	orrs	r3, r1
 800aa52:	40c2      	lsrs	r2, r0
 800aa54:	6163      	str	r3, [r4, #20]
 800aa56:	9201      	str	r2, [sp, #4]
 800aa58:	9b01      	ldr	r3, [sp, #4]
 800aa5a:	61a3      	str	r3, [r4, #24]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bf14      	ite	ne
 800aa60:	2202      	movne	r2, #2
 800aa62:	2201      	moveq	r2, #1
 800aa64:	6122      	str	r2, [r4, #16]
 800aa66:	b1bd      	cbz	r5, 800aa98 <__d2b+0x94>
 800aa68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa6c:	4405      	add	r5, r0
 800aa6e:	603d      	str	r5, [r7, #0]
 800aa70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa74:	6030      	str	r0, [r6, #0]
 800aa76:	4620      	mov	r0, r4
 800aa78:	b003      	add	sp, #12
 800aa7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa82:	e7d6      	b.n	800aa32 <__d2b+0x2e>
 800aa84:	6161      	str	r1, [r4, #20]
 800aa86:	e7e7      	b.n	800aa58 <__d2b+0x54>
 800aa88:	a801      	add	r0, sp, #4
 800aa8a:	f7ff fcf1 	bl	800a470 <__lo0bits>
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	6163      	str	r3, [r4, #20]
 800aa92:	3020      	adds	r0, #32
 800aa94:	2201      	movs	r2, #1
 800aa96:	e7e5      	b.n	800aa64 <__d2b+0x60>
 800aa98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aaa0:	6038      	str	r0, [r7, #0]
 800aaa2:	6918      	ldr	r0, [r3, #16]
 800aaa4:	f7ff fcc4 	bl	800a430 <__hi0bits>
 800aaa8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aaac:	e7e2      	b.n	800aa74 <__d2b+0x70>
 800aaae:	bf00      	nop
 800aab0:	0800f205 	.word	0x0800f205
 800aab4:	0800f216 	.word	0x0800f216

0800aab8 <__ratio>:
 800aab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aabc:	4688      	mov	r8, r1
 800aabe:	4669      	mov	r1, sp
 800aac0:	4681      	mov	r9, r0
 800aac2:	f7ff ff55 	bl	800a970 <__b2d>
 800aac6:	a901      	add	r1, sp, #4
 800aac8:	4640      	mov	r0, r8
 800aaca:	ec55 4b10 	vmov	r4, r5, d0
 800aace:	f7ff ff4f 	bl	800a970 <__b2d>
 800aad2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aad6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aada:	eba3 0c02 	sub.w	ip, r3, r2
 800aade:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aae2:	1a9b      	subs	r3, r3, r2
 800aae4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aae8:	ec51 0b10 	vmov	r0, r1, d0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	bfd6      	itet	le
 800aaf0:	460a      	movle	r2, r1
 800aaf2:	462a      	movgt	r2, r5
 800aaf4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aaf8:	468b      	mov	fp, r1
 800aafa:	462f      	mov	r7, r5
 800aafc:	bfd4      	ite	le
 800aafe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab06:	4620      	mov	r0, r4
 800ab08:	ee10 2a10 	vmov	r2, s0
 800ab0c:	465b      	mov	r3, fp
 800ab0e:	4639      	mov	r1, r7
 800ab10:	f7f5 fe9c 	bl	800084c <__aeabi_ddiv>
 800ab14:	ec41 0b10 	vmov	d0, r0, r1
 800ab18:	b003      	add	sp, #12
 800ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab1e <__copybits>:
 800ab1e:	3901      	subs	r1, #1
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	1149      	asrs	r1, r1, #5
 800ab24:	6914      	ldr	r4, [r2, #16]
 800ab26:	3101      	adds	r1, #1
 800ab28:	f102 0314 	add.w	r3, r2, #20
 800ab2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab34:	1f05      	subs	r5, r0, #4
 800ab36:	42a3      	cmp	r3, r4
 800ab38:	d30c      	bcc.n	800ab54 <__copybits+0x36>
 800ab3a:	1aa3      	subs	r3, r4, r2
 800ab3c:	3b11      	subs	r3, #17
 800ab3e:	f023 0303 	bic.w	r3, r3, #3
 800ab42:	3211      	adds	r2, #17
 800ab44:	42a2      	cmp	r2, r4
 800ab46:	bf88      	it	hi
 800ab48:	2300      	movhi	r3, #0
 800ab4a:	4418      	add	r0, r3
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4288      	cmp	r0, r1
 800ab50:	d305      	bcc.n	800ab5e <__copybits+0x40>
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab58:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab5c:	e7eb      	b.n	800ab36 <__copybits+0x18>
 800ab5e:	f840 3b04 	str.w	r3, [r0], #4
 800ab62:	e7f4      	b.n	800ab4e <__copybits+0x30>

0800ab64 <__any_on>:
 800ab64:	f100 0214 	add.w	r2, r0, #20
 800ab68:	6900      	ldr	r0, [r0, #16]
 800ab6a:	114b      	asrs	r3, r1, #5
 800ab6c:	4298      	cmp	r0, r3
 800ab6e:	b510      	push	{r4, lr}
 800ab70:	db11      	blt.n	800ab96 <__any_on+0x32>
 800ab72:	dd0a      	ble.n	800ab8a <__any_on+0x26>
 800ab74:	f011 011f 	ands.w	r1, r1, #31
 800ab78:	d007      	beq.n	800ab8a <__any_on+0x26>
 800ab7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab7e:	fa24 f001 	lsr.w	r0, r4, r1
 800ab82:	fa00 f101 	lsl.w	r1, r0, r1
 800ab86:	428c      	cmp	r4, r1
 800ab88:	d10b      	bne.n	800aba2 <__any_on+0x3e>
 800ab8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d803      	bhi.n	800ab9a <__any_on+0x36>
 800ab92:	2000      	movs	r0, #0
 800ab94:	bd10      	pop	{r4, pc}
 800ab96:	4603      	mov	r3, r0
 800ab98:	e7f7      	b.n	800ab8a <__any_on+0x26>
 800ab9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab9e:	2900      	cmp	r1, #0
 800aba0:	d0f5      	beq.n	800ab8e <__any_on+0x2a>
 800aba2:	2001      	movs	r0, #1
 800aba4:	e7f6      	b.n	800ab94 <__any_on+0x30>

0800aba6 <sulp>:
 800aba6:	b570      	push	{r4, r5, r6, lr}
 800aba8:	4604      	mov	r4, r0
 800abaa:	460d      	mov	r5, r1
 800abac:	ec45 4b10 	vmov	d0, r4, r5
 800abb0:	4616      	mov	r6, r2
 800abb2:	f7ff feb7 	bl	800a924 <__ulp>
 800abb6:	ec51 0b10 	vmov	r0, r1, d0
 800abba:	b17e      	cbz	r6, 800abdc <sulp+0x36>
 800abbc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800abc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	dd09      	ble.n	800abdc <sulp+0x36>
 800abc8:	051b      	lsls	r3, r3, #20
 800abca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800abce:	2400      	movs	r4, #0
 800abd0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800abd4:	4622      	mov	r2, r4
 800abd6:	462b      	mov	r3, r5
 800abd8:	f7f5 fd0e 	bl	80005f8 <__aeabi_dmul>
 800abdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800abe0 <_strtod_l>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	ed2d 8b02 	vpush	{d8}
 800abe8:	b09b      	sub	sp, #108	; 0x6c
 800abea:	4604      	mov	r4, r0
 800abec:	9213      	str	r2, [sp, #76]	; 0x4c
 800abee:	2200      	movs	r2, #0
 800abf0:	9216      	str	r2, [sp, #88]	; 0x58
 800abf2:	460d      	mov	r5, r1
 800abf4:	f04f 0800 	mov.w	r8, #0
 800abf8:	f04f 0900 	mov.w	r9, #0
 800abfc:	460a      	mov	r2, r1
 800abfe:	9215      	str	r2, [sp, #84]	; 0x54
 800ac00:	7811      	ldrb	r1, [r2, #0]
 800ac02:	292b      	cmp	r1, #43	; 0x2b
 800ac04:	d04c      	beq.n	800aca0 <_strtod_l+0xc0>
 800ac06:	d83a      	bhi.n	800ac7e <_strtod_l+0x9e>
 800ac08:	290d      	cmp	r1, #13
 800ac0a:	d834      	bhi.n	800ac76 <_strtod_l+0x96>
 800ac0c:	2908      	cmp	r1, #8
 800ac0e:	d834      	bhi.n	800ac7a <_strtod_l+0x9a>
 800ac10:	2900      	cmp	r1, #0
 800ac12:	d03d      	beq.n	800ac90 <_strtod_l+0xb0>
 800ac14:	2200      	movs	r2, #0
 800ac16:	920a      	str	r2, [sp, #40]	; 0x28
 800ac18:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ac1a:	7832      	ldrb	r2, [r6, #0]
 800ac1c:	2a30      	cmp	r2, #48	; 0x30
 800ac1e:	f040 80b4 	bne.w	800ad8a <_strtod_l+0x1aa>
 800ac22:	7872      	ldrb	r2, [r6, #1]
 800ac24:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ac28:	2a58      	cmp	r2, #88	; 0x58
 800ac2a:	d170      	bne.n	800ad0e <_strtod_l+0x12e>
 800ac2c:	9302      	str	r3, [sp, #8]
 800ac2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac30:	9301      	str	r3, [sp, #4]
 800ac32:	ab16      	add	r3, sp, #88	; 0x58
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	4a8e      	ldr	r2, [pc, #568]	; (800ae70 <_strtod_l+0x290>)
 800ac38:	ab17      	add	r3, sp, #92	; 0x5c
 800ac3a:	a915      	add	r1, sp, #84	; 0x54
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f001 f92f 	bl	800bea0 <__gethex>
 800ac42:	f010 070f 	ands.w	r7, r0, #15
 800ac46:	4605      	mov	r5, r0
 800ac48:	d005      	beq.n	800ac56 <_strtod_l+0x76>
 800ac4a:	2f06      	cmp	r7, #6
 800ac4c:	d12a      	bne.n	800aca4 <_strtod_l+0xc4>
 800ac4e:	3601      	adds	r6, #1
 800ac50:	2300      	movs	r3, #0
 800ac52:	9615      	str	r6, [sp, #84]	; 0x54
 800ac54:	930a      	str	r3, [sp, #40]	; 0x28
 800ac56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f040 857f 	bne.w	800b75c <_strtod_l+0xb7c>
 800ac5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac60:	b1db      	cbz	r3, 800ac9a <_strtod_l+0xba>
 800ac62:	4642      	mov	r2, r8
 800ac64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ac68:	ec43 2b10 	vmov	d0, r2, r3
 800ac6c:	b01b      	add	sp, #108	; 0x6c
 800ac6e:	ecbd 8b02 	vpop	{d8}
 800ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac76:	2920      	cmp	r1, #32
 800ac78:	d1cc      	bne.n	800ac14 <_strtod_l+0x34>
 800ac7a:	3201      	adds	r2, #1
 800ac7c:	e7bf      	b.n	800abfe <_strtod_l+0x1e>
 800ac7e:	292d      	cmp	r1, #45	; 0x2d
 800ac80:	d1c8      	bne.n	800ac14 <_strtod_l+0x34>
 800ac82:	2101      	movs	r1, #1
 800ac84:	910a      	str	r1, [sp, #40]	; 0x28
 800ac86:	1c51      	adds	r1, r2, #1
 800ac88:	9115      	str	r1, [sp, #84]	; 0x54
 800ac8a:	7852      	ldrb	r2, [r2, #1]
 800ac8c:	2a00      	cmp	r2, #0
 800ac8e:	d1c3      	bne.n	800ac18 <_strtod_l+0x38>
 800ac90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac92:	9515      	str	r5, [sp, #84]	; 0x54
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f040 855f 	bne.w	800b758 <_strtod_l+0xb78>
 800ac9a:	4642      	mov	r2, r8
 800ac9c:	464b      	mov	r3, r9
 800ac9e:	e7e3      	b.n	800ac68 <_strtod_l+0x88>
 800aca0:	2100      	movs	r1, #0
 800aca2:	e7ef      	b.n	800ac84 <_strtod_l+0xa4>
 800aca4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aca6:	b13a      	cbz	r2, 800acb8 <_strtod_l+0xd8>
 800aca8:	2135      	movs	r1, #53	; 0x35
 800acaa:	a818      	add	r0, sp, #96	; 0x60
 800acac:	f7ff ff37 	bl	800ab1e <__copybits>
 800acb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800acb2:	4620      	mov	r0, r4
 800acb4:	f7ff fb0a 	bl	800a2cc <_Bfree>
 800acb8:	3f01      	subs	r7, #1
 800acba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800acbc:	2f04      	cmp	r7, #4
 800acbe:	d806      	bhi.n	800acce <_strtod_l+0xee>
 800acc0:	e8df f007 	tbb	[pc, r7]
 800acc4:	201d0314 	.word	0x201d0314
 800acc8:	14          	.byte	0x14
 800acc9:	00          	.byte	0x00
 800acca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800acce:	05e9      	lsls	r1, r5, #23
 800acd0:	bf48      	it	mi
 800acd2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800acd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acda:	0d1b      	lsrs	r3, r3, #20
 800acdc:	051b      	lsls	r3, r3, #20
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1b9      	bne.n	800ac56 <_strtod_l+0x76>
 800ace2:	f7fe fbb7 	bl	8009454 <__errno>
 800ace6:	2322      	movs	r3, #34	; 0x22
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	e7b4      	b.n	800ac56 <_strtod_l+0x76>
 800acec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800acf0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800acf4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800acf8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800acfc:	e7e7      	b.n	800acce <_strtod_l+0xee>
 800acfe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ae78 <_strtod_l+0x298>
 800ad02:	e7e4      	b.n	800acce <_strtod_l+0xee>
 800ad04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ad08:	f04f 38ff 	mov.w	r8, #4294967295
 800ad0c:	e7df      	b.n	800acce <_strtod_l+0xee>
 800ad0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	9215      	str	r2, [sp, #84]	; 0x54
 800ad14:	785b      	ldrb	r3, [r3, #1]
 800ad16:	2b30      	cmp	r3, #48	; 0x30
 800ad18:	d0f9      	beq.n	800ad0e <_strtod_l+0x12e>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d09b      	beq.n	800ac56 <_strtod_l+0x76>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	f04f 0a00 	mov.w	sl, #0
 800ad24:	9304      	str	r3, [sp, #16]
 800ad26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad28:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ad2e:	46d3      	mov	fp, sl
 800ad30:	220a      	movs	r2, #10
 800ad32:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ad34:	7806      	ldrb	r6, [r0, #0]
 800ad36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ad3a:	b2d9      	uxtb	r1, r3
 800ad3c:	2909      	cmp	r1, #9
 800ad3e:	d926      	bls.n	800ad8e <_strtod_l+0x1ae>
 800ad40:	494c      	ldr	r1, [pc, #304]	; (800ae74 <_strtod_l+0x294>)
 800ad42:	2201      	movs	r2, #1
 800ad44:	f000 ffe6 	bl	800bd14 <strncmp>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d030      	beq.n	800adae <_strtod_l+0x1ce>
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	4632      	mov	r2, r6
 800ad50:	9005      	str	r0, [sp, #20]
 800ad52:	465e      	mov	r6, fp
 800ad54:	4603      	mov	r3, r0
 800ad56:	2a65      	cmp	r2, #101	; 0x65
 800ad58:	d001      	beq.n	800ad5e <_strtod_l+0x17e>
 800ad5a:	2a45      	cmp	r2, #69	; 0x45
 800ad5c:	d113      	bne.n	800ad86 <_strtod_l+0x1a6>
 800ad5e:	b91e      	cbnz	r6, 800ad68 <_strtod_l+0x188>
 800ad60:	9a04      	ldr	r2, [sp, #16]
 800ad62:	4302      	orrs	r2, r0
 800ad64:	d094      	beq.n	800ac90 <_strtod_l+0xb0>
 800ad66:	2600      	movs	r6, #0
 800ad68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ad6a:	1c6a      	adds	r2, r5, #1
 800ad6c:	9215      	str	r2, [sp, #84]	; 0x54
 800ad6e:	786a      	ldrb	r2, [r5, #1]
 800ad70:	2a2b      	cmp	r2, #43	; 0x2b
 800ad72:	d074      	beq.n	800ae5e <_strtod_l+0x27e>
 800ad74:	2a2d      	cmp	r2, #45	; 0x2d
 800ad76:	d078      	beq.n	800ae6a <_strtod_l+0x28a>
 800ad78:	f04f 0c00 	mov.w	ip, #0
 800ad7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ad80:	2909      	cmp	r1, #9
 800ad82:	d97f      	bls.n	800ae84 <_strtod_l+0x2a4>
 800ad84:	9515      	str	r5, [sp, #84]	; 0x54
 800ad86:	2700      	movs	r7, #0
 800ad88:	e09e      	b.n	800aec8 <_strtod_l+0x2e8>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	e7c8      	b.n	800ad20 <_strtod_l+0x140>
 800ad8e:	f1bb 0f08 	cmp.w	fp, #8
 800ad92:	bfd8      	it	le
 800ad94:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ad96:	f100 0001 	add.w	r0, r0, #1
 800ad9a:	bfda      	itte	le
 800ad9c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ada0:	9309      	strle	r3, [sp, #36]	; 0x24
 800ada2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ada6:	f10b 0b01 	add.w	fp, fp, #1
 800adaa:	9015      	str	r0, [sp, #84]	; 0x54
 800adac:	e7c1      	b.n	800ad32 <_strtod_l+0x152>
 800adae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	9215      	str	r2, [sp, #84]	; 0x54
 800adb4:	785a      	ldrb	r2, [r3, #1]
 800adb6:	f1bb 0f00 	cmp.w	fp, #0
 800adba:	d037      	beq.n	800ae2c <_strtod_l+0x24c>
 800adbc:	9005      	str	r0, [sp, #20]
 800adbe:	465e      	mov	r6, fp
 800adc0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800adc4:	2b09      	cmp	r3, #9
 800adc6:	d912      	bls.n	800adee <_strtod_l+0x20e>
 800adc8:	2301      	movs	r3, #1
 800adca:	e7c4      	b.n	800ad56 <_strtod_l+0x176>
 800adcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	9215      	str	r2, [sp, #84]	; 0x54
 800add2:	785a      	ldrb	r2, [r3, #1]
 800add4:	3001      	adds	r0, #1
 800add6:	2a30      	cmp	r2, #48	; 0x30
 800add8:	d0f8      	beq.n	800adcc <_strtod_l+0x1ec>
 800adda:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800adde:	2b08      	cmp	r3, #8
 800ade0:	f200 84c1 	bhi.w	800b766 <_strtod_l+0xb86>
 800ade4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ade6:	9005      	str	r0, [sp, #20]
 800ade8:	2000      	movs	r0, #0
 800adea:	930b      	str	r3, [sp, #44]	; 0x2c
 800adec:	4606      	mov	r6, r0
 800adee:	3a30      	subs	r2, #48	; 0x30
 800adf0:	f100 0301 	add.w	r3, r0, #1
 800adf4:	d014      	beq.n	800ae20 <_strtod_l+0x240>
 800adf6:	9905      	ldr	r1, [sp, #20]
 800adf8:	4419      	add	r1, r3
 800adfa:	9105      	str	r1, [sp, #20]
 800adfc:	4633      	mov	r3, r6
 800adfe:	eb00 0c06 	add.w	ip, r0, r6
 800ae02:	210a      	movs	r1, #10
 800ae04:	4563      	cmp	r3, ip
 800ae06:	d113      	bne.n	800ae30 <_strtod_l+0x250>
 800ae08:	1833      	adds	r3, r6, r0
 800ae0a:	2b08      	cmp	r3, #8
 800ae0c:	f106 0601 	add.w	r6, r6, #1
 800ae10:	4406      	add	r6, r0
 800ae12:	dc1a      	bgt.n	800ae4a <_strtod_l+0x26a>
 800ae14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae16:	230a      	movs	r3, #10
 800ae18:	fb03 2301 	mla	r3, r3, r1, r2
 800ae1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae1e:	2300      	movs	r3, #0
 800ae20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ae22:	1c51      	adds	r1, r2, #1
 800ae24:	9115      	str	r1, [sp, #84]	; 0x54
 800ae26:	7852      	ldrb	r2, [r2, #1]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	e7c9      	b.n	800adc0 <_strtod_l+0x1e0>
 800ae2c:	4658      	mov	r0, fp
 800ae2e:	e7d2      	b.n	800add6 <_strtod_l+0x1f6>
 800ae30:	2b08      	cmp	r3, #8
 800ae32:	f103 0301 	add.w	r3, r3, #1
 800ae36:	dc03      	bgt.n	800ae40 <_strtod_l+0x260>
 800ae38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ae3a:	434f      	muls	r7, r1
 800ae3c:	9709      	str	r7, [sp, #36]	; 0x24
 800ae3e:	e7e1      	b.n	800ae04 <_strtod_l+0x224>
 800ae40:	2b10      	cmp	r3, #16
 800ae42:	bfd8      	it	le
 800ae44:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ae48:	e7dc      	b.n	800ae04 <_strtod_l+0x224>
 800ae4a:	2e10      	cmp	r6, #16
 800ae4c:	bfdc      	itt	le
 800ae4e:	230a      	movle	r3, #10
 800ae50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ae54:	e7e3      	b.n	800ae1e <_strtod_l+0x23e>
 800ae56:	2300      	movs	r3, #0
 800ae58:	9305      	str	r3, [sp, #20]
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e780      	b.n	800ad60 <_strtod_l+0x180>
 800ae5e:	f04f 0c00 	mov.w	ip, #0
 800ae62:	1caa      	adds	r2, r5, #2
 800ae64:	9215      	str	r2, [sp, #84]	; 0x54
 800ae66:	78aa      	ldrb	r2, [r5, #2]
 800ae68:	e788      	b.n	800ad7c <_strtod_l+0x19c>
 800ae6a:	f04f 0c01 	mov.w	ip, #1
 800ae6e:	e7f8      	b.n	800ae62 <_strtod_l+0x282>
 800ae70:	0800f370 	.word	0x0800f370
 800ae74:	0800f36c 	.word	0x0800f36c
 800ae78:	7ff00000 	.word	0x7ff00000
 800ae7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ae7e:	1c51      	adds	r1, r2, #1
 800ae80:	9115      	str	r1, [sp, #84]	; 0x54
 800ae82:	7852      	ldrb	r2, [r2, #1]
 800ae84:	2a30      	cmp	r2, #48	; 0x30
 800ae86:	d0f9      	beq.n	800ae7c <_strtod_l+0x29c>
 800ae88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ae8c:	2908      	cmp	r1, #8
 800ae8e:	f63f af7a 	bhi.w	800ad86 <_strtod_l+0x1a6>
 800ae92:	3a30      	subs	r2, #48	; 0x30
 800ae94:	9208      	str	r2, [sp, #32]
 800ae96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ae98:	920c      	str	r2, [sp, #48]	; 0x30
 800ae9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ae9c:	1c57      	adds	r7, r2, #1
 800ae9e:	9715      	str	r7, [sp, #84]	; 0x54
 800aea0:	7852      	ldrb	r2, [r2, #1]
 800aea2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aea6:	f1be 0f09 	cmp.w	lr, #9
 800aeaa:	d938      	bls.n	800af1e <_strtod_l+0x33e>
 800aeac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aeae:	1a7f      	subs	r7, r7, r1
 800aeb0:	2f08      	cmp	r7, #8
 800aeb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800aeb6:	dc03      	bgt.n	800aec0 <_strtod_l+0x2e0>
 800aeb8:	9908      	ldr	r1, [sp, #32]
 800aeba:	428f      	cmp	r7, r1
 800aebc:	bfa8      	it	ge
 800aebe:	460f      	movge	r7, r1
 800aec0:	f1bc 0f00 	cmp.w	ip, #0
 800aec4:	d000      	beq.n	800aec8 <_strtod_l+0x2e8>
 800aec6:	427f      	negs	r7, r7
 800aec8:	2e00      	cmp	r6, #0
 800aeca:	d14f      	bne.n	800af6c <_strtod_l+0x38c>
 800aecc:	9904      	ldr	r1, [sp, #16]
 800aece:	4301      	orrs	r1, r0
 800aed0:	f47f aec1 	bne.w	800ac56 <_strtod_l+0x76>
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f47f aedb 	bne.w	800ac90 <_strtod_l+0xb0>
 800aeda:	2a69      	cmp	r2, #105	; 0x69
 800aedc:	d029      	beq.n	800af32 <_strtod_l+0x352>
 800aede:	dc26      	bgt.n	800af2e <_strtod_l+0x34e>
 800aee0:	2a49      	cmp	r2, #73	; 0x49
 800aee2:	d026      	beq.n	800af32 <_strtod_l+0x352>
 800aee4:	2a4e      	cmp	r2, #78	; 0x4e
 800aee6:	f47f aed3 	bne.w	800ac90 <_strtod_l+0xb0>
 800aeea:	499b      	ldr	r1, [pc, #620]	; (800b158 <_strtod_l+0x578>)
 800aeec:	a815      	add	r0, sp, #84	; 0x54
 800aeee:	f001 fa17 	bl	800c320 <__match>
 800aef2:	2800      	cmp	r0, #0
 800aef4:	f43f aecc 	beq.w	800ac90 <_strtod_l+0xb0>
 800aef8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	2b28      	cmp	r3, #40	; 0x28
 800aefe:	d12f      	bne.n	800af60 <_strtod_l+0x380>
 800af00:	4996      	ldr	r1, [pc, #600]	; (800b15c <_strtod_l+0x57c>)
 800af02:	aa18      	add	r2, sp, #96	; 0x60
 800af04:	a815      	add	r0, sp, #84	; 0x54
 800af06:	f001 fa1f 	bl	800c348 <__hexnan>
 800af0a:	2805      	cmp	r0, #5
 800af0c:	d128      	bne.n	800af60 <_strtod_l+0x380>
 800af0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800af18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800af1c:	e69b      	b.n	800ac56 <_strtod_l+0x76>
 800af1e:	9f08      	ldr	r7, [sp, #32]
 800af20:	210a      	movs	r1, #10
 800af22:	fb01 2107 	mla	r1, r1, r7, r2
 800af26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800af2a:	9208      	str	r2, [sp, #32]
 800af2c:	e7b5      	b.n	800ae9a <_strtod_l+0x2ba>
 800af2e:	2a6e      	cmp	r2, #110	; 0x6e
 800af30:	e7d9      	b.n	800aee6 <_strtod_l+0x306>
 800af32:	498b      	ldr	r1, [pc, #556]	; (800b160 <_strtod_l+0x580>)
 800af34:	a815      	add	r0, sp, #84	; 0x54
 800af36:	f001 f9f3 	bl	800c320 <__match>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	f43f aea8 	beq.w	800ac90 <_strtod_l+0xb0>
 800af40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af42:	4988      	ldr	r1, [pc, #544]	; (800b164 <_strtod_l+0x584>)
 800af44:	3b01      	subs	r3, #1
 800af46:	a815      	add	r0, sp, #84	; 0x54
 800af48:	9315      	str	r3, [sp, #84]	; 0x54
 800af4a:	f001 f9e9 	bl	800c320 <__match>
 800af4e:	b910      	cbnz	r0, 800af56 <_strtod_l+0x376>
 800af50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af52:	3301      	adds	r3, #1
 800af54:	9315      	str	r3, [sp, #84]	; 0x54
 800af56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b174 <_strtod_l+0x594>
 800af5a:	f04f 0800 	mov.w	r8, #0
 800af5e:	e67a      	b.n	800ac56 <_strtod_l+0x76>
 800af60:	4881      	ldr	r0, [pc, #516]	; (800b168 <_strtod_l+0x588>)
 800af62:	f000 fef9 	bl	800bd58 <nan>
 800af66:	ec59 8b10 	vmov	r8, r9, d0
 800af6a:	e674      	b.n	800ac56 <_strtod_l+0x76>
 800af6c:	9b05      	ldr	r3, [sp, #20]
 800af6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af70:	1afb      	subs	r3, r7, r3
 800af72:	f1bb 0f00 	cmp.w	fp, #0
 800af76:	bf08      	it	eq
 800af78:	46b3      	moveq	fp, r6
 800af7a:	2e10      	cmp	r6, #16
 800af7c:	9308      	str	r3, [sp, #32]
 800af7e:	4635      	mov	r5, r6
 800af80:	bfa8      	it	ge
 800af82:	2510      	movge	r5, #16
 800af84:	f7f5 fabe 	bl	8000504 <__aeabi_ui2d>
 800af88:	2e09      	cmp	r6, #9
 800af8a:	4680      	mov	r8, r0
 800af8c:	4689      	mov	r9, r1
 800af8e:	dd13      	ble.n	800afb8 <_strtod_l+0x3d8>
 800af90:	4b76      	ldr	r3, [pc, #472]	; (800b16c <_strtod_l+0x58c>)
 800af92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800af96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800af9a:	f7f5 fb2d 	bl	80005f8 <__aeabi_dmul>
 800af9e:	4680      	mov	r8, r0
 800afa0:	4650      	mov	r0, sl
 800afa2:	4689      	mov	r9, r1
 800afa4:	f7f5 faae 	bl	8000504 <__aeabi_ui2d>
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	4640      	mov	r0, r8
 800afae:	4649      	mov	r1, r9
 800afb0:	f7f5 f96c 	bl	800028c <__adddf3>
 800afb4:	4680      	mov	r8, r0
 800afb6:	4689      	mov	r9, r1
 800afb8:	2e0f      	cmp	r6, #15
 800afba:	dc38      	bgt.n	800b02e <_strtod_l+0x44e>
 800afbc:	9b08      	ldr	r3, [sp, #32]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f43f ae49 	beq.w	800ac56 <_strtod_l+0x76>
 800afc4:	dd24      	ble.n	800b010 <_strtod_l+0x430>
 800afc6:	2b16      	cmp	r3, #22
 800afc8:	dc0b      	bgt.n	800afe2 <_strtod_l+0x402>
 800afca:	4968      	ldr	r1, [pc, #416]	; (800b16c <_strtod_l+0x58c>)
 800afcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afd4:	4642      	mov	r2, r8
 800afd6:	464b      	mov	r3, r9
 800afd8:	f7f5 fb0e 	bl	80005f8 <__aeabi_dmul>
 800afdc:	4680      	mov	r8, r0
 800afde:	4689      	mov	r9, r1
 800afe0:	e639      	b.n	800ac56 <_strtod_l+0x76>
 800afe2:	9a08      	ldr	r2, [sp, #32]
 800afe4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800afe8:	4293      	cmp	r3, r2
 800afea:	db20      	blt.n	800b02e <_strtod_l+0x44e>
 800afec:	4c5f      	ldr	r4, [pc, #380]	; (800b16c <_strtod_l+0x58c>)
 800afee:	f1c6 060f 	rsb	r6, r6, #15
 800aff2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800aff6:	4642      	mov	r2, r8
 800aff8:	464b      	mov	r3, r9
 800affa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800affe:	f7f5 fafb 	bl	80005f8 <__aeabi_dmul>
 800b002:	9b08      	ldr	r3, [sp, #32]
 800b004:	1b9e      	subs	r6, r3, r6
 800b006:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b00a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b00e:	e7e3      	b.n	800afd8 <_strtod_l+0x3f8>
 800b010:	9b08      	ldr	r3, [sp, #32]
 800b012:	3316      	adds	r3, #22
 800b014:	db0b      	blt.n	800b02e <_strtod_l+0x44e>
 800b016:	9b05      	ldr	r3, [sp, #20]
 800b018:	1bdf      	subs	r7, r3, r7
 800b01a:	4b54      	ldr	r3, [pc, #336]	; (800b16c <_strtod_l+0x58c>)
 800b01c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b020:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b024:	4640      	mov	r0, r8
 800b026:	4649      	mov	r1, r9
 800b028:	f7f5 fc10 	bl	800084c <__aeabi_ddiv>
 800b02c:	e7d6      	b.n	800afdc <_strtod_l+0x3fc>
 800b02e:	9b08      	ldr	r3, [sp, #32]
 800b030:	1b75      	subs	r5, r6, r5
 800b032:	441d      	add	r5, r3
 800b034:	2d00      	cmp	r5, #0
 800b036:	dd70      	ble.n	800b11a <_strtod_l+0x53a>
 800b038:	f015 030f 	ands.w	r3, r5, #15
 800b03c:	d00a      	beq.n	800b054 <_strtod_l+0x474>
 800b03e:	494b      	ldr	r1, [pc, #300]	; (800b16c <_strtod_l+0x58c>)
 800b040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b044:	4642      	mov	r2, r8
 800b046:	464b      	mov	r3, r9
 800b048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b04c:	f7f5 fad4 	bl	80005f8 <__aeabi_dmul>
 800b050:	4680      	mov	r8, r0
 800b052:	4689      	mov	r9, r1
 800b054:	f035 050f 	bics.w	r5, r5, #15
 800b058:	d04d      	beq.n	800b0f6 <_strtod_l+0x516>
 800b05a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b05e:	dd22      	ble.n	800b0a6 <_strtod_l+0x4c6>
 800b060:	2500      	movs	r5, #0
 800b062:	46ab      	mov	fp, r5
 800b064:	9509      	str	r5, [sp, #36]	; 0x24
 800b066:	9505      	str	r5, [sp, #20]
 800b068:	2322      	movs	r3, #34	; 0x22
 800b06a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b174 <_strtod_l+0x594>
 800b06e:	6023      	str	r3, [r4, #0]
 800b070:	f04f 0800 	mov.w	r8, #0
 800b074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b076:	2b00      	cmp	r3, #0
 800b078:	f43f aded 	beq.w	800ac56 <_strtod_l+0x76>
 800b07c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b07e:	4620      	mov	r0, r4
 800b080:	f7ff f924 	bl	800a2cc <_Bfree>
 800b084:	9905      	ldr	r1, [sp, #20]
 800b086:	4620      	mov	r0, r4
 800b088:	f7ff f920 	bl	800a2cc <_Bfree>
 800b08c:	4659      	mov	r1, fp
 800b08e:	4620      	mov	r0, r4
 800b090:	f7ff f91c 	bl	800a2cc <_Bfree>
 800b094:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b096:	4620      	mov	r0, r4
 800b098:	f7ff f918 	bl	800a2cc <_Bfree>
 800b09c:	4629      	mov	r1, r5
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f7ff f914 	bl	800a2cc <_Bfree>
 800b0a4:	e5d7      	b.n	800ac56 <_strtod_l+0x76>
 800b0a6:	4b32      	ldr	r3, [pc, #200]	; (800b170 <_strtod_l+0x590>)
 800b0a8:	9304      	str	r3, [sp, #16]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	112d      	asrs	r5, r5, #4
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	469a      	mov	sl, r3
 800b0b4:	2d01      	cmp	r5, #1
 800b0b6:	dc21      	bgt.n	800b0fc <_strtod_l+0x51c>
 800b0b8:	b10b      	cbz	r3, 800b0be <_strtod_l+0x4de>
 800b0ba:	4680      	mov	r8, r0
 800b0bc:	4689      	mov	r9, r1
 800b0be:	492c      	ldr	r1, [pc, #176]	; (800b170 <_strtod_l+0x590>)
 800b0c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b0c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b0c8:	4642      	mov	r2, r8
 800b0ca:	464b      	mov	r3, r9
 800b0cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d0:	f7f5 fa92 	bl	80005f8 <__aeabi_dmul>
 800b0d4:	4b27      	ldr	r3, [pc, #156]	; (800b174 <_strtod_l+0x594>)
 800b0d6:	460a      	mov	r2, r1
 800b0d8:	400b      	ands	r3, r1
 800b0da:	4927      	ldr	r1, [pc, #156]	; (800b178 <_strtod_l+0x598>)
 800b0dc:	428b      	cmp	r3, r1
 800b0de:	4680      	mov	r8, r0
 800b0e0:	d8be      	bhi.n	800b060 <_strtod_l+0x480>
 800b0e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b0e6:	428b      	cmp	r3, r1
 800b0e8:	bf86      	itte	hi
 800b0ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b17c <_strtod_l+0x59c>
 800b0ee:	f04f 38ff 	movhi.w	r8, #4294967295
 800b0f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9304      	str	r3, [sp, #16]
 800b0fa:	e07b      	b.n	800b1f4 <_strtod_l+0x614>
 800b0fc:	07ea      	lsls	r2, r5, #31
 800b0fe:	d505      	bpl.n	800b10c <_strtod_l+0x52c>
 800b100:	9b04      	ldr	r3, [sp, #16]
 800b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b106:	f7f5 fa77 	bl	80005f8 <__aeabi_dmul>
 800b10a:	2301      	movs	r3, #1
 800b10c:	9a04      	ldr	r2, [sp, #16]
 800b10e:	3208      	adds	r2, #8
 800b110:	f10a 0a01 	add.w	sl, sl, #1
 800b114:	106d      	asrs	r5, r5, #1
 800b116:	9204      	str	r2, [sp, #16]
 800b118:	e7cc      	b.n	800b0b4 <_strtod_l+0x4d4>
 800b11a:	d0ec      	beq.n	800b0f6 <_strtod_l+0x516>
 800b11c:	426d      	negs	r5, r5
 800b11e:	f015 020f 	ands.w	r2, r5, #15
 800b122:	d00a      	beq.n	800b13a <_strtod_l+0x55a>
 800b124:	4b11      	ldr	r3, [pc, #68]	; (800b16c <_strtod_l+0x58c>)
 800b126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b12a:	4640      	mov	r0, r8
 800b12c:	4649      	mov	r1, r9
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	f7f5 fb8b 	bl	800084c <__aeabi_ddiv>
 800b136:	4680      	mov	r8, r0
 800b138:	4689      	mov	r9, r1
 800b13a:	112d      	asrs	r5, r5, #4
 800b13c:	d0db      	beq.n	800b0f6 <_strtod_l+0x516>
 800b13e:	2d1f      	cmp	r5, #31
 800b140:	dd1e      	ble.n	800b180 <_strtod_l+0x5a0>
 800b142:	2500      	movs	r5, #0
 800b144:	46ab      	mov	fp, r5
 800b146:	9509      	str	r5, [sp, #36]	; 0x24
 800b148:	9505      	str	r5, [sp, #20]
 800b14a:	2322      	movs	r3, #34	; 0x22
 800b14c:	f04f 0800 	mov.w	r8, #0
 800b150:	f04f 0900 	mov.w	r9, #0
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	e78d      	b.n	800b074 <_strtod_l+0x494>
 800b158:	0800f15d 	.word	0x0800f15d
 800b15c:	0800f384 	.word	0x0800f384
 800b160:	0800f155 	.word	0x0800f155
 800b164:	0800f18c 	.word	0x0800f18c
 800b168:	0800f515 	.word	0x0800f515
 800b16c:	0800f298 	.word	0x0800f298
 800b170:	0800f270 	.word	0x0800f270
 800b174:	7ff00000 	.word	0x7ff00000
 800b178:	7ca00000 	.word	0x7ca00000
 800b17c:	7fefffff 	.word	0x7fefffff
 800b180:	f015 0310 	ands.w	r3, r5, #16
 800b184:	bf18      	it	ne
 800b186:	236a      	movne	r3, #106	; 0x6a
 800b188:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b52c <_strtod_l+0x94c>
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	4640      	mov	r0, r8
 800b190:	4649      	mov	r1, r9
 800b192:	2300      	movs	r3, #0
 800b194:	07ea      	lsls	r2, r5, #31
 800b196:	d504      	bpl.n	800b1a2 <_strtod_l+0x5c2>
 800b198:	e9da 2300 	ldrd	r2, r3, [sl]
 800b19c:	f7f5 fa2c 	bl	80005f8 <__aeabi_dmul>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	106d      	asrs	r5, r5, #1
 800b1a4:	f10a 0a08 	add.w	sl, sl, #8
 800b1a8:	d1f4      	bne.n	800b194 <_strtod_l+0x5b4>
 800b1aa:	b10b      	cbz	r3, 800b1b0 <_strtod_l+0x5d0>
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	4689      	mov	r9, r1
 800b1b0:	9b04      	ldr	r3, [sp, #16]
 800b1b2:	b1bb      	cbz	r3, 800b1e4 <_strtod_l+0x604>
 800b1b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b1b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	4649      	mov	r1, r9
 800b1c0:	dd10      	ble.n	800b1e4 <_strtod_l+0x604>
 800b1c2:	2b1f      	cmp	r3, #31
 800b1c4:	f340 811e 	ble.w	800b404 <_strtod_l+0x824>
 800b1c8:	2b34      	cmp	r3, #52	; 0x34
 800b1ca:	bfde      	ittt	le
 800b1cc:	f04f 33ff 	movle.w	r3, #4294967295
 800b1d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b1d4:	4093      	lslle	r3, r2
 800b1d6:	f04f 0800 	mov.w	r8, #0
 800b1da:	bfcc      	ite	gt
 800b1dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b1e0:	ea03 0901 	andle.w	r9, r3, r1
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	4640      	mov	r0, r8
 800b1ea:	4649      	mov	r1, r9
 800b1ec:	f7f5 fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d1a6      	bne.n	800b142 <_strtod_l+0x562>
 800b1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1fa:	4633      	mov	r3, r6
 800b1fc:	465a      	mov	r2, fp
 800b1fe:	4620      	mov	r0, r4
 800b200:	f7ff f8cc 	bl	800a39c <__s2b>
 800b204:	9009      	str	r0, [sp, #36]	; 0x24
 800b206:	2800      	cmp	r0, #0
 800b208:	f43f af2a 	beq.w	800b060 <_strtod_l+0x480>
 800b20c:	9a08      	ldr	r2, [sp, #32]
 800b20e:	9b05      	ldr	r3, [sp, #20]
 800b210:	2a00      	cmp	r2, #0
 800b212:	eba3 0307 	sub.w	r3, r3, r7
 800b216:	bfa8      	it	ge
 800b218:	2300      	movge	r3, #0
 800b21a:	930c      	str	r3, [sp, #48]	; 0x30
 800b21c:	2500      	movs	r5, #0
 800b21e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b222:	9312      	str	r3, [sp, #72]	; 0x48
 800b224:	46ab      	mov	fp, r5
 800b226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b228:	4620      	mov	r0, r4
 800b22a:	6859      	ldr	r1, [r3, #4]
 800b22c:	f7ff f80e 	bl	800a24c <_Balloc>
 800b230:	9005      	str	r0, [sp, #20]
 800b232:	2800      	cmp	r0, #0
 800b234:	f43f af18 	beq.w	800b068 <_strtod_l+0x488>
 800b238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b23a:	691a      	ldr	r2, [r3, #16]
 800b23c:	3202      	adds	r2, #2
 800b23e:	f103 010c 	add.w	r1, r3, #12
 800b242:	0092      	lsls	r2, r2, #2
 800b244:	300c      	adds	r0, #12
 800b246:	f000 fd77 	bl	800bd38 <memcpy>
 800b24a:	ec49 8b10 	vmov	d0, r8, r9
 800b24e:	aa18      	add	r2, sp, #96	; 0x60
 800b250:	a917      	add	r1, sp, #92	; 0x5c
 800b252:	4620      	mov	r0, r4
 800b254:	f7ff fbd6 	bl	800aa04 <__d2b>
 800b258:	ec49 8b18 	vmov	d8, r8, r9
 800b25c:	9016      	str	r0, [sp, #88]	; 0x58
 800b25e:	2800      	cmp	r0, #0
 800b260:	f43f af02 	beq.w	800b068 <_strtod_l+0x488>
 800b264:	2101      	movs	r1, #1
 800b266:	4620      	mov	r0, r4
 800b268:	f7ff f930 	bl	800a4cc <__i2b>
 800b26c:	4683      	mov	fp, r0
 800b26e:	2800      	cmp	r0, #0
 800b270:	f43f aefa 	beq.w	800b068 <_strtod_l+0x488>
 800b274:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b276:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b278:	2e00      	cmp	r6, #0
 800b27a:	bfab      	itete	ge
 800b27c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b27e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b280:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b282:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b286:	bfac      	ite	ge
 800b288:	eb06 0a03 	addge.w	sl, r6, r3
 800b28c:	1b9f      	sublt	r7, r3, r6
 800b28e:	9b04      	ldr	r3, [sp, #16]
 800b290:	1af6      	subs	r6, r6, r3
 800b292:	4416      	add	r6, r2
 800b294:	4ba0      	ldr	r3, [pc, #640]	; (800b518 <_strtod_l+0x938>)
 800b296:	3e01      	subs	r6, #1
 800b298:	429e      	cmp	r6, r3
 800b29a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b29e:	f280 80c4 	bge.w	800b42a <_strtod_l+0x84a>
 800b2a2:	1b9b      	subs	r3, r3, r6
 800b2a4:	2b1f      	cmp	r3, #31
 800b2a6:	eba2 0203 	sub.w	r2, r2, r3
 800b2aa:	f04f 0101 	mov.w	r1, #1
 800b2ae:	f300 80b0 	bgt.w	800b412 <_strtod_l+0x832>
 800b2b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b6:	930e      	str	r3, [sp, #56]	; 0x38
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	930d      	str	r3, [sp, #52]	; 0x34
 800b2bc:	eb0a 0602 	add.w	r6, sl, r2
 800b2c0:	9b04      	ldr	r3, [sp, #16]
 800b2c2:	45b2      	cmp	sl, r6
 800b2c4:	4417      	add	r7, r2
 800b2c6:	441f      	add	r7, r3
 800b2c8:	4653      	mov	r3, sl
 800b2ca:	bfa8      	it	ge
 800b2cc:	4633      	movge	r3, r6
 800b2ce:	42bb      	cmp	r3, r7
 800b2d0:	bfa8      	it	ge
 800b2d2:	463b      	movge	r3, r7
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bfc2      	ittt	gt
 800b2d8:	1af6      	subgt	r6, r6, r3
 800b2da:	1aff      	subgt	r7, r7, r3
 800b2dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	dd17      	ble.n	800b316 <_strtod_l+0x736>
 800b2e6:	4659      	mov	r1, fp
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f7ff f9ae 	bl	800a64c <__pow5mult>
 800b2f0:	4683      	mov	fp, r0
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	f43f aeb8 	beq.w	800b068 <_strtod_l+0x488>
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f7ff f8fb 	bl	800a4f8 <__multiply>
 800b302:	900b      	str	r0, [sp, #44]	; 0x2c
 800b304:	2800      	cmp	r0, #0
 800b306:	f43f aeaf 	beq.w	800b068 <_strtod_l+0x488>
 800b30a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b30c:	4620      	mov	r0, r4
 800b30e:	f7fe ffdd 	bl	800a2cc <_Bfree>
 800b312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b314:	9316      	str	r3, [sp, #88]	; 0x58
 800b316:	2e00      	cmp	r6, #0
 800b318:	f300 808c 	bgt.w	800b434 <_strtod_l+0x854>
 800b31c:	9b08      	ldr	r3, [sp, #32]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	dd08      	ble.n	800b334 <_strtod_l+0x754>
 800b322:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b324:	9905      	ldr	r1, [sp, #20]
 800b326:	4620      	mov	r0, r4
 800b328:	f7ff f990 	bl	800a64c <__pow5mult>
 800b32c:	9005      	str	r0, [sp, #20]
 800b32e:	2800      	cmp	r0, #0
 800b330:	f43f ae9a 	beq.w	800b068 <_strtod_l+0x488>
 800b334:	2f00      	cmp	r7, #0
 800b336:	dd08      	ble.n	800b34a <_strtod_l+0x76a>
 800b338:	9905      	ldr	r1, [sp, #20]
 800b33a:	463a      	mov	r2, r7
 800b33c:	4620      	mov	r0, r4
 800b33e:	f7ff f9df 	bl	800a700 <__lshift>
 800b342:	9005      	str	r0, [sp, #20]
 800b344:	2800      	cmp	r0, #0
 800b346:	f43f ae8f 	beq.w	800b068 <_strtod_l+0x488>
 800b34a:	f1ba 0f00 	cmp.w	sl, #0
 800b34e:	dd08      	ble.n	800b362 <_strtod_l+0x782>
 800b350:	4659      	mov	r1, fp
 800b352:	4652      	mov	r2, sl
 800b354:	4620      	mov	r0, r4
 800b356:	f7ff f9d3 	bl	800a700 <__lshift>
 800b35a:	4683      	mov	fp, r0
 800b35c:	2800      	cmp	r0, #0
 800b35e:	f43f ae83 	beq.w	800b068 <_strtod_l+0x488>
 800b362:	9a05      	ldr	r2, [sp, #20]
 800b364:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b366:	4620      	mov	r0, r4
 800b368:	f7ff fa52 	bl	800a810 <__mdiff>
 800b36c:	4605      	mov	r5, r0
 800b36e:	2800      	cmp	r0, #0
 800b370:	f43f ae7a 	beq.w	800b068 <_strtod_l+0x488>
 800b374:	68c3      	ldr	r3, [r0, #12]
 800b376:	930b      	str	r3, [sp, #44]	; 0x2c
 800b378:	2300      	movs	r3, #0
 800b37a:	60c3      	str	r3, [r0, #12]
 800b37c:	4659      	mov	r1, fp
 800b37e:	f7ff fa2b 	bl	800a7d8 <__mcmp>
 800b382:	2800      	cmp	r0, #0
 800b384:	da60      	bge.n	800b448 <_strtod_l+0x868>
 800b386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b388:	ea53 0308 	orrs.w	r3, r3, r8
 800b38c:	f040 8084 	bne.w	800b498 <_strtod_l+0x8b8>
 800b390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b394:	2b00      	cmp	r3, #0
 800b396:	d17f      	bne.n	800b498 <_strtod_l+0x8b8>
 800b398:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b39c:	0d1b      	lsrs	r3, r3, #20
 800b39e:	051b      	lsls	r3, r3, #20
 800b3a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b3a4:	d978      	bls.n	800b498 <_strtod_l+0x8b8>
 800b3a6:	696b      	ldr	r3, [r5, #20]
 800b3a8:	b913      	cbnz	r3, 800b3b0 <_strtod_l+0x7d0>
 800b3aa:	692b      	ldr	r3, [r5, #16]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	dd73      	ble.n	800b498 <_strtod_l+0x8b8>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f7ff f9a3 	bl	800a700 <__lshift>
 800b3ba:	4659      	mov	r1, fp
 800b3bc:	4605      	mov	r5, r0
 800b3be:	f7ff fa0b 	bl	800a7d8 <__mcmp>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	dd68      	ble.n	800b498 <_strtod_l+0x8b8>
 800b3c6:	9904      	ldr	r1, [sp, #16]
 800b3c8:	4a54      	ldr	r2, [pc, #336]	; (800b51c <_strtod_l+0x93c>)
 800b3ca:	464b      	mov	r3, r9
 800b3cc:	2900      	cmp	r1, #0
 800b3ce:	f000 8084 	beq.w	800b4da <_strtod_l+0x8fa>
 800b3d2:	ea02 0109 	and.w	r1, r2, r9
 800b3d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b3da:	dc7e      	bgt.n	800b4da <_strtod_l+0x8fa>
 800b3dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b3e0:	f77f aeb3 	ble.w	800b14a <_strtod_l+0x56a>
 800b3e4:	4b4e      	ldr	r3, [pc, #312]	; (800b520 <_strtod_l+0x940>)
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f7f5 f904 	bl	80005f8 <__aeabi_dmul>
 800b3f0:	4b4a      	ldr	r3, [pc, #296]	; (800b51c <_strtod_l+0x93c>)
 800b3f2:	400b      	ands	r3, r1
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	4689      	mov	r9, r1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f47f ae3f 	bne.w	800b07c <_strtod_l+0x49c>
 800b3fe:	2322      	movs	r3, #34	; 0x22
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	e63b      	b.n	800b07c <_strtod_l+0x49c>
 800b404:	f04f 32ff 	mov.w	r2, #4294967295
 800b408:	fa02 f303 	lsl.w	r3, r2, r3
 800b40c:	ea03 0808 	and.w	r8, r3, r8
 800b410:	e6e8      	b.n	800b1e4 <_strtod_l+0x604>
 800b412:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b416:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b41a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b41e:	36e2      	adds	r6, #226	; 0xe2
 800b420:	fa01 f306 	lsl.w	r3, r1, r6
 800b424:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b428:	e748      	b.n	800b2bc <_strtod_l+0x6dc>
 800b42a:	2100      	movs	r1, #0
 800b42c:	2301      	movs	r3, #1
 800b42e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b432:	e743      	b.n	800b2bc <_strtod_l+0x6dc>
 800b434:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b436:	4632      	mov	r2, r6
 800b438:	4620      	mov	r0, r4
 800b43a:	f7ff f961 	bl	800a700 <__lshift>
 800b43e:	9016      	str	r0, [sp, #88]	; 0x58
 800b440:	2800      	cmp	r0, #0
 800b442:	f47f af6b 	bne.w	800b31c <_strtod_l+0x73c>
 800b446:	e60f      	b.n	800b068 <_strtod_l+0x488>
 800b448:	46ca      	mov	sl, r9
 800b44a:	d171      	bne.n	800b530 <_strtod_l+0x950>
 800b44c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b44e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b452:	b352      	cbz	r2, 800b4aa <_strtod_l+0x8ca>
 800b454:	4a33      	ldr	r2, [pc, #204]	; (800b524 <_strtod_l+0x944>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d12a      	bne.n	800b4b0 <_strtod_l+0x8d0>
 800b45a:	9b04      	ldr	r3, [sp, #16]
 800b45c:	4641      	mov	r1, r8
 800b45e:	b1fb      	cbz	r3, 800b4a0 <_strtod_l+0x8c0>
 800b460:	4b2e      	ldr	r3, [pc, #184]	; (800b51c <_strtod_l+0x93c>)
 800b462:	ea09 0303 	and.w	r3, r9, r3
 800b466:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b46a:	f04f 32ff 	mov.w	r2, #4294967295
 800b46e:	d81a      	bhi.n	800b4a6 <_strtod_l+0x8c6>
 800b470:	0d1b      	lsrs	r3, r3, #20
 800b472:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b476:	fa02 f303 	lsl.w	r3, r2, r3
 800b47a:	4299      	cmp	r1, r3
 800b47c:	d118      	bne.n	800b4b0 <_strtod_l+0x8d0>
 800b47e:	4b2a      	ldr	r3, [pc, #168]	; (800b528 <_strtod_l+0x948>)
 800b480:	459a      	cmp	sl, r3
 800b482:	d102      	bne.n	800b48a <_strtod_l+0x8aa>
 800b484:	3101      	adds	r1, #1
 800b486:	f43f adef 	beq.w	800b068 <_strtod_l+0x488>
 800b48a:	4b24      	ldr	r3, [pc, #144]	; (800b51c <_strtod_l+0x93c>)
 800b48c:	ea0a 0303 	and.w	r3, sl, r3
 800b490:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b494:	f04f 0800 	mov.w	r8, #0
 800b498:	9b04      	ldr	r3, [sp, #16]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1a2      	bne.n	800b3e4 <_strtod_l+0x804>
 800b49e:	e5ed      	b.n	800b07c <_strtod_l+0x49c>
 800b4a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a4:	e7e9      	b.n	800b47a <_strtod_l+0x89a>
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	e7e7      	b.n	800b47a <_strtod_l+0x89a>
 800b4aa:	ea53 0308 	orrs.w	r3, r3, r8
 800b4ae:	d08a      	beq.n	800b3c6 <_strtod_l+0x7e6>
 800b4b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4b2:	b1e3      	cbz	r3, 800b4ee <_strtod_l+0x90e>
 800b4b4:	ea13 0f0a 	tst.w	r3, sl
 800b4b8:	d0ee      	beq.n	800b498 <_strtod_l+0x8b8>
 800b4ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4bc:	9a04      	ldr	r2, [sp, #16]
 800b4be:	4640      	mov	r0, r8
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	b1c3      	cbz	r3, 800b4f6 <_strtod_l+0x916>
 800b4c4:	f7ff fb6f 	bl	800aba6 <sulp>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	ec51 0b18 	vmov	r0, r1, d8
 800b4d0:	f7f4 fedc 	bl	800028c <__adddf3>
 800b4d4:	4680      	mov	r8, r0
 800b4d6:	4689      	mov	r9, r1
 800b4d8:	e7de      	b.n	800b498 <_strtod_l+0x8b8>
 800b4da:	4013      	ands	r3, r2
 800b4dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b4e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b4e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b4e8:	f04f 38ff 	mov.w	r8, #4294967295
 800b4ec:	e7d4      	b.n	800b498 <_strtod_l+0x8b8>
 800b4ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4f0:	ea13 0f08 	tst.w	r3, r8
 800b4f4:	e7e0      	b.n	800b4b8 <_strtod_l+0x8d8>
 800b4f6:	f7ff fb56 	bl	800aba6 <sulp>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	ec51 0b18 	vmov	r0, r1, d8
 800b502:	f7f4 fec1 	bl	8000288 <__aeabi_dsub>
 800b506:	2200      	movs	r2, #0
 800b508:	2300      	movs	r3, #0
 800b50a:	4680      	mov	r8, r0
 800b50c:	4689      	mov	r9, r1
 800b50e:	f7f5 fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b512:	2800      	cmp	r0, #0
 800b514:	d0c0      	beq.n	800b498 <_strtod_l+0x8b8>
 800b516:	e618      	b.n	800b14a <_strtod_l+0x56a>
 800b518:	fffffc02 	.word	0xfffffc02
 800b51c:	7ff00000 	.word	0x7ff00000
 800b520:	39500000 	.word	0x39500000
 800b524:	000fffff 	.word	0x000fffff
 800b528:	7fefffff 	.word	0x7fefffff
 800b52c:	0800f398 	.word	0x0800f398
 800b530:	4659      	mov	r1, fp
 800b532:	4628      	mov	r0, r5
 800b534:	f7ff fac0 	bl	800aab8 <__ratio>
 800b538:	ec57 6b10 	vmov	r6, r7, d0
 800b53c:	ee10 0a10 	vmov	r0, s0
 800b540:	2200      	movs	r2, #0
 800b542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b546:	4639      	mov	r1, r7
 800b548:	f7f5 fad2 	bl	8000af0 <__aeabi_dcmple>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d071      	beq.n	800b634 <_strtod_l+0xa54>
 800b550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b552:	2b00      	cmp	r3, #0
 800b554:	d17c      	bne.n	800b650 <_strtod_l+0xa70>
 800b556:	f1b8 0f00 	cmp.w	r8, #0
 800b55a:	d15a      	bne.n	800b612 <_strtod_l+0xa32>
 800b55c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b560:	2b00      	cmp	r3, #0
 800b562:	d15d      	bne.n	800b620 <_strtod_l+0xa40>
 800b564:	4b90      	ldr	r3, [pc, #576]	; (800b7a8 <_strtod_l+0xbc8>)
 800b566:	2200      	movs	r2, #0
 800b568:	4630      	mov	r0, r6
 800b56a:	4639      	mov	r1, r7
 800b56c:	f7f5 fab6 	bl	8000adc <__aeabi_dcmplt>
 800b570:	2800      	cmp	r0, #0
 800b572:	d15c      	bne.n	800b62e <_strtod_l+0xa4e>
 800b574:	4630      	mov	r0, r6
 800b576:	4639      	mov	r1, r7
 800b578:	4b8c      	ldr	r3, [pc, #560]	; (800b7ac <_strtod_l+0xbcc>)
 800b57a:	2200      	movs	r2, #0
 800b57c:	f7f5 f83c 	bl	80005f8 <__aeabi_dmul>
 800b580:	4606      	mov	r6, r0
 800b582:	460f      	mov	r7, r1
 800b584:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b588:	9606      	str	r6, [sp, #24]
 800b58a:	9307      	str	r3, [sp, #28]
 800b58c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b590:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b594:	4b86      	ldr	r3, [pc, #536]	; (800b7b0 <_strtod_l+0xbd0>)
 800b596:	ea0a 0303 	and.w	r3, sl, r3
 800b59a:	930d      	str	r3, [sp, #52]	; 0x34
 800b59c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b59e:	4b85      	ldr	r3, [pc, #532]	; (800b7b4 <_strtod_l+0xbd4>)
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	f040 8090 	bne.w	800b6c6 <_strtod_l+0xae6>
 800b5a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b5aa:	ec49 8b10 	vmov	d0, r8, r9
 800b5ae:	f7ff f9b9 	bl	800a924 <__ulp>
 800b5b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5b6:	ec51 0b10 	vmov	r0, r1, d0
 800b5ba:	f7f5 f81d 	bl	80005f8 <__aeabi_dmul>
 800b5be:	4642      	mov	r2, r8
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	f7f4 fe63 	bl	800028c <__adddf3>
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	4979      	ldr	r1, [pc, #484]	; (800b7b0 <_strtod_l+0xbd0>)
 800b5ca:	4a7b      	ldr	r2, [pc, #492]	; (800b7b8 <_strtod_l+0xbd8>)
 800b5cc:	4019      	ands	r1, r3
 800b5ce:	4291      	cmp	r1, r2
 800b5d0:	4680      	mov	r8, r0
 800b5d2:	d944      	bls.n	800b65e <_strtod_l+0xa7e>
 800b5d4:	ee18 2a90 	vmov	r2, s17
 800b5d8:	4b78      	ldr	r3, [pc, #480]	; (800b7bc <_strtod_l+0xbdc>)
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d104      	bne.n	800b5e8 <_strtod_l+0xa08>
 800b5de:	ee18 3a10 	vmov	r3, s16
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	f43f ad40 	beq.w	800b068 <_strtod_l+0x488>
 800b5e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b7bc <_strtod_l+0xbdc>
 800b5ec:	f04f 38ff 	mov.w	r8, #4294967295
 800b5f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f7fe fe6a 	bl	800a2cc <_Bfree>
 800b5f8:	9905      	ldr	r1, [sp, #20]
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f7fe fe66 	bl	800a2cc <_Bfree>
 800b600:	4659      	mov	r1, fp
 800b602:	4620      	mov	r0, r4
 800b604:	f7fe fe62 	bl	800a2cc <_Bfree>
 800b608:	4629      	mov	r1, r5
 800b60a:	4620      	mov	r0, r4
 800b60c:	f7fe fe5e 	bl	800a2cc <_Bfree>
 800b610:	e609      	b.n	800b226 <_strtod_l+0x646>
 800b612:	f1b8 0f01 	cmp.w	r8, #1
 800b616:	d103      	bne.n	800b620 <_strtod_l+0xa40>
 800b618:	f1b9 0f00 	cmp.w	r9, #0
 800b61c:	f43f ad95 	beq.w	800b14a <_strtod_l+0x56a>
 800b620:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b778 <_strtod_l+0xb98>
 800b624:	4f60      	ldr	r7, [pc, #384]	; (800b7a8 <_strtod_l+0xbc8>)
 800b626:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b62a:	2600      	movs	r6, #0
 800b62c:	e7ae      	b.n	800b58c <_strtod_l+0x9ac>
 800b62e:	4f5f      	ldr	r7, [pc, #380]	; (800b7ac <_strtod_l+0xbcc>)
 800b630:	2600      	movs	r6, #0
 800b632:	e7a7      	b.n	800b584 <_strtod_l+0x9a4>
 800b634:	4b5d      	ldr	r3, [pc, #372]	; (800b7ac <_strtod_l+0xbcc>)
 800b636:	4630      	mov	r0, r6
 800b638:	4639      	mov	r1, r7
 800b63a:	2200      	movs	r2, #0
 800b63c:	f7f4 ffdc 	bl	80005f8 <__aeabi_dmul>
 800b640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b642:	4606      	mov	r6, r0
 800b644:	460f      	mov	r7, r1
 800b646:	2b00      	cmp	r3, #0
 800b648:	d09c      	beq.n	800b584 <_strtod_l+0x9a4>
 800b64a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b64e:	e79d      	b.n	800b58c <_strtod_l+0x9ac>
 800b650:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b780 <_strtod_l+0xba0>
 800b654:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b658:	ec57 6b17 	vmov	r6, r7, d7
 800b65c:	e796      	b.n	800b58c <_strtod_l+0x9ac>
 800b65e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b662:	9b04      	ldr	r3, [sp, #16]
 800b664:	46ca      	mov	sl, r9
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1c2      	bne.n	800b5f0 <_strtod_l+0xa10>
 800b66a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b66e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b670:	0d1b      	lsrs	r3, r3, #20
 800b672:	051b      	lsls	r3, r3, #20
 800b674:	429a      	cmp	r2, r3
 800b676:	d1bb      	bne.n	800b5f0 <_strtod_l+0xa10>
 800b678:	4630      	mov	r0, r6
 800b67a:	4639      	mov	r1, r7
 800b67c:	f7f5 fb1c 	bl	8000cb8 <__aeabi_d2lz>
 800b680:	f7f4 ff8c 	bl	800059c <__aeabi_l2d>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4630      	mov	r0, r6
 800b68a:	4639      	mov	r1, r7
 800b68c:	f7f4 fdfc 	bl	8000288 <__aeabi_dsub>
 800b690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b692:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b696:	ea43 0308 	orr.w	r3, r3, r8
 800b69a:	4313      	orrs	r3, r2
 800b69c:	4606      	mov	r6, r0
 800b69e:	460f      	mov	r7, r1
 800b6a0:	d054      	beq.n	800b74c <_strtod_l+0xb6c>
 800b6a2:	a339      	add	r3, pc, #228	; (adr r3, 800b788 <_strtod_l+0xba8>)
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	f7f5 fa18 	bl	8000adc <__aeabi_dcmplt>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	f47f ace5 	bne.w	800b07c <_strtod_l+0x49c>
 800b6b2:	a337      	add	r3, pc, #220	; (adr r3, 800b790 <_strtod_l+0xbb0>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	4639      	mov	r1, r7
 800b6bc:	f7f5 fa2c 	bl	8000b18 <__aeabi_dcmpgt>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d095      	beq.n	800b5f0 <_strtod_l+0xa10>
 800b6c4:	e4da      	b.n	800b07c <_strtod_l+0x49c>
 800b6c6:	9b04      	ldr	r3, [sp, #16]
 800b6c8:	b333      	cbz	r3, 800b718 <_strtod_l+0xb38>
 800b6ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b6d0:	d822      	bhi.n	800b718 <_strtod_l+0xb38>
 800b6d2:	a331      	add	r3, pc, #196	; (adr r3, 800b798 <_strtod_l+0xbb8>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	4630      	mov	r0, r6
 800b6da:	4639      	mov	r1, r7
 800b6dc:	f7f5 fa08 	bl	8000af0 <__aeabi_dcmple>
 800b6e0:	b1a0      	cbz	r0, 800b70c <_strtod_l+0xb2c>
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f7f5 fa5f 	bl	8000ba8 <__aeabi_d2uiz>
 800b6ea:	2801      	cmp	r0, #1
 800b6ec:	bf38      	it	cc
 800b6ee:	2001      	movcc	r0, #1
 800b6f0:	f7f4 ff08 	bl	8000504 <__aeabi_ui2d>
 800b6f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	460f      	mov	r7, r1
 800b6fa:	bb23      	cbnz	r3, 800b746 <_strtod_l+0xb66>
 800b6fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b700:	9010      	str	r0, [sp, #64]	; 0x40
 800b702:	9311      	str	r3, [sp, #68]	; 0x44
 800b704:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b708:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b70c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b70e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b710:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b714:	1a9b      	subs	r3, r3, r2
 800b716:	930f      	str	r3, [sp, #60]	; 0x3c
 800b718:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b71c:	eeb0 0a48 	vmov.f32	s0, s16
 800b720:	eef0 0a68 	vmov.f32	s1, s17
 800b724:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b728:	f7ff f8fc 	bl	800a924 <__ulp>
 800b72c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b730:	ec53 2b10 	vmov	r2, r3, d0
 800b734:	f7f4 ff60 	bl	80005f8 <__aeabi_dmul>
 800b738:	ec53 2b18 	vmov	r2, r3, d8
 800b73c:	f7f4 fda6 	bl	800028c <__adddf3>
 800b740:	4680      	mov	r8, r0
 800b742:	4689      	mov	r9, r1
 800b744:	e78d      	b.n	800b662 <_strtod_l+0xa82>
 800b746:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b74a:	e7db      	b.n	800b704 <_strtod_l+0xb24>
 800b74c:	a314      	add	r3, pc, #80	; (adr r3, 800b7a0 <_strtod_l+0xbc0>)
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f7f5 f9c3 	bl	8000adc <__aeabi_dcmplt>
 800b756:	e7b3      	b.n	800b6c0 <_strtod_l+0xae0>
 800b758:	2300      	movs	r3, #0
 800b75a:	930a      	str	r3, [sp, #40]	; 0x28
 800b75c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b75e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	f7ff ba7c 	b.w	800ac5e <_strtod_l+0x7e>
 800b766:	2a65      	cmp	r2, #101	; 0x65
 800b768:	f43f ab75 	beq.w	800ae56 <_strtod_l+0x276>
 800b76c:	2a45      	cmp	r2, #69	; 0x45
 800b76e:	f43f ab72 	beq.w	800ae56 <_strtod_l+0x276>
 800b772:	2301      	movs	r3, #1
 800b774:	f7ff bbaa 	b.w	800aecc <_strtod_l+0x2ec>
 800b778:	00000000 	.word	0x00000000
 800b77c:	bff00000 	.word	0xbff00000
 800b780:	00000000 	.word	0x00000000
 800b784:	3ff00000 	.word	0x3ff00000
 800b788:	94a03595 	.word	0x94a03595
 800b78c:	3fdfffff 	.word	0x3fdfffff
 800b790:	35afe535 	.word	0x35afe535
 800b794:	3fe00000 	.word	0x3fe00000
 800b798:	ffc00000 	.word	0xffc00000
 800b79c:	41dfffff 	.word	0x41dfffff
 800b7a0:	94a03595 	.word	0x94a03595
 800b7a4:	3fcfffff 	.word	0x3fcfffff
 800b7a8:	3ff00000 	.word	0x3ff00000
 800b7ac:	3fe00000 	.word	0x3fe00000
 800b7b0:	7ff00000 	.word	0x7ff00000
 800b7b4:	7fe00000 	.word	0x7fe00000
 800b7b8:	7c9fffff 	.word	0x7c9fffff
 800b7bc:	7fefffff 	.word	0x7fefffff

0800b7c0 <_strtod_r>:
 800b7c0:	4b01      	ldr	r3, [pc, #4]	; (800b7c8 <_strtod_r+0x8>)
 800b7c2:	f7ff ba0d 	b.w	800abe0 <_strtod_l>
 800b7c6:	bf00      	nop
 800b7c8:	20000068 	.word	0x20000068

0800b7cc <_strtol_l.constprop.0>:
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d2:	d001      	beq.n	800b7d8 <_strtol_l.constprop.0+0xc>
 800b7d4:	2b24      	cmp	r3, #36	; 0x24
 800b7d6:	d906      	bls.n	800b7e6 <_strtol_l.constprop.0+0x1a>
 800b7d8:	f7fd fe3c 	bl	8009454 <__errno>
 800b7dc:	2316      	movs	r3, #22
 800b7de:	6003      	str	r3, [r0, #0]
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b8cc <_strtol_l.constprop.0+0x100>
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	462e      	mov	r6, r5
 800b7ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b7f6:	f017 0708 	ands.w	r7, r7, #8
 800b7fa:	d1f7      	bne.n	800b7ec <_strtol_l.constprop.0+0x20>
 800b7fc:	2c2d      	cmp	r4, #45	; 0x2d
 800b7fe:	d132      	bne.n	800b866 <_strtol_l.constprop.0+0x9a>
 800b800:	782c      	ldrb	r4, [r5, #0]
 800b802:	2701      	movs	r7, #1
 800b804:	1cb5      	adds	r5, r6, #2
 800b806:	2b00      	cmp	r3, #0
 800b808:	d05b      	beq.n	800b8c2 <_strtol_l.constprop.0+0xf6>
 800b80a:	2b10      	cmp	r3, #16
 800b80c:	d109      	bne.n	800b822 <_strtol_l.constprop.0+0x56>
 800b80e:	2c30      	cmp	r4, #48	; 0x30
 800b810:	d107      	bne.n	800b822 <_strtol_l.constprop.0+0x56>
 800b812:	782c      	ldrb	r4, [r5, #0]
 800b814:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b818:	2c58      	cmp	r4, #88	; 0x58
 800b81a:	d14d      	bne.n	800b8b8 <_strtol_l.constprop.0+0xec>
 800b81c:	786c      	ldrb	r4, [r5, #1]
 800b81e:	2310      	movs	r3, #16
 800b820:	3502      	adds	r5, #2
 800b822:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b826:	f108 38ff 	add.w	r8, r8, #4294967295
 800b82a:	f04f 0e00 	mov.w	lr, #0
 800b82e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b832:	4676      	mov	r6, lr
 800b834:	fb03 8a19 	mls	sl, r3, r9, r8
 800b838:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b83c:	f1bc 0f09 	cmp.w	ip, #9
 800b840:	d816      	bhi.n	800b870 <_strtol_l.constprop.0+0xa4>
 800b842:	4664      	mov	r4, ip
 800b844:	42a3      	cmp	r3, r4
 800b846:	dd24      	ble.n	800b892 <_strtol_l.constprop.0+0xc6>
 800b848:	f1be 3fff 	cmp.w	lr, #4294967295
 800b84c:	d008      	beq.n	800b860 <_strtol_l.constprop.0+0x94>
 800b84e:	45b1      	cmp	r9, r6
 800b850:	d31c      	bcc.n	800b88c <_strtol_l.constprop.0+0xc0>
 800b852:	d101      	bne.n	800b858 <_strtol_l.constprop.0+0x8c>
 800b854:	45a2      	cmp	sl, r4
 800b856:	db19      	blt.n	800b88c <_strtol_l.constprop.0+0xc0>
 800b858:	fb06 4603 	mla	r6, r6, r3, r4
 800b85c:	f04f 0e01 	mov.w	lr, #1
 800b860:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b864:	e7e8      	b.n	800b838 <_strtol_l.constprop.0+0x6c>
 800b866:	2c2b      	cmp	r4, #43	; 0x2b
 800b868:	bf04      	itt	eq
 800b86a:	782c      	ldrbeq	r4, [r5, #0]
 800b86c:	1cb5      	addeq	r5, r6, #2
 800b86e:	e7ca      	b.n	800b806 <_strtol_l.constprop.0+0x3a>
 800b870:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b874:	f1bc 0f19 	cmp.w	ip, #25
 800b878:	d801      	bhi.n	800b87e <_strtol_l.constprop.0+0xb2>
 800b87a:	3c37      	subs	r4, #55	; 0x37
 800b87c:	e7e2      	b.n	800b844 <_strtol_l.constprop.0+0x78>
 800b87e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b882:	f1bc 0f19 	cmp.w	ip, #25
 800b886:	d804      	bhi.n	800b892 <_strtol_l.constprop.0+0xc6>
 800b888:	3c57      	subs	r4, #87	; 0x57
 800b88a:	e7db      	b.n	800b844 <_strtol_l.constprop.0+0x78>
 800b88c:	f04f 3eff 	mov.w	lr, #4294967295
 800b890:	e7e6      	b.n	800b860 <_strtol_l.constprop.0+0x94>
 800b892:	f1be 3fff 	cmp.w	lr, #4294967295
 800b896:	d105      	bne.n	800b8a4 <_strtol_l.constprop.0+0xd8>
 800b898:	2322      	movs	r3, #34	; 0x22
 800b89a:	6003      	str	r3, [r0, #0]
 800b89c:	4646      	mov	r6, r8
 800b89e:	b942      	cbnz	r2, 800b8b2 <_strtol_l.constprop.0+0xe6>
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	e79e      	b.n	800b7e2 <_strtol_l.constprop.0+0x16>
 800b8a4:	b107      	cbz	r7, 800b8a8 <_strtol_l.constprop.0+0xdc>
 800b8a6:	4276      	negs	r6, r6
 800b8a8:	2a00      	cmp	r2, #0
 800b8aa:	d0f9      	beq.n	800b8a0 <_strtol_l.constprop.0+0xd4>
 800b8ac:	f1be 0f00 	cmp.w	lr, #0
 800b8b0:	d000      	beq.n	800b8b4 <_strtol_l.constprop.0+0xe8>
 800b8b2:	1e69      	subs	r1, r5, #1
 800b8b4:	6011      	str	r1, [r2, #0]
 800b8b6:	e7f3      	b.n	800b8a0 <_strtol_l.constprop.0+0xd4>
 800b8b8:	2430      	movs	r4, #48	; 0x30
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d1b1      	bne.n	800b822 <_strtol_l.constprop.0+0x56>
 800b8be:	2308      	movs	r3, #8
 800b8c0:	e7af      	b.n	800b822 <_strtol_l.constprop.0+0x56>
 800b8c2:	2c30      	cmp	r4, #48	; 0x30
 800b8c4:	d0a5      	beq.n	800b812 <_strtol_l.constprop.0+0x46>
 800b8c6:	230a      	movs	r3, #10
 800b8c8:	e7ab      	b.n	800b822 <_strtol_l.constprop.0+0x56>
 800b8ca:	bf00      	nop
 800b8cc:	0800f3c1 	.word	0x0800f3c1

0800b8d0 <_strtol_r>:
 800b8d0:	f7ff bf7c 	b.w	800b7cc <_strtol_l.constprop.0>

0800b8d4 <__ssputs_r>:
 800b8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d8:	688e      	ldr	r6, [r1, #8]
 800b8da:	461f      	mov	r7, r3
 800b8dc:	42be      	cmp	r6, r7
 800b8de:	680b      	ldr	r3, [r1, #0]
 800b8e0:	4682      	mov	sl, r0
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	4690      	mov	r8, r2
 800b8e6:	d82c      	bhi.n	800b942 <__ssputs_r+0x6e>
 800b8e8:	898a      	ldrh	r2, [r1, #12]
 800b8ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8ee:	d026      	beq.n	800b93e <__ssputs_r+0x6a>
 800b8f0:	6965      	ldr	r5, [r4, #20]
 800b8f2:	6909      	ldr	r1, [r1, #16]
 800b8f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8f8:	eba3 0901 	sub.w	r9, r3, r1
 800b8fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b900:	1c7b      	adds	r3, r7, #1
 800b902:	444b      	add	r3, r9
 800b904:	106d      	asrs	r5, r5, #1
 800b906:	429d      	cmp	r5, r3
 800b908:	bf38      	it	cc
 800b90a:	461d      	movcc	r5, r3
 800b90c:	0553      	lsls	r3, r2, #21
 800b90e:	d527      	bpl.n	800b960 <__ssputs_r+0x8c>
 800b910:	4629      	mov	r1, r5
 800b912:	f7fc fce1 	bl	80082d8 <_malloc_r>
 800b916:	4606      	mov	r6, r0
 800b918:	b360      	cbz	r0, 800b974 <__ssputs_r+0xa0>
 800b91a:	6921      	ldr	r1, [r4, #16]
 800b91c:	464a      	mov	r2, r9
 800b91e:	f000 fa0b 	bl	800bd38 <memcpy>
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b92c:	81a3      	strh	r3, [r4, #12]
 800b92e:	6126      	str	r6, [r4, #16]
 800b930:	6165      	str	r5, [r4, #20]
 800b932:	444e      	add	r6, r9
 800b934:	eba5 0509 	sub.w	r5, r5, r9
 800b938:	6026      	str	r6, [r4, #0]
 800b93a:	60a5      	str	r5, [r4, #8]
 800b93c:	463e      	mov	r6, r7
 800b93e:	42be      	cmp	r6, r7
 800b940:	d900      	bls.n	800b944 <__ssputs_r+0x70>
 800b942:	463e      	mov	r6, r7
 800b944:	6820      	ldr	r0, [r4, #0]
 800b946:	4632      	mov	r2, r6
 800b948:	4641      	mov	r1, r8
 800b94a:	f000 f9c9 	bl	800bce0 <memmove>
 800b94e:	68a3      	ldr	r3, [r4, #8]
 800b950:	1b9b      	subs	r3, r3, r6
 800b952:	60a3      	str	r3, [r4, #8]
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	4433      	add	r3, r6
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	2000      	movs	r0, #0
 800b95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b960:	462a      	mov	r2, r5
 800b962:	f000 fd9e 	bl	800c4a2 <_realloc_r>
 800b966:	4606      	mov	r6, r0
 800b968:	2800      	cmp	r0, #0
 800b96a:	d1e0      	bne.n	800b92e <__ssputs_r+0x5a>
 800b96c:	6921      	ldr	r1, [r4, #16]
 800b96e:	4650      	mov	r0, sl
 800b970:	f7fe fc20 	bl	800a1b4 <_free_r>
 800b974:	230c      	movs	r3, #12
 800b976:	f8ca 3000 	str.w	r3, [sl]
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b980:	81a3      	strh	r3, [r4, #12]
 800b982:	f04f 30ff 	mov.w	r0, #4294967295
 800b986:	e7e9      	b.n	800b95c <__ssputs_r+0x88>

0800b988 <_svfiprintf_r>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	4698      	mov	r8, r3
 800b98e:	898b      	ldrh	r3, [r1, #12]
 800b990:	061b      	lsls	r3, r3, #24
 800b992:	b09d      	sub	sp, #116	; 0x74
 800b994:	4607      	mov	r7, r0
 800b996:	460d      	mov	r5, r1
 800b998:	4614      	mov	r4, r2
 800b99a:	d50e      	bpl.n	800b9ba <_svfiprintf_r+0x32>
 800b99c:	690b      	ldr	r3, [r1, #16]
 800b99e:	b963      	cbnz	r3, 800b9ba <_svfiprintf_r+0x32>
 800b9a0:	2140      	movs	r1, #64	; 0x40
 800b9a2:	f7fc fc99 	bl	80082d8 <_malloc_r>
 800b9a6:	6028      	str	r0, [r5, #0]
 800b9a8:	6128      	str	r0, [r5, #16]
 800b9aa:	b920      	cbnz	r0, 800b9b6 <_svfiprintf_r+0x2e>
 800b9ac:	230c      	movs	r3, #12
 800b9ae:	603b      	str	r3, [r7, #0]
 800b9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b4:	e0d0      	b.n	800bb58 <_svfiprintf_r+0x1d0>
 800b9b6:	2340      	movs	r3, #64	; 0x40
 800b9b8:	616b      	str	r3, [r5, #20]
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9be:	2320      	movs	r3, #32
 800b9c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9c8:	2330      	movs	r3, #48	; 0x30
 800b9ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb70 <_svfiprintf_r+0x1e8>
 800b9ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9d2:	f04f 0901 	mov.w	r9, #1
 800b9d6:	4623      	mov	r3, r4
 800b9d8:	469a      	mov	sl, r3
 800b9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9de:	b10a      	cbz	r2, 800b9e4 <_svfiprintf_r+0x5c>
 800b9e0:	2a25      	cmp	r2, #37	; 0x25
 800b9e2:	d1f9      	bne.n	800b9d8 <_svfiprintf_r+0x50>
 800b9e4:	ebba 0b04 	subs.w	fp, sl, r4
 800b9e8:	d00b      	beq.n	800ba02 <_svfiprintf_r+0x7a>
 800b9ea:	465b      	mov	r3, fp
 800b9ec:	4622      	mov	r2, r4
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	f7ff ff6f 	bl	800b8d4 <__ssputs_r>
 800b9f6:	3001      	adds	r0, #1
 800b9f8:	f000 80a9 	beq.w	800bb4e <_svfiprintf_r+0x1c6>
 800b9fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9fe:	445a      	add	r2, fp
 800ba00:	9209      	str	r2, [sp, #36]	; 0x24
 800ba02:	f89a 3000 	ldrb.w	r3, [sl]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 80a1 	beq.w	800bb4e <_svfiprintf_r+0x1c6>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba16:	f10a 0a01 	add.w	sl, sl, #1
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	9307      	str	r3, [sp, #28]
 800ba1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba22:	931a      	str	r3, [sp, #104]	; 0x68
 800ba24:	4654      	mov	r4, sl
 800ba26:	2205      	movs	r2, #5
 800ba28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba2c:	4850      	ldr	r0, [pc, #320]	; (800bb70 <_svfiprintf_r+0x1e8>)
 800ba2e:	f7f4 fbcf 	bl	80001d0 <memchr>
 800ba32:	9a04      	ldr	r2, [sp, #16]
 800ba34:	b9d8      	cbnz	r0, 800ba6e <_svfiprintf_r+0xe6>
 800ba36:	06d0      	lsls	r0, r2, #27
 800ba38:	bf44      	itt	mi
 800ba3a:	2320      	movmi	r3, #32
 800ba3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba40:	0711      	lsls	r1, r2, #28
 800ba42:	bf44      	itt	mi
 800ba44:	232b      	movmi	r3, #43	; 0x2b
 800ba46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba50:	d015      	beq.n	800ba7e <_svfiprintf_r+0xf6>
 800ba52:	9a07      	ldr	r2, [sp, #28]
 800ba54:	4654      	mov	r4, sl
 800ba56:	2000      	movs	r0, #0
 800ba58:	f04f 0c0a 	mov.w	ip, #10
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba62:	3b30      	subs	r3, #48	; 0x30
 800ba64:	2b09      	cmp	r3, #9
 800ba66:	d94d      	bls.n	800bb04 <_svfiprintf_r+0x17c>
 800ba68:	b1b0      	cbz	r0, 800ba98 <_svfiprintf_r+0x110>
 800ba6a:	9207      	str	r2, [sp, #28]
 800ba6c:	e014      	b.n	800ba98 <_svfiprintf_r+0x110>
 800ba6e:	eba0 0308 	sub.w	r3, r0, r8
 800ba72:	fa09 f303 	lsl.w	r3, r9, r3
 800ba76:	4313      	orrs	r3, r2
 800ba78:	9304      	str	r3, [sp, #16]
 800ba7a:	46a2      	mov	sl, r4
 800ba7c:	e7d2      	b.n	800ba24 <_svfiprintf_r+0x9c>
 800ba7e:	9b03      	ldr	r3, [sp, #12]
 800ba80:	1d19      	adds	r1, r3, #4
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	9103      	str	r1, [sp, #12]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	bfbb      	ittet	lt
 800ba8a:	425b      	neglt	r3, r3
 800ba8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ba90:	9307      	strge	r3, [sp, #28]
 800ba92:	9307      	strlt	r3, [sp, #28]
 800ba94:	bfb8      	it	lt
 800ba96:	9204      	strlt	r2, [sp, #16]
 800ba98:	7823      	ldrb	r3, [r4, #0]
 800ba9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ba9c:	d10c      	bne.n	800bab8 <_svfiprintf_r+0x130>
 800ba9e:	7863      	ldrb	r3, [r4, #1]
 800baa0:	2b2a      	cmp	r3, #42	; 0x2a
 800baa2:	d134      	bne.n	800bb0e <_svfiprintf_r+0x186>
 800baa4:	9b03      	ldr	r3, [sp, #12]
 800baa6:	1d1a      	adds	r2, r3, #4
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	9203      	str	r2, [sp, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	bfb8      	it	lt
 800bab0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bab4:	3402      	adds	r4, #2
 800bab6:	9305      	str	r3, [sp, #20]
 800bab8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bb80 <_svfiprintf_r+0x1f8>
 800babc:	7821      	ldrb	r1, [r4, #0]
 800babe:	2203      	movs	r2, #3
 800bac0:	4650      	mov	r0, sl
 800bac2:	f7f4 fb85 	bl	80001d0 <memchr>
 800bac6:	b138      	cbz	r0, 800bad8 <_svfiprintf_r+0x150>
 800bac8:	9b04      	ldr	r3, [sp, #16]
 800baca:	eba0 000a 	sub.w	r0, r0, sl
 800bace:	2240      	movs	r2, #64	; 0x40
 800bad0:	4082      	lsls	r2, r0
 800bad2:	4313      	orrs	r3, r2
 800bad4:	3401      	adds	r4, #1
 800bad6:	9304      	str	r3, [sp, #16]
 800bad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800badc:	4825      	ldr	r0, [pc, #148]	; (800bb74 <_svfiprintf_r+0x1ec>)
 800bade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bae2:	2206      	movs	r2, #6
 800bae4:	f7f4 fb74 	bl	80001d0 <memchr>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d038      	beq.n	800bb5e <_svfiprintf_r+0x1d6>
 800baec:	4b22      	ldr	r3, [pc, #136]	; (800bb78 <_svfiprintf_r+0x1f0>)
 800baee:	bb1b      	cbnz	r3, 800bb38 <_svfiprintf_r+0x1b0>
 800baf0:	9b03      	ldr	r3, [sp, #12]
 800baf2:	3307      	adds	r3, #7
 800baf4:	f023 0307 	bic.w	r3, r3, #7
 800baf8:	3308      	adds	r3, #8
 800bafa:	9303      	str	r3, [sp, #12]
 800bafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bafe:	4433      	add	r3, r6
 800bb00:	9309      	str	r3, [sp, #36]	; 0x24
 800bb02:	e768      	b.n	800b9d6 <_svfiprintf_r+0x4e>
 800bb04:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb08:	460c      	mov	r4, r1
 800bb0a:	2001      	movs	r0, #1
 800bb0c:	e7a6      	b.n	800ba5c <_svfiprintf_r+0xd4>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	3401      	adds	r4, #1
 800bb12:	9305      	str	r3, [sp, #20]
 800bb14:	4619      	mov	r1, r3
 800bb16:	f04f 0c0a 	mov.w	ip, #10
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb20:	3a30      	subs	r2, #48	; 0x30
 800bb22:	2a09      	cmp	r2, #9
 800bb24:	d903      	bls.n	800bb2e <_svfiprintf_r+0x1a6>
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d0c6      	beq.n	800bab8 <_svfiprintf_r+0x130>
 800bb2a:	9105      	str	r1, [sp, #20]
 800bb2c:	e7c4      	b.n	800bab8 <_svfiprintf_r+0x130>
 800bb2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb32:	4604      	mov	r4, r0
 800bb34:	2301      	movs	r3, #1
 800bb36:	e7f0      	b.n	800bb1a <_svfiprintf_r+0x192>
 800bb38:	ab03      	add	r3, sp, #12
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	462a      	mov	r2, r5
 800bb3e:	4b0f      	ldr	r3, [pc, #60]	; (800bb7c <_svfiprintf_r+0x1f4>)
 800bb40:	a904      	add	r1, sp, #16
 800bb42:	4638      	mov	r0, r7
 800bb44:	f7fc fcf4 	bl	8008530 <_printf_float>
 800bb48:	1c42      	adds	r2, r0, #1
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	d1d6      	bne.n	800bafc <_svfiprintf_r+0x174>
 800bb4e:	89ab      	ldrh	r3, [r5, #12]
 800bb50:	065b      	lsls	r3, r3, #25
 800bb52:	f53f af2d 	bmi.w	800b9b0 <_svfiprintf_r+0x28>
 800bb56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb58:	b01d      	add	sp, #116	; 0x74
 800bb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5e:	ab03      	add	r3, sp, #12
 800bb60:	9300      	str	r3, [sp, #0]
 800bb62:	462a      	mov	r2, r5
 800bb64:	4b05      	ldr	r3, [pc, #20]	; (800bb7c <_svfiprintf_r+0x1f4>)
 800bb66:	a904      	add	r1, sp, #16
 800bb68:	4638      	mov	r0, r7
 800bb6a:	f7fc ff85 	bl	8008a78 <_printf_i>
 800bb6e:	e7eb      	b.n	800bb48 <_svfiprintf_r+0x1c0>
 800bb70:	0800f4c1 	.word	0x0800f4c1
 800bb74:	0800f4cb 	.word	0x0800f4cb
 800bb78:	08008531 	.word	0x08008531
 800bb7c:	0800b8d5 	.word	0x0800b8d5
 800bb80:	0800f4c7 	.word	0x0800f4c7

0800bb84 <__sflush_r>:
 800bb84:	898a      	ldrh	r2, [r1, #12]
 800bb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	0710      	lsls	r0, r2, #28
 800bb8e:	460c      	mov	r4, r1
 800bb90:	d458      	bmi.n	800bc44 <__sflush_r+0xc0>
 800bb92:	684b      	ldr	r3, [r1, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dc05      	bgt.n	800bba4 <__sflush_r+0x20>
 800bb98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	dc02      	bgt.n	800bba4 <__sflush_r+0x20>
 800bb9e:	2000      	movs	r0, #0
 800bba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bba6:	2e00      	cmp	r6, #0
 800bba8:	d0f9      	beq.n	800bb9e <__sflush_r+0x1a>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbb0:	682f      	ldr	r7, [r5, #0]
 800bbb2:	6a21      	ldr	r1, [r4, #32]
 800bbb4:	602b      	str	r3, [r5, #0]
 800bbb6:	d032      	beq.n	800bc1e <__sflush_r+0x9a>
 800bbb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbba:	89a3      	ldrh	r3, [r4, #12]
 800bbbc:	075a      	lsls	r2, r3, #29
 800bbbe:	d505      	bpl.n	800bbcc <__sflush_r+0x48>
 800bbc0:	6863      	ldr	r3, [r4, #4]
 800bbc2:	1ac0      	subs	r0, r0, r3
 800bbc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbc6:	b10b      	cbz	r3, 800bbcc <__sflush_r+0x48>
 800bbc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbca:	1ac0      	subs	r0, r0, r3
 800bbcc:	2300      	movs	r3, #0
 800bbce:	4602      	mov	r2, r0
 800bbd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbd2:	6a21      	ldr	r1, [r4, #32]
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	47b0      	blx	r6
 800bbd8:	1c43      	adds	r3, r0, #1
 800bbda:	89a3      	ldrh	r3, [r4, #12]
 800bbdc:	d106      	bne.n	800bbec <__sflush_r+0x68>
 800bbde:	6829      	ldr	r1, [r5, #0]
 800bbe0:	291d      	cmp	r1, #29
 800bbe2:	d82b      	bhi.n	800bc3c <__sflush_r+0xb8>
 800bbe4:	4a29      	ldr	r2, [pc, #164]	; (800bc8c <__sflush_r+0x108>)
 800bbe6:	410a      	asrs	r2, r1
 800bbe8:	07d6      	lsls	r6, r2, #31
 800bbea:	d427      	bmi.n	800bc3c <__sflush_r+0xb8>
 800bbec:	2200      	movs	r2, #0
 800bbee:	6062      	str	r2, [r4, #4]
 800bbf0:	04d9      	lsls	r1, r3, #19
 800bbf2:	6922      	ldr	r2, [r4, #16]
 800bbf4:	6022      	str	r2, [r4, #0]
 800bbf6:	d504      	bpl.n	800bc02 <__sflush_r+0x7e>
 800bbf8:	1c42      	adds	r2, r0, #1
 800bbfa:	d101      	bne.n	800bc00 <__sflush_r+0x7c>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b903      	cbnz	r3, 800bc02 <__sflush_r+0x7e>
 800bc00:	6560      	str	r0, [r4, #84]	; 0x54
 800bc02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc04:	602f      	str	r7, [r5, #0]
 800bc06:	2900      	cmp	r1, #0
 800bc08:	d0c9      	beq.n	800bb9e <__sflush_r+0x1a>
 800bc0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc0e:	4299      	cmp	r1, r3
 800bc10:	d002      	beq.n	800bc18 <__sflush_r+0x94>
 800bc12:	4628      	mov	r0, r5
 800bc14:	f7fe face 	bl	800a1b4 <_free_r>
 800bc18:	2000      	movs	r0, #0
 800bc1a:	6360      	str	r0, [r4, #52]	; 0x34
 800bc1c:	e7c0      	b.n	800bba0 <__sflush_r+0x1c>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	4628      	mov	r0, r5
 800bc22:	47b0      	blx	r6
 800bc24:	1c41      	adds	r1, r0, #1
 800bc26:	d1c8      	bne.n	800bbba <__sflush_r+0x36>
 800bc28:	682b      	ldr	r3, [r5, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d0c5      	beq.n	800bbba <__sflush_r+0x36>
 800bc2e:	2b1d      	cmp	r3, #29
 800bc30:	d001      	beq.n	800bc36 <__sflush_r+0xb2>
 800bc32:	2b16      	cmp	r3, #22
 800bc34:	d101      	bne.n	800bc3a <__sflush_r+0xb6>
 800bc36:	602f      	str	r7, [r5, #0]
 800bc38:	e7b1      	b.n	800bb9e <__sflush_r+0x1a>
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	e7ad      	b.n	800bba0 <__sflush_r+0x1c>
 800bc44:	690f      	ldr	r7, [r1, #16]
 800bc46:	2f00      	cmp	r7, #0
 800bc48:	d0a9      	beq.n	800bb9e <__sflush_r+0x1a>
 800bc4a:	0793      	lsls	r3, r2, #30
 800bc4c:	680e      	ldr	r6, [r1, #0]
 800bc4e:	bf08      	it	eq
 800bc50:	694b      	ldreq	r3, [r1, #20]
 800bc52:	600f      	str	r7, [r1, #0]
 800bc54:	bf18      	it	ne
 800bc56:	2300      	movne	r3, #0
 800bc58:	eba6 0807 	sub.w	r8, r6, r7
 800bc5c:	608b      	str	r3, [r1, #8]
 800bc5e:	f1b8 0f00 	cmp.w	r8, #0
 800bc62:	dd9c      	ble.n	800bb9e <__sflush_r+0x1a>
 800bc64:	6a21      	ldr	r1, [r4, #32]
 800bc66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc68:	4643      	mov	r3, r8
 800bc6a:	463a      	mov	r2, r7
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	47b0      	blx	r6
 800bc70:	2800      	cmp	r0, #0
 800bc72:	dc06      	bgt.n	800bc82 <__sflush_r+0xfe>
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc7a:	81a3      	strh	r3, [r4, #12]
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc80:	e78e      	b.n	800bba0 <__sflush_r+0x1c>
 800bc82:	4407      	add	r7, r0
 800bc84:	eba8 0800 	sub.w	r8, r8, r0
 800bc88:	e7e9      	b.n	800bc5e <__sflush_r+0xda>
 800bc8a:	bf00      	nop
 800bc8c:	dfbffffe 	.word	0xdfbffffe

0800bc90 <_fflush_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	690b      	ldr	r3, [r1, #16]
 800bc94:	4605      	mov	r5, r0
 800bc96:	460c      	mov	r4, r1
 800bc98:	b913      	cbnz	r3, 800bca0 <_fflush_r+0x10>
 800bc9a:	2500      	movs	r5, #0
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
 800bca0:	b118      	cbz	r0, 800bcaa <_fflush_r+0x1a>
 800bca2:	6a03      	ldr	r3, [r0, #32]
 800bca4:	b90b      	cbnz	r3, 800bcaa <_fflush_r+0x1a>
 800bca6:	f7fd faa5 	bl	80091f4 <__sinit>
 800bcaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d0f3      	beq.n	800bc9a <_fflush_r+0xa>
 800bcb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcb4:	07d0      	lsls	r0, r2, #31
 800bcb6:	d404      	bmi.n	800bcc2 <_fflush_r+0x32>
 800bcb8:	0599      	lsls	r1, r3, #22
 800bcba:	d402      	bmi.n	800bcc2 <_fflush_r+0x32>
 800bcbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcbe:	f7fd fbf4 	bl	80094aa <__retarget_lock_acquire_recursive>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	f7ff ff5d 	bl	800bb84 <__sflush_r>
 800bcca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bccc:	07da      	lsls	r2, r3, #31
 800bcce:	4605      	mov	r5, r0
 800bcd0:	d4e4      	bmi.n	800bc9c <_fflush_r+0xc>
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	059b      	lsls	r3, r3, #22
 800bcd6:	d4e1      	bmi.n	800bc9c <_fflush_r+0xc>
 800bcd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcda:	f7fd fbe7 	bl	80094ac <__retarget_lock_release_recursive>
 800bcde:	e7dd      	b.n	800bc9c <_fflush_r+0xc>

0800bce0 <memmove>:
 800bce0:	4288      	cmp	r0, r1
 800bce2:	b510      	push	{r4, lr}
 800bce4:	eb01 0402 	add.w	r4, r1, r2
 800bce8:	d902      	bls.n	800bcf0 <memmove+0x10>
 800bcea:	4284      	cmp	r4, r0
 800bcec:	4623      	mov	r3, r4
 800bcee:	d807      	bhi.n	800bd00 <memmove+0x20>
 800bcf0:	1e43      	subs	r3, r0, #1
 800bcf2:	42a1      	cmp	r1, r4
 800bcf4:	d008      	beq.n	800bd08 <memmove+0x28>
 800bcf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcfe:	e7f8      	b.n	800bcf2 <memmove+0x12>
 800bd00:	4402      	add	r2, r0
 800bd02:	4601      	mov	r1, r0
 800bd04:	428a      	cmp	r2, r1
 800bd06:	d100      	bne.n	800bd0a <memmove+0x2a>
 800bd08:	bd10      	pop	{r4, pc}
 800bd0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd12:	e7f7      	b.n	800bd04 <memmove+0x24>

0800bd14 <strncmp>:
 800bd14:	b510      	push	{r4, lr}
 800bd16:	b16a      	cbz	r2, 800bd34 <strncmp+0x20>
 800bd18:	3901      	subs	r1, #1
 800bd1a:	1884      	adds	r4, r0, r2
 800bd1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d103      	bne.n	800bd30 <strncmp+0x1c>
 800bd28:	42a0      	cmp	r0, r4
 800bd2a:	d001      	beq.n	800bd30 <strncmp+0x1c>
 800bd2c:	2a00      	cmp	r2, #0
 800bd2e:	d1f5      	bne.n	800bd1c <strncmp+0x8>
 800bd30:	1ad0      	subs	r0, r2, r3
 800bd32:	bd10      	pop	{r4, pc}
 800bd34:	4610      	mov	r0, r2
 800bd36:	e7fc      	b.n	800bd32 <strncmp+0x1e>

0800bd38 <memcpy>:
 800bd38:	440a      	add	r2, r1
 800bd3a:	4291      	cmp	r1, r2
 800bd3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd40:	d100      	bne.n	800bd44 <memcpy+0xc>
 800bd42:	4770      	bx	lr
 800bd44:	b510      	push	{r4, lr}
 800bd46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd4e:	4291      	cmp	r1, r2
 800bd50:	d1f9      	bne.n	800bd46 <memcpy+0xe>
 800bd52:	bd10      	pop	{r4, pc}
 800bd54:	0000      	movs	r0, r0
	...

0800bd58 <nan>:
 800bd58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bd60 <nan+0x8>
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	00000000 	.word	0x00000000
 800bd64:	7ff80000 	.word	0x7ff80000

0800bd68 <__assert_func>:
 800bd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd6a:	4614      	mov	r4, r2
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <__assert_func+0x2c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4605      	mov	r5, r0
 800bd74:	68d8      	ldr	r0, [r3, #12]
 800bd76:	b14c      	cbz	r4, 800bd8c <__assert_func+0x24>
 800bd78:	4b07      	ldr	r3, [pc, #28]	; (800bd98 <__assert_func+0x30>)
 800bd7a:	9100      	str	r1, [sp, #0]
 800bd7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd80:	4906      	ldr	r1, [pc, #24]	; (800bd9c <__assert_func+0x34>)
 800bd82:	462b      	mov	r3, r5
 800bd84:	f000 fbca 	bl	800c51c <fiprintf>
 800bd88:	f000 fbda 	bl	800c540 <abort>
 800bd8c:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <__assert_func+0x38>)
 800bd8e:	461c      	mov	r4, r3
 800bd90:	e7f3      	b.n	800bd7a <__assert_func+0x12>
 800bd92:	bf00      	nop
 800bd94:	20000064 	.word	0x20000064
 800bd98:	0800f4da 	.word	0x0800f4da
 800bd9c:	0800f4e7 	.word	0x0800f4e7
 800bda0:	0800f515 	.word	0x0800f515

0800bda4 <_calloc_r>:
 800bda4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bda6:	fba1 2402 	umull	r2, r4, r1, r2
 800bdaa:	b94c      	cbnz	r4, 800bdc0 <_calloc_r+0x1c>
 800bdac:	4611      	mov	r1, r2
 800bdae:	9201      	str	r2, [sp, #4]
 800bdb0:	f7fc fa92 	bl	80082d8 <_malloc_r>
 800bdb4:	9a01      	ldr	r2, [sp, #4]
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	b930      	cbnz	r0, 800bdc8 <_calloc_r+0x24>
 800bdba:	4628      	mov	r0, r5
 800bdbc:	b003      	add	sp, #12
 800bdbe:	bd30      	pop	{r4, r5, pc}
 800bdc0:	220c      	movs	r2, #12
 800bdc2:	6002      	str	r2, [r0, #0]
 800bdc4:	2500      	movs	r5, #0
 800bdc6:	e7f8      	b.n	800bdba <_calloc_r+0x16>
 800bdc8:	4621      	mov	r1, r4
 800bdca:	f7fd fae0 	bl	800938e <memset>
 800bdce:	e7f4      	b.n	800bdba <_calloc_r+0x16>

0800bdd0 <rshift>:
 800bdd0:	6903      	ldr	r3, [r0, #16]
 800bdd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bdd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdda:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bdde:	f100 0414 	add.w	r4, r0, #20
 800bde2:	dd45      	ble.n	800be70 <rshift+0xa0>
 800bde4:	f011 011f 	ands.w	r1, r1, #31
 800bde8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bdec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bdf0:	d10c      	bne.n	800be0c <rshift+0x3c>
 800bdf2:	f100 0710 	add.w	r7, r0, #16
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	42b1      	cmp	r1, r6
 800bdfa:	d334      	bcc.n	800be66 <rshift+0x96>
 800bdfc:	1a9b      	subs	r3, r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	1eea      	subs	r2, r5, #3
 800be02:	4296      	cmp	r6, r2
 800be04:	bf38      	it	cc
 800be06:	2300      	movcc	r3, #0
 800be08:	4423      	add	r3, r4
 800be0a:	e015      	b.n	800be38 <rshift+0x68>
 800be0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800be10:	f1c1 0820 	rsb	r8, r1, #32
 800be14:	40cf      	lsrs	r7, r1
 800be16:	f105 0e04 	add.w	lr, r5, #4
 800be1a:	46a1      	mov	r9, r4
 800be1c:	4576      	cmp	r6, lr
 800be1e:	46f4      	mov	ip, lr
 800be20:	d815      	bhi.n	800be4e <rshift+0x7e>
 800be22:	1a9a      	subs	r2, r3, r2
 800be24:	0092      	lsls	r2, r2, #2
 800be26:	3a04      	subs	r2, #4
 800be28:	3501      	adds	r5, #1
 800be2a:	42ae      	cmp	r6, r5
 800be2c:	bf38      	it	cc
 800be2e:	2200      	movcc	r2, #0
 800be30:	18a3      	adds	r3, r4, r2
 800be32:	50a7      	str	r7, [r4, r2]
 800be34:	b107      	cbz	r7, 800be38 <rshift+0x68>
 800be36:	3304      	adds	r3, #4
 800be38:	1b1a      	subs	r2, r3, r4
 800be3a:	42a3      	cmp	r3, r4
 800be3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800be40:	bf08      	it	eq
 800be42:	2300      	moveq	r3, #0
 800be44:	6102      	str	r2, [r0, #16]
 800be46:	bf08      	it	eq
 800be48:	6143      	streq	r3, [r0, #20]
 800be4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be4e:	f8dc c000 	ldr.w	ip, [ip]
 800be52:	fa0c fc08 	lsl.w	ip, ip, r8
 800be56:	ea4c 0707 	orr.w	r7, ip, r7
 800be5a:	f849 7b04 	str.w	r7, [r9], #4
 800be5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be62:	40cf      	lsrs	r7, r1
 800be64:	e7da      	b.n	800be1c <rshift+0x4c>
 800be66:	f851 cb04 	ldr.w	ip, [r1], #4
 800be6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800be6e:	e7c3      	b.n	800bdf8 <rshift+0x28>
 800be70:	4623      	mov	r3, r4
 800be72:	e7e1      	b.n	800be38 <rshift+0x68>

0800be74 <__hexdig_fun>:
 800be74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800be78:	2b09      	cmp	r3, #9
 800be7a:	d802      	bhi.n	800be82 <__hexdig_fun+0xe>
 800be7c:	3820      	subs	r0, #32
 800be7e:	b2c0      	uxtb	r0, r0
 800be80:	4770      	bx	lr
 800be82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800be86:	2b05      	cmp	r3, #5
 800be88:	d801      	bhi.n	800be8e <__hexdig_fun+0x1a>
 800be8a:	3847      	subs	r0, #71	; 0x47
 800be8c:	e7f7      	b.n	800be7e <__hexdig_fun+0xa>
 800be8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800be92:	2b05      	cmp	r3, #5
 800be94:	d801      	bhi.n	800be9a <__hexdig_fun+0x26>
 800be96:	3827      	subs	r0, #39	; 0x27
 800be98:	e7f1      	b.n	800be7e <__hexdig_fun+0xa>
 800be9a:	2000      	movs	r0, #0
 800be9c:	4770      	bx	lr
	...

0800bea0 <__gethex>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	4617      	mov	r7, r2
 800bea6:	680a      	ldr	r2, [r1, #0]
 800bea8:	b085      	sub	sp, #20
 800beaa:	f102 0b02 	add.w	fp, r2, #2
 800beae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800beb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800beb6:	4681      	mov	r9, r0
 800beb8:	468a      	mov	sl, r1
 800beba:	9302      	str	r3, [sp, #8]
 800bebc:	32fe      	adds	r2, #254	; 0xfe
 800bebe:	eb02 030b 	add.w	r3, r2, fp
 800bec2:	46d8      	mov	r8, fp
 800bec4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	2830      	cmp	r0, #48	; 0x30
 800becc:	d0f7      	beq.n	800bebe <__gethex+0x1e>
 800bece:	f7ff ffd1 	bl	800be74 <__hexdig_fun>
 800bed2:	4604      	mov	r4, r0
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d138      	bne.n	800bf4a <__gethex+0xaa>
 800bed8:	49a7      	ldr	r1, [pc, #668]	; (800c178 <__gethex+0x2d8>)
 800beda:	2201      	movs	r2, #1
 800bedc:	4640      	mov	r0, r8
 800bede:	f7ff ff19 	bl	800bd14 <strncmp>
 800bee2:	4606      	mov	r6, r0
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d169      	bne.n	800bfbc <__gethex+0x11c>
 800bee8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800beec:	465d      	mov	r5, fp
 800beee:	f7ff ffc1 	bl	800be74 <__hexdig_fun>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d064      	beq.n	800bfc0 <__gethex+0x120>
 800bef6:	465a      	mov	r2, fp
 800bef8:	7810      	ldrb	r0, [r2, #0]
 800befa:	2830      	cmp	r0, #48	; 0x30
 800befc:	4690      	mov	r8, r2
 800befe:	f102 0201 	add.w	r2, r2, #1
 800bf02:	d0f9      	beq.n	800bef8 <__gethex+0x58>
 800bf04:	f7ff ffb6 	bl	800be74 <__hexdig_fun>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	fab0 f480 	clz	r4, r0
 800bf0e:	0964      	lsrs	r4, r4, #5
 800bf10:	465e      	mov	r6, fp
 800bf12:	9301      	str	r3, [sp, #4]
 800bf14:	4642      	mov	r2, r8
 800bf16:	4615      	mov	r5, r2
 800bf18:	3201      	adds	r2, #1
 800bf1a:	7828      	ldrb	r0, [r5, #0]
 800bf1c:	f7ff ffaa 	bl	800be74 <__hexdig_fun>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d1f8      	bne.n	800bf16 <__gethex+0x76>
 800bf24:	4994      	ldr	r1, [pc, #592]	; (800c178 <__gethex+0x2d8>)
 800bf26:	2201      	movs	r2, #1
 800bf28:	4628      	mov	r0, r5
 800bf2a:	f7ff fef3 	bl	800bd14 <strncmp>
 800bf2e:	b978      	cbnz	r0, 800bf50 <__gethex+0xb0>
 800bf30:	b946      	cbnz	r6, 800bf44 <__gethex+0xa4>
 800bf32:	1c6e      	adds	r6, r5, #1
 800bf34:	4632      	mov	r2, r6
 800bf36:	4615      	mov	r5, r2
 800bf38:	3201      	adds	r2, #1
 800bf3a:	7828      	ldrb	r0, [r5, #0]
 800bf3c:	f7ff ff9a 	bl	800be74 <__hexdig_fun>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d1f8      	bne.n	800bf36 <__gethex+0x96>
 800bf44:	1b73      	subs	r3, r6, r5
 800bf46:	009e      	lsls	r6, r3, #2
 800bf48:	e004      	b.n	800bf54 <__gethex+0xb4>
 800bf4a:	2400      	movs	r4, #0
 800bf4c:	4626      	mov	r6, r4
 800bf4e:	e7e1      	b.n	800bf14 <__gethex+0x74>
 800bf50:	2e00      	cmp	r6, #0
 800bf52:	d1f7      	bne.n	800bf44 <__gethex+0xa4>
 800bf54:	782b      	ldrb	r3, [r5, #0]
 800bf56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf5a:	2b50      	cmp	r3, #80	; 0x50
 800bf5c:	d13d      	bne.n	800bfda <__gethex+0x13a>
 800bf5e:	786b      	ldrb	r3, [r5, #1]
 800bf60:	2b2b      	cmp	r3, #43	; 0x2b
 800bf62:	d02f      	beq.n	800bfc4 <__gethex+0x124>
 800bf64:	2b2d      	cmp	r3, #45	; 0x2d
 800bf66:	d031      	beq.n	800bfcc <__gethex+0x12c>
 800bf68:	1c69      	adds	r1, r5, #1
 800bf6a:	f04f 0b00 	mov.w	fp, #0
 800bf6e:	7808      	ldrb	r0, [r1, #0]
 800bf70:	f7ff ff80 	bl	800be74 <__hexdig_fun>
 800bf74:	1e42      	subs	r2, r0, #1
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	2a18      	cmp	r2, #24
 800bf7a:	d82e      	bhi.n	800bfda <__gethex+0x13a>
 800bf7c:	f1a0 0210 	sub.w	r2, r0, #16
 800bf80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf84:	f7ff ff76 	bl	800be74 <__hexdig_fun>
 800bf88:	f100 3cff 	add.w	ip, r0, #4294967295
 800bf8c:	fa5f fc8c 	uxtb.w	ip, ip
 800bf90:	f1bc 0f18 	cmp.w	ip, #24
 800bf94:	d91d      	bls.n	800bfd2 <__gethex+0x132>
 800bf96:	f1bb 0f00 	cmp.w	fp, #0
 800bf9a:	d000      	beq.n	800bf9e <__gethex+0xfe>
 800bf9c:	4252      	negs	r2, r2
 800bf9e:	4416      	add	r6, r2
 800bfa0:	f8ca 1000 	str.w	r1, [sl]
 800bfa4:	b1dc      	cbz	r4, 800bfde <__gethex+0x13e>
 800bfa6:	9b01      	ldr	r3, [sp, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	bf14      	ite	ne
 800bfac:	f04f 0800 	movne.w	r8, #0
 800bfb0:	f04f 0806 	moveq.w	r8, #6
 800bfb4:	4640      	mov	r0, r8
 800bfb6:	b005      	add	sp, #20
 800bfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfbc:	4645      	mov	r5, r8
 800bfbe:	4626      	mov	r6, r4
 800bfc0:	2401      	movs	r4, #1
 800bfc2:	e7c7      	b.n	800bf54 <__gethex+0xb4>
 800bfc4:	f04f 0b00 	mov.w	fp, #0
 800bfc8:	1ca9      	adds	r1, r5, #2
 800bfca:	e7d0      	b.n	800bf6e <__gethex+0xce>
 800bfcc:	f04f 0b01 	mov.w	fp, #1
 800bfd0:	e7fa      	b.n	800bfc8 <__gethex+0x128>
 800bfd2:	230a      	movs	r3, #10
 800bfd4:	fb03 0002 	mla	r0, r3, r2, r0
 800bfd8:	e7d0      	b.n	800bf7c <__gethex+0xdc>
 800bfda:	4629      	mov	r1, r5
 800bfdc:	e7e0      	b.n	800bfa0 <__gethex+0x100>
 800bfde:	eba5 0308 	sub.w	r3, r5, r8
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	2b07      	cmp	r3, #7
 800bfe8:	dc0a      	bgt.n	800c000 <__gethex+0x160>
 800bfea:	4648      	mov	r0, r9
 800bfec:	f7fe f92e 	bl	800a24c <_Balloc>
 800bff0:	4604      	mov	r4, r0
 800bff2:	b940      	cbnz	r0, 800c006 <__gethex+0x166>
 800bff4:	4b61      	ldr	r3, [pc, #388]	; (800c17c <__gethex+0x2dc>)
 800bff6:	4602      	mov	r2, r0
 800bff8:	21e4      	movs	r1, #228	; 0xe4
 800bffa:	4861      	ldr	r0, [pc, #388]	; (800c180 <__gethex+0x2e0>)
 800bffc:	f7ff feb4 	bl	800bd68 <__assert_func>
 800c000:	3101      	adds	r1, #1
 800c002:	105b      	asrs	r3, r3, #1
 800c004:	e7ef      	b.n	800bfe6 <__gethex+0x146>
 800c006:	f100 0a14 	add.w	sl, r0, #20
 800c00a:	2300      	movs	r3, #0
 800c00c:	495a      	ldr	r1, [pc, #360]	; (800c178 <__gethex+0x2d8>)
 800c00e:	f8cd a004 	str.w	sl, [sp, #4]
 800c012:	469b      	mov	fp, r3
 800c014:	45a8      	cmp	r8, r5
 800c016:	d342      	bcc.n	800c09e <__gethex+0x1fe>
 800c018:	9801      	ldr	r0, [sp, #4]
 800c01a:	f840 bb04 	str.w	fp, [r0], #4
 800c01e:	eba0 000a 	sub.w	r0, r0, sl
 800c022:	1080      	asrs	r0, r0, #2
 800c024:	6120      	str	r0, [r4, #16]
 800c026:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c02a:	4658      	mov	r0, fp
 800c02c:	f7fe fa00 	bl	800a430 <__hi0bits>
 800c030:	683d      	ldr	r5, [r7, #0]
 800c032:	eba8 0000 	sub.w	r0, r8, r0
 800c036:	42a8      	cmp	r0, r5
 800c038:	dd59      	ble.n	800c0ee <__gethex+0x24e>
 800c03a:	eba0 0805 	sub.w	r8, r0, r5
 800c03e:	4641      	mov	r1, r8
 800c040:	4620      	mov	r0, r4
 800c042:	f7fe fd8f 	bl	800ab64 <__any_on>
 800c046:	4683      	mov	fp, r0
 800c048:	b1b8      	cbz	r0, 800c07a <__gethex+0x1da>
 800c04a:	f108 33ff 	add.w	r3, r8, #4294967295
 800c04e:	1159      	asrs	r1, r3, #5
 800c050:	f003 021f 	and.w	r2, r3, #31
 800c054:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c058:	f04f 0b01 	mov.w	fp, #1
 800c05c:	fa0b f202 	lsl.w	r2, fp, r2
 800c060:	420a      	tst	r2, r1
 800c062:	d00a      	beq.n	800c07a <__gethex+0x1da>
 800c064:	455b      	cmp	r3, fp
 800c066:	dd06      	ble.n	800c076 <__gethex+0x1d6>
 800c068:	f1a8 0102 	sub.w	r1, r8, #2
 800c06c:	4620      	mov	r0, r4
 800c06e:	f7fe fd79 	bl	800ab64 <__any_on>
 800c072:	2800      	cmp	r0, #0
 800c074:	d138      	bne.n	800c0e8 <__gethex+0x248>
 800c076:	f04f 0b02 	mov.w	fp, #2
 800c07a:	4641      	mov	r1, r8
 800c07c:	4620      	mov	r0, r4
 800c07e:	f7ff fea7 	bl	800bdd0 <rshift>
 800c082:	4446      	add	r6, r8
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	42b3      	cmp	r3, r6
 800c088:	da41      	bge.n	800c10e <__gethex+0x26e>
 800c08a:	4621      	mov	r1, r4
 800c08c:	4648      	mov	r0, r9
 800c08e:	f7fe f91d 	bl	800a2cc <_Bfree>
 800c092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c094:	2300      	movs	r3, #0
 800c096:	6013      	str	r3, [r2, #0]
 800c098:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c09c:	e78a      	b.n	800bfb4 <__gethex+0x114>
 800c09e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c0a2:	2a2e      	cmp	r2, #46	; 0x2e
 800c0a4:	d014      	beq.n	800c0d0 <__gethex+0x230>
 800c0a6:	2b20      	cmp	r3, #32
 800c0a8:	d106      	bne.n	800c0b8 <__gethex+0x218>
 800c0aa:	9b01      	ldr	r3, [sp, #4]
 800c0ac:	f843 bb04 	str.w	fp, [r3], #4
 800c0b0:	f04f 0b00 	mov.w	fp, #0
 800c0b4:	9301      	str	r3, [sp, #4]
 800c0b6:	465b      	mov	r3, fp
 800c0b8:	7828      	ldrb	r0, [r5, #0]
 800c0ba:	9303      	str	r3, [sp, #12]
 800c0bc:	f7ff feda 	bl	800be74 <__hexdig_fun>
 800c0c0:	9b03      	ldr	r3, [sp, #12]
 800c0c2:	f000 000f 	and.w	r0, r0, #15
 800c0c6:	4098      	lsls	r0, r3
 800c0c8:	ea4b 0b00 	orr.w	fp, fp, r0
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	e7a1      	b.n	800c014 <__gethex+0x174>
 800c0d0:	45a8      	cmp	r8, r5
 800c0d2:	d8e8      	bhi.n	800c0a6 <__gethex+0x206>
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	9303      	str	r3, [sp, #12]
 800c0da:	f7ff fe1b 	bl	800bd14 <strncmp>
 800c0de:	4926      	ldr	r1, [pc, #152]	; (800c178 <__gethex+0x2d8>)
 800c0e0:	9b03      	ldr	r3, [sp, #12]
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d1df      	bne.n	800c0a6 <__gethex+0x206>
 800c0e6:	e795      	b.n	800c014 <__gethex+0x174>
 800c0e8:	f04f 0b03 	mov.w	fp, #3
 800c0ec:	e7c5      	b.n	800c07a <__gethex+0x1da>
 800c0ee:	da0b      	bge.n	800c108 <__gethex+0x268>
 800c0f0:	eba5 0800 	sub.w	r8, r5, r0
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	4642      	mov	r2, r8
 800c0f8:	4648      	mov	r0, r9
 800c0fa:	f7fe fb01 	bl	800a700 <__lshift>
 800c0fe:	eba6 0608 	sub.w	r6, r6, r8
 800c102:	4604      	mov	r4, r0
 800c104:	f100 0a14 	add.w	sl, r0, #20
 800c108:	f04f 0b00 	mov.w	fp, #0
 800c10c:	e7ba      	b.n	800c084 <__gethex+0x1e4>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	42b3      	cmp	r3, r6
 800c112:	dd73      	ble.n	800c1fc <__gethex+0x35c>
 800c114:	1b9e      	subs	r6, r3, r6
 800c116:	42b5      	cmp	r5, r6
 800c118:	dc34      	bgt.n	800c184 <__gethex+0x2e4>
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d023      	beq.n	800c168 <__gethex+0x2c8>
 800c120:	2b03      	cmp	r3, #3
 800c122:	d025      	beq.n	800c170 <__gethex+0x2d0>
 800c124:	2b01      	cmp	r3, #1
 800c126:	d115      	bne.n	800c154 <__gethex+0x2b4>
 800c128:	42b5      	cmp	r5, r6
 800c12a:	d113      	bne.n	800c154 <__gethex+0x2b4>
 800c12c:	2d01      	cmp	r5, #1
 800c12e:	d10b      	bne.n	800c148 <__gethex+0x2a8>
 800c130:	9a02      	ldr	r2, [sp, #8]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6013      	str	r3, [r2, #0]
 800c136:	2301      	movs	r3, #1
 800c138:	6123      	str	r3, [r4, #16]
 800c13a:	f8ca 3000 	str.w	r3, [sl]
 800c13e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c140:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c144:	601c      	str	r4, [r3, #0]
 800c146:	e735      	b.n	800bfb4 <__gethex+0x114>
 800c148:	1e69      	subs	r1, r5, #1
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7fe fd0a 	bl	800ab64 <__any_on>
 800c150:	2800      	cmp	r0, #0
 800c152:	d1ed      	bne.n	800c130 <__gethex+0x290>
 800c154:	4621      	mov	r1, r4
 800c156:	4648      	mov	r0, r9
 800c158:	f7fe f8b8 	bl	800a2cc <_Bfree>
 800c15c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c15e:	2300      	movs	r3, #0
 800c160:	6013      	str	r3, [r2, #0]
 800c162:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c166:	e725      	b.n	800bfb4 <__gethex+0x114>
 800c168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1f2      	bne.n	800c154 <__gethex+0x2b4>
 800c16e:	e7df      	b.n	800c130 <__gethex+0x290>
 800c170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1dc      	bne.n	800c130 <__gethex+0x290>
 800c176:	e7ed      	b.n	800c154 <__gethex+0x2b4>
 800c178:	0800f36c 	.word	0x0800f36c
 800c17c:	0800f205 	.word	0x0800f205
 800c180:	0800f516 	.word	0x0800f516
 800c184:	f106 38ff 	add.w	r8, r6, #4294967295
 800c188:	f1bb 0f00 	cmp.w	fp, #0
 800c18c:	d133      	bne.n	800c1f6 <__gethex+0x356>
 800c18e:	f1b8 0f00 	cmp.w	r8, #0
 800c192:	d004      	beq.n	800c19e <__gethex+0x2fe>
 800c194:	4641      	mov	r1, r8
 800c196:	4620      	mov	r0, r4
 800c198:	f7fe fce4 	bl	800ab64 <__any_on>
 800c19c:	4683      	mov	fp, r0
 800c19e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c1a8:	f008 081f 	and.w	r8, r8, #31
 800c1ac:	fa03 f308 	lsl.w	r3, r3, r8
 800c1b0:	4213      	tst	r3, r2
 800c1b2:	4631      	mov	r1, r6
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	bf18      	it	ne
 800c1b8:	f04b 0b02 	orrne.w	fp, fp, #2
 800c1bc:	1bad      	subs	r5, r5, r6
 800c1be:	f7ff fe07 	bl	800bdd0 <rshift>
 800c1c2:	687e      	ldr	r6, [r7, #4]
 800c1c4:	f04f 0802 	mov.w	r8, #2
 800c1c8:	f1bb 0f00 	cmp.w	fp, #0
 800c1cc:	d04a      	beq.n	800c264 <__gethex+0x3c4>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d016      	beq.n	800c202 <__gethex+0x362>
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d018      	beq.n	800c20a <__gethex+0x36a>
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d109      	bne.n	800c1f0 <__gethex+0x350>
 800c1dc:	f01b 0f02 	tst.w	fp, #2
 800c1e0:	d006      	beq.n	800c1f0 <__gethex+0x350>
 800c1e2:	f8da 3000 	ldr.w	r3, [sl]
 800c1e6:	ea4b 0b03 	orr.w	fp, fp, r3
 800c1ea:	f01b 0f01 	tst.w	fp, #1
 800c1ee:	d10f      	bne.n	800c210 <__gethex+0x370>
 800c1f0:	f048 0810 	orr.w	r8, r8, #16
 800c1f4:	e036      	b.n	800c264 <__gethex+0x3c4>
 800c1f6:	f04f 0b01 	mov.w	fp, #1
 800c1fa:	e7d0      	b.n	800c19e <__gethex+0x2fe>
 800c1fc:	f04f 0801 	mov.w	r8, #1
 800c200:	e7e2      	b.n	800c1c8 <__gethex+0x328>
 800c202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c204:	f1c3 0301 	rsb	r3, r3, #1
 800c208:	930f      	str	r3, [sp, #60]	; 0x3c
 800c20a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d0ef      	beq.n	800c1f0 <__gethex+0x350>
 800c210:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c214:	f104 0214 	add.w	r2, r4, #20
 800c218:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c222:	2300      	movs	r3, #0
 800c224:	4694      	mov	ip, r2
 800c226:	f852 1b04 	ldr.w	r1, [r2], #4
 800c22a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c22e:	d01e      	beq.n	800c26e <__gethex+0x3ce>
 800c230:	3101      	adds	r1, #1
 800c232:	f8cc 1000 	str.w	r1, [ip]
 800c236:	f1b8 0f02 	cmp.w	r8, #2
 800c23a:	f104 0214 	add.w	r2, r4, #20
 800c23e:	d13d      	bne.n	800c2bc <__gethex+0x41c>
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	3b01      	subs	r3, #1
 800c244:	42ab      	cmp	r3, r5
 800c246:	d10b      	bne.n	800c260 <__gethex+0x3c0>
 800c248:	1169      	asrs	r1, r5, #5
 800c24a:	2301      	movs	r3, #1
 800c24c:	f005 051f 	and.w	r5, r5, #31
 800c250:	fa03 f505 	lsl.w	r5, r3, r5
 800c254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c258:	421d      	tst	r5, r3
 800c25a:	bf18      	it	ne
 800c25c:	f04f 0801 	movne.w	r8, #1
 800c260:	f048 0820 	orr.w	r8, r8, #32
 800c264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c266:	601c      	str	r4, [r3, #0]
 800c268:	9b02      	ldr	r3, [sp, #8]
 800c26a:	601e      	str	r6, [r3, #0]
 800c26c:	e6a2      	b.n	800bfb4 <__gethex+0x114>
 800c26e:	4290      	cmp	r0, r2
 800c270:	f842 3c04 	str.w	r3, [r2, #-4]
 800c274:	d8d6      	bhi.n	800c224 <__gethex+0x384>
 800c276:	68a2      	ldr	r2, [r4, #8]
 800c278:	4593      	cmp	fp, r2
 800c27a:	db17      	blt.n	800c2ac <__gethex+0x40c>
 800c27c:	6861      	ldr	r1, [r4, #4]
 800c27e:	4648      	mov	r0, r9
 800c280:	3101      	adds	r1, #1
 800c282:	f7fd ffe3 	bl	800a24c <_Balloc>
 800c286:	4682      	mov	sl, r0
 800c288:	b918      	cbnz	r0, 800c292 <__gethex+0x3f2>
 800c28a:	4b1b      	ldr	r3, [pc, #108]	; (800c2f8 <__gethex+0x458>)
 800c28c:	4602      	mov	r2, r0
 800c28e:	2184      	movs	r1, #132	; 0x84
 800c290:	e6b3      	b.n	800bffa <__gethex+0x15a>
 800c292:	6922      	ldr	r2, [r4, #16]
 800c294:	3202      	adds	r2, #2
 800c296:	f104 010c 	add.w	r1, r4, #12
 800c29a:	0092      	lsls	r2, r2, #2
 800c29c:	300c      	adds	r0, #12
 800c29e:	f7ff fd4b 	bl	800bd38 <memcpy>
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4648      	mov	r0, r9
 800c2a6:	f7fe f811 	bl	800a2cc <_Bfree>
 800c2aa:	4654      	mov	r4, sl
 800c2ac:	6922      	ldr	r2, [r4, #16]
 800c2ae:	1c51      	adds	r1, r2, #1
 800c2b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c2b4:	6121      	str	r1, [r4, #16]
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	6151      	str	r1, [r2, #20]
 800c2ba:	e7bc      	b.n	800c236 <__gethex+0x396>
 800c2bc:	6921      	ldr	r1, [r4, #16]
 800c2be:	4559      	cmp	r1, fp
 800c2c0:	dd0b      	ble.n	800c2da <__gethex+0x43a>
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f7ff fd83 	bl	800bdd0 <rshift>
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	3601      	adds	r6, #1
 800c2ce:	42b3      	cmp	r3, r6
 800c2d0:	f6ff aedb 	blt.w	800c08a <__gethex+0x1ea>
 800c2d4:	f04f 0801 	mov.w	r8, #1
 800c2d8:	e7c2      	b.n	800c260 <__gethex+0x3c0>
 800c2da:	f015 051f 	ands.w	r5, r5, #31
 800c2de:	d0f9      	beq.n	800c2d4 <__gethex+0x434>
 800c2e0:	9b01      	ldr	r3, [sp, #4]
 800c2e2:	441a      	add	r2, r3
 800c2e4:	f1c5 0520 	rsb	r5, r5, #32
 800c2e8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c2ec:	f7fe f8a0 	bl	800a430 <__hi0bits>
 800c2f0:	42a8      	cmp	r0, r5
 800c2f2:	dbe6      	blt.n	800c2c2 <__gethex+0x422>
 800c2f4:	e7ee      	b.n	800c2d4 <__gethex+0x434>
 800c2f6:	bf00      	nop
 800c2f8:	0800f205 	.word	0x0800f205

0800c2fc <L_shift>:
 800c2fc:	f1c2 0208 	rsb	r2, r2, #8
 800c300:	0092      	lsls	r2, r2, #2
 800c302:	b570      	push	{r4, r5, r6, lr}
 800c304:	f1c2 0620 	rsb	r6, r2, #32
 800c308:	6843      	ldr	r3, [r0, #4]
 800c30a:	6804      	ldr	r4, [r0, #0]
 800c30c:	fa03 f506 	lsl.w	r5, r3, r6
 800c310:	432c      	orrs	r4, r5
 800c312:	40d3      	lsrs	r3, r2
 800c314:	6004      	str	r4, [r0, #0]
 800c316:	f840 3f04 	str.w	r3, [r0, #4]!
 800c31a:	4288      	cmp	r0, r1
 800c31c:	d3f4      	bcc.n	800c308 <L_shift+0xc>
 800c31e:	bd70      	pop	{r4, r5, r6, pc}

0800c320 <__match>:
 800c320:	b530      	push	{r4, r5, lr}
 800c322:	6803      	ldr	r3, [r0, #0]
 800c324:	3301      	adds	r3, #1
 800c326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c32a:	b914      	cbnz	r4, 800c332 <__match+0x12>
 800c32c:	6003      	str	r3, [r0, #0]
 800c32e:	2001      	movs	r0, #1
 800c330:	bd30      	pop	{r4, r5, pc}
 800c332:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c336:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c33a:	2d19      	cmp	r5, #25
 800c33c:	bf98      	it	ls
 800c33e:	3220      	addls	r2, #32
 800c340:	42a2      	cmp	r2, r4
 800c342:	d0f0      	beq.n	800c326 <__match+0x6>
 800c344:	2000      	movs	r0, #0
 800c346:	e7f3      	b.n	800c330 <__match+0x10>

0800c348 <__hexnan>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	680b      	ldr	r3, [r1, #0]
 800c34e:	6801      	ldr	r1, [r0, #0]
 800c350:	115e      	asrs	r6, r3, #5
 800c352:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c356:	f013 031f 	ands.w	r3, r3, #31
 800c35a:	b087      	sub	sp, #28
 800c35c:	bf18      	it	ne
 800c35e:	3604      	addne	r6, #4
 800c360:	2500      	movs	r5, #0
 800c362:	1f37      	subs	r7, r6, #4
 800c364:	4682      	mov	sl, r0
 800c366:	4690      	mov	r8, r2
 800c368:	9301      	str	r3, [sp, #4]
 800c36a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c36e:	46b9      	mov	r9, r7
 800c370:	463c      	mov	r4, r7
 800c372:	9502      	str	r5, [sp, #8]
 800c374:	46ab      	mov	fp, r5
 800c376:	784a      	ldrb	r2, [r1, #1]
 800c378:	1c4b      	adds	r3, r1, #1
 800c37a:	9303      	str	r3, [sp, #12]
 800c37c:	b342      	cbz	r2, 800c3d0 <__hexnan+0x88>
 800c37e:	4610      	mov	r0, r2
 800c380:	9105      	str	r1, [sp, #20]
 800c382:	9204      	str	r2, [sp, #16]
 800c384:	f7ff fd76 	bl	800be74 <__hexdig_fun>
 800c388:	2800      	cmp	r0, #0
 800c38a:	d14f      	bne.n	800c42c <__hexnan+0xe4>
 800c38c:	9a04      	ldr	r2, [sp, #16]
 800c38e:	9905      	ldr	r1, [sp, #20]
 800c390:	2a20      	cmp	r2, #32
 800c392:	d818      	bhi.n	800c3c6 <__hexnan+0x7e>
 800c394:	9b02      	ldr	r3, [sp, #8]
 800c396:	459b      	cmp	fp, r3
 800c398:	dd13      	ble.n	800c3c2 <__hexnan+0x7a>
 800c39a:	454c      	cmp	r4, r9
 800c39c:	d206      	bcs.n	800c3ac <__hexnan+0x64>
 800c39e:	2d07      	cmp	r5, #7
 800c3a0:	dc04      	bgt.n	800c3ac <__hexnan+0x64>
 800c3a2:	462a      	mov	r2, r5
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f7ff ffa8 	bl	800c2fc <L_shift>
 800c3ac:	4544      	cmp	r4, r8
 800c3ae:	d950      	bls.n	800c452 <__hexnan+0x10a>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f1a4 0904 	sub.w	r9, r4, #4
 800c3b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3ba:	f8cd b008 	str.w	fp, [sp, #8]
 800c3be:	464c      	mov	r4, r9
 800c3c0:	461d      	mov	r5, r3
 800c3c2:	9903      	ldr	r1, [sp, #12]
 800c3c4:	e7d7      	b.n	800c376 <__hexnan+0x2e>
 800c3c6:	2a29      	cmp	r2, #41	; 0x29
 800c3c8:	d155      	bne.n	800c476 <__hexnan+0x12e>
 800c3ca:	3102      	adds	r1, #2
 800c3cc:	f8ca 1000 	str.w	r1, [sl]
 800c3d0:	f1bb 0f00 	cmp.w	fp, #0
 800c3d4:	d04f      	beq.n	800c476 <__hexnan+0x12e>
 800c3d6:	454c      	cmp	r4, r9
 800c3d8:	d206      	bcs.n	800c3e8 <__hexnan+0xa0>
 800c3da:	2d07      	cmp	r5, #7
 800c3dc:	dc04      	bgt.n	800c3e8 <__hexnan+0xa0>
 800c3de:	462a      	mov	r2, r5
 800c3e0:	4649      	mov	r1, r9
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f7ff ff8a 	bl	800c2fc <L_shift>
 800c3e8:	4544      	cmp	r4, r8
 800c3ea:	d934      	bls.n	800c456 <__hexnan+0x10e>
 800c3ec:	f1a8 0204 	sub.w	r2, r8, #4
 800c3f0:	4623      	mov	r3, r4
 800c3f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c3f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c3fa:	429f      	cmp	r7, r3
 800c3fc:	d2f9      	bcs.n	800c3f2 <__hexnan+0xaa>
 800c3fe:	1b3b      	subs	r3, r7, r4
 800c400:	f023 0303 	bic.w	r3, r3, #3
 800c404:	3304      	adds	r3, #4
 800c406:	3e03      	subs	r6, #3
 800c408:	3401      	adds	r4, #1
 800c40a:	42a6      	cmp	r6, r4
 800c40c:	bf38      	it	cc
 800c40e:	2304      	movcc	r3, #4
 800c410:	4443      	add	r3, r8
 800c412:	2200      	movs	r2, #0
 800c414:	f843 2b04 	str.w	r2, [r3], #4
 800c418:	429f      	cmp	r7, r3
 800c41a:	d2fb      	bcs.n	800c414 <__hexnan+0xcc>
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	b91b      	cbnz	r3, 800c428 <__hexnan+0xe0>
 800c420:	4547      	cmp	r7, r8
 800c422:	d126      	bne.n	800c472 <__hexnan+0x12a>
 800c424:	2301      	movs	r3, #1
 800c426:	603b      	str	r3, [r7, #0]
 800c428:	2005      	movs	r0, #5
 800c42a:	e025      	b.n	800c478 <__hexnan+0x130>
 800c42c:	3501      	adds	r5, #1
 800c42e:	2d08      	cmp	r5, #8
 800c430:	f10b 0b01 	add.w	fp, fp, #1
 800c434:	dd06      	ble.n	800c444 <__hexnan+0xfc>
 800c436:	4544      	cmp	r4, r8
 800c438:	d9c3      	bls.n	800c3c2 <__hexnan+0x7a>
 800c43a:	2300      	movs	r3, #0
 800c43c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c440:	2501      	movs	r5, #1
 800c442:	3c04      	subs	r4, #4
 800c444:	6822      	ldr	r2, [r4, #0]
 800c446:	f000 000f 	and.w	r0, r0, #15
 800c44a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c44e:	6020      	str	r0, [r4, #0]
 800c450:	e7b7      	b.n	800c3c2 <__hexnan+0x7a>
 800c452:	2508      	movs	r5, #8
 800c454:	e7b5      	b.n	800c3c2 <__hexnan+0x7a>
 800c456:	9b01      	ldr	r3, [sp, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d0df      	beq.n	800c41c <__hexnan+0xd4>
 800c45c:	f1c3 0320 	rsb	r3, r3, #32
 800c460:	f04f 32ff 	mov.w	r2, #4294967295
 800c464:	40da      	lsrs	r2, r3
 800c466:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c46a:	4013      	ands	r3, r2
 800c46c:	f846 3c04 	str.w	r3, [r6, #-4]
 800c470:	e7d4      	b.n	800c41c <__hexnan+0xd4>
 800c472:	3f04      	subs	r7, #4
 800c474:	e7d2      	b.n	800c41c <__hexnan+0xd4>
 800c476:	2004      	movs	r0, #4
 800c478:	b007      	add	sp, #28
 800c47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c47e <__ascii_mbtowc>:
 800c47e:	b082      	sub	sp, #8
 800c480:	b901      	cbnz	r1, 800c484 <__ascii_mbtowc+0x6>
 800c482:	a901      	add	r1, sp, #4
 800c484:	b142      	cbz	r2, 800c498 <__ascii_mbtowc+0x1a>
 800c486:	b14b      	cbz	r3, 800c49c <__ascii_mbtowc+0x1e>
 800c488:	7813      	ldrb	r3, [r2, #0]
 800c48a:	600b      	str	r3, [r1, #0]
 800c48c:	7812      	ldrb	r2, [r2, #0]
 800c48e:	1e10      	subs	r0, r2, #0
 800c490:	bf18      	it	ne
 800c492:	2001      	movne	r0, #1
 800c494:	b002      	add	sp, #8
 800c496:	4770      	bx	lr
 800c498:	4610      	mov	r0, r2
 800c49a:	e7fb      	b.n	800c494 <__ascii_mbtowc+0x16>
 800c49c:	f06f 0001 	mvn.w	r0, #1
 800c4a0:	e7f8      	b.n	800c494 <__ascii_mbtowc+0x16>

0800c4a2 <_realloc_r>:
 800c4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a6:	4680      	mov	r8, r0
 800c4a8:	4614      	mov	r4, r2
 800c4aa:	460e      	mov	r6, r1
 800c4ac:	b921      	cbnz	r1, 800c4b8 <_realloc_r+0x16>
 800c4ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b2:	4611      	mov	r1, r2
 800c4b4:	f7fb bf10 	b.w	80082d8 <_malloc_r>
 800c4b8:	b92a      	cbnz	r2, 800c4c6 <_realloc_r+0x24>
 800c4ba:	f7fd fe7b 	bl	800a1b4 <_free_r>
 800c4be:	4625      	mov	r5, r4
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c6:	f000 f842 	bl	800c54e <_malloc_usable_size_r>
 800c4ca:	4284      	cmp	r4, r0
 800c4cc:	4607      	mov	r7, r0
 800c4ce:	d802      	bhi.n	800c4d6 <_realloc_r+0x34>
 800c4d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4d4:	d812      	bhi.n	800c4fc <_realloc_r+0x5a>
 800c4d6:	4621      	mov	r1, r4
 800c4d8:	4640      	mov	r0, r8
 800c4da:	f7fb fefd 	bl	80082d8 <_malloc_r>
 800c4de:	4605      	mov	r5, r0
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d0ed      	beq.n	800c4c0 <_realloc_r+0x1e>
 800c4e4:	42bc      	cmp	r4, r7
 800c4e6:	4622      	mov	r2, r4
 800c4e8:	4631      	mov	r1, r6
 800c4ea:	bf28      	it	cs
 800c4ec:	463a      	movcs	r2, r7
 800c4ee:	f7ff fc23 	bl	800bd38 <memcpy>
 800c4f2:	4631      	mov	r1, r6
 800c4f4:	4640      	mov	r0, r8
 800c4f6:	f7fd fe5d 	bl	800a1b4 <_free_r>
 800c4fa:	e7e1      	b.n	800c4c0 <_realloc_r+0x1e>
 800c4fc:	4635      	mov	r5, r6
 800c4fe:	e7df      	b.n	800c4c0 <_realloc_r+0x1e>

0800c500 <__ascii_wctomb>:
 800c500:	b149      	cbz	r1, 800c516 <__ascii_wctomb+0x16>
 800c502:	2aff      	cmp	r2, #255	; 0xff
 800c504:	bf85      	ittet	hi
 800c506:	238a      	movhi	r3, #138	; 0x8a
 800c508:	6003      	strhi	r3, [r0, #0]
 800c50a:	700a      	strbls	r2, [r1, #0]
 800c50c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c510:	bf98      	it	ls
 800c512:	2001      	movls	r0, #1
 800c514:	4770      	bx	lr
 800c516:	4608      	mov	r0, r1
 800c518:	4770      	bx	lr
	...

0800c51c <fiprintf>:
 800c51c:	b40e      	push	{r1, r2, r3}
 800c51e:	b503      	push	{r0, r1, lr}
 800c520:	4601      	mov	r1, r0
 800c522:	ab03      	add	r3, sp, #12
 800c524:	4805      	ldr	r0, [pc, #20]	; (800c53c <fiprintf+0x20>)
 800c526:	f853 2b04 	ldr.w	r2, [r3], #4
 800c52a:	6800      	ldr	r0, [r0, #0]
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	f000 f83f 	bl	800c5b0 <_vfiprintf_r>
 800c532:	b002      	add	sp, #8
 800c534:	f85d eb04 	ldr.w	lr, [sp], #4
 800c538:	b003      	add	sp, #12
 800c53a:	4770      	bx	lr
 800c53c:	20000064 	.word	0x20000064

0800c540 <abort>:
 800c540:	b508      	push	{r3, lr}
 800c542:	2006      	movs	r0, #6
 800c544:	f000 fa0c 	bl	800c960 <raise>
 800c548:	2001      	movs	r0, #1
 800c54a:	f7f7 fb19 	bl	8003b80 <_exit>

0800c54e <_malloc_usable_size_r>:
 800c54e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c552:	1f18      	subs	r0, r3, #4
 800c554:	2b00      	cmp	r3, #0
 800c556:	bfbc      	itt	lt
 800c558:	580b      	ldrlt	r3, [r1, r0]
 800c55a:	18c0      	addlt	r0, r0, r3
 800c55c:	4770      	bx	lr

0800c55e <__sfputc_r>:
 800c55e:	6893      	ldr	r3, [r2, #8]
 800c560:	3b01      	subs	r3, #1
 800c562:	2b00      	cmp	r3, #0
 800c564:	b410      	push	{r4}
 800c566:	6093      	str	r3, [r2, #8]
 800c568:	da08      	bge.n	800c57c <__sfputc_r+0x1e>
 800c56a:	6994      	ldr	r4, [r2, #24]
 800c56c:	42a3      	cmp	r3, r4
 800c56e:	db01      	blt.n	800c574 <__sfputc_r+0x16>
 800c570:	290a      	cmp	r1, #10
 800c572:	d103      	bne.n	800c57c <__sfputc_r+0x1e>
 800c574:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c578:	f000 b934 	b.w	800c7e4 <__swbuf_r>
 800c57c:	6813      	ldr	r3, [r2, #0]
 800c57e:	1c58      	adds	r0, r3, #1
 800c580:	6010      	str	r0, [r2, #0]
 800c582:	7019      	strb	r1, [r3, #0]
 800c584:	4608      	mov	r0, r1
 800c586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <__sfputs_r>:
 800c58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58e:	4606      	mov	r6, r0
 800c590:	460f      	mov	r7, r1
 800c592:	4614      	mov	r4, r2
 800c594:	18d5      	adds	r5, r2, r3
 800c596:	42ac      	cmp	r4, r5
 800c598:	d101      	bne.n	800c59e <__sfputs_r+0x12>
 800c59a:	2000      	movs	r0, #0
 800c59c:	e007      	b.n	800c5ae <__sfputs_r+0x22>
 800c59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a2:	463a      	mov	r2, r7
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f7ff ffda 	bl	800c55e <__sfputc_r>
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	d1f3      	bne.n	800c596 <__sfputs_r+0xa>
 800c5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5b0 <_vfiprintf_r>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	b09d      	sub	sp, #116	; 0x74
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	4698      	mov	r8, r3
 800c5bc:	4606      	mov	r6, r0
 800c5be:	b118      	cbz	r0, 800c5c8 <_vfiprintf_r+0x18>
 800c5c0:	6a03      	ldr	r3, [r0, #32]
 800c5c2:	b90b      	cbnz	r3, 800c5c8 <_vfiprintf_r+0x18>
 800c5c4:	f7fc fe16 	bl	80091f4 <__sinit>
 800c5c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5ca:	07d9      	lsls	r1, r3, #31
 800c5cc:	d405      	bmi.n	800c5da <_vfiprintf_r+0x2a>
 800c5ce:	89ab      	ldrh	r3, [r5, #12]
 800c5d0:	059a      	lsls	r2, r3, #22
 800c5d2:	d402      	bmi.n	800c5da <_vfiprintf_r+0x2a>
 800c5d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5d6:	f7fc ff68 	bl	80094aa <__retarget_lock_acquire_recursive>
 800c5da:	89ab      	ldrh	r3, [r5, #12]
 800c5dc:	071b      	lsls	r3, r3, #28
 800c5de:	d501      	bpl.n	800c5e4 <_vfiprintf_r+0x34>
 800c5e0:	692b      	ldr	r3, [r5, #16]
 800c5e2:	b99b      	cbnz	r3, 800c60c <_vfiprintf_r+0x5c>
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f000 f93a 	bl	800c860 <__swsetup_r>
 800c5ec:	b170      	cbz	r0, 800c60c <_vfiprintf_r+0x5c>
 800c5ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5f0:	07dc      	lsls	r4, r3, #31
 800c5f2:	d504      	bpl.n	800c5fe <_vfiprintf_r+0x4e>
 800c5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f8:	b01d      	add	sp, #116	; 0x74
 800c5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	0598      	lsls	r0, r3, #22
 800c602:	d4f7      	bmi.n	800c5f4 <_vfiprintf_r+0x44>
 800c604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c606:	f7fc ff51 	bl	80094ac <__retarget_lock_release_recursive>
 800c60a:	e7f3      	b.n	800c5f4 <_vfiprintf_r+0x44>
 800c60c:	2300      	movs	r3, #0
 800c60e:	9309      	str	r3, [sp, #36]	; 0x24
 800c610:	2320      	movs	r3, #32
 800c612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c616:	f8cd 800c 	str.w	r8, [sp, #12]
 800c61a:	2330      	movs	r3, #48	; 0x30
 800c61c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c7d0 <_vfiprintf_r+0x220>
 800c620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c624:	f04f 0901 	mov.w	r9, #1
 800c628:	4623      	mov	r3, r4
 800c62a:	469a      	mov	sl, r3
 800c62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c630:	b10a      	cbz	r2, 800c636 <_vfiprintf_r+0x86>
 800c632:	2a25      	cmp	r2, #37	; 0x25
 800c634:	d1f9      	bne.n	800c62a <_vfiprintf_r+0x7a>
 800c636:	ebba 0b04 	subs.w	fp, sl, r4
 800c63a:	d00b      	beq.n	800c654 <_vfiprintf_r+0xa4>
 800c63c:	465b      	mov	r3, fp
 800c63e:	4622      	mov	r2, r4
 800c640:	4629      	mov	r1, r5
 800c642:	4630      	mov	r0, r6
 800c644:	f7ff ffa2 	bl	800c58c <__sfputs_r>
 800c648:	3001      	adds	r0, #1
 800c64a:	f000 80a9 	beq.w	800c7a0 <_vfiprintf_r+0x1f0>
 800c64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c650:	445a      	add	r2, fp
 800c652:	9209      	str	r2, [sp, #36]	; 0x24
 800c654:	f89a 3000 	ldrb.w	r3, [sl]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f000 80a1 	beq.w	800c7a0 <_vfiprintf_r+0x1f0>
 800c65e:	2300      	movs	r3, #0
 800c660:	f04f 32ff 	mov.w	r2, #4294967295
 800c664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c668:	f10a 0a01 	add.w	sl, sl, #1
 800c66c:	9304      	str	r3, [sp, #16]
 800c66e:	9307      	str	r3, [sp, #28]
 800c670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c674:	931a      	str	r3, [sp, #104]	; 0x68
 800c676:	4654      	mov	r4, sl
 800c678:	2205      	movs	r2, #5
 800c67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c67e:	4854      	ldr	r0, [pc, #336]	; (800c7d0 <_vfiprintf_r+0x220>)
 800c680:	f7f3 fda6 	bl	80001d0 <memchr>
 800c684:	9a04      	ldr	r2, [sp, #16]
 800c686:	b9d8      	cbnz	r0, 800c6c0 <_vfiprintf_r+0x110>
 800c688:	06d1      	lsls	r1, r2, #27
 800c68a:	bf44      	itt	mi
 800c68c:	2320      	movmi	r3, #32
 800c68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c692:	0713      	lsls	r3, r2, #28
 800c694:	bf44      	itt	mi
 800c696:	232b      	movmi	r3, #43	; 0x2b
 800c698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c69c:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c6a2:	d015      	beq.n	800c6d0 <_vfiprintf_r+0x120>
 800c6a4:	9a07      	ldr	r2, [sp, #28]
 800c6a6:	4654      	mov	r4, sl
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	f04f 0c0a 	mov.w	ip, #10
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6b4:	3b30      	subs	r3, #48	; 0x30
 800c6b6:	2b09      	cmp	r3, #9
 800c6b8:	d94d      	bls.n	800c756 <_vfiprintf_r+0x1a6>
 800c6ba:	b1b0      	cbz	r0, 800c6ea <_vfiprintf_r+0x13a>
 800c6bc:	9207      	str	r2, [sp, #28]
 800c6be:	e014      	b.n	800c6ea <_vfiprintf_r+0x13a>
 800c6c0:	eba0 0308 	sub.w	r3, r0, r8
 800c6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	46a2      	mov	sl, r4
 800c6ce:	e7d2      	b.n	800c676 <_vfiprintf_r+0xc6>
 800c6d0:	9b03      	ldr	r3, [sp, #12]
 800c6d2:	1d19      	adds	r1, r3, #4
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	9103      	str	r1, [sp, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	bfbb      	ittet	lt
 800c6dc:	425b      	neglt	r3, r3
 800c6de:	f042 0202 	orrlt.w	r2, r2, #2
 800c6e2:	9307      	strge	r3, [sp, #28]
 800c6e4:	9307      	strlt	r3, [sp, #28]
 800c6e6:	bfb8      	it	lt
 800c6e8:	9204      	strlt	r2, [sp, #16]
 800c6ea:	7823      	ldrb	r3, [r4, #0]
 800c6ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ee:	d10c      	bne.n	800c70a <_vfiprintf_r+0x15a>
 800c6f0:	7863      	ldrb	r3, [r4, #1]
 800c6f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c6f4:	d134      	bne.n	800c760 <_vfiprintf_r+0x1b0>
 800c6f6:	9b03      	ldr	r3, [sp, #12]
 800c6f8:	1d1a      	adds	r2, r3, #4
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	9203      	str	r2, [sp, #12]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	bfb8      	it	lt
 800c702:	f04f 33ff 	movlt.w	r3, #4294967295
 800c706:	3402      	adds	r4, #2
 800c708:	9305      	str	r3, [sp, #20]
 800c70a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c7e0 <_vfiprintf_r+0x230>
 800c70e:	7821      	ldrb	r1, [r4, #0]
 800c710:	2203      	movs	r2, #3
 800c712:	4650      	mov	r0, sl
 800c714:	f7f3 fd5c 	bl	80001d0 <memchr>
 800c718:	b138      	cbz	r0, 800c72a <_vfiprintf_r+0x17a>
 800c71a:	9b04      	ldr	r3, [sp, #16]
 800c71c:	eba0 000a 	sub.w	r0, r0, sl
 800c720:	2240      	movs	r2, #64	; 0x40
 800c722:	4082      	lsls	r2, r0
 800c724:	4313      	orrs	r3, r2
 800c726:	3401      	adds	r4, #1
 800c728:	9304      	str	r3, [sp, #16]
 800c72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72e:	4829      	ldr	r0, [pc, #164]	; (800c7d4 <_vfiprintf_r+0x224>)
 800c730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c734:	2206      	movs	r2, #6
 800c736:	f7f3 fd4b 	bl	80001d0 <memchr>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d03f      	beq.n	800c7be <_vfiprintf_r+0x20e>
 800c73e:	4b26      	ldr	r3, [pc, #152]	; (800c7d8 <_vfiprintf_r+0x228>)
 800c740:	bb1b      	cbnz	r3, 800c78a <_vfiprintf_r+0x1da>
 800c742:	9b03      	ldr	r3, [sp, #12]
 800c744:	3307      	adds	r3, #7
 800c746:	f023 0307 	bic.w	r3, r3, #7
 800c74a:	3308      	adds	r3, #8
 800c74c:	9303      	str	r3, [sp, #12]
 800c74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c750:	443b      	add	r3, r7
 800c752:	9309      	str	r3, [sp, #36]	; 0x24
 800c754:	e768      	b.n	800c628 <_vfiprintf_r+0x78>
 800c756:	fb0c 3202 	mla	r2, ip, r2, r3
 800c75a:	460c      	mov	r4, r1
 800c75c:	2001      	movs	r0, #1
 800c75e:	e7a6      	b.n	800c6ae <_vfiprintf_r+0xfe>
 800c760:	2300      	movs	r3, #0
 800c762:	3401      	adds	r4, #1
 800c764:	9305      	str	r3, [sp, #20]
 800c766:	4619      	mov	r1, r3
 800c768:	f04f 0c0a 	mov.w	ip, #10
 800c76c:	4620      	mov	r0, r4
 800c76e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c772:	3a30      	subs	r2, #48	; 0x30
 800c774:	2a09      	cmp	r2, #9
 800c776:	d903      	bls.n	800c780 <_vfiprintf_r+0x1d0>
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d0c6      	beq.n	800c70a <_vfiprintf_r+0x15a>
 800c77c:	9105      	str	r1, [sp, #20]
 800c77e:	e7c4      	b.n	800c70a <_vfiprintf_r+0x15a>
 800c780:	fb0c 2101 	mla	r1, ip, r1, r2
 800c784:	4604      	mov	r4, r0
 800c786:	2301      	movs	r3, #1
 800c788:	e7f0      	b.n	800c76c <_vfiprintf_r+0x1bc>
 800c78a:	ab03      	add	r3, sp, #12
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	462a      	mov	r2, r5
 800c790:	4b12      	ldr	r3, [pc, #72]	; (800c7dc <_vfiprintf_r+0x22c>)
 800c792:	a904      	add	r1, sp, #16
 800c794:	4630      	mov	r0, r6
 800c796:	f7fb fecb 	bl	8008530 <_printf_float>
 800c79a:	4607      	mov	r7, r0
 800c79c:	1c78      	adds	r0, r7, #1
 800c79e:	d1d6      	bne.n	800c74e <_vfiprintf_r+0x19e>
 800c7a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7a2:	07d9      	lsls	r1, r3, #31
 800c7a4:	d405      	bmi.n	800c7b2 <_vfiprintf_r+0x202>
 800c7a6:	89ab      	ldrh	r3, [r5, #12]
 800c7a8:	059a      	lsls	r2, r3, #22
 800c7aa:	d402      	bmi.n	800c7b2 <_vfiprintf_r+0x202>
 800c7ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ae:	f7fc fe7d 	bl	80094ac <__retarget_lock_release_recursive>
 800c7b2:	89ab      	ldrh	r3, [r5, #12]
 800c7b4:	065b      	lsls	r3, r3, #25
 800c7b6:	f53f af1d 	bmi.w	800c5f4 <_vfiprintf_r+0x44>
 800c7ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7bc:	e71c      	b.n	800c5f8 <_vfiprintf_r+0x48>
 800c7be:	ab03      	add	r3, sp, #12
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <_vfiprintf_r+0x22c>)
 800c7c6:	a904      	add	r1, sp, #16
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f7fc f955 	bl	8008a78 <_printf_i>
 800c7ce:	e7e4      	b.n	800c79a <_vfiprintf_r+0x1ea>
 800c7d0:	0800f4c1 	.word	0x0800f4c1
 800c7d4:	0800f4cb 	.word	0x0800f4cb
 800c7d8:	08008531 	.word	0x08008531
 800c7dc:	0800c58d 	.word	0x0800c58d
 800c7e0:	0800f4c7 	.word	0x0800f4c7

0800c7e4 <__swbuf_r>:
 800c7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e6:	460e      	mov	r6, r1
 800c7e8:	4614      	mov	r4, r2
 800c7ea:	4605      	mov	r5, r0
 800c7ec:	b118      	cbz	r0, 800c7f6 <__swbuf_r+0x12>
 800c7ee:	6a03      	ldr	r3, [r0, #32]
 800c7f0:	b90b      	cbnz	r3, 800c7f6 <__swbuf_r+0x12>
 800c7f2:	f7fc fcff 	bl	80091f4 <__sinit>
 800c7f6:	69a3      	ldr	r3, [r4, #24]
 800c7f8:	60a3      	str	r3, [r4, #8]
 800c7fa:	89a3      	ldrh	r3, [r4, #12]
 800c7fc:	071a      	lsls	r2, r3, #28
 800c7fe:	d525      	bpl.n	800c84c <__swbuf_r+0x68>
 800c800:	6923      	ldr	r3, [r4, #16]
 800c802:	b31b      	cbz	r3, 800c84c <__swbuf_r+0x68>
 800c804:	6823      	ldr	r3, [r4, #0]
 800c806:	6922      	ldr	r2, [r4, #16]
 800c808:	1a98      	subs	r0, r3, r2
 800c80a:	6963      	ldr	r3, [r4, #20]
 800c80c:	b2f6      	uxtb	r6, r6
 800c80e:	4283      	cmp	r3, r0
 800c810:	4637      	mov	r7, r6
 800c812:	dc04      	bgt.n	800c81e <__swbuf_r+0x3a>
 800c814:	4621      	mov	r1, r4
 800c816:	4628      	mov	r0, r5
 800c818:	f7ff fa3a 	bl	800bc90 <_fflush_r>
 800c81c:	b9e0      	cbnz	r0, 800c858 <__swbuf_r+0x74>
 800c81e:	68a3      	ldr	r3, [r4, #8]
 800c820:	3b01      	subs	r3, #1
 800c822:	60a3      	str	r3, [r4, #8]
 800c824:	6823      	ldr	r3, [r4, #0]
 800c826:	1c5a      	adds	r2, r3, #1
 800c828:	6022      	str	r2, [r4, #0]
 800c82a:	701e      	strb	r6, [r3, #0]
 800c82c:	6962      	ldr	r2, [r4, #20]
 800c82e:	1c43      	adds	r3, r0, #1
 800c830:	429a      	cmp	r2, r3
 800c832:	d004      	beq.n	800c83e <__swbuf_r+0x5a>
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	07db      	lsls	r3, r3, #31
 800c838:	d506      	bpl.n	800c848 <__swbuf_r+0x64>
 800c83a:	2e0a      	cmp	r6, #10
 800c83c:	d104      	bne.n	800c848 <__swbuf_r+0x64>
 800c83e:	4621      	mov	r1, r4
 800c840:	4628      	mov	r0, r5
 800c842:	f7ff fa25 	bl	800bc90 <_fflush_r>
 800c846:	b938      	cbnz	r0, 800c858 <__swbuf_r+0x74>
 800c848:	4638      	mov	r0, r7
 800c84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c84c:	4621      	mov	r1, r4
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 f806 	bl	800c860 <__swsetup_r>
 800c854:	2800      	cmp	r0, #0
 800c856:	d0d5      	beq.n	800c804 <__swbuf_r+0x20>
 800c858:	f04f 37ff 	mov.w	r7, #4294967295
 800c85c:	e7f4      	b.n	800c848 <__swbuf_r+0x64>
	...

0800c860 <__swsetup_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4b2a      	ldr	r3, [pc, #168]	; (800c90c <__swsetup_r+0xac>)
 800c864:	4605      	mov	r5, r0
 800c866:	6818      	ldr	r0, [r3, #0]
 800c868:	460c      	mov	r4, r1
 800c86a:	b118      	cbz	r0, 800c874 <__swsetup_r+0x14>
 800c86c:	6a03      	ldr	r3, [r0, #32]
 800c86e:	b90b      	cbnz	r3, 800c874 <__swsetup_r+0x14>
 800c870:	f7fc fcc0 	bl	80091f4 <__sinit>
 800c874:	89a3      	ldrh	r3, [r4, #12]
 800c876:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c87a:	0718      	lsls	r0, r3, #28
 800c87c:	d422      	bmi.n	800c8c4 <__swsetup_r+0x64>
 800c87e:	06d9      	lsls	r1, r3, #27
 800c880:	d407      	bmi.n	800c892 <__swsetup_r+0x32>
 800c882:	2309      	movs	r3, #9
 800c884:	602b      	str	r3, [r5, #0]
 800c886:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c88a:	81a3      	strh	r3, [r4, #12]
 800c88c:	f04f 30ff 	mov.w	r0, #4294967295
 800c890:	e034      	b.n	800c8fc <__swsetup_r+0x9c>
 800c892:	0758      	lsls	r0, r3, #29
 800c894:	d512      	bpl.n	800c8bc <__swsetup_r+0x5c>
 800c896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c898:	b141      	cbz	r1, 800c8ac <__swsetup_r+0x4c>
 800c89a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c89e:	4299      	cmp	r1, r3
 800c8a0:	d002      	beq.n	800c8a8 <__swsetup_r+0x48>
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	f7fd fc86 	bl	800a1b4 <_free_r>
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	6363      	str	r3, [r4, #52]	; 0x34
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8b2:	81a3      	strh	r3, [r4, #12]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	6063      	str	r3, [r4, #4]
 800c8b8:	6923      	ldr	r3, [r4, #16]
 800c8ba:	6023      	str	r3, [r4, #0]
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	f043 0308 	orr.w	r3, r3, #8
 800c8c2:	81a3      	strh	r3, [r4, #12]
 800c8c4:	6923      	ldr	r3, [r4, #16]
 800c8c6:	b94b      	cbnz	r3, 800c8dc <__swsetup_r+0x7c>
 800c8c8:	89a3      	ldrh	r3, [r4, #12]
 800c8ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8d2:	d003      	beq.n	800c8dc <__swsetup_r+0x7c>
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	f000 f884 	bl	800c9e4 <__smakebuf_r>
 800c8dc:	89a0      	ldrh	r0, [r4, #12]
 800c8de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8e2:	f010 0301 	ands.w	r3, r0, #1
 800c8e6:	d00a      	beq.n	800c8fe <__swsetup_r+0x9e>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	60a3      	str	r3, [r4, #8]
 800c8ec:	6963      	ldr	r3, [r4, #20]
 800c8ee:	425b      	negs	r3, r3
 800c8f0:	61a3      	str	r3, [r4, #24]
 800c8f2:	6923      	ldr	r3, [r4, #16]
 800c8f4:	b943      	cbnz	r3, 800c908 <__swsetup_r+0xa8>
 800c8f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8fa:	d1c4      	bne.n	800c886 <__swsetup_r+0x26>
 800c8fc:	bd38      	pop	{r3, r4, r5, pc}
 800c8fe:	0781      	lsls	r1, r0, #30
 800c900:	bf58      	it	pl
 800c902:	6963      	ldrpl	r3, [r4, #20]
 800c904:	60a3      	str	r3, [r4, #8]
 800c906:	e7f4      	b.n	800c8f2 <__swsetup_r+0x92>
 800c908:	2000      	movs	r0, #0
 800c90a:	e7f7      	b.n	800c8fc <__swsetup_r+0x9c>
 800c90c:	20000064 	.word	0x20000064

0800c910 <_raise_r>:
 800c910:	291f      	cmp	r1, #31
 800c912:	b538      	push	{r3, r4, r5, lr}
 800c914:	4604      	mov	r4, r0
 800c916:	460d      	mov	r5, r1
 800c918:	d904      	bls.n	800c924 <_raise_r+0x14>
 800c91a:	2316      	movs	r3, #22
 800c91c:	6003      	str	r3, [r0, #0]
 800c91e:	f04f 30ff 	mov.w	r0, #4294967295
 800c922:	bd38      	pop	{r3, r4, r5, pc}
 800c924:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c926:	b112      	cbz	r2, 800c92e <_raise_r+0x1e>
 800c928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c92c:	b94b      	cbnz	r3, 800c942 <_raise_r+0x32>
 800c92e:	4620      	mov	r0, r4
 800c930:	f000 f830 	bl	800c994 <_getpid_r>
 800c934:	462a      	mov	r2, r5
 800c936:	4601      	mov	r1, r0
 800c938:	4620      	mov	r0, r4
 800c93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c93e:	f000 b817 	b.w	800c970 <_kill_r>
 800c942:	2b01      	cmp	r3, #1
 800c944:	d00a      	beq.n	800c95c <_raise_r+0x4c>
 800c946:	1c59      	adds	r1, r3, #1
 800c948:	d103      	bne.n	800c952 <_raise_r+0x42>
 800c94a:	2316      	movs	r3, #22
 800c94c:	6003      	str	r3, [r0, #0]
 800c94e:	2001      	movs	r0, #1
 800c950:	e7e7      	b.n	800c922 <_raise_r+0x12>
 800c952:	2400      	movs	r4, #0
 800c954:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c958:	4628      	mov	r0, r5
 800c95a:	4798      	blx	r3
 800c95c:	2000      	movs	r0, #0
 800c95e:	e7e0      	b.n	800c922 <_raise_r+0x12>

0800c960 <raise>:
 800c960:	4b02      	ldr	r3, [pc, #8]	; (800c96c <raise+0xc>)
 800c962:	4601      	mov	r1, r0
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	f7ff bfd3 	b.w	800c910 <_raise_r>
 800c96a:	bf00      	nop
 800c96c:	20000064 	.word	0x20000064

0800c970 <_kill_r>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	4d07      	ldr	r5, [pc, #28]	; (800c990 <_kill_r+0x20>)
 800c974:	2300      	movs	r3, #0
 800c976:	4604      	mov	r4, r0
 800c978:	4608      	mov	r0, r1
 800c97a:	4611      	mov	r1, r2
 800c97c:	602b      	str	r3, [r5, #0]
 800c97e:	f7f7 f8ef 	bl	8003b60 <_kill>
 800c982:	1c43      	adds	r3, r0, #1
 800c984:	d102      	bne.n	800c98c <_kill_r+0x1c>
 800c986:	682b      	ldr	r3, [r5, #0]
 800c988:	b103      	cbz	r3, 800c98c <_kill_r+0x1c>
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	bd38      	pop	{r3, r4, r5, pc}
 800c98e:	bf00      	nop
 800c990:	20000a0c 	.word	0x20000a0c

0800c994 <_getpid_r>:
 800c994:	f7f7 b8dc 	b.w	8003b50 <_getpid>

0800c998 <__swhatbuf_r>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	460c      	mov	r4, r1
 800c99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a0:	2900      	cmp	r1, #0
 800c9a2:	b096      	sub	sp, #88	; 0x58
 800c9a4:	4615      	mov	r5, r2
 800c9a6:	461e      	mov	r6, r3
 800c9a8:	da0d      	bge.n	800c9c6 <__swhatbuf_r+0x2e>
 800c9aa:	89a3      	ldrh	r3, [r4, #12]
 800c9ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c9b0:	f04f 0100 	mov.w	r1, #0
 800c9b4:	bf0c      	ite	eq
 800c9b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c9ba:	2340      	movne	r3, #64	; 0x40
 800c9bc:	2000      	movs	r0, #0
 800c9be:	6031      	str	r1, [r6, #0]
 800c9c0:	602b      	str	r3, [r5, #0]
 800c9c2:	b016      	add	sp, #88	; 0x58
 800c9c4:	bd70      	pop	{r4, r5, r6, pc}
 800c9c6:	466a      	mov	r2, sp
 800c9c8:	f000 f848 	bl	800ca5c <_fstat_r>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	dbec      	blt.n	800c9aa <__swhatbuf_r+0x12>
 800c9d0:	9901      	ldr	r1, [sp, #4]
 800c9d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c9d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c9da:	4259      	negs	r1, r3
 800c9dc:	4159      	adcs	r1, r3
 800c9de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9e2:	e7eb      	b.n	800c9bc <__swhatbuf_r+0x24>

0800c9e4 <__smakebuf_r>:
 800c9e4:	898b      	ldrh	r3, [r1, #12]
 800c9e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9e8:	079d      	lsls	r5, r3, #30
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	460c      	mov	r4, r1
 800c9ee:	d507      	bpl.n	800ca00 <__smakebuf_r+0x1c>
 800c9f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9f4:	6023      	str	r3, [r4, #0]
 800c9f6:	6123      	str	r3, [r4, #16]
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	6163      	str	r3, [r4, #20]
 800c9fc:	b002      	add	sp, #8
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ca00:	ab01      	add	r3, sp, #4
 800ca02:	466a      	mov	r2, sp
 800ca04:	f7ff ffc8 	bl	800c998 <__swhatbuf_r>
 800ca08:	9900      	ldr	r1, [sp, #0]
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f7fb fc63 	bl	80082d8 <_malloc_r>
 800ca12:	b948      	cbnz	r0, 800ca28 <__smakebuf_r+0x44>
 800ca14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca18:	059a      	lsls	r2, r3, #22
 800ca1a:	d4ef      	bmi.n	800c9fc <__smakebuf_r+0x18>
 800ca1c:	f023 0303 	bic.w	r3, r3, #3
 800ca20:	f043 0302 	orr.w	r3, r3, #2
 800ca24:	81a3      	strh	r3, [r4, #12]
 800ca26:	e7e3      	b.n	800c9f0 <__smakebuf_r+0xc>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	6020      	str	r0, [r4, #0]
 800ca2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca30:	81a3      	strh	r3, [r4, #12]
 800ca32:	9b00      	ldr	r3, [sp, #0]
 800ca34:	6163      	str	r3, [r4, #20]
 800ca36:	9b01      	ldr	r3, [sp, #4]
 800ca38:	6120      	str	r0, [r4, #16]
 800ca3a:	b15b      	cbz	r3, 800ca54 <__smakebuf_r+0x70>
 800ca3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca40:	4630      	mov	r0, r6
 800ca42:	f000 f81d 	bl	800ca80 <_isatty_r>
 800ca46:	b128      	cbz	r0, 800ca54 <__smakebuf_r+0x70>
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	f023 0303 	bic.w	r3, r3, #3
 800ca4e:	f043 0301 	orr.w	r3, r3, #1
 800ca52:	81a3      	strh	r3, [r4, #12]
 800ca54:	89a3      	ldrh	r3, [r4, #12]
 800ca56:	431d      	orrs	r5, r3
 800ca58:	81a5      	strh	r5, [r4, #12]
 800ca5a:	e7cf      	b.n	800c9fc <__smakebuf_r+0x18>

0800ca5c <_fstat_r>:
 800ca5c:	b538      	push	{r3, r4, r5, lr}
 800ca5e:	4d07      	ldr	r5, [pc, #28]	; (800ca7c <_fstat_r+0x20>)
 800ca60:	2300      	movs	r3, #0
 800ca62:	4604      	mov	r4, r0
 800ca64:	4608      	mov	r0, r1
 800ca66:	4611      	mov	r1, r2
 800ca68:	602b      	str	r3, [r5, #0]
 800ca6a:	f7f7 f8d8 	bl	8003c1e <_fstat>
 800ca6e:	1c43      	adds	r3, r0, #1
 800ca70:	d102      	bne.n	800ca78 <_fstat_r+0x1c>
 800ca72:	682b      	ldr	r3, [r5, #0]
 800ca74:	b103      	cbz	r3, 800ca78 <_fstat_r+0x1c>
 800ca76:	6023      	str	r3, [r4, #0]
 800ca78:	bd38      	pop	{r3, r4, r5, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20000a0c 	.word	0x20000a0c

0800ca80 <_isatty_r>:
 800ca80:	b538      	push	{r3, r4, r5, lr}
 800ca82:	4d06      	ldr	r5, [pc, #24]	; (800ca9c <_isatty_r+0x1c>)
 800ca84:	2300      	movs	r3, #0
 800ca86:	4604      	mov	r4, r0
 800ca88:	4608      	mov	r0, r1
 800ca8a:	602b      	str	r3, [r5, #0]
 800ca8c:	f7f7 f8d7 	bl	8003c3e <_isatty>
 800ca90:	1c43      	adds	r3, r0, #1
 800ca92:	d102      	bne.n	800ca9a <_isatty_r+0x1a>
 800ca94:	682b      	ldr	r3, [r5, #0]
 800ca96:	b103      	cbz	r3, 800ca9a <_isatty_r+0x1a>
 800ca98:	6023      	str	r3, [r4, #0]
 800ca9a:	bd38      	pop	{r3, r4, r5, pc}
 800ca9c:	20000a0c 	.word	0x20000a0c

0800caa0 <atan2>:
 800caa0:	f000 bd2a 	b.w	800d4f8 <__ieee754_atan2>

0800caa4 <sqrt>:
 800caa4:	b538      	push	{r3, r4, r5, lr}
 800caa6:	ed2d 8b02 	vpush	{d8}
 800caaa:	ec55 4b10 	vmov	r4, r5, d0
 800caae:	f000 f8b3 	bl	800cc18 <__ieee754_sqrt>
 800cab2:	4622      	mov	r2, r4
 800cab4:	462b      	mov	r3, r5
 800cab6:	4620      	mov	r0, r4
 800cab8:	4629      	mov	r1, r5
 800caba:	eeb0 8a40 	vmov.f32	s16, s0
 800cabe:	eef0 8a60 	vmov.f32	s17, s1
 800cac2:	f7f4 f833 	bl	8000b2c <__aeabi_dcmpun>
 800cac6:	b990      	cbnz	r0, 800caee <sqrt+0x4a>
 800cac8:	2200      	movs	r2, #0
 800caca:	2300      	movs	r3, #0
 800cacc:	4620      	mov	r0, r4
 800cace:	4629      	mov	r1, r5
 800cad0:	f7f4 f804 	bl	8000adc <__aeabi_dcmplt>
 800cad4:	b158      	cbz	r0, 800caee <sqrt+0x4a>
 800cad6:	f7fc fcbd 	bl	8009454 <__errno>
 800cada:	2321      	movs	r3, #33	; 0x21
 800cadc:	6003      	str	r3, [r0, #0]
 800cade:	2200      	movs	r2, #0
 800cae0:	2300      	movs	r3, #0
 800cae2:	4610      	mov	r0, r2
 800cae4:	4619      	mov	r1, r3
 800cae6:	f7f3 feb1 	bl	800084c <__aeabi_ddiv>
 800caea:	ec41 0b18 	vmov	d8, r0, r1
 800caee:	eeb0 0a48 	vmov.f32	s0, s16
 800caf2:	eef0 0a68 	vmov.f32	s1, s17
 800caf6:	ecbd 8b02 	vpop	{d8}
 800cafa:	bd38      	pop	{r3, r4, r5, pc}
 800cafc:	0000      	movs	r0, r0
	...

0800cb00 <sin>:
 800cb00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb02:	ec53 2b10 	vmov	r2, r3, d0
 800cb06:	4828      	ldr	r0, [pc, #160]	; (800cba8 <sin+0xa8>)
 800cb08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cb0c:	4281      	cmp	r1, r0
 800cb0e:	dc07      	bgt.n	800cb20 <sin+0x20>
 800cb10:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800cba0 <sin+0xa0>
 800cb14:	2000      	movs	r0, #0
 800cb16:	b005      	add	sp, #20
 800cb18:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb1c:	f000 ba20 	b.w	800cf60 <__kernel_sin>
 800cb20:	4822      	ldr	r0, [pc, #136]	; (800cbac <sin+0xac>)
 800cb22:	4281      	cmp	r1, r0
 800cb24:	dd09      	ble.n	800cb3a <sin+0x3a>
 800cb26:	ee10 0a10 	vmov	r0, s0
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	f7f3 fbac 	bl	8000288 <__aeabi_dsub>
 800cb30:	ec41 0b10 	vmov	d0, r0, r1
 800cb34:	b005      	add	sp, #20
 800cb36:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb3a:	4668      	mov	r0, sp
 800cb3c:	f000 fda4 	bl	800d688 <__ieee754_rem_pio2>
 800cb40:	f000 0003 	and.w	r0, r0, #3
 800cb44:	2801      	cmp	r0, #1
 800cb46:	d00c      	beq.n	800cb62 <sin+0x62>
 800cb48:	2802      	cmp	r0, #2
 800cb4a:	d011      	beq.n	800cb70 <sin+0x70>
 800cb4c:	b9f0      	cbnz	r0, 800cb8c <sin+0x8c>
 800cb4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cb52:	ed9d 0b00 	vldr	d0, [sp]
 800cb56:	2001      	movs	r0, #1
 800cb58:	f000 fa02 	bl	800cf60 <__kernel_sin>
 800cb5c:	ec51 0b10 	vmov	r0, r1, d0
 800cb60:	e7e6      	b.n	800cb30 <sin+0x30>
 800cb62:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cb66:	ed9d 0b00 	vldr	d0, [sp]
 800cb6a:	f000 f931 	bl	800cdd0 <__kernel_cos>
 800cb6e:	e7f5      	b.n	800cb5c <sin+0x5c>
 800cb70:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cb74:	ed9d 0b00 	vldr	d0, [sp]
 800cb78:	2001      	movs	r0, #1
 800cb7a:	f000 f9f1 	bl	800cf60 <__kernel_sin>
 800cb7e:	ec53 2b10 	vmov	r2, r3, d0
 800cb82:	ee10 0a10 	vmov	r0, s0
 800cb86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cb8a:	e7d1      	b.n	800cb30 <sin+0x30>
 800cb8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cb90:	ed9d 0b00 	vldr	d0, [sp]
 800cb94:	f000 f91c 	bl	800cdd0 <__kernel_cos>
 800cb98:	e7f1      	b.n	800cb7e <sin+0x7e>
 800cb9a:	bf00      	nop
 800cb9c:	f3af 8000 	nop.w
	...
 800cba8:	3fe921fb 	.word	0x3fe921fb
 800cbac:	7fefffff 	.word	0x7fefffff

0800cbb0 <tan>:
 800cbb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbb2:	ec53 2b10 	vmov	r2, r3, d0
 800cbb6:	4816      	ldr	r0, [pc, #88]	; (800cc10 <tan+0x60>)
 800cbb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cbbc:	4281      	cmp	r1, r0
 800cbbe:	dc07      	bgt.n	800cbd0 <tan+0x20>
 800cbc0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800cc08 <tan+0x58>
 800cbc4:	2001      	movs	r0, #1
 800cbc6:	b005      	add	sp, #20
 800cbc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbcc:	f000 ba88 	b.w	800d0e0 <__kernel_tan>
 800cbd0:	4810      	ldr	r0, [pc, #64]	; (800cc14 <tan+0x64>)
 800cbd2:	4281      	cmp	r1, r0
 800cbd4:	dd09      	ble.n	800cbea <tan+0x3a>
 800cbd6:	ee10 0a10 	vmov	r0, s0
 800cbda:	4619      	mov	r1, r3
 800cbdc:	f7f3 fb54 	bl	8000288 <__aeabi_dsub>
 800cbe0:	ec41 0b10 	vmov	d0, r0, r1
 800cbe4:	b005      	add	sp, #20
 800cbe6:	f85d fb04 	ldr.w	pc, [sp], #4
 800cbea:	4668      	mov	r0, sp
 800cbec:	f000 fd4c 	bl	800d688 <__ieee754_rem_pio2>
 800cbf0:	0040      	lsls	r0, r0, #1
 800cbf2:	f000 0002 	and.w	r0, r0, #2
 800cbf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cbfa:	ed9d 0b00 	vldr	d0, [sp]
 800cbfe:	f1c0 0001 	rsb	r0, r0, #1
 800cc02:	f000 fa6d 	bl	800d0e0 <__kernel_tan>
 800cc06:	e7ed      	b.n	800cbe4 <tan+0x34>
	...
 800cc10:	3fe921fb 	.word	0x3fe921fb
 800cc14:	7fefffff 	.word	0x7fefffff

0800cc18 <__ieee754_sqrt>:
 800cc18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	ec55 4b10 	vmov	r4, r5, d0
 800cc20:	4e67      	ldr	r6, [pc, #412]	; (800cdc0 <__ieee754_sqrt+0x1a8>)
 800cc22:	43ae      	bics	r6, r5
 800cc24:	ee10 0a10 	vmov	r0, s0
 800cc28:	ee10 2a10 	vmov	r2, s0
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	462b      	mov	r3, r5
 800cc30:	d10d      	bne.n	800cc4e <__ieee754_sqrt+0x36>
 800cc32:	f7f3 fce1 	bl	80005f8 <__aeabi_dmul>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	f7f3 fb25 	bl	800028c <__adddf3>
 800cc42:	4604      	mov	r4, r0
 800cc44:	460d      	mov	r5, r1
 800cc46:	ec45 4b10 	vmov	d0, r4, r5
 800cc4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4e:	2d00      	cmp	r5, #0
 800cc50:	dc0b      	bgt.n	800cc6a <__ieee754_sqrt+0x52>
 800cc52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cc56:	4326      	orrs	r6, r4
 800cc58:	d0f5      	beq.n	800cc46 <__ieee754_sqrt+0x2e>
 800cc5a:	b135      	cbz	r5, 800cc6a <__ieee754_sqrt+0x52>
 800cc5c:	f7f3 fb14 	bl	8000288 <__aeabi_dsub>
 800cc60:	4602      	mov	r2, r0
 800cc62:	460b      	mov	r3, r1
 800cc64:	f7f3 fdf2 	bl	800084c <__aeabi_ddiv>
 800cc68:	e7eb      	b.n	800cc42 <__ieee754_sqrt+0x2a>
 800cc6a:	1509      	asrs	r1, r1, #20
 800cc6c:	f000 808d 	beq.w	800cd8a <__ieee754_sqrt+0x172>
 800cc70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc74:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cc78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc7c:	07c9      	lsls	r1, r1, #31
 800cc7e:	bf5c      	itt	pl
 800cc80:	005b      	lslpl	r3, r3, #1
 800cc82:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cc86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc8a:	bf58      	it	pl
 800cc8c:	0052      	lslpl	r2, r2, #1
 800cc8e:	2500      	movs	r5, #0
 800cc90:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cc94:	1076      	asrs	r6, r6, #1
 800cc96:	0052      	lsls	r2, r2, #1
 800cc98:	f04f 0e16 	mov.w	lr, #22
 800cc9c:	46ac      	mov	ip, r5
 800cc9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cca2:	eb0c 0001 	add.w	r0, ip, r1
 800cca6:	4298      	cmp	r0, r3
 800cca8:	bfde      	ittt	le
 800ccaa:	1a1b      	suble	r3, r3, r0
 800ccac:	eb00 0c01 	addle.w	ip, r0, r1
 800ccb0:	186d      	addle	r5, r5, r1
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	f1be 0e01 	subs.w	lr, lr, #1
 800ccb8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ccbc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ccc0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ccc4:	d1ed      	bne.n	800cca2 <__ieee754_sqrt+0x8a>
 800ccc6:	4674      	mov	r4, lr
 800ccc8:	2720      	movs	r7, #32
 800ccca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ccce:	4563      	cmp	r3, ip
 800ccd0:	eb01 000e 	add.w	r0, r1, lr
 800ccd4:	dc02      	bgt.n	800ccdc <__ieee754_sqrt+0xc4>
 800ccd6:	d113      	bne.n	800cd00 <__ieee754_sqrt+0xe8>
 800ccd8:	4290      	cmp	r0, r2
 800ccda:	d811      	bhi.n	800cd00 <__ieee754_sqrt+0xe8>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	eb00 0e01 	add.w	lr, r0, r1
 800cce2:	da57      	bge.n	800cd94 <__ieee754_sqrt+0x17c>
 800cce4:	f1be 0f00 	cmp.w	lr, #0
 800cce8:	db54      	blt.n	800cd94 <__ieee754_sqrt+0x17c>
 800ccea:	f10c 0801 	add.w	r8, ip, #1
 800ccee:	eba3 030c 	sub.w	r3, r3, ip
 800ccf2:	4290      	cmp	r0, r2
 800ccf4:	bf88      	it	hi
 800ccf6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ccfa:	1a12      	subs	r2, r2, r0
 800ccfc:	440c      	add	r4, r1
 800ccfe:	46c4      	mov	ip, r8
 800cd00:	005b      	lsls	r3, r3, #1
 800cd02:	3f01      	subs	r7, #1
 800cd04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cd08:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cd0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cd10:	d1dd      	bne.n	800ccce <__ieee754_sqrt+0xb6>
 800cd12:	4313      	orrs	r3, r2
 800cd14:	d01b      	beq.n	800cd4e <__ieee754_sqrt+0x136>
 800cd16:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800cdc4 <__ieee754_sqrt+0x1ac>
 800cd1a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800cdc8 <__ieee754_sqrt+0x1b0>
 800cd1e:	e9da 0100 	ldrd	r0, r1, [sl]
 800cd22:	e9db 2300 	ldrd	r2, r3, [fp]
 800cd26:	f7f3 faaf 	bl	8000288 <__aeabi_dsub>
 800cd2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	4640      	mov	r0, r8
 800cd34:	4649      	mov	r1, r9
 800cd36:	f7f3 fedb 	bl	8000af0 <__aeabi_dcmple>
 800cd3a:	b140      	cbz	r0, 800cd4e <__ieee754_sqrt+0x136>
 800cd3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cd40:	e9da 0100 	ldrd	r0, r1, [sl]
 800cd44:	e9db 2300 	ldrd	r2, r3, [fp]
 800cd48:	d126      	bne.n	800cd98 <__ieee754_sqrt+0x180>
 800cd4a:	3501      	adds	r5, #1
 800cd4c:	463c      	mov	r4, r7
 800cd4e:	106a      	asrs	r2, r5, #1
 800cd50:	0863      	lsrs	r3, r4, #1
 800cd52:	07e9      	lsls	r1, r5, #31
 800cd54:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cd58:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800cd5c:	bf48      	it	mi
 800cd5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cd62:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800cd66:	461c      	mov	r4, r3
 800cd68:	e76d      	b.n	800cc46 <__ieee754_sqrt+0x2e>
 800cd6a:	0ad3      	lsrs	r3, r2, #11
 800cd6c:	3815      	subs	r0, #21
 800cd6e:	0552      	lsls	r2, r2, #21
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d0fa      	beq.n	800cd6a <__ieee754_sqrt+0x152>
 800cd74:	02dc      	lsls	r4, r3, #11
 800cd76:	d50a      	bpl.n	800cd8e <__ieee754_sqrt+0x176>
 800cd78:	f1c1 0420 	rsb	r4, r1, #32
 800cd7c:	fa22 f404 	lsr.w	r4, r2, r4
 800cd80:	1e4d      	subs	r5, r1, #1
 800cd82:	408a      	lsls	r2, r1
 800cd84:	4323      	orrs	r3, r4
 800cd86:	1b41      	subs	r1, r0, r5
 800cd88:	e772      	b.n	800cc70 <__ieee754_sqrt+0x58>
 800cd8a:	4608      	mov	r0, r1
 800cd8c:	e7f0      	b.n	800cd70 <__ieee754_sqrt+0x158>
 800cd8e:	005b      	lsls	r3, r3, #1
 800cd90:	3101      	adds	r1, #1
 800cd92:	e7ef      	b.n	800cd74 <__ieee754_sqrt+0x15c>
 800cd94:	46e0      	mov	r8, ip
 800cd96:	e7aa      	b.n	800ccee <__ieee754_sqrt+0xd6>
 800cd98:	f7f3 fa78 	bl	800028c <__adddf3>
 800cd9c:	e9da 8900 	ldrd	r8, r9, [sl]
 800cda0:	4602      	mov	r2, r0
 800cda2:	460b      	mov	r3, r1
 800cda4:	4640      	mov	r0, r8
 800cda6:	4649      	mov	r1, r9
 800cda8:	f7f3 fe98 	bl	8000adc <__aeabi_dcmplt>
 800cdac:	b120      	cbz	r0, 800cdb8 <__ieee754_sqrt+0x1a0>
 800cdae:	1ca0      	adds	r0, r4, #2
 800cdb0:	bf08      	it	eq
 800cdb2:	3501      	addeq	r5, #1
 800cdb4:	3402      	adds	r4, #2
 800cdb6:	e7ca      	b.n	800cd4e <__ieee754_sqrt+0x136>
 800cdb8:	3401      	adds	r4, #1
 800cdba:	f024 0401 	bic.w	r4, r4, #1
 800cdbe:	e7c6      	b.n	800cd4e <__ieee754_sqrt+0x136>
 800cdc0:	7ff00000 	.word	0x7ff00000
 800cdc4:	200001d8 	.word	0x200001d8
 800cdc8:	200001e0 	.word	0x200001e0
 800cdcc:	00000000 	.word	0x00000000

0800cdd0 <__kernel_cos>:
 800cdd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd4:	ec57 6b10 	vmov	r6, r7, d0
 800cdd8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cddc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800cde0:	ed8d 1b00 	vstr	d1, [sp]
 800cde4:	da07      	bge.n	800cdf6 <__kernel_cos+0x26>
 800cde6:	ee10 0a10 	vmov	r0, s0
 800cdea:	4639      	mov	r1, r7
 800cdec:	f7f3 feb4 	bl	8000b58 <__aeabi_d2iz>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	f000 8088 	beq.w	800cf06 <__kernel_cos+0x136>
 800cdf6:	4632      	mov	r2, r6
 800cdf8:	463b      	mov	r3, r7
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	4639      	mov	r1, r7
 800cdfe:	f7f3 fbfb 	bl	80005f8 <__aeabi_dmul>
 800ce02:	4b51      	ldr	r3, [pc, #324]	; (800cf48 <__kernel_cos+0x178>)
 800ce04:	2200      	movs	r2, #0
 800ce06:	4604      	mov	r4, r0
 800ce08:	460d      	mov	r5, r1
 800ce0a:	f7f3 fbf5 	bl	80005f8 <__aeabi_dmul>
 800ce0e:	a340      	add	r3, pc, #256	; (adr r3, 800cf10 <__kernel_cos+0x140>)
 800ce10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce14:	4682      	mov	sl, r0
 800ce16:	468b      	mov	fp, r1
 800ce18:	4620      	mov	r0, r4
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	f7f3 fbec 	bl	80005f8 <__aeabi_dmul>
 800ce20:	a33d      	add	r3, pc, #244	; (adr r3, 800cf18 <__kernel_cos+0x148>)
 800ce22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce26:	f7f3 fa31 	bl	800028c <__adddf3>
 800ce2a:	4622      	mov	r2, r4
 800ce2c:	462b      	mov	r3, r5
 800ce2e:	f7f3 fbe3 	bl	80005f8 <__aeabi_dmul>
 800ce32:	a33b      	add	r3, pc, #236	; (adr r3, 800cf20 <__kernel_cos+0x150>)
 800ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce38:	f7f3 fa26 	bl	8000288 <__aeabi_dsub>
 800ce3c:	4622      	mov	r2, r4
 800ce3e:	462b      	mov	r3, r5
 800ce40:	f7f3 fbda 	bl	80005f8 <__aeabi_dmul>
 800ce44:	a338      	add	r3, pc, #224	; (adr r3, 800cf28 <__kernel_cos+0x158>)
 800ce46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4a:	f7f3 fa1f 	bl	800028c <__adddf3>
 800ce4e:	4622      	mov	r2, r4
 800ce50:	462b      	mov	r3, r5
 800ce52:	f7f3 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ce56:	a336      	add	r3, pc, #216	; (adr r3, 800cf30 <__kernel_cos+0x160>)
 800ce58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5c:	f7f3 fa14 	bl	8000288 <__aeabi_dsub>
 800ce60:	4622      	mov	r2, r4
 800ce62:	462b      	mov	r3, r5
 800ce64:	f7f3 fbc8 	bl	80005f8 <__aeabi_dmul>
 800ce68:	a333      	add	r3, pc, #204	; (adr r3, 800cf38 <__kernel_cos+0x168>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f7f3 fa0d 	bl	800028c <__adddf3>
 800ce72:	4622      	mov	r2, r4
 800ce74:	462b      	mov	r3, r5
 800ce76:	f7f3 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ce7a:	4622      	mov	r2, r4
 800ce7c:	462b      	mov	r3, r5
 800ce7e:	f7f3 fbbb 	bl	80005f8 <__aeabi_dmul>
 800ce82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce86:	4604      	mov	r4, r0
 800ce88:	460d      	mov	r5, r1
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	f7f3 fbb3 	bl	80005f8 <__aeabi_dmul>
 800ce92:	460b      	mov	r3, r1
 800ce94:	4602      	mov	r2, r0
 800ce96:	4629      	mov	r1, r5
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f7f3 f9f5 	bl	8000288 <__aeabi_dsub>
 800ce9e:	4b2b      	ldr	r3, [pc, #172]	; (800cf4c <__kernel_cos+0x17c>)
 800cea0:	4598      	cmp	r8, r3
 800cea2:	4606      	mov	r6, r0
 800cea4:	460f      	mov	r7, r1
 800cea6:	dc10      	bgt.n	800ceca <__kernel_cos+0xfa>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	4650      	mov	r0, sl
 800ceae:	4659      	mov	r1, fp
 800ceb0:	f7f3 f9ea 	bl	8000288 <__aeabi_dsub>
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	4926      	ldr	r1, [pc, #152]	; (800cf50 <__kernel_cos+0x180>)
 800ceb8:	4602      	mov	r2, r0
 800ceba:	2000      	movs	r0, #0
 800cebc:	f7f3 f9e4 	bl	8000288 <__aeabi_dsub>
 800cec0:	ec41 0b10 	vmov	d0, r0, r1
 800cec4:	b003      	add	sp, #12
 800cec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceca:	4b22      	ldr	r3, [pc, #136]	; (800cf54 <__kernel_cos+0x184>)
 800cecc:	4920      	ldr	r1, [pc, #128]	; (800cf50 <__kernel_cos+0x180>)
 800cece:	4598      	cmp	r8, r3
 800ced0:	bfcc      	ite	gt
 800ced2:	4d21      	ldrgt	r5, [pc, #132]	; (800cf58 <__kernel_cos+0x188>)
 800ced4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ced8:	2400      	movs	r4, #0
 800ceda:	4622      	mov	r2, r4
 800cedc:	462b      	mov	r3, r5
 800cede:	2000      	movs	r0, #0
 800cee0:	f7f3 f9d2 	bl	8000288 <__aeabi_dsub>
 800cee4:	4622      	mov	r2, r4
 800cee6:	4680      	mov	r8, r0
 800cee8:	4689      	mov	r9, r1
 800ceea:	462b      	mov	r3, r5
 800ceec:	4650      	mov	r0, sl
 800ceee:	4659      	mov	r1, fp
 800cef0:	f7f3 f9ca 	bl	8000288 <__aeabi_dsub>
 800cef4:	4632      	mov	r2, r6
 800cef6:	463b      	mov	r3, r7
 800cef8:	f7f3 f9c6 	bl	8000288 <__aeabi_dsub>
 800cefc:	4602      	mov	r2, r0
 800cefe:	460b      	mov	r3, r1
 800cf00:	4640      	mov	r0, r8
 800cf02:	4649      	mov	r1, r9
 800cf04:	e7da      	b.n	800cebc <__kernel_cos+0xec>
 800cf06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800cf40 <__kernel_cos+0x170>
 800cf0a:	e7db      	b.n	800cec4 <__kernel_cos+0xf4>
 800cf0c:	f3af 8000 	nop.w
 800cf10:	be8838d4 	.word	0xbe8838d4
 800cf14:	bda8fae9 	.word	0xbda8fae9
 800cf18:	bdb4b1c4 	.word	0xbdb4b1c4
 800cf1c:	3e21ee9e 	.word	0x3e21ee9e
 800cf20:	809c52ad 	.word	0x809c52ad
 800cf24:	3e927e4f 	.word	0x3e927e4f
 800cf28:	19cb1590 	.word	0x19cb1590
 800cf2c:	3efa01a0 	.word	0x3efa01a0
 800cf30:	16c15177 	.word	0x16c15177
 800cf34:	3f56c16c 	.word	0x3f56c16c
 800cf38:	5555554c 	.word	0x5555554c
 800cf3c:	3fa55555 	.word	0x3fa55555
 800cf40:	00000000 	.word	0x00000000
 800cf44:	3ff00000 	.word	0x3ff00000
 800cf48:	3fe00000 	.word	0x3fe00000
 800cf4c:	3fd33332 	.word	0x3fd33332
 800cf50:	3ff00000 	.word	0x3ff00000
 800cf54:	3fe90000 	.word	0x3fe90000
 800cf58:	3fd20000 	.word	0x3fd20000
 800cf5c:	00000000 	.word	0x00000000

0800cf60 <__kernel_sin>:
 800cf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf64:	ed2d 8b04 	vpush	{d8-d9}
 800cf68:	eeb0 8a41 	vmov.f32	s16, s2
 800cf6c:	eef0 8a61 	vmov.f32	s17, s3
 800cf70:	ec55 4b10 	vmov	r4, r5, d0
 800cf74:	b083      	sub	sp, #12
 800cf76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cf7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cf7e:	9001      	str	r0, [sp, #4]
 800cf80:	da06      	bge.n	800cf90 <__kernel_sin+0x30>
 800cf82:	ee10 0a10 	vmov	r0, s0
 800cf86:	4629      	mov	r1, r5
 800cf88:	f7f3 fde6 	bl	8000b58 <__aeabi_d2iz>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d051      	beq.n	800d034 <__kernel_sin+0xd4>
 800cf90:	4622      	mov	r2, r4
 800cf92:	462b      	mov	r3, r5
 800cf94:	4620      	mov	r0, r4
 800cf96:	4629      	mov	r1, r5
 800cf98:	f7f3 fb2e 	bl	80005f8 <__aeabi_dmul>
 800cf9c:	4682      	mov	sl, r0
 800cf9e:	468b      	mov	fp, r1
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	f7f3 fb26 	bl	80005f8 <__aeabi_dmul>
 800cfac:	a341      	add	r3, pc, #260	; (adr r3, 800d0b4 <__kernel_sin+0x154>)
 800cfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb2:	4680      	mov	r8, r0
 800cfb4:	4689      	mov	r9, r1
 800cfb6:	4650      	mov	r0, sl
 800cfb8:	4659      	mov	r1, fp
 800cfba:	f7f3 fb1d 	bl	80005f8 <__aeabi_dmul>
 800cfbe:	a33f      	add	r3, pc, #252	; (adr r3, 800d0bc <__kernel_sin+0x15c>)
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	f7f3 f960 	bl	8000288 <__aeabi_dsub>
 800cfc8:	4652      	mov	r2, sl
 800cfca:	465b      	mov	r3, fp
 800cfcc:	f7f3 fb14 	bl	80005f8 <__aeabi_dmul>
 800cfd0:	a33c      	add	r3, pc, #240	; (adr r3, 800d0c4 <__kernel_sin+0x164>)
 800cfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd6:	f7f3 f959 	bl	800028c <__adddf3>
 800cfda:	4652      	mov	r2, sl
 800cfdc:	465b      	mov	r3, fp
 800cfde:	f7f3 fb0b 	bl	80005f8 <__aeabi_dmul>
 800cfe2:	a33a      	add	r3, pc, #232	; (adr r3, 800d0cc <__kernel_sin+0x16c>)
 800cfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe8:	f7f3 f94e 	bl	8000288 <__aeabi_dsub>
 800cfec:	4652      	mov	r2, sl
 800cfee:	465b      	mov	r3, fp
 800cff0:	f7f3 fb02 	bl	80005f8 <__aeabi_dmul>
 800cff4:	a337      	add	r3, pc, #220	; (adr r3, 800d0d4 <__kernel_sin+0x174>)
 800cff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffa:	f7f3 f947 	bl	800028c <__adddf3>
 800cffe:	9b01      	ldr	r3, [sp, #4]
 800d000:	4606      	mov	r6, r0
 800d002:	460f      	mov	r7, r1
 800d004:	b9eb      	cbnz	r3, 800d042 <__kernel_sin+0xe2>
 800d006:	4602      	mov	r2, r0
 800d008:	460b      	mov	r3, r1
 800d00a:	4650      	mov	r0, sl
 800d00c:	4659      	mov	r1, fp
 800d00e:	f7f3 faf3 	bl	80005f8 <__aeabi_dmul>
 800d012:	a325      	add	r3, pc, #148	; (adr r3, 800d0a8 <__kernel_sin+0x148>)
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	f7f3 f936 	bl	8000288 <__aeabi_dsub>
 800d01c:	4642      	mov	r2, r8
 800d01e:	464b      	mov	r3, r9
 800d020:	f7f3 faea 	bl	80005f8 <__aeabi_dmul>
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	4620      	mov	r0, r4
 800d02a:	4629      	mov	r1, r5
 800d02c:	f7f3 f92e 	bl	800028c <__adddf3>
 800d030:	4604      	mov	r4, r0
 800d032:	460d      	mov	r5, r1
 800d034:	ec45 4b10 	vmov	d0, r4, r5
 800d038:	b003      	add	sp, #12
 800d03a:	ecbd 8b04 	vpop	{d8-d9}
 800d03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d042:	4b1b      	ldr	r3, [pc, #108]	; (800d0b0 <__kernel_sin+0x150>)
 800d044:	ec51 0b18 	vmov	r0, r1, d8
 800d048:	2200      	movs	r2, #0
 800d04a:	f7f3 fad5 	bl	80005f8 <__aeabi_dmul>
 800d04e:	4632      	mov	r2, r6
 800d050:	ec41 0b19 	vmov	d9, r0, r1
 800d054:	463b      	mov	r3, r7
 800d056:	4640      	mov	r0, r8
 800d058:	4649      	mov	r1, r9
 800d05a:	f7f3 facd 	bl	80005f8 <__aeabi_dmul>
 800d05e:	4602      	mov	r2, r0
 800d060:	460b      	mov	r3, r1
 800d062:	ec51 0b19 	vmov	r0, r1, d9
 800d066:	f7f3 f90f 	bl	8000288 <__aeabi_dsub>
 800d06a:	4652      	mov	r2, sl
 800d06c:	465b      	mov	r3, fp
 800d06e:	f7f3 fac3 	bl	80005f8 <__aeabi_dmul>
 800d072:	ec53 2b18 	vmov	r2, r3, d8
 800d076:	f7f3 f907 	bl	8000288 <__aeabi_dsub>
 800d07a:	a30b      	add	r3, pc, #44	; (adr r3, 800d0a8 <__kernel_sin+0x148>)
 800d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d080:	4606      	mov	r6, r0
 800d082:	460f      	mov	r7, r1
 800d084:	4640      	mov	r0, r8
 800d086:	4649      	mov	r1, r9
 800d088:	f7f3 fab6 	bl	80005f8 <__aeabi_dmul>
 800d08c:	4602      	mov	r2, r0
 800d08e:	460b      	mov	r3, r1
 800d090:	4630      	mov	r0, r6
 800d092:	4639      	mov	r1, r7
 800d094:	f7f3 f8fa 	bl	800028c <__adddf3>
 800d098:	4602      	mov	r2, r0
 800d09a:	460b      	mov	r3, r1
 800d09c:	4620      	mov	r0, r4
 800d09e:	4629      	mov	r1, r5
 800d0a0:	f7f3 f8f2 	bl	8000288 <__aeabi_dsub>
 800d0a4:	e7c4      	b.n	800d030 <__kernel_sin+0xd0>
 800d0a6:	bf00      	nop
 800d0a8:	55555549 	.word	0x55555549
 800d0ac:	3fc55555 	.word	0x3fc55555
 800d0b0:	3fe00000 	.word	0x3fe00000
 800d0b4:	5acfd57c 	.word	0x5acfd57c
 800d0b8:	3de5d93a 	.word	0x3de5d93a
 800d0bc:	8a2b9ceb 	.word	0x8a2b9ceb
 800d0c0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d0c4:	57b1fe7d 	.word	0x57b1fe7d
 800d0c8:	3ec71de3 	.word	0x3ec71de3
 800d0cc:	19c161d5 	.word	0x19c161d5
 800d0d0:	3f2a01a0 	.word	0x3f2a01a0
 800d0d4:	1110f8a6 	.word	0x1110f8a6
 800d0d8:	3f811111 	.word	0x3f811111
 800d0dc:	00000000 	.word	0x00000000

0800d0e0 <__kernel_tan>:
 800d0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e4:	ed2d 8b06 	vpush	{d8-d10}
 800d0e8:	ec5b ab10 	vmov	sl, fp, d0
 800d0ec:	4be0      	ldr	r3, [pc, #896]	; (800d470 <__kernel_tan+0x390>)
 800d0ee:	b083      	sub	sp, #12
 800d0f0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800d0f4:	429f      	cmp	r7, r3
 800d0f6:	ec59 8b11 	vmov	r8, r9, d1
 800d0fa:	4606      	mov	r6, r0
 800d0fc:	f8cd b000 	str.w	fp, [sp]
 800d100:	dc61      	bgt.n	800d1c6 <__kernel_tan+0xe6>
 800d102:	ee10 0a10 	vmov	r0, s0
 800d106:	4659      	mov	r1, fp
 800d108:	f7f3 fd26 	bl	8000b58 <__aeabi_d2iz>
 800d10c:	4605      	mov	r5, r0
 800d10e:	2800      	cmp	r0, #0
 800d110:	f040 8083 	bne.w	800d21a <__kernel_tan+0x13a>
 800d114:	1c73      	adds	r3, r6, #1
 800d116:	4652      	mov	r2, sl
 800d118:	4313      	orrs	r3, r2
 800d11a:	433b      	orrs	r3, r7
 800d11c:	d112      	bne.n	800d144 <__kernel_tan+0x64>
 800d11e:	ec4b ab10 	vmov	d0, sl, fp
 800d122:	f000 fe59 	bl	800ddd8 <fabs>
 800d126:	49d3      	ldr	r1, [pc, #844]	; (800d474 <__kernel_tan+0x394>)
 800d128:	ec53 2b10 	vmov	r2, r3, d0
 800d12c:	2000      	movs	r0, #0
 800d12e:	f7f3 fb8d 	bl	800084c <__aeabi_ddiv>
 800d132:	4682      	mov	sl, r0
 800d134:	468b      	mov	fp, r1
 800d136:	ec4b ab10 	vmov	d0, sl, fp
 800d13a:	b003      	add	sp, #12
 800d13c:	ecbd 8b06 	vpop	{d8-d10}
 800d140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d144:	2e01      	cmp	r6, #1
 800d146:	d0f6      	beq.n	800d136 <__kernel_tan+0x56>
 800d148:	4642      	mov	r2, r8
 800d14a:	464b      	mov	r3, r9
 800d14c:	4650      	mov	r0, sl
 800d14e:	4659      	mov	r1, fp
 800d150:	f7f3 f89c 	bl	800028c <__adddf3>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	460f      	mov	r7, r1
 800d15a:	2000      	movs	r0, #0
 800d15c:	49c6      	ldr	r1, [pc, #792]	; (800d478 <__kernel_tan+0x398>)
 800d15e:	f7f3 fb75 	bl	800084c <__aeabi_ddiv>
 800d162:	e9cd 0100 	strd	r0, r1, [sp]
 800d166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d16a:	462e      	mov	r6, r5
 800d16c:	4652      	mov	r2, sl
 800d16e:	462c      	mov	r4, r5
 800d170:	4630      	mov	r0, r6
 800d172:	461d      	mov	r5, r3
 800d174:	4639      	mov	r1, r7
 800d176:	465b      	mov	r3, fp
 800d178:	f7f3 f886 	bl	8000288 <__aeabi_dsub>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	4640      	mov	r0, r8
 800d182:	4649      	mov	r1, r9
 800d184:	f7f3 f880 	bl	8000288 <__aeabi_dsub>
 800d188:	4632      	mov	r2, r6
 800d18a:	462b      	mov	r3, r5
 800d18c:	f7f3 fa34 	bl	80005f8 <__aeabi_dmul>
 800d190:	4632      	mov	r2, r6
 800d192:	4680      	mov	r8, r0
 800d194:	4689      	mov	r9, r1
 800d196:	462b      	mov	r3, r5
 800d198:	4630      	mov	r0, r6
 800d19a:	4639      	mov	r1, r7
 800d19c:	f7f3 fa2c 	bl	80005f8 <__aeabi_dmul>
 800d1a0:	4bb4      	ldr	r3, [pc, #720]	; (800d474 <__kernel_tan+0x394>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f7f3 f872 	bl	800028c <__adddf3>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	f7f3 f86c 	bl	800028c <__adddf3>
 800d1b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1b8:	f7f3 fa1e 	bl	80005f8 <__aeabi_dmul>
 800d1bc:	4622      	mov	r2, r4
 800d1be:	462b      	mov	r3, r5
 800d1c0:	f7f3 f864 	bl	800028c <__adddf3>
 800d1c4:	e7b5      	b.n	800d132 <__kernel_tan+0x52>
 800d1c6:	4bad      	ldr	r3, [pc, #692]	; (800d47c <__kernel_tan+0x39c>)
 800d1c8:	429f      	cmp	r7, r3
 800d1ca:	dd26      	ble.n	800d21a <__kernel_tan+0x13a>
 800d1cc:	9b00      	ldr	r3, [sp, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	da09      	bge.n	800d1e6 <__kernel_tan+0x106>
 800d1d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d1d6:	469b      	mov	fp, r3
 800d1d8:	ee10 aa10 	vmov	sl, s0
 800d1dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d1e0:	ee11 8a10 	vmov	r8, s2
 800d1e4:	4699      	mov	r9, r3
 800d1e6:	4652      	mov	r2, sl
 800d1e8:	465b      	mov	r3, fp
 800d1ea:	a183      	add	r1, pc, #524	; (adr r1, 800d3f8 <__kernel_tan+0x318>)
 800d1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1f0:	f7f3 f84a 	bl	8000288 <__aeabi_dsub>
 800d1f4:	4642      	mov	r2, r8
 800d1f6:	464b      	mov	r3, r9
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	460d      	mov	r5, r1
 800d1fc:	a180      	add	r1, pc, #512	; (adr r1, 800d400 <__kernel_tan+0x320>)
 800d1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d202:	f7f3 f841 	bl	8000288 <__aeabi_dsub>
 800d206:	4622      	mov	r2, r4
 800d208:	462b      	mov	r3, r5
 800d20a:	f7f3 f83f 	bl	800028c <__adddf3>
 800d20e:	f04f 0800 	mov.w	r8, #0
 800d212:	4682      	mov	sl, r0
 800d214:	468b      	mov	fp, r1
 800d216:	f04f 0900 	mov.w	r9, #0
 800d21a:	4652      	mov	r2, sl
 800d21c:	465b      	mov	r3, fp
 800d21e:	4650      	mov	r0, sl
 800d220:	4659      	mov	r1, fp
 800d222:	f7f3 f9e9 	bl	80005f8 <__aeabi_dmul>
 800d226:	4602      	mov	r2, r0
 800d228:	460b      	mov	r3, r1
 800d22a:	ec43 2b18 	vmov	d8, r2, r3
 800d22e:	f7f3 f9e3 	bl	80005f8 <__aeabi_dmul>
 800d232:	ec53 2b18 	vmov	r2, r3, d8
 800d236:	4604      	mov	r4, r0
 800d238:	460d      	mov	r5, r1
 800d23a:	4650      	mov	r0, sl
 800d23c:	4659      	mov	r1, fp
 800d23e:	f7f3 f9db 	bl	80005f8 <__aeabi_dmul>
 800d242:	a371      	add	r3, pc, #452	; (adr r3, 800d408 <__kernel_tan+0x328>)
 800d244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d248:	ec41 0b19 	vmov	d9, r0, r1
 800d24c:	4620      	mov	r0, r4
 800d24e:	4629      	mov	r1, r5
 800d250:	f7f3 f9d2 	bl	80005f8 <__aeabi_dmul>
 800d254:	a36e      	add	r3, pc, #440	; (adr r3, 800d410 <__kernel_tan+0x330>)
 800d256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25a:	f7f3 f817 	bl	800028c <__adddf3>
 800d25e:	4622      	mov	r2, r4
 800d260:	462b      	mov	r3, r5
 800d262:	f7f3 f9c9 	bl	80005f8 <__aeabi_dmul>
 800d266:	a36c      	add	r3, pc, #432	; (adr r3, 800d418 <__kernel_tan+0x338>)
 800d268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26c:	f7f3 f80e 	bl	800028c <__adddf3>
 800d270:	4622      	mov	r2, r4
 800d272:	462b      	mov	r3, r5
 800d274:	f7f3 f9c0 	bl	80005f8 <__aeabi_dmul>
 800d278:	a369      	add	r3, pc, #420	; (adr r3, 800d420 <__kernel_tan+0x340>)
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	f7f3 f805 	bl	800028c <__adddf3>
 800d282:	4622      	mov	r2, r4
 800d284:	462b      	mov	r3, r5
 800d286:	f7f3 f9b7 	bl	80005f8 <__aeabi_dmul>
 800d28a:	a367      	add	r3, pc, #412	; (adr r3, 800d428 <__kernel_tan+0x348>)
 800d28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d290:	f7f2 fffc 	bl	800028c <__adddf3>
 800d294:	4622      	mov	r2, r4
 800d296:	462b      	mov	r3, r5
 800d298:	f7f3 f9ae 	bl	80005f8 <__aeabi_dmul>
 800d29c:	a364      	add	r3, pc, #400	; (adr r3, 800d430 <__kernel_tan+0x350>)
 800d29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a2:	f7f2 fff3 	bl	800028c <__adddf3>
 800d2a6:	ec53 2b18 	vmov	r2, r3, d8
 800d2aa:	f7f3 f9a5 	bl	80005f8 <__aeabi_dmul>
 800d2ae:	a362      	add	r3, pc, #392	; (adr r3, 800d438 <__kernel_tan+0x358>)
 800d2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b4:	ec41 0b1a 	vmov	d10, r0, r1
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	f7f3 f99c 	bl	80005f8 <__aeabi_dmul>
 800d2c0:	a35f      	add	r3, pc, #380	; (adr r3, 800d440 <__kernel_tan+0x360>)
 800d2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c6:	f7f2 ffe1 	bl	800028c <__adddf3>
 800d2ca:	4622      	mov	r2, r4
 800d2cc:	462b      	mov	r3, r5
 800d2ce:	f7f3 f993 	bl	80005f8 <__aeabi_dmul>
 800d2d2:	a35d      	add	r3, pc, #372	; (adr r3, 800d448 <__kernel_tan+0x368>)
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	f7f2 ffd8 	bl	800028c <__adddf3>
 800d2dc:	4622      	mov	r2, r4
 800d2de:	462b      	mov	r3, r5
 800d2e0:	f7f3 f98a 	bl	80005f8 <__aeabi_dmul>
 800d2e4:	a35a      	add	r3, pc, #360	; (adr r3, 800d450 <__kernel_tan+0x370>)
 800d2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ea:	f7f2 ffcf 	bl	800028c <__adddf3>
 800d2ee:	4622      	mov	r2, r4
 800d2f0:	462b      	mov	r3, r5
 800d2f2:	f7f3 f981 	bl	80005f8 <__aeabi_dmul>
 800d2f6:	a358      	add	r3, pc, #352	; (adr r3, 800d458 <__kernel_tan+0x378>)
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	f7f2 ffc6 	bl	800028c <__adddf3>
 800d300:	4622      	mov	r2, r4
 800d302:	462b      	mov	r3, r5
 800d304:	f7f3 f978 	bl	80005f8 <__aeabi_dmul>
 800d308:	a355      	add	r3, pc, #340	; (adr r3, 800d460 <__kernel_tan+0x380>)
 800d30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30e:	f7f2 ffbd 	bl	800028c <__adddf3>
 800d312:	4602      	mov	r2, r0
 800d314:	460b      	mov	r3, r1
 800d316:	ec51 0b1a 	vmov	r0, r1, d10
 800d31a:	f7f2 ffb7 	bl	800028c <__adddf3>
 800d31e:	ec53 2b19 	vmov	r2, r3, d9
 800d322:	f7f3 f969 	bl	80005f8 <__aeabi_dmul>
 800d326:	4642      	mov	r2, r8
 800d328:	464b      	mov	r3, r9
 800d32a:	f7f2 ffaf 	bl	800028c <__adddf3>
 800d32e:	ec53 2b18 	vmov	r2, r3, d8
 800d332:	f7f3 f961 	bl	80005f8 <__aeabi_dmul>
 800d336:	4642      	mov	r2, r8
 800d338:	464b      	mov	r3, r9
 800d33a:	f7f2 ffa7 	bl	800028c <__adddf3>
 800d33e:	a34a      	add	r3, pc, #296	; (adr r3, 800d468 <__kernel_tan+0x388>)
 800d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d344:	4604      	mov	r4, r0
 800d346:	460d      	mov	r5, r1
 800d348:	ec51 0b19 	vmov	r0, r1, d9
 800d34c:	f7f3 f954 	bl	80005f8 <__aeabi_dmul>
 800d350:	4622      	mov	r2, r4
 800d352:	462b      	mov	r3, r5
 800d354:	f7f2 ff9a 	bl	800028c <__adddf3>
 800d358:	460b      	mov	r3, r1
 800d35a:	ec41 0b18 	vmov	d8, r0, r1
 800d35e:	4602      	mov	r2, r0
 800d360:	4659      	mov	r1, fp
 800d362:	4650      	mov	r0, sl
 800d364:	f7f2 ff92 	bl	800028c <__adddf3>
 800d368:	4b44      	ldr	r3, [pc, #272]	; (800d47c <__kernel_tan+0x39c>)
 800d36a:	429f      	cmp	r7, r3
 800d36c:	4604      	mov	r4, r0
 800d36e:	460d      	mov	r5, r1
 800d370:	f340 8086 	ble.w	800d480 <__kernel_tan+0x3a0>
 800d374:	4630      	mov	r0, r6
 800d376:	f7f3 f8d5 	bl	8000524 <__aeabi_i2d>
 800d37a:	4622      	mov	r2, r4
 800d37c:	4680      	mov	r8, r0
 800d37e:	4689      	mov	r9, r1
 800d380:	462b      	mov	r3, r5
 800d382:	4620      	mov	r0, r4
 800d384:	4629      	mov	r1, r5
 800d386:	f7f3 f937 	bl	80005f8 <__aeabi_dmul>
 800d38a:	4642      	mov	r2, r8
 800d38c:	4606      	mov	r6, r0
 800d38e:	460f      	mov	r7, r1
 800d390:	464b      	mov	r3, r9
 800d392:	4620      	mov	r0, r4
 800d394:	4629      	mov	r1, r5
 800d396:	f7f2 ff79 	bl	800028c <__adddf3>
 800d39a:	4602      	mov	r2, r0
 800d39c:	460b      	mov	r3, r1
 800d39e:	4630      	mov	r0, r6
 800d3a0:	4639      	mov	r1, r7
 800d3a2:	f7f3 fa53 	bl	800084c <__aeabi_ddiv>
 800d3a6:	ec53 2b18 	vmov	r2, r3, d8
 800d3aa:	f7f2 ff6d 	bl	8000288 <__aeabi_dsub>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	4650      	mov	r0, sl
 800d3b4:	4659      	mov	r1, fp
 800d3b6:	f7f2 ff67 	bl	8000288 <__aeabi_dsub>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	460b      	mov	r3, r1
 800d3be:	f7f2 ff65 	bl	800028c <__adddf3>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4640      	mov	r0, r8
 800d3c8:	4649      	mov	r1, r9
 800d3ca:	f7f2 ff5d 	bl	8000288 <__aeabi_dsub>
 800d3ce:	9b00      	ldr	r3, [sp, #0]
 800d3d0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800d3d4:	f00a 0a02 	and.w	sl, sl, #2
 800d3d8:	4604      	mov	r4, r0
 800d3da:	f1ca 0001 	rsb	r0, sl, #1
 800d3de:	460d      	mov	r5, r1
 800d3e0:	f7f3 f8a0 	bl	8000524 <__aeabi_i2d>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	4629      	mov	r1, r5
 800d3ec:	f7f3 f904 	bl	80005f8 <__aeabi_dmul>
 800d3f0:	e69f      	b.n	800d132 <__kernel_tan+0x52>
 800d3f2:	bf00      	nop
 800d3f4:	f3af 8000 	nop.w
 800d3f8:	54442d18 	.word	0x54442d18
 800d3fc:	3fe921fb 	.word	0x3fe921fb
 800d400:	33145c07 	.word	0x33145c07
 800d404:	3c81a626 	.word	0x3c81a626
 800d408:	74bf7ad4 	.word	0x74bf7ad4
 800d40c:	3efb2a70 	.word	0x3efb2a70
 800d410:	32f0a7e9 	.word	0x32f0a7e9
 800d414:	3f12b80f 	.word	0x3f12b80f
 800d418:	1a8d1068 	.word	0x1a8d1068
 800d41c:	3f3026f7 	.word	0x3f3026f7
 800d420:	fee08315 	.word	0xfee08315
 800d424:	3f57dbc8 	.word	0x3f57dbc8
 800d428:	e96e8493 	.word	0xe96e8493
 800d42c:	3f8226e3 	.word	0x3f8226e3
 800d430:	1bb341fe 	.word	0x1bb341fe
 800d434:	3faba1ba 	.word	0x3faba1ba
 800d438:	db605373 	.word	0xdb605373
 800d43c:	bef375cb 	.word	0xbef375cb
 800d440:	a03792a6 	.word	0xa03792a6
 800d444:	3f147e88 	.word	0x3f147e88
 800d448:	f2f26501 	.word	0xf2f26501
 800d44c:	3f4344d8 	.word	0x3f4344d8
 800d450:	c9560328 	.word	0xc9560328
 800d454:	3f6d6d22 	.word	0x3f6d6d22
 800d458:	8406d637 	.word	0x8406d637
 800d45c:	3f9664f4 	.word	0x3f9664f4
 800d460:	1110fe7a 	.word	0x1110fe7a
 800d464:	3fc11111 	.word	0x3fc11111
 800d468:	55555563 	.word	0x55555563
 800d46c:	3fd55555 	.word	0x3fd55555
 800d470:	3e2fffff 	.word	0x3e2fffff
 800d474:	3ff00000 	.word	0x3ff00000
 800d478:	bff00000 	.word	0xbff00000
 800d47c:	3fe59427 	.word	0x3fe59427
 800d480:	2e01      	cmp	r6, #1
 800d482:	d02f      	beq.n	800d4e4 <__kernel_tan+0x404>
 800d484:	460f      	mov	r7, r1
 800d486:	4602      	mov	r2, r0
 800d488:	460b      	mov	r3, r1
 800d48a:	4689      	mov	r9, r1
 800d48c:	2000      	movs	r0, #0
 800d48e:	4917      	ldr	r1, [pc, #92]	; (800d4ec <__kernel_tan+0x40c>)
 800d490:	f7f3 f9dc 	bl	800084c <__aeabi_ddiv>
 800d494:	2600      	movs	r6, #0
 800d496:	e9cd 0100 	strd	r0, r1, [sp]
 800d49a:	4652      	mov	r2, sl
 800d49c:	465b      	mov	r3, fp
 800d49e:	4630      	mov	r0, r6
 800d4a0:	4639      	mov	r1, r7
 800d4a2:	f7f2 fef1 	bl	8000288 <__aeabi_dsub>
 800d4a6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	ec51 0b18 	vmov	r0, r1, d8
 800d4b2:	f7f2 fee9 	bl	8000288 <__aeabi_dsub>
 800d4b6:	4632      	mov	r2, r6
 800d4b8:	462b      	mov	r3, r5
 800d4ba:	f7f3 f89d 	bl	80005f8 <__aeabi_dmul>
 800d4be:	46b0      	mov	r8, r6
 800d4c0:	460f      	mov	r7, r1
 800d4c2:	4642      	mov	r2, r8
 800d4c4:	462b      	mov	r3, r5
 800d4c6:	4634      	mov	r4, r6
 800d4c8:	4649      	mov	r1, r9
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	f7f3 f893 	bl	80005f8 <__aeabi_dmul>
 800d4d2:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <__kernel_tan+0x410>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f7f2 fed9 	bl	800028c <__adddf3>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	460b      	mov	r3, r1
 800d4de:	4630      	mov	r0, r6
 800d4e0:	4639      	mov	r1, r7
 800d4e2:	e665      	b.n	800d1b0 <__kernel_tan+0xd0>
 800d4e4:	4682      	mov	sl, r0
 800d4e6:	468b      	mov	fp, r1
 800d4e8:	e625      	b.n	800d136 <__kernel_tan+0x56>
 800d4ea:	bf00      	nop
 800d4ec:	bff00000 	.word	0xbff00000
 800d4f0:	3ff00000 	.word	0x3ff00000
 800d4f4:	00000000 	.word	0x00000000

0800d4f8 <__ieee754_atan2>:
 800d4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4fc:	ec57 6b11 	vmov	r6, r7, d1
 800d500:	4273      	negs	r3, r6
 800d502:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800d680 <__ieee754_atan2+0x188>
 800d506:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d50a:	4333      	orrs	r3, r6
 800d50c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d510:	4543      	cmp	r3, r8
 800d512:	ec51 0b10 	vmov	r0, r1, d0
 800d516:	ee11 5a10 	vmov	r5, s2
 800d51a:	d80a      	bhi.n	800d532 <__ieee754_atan2+0x3a>
 800d51c:	4244      	negs	r4, r0
 800d51e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d522:	4304      	orrs	r4, r0
 800d524:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d528:	4544      	cmp	r4, r8
 800d52a:	ee10 9a10 	vmov	r9, s0
 800d52e:	468e      	mov	lr, r1
 800d530:	d907      	bls.n	800d542 <__ieee754_atan2+0x4a>
 800d532:	4632      	mov	r2, r6
 800d534:	463b      	mov	r3, r7
 800d536:	f7f2 fea9 	bl	800028c <__adddf3>
 800d53a:	ec41 0b10 	vmov	d0, r0, r1
 800d53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d542:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d546:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d54a:	4334      	orrs	r4, r6
 800d54c:	d103      	bne.n	800d556 <__ieee754_atan2+0x5e>
 800d54e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d552:	f000 baa1 	b.w	800da98 <atan>
 800d556:	17bc      	asrs	r4, r7, #30
 800d558:	f004 0402 	and.w	r4, r4, #2
 800d55c:	ea53 0909 	orrs.w	r9, r3, r9
 800d560:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d564:	d107      	bne.n	800d576 <__ieee754_atan2+0x7e>
 800d566:	2c02      	cmp	r4, #2
 800d568:	d05f      	beq.n	800d62a <__ieee754_atan2+0x132>
 800d56a:	2c03      	cmp	r4, #3
 800d56c:	d1e5      	bne.n	800d53a <__ieee754_atan2+0x42>
 800d56e:	a140      	add	r1, pc, #256	; (adr r1, 800d670 <__ieee754_atan2+0x178>)
 800d570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d574:	e7e1      	b.n	800d53a <__ieee754_atan2+0x42>
 800d576:	4315      	orrs	r5, r2
 800d578:	d106      	bne.n	800d588 <__ieee754_atan2+0x90>
 800d57a:	f1be 0f00 	cmp.w	lr, #0
 800d57e:	da5f      	bge.n	800d640 <__ieee754_atan2+0x148>
 800d580:	a13d      	add	r1, pc, #244	; (adr r1, 800d678 <__ieee754_atan2+0x180>)
 800d582:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d586:	e7d8      	b.n	800d53a <__ieee754_atan2+0x42>
 800d588:	4542      	cmp	r2, r8
 800d58a:	d10f      	bne.n	800d5ac <__ieee754_atan2+0xb4>
 800d58c:	4293      	cmp	r3, r2
 800d58e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d592:	d107      	bne.n	800d5a4 <__ieee754_atan2+0xac>
 800d594:	2c02      	cmp	r4, #2
 800d596:	d84c      	bhi.n	800d632 <__ieee754_atan2+0x13a>
 800d598:	4b33      	ldr	r3, [pc, #204]	; (800d668 <__ieee754_atan2+0x170>)
 800d59a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d59e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d5a2:	e7ca      	b.n	800d53a <__ieee754_atan2+0x42>
 800d5a4:	2c02      	cmp	r4, #2
 800d5a6:	d848      	bhi.n	800d63a <__ieee754_atan2+0x142>
 800d5a8:	4b30      	ldr	r3, [pc, #192]	; (800d66c <__ieee754_atan2+0x174>)
 800d5aa:	e7f6      	b.n	800d59a <__ieee754_atan2+0xa2>
 800d5ac:	4543      	cmp	r3, r8
 800d5ae:	d0e4      	beq.n	800d57a <__ieee754_atan2+0x82>
 800d5b0:	1a9b      	subs	r3, r3, r2
 800d5b2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d5b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d5ba:	da1e      	bge.n	800d5fa <__ieee754_atan2+0x102>
 800d5bc:	2f00      	cmp	r7, #0
 800d5be:	da01      	bge.n	800d5c4 <__ieee754_atan2+0xcc>
 800d5c0:	323c      	adds	r2, #60	; 0x3c
 800d5c2:	db1e      	blt.n	800d602 <__ieee754_atan2+0x10a>
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	f7f3 f940 	bl	800084c <__aeabi_ddiv>
 800d5cc:	ec41 0b10 	vmov	d0, r0, r1
 800d5d0:	f000 fc02 	bl	800ddd8 <fabs>
 800d5d4:	f000 fa60 	bl	800da98 <atan>
 800d5d8:	ec51 0b10 	vmov	r0, r1, d0
 800d5dc:	2c01      	cmp	r4, #1
 800d5de:	d013      	beq.n	800d608 <__ieee754_atan2+0x110>
 800d5e0:	2c02      	cmp	r4, #2
 800d5e2:	d015      	beq.n	800d610 <__ieee754_atan2+0x118>
 800d5e4:	2c00      	cmp	r4, #0
 800d5e6:	d0a8      	beq.n	800d53a <__ieee754_atan2+0x42>
 800d5e8:	a317      	add	r3, pc, #92	; (adr r3, 800d648 <__ieee754_atan2+0x150>)
 800d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ee:	f7f2 fe4b 	bl	8000288 <__aeabi_dsub>
 800d5f2:	a317      	add	r3, pc, #92	; (adr r3, 800d650 <__ieee754_atan2+0x158>)
 800d5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f8:	e014      	b.n	800d624 <__ieee754_atan2+0x12c>
 800d5fa:	a117      	add	r1, pc, #92	; (adr r1, 800d658 <__ieee754_atan2+0x160>)
 800d5fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d600:	e7ec      	b.n	800d5dc <__ieee754_atan2+0xe4>
 800d602:	2000      	movs	r0, #0
 800d604:	2100      	movs	r1, #0
 800d606:	e7e9      	b.n	800d5dc <__ieee754_atan2+0xe4>
 800d608:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d60c:	4619      	mov	r1, r3
 800d60e:	e794      	b.n	800d53a <__ieee754_atan2+0x42>
 800d610:	a30d      	add	r3, pc, #52	; (adr r3, 800d648 <__ieee754_atan2+0x150>)
 800d612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d616:	f7f2 fe37 	bl	8000288 <__aeabi_dsub>
 800d61a:	4602      	mov	r2, r0
 800d61c:	460b      	mov	r3, r1
 800d61e:	a10c      	add	r1, pc, #48	; (adr r1, 800d650 <__ieee754_atan2+0x158>)
 800d620:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d624:	f7f2 fe30 	bl	8000288 <__aeabi_dsub>
 800d628:	e787      	b.n	800d53a <__ieee754_atan2+0x42>
 800d62a:	a109      	add	r1, pc, #36	; (adr r1, 800d650 <__ieee754_atan2+0x158>)
 800d62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d630:	e783      	b.n	800d53a <__ieee754_atan2+0x42>
 800d632:	a10b      	add	r1, pc, #44	; (adr r1, 800d660 <__ieee754_atan2+0x168>)
 800d634:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d638:	e77f      	b.n	800d53a <__ieee754_atan2+0x42>
 800d63a:	2000      	movs	r0, #0
 800d63c:	2100      	movs	r1, #0
 800d63e:	e77c      	b.n	800d53a <__ieee754_atan2+0x42>
 800d640:	a105      	add	r1, pc, #20	; (adr r1, 800d658 <__ieee754_atan2+0x160>)
 800d642:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d646:	e778      	b.n	800d53a <__ieee754_atan2+0x42>
 800d648:	33145c07 	.word	0x33145c07
 800d64c:	3ca1a626 	.word	0x3ca1a626
 800d650:	54442d18 	.word	0x54442d18
 800d654:	400921fb 	.word	0x400921fb
 800d658:	54442d18 	.word	0x54442d18
 800d65c:	3ff921fb 	.word	0x3ff921fb
 800d660:	54442d18 	.word	0x54442d18
 800d664:	3fe921fb 	.word	0x3fe921fb
 800d668:	0800f578 	.word	0x0800f578
 800d66c:	0800f590 	.word	0x0800f590
 800d670:	54442d18 	.word	0x54442d18
 800d674:	c00921fb 	.word	0xc00921fb
 800d678:	54442d18 	.word	0x54442d18
 800d67c:	bff921fb 	.word	0xbff921fb
 800d680:	7ff00000 	.word	0x7ff00000
 800d684:	00000000 	.word	0x00000000

0800d688 <__ieee754_rem_pio2>:
 800d688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68c:	ed2d 8b02 	vpush	{d8}
 800d690:	ec55 4b10 	vmov	r4, r5, d0
 800d694:	4bca      	ldr	r3, [pc, #808]	; (800d9c0 <__ieee754_rem_pio2+0x338>)
 800d696:	b08b      	sub	sp, #44	; 0x2c
 800d698:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d69c:	4598      	cmp	r8, r3
 800d69e:	4682      	mov	sl, r0
 800d6a0:	9502      	str	r5, [sp, #8]
 800d6a2:	dc08      	bgt.n	800d6b6 <__ieee754_rem_pio2+0x2e>
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	ed80 0b00 	vstr	d0, [r0]
 800d6ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d6b0:	f04f 0b00 	mov.w	fp, #0
 800d6b4:	e028      	b.n	800d708 <__ieee754_rem_pio2+0x80>
 800d6b6:	4bc3      	ldr	r3, [pc, #780]	; (800d9c4 <__ieee754_rem_pio2+0x33c>)
 800d6b8:	4598      	cmp	r8, r3
 800d6ba:	dc78      	bgt.n	800d7ae <__ieee754_rem_pio2+0x126>
 800d6bc:	9b02      	ldr	r3, [sp, #8]
 800d6be:	4ec2      	ldr	r6, [pc, #776]	; (800d9c8 <__ieee754_rem_pio2+0x340>)
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	ee10 0a10 	vmov	r0, s0
 800d6c6:	a3b0      	add	r3, pc, #704	; (adr r3, 800d988 <__ieee754_rem_pio2+0x300>)
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	dd39      	ble.n	800d744 <__ieee754_rem_pio2+0xbc>
 800d6d0:	f7f2 fdda 	bl	8000288 <__aeabi_dsub>
 800d6d4:	45b0      	cmp	r8, r6
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	460d      	mov	r5, r1
 800d6da:	d01b      	beq.n	800d714 <__ieee754_rem_pio2+0x8c>
 800d6dc:	a3ac      	add	r3, pc, #688	; (adr r3, 800d990 <__ieee754_rem_pio2+0x308>)
 800d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e2:	f7f2 fdd1 	bl	8000288 <__aeabi_dsub>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	e9ca 2300 	strd	r2, r3, [sl]
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	f7f2 fdc9 	bl	8000288 <__aeabi_dsub>
 800d6f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800d990 <__ieee754_rem_pio2+0x308>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	f7f2 fdc4 	bl	8000288 <__aeabi_dsub>
 800d700:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d704:	f04f 0b01 	mov.w	fp, #1
 800d708:	4658      	mov	r0, fp
 800d70a:	b00b      	add	sp, #44	; 0x2c
 800d70c:	ecbd 8b02 	vpop	{d8}
 800d710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d714:	a3a0      	add	r3, pc, #640	; (adr r3, 800d998 <__ieee754_rem_pio2+0x310>)
 800d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71a:	f7f2 fdb5 	bl	8000288 <__aeabi_dsub>
 800d71e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d9a0 <__ieee754_rem_pio2+0x318>)
 800d720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d724:	4604      	mov	r4, r0
 800d726:	460d      	mov	r5, r1
 800d728:	f7f2 fdae 	bl	8000288 <__aeabi_dsub>
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	e9ca 2300 	strd	r2, r3, [sl]
 800d734:	4620      	mov	r0, r4
 800d736:	4629      	mov	r1, r5
 800d738:	f7f2 fda6 	bl	8000288 <__aeabi_dsub>
 800d73c:	a398      	add	r3, pc, #608	; (adr r3, 800d9a0 <__ieee754_rem_pio2+0x318>)
 800d73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d742:	e7db      	b.n	800d6fc <__ieee754_rem_pio2+0x74>
 800d744:	f7f2 fda2 	bl	800028c <__adddf3>
 800d748:	45b0      	cmp	r8, r6
 800d74a:	4604      	mov	r4, r0
 800d74c:	460d      	mov	r5, r1
 800d74e:	d016      	beq.n	800d77e <__ieee754_rem_pio2+0xf6>
 800d750:	a38f      	add	r3, pc, #572	; (adr r3, 800d990 <__ieee754_rem_pio2+0x308>)
 800d752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d756:	f7f2 fd99 	bl	800028c <__adddf3>
 800d75a:	4602      	mov	r2, r0
 800d75c:	460b      	mov	r3, r1
 800d75e:	e9ca 2300 	strd	r2, r3, [sl]
 800d762:	4620      	mov	r0, r4
 800d764:	4629      	mov	r1, r5
 800d766:	f7f2 fd8f 	bl	8000288 <__aeabi_dsub>
 800d76a:	a389      	add	r3, pc, #548	; (adr r3, 800d990 <__ieee754_rem_pio2+0x308>)
 800d76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d770:	f7f2 fd8c 	bl	800028c <__adddf3>
 800d774:	f04f 3bff 	mov.w	fp, #4294967295
 800d778:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d77c:	e7c4      	b.n	800d708 <__ieee754_rem_pio2+0x80>
 800d77e:	a386      	add	r3, pc, #536	; (adr r3, 800d998 <__ieee754_rem_pio2+0x310>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	f7f2 fd82 	bl	800028c <__adddf3>
 800d788:	a385      	add	r3, pc, #532	; (adr r3, 800d9a0 <__ieee754_rem_pio2+0x318>)
 800d78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78e:	4604      	mov	r4, r0
 800d790:	460d      	mov	r5, r1
 800d792:	f7f2 fd7b 	bl	800028c <__adddf3>
 800d796:	4602      	mov	r2, r0
 800d798:	460b      	mov	r3, r1
 800d79a:	e9ca 2300 	strd	r2, r3, [sl]
 800d79e:	4620      	mov	r0, r4
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	f7f2 fd71 	bl	8000288 <__aeabi_dsub>
 800d7a6:	a37e      	add	r3, pc, #504	; (adr r3, 800d9a0 <__ieee754_rem_pio2+0x318>)
 800d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ac:	e7e0      	b.n	800d770 <__ieee754_rem_pio2+0xe8>
 800d7ae:	4b87      	ldr	r3, [pc, #540]	; (800d9cc <__ieee754_rem_pio2+0x344>)
 800d7b0:	4598      	cmp	r8, r3
 800d7b2:	f300 80d8 	bgt.w	800d966 <__ieee754_rem_pio2+0x2de>
 800d7b6:	f000 fb0f 	bl	800ddd8 <fabs>
 800d7ba:	ec55 4b10 	vmov	r4, r5, d0
 800d7be:	ee10 0a10 	vmov	r0, s0
 800d7c2:	a379      	add	r3, pc, #484	; (adr r3, 800d9a8 <__ieee754_rem_pio2+0x320>)
 800d7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	f7f2 ff15 	bl	80005f8 <__aeabi_dmul>
 800d7ce:	4b80      	ldr	r3, [pc, #512]	; (800d9d0 <__ieee754_rem_pio2+0x348>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f7f2 fd5b 	bl	800028c <__adddf3>
 800d7d6:	f7f3 f9bf 	bl	8000b58 <__aeabi_d2iz>
 800d7da:	4683      	mov	fp, r0
 800d7dc:	f7f2 fea2 	bl	8000524 <__aeabi_i2d>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	ec43 2b18 	vmov	d8, r2, r3
 800d7e8:	a367      	add	r3, pc, #412	; (adr r3, 800d988 <__ieee754_rem_pio2+0x300>)
 800d7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ee:	f7f2 ff03 	bl	80005f8 <__aeabi_dmul>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	f7f2 fd45 	bl	8000288 <__aeabi_dsub>
 800d7fe:	a364      	add	r3, pc, #400	; (adr r3, 800d990 <__ieee754_rem_pio2+0x308>)
 800d800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d804:	4606      	mov	r6, r0
 800d806:	460f      	mov	r7, r1
 800d808:	ec51 0b18 	vmov	r0, r1, d8
 800d80c:	f7f2 fef4 	bl	80005f8 <__aeabi_dmul>
 800d810:	f1bb 0f1f 	cmp.w	fp, #31
 800d814:	4604      	mov	r4, r0
 800d816:	460d      	mov	r5, r1
 800d818:	dc0d      	bgt.n	800d836 <__ieee754_rem_pio2+0x1ae>
 800d81a:	4b6e      	ldr	r3, [pc, #440]	; (800d9d4 <__ieee754_rem_pio2+0x34c>)
 800d81c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d824:	4543      	cmp	r3, r8
 800d826:	d006      	beq.n	800d836 <__ieee754_rem_pio2+0x1ae>
 800d828:	4622      	mov	r2, r4
 800d82a:	462b      	mov	r3, r5
 800d82c:	4630      	mov	r0, r6
 800d82e:	4639      	mov	r1, r7
 800d830:	f7f2 fd2a 	bl	8000288 <__aeabi_dsub>
 800d834:	e00e      	b.n	800d854 <__ieee754_rem_pio2+0x1cc>
 800d836:	462b      	mov	r3, r5
 800d838:	4622      	mov	r2, r4
 800d83a:	4630      	mov	r0, r6
 800d83c:	4639      	mov	r1, r7
 800d83e:	f7f2 fd23 	bl	8000288 <__aeabi_dsub>
 800d842:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d846:	9303      	str	r3, [sp, #12]
 800d848:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d84c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d850:	2b10      	cmp	r3, #16
 800d852:	dc02      	bgt.n	800d85a <__ieee754_rem_pio2+0x1d2>
 800d854:	e9ca 0100 	strd	r0, r1, [sl]
 800d858:	e039      	b.n	800d8ce <__ieee754_rem_pio2+0x246>
 800d85a:	a34f      	add	r3, pc, #316	; (adr r3, 800d998 <__ieee754_rem_pio2+0x310>)
 800d85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d860:	ec51 0b18 	vmov	r0, r1, d8
 800d864:	f7f2 fec8 	bl	80005f8 <__aeabi_dmul>
 800d868:	4604      	mov	r4, r0
 800d86a:	460d      	mov	r5, r1
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	4630      	mov	r0, r6
 800d872:	4639      	mov	r1, r7
 800d874:	f7f2 fd08 	bl	8000288 <__aeabi_dsub>
 800d878:	4602      	mov	r2, r0
 800d87a:	460b      	mov	r3, r1
 800d87c:	4680      	mov	r8, r0
 800d87e:	4689      	mov	r9, r1
 800d880:	4630      	mov	r0, r6
 800d882:	4639      	mov	r1, r7
 800d884:	f7f2 fd00 	bl	8000288 <__aeabi_dsub>
 800d888:	4622      	mov	r2, r4
 800d88a:	462b      	mov	r3, r5
 800d88c:	f7f2 fcfc 	bl	8000288 <__aeabi_dsub>
 800d890:	a343      	add	r3, pc, #268	; (adr r3, 800d9a0 <__ieee754_rem_pio2+0x318>)
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	4604      	mov	r4, r0
 800d898:	460d      	mov	r5, r1
 800d89a:	ec51 0b18 	vmov	r0, r1, d8
 800d89e:	f7f2 feab 	bl	80005f8 <__aeabi_dmul>
 800d8a2:	4622      	mov	r2, r4
 800d8a4:	462b      	mov	r3, r5
 800d8a6:	f7f2 fcef 	bl	8000288 <__aeabi_dsub>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	460d      	mov	r5, r1
 800d8b2:	4640      	mov	r0, r8
 800d8b4:	4649      	mov	r1, r9
 800d8b6:	f7f2 fce7 	bl	8000288 <__aeabi_dsub>
 800d8ba:	9a03      	ldr	r2, [sp, #12]
 800d8bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	2b31      	cmp	r3, #49	; 0x31
 800d8c4:	dc24      	bgt.n	800d910 <__ieee754_rem_pio2+0x288>
 800d8c6:	e9ca 0100 	strd	r0, r1, [sl]
 800d8ca:	4646      	mov	r6, r8
 800d8cc:	464f      	mov	r7, r9
 800d8ce:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	4642      	mov	r2, r8
 800d8d6:	464b      	mov	r3, r9
 800d8d8:	4639      	mov	r1, r7
 800d8da:	f7f2 fcd5 	bl	8000288 <__aeabi_dsub>
 800d8de:	462b      	mov	r3, r5
 800d8e0:	4622      	mov	r2, r4
 800d8e2:	f7f2 fcd1 	bl	8000288 <__aeabi_dsub>
 800d8e6:	9b02      	ldr	r3, [sp, #8]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d8ee:	f6bf af0b 	bge.w	800d708 <__ieee754_rem_pio2+0x80>
 800d8f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d8f6:	f8ca 3004 	str.w	r3, [sl, #4]
 800d8fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8fe:	f8ca 8000 	str.w	r8, [sl]
 800d902:	f8ca 0008 	str.w	r0, [sl, #8]
 800d906:	f8ca 300c 	str.w	r3, [sl, #12]
 800d90a:	f1cb 0b00 	rsb	fp, fp, #0
 800d90e:	e6fb      	b.n	800d708 <__ieee754_rem_pio2+0x80>
 800d910:	a327      	add	r3, pc, #156	; (adr r3, 800d9b0 <__ieee754_rem_pio2+0x328>)
 800d912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d916:	ec51 0b18 	vmov	r0, r1, d8
 800d91a:	f7f2 fe6d 	bl	80005f8 <__aeabi_dmul>
 800d91e:	4604      	mov	r4, r0
 800d920:	460d      	mov	r5, r1
 800d922:	4602      	mov	r2, r0
 800d924:	460b      	mov	r3, r1
 800d926:	4640      	mov	r0, r8
 800d928:	4649      	mov	r1, r9
 800d92a:	f7f2 fcad 	bl	8000288 <__aeabi_dsub>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	4606      	mov	r6, r0
 800d934:	460f      	mov	r7, r1
 800d936:	4640      	mov	r0, r8
 800d938:	4649      	mov	r1, r9
 800d93a:	f7f2 fca5 	bl	8000288 <__aeabi_dsub>
 800d93e:	4622      	mov	r2, r4
 800d940:	462b      	mov	r3, r5
 800d942:	f7f2 fca1 	bl	8000288 <__aeabi_dsub>
 800d946:	a31c      	add	r3, pc, #112	; (adr r3, 800d9b8 <__ieee754_rem_pio2+0x330>)
 800d948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94c:	4604      	mov	r4, r0
 800d94e:	460d      	mov	r5, r1
 800d950:	ec51 0b18 	vmov	r0, r1, d8
 800d954:	f7f2 fe50 	bl	80005f8 <__aeabi_dmul>
 800d958:	4622      	mov	r2, r4
 800d95a:	462b      	mov	r3, r5
 800d95c:	f7f2 fc94 	bl	8000288 <__aeabi_dsub>
 800d960:	4604      	mov	r4, r0
 800d962:	460d      	mov	r5, r1
 800d964:	e760      	b.n	800d828 <__ieee754_rem_pio2+0x1a0>
 800d966:	4b1c      	ldr	r3, [pc, #112]	; (800d9d8 <__ieee754_rem_pio2+0x350>)
 800d968:	4598      	cmp	r8, r3
 800d96a:	dd37      	ble.n	800d9dc <__ieee754_rem_pio2+0x354>
 800d96c:	ee10 2a10 	vmov	r2, s0
 800d970:	462b      	mov	r3, r5
 800d972:	4620      	mov	r0, r4
 800d974:	4629      	mov	r1, r5
 800d976:	f7f2 fc87 	bl	8000288 <__aeabi_dsub>
 800d97a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d97e:	e9ca 0100 	strd	r0, r1, [sl]
 800d982:	e695      	b.n	800d6b0 <__ieee754_rem_pio2+0x28>
 800d984:	f3af 8000 	nop.w
 800d988:	54400000 	.word	0x54400000
 800d98c:	3ff921fb 	.word	0x3ff921fb
 800d990:	1a626331 	.word	0x1a626331
 800d994:	3dd0b461 	.word	0x3dd0b461
 800d998:	1a600000 	.word	0x1a600000
 800d99c:	3dd0b461 	.word	0x3dd0b461
 800d9a0:	2e037073 	.word	0x2e037073
 800d9a4:	3ba3198a 	.word	0x3ba3198a
 800d9a8:	6dc9c883 	.word	0x6dc9c883
 800d9ac:	3fe45f30 	.word	0x3fe45f30
 800d9b0:	2e000000 	.word	0x2e000000
 800d9b4:	3ba3198a 	.word	0x3ba3198a
 800d9b8:	252049c1 	.word	0x252049c1
 800d9bc:	397b839a 	.word	0x397b839a
 800d9c0:	3fe921fb 	.word	0x3fe921fb
 800d9c4:	4002d97b 	.word	0x4002d97b
 800d9c8:	3ff921fb 	.word	0x3ff921fb
 800d9cc:	413921fb 	.word	0x413921fb
 800d9d0:	3fe00000 	.word	0x3fe00000
 800d9d4:	0800f5a8 	.word	0x0800f5a8
 800d9d8:	7fefffff 	.word	0x7fefffff
 800d9dc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800d9e0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800d9e4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	460d      	mov	r5, r1
 800d9ec:	f7f3 f8b4 	bl	8000b58 <__aeabi_d2iz>
 800d9f0:	f7f2 fd98 	bl	8000524 <__aeabi_i2d>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da00:	f7f2 fc42 	bl	8000288 <__aeabi_dsub>
 800da04:	4b21      	ldr	r3, [pc, #132]	; (800da8c <__ieee754_rem_pio2+0x404>)
 800da06:	2200      	movs	r2, #0
 800da08:	f7f2 fdf6 	bl	80005f8 <__aeabi_dmul>
 800da0c:	460d      	mov	r5, r1
 800da0e:	4604      	mov	r4, r0
 800da10:	f7f3 f8a2 	bl	8000b58 <__aeabi_d2iz>
 800da14:	f7f2 fd86 	bl	8000524 <__aeabi_i2d>
 800da18:	4602      	mov	r2, r0
 800da1a:	460b      	mov	r3, r1
 800da1c:	4620      	mov	r0, r4
 800da1e:	4629      	mov	r1, r5
 800da20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800da24:	f7f2 fc30 	bl	8000288 <__aeabi_dsub>
 800da28:	4b18      	ldr	r3, [pc, #96]	; (800da8c <__ieee754_rem_pio2+0x404>)
 800da2a:	2200      	movs	r2, #0
 800da2c:	f7f2 fde4 	bl	80005f8 <__aeabi_dmul>
 800da30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da34:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800da38:	2703      	movs	r7, #3
 800da3a:	2400      	movs	r4, #0
 800da3c:	2500      	movs	r5, #0
 800da3e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800da42:	4622      	mov	r2, r4
 800da44:	462b      	mov	r3, r5
 800da46:	46b9      	mov	r9, r7
 800da48:	3f01      	subs	r7, #1
 800da4a:	f7f3 f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 800da4e:	2800      	cmp	r0, #0
 800da50:	d1f5      	bne.n	800da3e <__ieee754_rem_pio2+0x3b6>
 800da52:	4b0f      	ldr	r3, [pc, #60]	; (800da90 <__ieee754_rem_pio2+0x408>)
 800da54:	9301      	str	r3, [sp, #4]
 800da56:	2302      	movs	r3, #2
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	4632      	mov	r2, r6
 800da5c:	464b      	mov	r3, r9
 800da5e:	4651      	mov	r1, sl
 800da60:	a804      	add	r0, sp, #16
 800da62:	f000 f9c5 	bl	800ddf0 <__kernel_rem_pio2>
 800da66:	9b02      	ldr	r3, [sp, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	4683      	mov	fp, r0
 800da6c:	f6bf ae4c 	bge.w	800d708 <__ieee754_rem_pio2+0x80>
 800da70:	e9da 2100 	ldrd	r2, r1, [sl]
 800da74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da78:	e9ca 2300 	strd	r2, r3, [sl]
 800da7c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800da80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da84:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800da88:	e73f      	b.n	800d90a <__ieee754_rem_pio2+0x282>
 800da8a:	bf00      	nop
 800da8c:	41700000 	.word	0x41700000
 800da90:	0800f628 	.word	0x0800f628
 800da94:	00000000 	.word	0x00000000

0800da98 <atan>:
 800da98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da9c:	ec55 4b10 	vmov	r4, r5, d0
 800daa0:	4bc3      	ldr	r3, [pc, #780]	; (800ddb0 <atan+0x318>)
 800daa2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800daa6:	429e      	cmp	r6, r3
 800daa8:	46ab      	mov	fp, r5
 800daaa:	dd18      	ble.n	800dade <atan+0x46>
 800daac:	4bc1      	ldr	r3, [pc, #772]	; (800ddb4 <atan+0x31c>)
 800daae:	429e      	cmp	r6, r3
 800dab0:	dc01      	bgt.n	800dab6 <atan+0x1e>
 800dab2:	d109      	bne.n	800dac8 <atan+0x30>
 800dab4:	b144      	cbz	r4, 800dac8 <atan+0x30>
 800dab6:	4622      	mov	r2, r4
 800dab8:	462b      	mov	r3, r5
 800daba:	4620      	mov	r0, r4
 800dabc:	4629      	mov	r1, r5
 800dabe:	f7f2 fbe5 	bl	800028c <__adddf3>
 800dac2:	4604      	mov	r4, r0
 800dac4:	460d      	mov	r5, r1
 800dac6:	e006      	b.n	800dad6 <atan+0x3e>
 800dac8:	f1bb 0f00 	cmp.w	fp, #0
 800dacc:	f300 8131 	bgt.w	800dd32 <atan+0x29a>
 800dad0:	a59b      	add	r5, pc, #620	; (adr r5, 800dd40 <atan+0x2a8>)
 800dad2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dad6:	ec45 4b10 	vmov	d0, r4, r5
 800dada:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dade:	4bb6      	ldr	r3, [pc, #728]	; (800ddb8 <atan+0x320>)
 800dae0:	429e      	cmp	r6, r3
 800dae2:	dc14      	bgt.n	800db0e <atan+0x76>
 800dae4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800dae8:	429e      	cmp	r6, r3
 800daea:	dc0d      	bgt.n	800db08 <atan+0x70>
 800daec:	a396      	add	r3, pc, #600	; (adr r3, 800dd48 <atan+0x2b0>)
 800daee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf2:	ee10 0a10 	vmov	r0, s0
 800daf6:	4629      	mov	r1, r5
 800daf8:	f7f2 fbc8 	bl	800028c <__adddf3>
 800dafc:	4baf      	ldr	r3, [pc, #700]	; (800ddbc <atan+0x324>)
 800dafe:	2200      	movs	r2, #0
 800db00:	f7f3 f80a 	bl	8000b18 <__aeabi_dcmpgt>
 800db04:	2800      	cmp	r0, #0
 800db06:	d1e6      	bne.n	800dad6 <atan+0x3e>
 800db08:	f04f 3aff 	mov.w	sl, #4294967295
 800db0c:	e02b      	b.n	800db66 <atan+0xce>
 800db0e:	f000 f963 	bl	800ddd8 <fabs>
 800db12:	4bab      	ldr	r3, [pc, #684]	; (800ddc0 <atan+0x328>)
 800db14:	429e      	cmp	r6, r3
 800db16:	ec55 4b10 	vmov	r4, r5, d0
 800db1a:	f300 80bf 	bgt.w	800dc9c <atan+0x204>
 800db1e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800db22:	429e      	cmp	r6, r3
 800db24:	f300 80a0 	bgt.w	800dc68 <atan+0x1d0>
 800db28:	ee10 2a10 	vmov	r2, s0
 800db2c:	ee10 0a10 	vmov	r0, s0
 800db30:	462b      	mov	r3, r5
 800db32:	4629      	mov	r1, r5
 800db34:	f7f2 fbaa 	bl	800028c <__adddf3>
 800db38:	4ba0      	ldr	r3, [pc, #640]	; (800ddbc <atan+0x324>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	f7f2 fba4 	bl	8000288 <__aeabi_dsub>
 800db40:	2200      	movs	r2, #0
 800db42:	4606      	mov	r6, r0
 800db44:	460f      	mov	r7, r1
 800db46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db4a:	4620      	mov	r0, r4
 800db4c:	4629      	mov	r1, r5
 800db4e:	f7f2 fb9d 	bl	800028c <__adddf3>
 800db52:	4602      	mov	r2, r0
 800db54:	460b      	mov	r3, r1
 800db56:	4630      	mov	r0, r6
 800db58:	4639      	mov	r1, r7
 800db5a:	f7f2 fe77 	bl	800084c <__aeabi_ddiv>
 800db5e:	f04f 0a00 	mov.w	sl, #0
 800db62:	4604      	mov	r4, r0
 800db64:	460d      	mov	r5, r1
 800db66:	4622      	mov	r2, r4
 800db68:	462b      	mov	r3, r5
 800db6a:	4620      	mov	r0, r4
 800db6c:	4629      	mov	r1, r5
 800db6e:	f7f2 fd43 	bl	80005f8 <__aeabi_dmul>
 800db72:	4602      	mov	r2, r0
 800db74:	460b      	mov	r3, r1
 800db76:	4680      	mov	r8, r0
 800db78:	4689      	mov	r9, r1
 800db7a:	f7f2 fd3d 	bl	80005f8 <__aeabi_dmul>
 800db7e:	a374      	add	r3, pc, #464	; (adr r3, 800dd50 <atan+0x2b8>)
 800db80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db84:	4606      	mov	r6, r0
 800db86:	460f      	mov	r7, r1
 800db88:	f7f2 fd36 	bl	80005f8 <__aeabi_dmul>
 800db8c:	a372      	add	r3, pc, #456	; (adr r3, 800dd58 <atan+0x2c0>)
 800db8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db92:	f7f2 fb7b 	bl	800028c <__adddf3>
 800db96:	4632      	mov	r2, r6
 800db98:	463b      	mov	r3, r7
 800db9a:	f7f2 fd2d 	bl	80005f8 <__aeabi_dmul>
 800db9e:	a370      	add	r3, pc, #448	; (adr r3, 800dd60 <atan+0x2c8>)
 800dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba4:	f7f2 fb72 	bl	800028c <__adddf3>
 800dba8:	4632      	mov	r2, r6
 800dbaa:	463b      	mov	r3, r7
 800dbac:	f7f2 fd24 	bl	80005f8 <__aeabi_dmul>
 800dbb0:	a36d      	add	r3, pc, #436	; (adr r3, 800dd68 <atan+0x2d0>)
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7f2 fb69 	bl	800028c <__adddf3>
 800dbba:	4632      	mov	r2, r6
 800dbbc:	463b      	mov	r3, r7
 800dbbe:	f7f2 fd1b 	bl	80005f8 <__aeabi_dmul>
 800dbc2:	a36b      	add	r3, pc, #428	; (adr r3, 800dd70 <atan+0x2d8>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	f7f2 fb60 	bl	800028c <__adddf3>
 800dbcc:	4632      	mov	r2, r6
 800dbce:	463b      	mov	r3, r7
 800dbd0:	f7f2 fd12 	bl	80005f8 <__aeabi_dmul>
 800dbd4:	a368      	add	r3, pc, #416	; (adr r3, 800dd78 <atan+0x2e0>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	f7f2 fb57 	bl	800028c <__adddf3>
 800dbde:	4642      	mov	r2, r8
 800dbe0:	464b      	mov	r3, r9
 800dbe2:	f7f2 fd09 	bl	80005f8 <__aeabi_dmul>
 800dbe6:	a366      	add	r3, pc, #408	; (adr r3, 800dd80 <atan+0x2e8>)
 800dbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbec:	4680      	mov	r8, r0
 800dbee:	4689      	mov	r9, r1
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	f7f2 fd00 	bl	80005f8 <__aeabi_dmul>
 800dbf8:	a363      	add	r3, pc, #396	; (adr r3, 800dd88 <atan+0x2f0>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f7f2 fb43 	bl	8000288 <__aeabi_dsub>
 800dc02:	4632      	mov	r2, r6
 800dc04:	463b      	mov	r3, r7
 800dc06:	f7f2 fcf7 	bl	80005f8 <__aeabi_dmul>
 800dc0a:	a361      	add	r3, pc, #388	; (adr r3, 800dd90 <atan+0x2f8>)
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	f7f2 fb3a 	bl	8000288 <__aeabi_dsub>
 800dc14:	4632      	mov	r2, r6
 800dc16:	463b      	mov	r3, r7
 800dc18:	f7f2 fcee 	bl	80005f8 <__aeabi_dmul>
 800dc1c:	a35e      	add	r3, pc, #376	; (adr r3, 800dd98 <atan+0x300>)
 800dc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc22:	f7f2 fb31 	bl	8000288 <__aeabi_dsub>
 800dc26:	4632      	mov	r2, r6
 800dc28:	463b      	mov	r3, r7
 800dc2a:	f7f2 fce5 	bl	80005f8 <__aeabi_dmul>
 800dc2e:	a35c      	add	r3, pc, #368	; (adr r3, 800dda0 <atan+0x308>)
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	f7f2 fb28 	bl	8000288 <__aeabi_dsub>
 800dc38:	4632      	mov	r2, r6
 800dc3a:	463b      	mov	r3, r7
 800dc3c:	f7f2 fcdc 	bl	80005f8 <__aeabi_dmul>
 800dc40:	4602      	mov	r2, r0
 800dc42:	460b      	mov	r3, r1
 800dc44:	4640      	mov	r0, r8
 800dc46:	4649      	mov	r1, r9
 800dc48:	f7f2 fb20 	bl	800028c <__adddf3>
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	462b      	mov	r3, r5
 800dc50:	f7f2 fcd2 	bl	80005f8 <__aeabi_dmul>
 800dc54:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dc58:	4602      	mov	r2, r0
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	d14b      	bne.n	800dcf6 <atan+0x25e>
 800dc5e:	4620      	mov	r0, r4
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7f2 fb11 	bl	8000288 <__aeabi_dsub>
 800dc66:	e72c      	b.n	800dac2 <atan+0x2a>
 800dc68:	ee10 0a10 	vmov	r0, s0
 800dc6c:	4b53      	ldr	r3, [pc, #332]	; (800ddbc <atan+0x324>)
 800dc6e:	2200      	movs	r2, #0
 800dc70:	4629      	mov	r1, r5
 800dc72:	f7f2 fb09 	bl	8000288 <__aeabi_dsub>
 800dc76:	4b51      	ldr	r3, [pc, #324]	; (800ddbc <atan+0x324>)
 800dc78:	4606      	mov	r6, r0
 800dc7a:	460f      	mov	r7, r1
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	4620      	mov	r0, r4
 800dc80:	4629      	mov	r1, r5
 800dc82:	f7f2 fb03 	bl	800028c <__adddf3>
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	4639      	mov	r1, r7
 800dc8e:	f7f2 fddd 	bl	800084c <__aeabi_ddiv>
 800dc92:	f04f 0a01 	mov.w	sl, #1
 800dc96:	4604      	mov	r4, r0
 800dc98:	460d      	mov	r5, r1
 800dc9a:	e764      	b.n	800db66 <atan+0xce>
 800dc9c:	4b49      	ldr	r3, [pc, #292]	; (800ddc4 <atan+0x32c>)
 800dc9e:	429e      	cmp	r6, r3
 800dca0:	da1d      	bge.n	800dcde <atan+0x246>
 800dca2:	ee10 0a10 	vmov	r0, s0
 800dca6:	4b48      	ldr	r3, [pc, #288]	; (800ddc8 <atan+0x330>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	4629      	mov	r1, r5
 800dcac:	f7f2 faec 	bl	8000288 <__aeabi_dsub>
 800dcb0:	4b45      	ldr	r3, [pc, #276]	; (800ddc8 <atan+0x330>)
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	460f      	mov	r7, r1
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	4620      	mov	r0, r4
 800dcba:	4629      	mov	r1, r5
 800dcbc:	f7f2 fc9c 	bl	80005f8 <__aeabi_dmul>
 800dcc0:	4b3e      	ldr	r3, [pc, #248]	; (800ddbc <atan+0x324>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f7f2 fae2 	bl	800028c <__adddf3>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	4630      	mov	r0, r6
 800dcce:	4639      	mov	r1, r7
 800dcd0:	f7f2 fdbc 	bl	800084c <__aeabi_ddiv>
 800dcd4:	f04f 0a02 	mov.w	sl, #2
 800dcd8:	4604      	mov	r4, r0
 800dcda:	460d      	mov	r5, r1
 800dcdc:	e743      	b.n	800db66 <atan+0xce>
 800dcde:	462b      	mov	r3, r5
 800dce0:	ee10 2a10 	vmov	r2, s0
 800dce4:	4939      	ldr	r1, [pc, #228]	; (800ddcc <atan+0x334>)
 800dce6:	2000      	movs	r0, #0
 800dce8:	f7f2 fdb0 	bl	800084c <__aeabi_ddiv>
 800dcec:	f04f 0a03 	mov.w	sl, #3
 800dcf0:	4604      	mov	r4, r0
 800dcf2:	460d      	mov	r5, r1
 800dcf4:	e737      	b.n	800db66 <atan+0xce>
 800dcf6:	4b36      	ldr	r3, [pc, #216]	; (800ddd0 <atan+0x338>)
 800dcf8:	4e36      	ldr	r6, [pc, #216]	; (800ddd4 <atan+0x33c>)
 800dcfa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	f7f2 fac1 	bl	8000288 <__aeabi_dsub>
 800dd06:	4622      	mov	r2, r4
 800dd08:	462b      	mov	r3, r5
 800dd0a:	f7f2 fabd 	bl	8000288 <__aeabi_dsub>
 800dd0e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dd12:	4602      	mov	r2, r0
 800dd14:	460b      	mov	r3, r1
 800dd16:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dd1a:	f7f2 fab5 	bl	8000288 <__aeabi_dsub>
 800dd1e:	f1bb 0f00 	cmp.w	fp, #0
 800dd22:	4604      	mov	r4, r0
 800dd24:	460d      	mov	r5, r1
 800dd26:	f6bf aed6 	bge.w	800dad6 <atan+0x3e>
 800dd2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd2e:	461d      	mov	r5, r3
 800dd30:	e6d1      	b.n	800dad6 <atan+0x3e>
 800dd32:	a51d      	add	r5, pc, #116	; (adr r5, 800dda8 <atan+0x310>)
 800dd34:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dd38:	e6cd      	b.n	800dad6 <atan+0x3e>
 800dd3a:	bf00      	nop
 800dd3c:	f3af 8000 	nop.w
 800dd40:	54442d18 	.word	0x54442d18
 800dd44:	bff921fb 	.word	0xbff921fb
 800dd48:	8800759c 	.word	0x8800759c
 800dd4c:	7e37e43c 	.word	0x7e37e43c
 800dd50:	e322da11 	.word	0xe322da11
 800dd54:	3f90ad3a 	.word	0x3f90ad3a
 800dd58:	24760deb 	.word	0x24760deb
 800dd5c:	3fa97b4b 	.word	0x3fa97b4b
 800dd60:	a0d03d51 	.word	0xa0d03d51
 800dd64:	3fb10d66 	.word	0x3fb10d66
 800dd68:	c54c206e 	.word	0xc54c206e
 800dd6c:	3fb745cd 	.word	0x3fb745cd
 800dd70:	920083ff 	.word	0x920083ff
 800dd74:	3fc24924 	.word	0x3fc24924
 800dd78:	5555550d 	.word	0x5555550d
 800dd7c:	3fd55555 	.word	0x3fd55555
 800dd80:	2c6a6c2f 	.word	0x2c6a6c2f
 800dd84:	bfa2b444 	.word	0xbfa2b444
 800dd88:	52defd9a 	.word	0x52defd9a
 800dd8c:	3fadde2d 	.word	0x3fadde2d
 800dd90:	af749a6d 	.word	0xaf749a6d
 800dd94:	3fb3b0f2 	.word	0x3fb3b0f2
 800dd98:	fe231671 	.word	0xfe231671
 800dd9c:	3fbc71c6 	.word	0x3fbc71c6
 800dda0:	9998ebc4 	.word	0x9998ebc4
 800dda4:	3fc99999 	.word	0x3fc99999
 800dda8:	54442d18 	.word	0x54442d18
 800ddac:	3ff921fb 	.word	0x3ff921fb
 800ddb0:	440fffff 	.word	0x440fffff
 800ddb4:	7ff00000 	.word	0x7ff00000
 800ddb8:	3fdbffff 	.word	0x3fdbffff
 800ddbc:	3ff00000 	.word	0x3ff00000
 800ddc0:	3ff2ffff 	.word	0x3ff2ffff
 800ddc4:	40038000 	.word	0x40038000
 800ddc8:	3ff80000 	.word	0x3ff80000
 800ddcc:	bff00000 	.word	0xbff00000
 800ddd0:	0800f750 	.word	0x0800f750
 800ddd4:	0800f730 	.word	0x0800f730

0800ddd8 <fabs>:
 800ddd8:	ec51 0b10 	vmov	r0, r1, d0
 800dddc:	ee10 2a10 	vmov	r2, s0
 800dde0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dde4:	ec43 2b10 	vmov	d0, r2, r3
 800dde8:	4770      	bx	lr
 800ddea:	0000      	movs	r0, r0
 800ddec:	0000      	movs	r0, r0
	...

0800ddf0 <__kernel_rem_pio2>:
 800ddf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf4:	ed2d 8b02 	vpush	{d8}
 800ddf8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ddfc:	f112 0f14 	cmn.w	r2, #20
 800de00:	9306      	str	r3, [sp, #24]
 800de02:	9104      	str	r1, [sp, #16]
 800de04:	4bc2      	ldr	r3, [pc, #776]	; (800e110 <__kernel_rem_pio2+0x320>)
 800de06:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800de08:	9009      	str	r0, [sp, #36]	; 0x24
 800de0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de0e:	9300      	str	r3, [sp, #0]
 800de10:	9b06      	ldr	r3, [sp, #24]
 800de12:	f103 33ff 	add.w	r3, r3, #4294967295
 800de16:	bfa8      	it	ge
 800de18:	1ed4      	subge	r4, r2, #3
 800de1a:	9305      	str	r3, [sp, #20]
 800de1c:	bfb2      	itee	lt
 800de1e:	2400      	movlt	r4, #0
 800de20:	2318      	movge	r3, #24
 800de22:	fb94 f4f3 	sdivge	r4, r4, r3
 800de26:	f06f 0317 	mvn.w	r3, #23
 800de2a:	fb04 3303 	mla	r3, r4, r3, r3
 800de2e:	eb03 0a02 	add.w	sl, r3, r2
 800de32:	9b00      	ldr	r3, [sp, #0]
 800de34:	9a05      	ldr	r2, [sp, #20]
 800de36:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e100 <__kernel_rem_pio2+0x310>
 800de3a:	eb03 0802 	add.w	r8, r3, r2
 800de3e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800de40:	1aa7      	subs	r7, r4, r2
 800de42:	ae20      	add	r6, sp, #128	; 0x80
 800de44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800de48:	2500      	movs	r5, #0
 800de4a:	4545      	cmp	r5, r8
 800de4c:	dd13      	ble.n	800de76 <__kernel_rem_pio2+0x86>
 800de4e:	9b06      	ldr	r3, [sp, #24]
 800de50:	aa20      	add	r2, sp, #128	; 0x80
 800de52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800de56:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800de5a:	f04f 0800 	mov.w	r8, #0
 800de5e:	9b00      	ldr	r3, [sp, #0]
 800de60:	4598      	cmp	r8, r3
 800de62:	dc31      	bgt.n	800dec8 <__kernel_rem_pio2+0xd8>
 800de64:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e100 <__kernel_rem_pio2+0x310>
 800de68:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800de6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de70:	462f      	mov	r7, r5
 800de72:	2600      	movs	r6, #0
 800de74:	e01b      	b.n	800deae <__kernel_rem_pio2+0xbe>
 800de76:	42ef      	cmn	r7, r5
 800de78:	d407      	bmi.n	800de8a <__kernel_rem_pio2+0x9a>
 800de7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800de7e:	f7f2 fb51 	bl	8000524 <__aeabi_i2d>
 800de82:	e8e6 0102 	strd	r0, r1, [r6], #8
 800de86:	3501      	adds	r5, #1
 800de88:	e7df      	b.n	800de4a <__kernel_rem_pio2+0x5a>
 800de8a:	ec51 0b18 	vmov	r0, r1, d8
 800de8e:	e7f8      	b.n	800de82 <__kernel_rem_pio2+0x92>
 800de90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800de98:	f7f2 fbae 	bl	80005f8 <__aeabi_dmul>
 800de9c:	4602      	mov	r2, r0
 800de9e:	460b      	mov	r3, r1
 800dea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dea4:	f7f2 f9f2 	bl	800028c <__adddf3>
 800dea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800deac:	3601      	adds	r6, #1
 800deae:	9b05      	ldr	r3, [sp, #20]
 800deb0:	429e      	cmp	r6, r3
 800deb2:	f1a7 0708 	sub.w	r7, r7, #8
 800deb6:	ddeb      	ble.n	800de90 <__kernel_rem_pio2+0xa0>
 800deb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800debc:	f108 0801 	add.w	r8, r8, #1
 800dec0:	ecab 7b02 	vstmia	fp!, {d7}
 800dec4:	3508      	adds	r5, #8
 800dec6:	e7ca      	b.n	800de5e <__kernel_rem_pio2+0x6e>
 800dec8:	9b00      	ldr	r3, [sp, #0]
 800deca:	aa0c      	add	r2, sp, #48	; 0x30
 800decc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ded0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ded2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ded4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ded8:	9c00      	ldr	r4, [sp, #0]
 800deda:	930a      	str	r3, [sp, #40]	; 0x28
 800dedc:	00e3      	lsls	r3, r4, #3
 800dede:	9308      	str	r3, [sp, #32]
 800dee0:	ab98      	add	r3, sp, #608	; 0x260
 800dee2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dee6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800deea:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800deee:	ab70      	add	r3, sp, #448	; 0x1c0
 800def0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800def4:	46c3      	mov	fp, r8
 800def6:	46a1      	mov	r9, r4
 800def8:	f1b9 0f00 	cmp.w	r9, #0
 800defc:	f1a5 0508 	sub.w	r5, r5, #8
 800df00:	dc77      	bgt.n	800dff2 <__kernel_rem_pio2+0x202>
 800df02:	ec47 6b10 	vmov	d0, r6, r7
 800df06:	4650      	mov	r0, sl
 800df08:	f000 fac2 	bl	800e490 <scalbn>
 800df0c:	ec57 6b10 	vmov	r6, r7, d0
 800df10:	2200      	movs	r2, #0
 800df12:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800df16:	ee10 0a10 	vmov	r0, s0
 800df1a:	4639      	mov	r1, r7
 800df1c:	f7f2 fb6c 	bl	80005f8 <__aeabi_dmul>
 800df20:	ec41 0b10 	vmov	d0, r0, r1
 800df24:	f000 fb34 	bl	800e590 <floor>
 800df28:	4b7a      	ldr	r3, [pc, #488]	; (800e114 <__kernel_rem_pio2+0x324>)
 800df2a:	ec51 0b10 	vmov	r0, r1, d0
 800df2e:	2200      	movs	r2, #0
 800df30:	f7f2 fb62 	bl	80005f8 <__aeabi_dmul>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4630      	mov	r0, r6
 800df3a:	4639      	mov	r1, r7
 800df3c:	f7f2 f9a4 	bl	8000288 <__aeabi_dsub>
 800df40:	460f      	mov	r7, r1
 800df42:	4606      	mov	r6, r0
 800df44:	f7f2 fe08 	bl	8000b58 <__aeabi_d2iz>
 800df48:	9002      	str	r0, [sp, #8]
 800df4a:	f7f2 faeb 	bl	8000524 <__aeabi_i2d>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	4630      	mov	r0, r6
 800df54:	4639      	mov	r1, r7
 800df56:	f7f2 f997 	bl	8000288 <__aeabi_dsub>
 800df5a:	f1ba 0f00 	cmp.w	sl, #0
 800df5e:	4606      	mov	r6, r0
 800df60:	460f      	mov	r7, r1
 800df62:	dd6d      	ble.n	800e040 <__kernel_rem_pio2+0x250>
 800df64:	1e61      	subs	r1, r4, #1
 800df66:	ab0c      	add	r3, sp, #48	; 0x30
 800df68:	9d02      	ldr	r5, [sp, #8]
 800df6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df6e:	f1ca 0018 	rsb	r0, sl, #24
 800df72:	fa43 f200 	asr.w	r2, r3, r0
 800df76:	4415      	add	r5, r2
 800df78:	4082      	lsls	r2, r0
 800df7a:	1a9b      	subs	r3, r3, r2
 800df7c:	aa0c      	add	r2, sp, #48	; 0x30
 800df7e:	9502      	str	r5, [sp, #8]
 800df80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800df84:	f1ca 0217 	rsb	r2, sl, #23
 800df88:	fa43 fb02 	asr.w	fp, r3, r2
 800df8c:	f1bb 0f00 	cmp.w	fp, #0
 800df90:	dd65      	ble.n	800e05e <__kernel_rem_pio2+0x26e>
 800df92:	9b02      	ldr	r3, [sp, #8]
 800df94:	2200      	movs	r2, #0
 800df96:	3301      	adds	r3, #1
 800df98:	9302      	str	r3, [sp, #8]
 800df9a:	4615      	mov	r5, r2
 800df9c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dfa0:	4294      	cmp	r4, r2
 800dfa2:	f300 809f 	bgt.w	800e0e4 <__kernel_rem_pio2+0x2f4>
 800dfa6:	f1ba 0f00 	cmp.w	sl, #0
 800dfaa:	dd07      	ble.n	800dfbc <__kernel_rem_pio2+0x1cc>
 800dfac:	f1ba 0f01 	cmp.w	sl, #1
 800dfb0:	f000 80c1 	beq.w	800e136 <__kernel_rem_pio2+0x346>
 800dfb4:	f1ba 0f02 	cmp.w	sl, #2
 800dfb8:	f000 80c7 	beq.w	800e14a <__kernel_rem_pio2+0x35a>
 800dfbc:	f1bb 0f02 	cmp.w	fp, #2
 800dfc0:	d14d      	bne.n	800e05e <__kernel_rem_pio2+0x26e>
 800dfc2:	4632      	mov	r2, r6
 800dfc4:	463b      	mov	r3, r7
 800dfc6:	4954      	ldr	r1, [pc, #336]	; (800e118 <__kernel_rem_pio2+0x328>)
 800dfc8:	2000      	movs	r0, #0
 800dfca:	f7f2 f95d 	bl	8000288 <__aeabi_dsub>
 800dfce:	4606      	mov	r6, r0
 800dfd0:	460f      	mov	r7, r1
 800dfd2:	2d00      	cmp	r5, #0
 800dfd4:	d043      	beq.n	800e05e <__kernel_rem_pio2+0x26e>
 800dfd6:	4650      	mov	r0, sl
 800dfd8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e108 <__kernel_rem_pio2+0x318>
 800dfdc:	f000 fa58 	bl	800e490 <scalbn>
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	4639      	mov	r1, r7
 800dfe4:	ec53 2b10 	vmov	r2, r3, d0
 800dfe8:	f7f2 f94e 	bl	8000288 <__aeabi_dsub>
 800dfec:	4606      	mov	r6, r0
 800dfee:	460f      	mov	r7, r1
 800dff0:	e035      	b.n	800e05e <__kernel_rem_pio2+0x26e>
 800dff2:	4b4a      	ldr	r3, [pc, #296]	; (800e11c <__kernel_rem_pio2+0x32c>)
 800dff4:	2200      	movs	r2, #0
 800dff6:	4630      	mov	r0, r6
 800dff8:	4639      	mov	r1, r7
 800dffa:	f7f2 fafd 	bl	80005f8 <__aeabi_dmul>
 800dffe:	f7f2 fdab 	bl	8000b58 <__aeabi_d2iz>
 800e002:	f7f2 fa8f 	bl	8000524 <__aeabi_i2d>
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	ec43 2b18 	vmov	d8, r2, r3
 800e00e:	4b44      	ldr	r3, [pc, #272]	; (800e120 <__kernel_rem_pio2+0x330>)
 800e010:	2200      	movs	r2, #0
 800e012:	f7f2 faf1 	bl	80005f8 <__aeabi_dmul>
 800e016:	4602      	mov	r2, r0
 800e018:	460b      	mov	r3, r1
 800e01a:	4630      	mov	r0, r6
 800e01c:	4639      	mov	r1, r7
 800e01e:	f7f2 f933 	bl	8000288 <__aeabi_dsub>
 800e022:	f7f2 fd99 	bl	8000b58 <__aeabi_d2iz>
 800e026:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e02a:	f84b 0b04 	str.w	r0, [fp], #4
 800e02e:	ec51 0b18 	vmov	r0, r1, d8
 800e032:	f7f2 f92b 	bl	800028c <__adddf3>
 800e036:	f109 39ff 	add.w	r9, r9, #4294967295
 800e03a:	4606      	mov	r6, r0
 800e03c:	460f      	mov	r7, r1
 800e03e:	e75b      	b.n	800def8 <__kernel_rem_pio2+0x108>
 800e040:	d106      	bne.n	800e050 <__kernel_rem_pio2+0x260>
 800e042:	1e63      	subs	r3, r4, #1
 800e044:	aa0c      	add	r2, sp, #48	; 0x30
 800e046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e04a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e04e:	e79d      	b.n	800df8c <__kernel_rem_pio2+0x19c>
 800e050:	4b34      	ldr	r3, [pc, #208]	; (800e124 <__kernel_rem_pio2+0x334>)
 800e052:	2200      	movs	r2, #0
 800e054:	f7f2 fd56 	bl	8000b04 <__aeabi_dcmpge>
 800e058:	2800      	cmp	r0, #0
 800e05a:	d140      	bne.n	800e0de <__kernel_rem_pio2+0x2ee>
 800e05c:	4683      	mov	fp, r0
 800e05e:	2200      	movs	r2, #0
 800e060:	2300      	movs	r3, #0
 800e062:	4630      	mov	r0, r6
 800e064:	4639      	mov	r1, r7
 800e066:	f7f2 fd2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	f000 80c1 	beq.w	800e1f2 <__kernel_rem_pio2+0x402>
 800e070:	1e65      	subs	r5, r4, #1
 800e072:	462b      	mov	r3, r5
 800e074:	2200      	movs	r2, #0
 800e076:	9900      	ldr	r1, [sp, #0]
 800e078:	428b      	cmp	r3, r1
 800e07a:	da6d      	bge.n	800e158 <__kernel_rem_pio2+0x368>
 800e07c:	2a00      	cmp	r2, #0
 800e07e:	f000 808a 	beq.w	800e196 <__kernel_rem_pio2+0x3a6>
 800e082:	ab0c      	add	r3, sp, #48	; 0x30
 800e084:	f1aa 0a18 	sub.w	sl, sl, #24
 800e088:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f000 80ae 	beq.w	800e1ee <__kernel_rem_pio2+0x3fe>
 800e092:	4650      	mov	r0, sl
 800e094:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e108 <__kernel_rem_pio2+0x318>
 800e098:	f000 f9fa 	bl	800e490 <scalbn>
 800e09c:	1c6b      	adds	r3, r5, #1
 800e09e:	00da      	lsls	r2, r3, #3
 800e0a0:	9205      	str	r2, [sp, #20]
 800e0a2:	ec57 6b10 	vmov	r6, r7, d0
 800e0a6:	aa70      	add	r2, sp, #448	; 0x1c0
 800e0a8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e11c <__kernel_rem_pio2+0x32c>
 800e0ac:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e0b0:	462c      	mov	r4, r5
 800e0b2:	f04f 0800 	mov.w	r8, #0
 800e0b6:	2c00      	cmp	r4, #0
 800e0b8:	f280 80d4 	bge.w	800e264 <__kernel_rem_pio2+0x474>
 800e0bc:	462c      	mov	r4, r5
 800e0be:	2c00      	cmp	r4, #0
 800e0c0:	f2c0 8102 	blt.w	800e2c8 <__kernel_rem_pio2+0x4d8>
 800e0c4:	4b18      	ldr	r3, [pc, #96]	; (800e128 <__kernel_rem_pio2+0x338>)
 800e0c6:	461e      	mov	r6, r3
 800e0c8:	ab70      	add	r3, sp, #448	; 0x1c0
 800e0ca:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e0ce:	1b2b      	subs	r3, r5, r4
 800e0d0:	f04f 0900 	mov.w	r9, #0
 800e0d4:	f04f 0a00 	mov.w	sl, #0
 800e0d8:	2700      	movs	r7, #0
 800e0da:	9306      	str	r3, [sp, #24]
 800e0dc:	e0e6      	b.n	800e2ac <__kernel_rem_pio2+0x4bc>
 800e0de:	f04f 0b02 	mov.w	fp, #2
 800e0e2:	e756      	b.n	800df92 <__kernel_rem_pio2+0x1a2>
 800e0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800e0e8:	bb05      	cbnz	r5, 800e12c <__kernel_rem_pio2+0x33c>
 800e0ea:	b123      	cbz	r3, 800e0f6 <__kernel_rem_pio2+0x306>
 800e0ec:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e0f0:	f8c8 3000 	str.w	r3, [r8]
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	3201      	adds	r2, #1
 800e0f8:	f108 0804 	add.w	r8, r8, #4
 800e0fc:	461d      	mov	r5, r3
 800e0fe:	e74f      	b.n	800dfa0 <__kernel_rem_pio2+0x1b0>
	...
 800e10c:	3ff00000 	.word	0x3ff00000
 800e110:	0800f7b0 	.word	0x0800f7b0
 800e114:	40200000 	.word	0x40200000
 800e118:	3ff00000 	.word	0x3ff00000
 800e11c:	3e700000 	.word	0x3e700000
 800e120:	41700000 	.word	0x41700000
 800e124:	3fe00000 	.word	0x3fe00000
 800e128:	0800f770 	.word	0x0800f770
 800e12c:	1acb      	subs	r3, r1, r3
 800e12e:	f8c8 3000 	str.w	r3, [r8]
 800e132:	462b      	mov	r3, r5
 800e134:	e7df      	b.n	800e0f6 <__kernel_rem_pio2+0x306>
 800e136:	1e62      	subs	r2, r4, #1
 800e138:	ab0c      	add	r3, sp, #48	; 0x30
 800e13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e13e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e142:	a90c      	add	r1, sp, #48	; 0x30
 800e144:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e148:	e738      	b.n	800dfbc <__kernel_rem_pio2+0x1cc>
 800e14a:	1e62      	subs	r2, r4, #1
 800e14c:	ab0c      	add	r3, sp, #48	; 0x30
 800e14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e152:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e156:	e7f4      	b.n	800e142 <__kernel_rem_pio2+0x352>
 800e158:	a90c      	add	r1, sp, #48	; 0x30
 800e15a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e15e:	3b01      	subs	r3, #1
 800e160:	430a      	orrs	r2, r1
 800e162:	e788      	b.n	800e076 <__kernel_rem_pio2+0x286>
 800e164:	3301      	adds	r3, #1
 800e166:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e16a:	2900      	cmp	r1, #0
 800e16c:	d0fa      	beq.n	800e164 <__kernel_rem_pio2+0x374>
 800e16e:	9a08      	ldr	r2, [sp, #32]
 800e170:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e174:	446a      	add	r2, sp
 800e176:	3a98      	subs	r2, #152	; 0x98
 800e178:	9208      	str	r2, [sp, #32]
 800e17a:	9a06      	ldr	r2, [sp, #24]
 800e17c:	a920      	add	r1, sp, #128	; 0x80
 800e17e:	18a2      	adds	r2, r4, r2
 800e180:	18e3      	adds	r3, r4, r3
 800e182:	f104 0801 	add.w	r8, r4, #1
 800e186:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e18a:	9302      	str	r3, [sp, #8]
 800e18c:	9b02      	ldr	r3, [sp, #8]
 800e18e:	4543      	cmp	r3, r8
 800e190:	da04      	bge.n	800e19c <__kernel_rem_pio2+0x3ac>
 800e192:	461c      	mov	r4, r3
 800e194:	e6a2      	b.n	800dedc <__kernel_rem_pio2+0xec>
 800e196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e198:	2301      	movs	r3, #1
 800e19a:	e7e4      	b.n	800e166 <__kernel_rem_pio2+0x376>
 800e19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e19e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e1a2:	f7f2 f9bf 	bl	8000524 <__aeabi_i2d>
 800e1a6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ac:	46ab      	mov	fp, r5
 800e1ae:	461c      	mov	r4, r3
 800e1b0:	f04f 0900 	mov.w	r9, #0
 800e1b4:	2600      	movs	r6, #0
 800e1b6:	2700      	movs	r7, #0
 800e1b8:	9b05      	ldr	r3, [sp, #20]
 800e1ba:	4599      	cmp	r9, r3
 800e1bc:	dd06      	ble.n	800e1cc <__kernel_rem_pio2+0x3dc>
 800e1be:	9b08      	ldr	r3, [sp, #32]
 800e1c0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e1c4:	f108 0801 	add.w	r8, r8, #1
 800e1c8:	9308      	str	r3, [sp, #32]
 800e1ca:	e7df      	b.n	800e18c <__kernel_rem_pio2+0x39c>
 800e1cc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e1d0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e1d4:	f7f2 fa10 	bl	80005f8 <__aeabi_dmul>
 800e1d8:	4602      	mov	r2, r0
 800e1da:	460b      	mov	r3, r1
 800e1dc:	4630      	mov	r0, r6
 800e1de:	4639      	mov	r1, r7
 800e1e0:	f7f2 f854 	bl	800028c <__adddf3>
 800e1e4:	f109 0901 	add.w	r9, r9, #1
 800e1e8:	4606      	mov	r6, r0
 800e1ea:	460f      	mov	r7, r1
 800e1ec:	e7e4      	b.n	800e1b8 <__kernel_rem_pio2+0x3c8>
 800e1ee:	3d01      	subs	r5, #1
 800e1f0:	e747      	b.n	800e082 <__kernel_rem_pio2+0x292>
 800e1f2:	ec47 6b10 	vmov	d0, r6, r7
 800e1f6:	f1ca 0000 	rsb	r0, sl, #0
 800e1fa:	f000 f949 	bl	800e490 <scalbn>
 800e1fe:	ec57 6b10 	vmov	r6, r7, d0
 800e202:	4ba0      	ldr	r3, [pc, #640]	; (800e484 <__kernel_rem_pio2+0x694>)
 800e204:	ee10 0a10 	vmov	r0, s0
 800e208:	2200      	movs	r2, #0
 800e20a:	4639      	mov	r1, r7
 800e20c:	f7f2 fc7a 	bl	8000b04 <__aeabi_dcmpge>
 800e210:	b1f8      	cbz	r0, 800e252 <__kernel_rem_pio2+0x462>
 800e212:	4b9d      	ldr	r3, [pc, #628]	; (800e488 <__kernel_rem_pio2+0x698>)
 800e214:	2200      	movs	r2, #0
 800e216:	4630      	mov	r0, r6
 800e218:	4639      	mov	r1, r7
 800e21a:	f7f2 f9ed 	bl	80005f8 <__aeabi_dmul>
 800e21e:	f7f2 fc9b 	bl	8000b58 <__aeabi_d2iz>
 800e222:	4680      	mov	r8, r0
 800e224:	f7f2 f97e 	bl	8000524 <__aeabi_i2d>
 800e228:	4b96      	ldr	r3, [pc, #600]	; (800e484 <__kernel_rem_pio2+0x694>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	f7f2 f9e4 	bl	80005f8 <__aeabi_dmul>
 800e230:	460b      	mov	r3, r1
 800e232:	4602      	mov	r2, r0
 800e234:	4639      	mov	r1, r7
 800e236:	4630      	mov	r0, r6
 800e238:	f7f2 f826 	bl	8000288 <__aeabi_dsub>
 800e23c:	f7f2 fc8c 	bl	8000b58 <__aeabi_d2iz>
 800e240:	1c65      	adds	r5, r4, #1
 800e242:	ab0c      	add	r3, sp, #48	; 0x30
 800e244:	f10a 0a18 	add.w	sl, sl, #24
 800e248:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e24c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e250:	e71f      	b.n	800e092 <__kernel_rem_pio2+0x2a2>
 800e252:	4630      	mov	r0, r6
 800e254:	4639      	mov	r1, r7
 800e256:	f7f2 fc7f 	bl	8000b58 <__aeabi_d2iz>
 800e25a:	ab0c      	add	r3, sp, #48	; 0x30
 800e25c:	4625      	mov	r5, r4
 800e25e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e262:	e716      	b.n	800e092 <__kernel_rem_pio2+0x2a2>
 800e264:	ab0c      	add	r3, sp, #48	; 0x30
 800e266:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e26a:	f7f2 f95b 	bl	8000524 <__aeabi_i2d>
 800e26e:	4632      	mov	r2, r6
 800e270:	463b      	mov	r3, r7
 800e272:	f7f2 f9c1 	bl	80005f8 <__aeabi_dmul>
 800e276:	4642      	mov	r2, r8
 800e278:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e27c:	464b      	mov	r3, r9
 800e27e:	4630      	mov	r0, r6
 800e280:	4639      	mov	r1, r7
 800e282:	f7f2 f9b9 	bl	80005f8 <__aeabi_dmul>
 800e286:	3c01      	subs	r4, #1
 800e288:	4606      	mov	r6, r0
 800e28a:	460f      	mov	r7, r1
 800e28c:	e713      	b.n	800e0b6 <__kernel_rem_pio2+0x2c6>
 800e28e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e292:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e296:	f7f2 f9af 	bl	80005f8 <__aeabi_dmul>
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	4648      	mov	r0, r9
 800e2a0:	4651      	mov	r1, sl
 800e2a2:	f7f1 fff3 	bl	800028c <__adddf3>
 800e2a6:	3701      	adds	r7, #1
 800e2a8:	4681      	mov	r9, r0
 800e2aa:	468a      	mov	sl, r1
 800e2ac:	9b00      	ldr	r3, [sp, #0]
 800e2ae:	429f      	cmp	r7, r3
 800e2b0:	dc02      	bgt.n	800e2b8 <__kernel_rem_pio2+0x4c8>
 800e2b2:	9b06      	ldr	r3, [sp, #24]
 800e2b4:	429f      	cmp	r7, r3
 800e2b6:	ddea      	ble.n	800e28e <__kernel_rem_pio2+0x49e>
 800e2b8:	9a06      	ldr	r2, [sp, #24]
 800e2ba:	ab48      	add	r3, sp, #288	; 0x120
 800e2bc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e2c0:	e9c6 9a00 	strd	r9, sl, [r6]
 800e2c4:	3c01      	subs	r4, #1
 800e2c6:	e6fa      	b.n	800e0be <__kernel_rem_pio2+0x2ce>
 800e2c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e2ca:	2b02      	cmp	r3, #2
 800e2cc:	dc0b      	bgt.n	800e2e6 <__kernel_rem_pio2+0x4f6>
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	dc39      	bgt.n	800e346 <__kernel_rem_pio2+0x556>
 800e2d2:	d05d      	beq.n	800e390 <__kernel_rem_pio2+0x5a0>
 800e2d4:	9b02      	ldr	r3, [sp, #8]
 800e2d6:	f003 0007 	and.w	r0, r3, #7
 800e2da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e2de:	ecbd 8b02 	vpop	{d8}
 800e2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e2e8:	2b03      	cmp	r3, #3
 800e2ea:	d1f3      	bne.n	800e2d4 <__kernel_rem_pio2+0x4e4>
 800e2ec:	9b05      	ldr	r3, [sp, #20]
 800e2ee:	9500      	str	r5, [sp, #0]
 800e2f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e2f4:	eb0d 0403 	add.w	r4, sp, r3
 800e2f8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e2fc:	46a2      	mov	sl, r4
 800e2fe:	9b00      	ldr	r3, [sp, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	f1aa 0a08 	sub.w	sl, sl, #8
 800e306:	dc69      	bgt.n	800e3dc <__kernel_rem_pio2+0x5ec>
 800e308:	46aa      	mov	sl, r5
 800e30a:	f1ba 0f01 	cmp.w	sl, #1
 800e30e:	f1a4 0408 	sub.w	r4, r4, #8
 800e312:	f300 8083 	bgt.w	800e41c <__kernel_rem_pio2+0x62c>
 800e316:	9c05      	ldr	r4, [sp, #20]
 800e318:	ab48      	add	r3, sp, #288	; 0x120
 800e31a:	441c      	add	r4, r3
 800e31c:	2000      	movs	r0, #0
 800e31e:	2100      	movs	r1, #0
 800e320:	2d01      	cmp	r5, #1
 800e322:	f300 809a 	bgt.w	800e45a <__kernel_rem_pio2+0x66a>
 800e326:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e32a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e32e:	f1bb 0f00 	cmp.w	fp, #0
 800e332:	f040 8098 	bne.w	800e466 <__kernel_rem_pio2+0x676>
 800e336:	9b04      	ldr	r3, [sp, #16]
 800e338:	e9c3 7800 	strd	r7, r8, [r3]
 800e33c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e340:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e344:	e7c6      	b.n	800e2d4 <__kernel_rem_pio2+0x4e4>
 800e346:	9e05      	ldr	r6, [sp, #20]
 800e348:	ab48      	add	r3, sp, #288	; 0x120
 800e34a:	441e      	add	r6, r3
 800e34c:	462c      	mov	r4, r5
 800e34e:	2000      	movs	r0, #0
 800e350:	2100      	movs	r1, #0
 800e352:	2c00      	cmp	r4, #0
 800e354:	da33      	bge.n	800e3be <__kernel_rem_pio2+0x5ce>
 800e356:	f1bb 0f00 	cmp.w	fp, #0
 800e35a:	d036      	beq.n	800e3ca <__kernel_rem_pio2+0x5da>
 800e35c:	4602      	mov	r2, r0
 800e35e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e362:	9c04      	ldr	r4, [sp, #16]
 800e364:	e9c4 2300 	strd	r2, r3, [r4]
 800e368:	4602      	mov	r2, r0
 800e36a:	460b      	mov	r3, r1
 800e36c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e370:	f7f1 ff8a 	bl	8000288 <__aeabi_dsub>
 800e374:	ae4a      	add	r6, sp, #296	; 0x128
 800e376:	2401      	movs	r4, #1
 800e378:	42a5      	cmp	r5, r4
 800e37a:	da29      	bge.n	800e3d0 <__kernel_rem_pio2+0x5e0>
 800e37c:	f1bb 0f00 	cmp.w	fp, #0
 800e380:	d002      	beq.n	800e388 <__kernel_rem_pio2+0x598>
 800e382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e386:	4619      	mov	r1, r3
 800e388:	9b04      	ldr	r3, [sp, #16]
 800e38a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e38e:	e7a1      	b.n	800e2d4 <__kernel_rem_pio2+0x4e4>
 800e390:	9c05      	ldr	r4, [sp, #20]
 800e392:	ab48      	add	r3, sp, #288	; 0x120
 800e394:	441c      	add	r4, r3
 800e396:	2000      	movs	r0, #0
 800e398:	2100      	movs	r1, #0
 800e39a:	2d00      	cmp	r5, #0
 800e39c:	da09      	bge.n	800e3b2 <__kernel_rem_pio2+0x5c2>
 800e39e:	f1bb 0f00 	cmp.w	fp, #0
 800e3a2:	d002      	beq.n	800e3aa <__kernel_rem_pio2+0x5ba>
 800e3a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	9b04      	ldr	r3, [sp, #16]
 800e3ac:	e9c3 0100 	strd	r0, r1, [r3]
 800e3b0:	e790      	b.n	800e2d4 <__kernel_rem_pio2+0x4e4>
 800e3b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e3b6:	f7f1 ff69 	bl	800028c <__adddf3>
 800e3ba:	3d01      	subs	r5, #1
 800e3bc:	e7ed      	b.n	800e39a <__kernel_rem_pio2+0x5aa>
 800e3be:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e3c2:	f7f1 ff63 	bl	800028c <__adddf3>
 800e3c6:	3c01      	subs	r4, #1
 800e3c8:	e7c3      	b.n	800e352 <__kernel_rem_pio2+0x562>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	e7c8      	b.n	800e362 <__kernel_rem_pio2+0x572>
 800e3d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e3d4:	f7f1 ff5a 	bl	800028c <__adddf3>
 800e3d8:	3401      	adds	r4, #1
 800e3da:	e7cd      	b.n	800e378 <__kernel_rem_pio2+0x588>
 800e3dc:	e9da 8900 	ldrd	r8, r9, [sl]
 800e3e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e3e4:	9b00      	ldr	r3, [sp, #0]
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	4632      	mov	r2, r6
 800e3ec:	463b      	mov	r3, r7
 800e3ee:	4640      	mov	r0, r8
 800e3f0:	4649      	mov	r1, r9
 800e3f2:	f7f1 ff4b 	bl	800028c <__adddf3>
 800e3f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	4640      	mov	r0, r8
 800e400:	4649      	mov	r1, r9
 800e402:	f7f1 ff41 	bl	8000288 <__aeabi_dsub>
 800e406:	4632      	mov	r2, r6
 800e408:	463b      	mov	r3, r7
 800e40a:	f7f1 ff3f 	bl	800028c <__adddf3>
 800e40e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e412:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e416:	ed8a 7b00 	vstr	d7, [sl]
 800e41a:	e770      	b.n	800e2fe <__kernel_rem_pio2+0x50e>
 800e41c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e420:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e424:	4640      	mov	r0, r8
 800e426:	4632      	mov	r2, r6
 800e428:	463b      	mov	r3, r7
 800e42a:	4649      	mov	r1, r9
 800e42c:	f7f1 ff2e 	bl	800028c <__adddf3>
 800e430:	e9cd 0100 	strd	r0, r1, [sp]
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	4640      	mov	r0, r8
 800e43a:	4649      	mov	r1, r9
 800e43c:	f7f1 ff24 	bl	8000288 <__aeabi_dsub>
 800e440:	4632      	mov	r2, r6
 800e442:	463b      	mov	r3, r7
 800e444:	f7f1 ff22 	bl	800028c <__adddf3>
 800e448:	ed9d 7b00 	vldr	d7, [sp]
 800e44c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e450:	ed84 7b00 	vstr	d7, [r4]
 800e454:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e458:	e757      	b.n	800e30a <__kernel_rem_pio2+0x51a>
 800e45a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e45e:	f7f1 ff15 	bl	800028c <__adddf3>
 800e462:	3d01      	subs	r5, #1
 800e464:	e75c      	b.n	800e320 <__kernel_rem_pio2+0x530>
 800e466:	9b04      	ldr	r3, [sp, #16]
 800e468:	9a04      	ldr	r2, [sp, #16]
 800e46a:	601f      	str	r7, [r3, #0]
 800e46c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e470:	605c      	str	r4, [r3, #4]
 800e472:	609d      	str	r5, [r3, #8]
 800e474:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e478:	60d3      	str	r3, [r2, #12]
 800e47a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e47e:	6110      	str	r0, [r2, #16]
 800e480:	6153      	str	r3, [r2, #20]
 800e482:	e727      	b.n	800e2d4 <__kernel_rem_pio2+0x4e4>
 800e484:	41700000 	.word	0x41700000
 800e488:	3e700000 	.word	0x3e700000
 800e48c:	00000000 	.word	0x00000000

0800e490 <scalbn>:
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	ec55 4b10 	vmov	r4, r5, d0
 800e496:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e49a:	4606      	mov	r6, r0
 800e49c:	462b      	mov	r3, r5
 800e49e:	b999      	cbnz	r1, 800e4c8 <scalbn+0x38>
 800e4a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e4a4:	4323      	orrs	r3, r4
 800e4a6:	d03f      	beq.n	800e528 <scalbn+0x98>
 800e4a8:	4b35      	ldr	r3, [pc, #212]	; (800e580 <scalbn+0xf0>)
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	ee10 0a10 	vmov	r0, s0
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f7f2 f8a1 	bl	80005f8 <__aeabi_dmul>
 800e4b6:	4b33      	ldr	r3, [pc, #204]	; (800e584 <scalbn+0xf4>)
 800e4b8:	429e      	cmp	r6, r3
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	460d      	mov	r5, r1
 800e4be:	da10      	bge.n	800e4e2 <scalbn+0x52>
 800e4c0:	a327      	add	r3, pc, #156	; (adr r3, 800e560 <scalbn+0xd0>)
 800e4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c6:	e01f      	b.n	800e508 <scalbn+0x78>
 800e4c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e4cc:	4291      	cmp	r1, r2
 800e4ce:	d10c      	bne.n	800e4ea <scalbn+0x5a>
 800e4d0:	ee10 2a10 	vmov	r2, s0
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	4629      	mov	r1, r5
 800e4d8:	f7f1 fed8 	bl	800028c <__adddf3>
 800e4dc:	4604      	mov	r4, r0
 800e4de:	460d      	mov	r5, r1
 800e4e0:	e022      	b.n	800e528 <scalbn+0x98>
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e4e8:	3936      	subs	r1, #54	; 0x36
 800e4ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e4ee:	4296      	cmp	r6, r2
 800e4f0:	dd0d      	ble.n	800e50e <scalbn+0x7e>
 800e4f2:	2d00      	cmp	r5, #0
 800e4f4:	a11c      	add	r1, pc, #112	; (adr r1, 800e568 <scalbn+0xd8>)
 800e4f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4fa:	da02      	bge.n	800e502 <scalbn+0x72>
 800e4fc:	a11c      	add	r1, pc, #112	; (adr r1, 800e570 <scalbn+0xe0>)
 800e4fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e502:	a319      	add	r3, pc, #100	; (adr r3, 800e568 <scalbn+0xd8>)
 800e504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e508:	f7f2 f876 	bl	80005f8 <__aeabi_dmul>
 800e50c:	e7e6      	b.n	800e4dc <scalbn+0x4c>
 800e50e:	1872      	adds	r2, r6, r1
 800e510:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e514:	428a      	cmp	r2, r1
 800e516:	dcec      	bgt.n	800e4f2 <scalbn+0x62>
 800e518:	2a00      	cmp	r2, #0
 800e51a:	dd08      	ble.n	800e52e <scalbn+0x9e>
 800e51c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e520:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e524:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e528:	ec45 4b10 	vmov	d0, r4, r5
 800e52c:	bd70      	pop	{r4, r5, r6, pc}
 800e52e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e532:	da08      	bge.n	800e546 <scalbn+0xb6>
 800e534:	2d00      	cmp	r5, #0
 800e536:	a10a      	add	r1, pc, #40	; (adr r1, 800e560 <scalbn+0xd0>)
 800e538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e53c:	dac0      	bge.n	800e4c0 <scalbn+0x30>
 800e53e:	a10e      	add	r1, pc, #56	; (adr r1, 800e578 <scalbn+0xe8>)
 800e540:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e544:	e7bc      	b.n	800e4c0 <scalbn+0x30>
 800e546:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e54a:	3236      	adds	r2, #54	; 0x36
 800e54c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e550:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e554:	4620      	mov	r0, r4
 800e556:	4b0c      	ldr	r3, [pc, #48]	; (800e588 <scalbn+0xf8>)
 800e558:	2200      	movs	r2, #0
 800e55a:	e7d5      	b.n	800e508 <scalbn+0x78>
 800e55c:	f3af 8000 	nop.w
 800e560:	c2f8f359 	.word	0xc2f8f359
 800e564:	01a56e1f 	.word	0x01a56e1f
 800e568:	8800759c 	.word	0x8800759c
 800e56c:	7e37e43c 	.word	0x7e37e43c
 800e570:	8800759c 	.word	0x8800759c
 800e574:	fe37e43c 	.word	0xfe37e43c
 800e578:	c2f8f359 	.word	0xc2f8f359
 800e57c:	81a56e1f 	.word	0x81a56e1f
 800e580:	43500000 	.word	0x43500000
 800e584:	ffff3cb0 	.word	0xffff3cb0
 800e588:	3c900000 	.word	0x3c900000
 800e58c:	00000000 	.word	0x00000000

0800e590 <floor>:
 800e590:	ec51 0b10 	vmov	r0, r1, d0
 800e594:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e59c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e5a0:	2e13      	cmp	r6, #19
 800e5a2:	ee10 5a10 	vmov	r5, s0
 800e5a6:	ee10 8a10 	vmov	r8, s0
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	dc31      	bgt.n	800e612 <floor+0x82>
 800e5ae:	2e00      	cmp	r6, #0
 800e5b0:	da14      	bge.n	800e5dc <floor+0x4c>
 800e5b2:	a333      	add	r3, pc, #204	; (adr r3, 800e680 <floor+0xf0>)
 800e5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b8:	f7f1 fe68 	bl	800028c <__adddf3>
 800e5bc:	2200      	movs	r2, #0
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f7f2 faaa 	bl	8000b18 <__aeabi_dcmpgt>
 800e5c4:	b138      	cbz	r0, 800e5d6 <floor+0x46>
 800e5c6:	2c00      	cmp	r4, #0
 800e5c8:	da53      	bge.n	800e672 <floor+0xe2>
 800e5ca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e5ce:	4325      	orrs	r5, r4
 800e5d0:	d052      	beq.n	800e678 <floor+0xe8>
 800e5d2:	4c2d      	ldr	r4, [pc, #180]	; (800e688 <floor+0xf8>)
 800e5d4:	2500      	movs	r5, #0
 800e5d6:	4621      	mov	r1, r4
 800e5d8:	4628      	mov	r0, r5
 800e5da:	e024      	b.n	800e626 <floor+0x96>
 800e5dc:	4f2b      	ldr	r7, [pc, #172]	; (800e68c <floor+0xfc>)
 800e5de:	4137      	asrs	r7, r6
 800e5e0:	ea01 0307 	and.w	r3, r1, r7
 800e5e4:	4303      	orrs	r3, r0
 800e5e6:	d01e      	beq.n	800e626 <floor+0x96>
 800e5e8:	a325      	add	r3, pc, #148	; (adr r3, 800e680 <floor+0xf0>)
 800e5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ee:	f7f1 fe4d 	bl	800028c <__adddf3>
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	f7f2 fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	d0eb      	beq.n	800e5d6 <floor+0x46>
 800e5fe:	2c00      	cmp	r4, #0
 800e600:	bfbe      	ittt	lt
 800e602:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e606:	4133      	asrlt	r3, r6
 800e608:	18e4      	addlt	r4, r4, r3
 800e60a:	ea24 0407 	bic.w	r4, r4, r7
 800e60e:	2500      	movs	r5, #0
 800e610:	e7e1      	b.n	800e5d6 <floor+0x46>
 800e612:	2e33      	cmp	r6, #51	; 0x33
 800e614:	dd0b      	ble.n	800e62e <floor+0x9e>
 800e616:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e61a:	d104      	bne.n	800e626 <floor+0x96>
 800e61c:	ee10 2a10 	vmov	r2, s0
 800e620:	460b      	mov	r3, r1
 800e622:	f7f1 fe33 	bl	800028c <__adddf3>
 800e626:	ec41 0b10 	vmov	d0, r0, r1
 800e62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e62e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e632:	f04f 37ff 	mov.w	r7, #4294967295
 800e636:	40df      	lsrs	r7, r3
 800e638:	4238      	tst	r0, r7
 800e63a:	d0f4      	beq.n	800e626 <floor+0x96>
 800e63c:	a310      	add	r3, pc, #64	; (adr r3, 800e680 <floor+0xf0>)
 800e63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e642:	f7f1 fe23 	bl	800028c <__adddf3>
 800e646:	2200      	movs	r2, #0
 800e648:	2300      	movs	r3, #0
 800e64a:	f7f2 fa65 	bl	8000b18 <__aeabi_dcmpgt>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d0c1      	beq.n	800e5d6 <floor+0x46>
 800e652:	2c00      	cmp	r4, #0
 800e654:	da0a      	bge.n	800e66c <floor+0xdc>
 800e656:	2e14      	cmp	r6, #20
 800e658:	d101      	bne.n	800e65e <floor+0xce>
 800e65a:	3401      	adds	r4, #1
 800e65c:	e006      	b.n	800e66c <floor+0xdc>
 800e65e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e662:	2301      	movs	r3, #1
 800e664:	40b3      	lsls	r3, r6
 800e666:	441d      	add	r5, r3
 800e668:	45a8      	cmp	r8, r5
 800e66a:	d8f6      	bhi.n	800e65a <floor+0xca>
 800e66c:	ea25 0507 	bic.w	r5, r5, r7
 800e670:	e7b1      	b.n	800e5d6 <floor+0x46>
 800e672:	2500      	movs	r5, #0
 800e674:	462c      	mov	r4, r5
 800e676:	e7ae      	b.n	800e5d6 <floor+0x46>
 800e678:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e67c:	e7ab      	b.n	800e5d6 <floor+0x46>
 800e67e:	bf00      	nop
 800e680:	8800759c 	.word	0x8800759c
 800e684:	7e37e43c 	.word	0x7e37e43c
 800e688:	bff00000 	.word	0xbff00000
 800e68c:	000fffff 	.word	0x000fffff

0800e690 <_init>:
 800e690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e692:	bf00      	nop
 800e694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e696:	bc08      	pop	{r3}
 800e698:	469e      	mov	lr, r3
 800e69a:	4770      	bx	lr

0800e69c <_fini>:
 800e69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69e:	bf00      	nop
 800e6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6a2:	bc08      	pop	{r3}
 800e6a4:	469e      	mov	lr, r3
 800e6a6:	4770      	bx	lr
